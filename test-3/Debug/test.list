
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004040  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce4  08004ce4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004ce4  08004ce4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ce4  08004ce4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000018  08004d04  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004d04  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f79  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002789  00000000  00000000  00031fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00034748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b846  00000000  00000000  00036820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f5a  00000000  00000000  00052066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa4dc  00000000  00000000  00065fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011049c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  001104f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080040e4 	.word	0x080040e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	080040e4 	.word	0x080040e4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <nano_wait>:
#define LCD_RESET_CLR GPIO_TYPE->BRR=1<<LCD_RESET

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	1c18      	adds	r0, r3, #0

08000228 <repeat>:
 8000228:	3853      	subs	r0, #83	; 0x53
 800022a:	dcfd      	bgt.n	8000228 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	b002      	add	sp, #8
 8000232:	bd80      	pop	{r7, pc}

08000234 <LCD_Reset>:

void LCD_Reset(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    // Assert reset
    GPIOA->BRR = 1<<LCD_RESET;
 8000238:	2390      	movs	r3, #144	; 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2204      	movs	r2, #4
 800023e:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(100000000);
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <LCD_Reset+0x2c>)
 8000242:	0018      	movs	r0, r3
 8000244:	f7ff ffea 	bl	800021c <nano_wait>
    GPIOA->BSRR = 1<<LCD_RESET;
 8000248:	2390      	movs	r3, #144	; 0x90
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2204      	movs	r2, #4
 800024e:	619a      	str	r2, [r3, #24]
    nano_wait(50000000);
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <LCD_Reset+0x30>)
 8000252:	0018      	movs	r0, r3
 8000254:	f7ff ffe2 	bl	800021c <nano_wait>
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	05f5e100 	.word	0x05f5e100
 8000264:	02faf080 	.word	0x02faf080

08000268 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	0002      	movs	r2, r0
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8000274:	46c0      	nop			; (mov r8, r8)
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <LCD_WR_REG+0x30>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2280      	movs	r2, #128	; 0x80
 800027c:	4013      	ands	r3, r2
 800027e:	d1fa      	bne.n	8000276 <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    LCD_RS_CLR;
 8000280:	2390      	movs	r3, #144	; 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2208      	movs	r2, #8
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    *((uint8_t*)&SPI->DR) = data;
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <LCD_WR_REG+0x34>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	7013      	strb	r3, [r2, #0]
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b002      	add	sp, #8
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40013000 	.word	0x40013000
 800029c:	4001300c 	.word	0x4001300c

080002a0 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	0002      	movs	r2, r0
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <LCD_WR_DATA+0x30>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	4013      	ands	r3, r2
 80002b6:	d1fa      	bne.n	80002ae <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    LCD_RS_SET;
 80002b8:	2390      	movs	r3, #144	; 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2208      	movs	r2, #8
 80002be:	619a      	str	r2, [r3, #24]
    *((uint8_t*)&SPI->DR) = data;
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <LCD_WR_DATA+0x34>)
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	7013      	strb	r3, [r2, #0]
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b002      	add	sp, #8
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40013000 	.word	0x40013000
 80002d4:	4001300c 	.word	0x4001300c

080002d8 <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    LCD_RS_SET;
 80002dc:	2390      	movs	r3, #144	; 0x90
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2208      	movs	r2, #8
 80002e2:	619a      	str	r2, [r3, #24]
    SPI->CR2 |= SPI_CR2_DS;
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <LCD_WriteData16_Prepare+0x20>)
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <LCD_WriteData16_Prepare+0x20>)
 80002ea:	21f0      	movs	r1, #240	; 0xf0
 80002ec:	0109      	lsls	r1, r1, #4
 80002ee:	430a      	orrs	r2, r1
 80002f0:	605a      	str	r2, [r3, #4]
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40013000 	.word	0x40013000

080002fc <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	0002      	movs	r2, r0
 8000304:	1dbb      	adds	r3, r7, #6
 8000306:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <LCD_WriteData16+0x28>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	2202      	movs	r2, #2
 8000310:	4013      	ands	r3, r2
 8000312:	d0fa      	beq.n	800030a <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <LCD_WriteData16+0x28>)
 8000316:	1dba      	adds	r2, r7, #6
 8000318:	8812      	ldrh	r2, [r2, #0]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b002      	add	sp, #8
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40013000 	.word	0x40013000

08000328 <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <LCD_WriteData16_End+0x18>)
 800032e:	685a      	ldr	r2, [r3, #4]
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <LCD_WriteData16_End+0x18>)
 8000332:	4904      	ldr	r1, [pc, #16]	; (8000344 <LCD_WriteData16_End+0x1c>)
 8000334:	400a      	ands	r2, r1
 8000336:	605a      	str	r2, [r3, #4]
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	40013000 	.word	0x40013000
 8000344:	fffff0ff 	.word	0xfffff0ff

08000348 <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	0002      	movs	r2, r0
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	701a      	strb	r2, [r3, #0]
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	1c0a      	adds	r2, r1, #0
 8000358:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	0018      	movs	r0, r3
 8000360:	f7ff ff82 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	0018      	movs	r0, r3
 800036c:	f7ff ff98 	bl	80002a0 <LCD_WR_DATA>
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b002      	add	sp, #8
 8000376:	bd80      	pop	{r7, pc}

08000378 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <LCD_WriteRAM_Prepare+0x18>)
 800037e:	891b      	ldrh	r3, [r3, #8]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	0018      	movs	r0, r3
 8000384:	f7ff ff70 	bl	8000268 <LCD_WR_REG>
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	20000044 	.word	0x20000044

08000394 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <LCD_direction+0xa4>)
 80003a2:	222a      	movs	r2, #42	; 0x2a
 80003a4:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 80003a6:	4b24      	ldr	r3, [pc, #144]	; (8000438 <LCD_direction+0xa4>)
 80003a8:	222b      	movs	r2, #43	; 0x2b
 80003aa:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 80003ac:	4b22      	ldr	r3, [pc, #136]	; (8000438 <LCD_direction+0xa4>)
 80003ae:	222c      	movs	r2, #44	; 0x2c
 80003b0:	811a      	strh	r2, [r3, #8]
    switch(direction){
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d02c      	beq.n	8000414 <LCD_direction+0x80>
 80003ba:	dc37      	bgt.n	800042c <LCD_direction+0x98>
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d01d      	beq.n	80003fc <LCD_direction+0x68>
 80003c0:	dc34      	bgt.n	800042c <LCD_direction+0x98>
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <LCD_direction+0x38>
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d00c      	beq.n	80003e4 <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 80003ca:	e02f      	b.n	800042c <LCD_direction+0x98>
        lcddev.width=LCD_W;
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <LCD_direction+0xa4>)
 80003ce:	22f0      	movs	r2, #240	; 0xf0
 80003d0:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <LCD_direction+0xa4>)
 80003d4:	22a0      	movs	r2, #160	; 0xa0
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80003da:	2108      	movs	r1, #8
 80003dc:	2036      	movs	r0, #54	; 0x36
 80003de:	f7ff ffb3 	bl	8000348 <LCD_WriteReg>
        break;
 80003e2:	e024      	b.n	800042e <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <LCD_direction+0xa4>)
 80003e6:	22a0      	movs	r2, #160	; 0xa0
 80003e8:	0052      	lsls	r2, r2, #1
 80003ea:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <LCD_direction+0xa4>)
 80003ee:	22f0      	movs	r2, #240	; 0xf0
 80003f0:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80003f2:	2168      	movs	r1, #104	; 0x68
 80003f4:	2036      	movs	r0, #54	; 0x36
 80003f6:	f7ff ffa7 	bl	8000348 <LCD_WriteReg>
        break;
 80003fa:	e018      	b.n	800042e <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <LCD_direction+0xa4>)
 80003fe:	22f0      	movs	r2, #240	; 0xf0
 8000400:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <LCD_direction+0xa4>)
 8000404:	22a0      	movs	r2, #160	; 0xa0
 8000406:	0052      	lsls	r2, r2, #1
 8000408:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 800040a:	21c8      	movs	r1, #200	; 0xc8
 800040c:	2036      	movs	r0, #54	; 0x36
 800040e:	f7ff ff9b 	bl	8000348 <LCD_WriteReg>
        break;
 8000412:	e00c      	b.n	800042e <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <LCD_direction+0xa4>)
 8000416:	22a0      	movs	r2, #160	; 0xa0
 8000418:	0052      	lsls	r2, r2, #1
 800041a:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <LCD_direction+0xa4>)
 800041e:	22f0      	movs	r2, #240	; 0xf0
 8000420:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8000422:	21a8      	movs	r1, #168	; 0xa8
 8000424:	2036      	movs	r0, #54	; 0x36
 8000426:	f7ff ff8f 	bl	8000348 <LCD_WriteReg>
        break;
 800042a:	e000      	b.n	800042e <LCD_direction+0x9a>
    default:break;
 800042c:	46c0      	nop			; (mov r8, r8)
    }
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000044 	.word	0x20000044

0800043c <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
    LCD_Reset();
 8000440:	f7ff fef8 	bl	8000234 <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8000444:	20cf      	movs	r0, #207	; 0xcf
 8000446:	f7ff ff0f 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff ff28 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8000450:	20d9      	movs	r0, #217	; 0xd9
 8000452:	f7ff ff25 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8000456:	2030      	movs	r0, #48	; 0x30
 8000458:	f7ff ff22 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 800045c:	20ed      	movs	r0, #237	; 0xed
 800045e:	f7ff ff03 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8000462:	2064      	movs	r0, #100	; 0x64
 8000464:	f7ff ff1c 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8000468:	2003      	movs	r0, #3
 800046a:	f7ff ff19 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 800046e:	2012      	movs	r0, #18
 8000470:	f7ff ff16 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8000474:	2081      	movs	r0, #129	; 0x81
 8000476:	f7ff ff13 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 800047a:	20e8      	movs	r0, #232	; 0xe8
 800047c:	f7ff fef4 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8000480:	2085      	movs	r0, #133	; 0x85
 8000482:	f7ff ff0d 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8000486:	2010      	movs	r0, #16
 8000488:	f7ff ff0a 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 800048c:	207a      	movs	r0, #122	; 0x7a
 800048e:	f7ff ff07 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8000492:	20cb      	movs	r0, #203	; 0xcb
 8000494:	f7ff fee8 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8000498:	2039      	movs	r0, #57	; 0x39
 800049a:	f7ff ff01 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 800049e:	202c      	movs	r0, #44	; 0x2c
 80004a0:	f7ff fefe 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80004a4:	2000      	movs	r0, #0
 80004a6:	f7ff fefb 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 80004aa:	2034      	movs	r0, #52	; 0x34
 80004ac:	f7ff fef8 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 80004b0:	2002      	movs	r0, #2
 80004b2:	f7ff fef5 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 80004b6:	20f7      	movs	r0, #247	; 0xf7
 80004b8:	f7ff fed6 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 80004bc:	2020      	movs	r0, #32
 80004be:	f7ff feef 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 80004c2:	20ea      	movs	r0, #234	; 0xea
 80004c4:	f7ff fed0 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff fee9 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fee6 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 80004d4:	20c0      	movs	r0, #192	; 0xc0
 80004d6:	f7ff fec7 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 80004da:	2021      	movs	r0, #33	; 0x21
 80004dc:	f7ff fee0 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 80004e0:	20c1      	movs	r0, #193	; 0xc1
 80004e2:	f7ff fec1 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 80004e6:	2012      	movs	r0, #18
 80004e8:	f7ff feda 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 80004ec:	20c5      	movs	r0, #197	; 0xc5
 80004ee:	f7ff febb 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 80004f2:	2039      	movs	r0, #57	; 0x39
 80004f4:	f7ff fed4 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 80004f8:	2037      	movs	r0, #55	; 0x37
 80004fa:	f7ff fed1 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 80004fe:	20c7      	movs	r0, #199	; 0xc7
 8000500:	f7ff feb2 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8000504:	20ab      	movs	r0, #171	; 0xab
 8000506:	f7ff fecb 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 800050a:	2036      	movs	r0, #54	; 0x36
 800050c:	f7ff feac 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 8000510:	2048      	movs	r0, #72	; 0x48
 8000512:	f7ff fec5 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8000516:	203a      	movs	r0, #58	; 0x3a
 8000518:	f7ff fea6 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 800051c:	2055      	movs	r0, #85	; 0x55
 800051e:	f7ff febf 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8000522:	20b1      	movs	r0, #177	; 0xb1
 8000524:	f7ff fea0 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff feb9 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 800052e:	201b      	movs	r0, #27
 8000530:	f7ff feb6 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8000534:	20b6      	movs	r0, #182	; 0xb6
 8000536:	f7ff fe97 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 800053a:	200a      	movs	r0, #10
 800053c:	f7ff feb0 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8000540:	20a2      	movs	r0, #162	; 0xa2
 8000542:	f7ff fead 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000546:	20f2      	movs	r0, #242	; 0xf2
 8000548:	f7ff fe8e 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff fea7 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8000552:	2026      	movs	r0, #38	; 0x26
 8000554:	f7ff fe88 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff fea1 	bl	80002a0 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 800055e:	20e0      	movs	r0, #224	; 0xe0
 8000560:	f7ff fe82 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8000564:	200f      	movs	r0, #15
 8000566:	f7ff fe9b 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 800056a:	2023      	movs	r0, #35	; 0x23
 800056c:	f7ff fe98 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8000570:	201f      	movs	r0, #31
 8000572:	f7ff fe95 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8000576:	200b      	movs	r0, #11
 8000578:	f7ff fe92 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 800057c:	200e      	movs	r0, #14
 800057e:	f7ff fe8f 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8000582:	2008      	movs	r0, #8
 8000584:	f7ff fe8c 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8000588:	204b      	movs	r0, #75	; 0x4b
 800058a:	f7ff fe89 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 800058e:	20a8      	movs	r0, #168	; 0xa8
 8000590:	f7ff fe86 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8000594:	203b      	movs	r0, #59	; 0x3b
 8000596:	f7ff fe83 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 800059a:	200a      	movs	r0, #10
 800059c:	f7ff fe80 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 80005a0:	2014      	movs	r0, #20
 80005a2:	f7ff fe7d 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 80005a6:	2006      	movs	r0, #6
 80005a8:	f7ff fe7a 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 80005ac:	2010      	movs	r0, #16
 80005ae:	f7ff fe77 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 80005b2:	2009      	movs	r0, #9
 80005b4:	f7ff fe74 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff fe71 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 80005be:	20e1      	movs	r0, #225	; 0xe1
 80005c0:	f7ff fe52 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fe6b 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 80005ca:	201c      	movs	r0, #28
 80005cc:	f7ff fe68 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 80005d0:	2020      	movs	r0, #32
 80005d2:	f7ff fe65 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 80005d6:	2004      	movs	r0, #4
 80005d8:	f7ff fe62 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 80005dc:	2010      	movs	r0, #16
 80005de:	f7ff fe5f 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 80005e2:	2008      	movs	r0, #8
 80005e4:	f7ff fe5c 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 80005e8:	2034      	movs	r0, #52	; 0x34
 80005ea:	f7ff fe59 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 80005ee:	2047      	movs	r0, #71	; 0x47
 80005f0:	f7ff fe56 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 80005f4:	2044      	movs	r0, #68	; 0x44
 80005f6:	f7ff fe53 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 80005fa:	2005      	movs	r0, #5
 80005fc:	f7ff fe50 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8000600:	200b      	movs	r0, #11
 8000602:	f7ff fe4d 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8000606:	2009      	movs	r0, #9
 8000608:	f7ff fe4a 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 800060c:	202f      	movs	r0, #47	; 0x2f
 800060e:	f7ff fe47 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8000612:	2036      	movs	r0, #54	; 0x36
 8000614:	f7ff fe44 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8000618:	200f      	movs	r0, #15
 800061a:	f7ff fe41 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 800061e:	202b      	movs	r0, #43	; 0x2b
 8000620:	f7ff fe22 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff fe3b 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff fe38 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff fe35 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8000636:	203f      	movs	r0, #63	; 0x3f
 8000638:	f7ff fe32 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 800063c:	202a      	movs	r0, #42	; 0x2a
 800063e:	f7ff fe13 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fe2c 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff fe29 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff fe26 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8000654:	20ef      	movs	r0, #239	; 0xef
 8000656:	f7ff fe23 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 800065a:	2011      	movs	r0, #17
 800065c:	f7ff fe04 	bl	8000268 <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <LCD_Init+0x240>)
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fdda 	bl	800021c <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 8000668:	2029      	movs	r0, #41	; 0x29
 800066a:	f7ff fdfd 	bl	8000268 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff fe90 	bl	8000394 <LCD_direction>
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	07270e00 	.word	0x07270e00

08000680 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	0002      	movs	r2, r0
 8000688:	1dbb      	adds	r3, r7, #6
 800068a:	801a      	strh	r2, [r3, #0]
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <LCD_Clear+0x6c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	1e5a      	subs	r2, r3, #1
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <LCD_Clear+0x6c>)
 8000694:	885b      	ldrh	r3, [r3, #2]
 8000696:	3b01      	subs	r3, #1
 8000698:	2100      	movs	r1, #0
 800069a:	2000      	movs	r0, #0
 800069c:	f000 f828 	bl	80006f0 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 80006a0:	f7ff fe1a 	bl	80002d8 <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e013      	b.n	80006d2 <LCD_Clear+0x52>
    {
        for(m=0;m<lcddev.width;m++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	e007      	b.n	80006c0 <LCD_Clear+0x40>
        {
            LCD_WriteData16(Color);
 80006b0:	1dbb      	adds	r3, r7, #6
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fe21 	bl	80002fc <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	3301      	adds	r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <LCD_Clear+0x6c>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	001a      	movs	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d3f1      	bcc.n	80006b0 <LCD_Clear+0x30>
    for(i=0;i<lcddev.height;i++)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <LCD_Clear+0x6c>)
 80006d4:	885b      	ldrh	r3, [r3, #2]
 80006d6:	001a      	movs	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4293      	cmp	r3, r2
 80006dc:	d3e5      	bcc.n	80006aa <LCD_Clear+0x2a>
        }
    }
    LCD_WriteData16_End();
 80006de:	f7ff fe23 	bl	8000328 <LCD_WriteData16_End>
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b004      	add	sp, #16
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000044 	.word	0x20000044

080006f0 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0005      	movs	r5, r0
 80006f8:	000c      	movs	r4, r1
 80006fa:	0010      	movs	r0, r2
 80006fc:	0019      	movs	r1, r3
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	1c2a      	adds	r2, r5, #0
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	1c22      	adds	r2, r4, #0
 8000708:	801a      	strh	r2, [r3, #0]
 800070a:	1cbb      	adds	r3, r7, #2
 800070c:	1c02      	adds	r2, r0, #0
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	003b      	movs	r3, r7
 8000712:	1c0a      	adds	r2, r1, #0
 8000714:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <LCD_SetWindow+0xbc>)
 8000718:	895b      	ldrh	r3, [r3, #10]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fda3 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	b29b      	uxth	r3, r3
 800072a:	b2db      	uxtb	r3, r3
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff fdb7 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8000732:	1dbb      	adds	r3, r7, #6
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff fdb1 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 800073e:	1cbb      	adds	r3, r7, #2
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff fda9 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 800074e:	1cbb      	adds	r3, r7, #2
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff fda3 	bl	80002a0 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <LCD_SetWindow+0xbc>)
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fd81 	bl	8000268 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fd95 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff fd8f 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8000782:	003b      	movs	r3, r7
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff fd87 	bl	80002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8000792:	003b      	movs	r3, r7
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fd81 	bl	80002a0 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 800079e:	f7ff fdeb 	bl	8000378 <LCD_WriteRAM_Prepare>
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bdb0      	pop	{r4, r5, r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	20000044 	.word	0x20000044

080007b0 <LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
void LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	0004      	movs	r4, r0
 80007b8:	0008      	movs	r0, r1
 80007ba:	0011      	movs	r1, r2
 80007bc:	1dbb      	adds	r3, r7, #6
 80007be:	1c22      	adds	r2, r4, #0
 80007c0:	801a      	strh	r2, [r3, #0]
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	1c02      	adds	r2, r0, #0
 80007c6:	801a      	strh	r2, [r3, #0]
 80007c8:	1cbb      	adds	r3, r7, #2
 80007ca:	1c0a      	adds	r2, r1, #0
 80007cc:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	881c      	ldrh	r4, [r3, #0]
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	881a      	ldrh	r2, [r3, #0]
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	8819      	ldrh	r1, [r3, #0]
 80007da:	1dbb      	adds	r3, r7, #6
 80007dc:	8818      	ldrh	r0, [r3, #0]
 80007de:	0023      	movs	r3, r4
 80007e0:	f7ff ff86 	bl	80006f0 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 80007e4:	f7ff fd78 	bl	80002d8 <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 80007e8:	1cbb      	adds	r3, r7, #2
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff fd85 	bl	80002fc <LCD_WriteData16>
    LCD_WriteData16_End();
 80007f2:	f7ff fd99 	bl	8000328 <LCD_WriteData16_End>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b003      	add	sp, #12
 80007fc:	bd90      	pop	{r4, r7, pc}
	...

08000800 <LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8000800:	b5b0      	push	{r4, r5, r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	0005      	movs	r5, r0
 8000808:	000c      	movs	r4, r1
 800080a:	0010      	movs	r0, r2
 800080c:	0019      	movs	r1, r3
 800080e:	1dbb      	adds	r3, r7, #6
 8000810:	1c2a      	adds	r2, r5, #0
 8000812:	801a      	strh	r2, [r3, #0]
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	1c22      	adds	r2, r4, #0
 8000818:	801a      	strh	r2, [r3, #0]
 800081a:	1cbb      	adds	r3, r7, #2
 800081c:	1c02      	adds	r2, r0, #0
 800081e:	801a      	strh	r2, [r3, #0]
 8000820:	003b      	movs	r3, r7
 8000822:	1c0a      	adds	r2, r1, #0
 8000824:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 8000826:	2220      	movs	r2, #32
 8000828:	18bb      	adds	r3, r7, r2
 800082a:	18ba      	adds	r2, r7, r2
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	3a20      	subs	r2, #32
 8000830:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8000832:	2124      	movs	r1, #36	; 0x24
 8000834:	187b      	adds	r3, r7, r1
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	18d3      	adds	r3, r2, r3
 8000844:	b29b      	uxth	r3, r3
 8000846:	3b01      	subs	r3, #1
 8000848:	b29c      	uxth	r4, r3
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	3b01      	subs	r3, #1
 800085a:	b29a      	uxth	r2, r3
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	8819      	ldrh	r1, [r3, #0]
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	8818      	ldrh	r0, [r3, #0]
 8000864:	0013      	movs	r3, r2
 8000866:	0022      	movs	r2, r4
 8000868:	f7ff ff42 	bl	80006f0 <LCD_SetWindow>
    if (!mode) {
 800086c:	2328      	movs	r3, #40	; 0x28
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d166      	bne.n	8000944 <LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 8000876:	f7ff fd2f 	bl	80002d8 <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 800087a:	230e      	movs	r3, #14
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e054      	b.n	800092e <LCD_DrawChar+0x12e>
            if (size==12)
 8000884:	2324      	movs	r3, #36	; 0x24
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b0c      	cmp	r3, #12
 800088c:	d110      	bne.n	80008b0 <LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 800088e:	2320      	movs	r3, #32
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	230e      	movs	r3, #14
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	7818      	ldrb	r0, [r3, #0]
 800089a:	230f      	movs	r3, #15
 800089c:	18f9      	adds	r1, r7, r3
 800089e:	4c61      	ldr	r4, [pc, #388]	; (8000a24 <LCD_DrawChar+0x224>)
 80008a0:	0013      	movs	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	189b      	adds	r3, r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18e3      	adds	r3, r4, r3
 80008aa:	5c1b      	ldrb	r3, [r3, r0]
 80008ac:	700b      	strb	r3, [r1, #0]
 80008ae:	e00c      	b.n	80008ca <LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 80008b0:	2320      	movs	r3, #32
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	7819      	ldrb	r1, [r3, #0]
 80008b6:	230e      	movs	r3, #14
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	230f      	movs	r3, #15
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	4859      	ldr	r0, [pc, #356]	; (8000a28 <LCD_DrawChar+0x228>)
 80008c2:	0109      	lsls	r1, r1, #4
 80008c4:	1841      	adds	r1, r0, r1
 80008c6:	5c8a      	ldrb	r2, [r1, r2]
 80008c8:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 80008ca:	230d      	movs	r3, #13
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e01c      	b.n	800090e <LCD_DrawChar+0x10e>
                if (temp&0x01)
 80008d4:	230f      	movs	r3, #15
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	d005      	beq.n	80008ec <LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 80008e0:	1cbb      	adds	r3, r7, #2
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff fd09 	bl	80002fc <LCD_WriteData16>
 80008ea:	e004      	b.n	80008f6 <LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 80008ec:	003b      	movs	r3, r7
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff fd03 	bl	80002fc <LCD_WriteData16>
                temp>>=1;
 80008f6:	220f      	movs	r2, #15
 80008f8:	18bb      	adds	r3, r7, r2
 80008fa:	18ba      	adds	r2, r7, r2
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0852      	lsrs	r2, r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8000902:	210d      	movs	r1, #13
 8000904:	187b      	adds	r3, r7, r1
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	187b      	adds	r3, r7, r1
 800090a:	3201      	adds	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	2324      	movs	r3, #36	; 0x24
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	220d      	movs	r2, #13
 800091a:	18ba      	adds	r2, r7, r2
 800091c:	7812      	ldrb	r2, [r2, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	d3d8      	bcc.n	80008d4 <LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 8000922:	210e      	movs	r1, #14
 8000924:	187b      	adds	r3, r7, r1
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	187b      	adds	r3, r7, r1
 800092a:	3201      	adds	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	230e      	movs	r3, #14
 8000930:	18fa      	adds	r2, r7, r3
 8000932:	2324      	movs	r3, #36	; 0x24
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	7812      	ldrb	r2, [r2, #0]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	429a      	cmp	r2, r3
 800093c:	d3a2      	bcc.n	8000884 <LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 800093e:	f7ff fcf3 	bl	8000328 <LCD_WriteData16_End>
                    LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 8000942:	e06b      	b.n	8000a1c <LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 8000944:	230e      	movs	r3, #14
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e05e      	b.n	8000a0c <LCD_DrawChar+0x20c>
            if (size==12)
 800094e:	2324      	movs	r3, #36	; 0x24
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b0c      	cmp	r3, #12
 8000956:	d110      	bne.n	800097a <LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 8000958:	2320      	movs	r3, #32
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	230e      	movs	r3, #14
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	7818      	ldrb	r0, [r3, #0]
 8000964:	230f      	movs	r3, #15
 8000966:	18f9      	adds	r1, r7, r3
 8000968:	4c2e      	ldr	r4, [pc, #184]	; (8000a24 <LCD_DrawChar+0x224>)
 800096a:	0013      	movs	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	189b      	adds	r3, r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	18e3      	adds	r3, r4, r3
 8000974:	5c1b      	ldrb	r3, [r3, r0]
 8000976:	700b      	strb	r3, [r1, #0]
 8000978:	e00c      	b.n	8000994 <LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 800097a:	2320      	movs	r3, #32
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	7819      	ldrb	r1, [r3, #0]
 8000980:	230e      	movs	r3, #14
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	230f      	movs	r3, #15
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	4827      	ldr	r0, [pc, #156]	; (8000a28 <LCD_DrawChar+0x228>)
 800098c:	0109      	lsls	r1, r1, #4
 800098e:	1841      	adds	r1, r0, r1
 8000990:	5c8a      	ldrb	r2, [r1, r2]
 8000992:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8000994:	230d      	movs	r3, #13
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e026      	b.n	80009ec <LCD_DrawChar+0x1ec>
                if(temp&0x01)
 800099e:	230f      	movs	r3, #15
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2201      	movs	r2, #1
 80009a6:	4013      	ands	r3, r2
 80009a8:	d014      	beq.n	80009d4 <LCD_DrawChar+0x1d4>
                    LCD_DrawPoint(x+t,y+pos,fc);
 80009aa:	230d      	movs	r3, #13
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	1dbb      	adds	r3, r7, #6
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	b298      	uxth	r0, r3
 80009ba:	230e      	movs	r3, #14
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	18d3      	adds	r3, r2, r3
 80009c8:	b299      	uxth	r1, r3
 80009ca:	1cbb      	adds	r3, r7, #2
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	f7ff feee 	bl	80007b0 <LCD_DrawPoint>
                temp>>=1;
 80009d4:	220f      	movs	r2, #15
 80009d6:	18bb      	adds	r3, r7, r2
 80009d8:	18ba      	adds	r2, r7, r2
 80009da:	7812      	ldrb	r2, [r2, #0]
 80009dc:	0852      	lsrs	r2, r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 80009e0:	210d      	movs	r1, #13
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	3201      	adds	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	2324      	movs	r3, #36	; 0x24
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	085b      	lsrs	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	220d      	movs	r2, #13
 80009f8:	18ba      	adds	r2, r7, r2
 80009fa:	7812      	ldrb	r2, [r2, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d3ce      	bcc.n	800099e <LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 8000a00:	210e      	movs	r1, #14
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	3201      	adds	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	230e      	movs	r3, #14
 8000a0e:	18fa      	adds	r2, r7, r3
 8000a10:	2324      	movs	r3, #36	; 0x24
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d398      	bcc.n	800094e <LCD_DrawChar+0x14e>
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b004      	add	sp, #16
 8000a22:	bdb0      	pop	{r4, r5, r7, pc}
 8000a24:	08004270 	.word	0x08004270
 8000a28:	080046e4 	.word	0x080046e4

08000a2c <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af04      	add	r7, sp, #16
 8000a32:	0005      	movs	r5, r0
 8000a34:	000c      	movs	r4, r1
 8000a36:	0010      	movs	r0, r2
 8000a38:	0019      	movs	r1, r3
 8000a3a:	1dbb      	adds	r3, r7, #6
 8000a3c:	1c2a      	adds	r2, r5, #0
 8000a3e:	801a      	strh	r2, [r3, #0]
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	1c22      	adds	r2, r4, #0
 8000a44:	801a      	strh	r2, [r3, #0]
 8000a46:	1cbb      	adds	r3, r7, #2
 8000a48:	1c02      	adds	r2, r0, #0
 8000a4a:	801a      	strh	r2, [r3, #0]
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	1c0a      	adds	r2, r1, #0
 8000a50:	801a      	strh	r2, [r3, #0]
    while((*p<='~')&&(*p>=' '))
 8000a52:	e036      	b.n	8000ac2 <LCD_DrawString+0x96>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <LCD_DrawString+0xb0>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	1dba      	adds	r2, r7, #6
 8000a5a:	8812      	ldrh	r2, [r2, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d239      	bcs.n	8000ad4 <LCD_DrawString+0xa8>
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <LCD_DrawString+0xb0>)
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	1d3a      	adds	r2, r7, #4
 8000a66:	8812      	ldrh	r2, [r2, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d233      	bcs.n	8000ad4 <LCD_DrawString+0xa8>
        return;
        LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	003a      	movs	r2, r7
 8000a72:	8815      	ldrh	r5, [r2, #0]
 8000a74:	1cba      	adds	r2, r7, #2
 8000a76:	8814      	ldrh	r4, [r2, #0]
 8000a78:	1d3a      	adds	r2, r7, #4
 8000a7a:	8811      	ldrh	r1, [r2, #0]
 8000a7c:	1dba      	adds	r2, r7, #6
 8000a7e:	8810      	ldrh	r0, [r2, #0]
 8000a80:	2220      	movs	r2, #32
 8000a82:	2608      	movs	r6, #8
 8000a84:	46b4      	mov	ip, r6
 8000a86:	44bc      	add	ip, r7
 8000a88:	4462      	add	r2, ip
 8000a8a:	7812      	ldrb	r2, [r2, #0]
 8000a8c:	9202      	str	r2, [sp, #8]
 8000a8e:	261c      	movs	r6, #28
 8000a90:	2208      	movs	r2, #8
 8000a92:	18ba      	adds	r2, r7, r2
 8000a94:	1992      	adds	r2, r2, r6
 8000a96:	7812      	ldrb	r2, [r2, #0]
 8000a98:	9201      	str	r2, [sp, #4]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	002b      	movs	r3, r5
 8000a9e:	0022      	movs	r2, r4
 8000aa0:	f7ff feae 	bl	8000800 <LCD_DrawChar>
        x+=size/2;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	199b      	adds	r3, r3, r6
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	1dbb      	adds	r3, r7, #6
 8000ab4:	1dba      	adds	r2, r7, #6
 8000ab6:	8812      	ldrh	r2, [r2, #0]
 8000ab8:	188a      	adds	r2, r1, r2
 8000aba:	801a      	strh	r2, [r3, #0]
        p++;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ac8:	d805      	bhi.n	8000ad6 <LCD_DrawString+0xaa>
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b1f      	cmp	r3, #31
 8000ad0:	d8c0      	bhi.n	8000a54 <LCD_DrawString+0x28>
 8000ad2:	e000      	b.n	8000ad6 <LCD_DrawString+0xaa>
        return;
 8000ad4:	46c0      	nop			; (mov r8, r8)
    }
}
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b003      	add	sp, #12
 8000ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000adc:	20000044 	.word	0x20000044

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fda3 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f85d 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 fa8b 	bl	8001008 <MX_GPIO_Init>
  MX_ADC_Init();
 8000af2:	f000 f89f 	bl	8000c34 <MX_ADC_Init>
  MX_I2C2_Init();
 8000af6:	f000 f8f9 	bl	8000cec <MX_I2C2_Init>
  MX_SPI1_Init();
 8000afa:	f000 f937 	bl	8000d6c <MX_SPI1_Init>
  MX_DMA_Init();
 8000afe:	f000 fa65 	bl	8000fcc <MX_DMA_Init>
  MX_TIM1_Init();
 8000b02:	f000 f9cd 	bl	8000ea0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 8000b06:	f7ff fc99 	bl	800043c <LCD_Init>
  LCD_Clear(BLUE);
 8000b0a:	201f      	movs	r0, #31
 8000b0c:	f7ff fdb8 	bl	8000680 <LCD_Clear>
  for (int i = 0; i < 3; i++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	e01c      	b.n	8000b50 <main+0x70>
	LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	1c1a      	adds	r2, r3, #0
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	1c1a      	adds	r2, r3, #0
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3319      	adds	r3, #25
 8000b2a:	b298      	uxth	r0, r3
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <main+0xb4>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	58d3      	ldr	r3, [r2, r3]
 8000b34:	4918      	ldr	r1, [pc, #96]	; (8000b98 <main+0xb8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	9202      	str	r2, [sp, #8]
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	9201      	str	r2, [sp, #4]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	231f      	movs	r3, #31
 8000b42:	000a      	movs	r2, r1
 8000b44:	21c8      	movs	r1, #200	; 0xc8
 8000b46:	f7ff ff71 	bl	8000a2c <LCD_DrawString>
  for (int i = 0; i < 3; i++) {
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	dddf      	ble.n	8000b16 <main+0x36>
  }
  LCD_DrawString(25,200,  YELLOW, BLACK, menu[0], 16, 0);
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <main+0xb4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	490f      	ldr	r1, [pc, #60]	; (8000b98 <main+0xb8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	9202      	str	r2, [sp, #8]
 8000b60:	2210      	movs	r2, #16
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	000a      	movs	r2, r1
 8000b6a:	21c8      	movs	r1, #200	; 0xc8
 8000b6c:	2019      	movs	r0, #25
 8000b6e:	f7ff ff5d 	bl	8000a2c <LCD_DrawString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);//disable motor
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <main+0xbc>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	2101      	movs	r1, #1
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 ff39 	bl	80029f0 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_buf, ADC_BUF_LEN);
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <main+0xc0>)
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <main+0xc4>)
 8000b82:	220a      	movs	r2, #10
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 ff1b 	bl	80019c0 <HAL_ADC_Start_DMA>
  while(1)
	{
	  HAL_Delay(100);
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f000 fdb4 	bl	80016f8 <HAL_Delay>
 8000b90:	e7fb      	b.n	8000b8a <main+0xaa>
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000000 	.word	0x20000000
 8000b98:	0000ffe0 	.word	0x0000ffe0
 8000b9c:	48000800 	.word	0x48000800
 8000ba0:	2000014c 	.word	0x2000014c
 8000ba4:	200001a4 	.word	0x200001a4

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b093      	sub	sp, #76	; 0x4c
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	2414      	movs	r4, #20
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2334      	movs	r3, #52	; 0x34
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f003 fa8b 	bl	80040d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	f003 fa84 	bl	80040d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000bcc:	0021      	movs	r1, r4
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2212      	movs	r2, #18
 8000bd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2201      	movs	r2, #1
 8000bde:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2210      	movs	r2, #16
 8000be4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2210      	movs	r2, #16
 8000bea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f002 f863 	bl	8002cc0 <HAL_RCC_OscConfig>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000bfe:	f000 fb09 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 fbd4 	bl	80033cc <HAL_RCC_ClockConfig>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c28:	f000 faf4 	bl	8001214 <Error_Handler>
  }
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b013      	add	sp, #76	; 0x4c
 8000c32:	bd90      	pop	{r4, r7, pc}

08000c34 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	230c      	movs	r3, #12
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f003 fa46 	bl	80040d4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c4a:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <MX_ADC_Init+0xb4>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c68:	2204      	movs	r2, #4
 8000c6a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c86:	22c2      	movs	r2, #194	; 0xc2
 8000c88:	32ff      	adds	r2, #255	; 0xff
 8000c8a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c94:	2224      	movs	r2, #36	; 0x24
 8000c96:	2101      	movs	r1, #1
 8000c98:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 fd4c 	bl	8001740 <HAL_ADC_Init>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000cac:	f000 fab2 	bl	8001214 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	0152      	lsls	r2, r2, #5
 8000cbc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	0552      	lsls	r2, r2, #21
 8000cc4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cc6:	1d3a      	adds	r2, r7, #4
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_ADC_Init+0xb0>)
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 ff77 	bl	8001bc0 <HAL_ADC_ConfigChannel>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000cd6:	f000 fa9d 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	200001a4 	.word	0x200001a4
 8000ce8:	40012400 	.word	0x40012400

08000cec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_I2C2_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <MX_I2C2_Init+0x7c>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f001 fe9b 	bl	8002a64 <HAL_I2C_Init>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 fa6f 	bl	8001214 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f001 ff28 	bl	8002b90 <HAL_I2CEx_ConfigAnalogFilter>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 fa66 	bl	8001214 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <MX_I2C2_Init+0x74>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 ff6b 	bl	8002c28 <HAL_I2CEx_ConfigDigitalFilter>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 fa5d 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000054 	.word	0x20000054
 8000d64:	40005800 	.word	0x40005800
 8000d68:	2000090e 	.word	0x2000090e

08000d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d70:	4b45      	ldr	r3, [pc, #276]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000d72:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000d78:	2282      	movs	r2, #130	; 0x82
 8000d7a:	0052      	lsls	r2, r2, #1
 8000d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000d86:	22c0      	movs	r2, #192	; 0xc0
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	02d2      	lsls	r2, r2, #11
 8000d9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000dba:	2207      	movs	r2, #7
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc4:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_SPI1_Init+0x11c>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 fc57 	bl	8003680 <HAL_SPI_Init>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 fa1d 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_SPI1_Init+0x124>)
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <MX_SPI1_Init+0x124>)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	0289      	lsls	r1, r1, #10
 8000de4:	430a      	orrs	r2, r1
 8000de6:	615a      	str	r2, [r3, #20]
  GPIOA -> MODER &= ~GPIO_MODER_MODER4 & ~GPIO_MODER_MODER5 & ~GPIO_MODER_MODER7;
 8000de8:	2390      	movs	r3, #144	; 0x90
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	2390      	movs	r3, #144	; 0x90
 8000df0:	05db      	lsls	r3, r3, #23
 8000df2:	4928      	ldr	r1, [pc, #160]	; (8000e94 <MX_SPI1_Init+0x128>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8000df8:	2390      	movs	r3, #144	; 0x90
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2390      	movs	r3, #144	; 0x90
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	218a      	movs	r1, #138	; 0x8a
 8000e04:	0209      	lsls	r1, r1, #8
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER &= ~GPIO_MODER_MODER2 & ~GPIO_MODER_MODER3;
 8000e0a:	2390      	movs	r3, #144	; 0x90
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2390      	movs	r3, #144	; 0x90
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	21f0      	movs	r1, #240	; 0xf0
 8000e16:	438a      	bics	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
 8000e1a:	2390      	movs	r3, #144	; 0x90
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2390      	movs	r3, #144	; 0x90
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	2150      	movs	r1, #80	; 0x50
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL4 & ~GPIO_AFRL_AFRL5 & ~GPIO_AFRL_AFRL7;
 8000e2a:	2390      	movs	r3, #144	; 0x90
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
 8000e30:	2390      	movs	r3, #144	; 0x90
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	4918      	ldr	r1, [pc, #96]	; (8000e98 <MX_SPI1_Init+0x12c>)
 8000e36:	400a      	ands	r2, r1
 8000e38:	621a      	str	r2, [r3, #32]

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_SPI1_Init+0x124>)
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_SPI1_Init+0x124>)
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	0149      	lsls	r1, r1, #5
 8000e44:	430a      	orrs	r2, r1
 8000e46:	619a      	str	r2, [r3, #24]
  SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e4e:	4913      	ldr	r1, [pc, #76]	; (8000e9c <MX_SPI1_Init+0x130>)
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
  SPI1->CR1 &= ~SPI_CR1_BR;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e5a:	2138      	movs	r1, #56	; 0x38
 8000e5c:	438a      	bics	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
  SPI1->CR2 = SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e62:	22e0      	movs	r2, #224	; 0xe0
 8000e64:	00d2      	lsls	r2, r2, #3
 8000e66:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |= SPI_CR2_NSSP | SPI_CR2_SSOE;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e6e:	210c      	movs	r1, #12
 8000e70:	430a      	orrs	r2, r1
 8000e72:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <MX_SPI1_Init+0x120>)
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	200000e8 	.word	0x200000e8
 8000e8c:	40013000 	.word	0x40013000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	ffff30ff 	.word	0xffff30ff
 8000e98:	0f00ffff 	.word	0x0f00ffff
 8000e9c:	0000c004 	.word	0x0000c004

08000ea0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b092      	sub	sp, #72	; 0x48
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea6:	2340      	movs	r3, #64	; 0x40
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	0018      	movs	r0, r3
 8000eac:	2308      	movs	r3, #8
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f003 f90f 	bl	80040d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb6:	2324      	movs	r3, #36	; 0x24
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	0018      	movs	r0, r3
 8000ebc:	231c      	movs	r3, #28
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f003 f907 	bl	80040d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	2320      	movs	r3, #32
 8000ecc:	001a      	movs	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f003 f900 	bl	80040d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000ed6:	4a3b      	ldr	r2, [pc, #236]	; (8000fc4 <MX_TIM1_Init+0x124>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000ee8:	4a37      	ldr	r2, [pc, #220]	; (8000fc8 <MX_TIM1_Init+0x128>)
 8000eea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f002 fc75 	bl	80037f0 <HAL_TIM_PWM_Init>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 f983 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f1c:	187a      	adds	r2, r7, r1
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f002 fff6 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f2c:	f000 f972 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f30:	2124      	movs	r1, #36	; 0x24
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2260      	movs	r2, #96	; 0x60
 8000f36:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5c:	1879      	adds	r1, r7, r1
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	0018      	movs	r0, r3
 8000f64:	f002 fc94 	bl	8003890 <HAL_TIM_PWM_ConfigChannel>
 8000f68:	1e03      	subs	r3, r0, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000f6c:	f000 f952 	bl	8001214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0192      	lsls	r2, r2, #6
 8000f94:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f9c:	1d3a      	adds	r2, r7, #4
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f003 f814 	bl	8003fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000fac:	f000 f932 	bl	8001214 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */



  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <MX_TIM1_Init+0x120>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fa96 	bl	80014e4 <HAL_TIM_MspPostInit>

}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b012      	add	sp, #72	; 0x48
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000a0 	.word	0x200000a0
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	0000ffff 	.word	0x0000ffff

08000fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_DMA_Init+0x38>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_DMA_Init+0x38>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_DMA_Init+0x38>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2009      	movs	r0, #9
 8000ff0:	f001 f966 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000ff4:	2009      	movs	r0, #9
 8000ff6:	f001 f978 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40021000 	.word	0x40021000

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	240c      	movs	r4, #12
 8001010:	193b      	adds	r3, r7, r4
 8001012:	0018      	movs	r0, r3
 8001014:	2314      	movs	r3, #20
 8001016:	001a      	movs	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	f003 f85b 	bl	80040d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b51      	ldr	r3, [pc, #324]	; (8001164 <MX_GPIO_Init+0x15c>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	4b50      	ldr	r3, [pc, #320]	; (8001164 <MX_GPIO_Init+0x15c>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0309      	lsls	r1, r1, #12
 8001028:	430a      	orrs	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <MX_GPIO_Init+0x15c>)
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	031b      	lsls	r3, r3, #12
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <MX_GPIO_Init+0x15c>)
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	4b49      	ldr	r3, [pc, #292]	; (8001164 <MX_GPIO_Init+0x15c>)
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	0289      	lsls	r1, r1, #10
 8001044:	430a      	orrs	r2, r1
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	4b46      	ldr	r3, [pc, #280]	; (8001164 <MX_GPIO_Init+0x15c>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	4013      	ands	r3, r2
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <MX_GPIO_Init+0x15c>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b42      	ldr	r3, [pc, #264]	; (8001164 <MX_GPIO_Init+0x15c>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	02c9      	lsls	r1, r1, #11
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_GPIO_Init+0x15c>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	02db      	lsls	r3, r3, #11
 800106c:	4013      	ands	r3, r2
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	33ff      	adds	r3, #255	; 0xff
 8001076:	483c      	ldr	r0, [pc, #240]	; (8001168 <MX_GPIO_Init+0x160>)
 8001078:	2200      	movs	r2, #0
 800107a:	0019      	movs	r1, r3
 800107c:	f001 fcb8 	bl	80029f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8001080:	2390      	movs	r3, #144	; 0x90
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	2200      	movs	r2, #0
 8001086:	2148      	movs	r1, #72	; 0x48
 8001088:	0018      	movs	r0, r3
 800108a:	f001 fcb1 	bl	80029f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	32ff      	adds	r2, #255	; 0xff
 8001094:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2201      	movs	r2, #1
 800109a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	193b      	adds	r3, r7, r4
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <MX_GPIO_Init+0x160>)
 80010ac:	0019      	movs	r1, r3
 80010ae:	0010      	movs	r0, r2
 80010b0:	f001 fb26 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2248      	movs	r2, #72	; 0x48
 80010b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2201      	movs	r2, #1
 80010be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	193a      	adds	r2, r7, r4
 80010ce:	2390      	movs	r3, #144	; 0x90
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f001 fb13 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80010da:	0021      	movs	r1, r4
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	221c      	movs	r2, #28
 80010e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2288      	movs	r2, #136	; 0x88
 80010e6:	0352      	lsls	r2, r2, #13
 80010e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	000c      	movs	r4, r1
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <MX_GPIO_Init+0x164>)
 80010f6:	0019      	movs	r1, r3
 80010f8:	0010      	movs	r0, r2
 80010fa:	f001 fb01 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	22c0      	movs	r2, #192	; 0xc0
 8001102:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	193b      	adds	r3, r7, r4
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_GPIO_Init+0x160>)
 8001114:	0019      	movs	r1, r3
 8001116:	0010      	movs	r0, r2
 8001118:	f001 faf2 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800111c:	0021      	movs	r1, r4
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2220      	movs	r2, #32
 8001122:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	187b      	adds	r3, r7, r1
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <MX_GPIO_Init+0x164>)
 8001134:	0019      	movs	r1, r3
 8001136:	0010      	movs	r0, r2
 8001138:	f001 fae2 	bl	8002700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2006      	movs	r0, #6
 8001142:	f001 f8bd 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001146:	2006      	movs	r0, #6
 8001148:	f001 f8cf 	bl	80022ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2007      	movs	r0, #7
 8001152:	f001 f8b5 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001156:	2007      	movs	r0, #7
 8001158:	f001 f8c7 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b009      	add	sp, #36	; 0x24
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	48000800 	.word	0x48000800
 800116c:	48000400 	.word	0x48000400

08001170 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	0002      	movs	r2, r0
 8001178:	1dbb      	adds	r3, r7, #6
 800117a:	801a      	strh	r2, [r3, #0]
	curr = HAL_GetTick();
 800117c:	f000 fab2 	bl	80016e4 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
	UNUSED(GPIO_Pin);
	if((GPIO_Pin == 4) && (curr - prev > 200))
 8001186:	1dbb      	adds	r3, r7, #6
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	2b04      	cmp	r3, #4
 800118c:	d10d      	bne.n	80011aa <HAL_GPIO_EXTI_Callback+0x3a>
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_GPIO_EXTI_Callback+0x6c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2bc8      	cmp	r3, #200	; 0xc8
 800119a:	d906      	bls.n	80011aa <HAL_GPIO_EXTI_Callback+0x3a>
		{goleft = 1;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x70>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
		 prev = curr;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80011a8:	601a      	str	r2, [r3, #0]
		}
	if((GPIO_Pin == 16) && (curr - prev > 200))
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d10d      	bne.n	80011ce <HAL_GPIO_EXTI_Callback+0x5e>
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2bc8      	cmp	r3, #200	; 0xc8
 80011be:	d906      	bls.n	80011ce <HAL_GPIO_EXTI_Callback+0x5e>
		{goright = 1;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
		prev = curr;
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x68>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_GPIO_EXTI_Callback+0x6c>)
 80011cc:	601a      	str	r2, [r3, #0]
		}
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000040 	.word	0x20000040
 80011dc:	2000003c 	.word	0x2000003c
 80011e0:	20000034 	.word	0x20000034
 80011e4:	20000038 	.word	0x20000038

080011e8 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	__NOP();
 80011f0:	46c0      	nop			; (mov r8, r8)
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  __NOP();
 8001202:	46c0      	nop			; (mov r8, r8)

	HAL_ADC_Stop_DMA(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	0018      	movs	r0, r3
 8001208:	f000 fc5c 	bl	8001ac4 <HAL_ADC_Stop_DMA>
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state*/
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_MspInit+0x44>)
 8001228:	699a      	ldr	r2, [r3, #24]
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_MspInit+0x44>)
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_MspInit+0x44>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	2201      	movs	r2, #1
 8001238:	4013      	ands	r3, r2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x44>)
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_MspInit+0x44>)
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	0549      	lsls	r1, r1, #21
 8001248:	430a      	orrs	r2, r1
 800124a:	61da      	str	r2, [r3, #28]
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_MspInit+0x44>)
 800124e:	69da      	ldr	r2, [r3, #28]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	055b      	lsls	r3, r3, #21
 8001254:	4013      	ands	r3, r2
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	2414      	movs	r4, #20
 8001272:	193b      	adds	r3, r7, r4
 8001274:	0018      	movs	r0, r3
 8001276:	2314      	movs	r3, #20
 8001278:	001a      	movs	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	f002 ff2a 	bl	80040d4 <memset>
  if(hadc->Instance==ADC1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_ADC_MspInit+0xf0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d162      	bne.n	8001350 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_ADC_MspInit+0xf4>)
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_ADC_MspInit+0xf4>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0089      	lsls	r1, r1, #2
 8001294:	430a      	orrs	r2, r1
 8001296:	619a      	str	r2, [r3, #24]
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_ADC_MspInit+0xf4>)
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_ADC_MspInit+0xf4>)
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_ADC_MspInit+0xf4>)
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	02c9      	lsls	r1, r1, #11
 80012b0:	430a      	orrs	r2, r1
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_ADC_MspInit+0xf4>)
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	02db      	lsls	r3, r3, #11
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	2203      	movs	r2, #3
 80012cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	193b      	adds	r3, r7, r4
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_ADC_MspInit+0xf8>)
 80012d8:	0019      	movs	r1, r3
 80012da:	0010      	movs	r0, r2
 80012dc:	f001 fa10 	bl	8002700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_ADC_MspInit+0x100>)
 80012e4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0052      	lsls	r2, r2, #1
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 800130a:	2220      	movs	r2, #32
 800130c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 8001316:	0018      	movs	r0, r3
 8001318:	f001 f804 	bl	8002324 <HAL_DMA_Init>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d001      	beq.n	8001324 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001320:	f7ff ff78 	bl	8001214 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_ADC_MspInit+0x104>)
 8001326:	23a8      	movs	r3, #168	; 0xa8
 8001328:	58d3      	ldr	r3, [r2, r3]
 800132a:	4910      	ldr	r1, [pc, #64]	; (800136c <HAL_ADC_MspInit+0x104>)
 800132c:	220f      	movs	r2, #15
 800132e:	4393      	bics	r3, r2
 8001330:	22a8      	movs	r2, #168	; 0xa8
 8001332:	508b      	str	r3, [r1, r2]
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <HAL_ADC_MspInit+0x104>)
 8001336:	23a8      	movs	r3, #168	; 0xa8
 8001338:	58d3      	ldr	r3, [r2, r3]
 800133a:	490c      	ldr	r1, [pc, #48]	; (800136c <HAL_ADC_MspInit+0x104>)
 800133c:	2201      	movs	r2, #1
 800133e:	4313      	orrs	r3, r2
 8001340:	22a8      	movs	r2, #168	; 0xa8
 8001342:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 8001348:	631a      	str	r2, [r3, #48]	; 0x30
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_ADC_MspInit+0xfc>)
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b00b      	add	sp, #44	; 0x2c
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	40012400 	.word	0x40012400
 800135c:	40021000 	.word	0x40021000
 8001360:	48000400 	.word	0x48000400
 8001364:	20000160 	.word	0x20000160
 8001368:	40020008 	.word	0x40020008
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	2414      	movs	r4, #20
 800137a:	193b      	adds	r3, r7, r4
 800137c:	0018      	movs	r0, r3
 800137e:	2314      	movs	r3, #20
 8001380:	001a      	movs	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f002 fea6 	bl	80040d4 <memset>
  if(hi2c->Instance==I2C2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <HAL_I2C_MspInit+0x90>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d132      	bne.n	80013f8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_I2C_MspInit+0x94>)
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_I2C_MspInit+0x94>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	02c9      	lsls	r1, r1, #11
 800139c:	430a      	orrs	r2, r1
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	02db      	lsls	r3, r3, #11
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	22c0      	movs	r2, #192	; 0xc0
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b6:	0021      	movs	r1, r4
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2212      	movs	r2, #18
 80013bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2203      	movs	r2, #3
 80013c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2201      	movs	r2, #1
 80013ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_I2C_MspInit+0x98>)
 80013d4:	0019      	movs	r1, r3
 80013d6:	0010      	movs	r0, r2
 80013d8:	f001 f992 	bl	8002700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	03c9      	lsls	r1, r1, #15
 80013e6:	430a      	orrs	r2, r1
 80013e8:	61da      	str	r2, [r3, #28]
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_I2C_MspInit+0x94>)
 80013ec:	69da      	ldr	r2, [r3, #28]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	03db      	lsls	r3, r3, #15
 80013f2:	4013      	ands	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b00b      	add	sp, #44	; 0x2c
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	40005800 	.word	0x40005800
 8001404:	40021000 	.word	0x40021000
 8001408:	48000400 	.word	0x48000400

0800140c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b08b      	sub	sp, #44	; 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	2414      	movs	r4, #20
 8001416:	193b      	adds	r3, r7, r4
 8001418:	0018      	movs	r0, r3
 800141a:	2314      	movs	r3, #20
 800141c:	001a      	movs	r2, r3
 800141e:	2100      	movs	r1, #0
 8001420:	f002 fe58 	bl	80040d4 <memset>
  if(hspi->Instance==SPI1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <HAL_SPI_MspInit+0x90>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d132      	bne.n	8001494 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_SPI_MspInit+0x94>)
 8001430:	699a      	ldr	r2, [r3, #24]
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_SPI_MspInit+0x94>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0149      	lsls	r1, r1, #5
 8001438:	430a      	orrs	r2, r1
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_SPI_MspInit+0x94>)
 800143e:	699a      	ldr	r2, [r3, #24]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	015b      	lsls	r3, r3, #5
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_SPI_MspInit+0x94>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_SPI_MspInit+0x94>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0289      	lsls	r1, r1, #10
 8001454:	430a      	orrs	r2, r1
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0x94>)
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001466:	0021      	movs	r1, r4
 8001468:	187b      	adds	r3, r7, r1
 800146a:	22b0      	movs	r2, #176	; 0xb0
 800146c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2202      	movs	r2, #2
 8001472:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2203      	movs	r2, #3
 800147e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	187a      	adds	r2, r7, r1
 8001488:	2390      	movs	r3, #144	; 0x90
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f001 f936 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b00b      	add	sp, #44	; 0x2c
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	40013000 	.word	0x40013000
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_TIM_PWM_MspInit+0x38>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10d      	bne.n	80014d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0109      	lsls	r1, r1, #4
 80014c0:	430a      	orrs	r2, r1
 80014c2:	619a      	str	r2, [r3, #24]
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b004      	add	sp, #16
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40012c00 	.word	0x40012c00
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	240c      	movs	r4, #12
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	0018      	movs	r0, r3
 80014f2:	2314      	movs	r3, #20
 80014f4:	001a      	movs	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f002 fdec 	bl	80040d4 <memset>
  if(htim->Instance==TIM1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_TIM_MspPostInit+0x78>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d125      	bne.n	8001552 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_TIM_MspPostInit+0x7c>)
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_TIM_MspPostInit+0x7c>)
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	0289      	lsls	r1, r1, #10
 8001510:	430a      	orrs	r2, r1
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_TIM_MspPostInit+0x7c>)
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	029b      	lsls	r3, r3, #10
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	0052      	lsls	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	0021      	movs	r1, r4
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2202      	movs	r2, #2
 8001530:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2202      	movs	r2, #2
 8001542:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	187a      	adds	r2, r7, r1
 8001546:	2390      	movs	r3, #144	; 0x90
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f001 f8d7 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b009      	add	sp, #36	; 0x24
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40012c00 	.word	0x40012c00
 8001560:	40021000 	.word	0x40021000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f89a 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001596:	2004      	movs	r0, #4
 8001598:	f001 fa48 	bl	8002a2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800159c:	2008      	movs	r0, #8
 800159e:	f001 fa45 	bl	8002a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80015ac:	2010      	movs	r0, #16
 80015ae:	f001 fa3d 	bl	8002a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <DMA1_Ch1_IRQHandler+0x14>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 ff96 	bl	80024f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	20000160 	.word	0x20000160

080015d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490e      	ldr	r1, [pc, #56]	; (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0b      	ldr	r4, [pc, #44]	; (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001606:	f7ff ffe3 	bl	80015d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800160a:	f002 fd3f 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff fa67 	bl	8000ae0 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   r0, =_estack
 8001614:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001620:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 8001624:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001628:	200001e8 	.word	0x200001e8

0800162c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_COMP_IRQHandler>
	...

08001630 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_Init+0x24>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_Init+0x24>)
 800163a:	2110      	movs	r1, #16
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f809 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001646:	f7ff fdeb 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_InitTick+0x5c>)
 8001662:	681c      	ldr	r4, [r3, #0]
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_InitTick+0x60>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	0019      	movs	r1, r3
 800166a:	23fa      	movs	r3, #250	; 0xfa
 800166c:	0098      	lsls	r0, r3, #2
 800166e:	f7fe fd49 	bl	8000104 <__udivsi3>
 8001672:	0003      	movs	r3, r0
 8001674:	0019      	movs	r1, r3
 8001676:	0020      	movs	r0, r4
 8001678:	f7fe fd44 	bl	8000104 <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	0018      	movs	r0, r3
 8001680:	f000 fe43 	bl	800230a <HAL_SYSTICK_Config>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e00f      	b.n	80016ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d80b      	bhi.n	80016aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	2301      	movs	r3, #1
 8001696:	425b      	negs	r3, r3
 8001698:	2200      	movs	r2, #0
 800169a:	0018      	movs	r0, r3
 800169c:	f000 fe10 	bl	80022c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_InitTick+0x64>)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b003      	add	sp, #12
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	20000014 	.word	0x20000014
 80016bc:	20000010 	.word	0x20000010

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x1c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	001a      	movs	r2, r3
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	18d2      	adds	r2, r2, r3
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_IncTick+0x20>)
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20000014 	.word	0x20000014
 80016e0:	200001e4 	.word	0x200001e4

080016e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_GetTick+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	200001e4 	.word	0x200001e4

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fff0 	bl	80016e4 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	001a      	movs	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	189b      	adds	r3, r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	f7ff ffe0 	bl	80016e4 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	20000014 	.word	0x20000014

08001740 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001748:	230f      	movs	r3, #15
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e125      	b.n	80019aa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2234      	movs	r2, #52	; 0x34
 8001770:	2100      	movs	r1, #0
 8001772:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fd76 	bl	8001268 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	2210      	movs	r2, #16
 8001782:	4013      	ands	r3, r2
 8001784:	d000      	beq.n	8001788 <HAL_ADC_Init+0x48>
 8001786:	e103      	b.n	8001990 <HAL_ADC_Init+0x250>
 8001788:	230f      	movs	r3, #15
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d000      	beq.n	8001794 <HAL_ADC_Init+0x54>
 8001792:	e0fd      	b.n	8001990 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2204      	movs	r2, #4
 800179c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800179e:	d000      	beq.n	80017a2 <HAL_ADC_Init+0x62>
 80017a0:	e0f6      	b.n	8001990 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	4a83      	ldr	r2, [pc, #524]	; (80019b4 <HAL_ADC_Init+0x274>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	2202      	movs	r2, #2
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2203      	movs	r2, #3
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d112      	bne.n	80017e6 <HAL_ADC_Init+0xa6>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d009      	beq.n	80017e2 <HAL_ADC_Init+0xa2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	401a      	ands	r2, r3
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	429a      	cmp	r2, r3
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Init+0xa6>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_ADC_Init+0xa8>
 80017e6:	2300      	movs	r3, #0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d116      	bne.n	800181a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2218      	movs	r2, #24
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	0899      	lsrs	r1, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4964      	ldr	r1, [pc, #400]	; (80019b8 <HAL_ADC_Init+0x278>)
 8001826:	400a      	ands	r2, r1
 8001828:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7e1b      	ldrb	r3, [r3, #24]
 800182e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7e5b      	ldrb	r3, [r3, #25]
 8001834:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001836:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e9b      	ldrb	r3, [r3, #26]
 800183c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800183e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	2b01      	cmp	r3, #1
 8001846:	d002      	beq.n	800184e <HAL_ADC_Init+0x10e>
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	015b      	lsls	r3, r3, #5
 800184c:	e000      	b.n	8001850 <HAL_ADC_Init+0x110>
 800184e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001850:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001856:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d101      	bne.n	8001864 <HAL_ADC_Init+0x124>
 8001860:	2304      	movs	r3, #4
 8001862:	e000      	b.n	8001866 <HAL_ADC_Init+0x126>
 8001864:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001866:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2124      	movs	r1, #36	; 0x24
 800186c:	5c5b      	ldrb	r3, [r3, r1]
 800186e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001870:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4313      	orrs	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7edb      	ldrb	r3, [r3, #27]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d115      	bne.n	80018ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e9b      	ldrb	r3, [r3, #26]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	0252      	lsls	r2, r2, #9
 800188e:	4313      	orrs	r3, r2
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	e00b      	b.n	80018ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001898:	2220      	movs	r2, #32
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	2201      	movs	r2, #1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	23c2      	movs	r3, #194	; 0xc2
 80018b2:	33ff      	adds	r3, #255	; 0xff
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d007      	beq.n	80018c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68d9      	ldr	r1, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	055b      	lsls	r3, r3, #21
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d01b      	beq.n	800191c <HAL_ADC_Init+0x1dc>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d017      	beq.n	800191c <HAL_ADC_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d013      	beq.n	800191c <HAL_ADC_Init+0x1dc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d00f      	beq.n	800191c <HAL_ADC_Init+0x1dc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2b04      	cmp	r3, #4
 8001902:	d00b      	beq.n	800191c <HAL_ADC_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	2b05      	cmp	r3, #5
 800190a:	d007      	beq.n	800191c <HAL_ADC_Init+0x1dc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b06      	cmp	r3, #6
 8001912:	d003      	beq.n	800191c <HAL_ADC_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	2b07      	cmp	r3, #7
 800191a:	d112      	bne.n	8001942 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2107      	movs	r1, #7
 8001928:	438a      	bics	r2, r1
 800192a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6959      	ldr	r1, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	2207      	movs	r2, #7
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_ADC_Init+0x27c>)
 800194a:	4013      	ands	r3, r2
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	429a      	cmp	r2, r3
 8001950:	d10b      	bne.n	800196a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	2203      	movs	r2, #3
 800195e:	4393      	bics	r3, r2
 8001960:	2201      	movs	r2, #1
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001968:	e01c      	b.n	80019a4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	2212      	movs	r2, #18
 8001970:	4393      	bics	r3, r2
 8001972:	2210      	movs	r2, #16
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	2201      	movs	r2, #1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001986:	230f      	movs	r3, #15
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800198e:	e009      	b.n	80019a4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001994:	2210      	movs	r2, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800199c:	230f      	movs	r3, #15
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019a4:	230f      	movs	r3, #15
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	781b      	ldrb	r3, [r3, #0]
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	fffffefd 	.word	0xfffffefd
 80019b8:	fffe0219 	.word	0xfffe0219
 80019bc:	833fffe7 	.word	0x833fffe7

080019c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019cc:	2317      	movs	r3, #23
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2204      	movs	r2, #4
 80019dc:	4013      	ands	r3, r2
 80019de:	d15e      	bne.n	8001a9e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2234      	movs	r2, #52	; 0x34
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Start_DMA+0x2e>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e05e      	b.n	8001aac <HAL_ADC_Start_DMA+0xec>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2234      	movs	r2, #52	; 0x34
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	7e5b      	ldrb	r3, [r3, #25]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d007      	beq.n	8001a0e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80019fe:	2317      	movs	r3, #23
 8001a00:	18fc      	adds	r4, r7, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 f9e9 	bl	8001ddc <ADC_Enable>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a0e:	2317      	movs	r3, #23
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d146      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_ADC_Start_DMA+0xf4>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	0052      	lsls	r2, r2, #1
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2234      	movs	r2, #52	; 0x34
 8001a34:	2100      	movs	r1, #0
 8001a36:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_ADC_Start_DMA+0xf8>)
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_ADC_Start_DMA+0xfc>)
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_ADC_Start_DMA+0x100>)
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	221c      	movs	r2, #28
 8001a56:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2110      	movs	r1, #16
 8001a64:	430a      	orrs	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2101      	movs	r1, #1
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3340      	adds	r3, #64	; 0x40
 8001a82:	0019      	movs	r1, r3
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f000 fc94 	bl	80023b4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2104      	movs	r1, #4
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	e003      	b.n	8001aa6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a9e:	2317      	movs	r3, #23
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	781b      	ldrb	r3, [r3, #0]
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b007      	add	sp, #28
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	fffff0fe 	.word	0xfffff0fe
 8001ab8:	08002061 	.word	0x08002061
 8001abc:	08002115 	.word	0x08002115
 8001ac0:	08002133 	.word	0x08002133

08001ac4 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001acc:	230f      	movs	r3, #15
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2234      	movs	r2, #52	; 0x34
 8001ad8:	5c9b      	ldrb	r3, [r3, r2]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_Stop_DMA+0x1e>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e05f      	b.n	8001ba2 <HAL_ADC_Stop_DMA+0xde>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2234      	movs	r2, #52	; 0x34
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001aea:	250f      	movs	r5, #15
 8001aec:	197c      	adds	r4, r7, r5
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 fa68 	bl	8001fc6 <ADC_ConversionStop>
 8001af6:	0003      	movs	r3, r0
 8001af8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001afa:	0028      	movs	r0, r5
 8001afc:	183b      	adds	r3, r7, r0
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d147      	bne.n	8001b94 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	438a      	bics	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	2221      	movs	r2, #33	; 0x21
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d112      	bne.n	8001b48 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	0005      	movs	r5, r0
 8001b28:	183c      	adds	r4, r7, r0
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fca8 	bl	8002480 <HAL_DMA_Abort>
 8001b30:	0003      	movs	r3, r0
 8001b32:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001b34:	197b      	adds	r3, r7, r5
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2110      	movs	r1, #16
 8001b54:	438a      	bics	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001b58:	220f      	movs	r2, #15
 8001b5a:	18bb      	adds	r3, r7, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001b62:	18bc      	adds	r4, r7, r2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 f9bc 	bl	8001ee4 <ADC_Disable>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	7023      	strb	r3, [r4, #0]
 8001b70:	e003      	b.n	8001b7a <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 f9b5 	bl	8001ee4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_ADC_Stop_DMA+0xe8>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2234      	movs	r2, #52	; 0x34
 8001b98:	2100      	movs	r1, #0
 8001b9a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b004      	add	sp, #16
 8001ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	fffffefe 	.word	0xfffffefe

08001bb0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	055b      	lsls	r3, r3, #21
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d011      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x46>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d00d      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x46>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d009      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x46>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d005      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x46>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d001      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x46>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2234      	movs	r2, #52	; 0x34
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x54>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0d0      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x1f6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2234      	movs	r2, #52	; 0x34
 8001c18:	2101      	movs	r1, #1
 8001c1a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d000      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x6a>
 8001c28:	e0b4      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a64      	ldr	r2, [pc, #400]	; (8001dc0 <HAL_ADC_ConfigChannel+0x200>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d100      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x76>
 8001c34:	e082      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	055b      	lsls	r3, r3, #21
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d037      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d033      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d02f      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d02b      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d027      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d023      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d01f      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d012      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2107      	movs	r1, #7
 8001cae:	438a      	bics	r2, r1
 8001cb0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6959      	ldr	r1, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d007      	beq.n	8001ce0 <HAL_ADC_ConfigChannel+0x120>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b11      	cmp	r3, #17
 8001cd6:	d003      	beq.n	8001ce0 <HAL_ADC_ConfigChannel+0x120>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b12      	cmp	r3, #18
 8001cde:	d163      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ce0:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <HAL_ADC_ConfigChannel+0x204>)
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d009      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0x140>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b11      	cmp	r3, #17
 8001cf2:	d102      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x13a>
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	03db      	lsls	r3, r3, #15
 8001cf8:	e004      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x144>
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	045b      	lsls	r3, r3, #17
 8001cfe:	e001      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x144>
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <HAL_ADC_ConfigChannel+0x204>)
 8001d06:	430b      	orrs	r3, r1
 8001d08:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d14a      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_ADC_ConfigChannel+0x208>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	492d      	ldr	r1, [pc, #180]	; (8001dcc <HAL_ADC_ConfigChannel+0x20c>)
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7fe f9f3 	bl	8000104 <__udivsi3>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	001a      	movs	r2, r3
 8001d22:	0013      	movs	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	189b      	adds	r3, r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f9      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x16e>
 8001d3a:	e035      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2101      	movs	r1, #1
 8001d48:	4099      	lsls	r1, r3
 8001d4a:	000b      	movs	r3, r1
 8001d4c:	43d9      	mvns	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	400a      	ands	r2, r1
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x1ae>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b11      	cmp	r3, #17
 8001d64:	d003      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x1ae>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d11c      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_ADC_ConfigChannel+0x204>)
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d007      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x1ca>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b11      	cmp	r3, #17
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x1c6>
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_ADC_ConfigChannel+0x210>)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1cc>
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_ADC_ConfigChannel+0x214>)
 8001d88:	e000      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1cc>
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_ADC_ConfigChannel+0x218>)
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_ADC_ConfigChannel+0x204>)
 8001d8e:	400b      	ands	r3, r1
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e009      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	2220      	movs	r2, #32
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001da0:	230f      	movs	r3, #15
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2234      	movs	r2, #52	; 0x34
 8001dac:	2100      	movs	r1, #0
 8001dae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001db0:	230f      	movs	r3, #15
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	781b      	ldrb	r3, [r3, #0]
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b004      	add	sp, #16
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	00001001 	.word	0x00001001
 8001dc4:	40012708 	.word	0x40012708
 8001dc8:	2000000c 	.word	0x2000000c
 8001dcc:	000f4240 	.word	0x000f4240
 8001dd0:	ffbfffff 	.word	0xffbfffff
 8001dd4:	feffffff 	.word	0xfeffffff
 8001dd8:	ff7fffff 	.word	0xff7fffff

08001ddc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2203      	movs	r2, #3
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d112      	bne.n	8001e20 <ADC_Enable+0x44>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d009      	beq.n	8001e1c <ADC_Enable+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	401a      	ands	r2, r3
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d101      	bne.n	8001e20 <ADC_Enable+0x44>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <ADC_Enable+0x46>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d152      	bne.n	8001ecc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <ADC_Enable+0xfc>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	2210      	movs	r2, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	2201      	movs	r2, #1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e03f      	b.n	8001ece <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <ADC_Enable+0x100>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	491f      	ldr	r1, [pc, #124]	; (8001ee0 <ADC_Enable+0x104>)
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7fe f94d 	bl	8000104 <__udivsi3>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e6e:	e002      	b.n	8001e76 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f9      	bne.n	8001e70 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff fc32 	bl	80016e4 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e84:	e01b      	b.n	8001ebe <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e86:	f7ff fc2d 	bl	80016e4 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d914      	bls.n	8001ebe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d00d      	beq.n	8001ebe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e007      	b.n	8001ece <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d1dc      	bne.n	8001e86 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	80000017 	.word	0x80000017
 8001edc:	2000000c 	.word	0x2000000c
 8001ee0:	000f4240 	.word	0x000f4240

08001ee4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d112      	bne.n	8001f24 <ADC_Disable+0x40>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d009      	beq.n	8001f20 <ADC_Disable+0x3c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	401a      	ands	r2, r3
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d101      	bne.n	8001f24 <ADC_Disable+0x40>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <ADC_Disable+0x42>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d048      	beq.n	8001fbc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2205      	movs	r2, #5
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d110      	bne.n	8001f5a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2102      	movs	r1, #2
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f50:	f7ff fbc8 	bl	80016e4 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f58:	e029      	b.n	8001fae <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	2210      	movs	r2, #16
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e023      	b.n	8001fbe <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f76:	f7ff fbb5 	bl	80016e4 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d914      	bls.n	8001fae <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	2210      	movs	r2, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e007      	b.n	8001fbe <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d0dc      	beq.n	8001f76 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d03a      	beq.n	8002054 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d10d      	bne.n	8002008 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001ff6:	d107      	bne.n	8002008 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2110      	movs	r1, #16
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002008:	f7ff fb6c 	bl	80016e4 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002010:	e01a      	b.n	8002048 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002012:	f7ff fb67 	bl	80016e4 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d913      	bls.n	8002048 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2204      	movs	r2, #4
 8002028:	4013      	ands	r3, r2
 800202a:	d00d      	beq.n	8002048 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	2210      	movs	r2, #16
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	2201      	movs	r2, #1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e006      	b.n	8002056 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2204      	movs	r2, #4
 8002050:	4013      	ands	r3, r2
 8002052:	d1de      	bne.n	8002012 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	2250      	movs	r2, #80	; 0x50
 8002074:	4013      	ands	r3, r2
 8002076:	d140      	bne.n	80020fa <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	23c0      	movs	r3, #192	; 0xc0
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4013      	ands	r3, r2
 8002092:	d12d      	bne.n	80020f0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002098:	2b00      	cmp	r3, #0
 800209a:	d129      	bne.n	80020f0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2208      	movs	r2, #8
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d122      	bne.n	80020f0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2204      	movs	r2, #4
 80020b2:	4013      	ands	r3, r2
 80020b4:	d110      	bne.n	80020d8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	210c      	movs	r1, #12
 80020c2:	438a      	bics	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	4a11      	ldr	r2, [pc, #68]	; (8002110 <ADC_DMAConvCplt+0xb0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	2201      	movs	r2, #1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
 80020d6:	e00b      	b.n	80020f0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	2220      	movs	r2, #32
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	2201      	movs	r2, #1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff f881 	bl	80011fa <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80020f8:	e005      	b.n	8002106 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	0010      	movs	r0, r2
 8002104:	4798      	blx	r3
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	fffffefe 	.word	0xfffffefe

08002114 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff f85f 	bl	80011e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}

08002132 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	431a      	orrs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2204      	movs	r2, #4
 8002152:	431a      	orrs	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff fd28 	bl	8001bb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}

08002168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	0002      	movs	r2, r0
 8002170:	1dfb      	adds	r3, r7, #7
 8002172:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002174:	1dfb      	adds	r3, r7, #7
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b7f      	cmp	r3, #127	; 0x7f
 800217a:	d809      	bhi.n	8002190 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	001a      	movs	r2, r3
 8002182:	231f      	movs	r3, #31
 8002184:	401a      	ands	r2, r3
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <__NVIC_EnableIRQ+0x30>)
 8002188:	2101      	movs	r1, #1
 800218a:	4091      	lsls	r1, r2
 800218c:	000a      	movs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
  }
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	0002      	movs	r2, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b7f      	cmp	r3, #127	; 0x7f
 80021b0:	d828      	bhi.n	8002204 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <__NVIC_SetPriority+0xd4>)
 80021b4:	1dfb      	adds	r3, r7, #7
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	33c0      	adds	r3, #192	; 0xc0
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	589b      	ldr	r3, [r3, r2]
 80021c2:	1dfa      	adds	r2, r7, #7
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	0011      	movs	r1, r2
 80021c8:	2203      	movs	r2, #3
 80021ca:	400a      	ands	r2, r1
 80021cc:	00d2      	lsls	r2, r2, #3
 80021ce:	21ff      	movs	r1, #255	; 0xff
 80021d0:	4091      	lsls	r1, r2
 80021d2:	000a      	movs	r2, r1
 80021d4:	43d2      	mvns	r2, r2
 80021d6:	401a      	ands	r2, r3
 80021d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	401a      	ands	r2, r3
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	0018      	movs	r0, r3
 80021e8:	2303      	movs	r3, #3
 80021ea:	4003      	ands	r3, r0
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021f0:	481f      	ldr	r0, [pc, #124]	; (8002270 <__NVIC_SetPriority+0xd4>)
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	430a      	orrs	r2, r1
 80021fc:	33c0      	adds	r3, #192	; 0xc0
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002202:	e031      	b.n	8002268 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002204:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <__NVIC_SetPriority+0xd8>)
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	0019      	movs	r1, r3
 800220c:	230f      	movs	r3, #15
 800220e:	400b      	ands	r3, r1
 8002210:	3b08      	subs	r3, #8
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3306      	adds	r3, #6
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	3304      	adds	r3, #4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1dfa      	adds	r2, r7, #7
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	0011      	movs	r1, r2
 8002224:	2203      	movs	r2, #3
 8002226:	400a      	ands	r2, r1
 8002228:	00d2      	lsls	r2, r2, #3
 800222a:	21ff      	movs	r1, #255	; 0xff
 800222c:	4091      	lsls	r1, r2
 800222e:	000a      	movs	r2, r1
 8002230:	43d2      	mvns	r2, r2
 8002232:	401a      	ands	r2, r3
 8002234:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	22ff      	movs	r2, #255	; 0xff
 800223c:	401a      	ands	r2, r3
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	0018      	movs	r0, r3
 8002244:	2303      	movs	r3, #3
 8002246:	4003      	ands	r3, r0
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800224c:	4809      	ldr	r0, [pc, #36]	; (8002274 <__NVIC_SetPriority+0xd8>)
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	001c      	movs	r4, r3
 8002254:	230f      	movs	r3, #15
 8002256:	4023      	ands	r3, r4
 8002258:	3b08      	subs	r3, #8
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	430a      	orrs	r2, r1
 800225e:	3306      	adds	r3, #6
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	18c3      	adds	r3, r0, r3
 8002264:	3304      	adds	r3, #4
 8002266:	601a      	str	r2, [r3, #0]
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b003      	add	sp, #12
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	045b      	lsls	r3, r3, #17
 8002288:	429a      	cmp	r2, r3
 800228a:	d301      	bcc.n	8002290 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228c:	2301      	movs	r3, #1
 800228e:	e010      	b.n	80022b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <SysTick_Config+0x44>)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	3a01      	subs	r2, #1
 8002296:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002298:	2301      	movs	r3, #1
 800229a:	425b      	negs	r3, r3
 800229c:	2103      	movs	r1, #3
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff ff7c 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x44>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x44>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b002      	add	sp, #8
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	210f      	movs	r1, #15
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	1c02      	adds	r2, r0, #0
 80022d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	0011      	movs	r1, r2
 80022dc:	0018      	movs	r0, r3
 80022de:	f7ff ff5d 	bl	800219c <__NVIC_SetPriority>
}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b004      	add	sp, #16
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	0002      	movs	r2, r0
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff ff33 	bl	8002168 <__NVIC_EnableIRQ>
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff ffaf 	bl	8002278 <SysTick_Config>
 800231a:	0003      	movs	r3, r0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e036      	b.n	80023a8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2221      	movs	r2, #33	; 0x21
 800233e:	2102      	movs	r1, #2
 8002340:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_DMA_Init+0x8c>)
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800235a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f97e 	bl	800268c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2221      	movs	r2, #33	; 0x21
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}  
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b004      	add	sp, #16
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	ffffc00f 	.word	0xffffc00f

080023b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80023c2:	2317      	movs	r3, #23
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2220      	movs	r2, #32
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Start_IT+0x24>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e04f      	b.n	8002478 <HAL_DMA_Start_IT+0xc4>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	2101      	movs	r1, #1
 80023de:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2221      	movs	r2, #33	; 0x21
 80023e4:	5c9b      	ldrb	r3, [r3, r2]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d13a      	bne.n	8002462 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2221      	movs	r2, #33	; 0x21
 80023f0:	2102      	movs	r1, #2
 80023f2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f90f 	bl	8002634 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	210e      	movs	r1, #14
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e00f      	b.n	8002450 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	210a      	movs	r1, #10
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2104      	movs	r1, #4
 800244c:	438a      	bics	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e007      	b.n	8002472 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800246a:	2317      	movs	r3, #23
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002472:	2317      	movs	r3, #23
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
} 
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b006      	add	sp, #24
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2221      	movs	r2, #33	; 0x21
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2204      	movs	r2, #4
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	2100      	movs	r1, #0
 80024a0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e020      	b.n	80024e8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	210e      	movs	r1, #14
 80024b2:	438a      	bics	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	438a      	bics	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	2101      	movs	r1, #1
 80024d0:	4091      	lsls	r1, r2
 80024d2:	000a      	movs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2221      	movs	r2, #33	; 0x21
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2204      	movs	r2, #4
 800250e:	409a      	lsls	r2, r3
 8002510:	0013      	movs	r3, r2
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	d024      	beq.n	8002562 <HAL_DMA_IRQHandler+0x72>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2204      	movs	r2, #4
 800251c:	4013      	ands	r3, r2
 800251e:	d020      	beq.n	8002562 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2220      	movs	r2, #32
 8002528:	4013      	ands	r3, r2
 800252a:	d107      	bne.n	800253c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2104      	movs	r1, #4
 8002538:	438a      	bics	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	2104      	movs	r1, #4
 8002546:	4091      	lsls	r1, r2
 8002548:	000a      	movs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <HAL_DMA_IRQHandler+0x66>
 8002554:	e06a      	b.n	800262c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	0010      	movs	r0, r2
 800255e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002560:	e064      	b.n	800262c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2202      	movs	r2, #2
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4013      	ands	r3, r2
 8002570:	d02b      	beq.n	80025ca <HAL_DMA_IRQHandler+0xda>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2202      	movs	r2, #2
 8002576:	4013      	ands	r3, r2
 8002578:	d027      	beq.n	80025ca <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2220      	movs	r2, #32
 8002582:	4013      	ands	r3, r2
 8002584:	d10b      	bne.n	800259e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	210a      	movs	r1, #10
 8002592:	438a      	bics	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2221      	movs	r2, #33	; 0x21
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	2102      	movs	r1, #2
 80025a8:	4091      	lsls	r1, r2
 80025aa:	000a      	movs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d036      	beq.n	800262c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	0010      	movs	r0, r2
 80025c6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025c8:	e030      	b.n	800262c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2208      	movs	r2, #8
 80025d0:	409a      	lsls	r2, r3
 80025d2:	0013      	movs	r3, r2
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	d028      	beq.n	800262c <HAL_DMA_IRQHandler+0x13c>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2208      	movs	r2, #8
 80025de:	4013      	ands	r3, r2
 80025e0:	d024      	beq.n	800262c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	210e      	movs	r1, #14
 80025ee:	438a      	bics	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2101      	movs	r1, #1
 80025fc:	4091      	lsls	r1, r2
 80025fe:	000a      	movs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2221      	movs	r2, #33	; 0x21
 800260c:	2101      	movs	r1, #1
 800260e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	0010      	movs	r0, r2
 8002628:	4798      	blx	r3
    }
   }
}  
 800262a:	e7ff      	b.n	800262c <HAL_DMA_IRQHandler+0x13c>
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}

08002634 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	2101      	movs	r1, #1
 800264c:	4091      	lsls	r1, r2
 800264e:	000a      	movs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b10      	cmp	r3, #16
 8002660:	d108      	bne.n	8002674 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002672:	e007      	b.n	8002684 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}

0800268c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	001a      	movs	r2, r3
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <DMA_CalcBaseAndBitshift+0x60>)
 800269c:	429a      	cmp	r2, r3
 800269e:	d810      	bhi.n	80026c2 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <DMA_CalcBaseAndBitshift+0x64>)
 80026a6:	4694      	mov	ip, r2
 80026a8:	4463      	add	r3, ip
 80026aa:	2114      	movs	r1, #20
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fd fd29 	bl	8000104 <__udivsi3>
 80026b2:	0003      	movs	r3, r0
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <DMA_CalcBaseAndBitshift+0x68>)
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80026c0:	e00f      	b.n	80026e2 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <DMA_CalcBaseAndBitshift+0x6c>)
 80026c8:	4694      	mov	ip, r2
 80026ca:	4463      	add	r3, ip
 80026cc:	2114      	movs	r1, #20
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7fd fd18 	bl	8000104 <__udivsi3>
 80026d4:	0003      	movs	r3, r0
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <DMA_CalcBaseAndBitshift+0x70>)
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	40020407 	.word	0x40020407
 80026f0:	bffdfff8 	.word	0xbffdfff8
 80026f4:	40020000 	.word	0x40020000
 80026f8:	bffdfbf8 	.word	0xbffdfbf8
 80026fc:	40020400 	.word	0x40020400

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270e:	e155      	b.n	80029bc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4091      	lsls	r1, r2
 800271a:	000a      	movs	r2, r1
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d100      	bne.n	8002728 <HAL_GPIO_Init+0x28>
 8002726:	e146      	b.n	80029b6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	4013      	ands	r3, r2
 8002730:	2b01      	cmp	r3, #1
 8002732:	d005      	beq.n	8002740 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800273c:	2b02      	cmp	r3, #2
 800273e:	d130      	bne.n	80027a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	409a      	lsls	r2, r3
 800274e:	0013      	movs	r3, r2
 8002750:	43da      	mvns	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	409a      	lsls	r2, r3
 8002762:	0013      	movs	r3, r2
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002776:	2201      	movs	r2, #1
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
 800277c:	0013      	movs	r3, r2
 800277e:	43da      	mvns	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	2201      	movs	r2, #1
 800278e:	401a      	ands	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	409a      	lsls	r2, r3
 8002794:	0013      	movs	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2203      	movs	r2, #3
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d017      	beq.n	80027de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2203      	movs	r2, #3
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	43da      	mvns	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	409a      	lsls	r2, r3
 80027d0:	0013      	movs	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2203      	movs	r2, #3
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d123      	bne.n	8002832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	58d3      	ldr	r3, [r2, r3]
 80027f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2207      	movs	r2, #7
 80027fc:	4013      	ands	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	43da      	mvns	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2107      	movs	r1, #7
 8002816:	400b      	ands	r3, r1
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	409a      	lsls	r2, r3
 800281c:	0013      	movs	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	0092      	lsls	r2, r2, #2
 800282e:	6939      	ldr	r1, [r7, #16]
 8002830:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	2203      	movs	r2, #3
 800283e:	409a      	lsls	r2, r3
 8002840:	0013      	movs	r3, r2
 8002842:	43da      	mvns	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	401a      	ands	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	409a      	lsls	r2, r3
 8002858:	0013      	movs	r3, r2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	23c0      	movs	r3, #192	; 0xc0
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	4013      	ands	r3, r2
 8002870:	d100      	bne.n	8002874 <HAL_GPIO_Init+0x174>
 8002872:	e0a0      	b.n	80029b6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002874:	4b57      	ldr	r3, [pc, #348]	; (80029d4 <HAL_GPIO_Init+0x2d4>)
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <HAL_GPIO_Init+0x2d4>)
 800287a:	2101      	movs	r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <HAL_GPIO_Init+0x2d4>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_GPIO_Init+0x2d8>)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	589b      	ldr	r3, [r3, r2]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2203      	movs	r2, #3
 800289e:	4013      	ands	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	409a      	lsls	r2, r3
 80028a6:	0013      	movs	r3, r2
 80028a8:	43da      	mvns	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	2390      	movs	r3, #144	; 0x90
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d019      	beq.n	80028ee <HAL_GPIO_Init+0x1ee>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a47      	ldr	r2, [pc, #284]	; (80029dc <HAL_GPIO_Init+0x2dc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0x1ea>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a46      	ldr	r2, [pc, #280]	; (80029e0 <HAL_GPIO_Init+0x2e0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00d      	beq.n	80028e6 <HAL_GPIO_Init+0x1e6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a45      	ldr	r2, [pc, #276]	; (80029e4 <HAL_GPIO_Init+0x2e4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d007      	beq.n	80028e2 <HAL_GPIO_Init+0x1e2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a44      	ldr	r2, [pc, #272]	; (80029e8 <HAL_GPIO_Init+0x2e8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_GPIO_Init+0x1de>
 80028da:	2304      	movs	r3, #4
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_Init+0x1f0>
 80028de:	2305      	movs	r3, #5
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x1f0>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_Init+0x1f0>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x1f0>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_Init+0x1f0>
 80028ee:	2300      	movs	r3, #0
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	2103      	movs	r1, #3
 80028f4:	400a      	ands	r2, r1
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002900:	4935      	ldr	r1, [pc, #212]	; (80029d8 <HAL_GPIO_Init+0x2d8>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43da      	mvns	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	4013      	ands	r3, r2
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43da      	mvns	r2, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	4013      	ands	r3, r2
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43da      	mvns	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	035b      	lsls	r3, r3, #13
 800297a:	4013      	ands	r3, r2
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002986:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43da      	mvns	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	039b      	lsls	r3, r3, #14
 80029a4:	4013      	ands	r3, r2
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_GPIO_Init+0x2ec>)
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	40da      	lsrs	r2, r3
 80029c4:	1e13      	subs	r3, r2, #0
 80029c6:	d000      	beq.n	80029ca <HAL_GPIO_Init+0x2ca>
 80029c8:	e6a2      	b.n	8002710 <HAL_GPIO_Init+0x10>
  } 
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010000 	.word	0x40010000
 80029dc:	48000400 	.word	0x48000400
 80029e0:	48000800 	.word	0x48000800
 80029e4:	48000c00 	.word	0x48000c00
 80029e8:	48001000 	.word	0x48001000
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	0008      	movs	r0, r1
 80029fa:	0011      	movs	r1, r2
 80029fc:	1cbb      	adds	r3, r7, #2
 80029fe:	1c02      	adds	r2, r0, #0
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	1c7b      	adds	r3, r7, #1
 8002a04:	1c0a      	adds	r2, r1, #0
 8002a06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a08:	1c7b      	adds	r3, r7, #1
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a10:	1cbb      	adds	r3, r7, #2
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a1a:	1cbb      	adds	r3, r7, #2
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b002      	add	sp, #8
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	0002      	movs	r2, r0
 8002a34:	1dbb      	adds	r3, r7, #6
 8002a36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	1dba      	adds	r2, r7, #6
 8002a3e:	8812      	ldrh	r2, [r2, #0]
 8002a40:	4013      	ands	r3, r2
 8002a42:	d008      	beq.n	8002a56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002a46:	1dba      	adds	r2, r7, #6
 8002a48:	8812      	ldrh	r2, [r2, #0]
 8002a4a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a4c:	1dbb      	adds	r3, r7, #6
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7fe fb8d 	bl	8001170 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e082      	b.n	8002b7c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2241      	movs	r2, #65	; 0x41
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2240      	movs	r2, #64	; 0x40
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7fe fc6f 	bl	8001370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2241      	movs	r2, #65	; 0x41
 8002a96:	2124      	movs	r1, #36	; 0x24
 8002a98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	438a      	bics	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4934      	ldr	r1, [pc, #208]	; (8002b84 <HAL_I2C_Init+0x120>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4931      	ldr	r1, [pc, #196]	; (8002b88 <HAL_I2C_Init+0x124>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d108      	bne.n	8002ae2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0209      	lsls	r1, r1, #8
 8002adc:	430a      	orrs	r2, r1
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	e007      	b.n	8002af2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2184      	movs	r1, #132	; 0x84
 8002aec:	0209      	lsls	r1, r1, #8
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d104      	bne.n	8002b04 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	491f      	ldr	r1, [pc, #124]	; (8002b8c <HAL_I2C_Init+0x128>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	491a      	ldr	r1, [pc, #104]	; (8002b88 <HAL_I2C_Init+0x124>)
 8002b20:	400a      	ands	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69d9      	ldr	r1, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2241      	movs	r2, #65	; 0x41
 8002b68:	2120      	movs	r1, #32
 8002b6a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2242      	movs	r2, #66	; 0x42
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	f0ffffff 	.word	0xf0ffffff
 8002b88:	ffff7fff 	.word	0xffff7fff
 8002b8c:	02008000 	.word	0x02008000

08002b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2241      	movs	r2, #65	; 0x41
 8002b9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d138      	bne.n	8002c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e032      	b.n	8002c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	2101      	movs	r1, #1
 8002bba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2241      	movs	r2, #65	; 0x41
 8002bc0:	2124      	movs	r1, #36	; 0x24
 8002bc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4911      	ldr	r1, [pc, #68]	; (8002c24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002be0:	400a      	ands	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2101      	movs	r1, #1
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2241      	movs	r2, #65	; 0x41
 8002c08:	2120      	movs	r1, #32
 8002c0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	ffffefff 	.word	0xffffefff

08002c28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2241      	movs	r2, #65	; 0x41
 8002c36:	5c9b      	ldrb	r3, [r3, r2]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d139      	bne.n	8002cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2240      	movs	r2, #64	; 0x40
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e033      	b.n	8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2241      	movs	r2, #65	; 0x41
 8002c58:	2124      	movs	r1, #36	; 0x24
 8002c5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2241      	movs	r2, #65	; 0x41
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2240      	movs	r2, #64	; 0x40
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b004      	add	sp, #16
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	fffff0ff 	.word	0xfffff0ff

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f000 fb76 	bl	80033c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d100      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x20>
 8002cde:	e08e      	b.n	8002dfe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ce0:	4bc5      	ldr	r3, [pc, #788]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	220c      	movs	r2, #12
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d00e      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cec:	4bc2      	ldr	r3, [pc, #776]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d117      	bne.n	8002d28 <HAL_RCC_OscConfig+0x68>
 8002cf8:	4bbf      	ldr	r3, [pc, #764]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	23c0      	movs	r3, #192	; 0xc0
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	401a      	ands	r2, r3
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	025b      	lsls	r3, r3, #9
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d10e      	bne.n	8002d28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	4bbb      	ldr	r3, [pc, #748]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	4013      	ands	r3, r2
 8002d14:	d100      	bne.n	8002d18 <HAL_RCC_OscConfig+0x58>
 8002d16:	e071      	b.n	8002dfc <HAL_RCC_OscConfig+0x13c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d000      	beq.n	8002d22 <HAL_RCC_OscConfig+0x62>
 8002d20:	e06c      	b.n	8002dfc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f000 fb4c 	bl	80033c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x80>
 8002d30:	4bb1      	ldr	r3, [pc, #708]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4bb0      	ldr	r3, [pc, #704]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	0249      	lsls	r1, r1, #9
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e02f      	b.n	8002da0 <HAL_RCC_OscConfig+0xe0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0xa2>
 8002d48:	4bab      	ldr	r3, [pc, #684]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4baa      	ldr	r3, [pc, #680]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d4e:	49ab      	ldr	r1, [pc, #684]	; (8002ffc <HAL_RCC_OscConfig+0x33c>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	4ba8      	ldr	r3, [pc, #672]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4ba7      	ldr	r3, [pc, #668]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d5a:	49a9      	ldr	r1, [pc, #676]	; (8003000 <HAL_RCC_OscConfig+0x340>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e01e      	b.n	8002da0 <HAL_RCC_OscConfig+0xe0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d10e      	bne.n	8002d88 <HAL_RCC_OscConfig+0xc8>
 8002d6a:	4ba3      	ldr	r3, [pc, #652]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4ba2      	ldr	r3, [pc, #648]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	02c9      	lsls	r1, r1, #11
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	4b9f      	ldr	r3, [pc, #636]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b9e      	ldr	r3, [pc, #632]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0249      	lsls	r1, r1, #9
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xe0>
 8002d88:	4b9b      	ldr	r3, [pc, #620]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b9a      	ldr	r3, [pc, #616]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d8e:	499b      	ldr	r1, [pc, #620]	; (8002ffc <HAL_RCC_OscConfig+0x33c>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	4b98      	ldr	r3, [pc, #608]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b97      	ldr	r3, [pc, #604]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002d9a:	4999      	ldr	r1, [pc, #612]	; (8003000 <HAL_RCC_OscConfig+0x340>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d014      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fc9c 	bl	80016e4 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db2:	f7fe fc97 	bl	80016e4 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e2fd      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0xf2>
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fc87 	bl	80016e4 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fc82 	bl	80016e4 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e2e8      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	4013      	ands	r3, r2
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x11c>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	d100      	bne.n	8002e0a <HAL_RCC_OscConfig+0x14a>
 8002e08:	e06c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e0a:	4b7b      	ldr	r3, [pc, #492]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	220c      	movs	r2, #12
 8002e10:	4013      	ands	r3, r2
 8002e12:	d00e      	beq.n	8002e32 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e14:	4b78      	ldr	r3, [pc, #480]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	220c      	movs	r2, #12
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d11f      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1a0>
 8002e20:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	23c0      	movs	r3, #192	; 0xc0
 8002e26:	025b      	lsls	r3, r3, #9
 8002e28:	401a      	ands	r2, r3
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d116      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	4b71      	ldr	r3, [pc, #452]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_OscConfig+0x188>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e2bb      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b6b      	ldr	r3, [pc, #428]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	22f8      	movs	r2, #248	; 0xf8
 8002e4e:	4393      	bics	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00da      	lsls	r2, r3, #3
 8002e58:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	e041      	b.n	8002ee4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d024      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e68:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b62      	ldr	r3, [pc, #392]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e6e:	2101      	movs	r1, #1
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fc36 	bl	80016e4 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fc31 	bl	80016e4 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e297      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d0f1      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9a:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	22f8      	movs	r2, #248	; 0xf8
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	00da      	lsls	r2, r3, #3
 8002eaa:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e018      	b.n	8002ee4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	438a      	bics	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fc11 	bl	80016e4 <HAL_GetTick>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fc0c 	bl	80016e4 <HAL_GetTick>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e272      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d1f1      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	4013      	ands	r3, r2
 8002eec:	d036      	beq.n	8002f5c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d019      	beq.n	8002f2a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efa:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002efc:	2101      	movs	r1, #1
 8002efe:	430a      	orrs	r2, r1
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fe fbef 	bl	80016e4 <HAL_GetTick>
 8002f06:	0003      	movs	r3, r0
 8002f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fbea 	bl	80016e4 <HAL_GetTick>
 8002f10:	0002      	movs	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e250      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2202      	movs	r2, #2
 8002f24:	4013      	ands	r3, r2
 8002f26:	d0f1      	beq.n	8002f0c <HAL_RCC_OscConfig+0x24c>
 8002f28:	e018      	b.n	8002f5c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2a:	4b33      	ldr	r3, [pc, #204]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f30:	2101      	movs	r1, #1
 8002f32:	438a      	bics	r2, r1
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fbd5 	bl	80016e4 <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe fbd0 	bl	80016e4 <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e236      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2202      	movs	r2, #2
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d1f1      	bne.n	8002f40 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2204      	movs	r2, #4
 8002f62:	4013      	ands	r3, r2
 8002f64:	d100      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2a8>
 8002f66:	e0b5      	b.n	80030d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f68:	201f      	movs	r0, #31
 8002f6a:	183b      	adds	r3, r7, r0
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	055b      	lsls	r3, r3, #21
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d110      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	0549      	lsls	r1, r1, #21
 8002f86:	430a      	orrs	r2, r1
 8002f88:	61da      	str	r2, [r3, #28]
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	055b      	lsls	r3, r3, #21
 8002f92:	4013      	ands	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_OscConfig+0x344>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_RCC_OscConfig+0x344>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCC_OscConfig+0x344>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0049      	lsls	r1, r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fb94 	bl	80016e4 <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc2:	f7fe fb8f 	bl	80016e4 <HAL_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b64      	cmp	r3, #100	; 0x64
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1f5      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_OscConfig+0x344>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10f      	bne.n	8003008 <HAL_RCC_OscConfig+0x348>
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002fea:	6a1a      	ldr	r2, [r3, #32]
 8002fec:	4b02      	ldr	r3, [pc, #8]	; (8002ff8 <HAL_RCC_OscConfig+0x338>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	621a      	str	r2, [r3, #32]
 8002ff4:	e036      	b.n	8003064 <HAL_RCC_OscConfig+0x3a4>
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	fffeffff 	.word	0xfffeffff
 8003000:	fffbffff 	.word	0xfffbffff
 8003004:	40007000 	.word	0x40007000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x36a>
 8003010:	4bca      	ldr	r3, [pc, #808]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	4bc9      	ldr	r3, [pc, #804]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003016:	2101      	movs	r1, #1
 8003018:	438a      	bics	r2, r1
 800301a:	621a      	str	r2, [r3, #32]
 800301c:	4bc7      	ldr	r3, [pc, #796]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800301e:	6a1a      	ldr	r2, [r3, #32]
 8003020:	4bc6      	ldr	r3, [pc, #792]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003022:	2104      	movs	r1, #4
 8003024:	438a      	bics	r2, r1
 8003026:	621a      	str	r2, [r3, #32]
 8003028:	e01c      	b.n	8003064 <HAL_RCC_OscConfig+0x3a4>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b05      	cmp	r3, #5
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x38c>
 8003032:	4bc2      	ldr	r3, [pc, #776]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	4bc1      	ldr	r3, [pc, #772]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003038:	2104      	movs	r1, #4
 800303a:	430a      	orrs	r2, r1
 800303c:	621a      	str	r2, [r3, #32]
 800303e:	4bbf      	ldr	r3, [pc, #764]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003040:	6a1a      	ldr	r2, [r3, #32]
 8003042:	4bbe      	ldr	r3, [pc, #760]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003044:	2101      	movs	r1, #1
 8003046:	430a      	orrs	r2, r1
 8003048:	621a      	str	r2, [r3, #32]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x3a4>
 800304c:	4bbb      	ldr	r3, [pc, #748]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	4bba      	ldr	r3, [pc, #744]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003052:	2101      	movs	r1, #1
 8003054:	438a      	bics	r2, r1
 8003056:	621a      	str	r2, [r3, #32]
 8003058:	4bb8      	ldr	r3, [pc, #736]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	4bb7      	ldr	r3, [pc, #732]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800305e:	2104      	movs	r1, #4
 8003060:	438a      	bics	r2, r1
 8003062:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d014      	beq.n	8003096 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fe fb3a 	bl	80016e4 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	e009      	b.n	800308a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe fb35 	bl	80016e4 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	4aaf      	ldr	r2, [pc, #700]	; (8003340 <HAL_RCC_OscConfig+0x680>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e19a      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	4bac      	ldr	r3, [pc, #688]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x3b6>
 8003094:	e013      	b.n	80030be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe fb25 	bl	80016e4 <HAL_GetTick>
 800309a:	0003      	movs	r3, r0
 800309c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309e:	e009      	b.n	80030b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe fb20 	bl	80016e4 <HAL_GetTick>
 80030a4:	0002      	movs	r2, r0
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	4aa5      	ldr	r2, [pc, #660]	; (8003340 <HAL_RCC_OscConfig+0x680>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e185      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	4ba1      	ldr	r3, [pc, #644]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	2202      	movs	r2, #2
 80030ba:	4013      	ands	r3, r2
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030be:	231f      	movs	r3, #31
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b9c      	ldr	r3, [pc, #624]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	4b9b      	ldr	r3, [pc, #620]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80030ce:	499d      	ldr	r1, [pc, #628]	; (8003344 <HAL_RCC_OscConfig+0x684>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2210      	movs	r2, #16
 80030da:	4013      	ands	r3, r2
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12a      	bne.n	800313c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030e6:	4b95      	ldr	r3, [pc, #596]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80030e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ea:	4b94      	ldr	r3, [pc, #592]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80030ec:	2104      	movs	r1, #4
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80030f2:	4b92      	ldr	r3, [pc, #584]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80030f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f6:	4b91      	ldr	r3, [pc, #580]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe faf1 	bl	80016e4 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003108:	f7fe faec 	bl	80016e4 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e152      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	2202      	movs	r2, #2
 8003120:	4013      	ands	r3, r2
 8003122:	d0f1      	beq.n	8003108 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003124:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	22f8      	movs	r2, #248	; 0xf8
 800312a:	4393      	bics	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	00da      	lsls	r2, r3, #3
 8003134:	4b81      	ldr	r3, [pc, #516]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003136:	430a      	orrs	r2, r1
 8003138:	635a      	str	r2, [r3, #52]	; 0x34
 800313a:	e034      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	3305      	adds	r3, #5
 8003142:	d111      	bne.n	8003168 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003144:	4b7d      	ldr	r3, [pc, #500]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003148:	4b7c      	ldr	r3, [pc, #496]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800314a:	2104      	movs	r1, #4
 800314c:	438a      	bics	r2, r1
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003150:	4b7a      	ldr	r3, [pc, #488]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	22f8      	movs	r2, #248	; 0xf8
 8003156:	4393      	bics	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	00da      	lsls	r2, r3, #3
 8003160:	4b76      	ldr	r3, [pc, #472]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003162:	430a      	orrs	r2, r1
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
 8003166:	e01e      	b.n	80031a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003168:	4b74      	ldr	r3, [pc, #464]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800316a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316c:	4b73      	ldr	r3, [pc, #460]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800316e:	2104      	movs	r1, #4
 8003170:	430a      	orrs	r2, r1
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003174:	4b71      	ldr	r3, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003178:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800317a:	2101      	movs	r1, #1
 800317c:	438a      	bics	r2, r1
 800317e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003180:	f7fe fab0 	bl	80016e4 <HAL_GetTick>
 8003184:	0003      	movs	r3, r0
 8003186:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800318a:	f7fe faab 	bl	80016e4 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e111      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800319c:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	2202      	movs	r2, #2
 80031a2:	4013      	ands	r3, r2
 80031a4:	d1f1      	bne.n	800318a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2220      	movs	r2, #32
 80031ac:	4013      	ands	r3, r2
 80031ae:	d05c      	beq.n	800326a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031b0:	4b62      	ldr	r3, [pc, #392]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	220c      	movs	r2, #12
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d00e      	beq.n	80031da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031bc:	4b5f      	ldr	r3, [pc, #380]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	220c      	movs	r2, #12
 80031c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d114      	bne.n	80031f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80031c8:	4b5c      	ldr	r3, [pc, #368]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	23c0      	movs	r3, #192	; 0xc0
 80031ce:	025b      	lsls	r3, r3, #9
 80031d0:	401a      	ands	r2, r3
 80031d2:	23c0      	movs	r3, #192	; 0xc0
 80031d4:	025b      	lsls	r3, r3, #9
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d10b      	bne.n	80031f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80031da:	4b58      	ldr	r3, [pc, #352]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80031dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	4013      	ands	r3, r2
 80031e4:	d040      	beq.n	8003268 <HAL_RCC_OscConfig+0x5a8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d03c      	beq.n	8003268 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0e6      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01b      	beq.n	8003232 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80031fa:	4b50      	ldr	r3, [pc, #320]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80031fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fe:	4b4f      	ldr	r3, [pc, #316]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0249      	lsls	r1, r1, #9
 8003204:	430a      	orrs	r2, r1
 8003206:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fa6c 	bl	80016e4 <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003212:	f7fe fa67 	bl	80016e4 <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0cd      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003224:	4b45      	ldr	r3, [pc, #276]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	025b      	lsls	r3, r3, #9
 800322c:	4013      	ands	r3, r2
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x552>
 8003230:	e01b      	b.n	800326a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003232:	4b42      	ldr	r3, [pc, #264]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003238:	4943      	ldr	r1, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x688>)
 800323a:	400a      	ands	r2, r1
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe fa51 	bl	80016e4 <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003248:	f7fe fa4c 	bl	80016e4 <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0b2      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800325c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	025b      	lsls	r3, r3, #9
 8003262:	4013      	ands	r3, r2
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x588>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003268:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d100      	bne.n	8003274 <HAL_RCC_OscConfig+0x5b4>
 8003272:	e0a4      	b.n	80033be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003274:	4b31      	ldr	r3, [pc, #196]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	220c      	movs	r2, #12
 800327a:	4013      	ands	r3, r2
 800327c:	2b08      	cmp	r3, #8
 800327e:	d100      	bne.n	8003282 <HAL_RCC_OscConfig+0x5c2>
 8003280:	e078      	b.n	8003374 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b02      	cmp	r3, #2
 8003288:	d14c      	bne.n	8003324 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003290:	492e      	ldr	r1, [pc, #184]	; (800334c <HAL_RCC_OscConfig+0x68c>)
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe fa25 	bl	80016e4 <HAL_GetTick>
 800329a:	0003      	movs	r3, r0
 800329c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe fa20 	bl	80016e4 <HAL_GetTick>
 80032a4:	0002      	movs	r2, r0
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e086      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	049b      	lsls	r3, r3, #18
 80032ba:	4013      	ands	r3, r2
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	220f      	movs	r2, #15
 80032c4:	4393      	bics	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80032ce:	430a      	orrs	r2, r1
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_RCC_OscConfig+0x690>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	431a      	orrs	r2, r3
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	0449      	lsls	r1, r1, #17
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fe f9f3 	bl	80016e4 <HAL_GetTick>
 80032fe:	0003      	movs	r3, r0
 8003300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f9ee 	bl	80016e4 <HAL_GetTick>
 8003308:	0002      	movs	r2, r0
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e054      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	049b      	lsls	r3, r3, #18
 800331e:	4013      	ands	r3, r2
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x644>
 8003322:	e04c      	b.n	80033be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <HAL_RCC_OscConfig+0x67c>)
 800332a:	4908      	ldr	r1, [pc, #32]	; (800334c <HAL_RCC_OscConfig+0x68c>)
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe f9d8 	bl	80016e4 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x6a6>
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	40021000 	.word	0x40021000
 8003340:	00001388 	.word	0x00001388
 8003344:	efffffff 	.word	0xefffffff
 8003348:	fffeffff 	.word	0xfffeffff
 800334c:	feffffff 	.word	0xfeffffff
 8003350:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe f9c6 	bl	80016e4 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e02c      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_RCC_OscConfig+0x708>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	049b      	lsls	r3, r3, #18
 800336e:	4013      	ands	r3, r2
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x694>
 8003372:	e024      	b.n	80033be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e01f      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_OscConfig+0x708>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x708>)
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	23c0      	movs	r3, #192	; 0xc0
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	401a      	ands	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	429a      	cmp	r2, r3
 800339a:	d10e      	bne.n	80033ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	220f      	movs	r2, #15
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	23f0      	movs	r3, #240	; 0xf0
 80033ae:	039b      	lsls	r3, r3, #14
 80033b0:	401a      	ands	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b008      	add	sp, #32
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0bf      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d911      	bls.n	8003412 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b5e      	ldr	r3, [pc, #376]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4393      	bics	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003400:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	4013      	ands	r3, r2
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0a6      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2202      	movs	r2, #2
 8003418:	4013      	ands	r3, r2
 800341a:	d015      	beq.n	8003448 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2204      	movs	r2, #4
 8003422:	4013      	ands	r3, r2
 8003424:	d006      	beq.n	8003434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 800342c:	21e0      	movs	r1, #224	; 0xe0
 800342e:	00c9      	lsls	r1, r1, #3
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	22f0      	movs	r2, #240	; 0xf0
 800343a:	4393      	bics	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	4013      	ands	r3, r2
 8003450:	d04c      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	029b      	lsls	r3, r3, #10
 8003462:	4013      	ands	r3, r2
 8003464:	d120      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07a      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	049b      	lsls	r3, r3, #18
 800347a:	4013      	ands	r3, r2
 800347c:	d114      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06e      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	025b      	lsls	r3, r3, #9
 8003492:	4013      	ands	r3, r2
 8003494:	d108      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e062      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e05b      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a8:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4393      	bics	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fe f912 	bl	80016e4 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c4:	e009      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fe f90d 	bl	80016e4 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_RCC_ClockConfig+0x1a4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e042      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	220c      	movs	r2, #12
 80034e0:	401a      	ands	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1ec      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d211      	bcs.n	800351e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	4393      	bics	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_RCC_ClockConfig+0x19c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e020      	b.n	8003560 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <HAL_RCC_ClockConfig+0x1a8>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800353c:	f000 f820 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8003540:	0001      	movs	r1, r0
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x1a0>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	220f      	movs	r2, #15
 800354a:	4013      	ands	r3, r2
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x1ac>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	000a      	movs	r2, r1
 8003552:	40da      	lsrs	r2, r3
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x1b0>)
 8003556:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003558:	2003      	movs	r0, #3
 800355a:	f7fe f87d 	bl	8001658 <HAL_InitTick>
  
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	00001388 	.word	0x00001388
 8003574:	fffff8ff 	.word	0xfffff8ff
 8003578:	08004cd4 	.word	0x08004cd4
 800357c:	2000000c 	.word	0x2000000c

08003580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b08f      	sub	sp, #60	; 0x3c
 8003584:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003586:	2314      	movs	r3, #20
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	4a38      	ldr	r2, [pc, #224]	; (800366c <HAL_RCC_GetSysClockFreq+0xec>)
 800358c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800358e:	c313      	stmia	r3!, {r0, r1, r4}
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	4a36      	ldr	r2, [pc, #216]	; (8003670 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003598:	ca13      	ldmia	r2!, {r0, r1, r4}
 800359a:	c313      	stmia	r3!, {r0, r1, r4}
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a8:	2300      	movs	r3, #0
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80035b4:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	220c      	movs	r2, #12
 80035be:	4013      	ands	r3, r2
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d047      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0xd4>
 80035c4:	d849      	bhi.n	800365a <HAL_RCC_GetSysClockFreq+0xda>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x50>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x56>
 80035ce:	e044      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b29      	ldr	r3, [pc, #164]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035d4:	e044      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	0c9b      	lsrs	r3, r3, #18
 80035da:	220f      	movs	r2, #15
 80035dc:	4013      	ands	r3, r2
 80035de:	2214      	movs	r2, #20
 80035e0:	18ba      	adds	r2, r7, r2
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_GetSysClockFreq+0xf4>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	220f      	movs	r2, #15
 80035ec:	4013      	ands	r3, r2
 80035ee:	1d3a      	adds	r2, r7, #4
 80035f0:	5cd3      	ldrb	r3, [r2, r3]
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f6:	23c0      	movs	r3, #192	; 0xc0
 80035f8:	025b      	lsls	r3, r3, #9
 80035fa:	401a      	ands	r2, r3
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	429a      	cmp	r2, r3
 8003602:	d109      	bne.n	8003618 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003606:	481c      	ldr	r0, [pc, #112]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003608:	f7fc fd7c 	bl	8000104 <__udivsi3>
 800360c:	0003      	movs	r3, r0
 800360e:	001a      	movs	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	4353      	muls	r3, r2
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
 8003616:	e01a      	b.n	800364e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361a:	23c0      	movs	r3, #192	; 0xc0
 800361c:	025b      	lsls	r3, r3, #9
 800361e:	401a      	ands	r2, r3
 8003620:	23c0      	movs	r3, #192	; 0xc0
 8003622:	025b      	lsls	r3, r3, #9
 8003624:	429a      	cmp	r2, r3
 8003626:	d109      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800362a:	4814      	ldr	r0, [pc, #80]	; (800367c <HAL_RCC_GetSysClockFreq+0xfc>)
 800362c:	f7fc fd6a 	bl	8000104 <__udivsi3>
 8003630:	0003      	movs	r3, r0
 8003632:	001a      	movs	r2, r3
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	4353      	muls	r3, r2
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
 800363a:	e008      	b.n	800364e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800363c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363e:	480e      	ldr	r0, [pc, #56]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003640:	f7fc fd60 	bl	8000104 <__udivsi3>
 8003644:	0003      	movs	r3, r0
 8003646:	001a      	movs	r2, r3
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	4353      	muls	r3, r2
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003652:	e005      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003654:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003658:	e002      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <HAL_RCC_GetSysClockFreq+0xf8>)
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800365e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b00f      	add	sp, #60	; 0x3c
 8003668:	bd90      	pop	{r4, r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	08004250 	.word	0x08004250
 8003670:	08004260 	.word	0x08004260
 8003674:	40021000 	.word	0x40021000
 8003678:	007a1200 	.word	0x007a1200
 800367c:	02dc6c00 	.word	0x02dc6c00

08003680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0a8      	b.n	80037e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	2382      	movs	r3, #130	; 0x82
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d009      	beq.n	80036ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	61da      	str	r2, [r3, #28]
 80036ac:	e005      	b.n	80036ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	225d      	movs	r2, #93	; 0x5d
 80036c4:	5c9b      	ldrb	r3, [r3, r2]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	225c      	movs	r2, #92	; 0x5c
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fd fe98 	bl	800140c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	225d      	movs	r2, #93	; 0x5d
 80036e0:	2102      	movs	r1, #2
 80036e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2140      	movs	r1, #64	; 0x40
 80036f0:	438a      	bics	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	23e0      	movs	r3, #224	; 0xe0
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d902      	bls.n	8003706 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e002      	b.n	800370c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	015b      	lsls	r3, r3, #5
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	23f0      	movs	r3, #240	; 0xf0
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	429a      	cmp	r2, r3
 8003716:	d008      	beq.n	800372a <HAL_SPI_Init+0xaa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	23e0      	movs	r3, #224	; 0xe0
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	429a      	cmp	r2, r3
 8003722:	d002      	beq.n	800372a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	2382      	movs	r3, #130	; 0x82
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	401a      	ands	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6899      	ldr	r1, [r3, #8]
 8003738:	2384      	movs	r3, #132	; 0x84
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	400b      	ands	r3, r1
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2102      	movs	r1, #2
 8003746:	400b      	ands	r3, r1
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2101      	movs	r1, #1
 8003750:	400b      	ands	r3, r1
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6999      	ldr	r1, [r3, #24]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	400b      	ands	r3, r1
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2138      	movs	r1, #56	; 0x38
 8003766:	400b      	ands	r3, r1
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	400b      	ands	r3, r1
 8003772:	431a      	orrs	r2, r3
 8003774:	0011      	movs	r1, r2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	019b      	lsls	r3, r3, #6
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	2204      	movs	r2, #4
 8003790:	401a      	ands	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2110      	movs	r1, #16
 8003798:	400b      	ands	r3, r1
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a0:	2108      	movs	r1, #8
 80037a2:	400b      	ands	r3, r1
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68d9      	ldr	r1, [r3, #12]
 80037aa:	23f0      	movs	r3, #240	; 0xf0
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	400b      	ands	r3, r1
 80037b0:	431a      	orrs	r2, r3
 80037b2:	0011      	movs	r1, r2
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	015b      	lsls	r3, r3, #5
 80037ba:	401a      	ands	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4907      	ldr	r1, [pc, #28]	; (80037ec <HAL_SPI_Init+0x16c>)
 80037d0:	400a      	ands	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	225d      	movs	r2, #93	; 0x5d
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	fffff7ff 	.word	0xfffff7ff

080037f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e042      	b.n	8003888 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	223d      	movs	r2, #61	; 0x3d
 8003806:	5c9b      	ldrb	r3, [r3, r2]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	223c      	movs	r2, #60	; 0x3c
 8003812:	2100      	movs	r1, #0
 8003814:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f7fd fe43 	bl	80014a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	223d      	movs	r2, #61	; 0x3d
 8003822:	2102      	movs	r1, #2
 8003824:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f000 f8f3 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2246      	movs	r2, #70	; 0x46
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223e      	movs	r2, #62	; 0x3e
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	223f      	movs	r2, #63	; 0x3f
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2240      	movs	r2, #64	; 0x40
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2241      	movs	r2, #65	; 0x41
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2242      	movs	r2, #66	; 0x42
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2243      	movs	r2, #67	; 0x43
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2244      	movs	r2, #68	; 0x44
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2245      	movs	r2, #69	; 0x45
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223d      	movs	r2, #61	; 0x3d
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	0018      	movs	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	2317      	movs	r3, #23
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	223c      	movs	r2, #60	; 0x3c
 80038a8:	5c9b      	ldrb	r3, [r3, r2]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0ad      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	223c      	movs	r2, #60	; 0x3c
 80038b6:	2101      	movs	r1, #1
 80038b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	d100      	bne.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80038c0:	e076      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d900      	bls.n	80038ca <HAL_TIM_PWM_ConfigChannel+0x3a>
 80038c8:	e095      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d04e      	beq.n	800396e <HAL_TIM_PWM_ConfigChannel+0xde>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d900      	bls.n	80038d8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80038d6:	e08e      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d021      	beq.n	8003928 <HAL_TIM_PWM_ConfigChannel+0x98>
 80038e4:	e087      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	0011      	movs	r1, r2
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 f914 	bl	8003b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2108      	movs	r1, #8
 8003900:	430a      	orrs	r2, r1
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2104      	movs	r1, #4
 8003910:	438a      	bics	r2, r1
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	619a      	str	r2, [r3, #24]
      break;
 8003926:	e06b      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f97b 	bl	8003c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	0109      	lsls	r1, r1, #4
 8003944:	430a      	orrs	r2, r1
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4931      	ldr	r1, [pc, #196]	; (8003a18 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003954:	400a      	ands	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
      break;
 800396c:	e048      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	0011      	movs	r1, r2
 8003976:	0018      	movs	r0, r3
 8003978:	f000 f9dc 	bl	8003d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2108      	movs	r1, #8
 8003988:	430a      	orrs	r2, r1
 800398a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2104      	movs	r1, #4
 8003998:	438a      	bics	r2, r1
 800399a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69d9      	ldr	r1, [r3, #28]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	61da      	str	r2, [r3, #28]
      break;
 80039ae:	e027      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 fa41 	bl	8003e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	0109      	lsls	r1, r1, #4
 80039cc:	430a      	orrs	r2, r1
 80039ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	490f      	ldr	r1, [pc, #60]	; (8003a18 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80039dc:	400a      	ands	r2, r1
 80039de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69d9      	ldr	r1, [r3, #28]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	61da      	str	r2, [r3, #28]
      break;
 80039f4:	e004      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80039f6:	2317      	movs	r3, #23
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
      break;
 80039fe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	223c      	movs	r2, #60	; 0x3c
 8003a04:	2100      	movs	r1, #0
 8003a06:	5499      	strb	r1, [r3, r2]

  return status;
 8003a08:	2317      	movs	r3, #23
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b006      	add	sp, #24
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	fffffbff 	.word	0xfffffbff

08003a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a34      	ldr	r2, [pc, #208]	; (8003b00 <TIM_Base_SetConfig+0xe4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d008      	beq.n	8003a46 <TIM_Base_SetConfig+0x2a>
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	05db      	lsls	r3, r3, #23
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x2a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a30      	ldr	r2, [pc, #192]	; (8003b04 <TIM_Base_SetConfig+0xe8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2270      	movs	r2, #112	; 0x70
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <TIM_Base_SetConfig+0xe4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <TIM_Base_SetConfig+0x76>
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	05db      	lsls	r3, r3, #23
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0x76>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <TIM_Base_SetConfig+0xe8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0x76>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <TIM_Base_SetConfig+0xec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0x76>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	; (8003b0c <TIM_Base_SetConfig+0xf0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0x76>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <TIM_Base_SetConfig+0xf4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0x76>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <TIM_Base_SetConfig+0xf8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <TIM_Base_SetConfig+0xfc>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	001a      	movs	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <TIM_Base_SetConfig+0xe4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_Base_SetConfig+0xce>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <TIM_Base_SetConfig+0xf0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_Base_SetConfig+0xce>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <TIM_Base_SetConfig+0xf4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_Base_SetConfig+0xce>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <TIM_Base_SetConfig+0xf8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d103      	bne.n	8003af2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	615a      	str	r2, [r3, #20]
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40002000 	.word	0x40002000
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40014400 	.word	0x40014400
 8003b14:	40014800 	.word	0x40014800
 8003b18:	fffffcff 	.word	0xfffffcff

08003b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4393      	bics	r3, r2
 8003b2e:	001a      	movs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2270      	movs	r2, #112	; 0x70
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2203      	movs	r2, #3
 8003b52:	4393      	bics	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2202      	movs	r2, #2
 8003b64:	4393      	bics	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <TIM_OC1_SetConfig+0xf8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_OC1_SetConfig+0x76>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <TIM_OC1_SetConfig+0xfc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_OC1_SetConfig+0x76>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <TIM_OC1_SetConfig+0x100>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_OC1_SetConfig+0x76>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <TIM_OC1_SetConfig+0x104>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10c      	bne.n	8003bac <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2208      	movs	r2, #8
 8003b96:	4393      	bics	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	4393      	bics	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <TIM_OC1_SetConfig+0xf8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_OC1_SetConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <TIM_OC1_SetConfig+0xfc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_OC1_SetConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <TIM_OC1_SetConfig+0x100>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC1_SetConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <TIM_OC1_SetConfig+0x104>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d111      	bne.n	8003bf0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <TIM_OC1_SetConfig+0x108>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <TIM_OC1_SetConfig+0x10c>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b006      	add	sp, #24
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40014000 	.word	0x40014000
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800
 8003c24:	fffffeff 	.word	0xfffffeff
 8003c28:	fffffdff 	.word	0xfffffdff

08003c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	4393      	bics	r3, r2
 8003c3e:	001a      	movs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <TIM_OC2_SetConfig+0xe8>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <TIM_OC2_SetConfig+0xec>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2220      	movs	r2, #32
 8003c76:	4393      	bics	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <TIM_OC2_SetConfig+0xf0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10d      	bne.n	8003caa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2280      	movs	r2, #128	; 0x80
 8003c92:	4393      	bics	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2240      	movs	r2, #64	; 0x40
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1b      	ldr	r2, [pc, #108]	; (8003d1c <TIM_OC2_SetConfig+0xf0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00b      	beq.n	8003cca <TIM_OC2_SetConfig+0x9e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1a      	ldr	r2, [pc, #104]	; (8003d20 <TIM_OC2_SetConfig+0xf4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d007      	beq.n	8003cca <TIM_OC2_SetConfig+0x9e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <TIM_OC2_SetConfig+0xf8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <TIM_OC2_SetConfig+0x9e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <TIM_OC2_SetConfig+0xfc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d113      	bne.n	8003cf2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <TIM_OC2_SetConfig+0x100>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <TIM_OC2_SetConfig+0x104>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	621a      	str	r2, [r3, #32]
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b006      	add	sp, #24
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	ffff8fff 	.word	0xffff8fff
 8003d18:	fffffcff 	.word	0xfffffcff
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40014000 	.word	0x40014000
 8003d24:	40014400 	.word	0x40014400
 8003d28:	40014800 	.word	0x40014800
 8003d2c:	fffffbff 	.word	0xfffffbff
 8003d30:	fffff7ff 	.word	0xfffff7ff

08003d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003d44:	401a      	ands	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2270      	movs	r2, #112	; 0x70
 8003d60:	4393      	bics	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2203      	movs	r2, #3
 8003d68:	4393      	bics	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <TIM_OC3_SetConfig+0xe8>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <TIM_OC3_SetConfig+0xec>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <TIM_OC3_SetConfig+0xf0>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <TIM_OC3_SetConfig+0xf4>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1b      	ldr	r2, [pc, #108]	; (8003e20 <TIM_OC3_SetConfig+0xec>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_OC3_SetConfig+0x9a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <TIM_OC3_SetConfig+0xf8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_OC3_SetConfig+0x9a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <TIM_OC3_SetConfig+0xfc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_OC3_SetConfig+0x9a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <TIM_OC3_SetConfig+0x100>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d113      	bne.n	8003df6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <TIM_OC3_SetConfig+0x104>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <TIM_OC3_SetConfig+0x108>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b006      	add	sp, #24
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	fffffeff 	.word	0xfffffeff
 8003e1c:	fffffdff 	.word	0xfffffdff
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	fffff7ff 	.word	0xfffff7ff
 8003e28:	fffffbff 	.word	0xfffffbff
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	ffffefff 	.word	0xffffefff
 8003e3c:	ffffdfff 	.word	0xffffdfff

08003e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <TIM_OC4_SetConfig+0xb0>)
 8003e50:	401a      	ands	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <TIM_OC4_SetConfig+0xb4>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a21      	ldr	r2, [pc, #132]	; (8003ef8 <TIM_OC4_SetConfig+0xb8>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <TIM_OC4_SetConfig+0xbc>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	031b      	lsls	r3, r3, #12
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <TIM_OC4_SetConfig+0xc0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_OC4_SetConfig+0x78>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <TIM_OC4_SetConfig+0xc4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <TIM_OC4_SetConfig+0x78>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <TIM_OC4_SetConfig+0xc8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC4_SetConfig+0x78>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <TIM_OC4_SetConfig+0xcc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d109      	bne.n	8003ecc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <TIM_OC4_SetConfig+0xd0>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	019b      	lsls	r3, r3, #6
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b006      	add	sp, #24
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	ffffefff 	.word	0xffffefff
 8003ef4:	ffff8fff 	.word	0xffff8fff
 8003ef8:	fffffcff 	.word	0xfffffcff
 8003efc:	ffffdfff 	.word	0xffffdfff
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800
 8003f10:	ffffbfff 	.word	0xffffbfff

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	223c      	movs	r2, #60	; 0x3c
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e047      	b.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	223c      	movs	r2, #60	; 0x3c
 8003f30:	2101      	movs	r1, #1
 8003f32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	223d      	movs	r2, #61	; 0x3d
 8003f38:	2102      	movs	r1, #2
 8003f3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2270      	movs	r2, #112	; 0x70
 8003f50:	4393      	bics	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	05db      	lsls	r3, r3, #23
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d009      	beq.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10c      	bne.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	4393      	bics	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	223d      	movs	r2, #61	; 0x3d
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	223c      	movs	r2, #60	; 0x3c
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b004      	add	sp, #16
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40014000 	.word	0x40014000

08003fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223c      	movs	r2, #60	; 0x3c
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e03e      	b.n	800406a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	223c      	movs	r2, #60	; 0x3c
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004008:	401a      	ands	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004016:	401a      	ands	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a16      	ldr	r2, [pc, #88]	; (800407c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004024:	401a      	ands	r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004032:	401a      	ands	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004040:	401a      	ands	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800404e:	401a      	ands	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	223c      	movs	r2, #60	; 0x3c
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b004      	add	sp, #16
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	fffffcff 	.word	0xfffffcff
 8004078:	fffffbff 	.word	0xfffffbff
 800407c:	fffff7ff 	.word	0xfffff7ff
 8004080:	ffffefff 	.word	0xffffefff
 8004084:	ffffdfff 	.word	0xffffdfff
 8004088:	ffffbfff 	.word	0xffffbfff

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	2600      	movs	r6, #0
 8004090:	4d0c      	ldr	r5, [pc, #48]	; (80040c4 <__libc_init_array+0x38>)
 8004092:	4c0d      	ldr	r4, [pc, #52]	; (80040c8 <__libc_init_array+0x3c>)
 8004094:	1b64      	subs	r4, r4, r5
 8004096:	10a4      	asrs	r4, r4, #2
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	2600      	movs	r6, #0
 800409e:	f000 f821 	bl	80040e4 <_init>
 80040a2:	4d0a      	ldr	r5, [pc, #40]	; (80040cc <__libc_init_array+0x40>)
 80040a4:	4c0a      	ldr	r4, [pc, #40]	; (80040d0 <__libc_init_array+0x44>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	00b3      	lsls	r3, r6, #2
 80040b2:	58eb      	ldr	r3, [r5, r3]
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	00b3      	lsls	r3, r6, #2
 80040bc:	58eb      	ldr	r3, [r5, r3]
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	08004ce4 	.word	0x08004ce4
 80040c8:	08004ce4 	.word	0x08004ce4
 80040cc:	08004ce4 	.word	0x08004ce4
 80040d0:	08004ce8 	.word	0x08004ce8

080040d4 <memset>:
 80040d4:	0003      	movs	r3, r0
 80040d6:	1882      	adds	r2, r0, r2
 80040d8:	4293      	cmp	r3, r2
 80040da:	d100      	bne.n	80040de <memset+0xa>
 80040dc:	4770      	bx	lr
 80040de:	7019      	strb	r1, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	e7f9      	b.n	80040d8 <memset+0x4>

080040e4 <_init>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr

080040f0 <_fini>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr
