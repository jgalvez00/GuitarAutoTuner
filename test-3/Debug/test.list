
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b08  08004b08  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b08  08004b08  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b08  08004b08  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08004b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000004c  08004b5c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004b5c  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b355  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d2  00000000  00000000  0002b3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab4c  00000000  00000000  0002e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b877  00000000  00000000  00048bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8aa2  00000000  00000000  0005443b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcedd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002540  00000000  00000000  000fcf30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000004c 	.word	0x2000004c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f64 	.word	0x08003f64

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000050 	.word	0x20000050
 8000100:	08003f64 	.word	0x08003f64

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <nano_wait>:
#define LCD_RESET_CLR GPIO_TYPE->BRR=1<<LCD_RESET

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	1c18      	adds	r0, r3, #0

080003fc <repeat>:
 80003fc:	3853      	subs	r0, #83	; 0x53
 80003fe:	dcfd      	bgt.n	80003fc <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b002      	add	sp, #8
 8000406:	bd80      	pop	{r7, pc}

08000408 <LCD_Reset>:

void LCD_Reset(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
    // Assert reset
    GPIOA->BRR = 1<<LCD_RESET;
 800040c:	2390      	movs	r3, #144	; 0x90
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2204      	movs	r2, #4
 8000412:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(100000000);
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <LCD_Reset+0x2c>)
 8000416:	0018      	movs	r0, r3
 8000418:	f7ff ffea 	bl	80003f0 <nano_wait>
    GPIOA->BSRR = 1<<LCD_RESET;
 800041c:	2390      	movs	r3, #144	; 0x90
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2204      	movs	r2, #4
 8000422:	619a      	str	r2, [r3, #24]
    nano_wait(50000000);
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <LCD_Reset+0x30>)
 8000426:	0018      	movs	r0, r3
 8000428:	f7ff ffe2 	bl	80003f0 <nano_wait>
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	05f5e100 	.word	0x05f5e100
 8000438:	02faf080 	.word	0x02faf080

0800043c <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	0002      	movs	r2, r0
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <LCD_WR_REG+0x30>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	4013      	ands	r3, r2
 8000452:	d1fa      	bne.n	800044a <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    LCD_RS_CLR;
 8000454:	2390      	movs	r3, #144	; 0x90
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	2208      	movs	r2, #8
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
    *((uint8_t*)&SPI->DR) = data;
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <LCD_WR_REG+0x34>)
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	7013      	strb	r3, [r2, #0]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40013000 	.word	0x40013000
 8000470:	4001300c 	.word	0x4001300c

08000474 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	0002      	movs	r2, r0
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LCD_WR_DATA+0x30>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	4013      	ands	r3, r2
 800048a:	d1fa      	bne.n	8000482 <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    LCD_RS_SET;
 800048c:	2390      	movs	r3, #144	; 0x90
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	2208      	movs	r2, #8
 8000492:	619a      	str	r2, [r3, #24]
    *((uint8_t*)&SPI->DR) = data;
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <LCD_WR_DATA+0x34>)
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	7013      	strb	r3, [r2, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40013000 	.word	0x40013000
 80004a8:	4001300c 	.word	0x4001300c

080004ac <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    LCD_RS_SET;
 80004b0:	2390      	movs	r3, #144	; 0x90
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	2208      	movs	r2, #8
 80004b6:	619a      	str	r2, [r3, #24]
    SPI->CR2 |= SPI_CR2_DS;
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <LCD_WriteData16_Prepare+0x20>)
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <LCD_WriteData16_Prepare+0x20>)
 80004be:	21f0      	movs	r1, #240	; 0xf0
 80004c0:	0109      	lsls	r1, r1, #4
 80004c2:	430a      	orrs	r2, r1
 80004c4:	605a      	str	r2, [r3, #4]
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40013000 	.word	0x40013000

080004d0 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dbb      	adds	r3, r7, #6
 80004da:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <LCD_WriteData16+0x28>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	2202      	movs	r2, #2
 80004e4:	4013      	ands	r3, r2
 80004e6:	d0fa      	beq.n	80004de <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <LCD_WriteData16+0x28>)
 80004ea:	1dba      	adds	r2, r7, #6
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	60da      	str	r2, [r3, #12]
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40013000 	.word	0x40013000

080004fc <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LCD_WriteData16_End+0x18>)
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <LCD_WriteData16_End+0x18>)
 8000506:	4904      	ldr	r1, [pc, #16]	; (8000518 <LCD_WriteData16_End+0x1c>)
 8000508:	400a      	ands	r2, r1
 800050a:	605a      	str	r2, [r3, #4]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40013000 	.word	0x40013000
 8000518:	fffff0ff 	.word	0xfffff0ff

0800051c <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	0002      	movs	r2, r0
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	1c0a      	adds	r2, r1, #0
 800052c:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	0018      	movs	r0, r3
 8000534:	f7ff ff82 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	0018      	movs	r0, r3
 8000540:	f7ff ff98 	bl	8000474 <LCD_WR_DATA>
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LCD_WriteRAM_Prepare+0x18>)
 8000552:	891b      	ldrh	r3, [r3, #8]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	0018      	movs	r0, r3
 8000558:	f7ff ff70 	bl	800043c <LCD_WR_REG>
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000074 	.word	0x20000074

08000568 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <LCD_direction+0xa4>)
 8000576:	222a      	movs	r2, #42	; 0x2a
 8000578:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <LCD_direction+0xa4>)
 800057c:	222b      	movs	r2, #43	; 0x2b
 800057e:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <LCD_direction+0xa4>)
 8000582:	222c      	movs	r2, #44	; 0x2c
 8000584:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b03      	cmp	r3, #3
 800058c:	d02c      	beq.n	80005e8 <LCD_direction+0x80>
 800058e:	dc37      	bgt.n	8000600 <LCD_direction+0x98>
 8000590:	2b02      	cmp	r3, #2
 8000592:	d01d      	beq.n	80005d0 <LCD_direction+0x68>
 8000594:	dc34      	bgt.n	8000600 <LCD_direction+0x98>
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <LCD_direction+0x38>
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00c      	beq.n	80005b8 <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 800059e:	e02f      	b.n	8000600 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <LCD_direction+0xa4>)
 80005a2:	22f0      	movs	r2, #240	; 0xf0
 80005a4:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <LCD_direction+0xa4>)
 80005a8:	22a0      	movs	r2, #160	; 0xa0
 80005aa:	0052      	lsls	r2, r2, #1
 80005ac:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80005ae:	2108      	movs	r1, #8
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f7ff ffb3 	bl	800051c <LCD_WriteReg>
        break;
 80005b6:	e024      	b.n	8000602 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <LCD_direction+0xa4>)
 80005ba:	22a0      	movs	r2, #160	; 0xa0
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <LCD_direction+0xa4>)
 80005c2:	22f0      	movs	r2, #240	; 0xf0
 80005c4:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80005c6:	2168      	movs	r1, #104	; 0x68
 80005c8:	2036      	movs	r0, #54	; 0x36
 80005ca:	f7ff ffa7 	bl	800051c <LCD_WriteReg>
        break;
 80005ce:	e018      	b.n	8000602 <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <LCD_direction+0xa4>)
 80005d2:	22f0      	movs	r2, #240	; 0xf0
 80005d4:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <LCD_direction+0xa4>)
 80005d8:	22a0      	movs	r2, #160	; 0xa0
 80005da:	0052      	lsls	r2, r2, #1
 80005dc:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 80005de:	21c8      	movs	r1, #200	; 0xc8
 80005e0:	2036      	movs	r0, #54	; 0x36
 80005e2:	f7ff ff9b 	bl	800051c <LCD_WriteReg>
        break;
 80005e6:	e00c      	b.n	8000602 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LCD_direction+0xa4>)
 80005ea:	22a0      	movs	r2, #160	; 0xa0
 80005ec:	0052      	lsls	r2, r2, #1
 80005ee:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <LCD_direction+0xa4>)
 80005f2:	22f0      	movs	r2, #240	; 0xf0
 80005f4:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80005f6:	21a8      	movs	r1, #168	; 0xa8
 80005f8:	2036      	movs	r0, #54	; 0x36
 80005fa:	f7ff ff8f 	bl	800051c <LCD_WriteReg>
        break;
 80005fe:	e000      	b.n	8000602 <LCD_direction+0x9a>
    default:break;
 8000600:	46c0      	nop			; (mov r8, r8)
    }
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000074 	.word	0x20000074

08000610 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    LCD_Reset();
 8000614:	f7ff fef8 	bl	8000408 <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8000618:	20cf      	movs	r0, #207	; 0xcf
 800061a:	f7ff ff0f 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff28 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8000624:	20d9      	movs	r0, #217	; 0xd9
 8000626:	f7ff ff25 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 800062a:	2030      	movs	r0, #48	; 0x30
 800062c:	f7ff ff22 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8000630:	20ed      	movs	r0, #237	; 0xed
 8000632:	f7ff ff03 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f7ff ff1c 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 800063c:	2003      	movs	r0, #3
 800063e:	f7ff ff19 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8000642:	2012      	movs	r0, #18
 8000644:	f7ff ff16 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8000648:	2081      	movs	r0, #129	; 0x81
 800064a:	f7ff ff13 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 800064e:	20e8      	movs	r0, #232	; 0xe8
 8000650:	f7ff fef4 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8000654:	2085      	movs	r0, #133	; 0x85
 8000656:	f7ff ff0d 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 800065a:	2010      	movs	r0, #16
 800065c:	f7ff ff0a 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8000660:	207a      	movs	r0, #122	; 0x7a
 8000662:	f7ff ff07 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8000666:	20cb      	movs	r0, #203	; 0xcb
 8000668:	f7ff fee8 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 800066c:	2039      	movs	r0, #57	; 0x39
 800066e:	f7ff ff01 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8000672:	202c      	movs	r0, #44	; 0x2c
 8000674:	f7ff fefe 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff fefb 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 800067e:	2034      	movs	r0, #52	; 0x34
 8000680:	f7ff fef8 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff fef5 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 800068a:	20f7      	movs	r0, #247	; 0xf7
 800068c:	f7ff fed6 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 8000690:	2020      	movs	r0, #32
 8000692:	f7ff feef 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8000696:	20ea      	movs	r0, #234	; 0xea
 8000698:	f7ff fed0 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fee9 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fee6 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 80006a8:	20c0      	movs	r0, #192	; 0xc0
 80006aa:	f7ff fec7 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 80006ae:	2021      	movs	r0, #33	; 0x21
 80006b0:	f7ff fee0 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 80006b4:	20c1      	movs	r0, #193	; 0xc1
 80006b6:	f7ff fec1 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 80006ba:	2012      	movs	r0, #18
 80006bc:	f7ff feda 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 80006c0:	20c5      	movs	r0, #197	; 0xc5
 80006c2:	f7ff febb 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 80006c6:	2039      	movs	r0, #57	; 0x39
 80006c8:	f7ff fed4 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 80006cc:	2037      	movs	r0, #55	; 0x37
 80006ce:	f7ff fed1 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 80006d2:	20c7      	movs	r0, #199	; 0xc7
 80006d4:	f7ff feb2 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 80006d8:	20ab      	movs	r0, #171	; 0xab
 80006da:	f7ff fecb 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f7ff feac 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 80006e4:	2048      	movs	r0, #72	; 0x48
 80006e6:	f7ff fec5 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 80006ea:	203a      	movs	r0, #58	; 0x3a
 80006ec:	f7ff fea6 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 80006f0:	2055      	movs	r0, #85	; 0x55
 80006f2:	f7ff febf 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 80006f6:	20b1      	movs	r0, #177	; 0xb1
 80006f8:	f7ff fea0 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff feb9 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8000702:	201b      	movs	r0, #27
 8000704:	f7ff feb6 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8000708:	20b6      	movs	r0, #182	; 0xb6
 800070a:	f7ff fe97 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 800070e:	200a      	movs	r0, #10
 8000710:	f7ff feb0 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8000714:	20a2      	movs	r0, #162	; 0xa2
 8000716:	f7ff fead 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800071a:	20f2      	movs	r0, #242	; 0xf2
 800071c:	f7ff fe8e 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff fea7 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8000726:	2026      	movs	r0, #38	; 0x26
 8000728:	f7ff fe88 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fea1 	bl	8000474 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8000732:	20e0      	movs	r0, #224	; 0xe0
 8000734:	f7ff fe82 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fe9b 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 800073e:	2023      	movs	r0, #35	; 0x23
 8000740:	f7ff fe98 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8000744:	201f      	movs	r0, #31
 8000746:	f7ff fe95 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 800074a:	200b      	movs	r0, #11
 800074c:	f7ff fe92 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8000750:	200e      	movs	r0, #14
 8000752:	f7ff fe8f 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8000756:	2008      	movs	r0, #8
 8000758:	f7ff fe8c 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 800075c:	204b      	movs	r0, #75	; 0x4b
 800075e:	f7ff fe89 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8000762:	20a8      	movs	r0, #168	; 0xa8
 8000764:	f7ff fe86 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8000768:	203b      	movs	r0, #59	; 0x3b
 800076a:	f7ff fe83 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 800076e:	200a      	movs	r0, #10
 8000770:	f7ff fe80 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8000774:	2014      	movs	r0, #20
 8000776:	f7ff fe7d 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 800077a:	2006      	movs	r0, #6
 800077c:	f7ff fe7a 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8000780:	2010      	movs	r0, #16
 8000782:	f7ff fe77 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8000786:	2009      	movs	r0, #9
 8000788:	f7ff fe74 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe71 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8000792:	20e1      	movs	r0, #225	; 0xe1
 8000794:	f7ff fe52 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fe6b 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 800079e:	201c      	movs	r0, #28
 80007a0:	f7ff fe68 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 80007a4:	2020      	movs	r0, #32
 80007a6:	f7ff fe65 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 80007aa:	2004      	movs	r0, #4
 80007ac:	f7ff fe62 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 80007b0:	2010      	movs	r0, #16
 80007b2:	f7ff fe5f 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 80007b6:	2008      	movs	r0, #8
 80007b8:	f7ff fe5c 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 80007bc:	2034      	movs	r0, #52	; 0x34
 80007be:	f7ff fe59 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 80007c2:	2047      	movs	r0, #71	; 0x47
 80007c4:	f7ff fe56 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 80007c8:	2044      	movs	r0, #68	; 0x44
 80007ca:	f7ff fe53 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 80007ce:	2005      	movs	r0, #5
 80007d0:	f7ff fe50 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 80007d4:	200b      	movs	r0, #11
 80007d6:	f7ff fe4d 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 80007da:	2009      	movs	r0, #9
 80007dc:	f7ff fe4a 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 80007e0:	202f      	movs	r0, #47	; 0x2f
 80007e2:	f7ff fe47 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 80007e6:	2036      	movs	r0, #54	; 0x36
 80007e8:	f7ff fe44 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 80007ec:	200f      	movs	r0, #15
 80007ee:	f7ff fe41 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 80007f2:	202b      	movs	r0, #43	; 0x2b
 80007f4:	f7ff fe22 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fe3b 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fe38 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fe35 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 800080a:	203f      	movs	r0, #63	; 0x3f
 800080c:	f7ff fe32 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8000810:	202a      	movs	r0, #42	; 0x2a
 8000812:	f7ff fe13 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fe2c 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fe29 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fe26 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8000828:	20ef      	movs	r0, #239	; 0xef
 800082a:	f7ff fe23 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 800082e:	2011      	movs	r0, #17
 8000830:	f7ff fe04 	bl	800043c <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LCD_Init+0x240>)
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff fdda 	bl	80003f0 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 800083c:	2029      	movs	r0, #41	; 0x29
 800083e:	f7ff fdfd 	bl	800043c <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fe90 	bl	8000568 <LCD_direction>
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	07270e00 	.word	0x07270e00

08000854 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	0002      	movs	r2, r0
 800085c:	1dbb      	adds	r3, r7, #6
 800085e:	801a      	strh	r2, [r3, #0]
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <LCD_Clear+0x6c>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <LCD_Clear+0x6c>)
 8000868:	885b      	ldrh	r3, [r3, #2]
 800086a:	3b01      	subs	r3, #1
 800086c:	2100      	movs	r1, #0
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f828 	bl	80008c4 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8000874:	f7ff fe1a 	bl	80004ac <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e013      	b.n	80008a6 <LCD_Clear+0x52>
    {
        for(m=0;m<lcddev.width;m++)
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	e007      	b.n	8000894 <LCD_Clear+0x40>
        {
            LCD_WriteData16(Color);
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff fe21 	bl	80004d0 <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <LCD_Clear+0x6c>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	4293      	cmp	r3, r2
 800089e:	d3f1      	bcc.n	8000884 <LCD_Clear+0x30>
    for(i=0;i<lcddev.height;i++)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <LCD_Clear+0x6c>)
 80008a8:	885b      	ldrh	r3, [r3, #2]
 80008aa:	001a      	movs	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d3e5      	bcc.n	800087e <LCD_Clear+0x2a>
        }
    }
    LCD_WriteData16_End();
 80008b2:	f7ff fe23 	bl	80004fc <LCD_WriteData16_End>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000074 	.word	0x20000074

080008c4 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	0005      	movs	r5, r0
 80008cc:	000c      	movs	r4, r1
 80008ce:	0010      	movs	r0, r2
 80008d0:	0019      	movs	r1, r3
 80008d2:	1dbb      	adds	r3, r7, #6
 80008d4:	1c2a      	adds	r2, r5, #0
 80008d6:	801a      	strh	r2, [r3, #0]
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	1c22      	adds	r2, r4, #0
 80008dc:	801a      	strh	r2, [r3, #0]
 80008de:	1cbb      	adds	r3, r7, #2
 80008e0:	1c02      	adds	r2, r0, #0
 80008e2:	801a      	strh	r2, [r3, #0]
 80008e4:	003b      	movs	r3, r7
 80008e6:	1c0a      	adds	r2, r1, #0
 80008e8:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <LCD_SetWindow+0xbc>)
 80008ec:	895b      	ldrh	r3, [r3, #10]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff fda3 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 80008f6:	1dbb      	adds	r3, r7, #6
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fdb7 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff fdb1 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8000912:	1cbb      	adds	r3, r7, #2
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fda9 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8000922:	1cbb      	adds	r3, r7, #2
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff fda3 	bl	8000474 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <LCD_SetWindow+0xbc>)
 8000930:	899b      	ldrh	r3, [r3, #12]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fd81 	bl	800043c <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	b29b      	uxth	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff fd95 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fd8f 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8000956:	003b      	movs	r3, r7
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff fd87 	bl	8000474 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8000966:	003b      	movs	r3, r7
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fd81 	bl	8000474 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8000972:	f7ff fdeb 	bl	800054c <LCD_WriteRAM_Prepare>
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bdb0      	pop	{r4, r5, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000074 	.word	0x20000074

08000984 <LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
void LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	0004      	movs	r4, r0
 800098c:	0008      	movs	r0, r1
 800098e:	0011      	movs	r1, r2
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	1c22      	adds	r2, r4, #0
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	1c02      	adds	r2, r0, #0
 800099a:	801a      	strh	r2, [r3, #0]
 800099c:	1cbb      	adds	r3, r7, #2
 800099e:	1c0a      	adds	r2, r1, #0
 80009a0:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	881c      	ldrh	r4, [r3, #0]
 80009a6:	1dbb      	adds	r3, r7, #6
 80009a8:	881a      	ldrh	r2, [r3, #0]
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	8819      	ldrh	r1, [r3, #0]
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	8818      	ldrh	r0, [r3, #0]
 80009b2:	0023      	movs	r3, r4
 80009b4:	f7ff ff86 	bl	80008c4 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 80009b8:	f7ff fd78 	bl	80004ac <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 80009bc:	1cbb      	adds	r3, r7, #2
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fd85 	bl	80004d0 <LCD_WriteData16>
    LCD_WriteData16_End();
 80009c6:	f7ff fd99 	bl	80004fc <LCD_WriteData16_End>
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b003      	add	sp, #12
 80009d0:	bd90      	pop	{r4, r7, pc}
	...

080009d4 <LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0005      	movs	r5, r0
 80009dc:	000c      	movs	r4, r1
 80009de:	0010      	movs	r0, r2
 80009e0:	0019      	movs	r1, r3
 80009e2:	1dbb      	adds	r3, r7, #6
 80009e4:	1c2a      	adds	r2, r5, #0
 80009e6:	801a      	strh	r2, [r3, #0]
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	1c22      	adds	r2, r4, #0
 80009ec:	801a      	strh	r2, [r3, #0]
 80009ee:	1cbb      	adds	r3, r7, #2
 80009f0:	1c02      	adds	r2, r0, #0
 80009f2:	801a      	strh	r2, [r3, #0]
 80009f4:	003b      	movs	r3, r7
 80009f6:	1c0a      	adds	r2, r1, #0
 80009f8:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 80009fa:	2220      	movs	r2, #32
 80009fc:	18bb      	adds	r3, r7, r2
 80009fe:	18ba      	adds	r2, r7, r2
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	3a20      	subs	r2, #32
 8000a04:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8000a06:	2124      	movs	r1, #36	; 0x24
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	b29c      	uxth	r4, r3
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	8819      	ldrh	r1, [r3, #0]
 8000a34:	1dbb      	adds	r3, r7, #6
 8000a36:	8818      	ldrh	r0, [r3, #0]
 8000a38:	0013      	movs	r3, r2
 8000a3a:	0022      	movs	r2, r4
 8000a3c:	f7ff ff42 	bl	80008c4 <LCD_SetWindow>
    if (!mode) {
 8000a40:	2328      	movs	r3, #40	; 0x28
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d166      	bne.n	8000b18 <LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 8000a4a:	f7ff fd2f 	bl	80004ac <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 8000a4e:	230e      	movs	r3, #14
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e054      	b.n	8000b02 <LCD_DrawChar+0x12e>
            if (size==12)
 8000a58:	2324      	movs	r3, #36	; 0x24
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b0c      	cmp	r3, #12
 8000a60:	d110      	bne.n	8000a84 <LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 8000a62:	2320      	movs	r3, #32
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	230e      	movs	r3, #14
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	7818      	ldrb	r0, [r3, #0]
 8000a6e:	230f      	movs	r3, #15
 8000a70:	18f9      	adds	r1, r7, r3
 8000a72:	4c61      	ldr	r4, [pc, #388]	; (8000bf8 <LCD_DrawChar+0x224>)
 8000a74:	0013      	movs	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	18e3      	adds	r3, r4, r3
 8000a7e:	5c1b      	ldrb	r3, [r3, r0]
 8000a80:	700b      	strb	r3, [r1, #0]
 8000a82:	e00c      	b.n	8000a9e <LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 8000a84:	2320      	movs	r3, #32
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	7819      	ldrb	r1, [r3, #0]
 8000a8a:	230e      	movs	r3, #14
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	230f      	movs	r3, #15
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	4859      	ldr	r0, [pc, #356]	; (8000bfc <LCD_DrawChar+0x228>)
 8000a96:	0109      	lsls	r1, r1, #4
 8000a98:	1841      	adds	r1, r0, r1
 8000a9a:	5c8a      	ldrb	r2, [r1, r2]
 8000a9c:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8000a9e:	230d      	movs	r3, #13
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e01c      	b.n	8000ae2 <LCD_DrawChar+0x10e>
                if (temp&0x01)
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d005      	beq.n	8000ac0 <LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 8000ab4:	1cbb      	adds	r3, r7, #2
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fd09 	bl	80004d0 <LCD_WriteData16>
 8000abe:	e004      	b.n	8000aca <LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fd03 	bl	80004d0 <LCD_WriteData16>
                temp>>=1;
 8000aca:	220f      	movs	r2, #15
 8000acc:	18bb      	adds	r3, r7, r2
 8000ace:	18ba      	adds	r2, r7, r2
 8000ad0:	7812      	ldrb	r2, [r2, #0]
 8000ad2:	0852      	lsrs	r2, r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8000ad6:	210d      	movs	r1, #13
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	3201      	adds	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	2324      	movs	r3, #36	; 0x24
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	220d      	movs	r2, #13
 8000aee:	18ba      	adds	r2, r7, r2
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d3d8      	bcc.n	8000aa8 <LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 8000af6:	210e      	movs	r1, #14
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	3201      	adds	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	230e      	movs	r3, #14
 8000b04:	18fa      	adds	r2, r7, r3
 8000b06:	2324      	movs	r3, #36	; 0x24
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	7812      	ldrb	r2, [r2, #0]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d3a2      	bcc.n	8000a58 <LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 8000b12:	f7ff fcf3 	bl	80004fc <LCD_WriteData16_End>
                    LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 8000b16:	e06b      	b.n	8000bf0 <LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 8000b18:	230e      	movs	r3, #14
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e05e      	b.n	8000be0 <LCD_DrawChar+0x20c>
            if (size==12)
 8000b22:	2324      	movs	r3, #36	; 0x24
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b0c      	cmp	r3, #12
 8000b2a:	d110      	bne.n	8000b4e <LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	230e      	movs	r3, #14
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	7818      	ldrb	r0, [r3, #0]
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18f9      	adds	r1, r7, r3
 8000b3c:	4c2e      	ldr	r4, [pc, #184]	; (8000bf8 <LCD_DrawChar+0x224>)
 8000b3e:	0013      	movs	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	189b      	adds	r3, r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	18e3      	adds	r3, r4, r3
 8000b48:	5c1b      	ldrb	r3, [r3, r0]
 8000b4a:	700b      	strb	r3, [r1, #0]
 8000b4c:	e00c      	b.n	8000b68 <LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 8000b4e:	2320      	movs	r3, #32
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	7819      	ldrb	r1, [r3, #0]
 8000b54:	230e      	movs	r3, #14
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	4827      	ldr	r0, [pc, #156]	; (8000bfc <LCD_DrawChar+0x228>)
 8000b60:	0109      	lsls	r1, r1, #4
 8000b62:	1841      	adds	r1, r0, r1
 8000b64:	5c8a      	ldrb	r2, [r1, r2]
 8000b66:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8000b68:	230d      	movs	r3, #13
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e026      	b.n	8000bc0 <LCD_DrawChar+0x1ec>
                if(temp&0x01)
 8000b72:	230f      	movs	r3, #15
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d014      	beq.n	8000ba8 <LCD_DrawChar+0x1d4>
                    LCD_DrawPoint(x+t,y+pos,fc);
 8000b7e:	230d      	movs	r3, #13
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	1dbb      	adds	r3, r7, #6
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	18d3      	adds	r3, r2, r3
 8000b8c:	b298      	uxth	r0, r3
 8000b8e:	230e      	movs	r3, #14
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	18d3      	adds	r3, r2, r3
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	1cbb      	adds	r3, r7, #2
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	f7ff feee 	bl	8000984 <LCD_DrawPoint>
                temp>>=1;
 8000ba8:	220f      	movs	r2, #15
 8000baa:	18bb      	adds	r3, r7, r2
 8000bac:	18ba      	adds	r2, r7, r2
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	0852      	lsrs	r2, r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	2324      	movs	r3, #36	; 0x24
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	220d      	movs	r2, #13
 8000bcc:	18ba      	adds	r2, r7, r2
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3ce      	bcc.n	8000b72 <LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	3201      	adds	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	230e      	movs	r3, #14
 8000be2:	18fa      	adds	r2, r7, r3
 8000be4:	2324      	movs	r3, #36	; 0x24
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d398      	bcc.n	8000b22 <LCD_DrawChar+0x14e>
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf8:	08004094 	.word	0x08004094
 8000bfc:	08004508 	.word	0x08004508

08000c00 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	0005      	movs	r5, r0
 8000c08:	000c      	movs	r4, r1
 8000c0a:	0010      	movs	r0, r2
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	1dbb      	adds	r3, r7, #6
 8000c10:	1c2a      	adds	r2, r5, #0
 8000c12:	801a      	strh	r2, [r3, #0]
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	1c22      	adds	r2, r4, #0
 8000c18:	801a      	strh	r2, [r3, #0]
 8000c1a:	1cbb      	adds	r3, r7, #2
 8000c1c:	1c02      	adds	r2, r0, #0
 8000c1e:	801a      	strh	r2, [r3, #0]
 8000c20:	003b      	movs	r3, r7
 8000c22:	1c0a      	adds	r2, r1, #0
 8000c24:	801a      	strh	r2, [r3, #0]
    while((*p<='~')&&(*p>=' '))
 8000c26:	e036      	b.n	8000c96 <LCD_DrawString+0x96>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <LCD_DrawString+0xb0>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	1dba      	adds	r2, r7, #6
 8000c2e:	8812      	ldrh	r2, [r2, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d239      	bcs.n	8000ca8 <LCD_DrawString+0xa8>
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <LCD_DrawString+0xb0>)
 8000c36:	885b      	ldrh	r3, [r3, #2]
 8000c38:	1d3a      	adds	r2, r7, #4
 8000c3a:	8812      	ldrh	r2, [r2, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d233      	bcs.n	8000ca8 <LCD_DrawString+0xa8>
        return;
        LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	003a      	movs	r2, r7
 8000c46:	8815      	ldrh	r5, [r2, #0]
 8000c48:	1cba      	adds	r2, r7, #2
 8000c4a:	8814      	ldrh	r4, [r2, #0]
 8000c4c:	1d3a      	adds	r2, r7, #4
 8000c4e:	8811      	ldrh	r1, [r2, #0]
 8000c50:	1dba      	adds	r2, r7, #6
 8000c52:	8810      	ldrh	r0, [r2, #0]
 8000c54:	2220      	movs	r2, #32
 8000c56:	2608      	movs	r6, #8
 8000c58:	46b4      	mov	ip, r6
 8000c5a:	44bc      	add	ip, r7
 8000c5c:	4462      	add	r2, ip
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	9202      	str	r2, [sp, #8]
 8000c62:	261c      	movs	r6, #28
 8000c64:	2208      	movs	r2, #8
 8000c66:	18ba      	adds	r2, r7, r2
 8000c68:	1992      	adds	r2, r2, r6
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	9201      	str	r2, [sp, #4]
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	002b      	movs	r3, r5
 8000c72:	0022      	movs	r2, r4
 8000c74:	f7ff feae 	bl	80009d4 <LCD_DrawChar>
        x+=size/2;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	199b      	adds	r3, r3, r6
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	b299      	uxth	r1, r3
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	1dba      	adds	r2, r7, #6
 8000c8a:	8812      	ldrh	r2, [r2, #0]
 8000c8c:	188a      	adds	r2, r1, r2
 8000c8e:	801a      	strh	r2, [r3, #0]
        p++;
 8000c90:	6a3b      	ldr	r3, [r7, #32]
 8000c92:	3301      	adds	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b7e      	cmp	r3, #126	; 0x7e
 8000c9c:	d805      	bhi.n	8000caa <LCD_DrawString+0xaa>
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b1f      	cmp	r3, #31
 8000ca4:	d8c0      	bhi.n	8000c28 <LCD_DrawString+0x28>
 8000ca6:	e000      	b.n	8000caa <LCD_DrawString+0xaa>
        return;
 8000ca8:	46c0      	nop			; (mov r8, r8)
    }
}
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb0:	20000074 	.word	0x20000074

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000cba:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <main+0x170>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 fe80 	bl	80029c6 <HAL_GPIO_WritePin>
  /* MCU Configuration--------------------------------------------------------*/
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f001 fbad 	bl	8002424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f001 f909 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f001 fa47 	bl	8002160 <MX_GPIO_Init>
  //MX_ADC_Init();
  //MX_I2C2_Init();
  MX_SPI1_Init();
 8000cd2:	f001 f94b 	bl	8001f6c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000cd6:	f001 f9ab 	bl	8002030 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */

  LCD_Init();
 8000cda:	f7ff fc99 	bl	8000610 <LCD_Init>
  LCD_Clear(BLUE);
 8000cde:	201f      	movs	r0, #31
 8000ce0:	f7ff fdb8 	bl	8000854 <LCD_Clear>
  for (int i = 0; i < 3; i++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e01c      	b.n	8000d24 <main+0x70>
	LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	1c1a      	adds	r2, r3, #0
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	18d3      	adds	r3, r2, r3
 8000cf4:	1c1a      	adds	r2, r3, #0
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3319      	adds	r3, #25
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <main+0x174>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	58d3      	ldr	r3, [r2, r3]
 8000d08:	4948      	ldr	r1, [pc, #288]	; (8000e2c <main+0x178>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	9202      	str	r2, [sp, #8]
 8000d0e:	2210      	movs	r2, #16
 8000d10:	9201      	str	r2, [sp, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	231f      	movs	r3, #31
 8000d16:	000a      	movs	r2, r1
 8000d18:	21c8      	movs	r1, #200	; 0xc8
 8000d1a:	f7ff ff71 	bl	8000c00 <LCD_DrawString>
  for (int i = 0; i < 3; i++) {
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3301      	adds	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	dddf      	ble.n	8000cea <main+0x36>
  }
  LCD_DrawString(25,200,  YELLOW, BLACK, menu[0], 16, 0);
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <main+0x174>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	493f      	ldr	r1, [pc, #252]	; (8000e2c <main+0x178>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	9202      	str	r2, [sp, #8]
 8000d34:	2210      	movs	r2, #16
 8000d36:	9201      	str	r2, [sp, #4]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	21c8      	movs	r1, #200	; 0xc8
 8000d40:	2019      	movs	r0, #25
 8000d42:	f7ff ff5d 	bl	8000c00 <LCD_DrawString>
  nano_wait(5000000000);
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
  /*stepperMotor(1, 0, 1000);
  stepperMotor(0, 0, 1000);*/
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <main+0x170>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fe3a 	bl	80029c6 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	LCD_DrawString(80 ,40,  YELLOW, BLUE,"Home Menu", 16, 0);
 8000d52:	4a36      	ldr	r2, [pc, #216]	; (8000e2c <main+0x178>)
 8000d54:	2300      	movs	r3, #0
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2310      	movs	r3, #16
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <main+0x17c>)
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	231f      	movs	r3, #31
 8000d62:	2128      	movs	r1, #40	; 0x28
 8000d64:	2050      	movs	r0, #80	; 0x50
 8000d66:	f7ff ff4b 	bl	8000c00 <LCD_DrawString>

	if (updateToggleHistory(2)) {
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f001 f84e 	bl	8001e0c <updateToggleHistory>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d01a      	beq.n	8000daa <main+0xf6>
		if (currentSelectIndex == 0) {
 8000d74:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <main+0x180>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d103      	bne.n	8000d84 <main+0xd0>
			menu_move(2);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f000 f8f9 	bl	8000f74 <menu_move>
 8000d82:	e00a      	b.n	8000d9a <main+0xe6>

		} else {
			menu_move((currentSelectIndex - 1) % 3);
 8000d84:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <main+0x180>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fb29 	bl	80003e4 <__aeabi_idivmod>
 8000d92:	000b      	movs	r3, r1
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 f8ed 	bl	8000f74 <menu_move>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4821      	ldr	r0, [pc, #132]	; (8000e24 <main+0x170>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	0019      	movs	r1, r3
 8000da4:	f001 fe0f 	bl	80029c6 <HAL_GPIO_WritePin>
 8000da8:	e038      	b.n	8000e1c <main+0x168>

	} else if (updateToggleHistory(3)) {
 8000daa:	2003      	movs	r0, #3
 8000dac:	f001 f82e 	bl	8001e0c <updateToggleHistory>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d00c      	beq.n	8000dce <main+0x11a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	481a      	ldr	r0, [pc, #104]	; (8000e24 <main+0x170>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	f001 fe02 	bl	80029c6 <HAL_GPIO_WritePin>
		menu_select(currentSelectIndex);
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <main+0x180>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f91c 	bl	8001004 <menu_select>
 8000dcc:	e026      	b.n	8000e1c <main+0x168>

	} else if (updateToggleHistory(4)) {
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f001 f81c 	bl	8001e0c <updateToggleHistory>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d01a      	beq.n	8000e0e <main+0x15a>

		if (currentSelectIndex == 2) {
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <main+0x180>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d103      	bne.n	8000de8 <main+0x134>
					menu_move(0);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f8c7 	bl	8000f74 <menu_move>
 8000de6:	e00a      	b.n	8000dfe <main+0x14a>
		} else {
			menu_move((currentSelectIndex + 1) % 3);
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <main+0x180>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	2103      	movs	r1, #3
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff faf7 	bl	80003e4 <__aeabi_idivmod>
 8000df6:	000b      	movs	r3, r1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 f8bb 	bl	8000f74 <menu_move>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <main+0x170>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	0019      	movs	r1, r3
 8000e08:	f001 fddd 	bl	80029c6 <HAL_GPIO_WritePin>
 8000e0c:	e006      	b.n	8000e1c <main+0x168>

	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <main+0x170>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	0019      	movs	r1, r3
 8000e18:	f001 fdd5 	bl	80029c6 <HAL_GPIO_WritePin>
	}

	HAL_Delay(40);
 8000e1c:	2028      	movs	r0, #40	; 0x28
 8000e1e:	f001 fb65 	bl	80024ec <HAL_Delay>
	LCD_DrawString(80 ,40,  YELLOW, BLUE,"Home Menu", 16, 0);
 8000e22:	e796      	b.n	8000d52 <main+0x9e>
 8000e24:	48000800 	.word	0x48000800
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	0000ffe0 	.word	0x0000ffe0
 8000e30:	08003fe4 	.word	0x08003fe4
 8000e34:	20000068 	.word	0x20000068

08000e38 <change_pwm>:

  }
  /* USER CODE END 3 HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)*/
}
void change_pwm(int per)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	2348      	movs	r3, #72	; 0x48
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	0018      	movs	r0, r3
 8000e46:	2308      	movs	r3, #8
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f003 f882 	bl	8003f54 <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e50:	232c      	movs	r3, #44	; 0x2c
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	231c      	movs	r3, #28
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f003 f87a 	bl	8003f54 <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e60:	230c      	movs	r3, #12
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	0018      	movs	r0, r3
 8000e66:	2320      	movs	r3, #32
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f003 f872 	bl	8003f54 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 8000e70:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <change_pwm+0x134>)
 8000e72:	4a3f      	ldr	r2, [pc, #252]	; (8000f70 <change_pwm+0x138>)
 8000e74:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 0;
 8000e76:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <change_pwm+0x134>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <change_pwm+0x134>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = per;
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <change_pwm+0x134>)
 8000e86:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <change_pwm+0x134>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 8000e8e:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <change_pwm+0x134>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <change_pwm+0x134>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <change_pwm+0x134>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f002 fa8f 	bl	80033c0 <HAL_TIM_PWM_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <change_pwm+0x72>
	  {
	    Error_Handler();
 8000ea6:	f001 f9ed 	bl	8002284 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2148      	movs	r1, #72	; 0x48
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb8:	187a      	adds	r2, r7, r1
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <change_pwm+0x134>)
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f002 ff68 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <change_pwm+0x94>
	  {
	    Error_Handler();
 8000ec8:	f001 f9dc 	bl	8002284 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	232c      	movs	r3, #44	; 0x2c
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	2260      	movs	r2, #96	; 0x60
 8000ed2:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = per/2;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	da00      	bge.n	8000edc <change_pwm+0xa4>
 8000eda:	3301      	adds	r3, #1
 8000edc:	105b      	asrs	r3, r3, #1
 8000ede:	001a      	movs	r2, r3
 8000ee0:	212c      	movs	r1, #44	; 0x2c
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	605a      	str	r2, [r3, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	1879      	adds	r1, r7, r1
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <change_pwm+0x134>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f002 fbdc 	bl	80036c8 <HAL_TIM_PWM_ConfigChannel>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <change_pwm+0xe0>
	  {
	    Error_Handler();
 8000f14:	f001 f9b6 	bl	8002284 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f18:	210c      	movs	r1, #12
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	0192      	lsls	r2, r2, #6
 8000f3e:	615a      	str	r2, [r3, #20]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f46:	187a      	adds	r2, r7, r1
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <change_pwm+0x134>)
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f002 ff7f 	bl	8003e50 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <change_pwm+0x122>
	  {
	    Error_Handler();
 8000f56:	f001 f995 	bl	8002284 <Error_Handler>
	  /* USER CODE BEGIN TIM1_Init 2 */



	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <change_pwm+0x134>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 f9db 	bl	8002318 <HAL_TIM_MspPostInit>
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b014      	add	sp, #80	; 0x50
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	200000d0 	.word	0x200000d0
 8000f70:	40012c00 	.word	0x40012c00

08000f74 <menu_move>:

extern const Picture *image;

void menu_move(int selectIndex) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	6078      	str	r0, [r7, #4]

	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, menu[selectIndex], 16, 0);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	1c1a      	adds	r2, r3, #0
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	1c1a      	adds	r2, r3, #0
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	3319      	adds	r3, #25
 8000f90:	b298      	uxth	r0, r3
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <menu_move+0x84>)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	4918      	ldr	r1, [pc, #96]	; (8000ffc <menu_move+0x88>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	9202      	str	r2, [sp, #8]
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	9201      	str	r2, [sp, #4]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	000a      	movs	r2, r1
 8000faa:	21c8      	movs	r1, #200	; 0xc8
 8000fac:	f7ff fe28 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, menu[currentSelectIndex], 16, 0);
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <menu_move+0x8c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	1c1a      	adds	r2, r3, #0
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	18d3      	adds	r3, r2, r3
 8000fbc:	1c1a      	adds	r2, r3, #0
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3319      	adds	r3, #25
 8000fc6:	b298      	uxth	r0, r3
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <menu_move+0x8c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <menu_move+0x84>)
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	58d3      	ldr	r3, [r2, r3]
 8000fd2:	490a      	ldr	r1, [pc, #40]	; (8000ffc <menu_move+0x88>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	9202      	str	r2, [sp, #8]
 8000fd8:	2210      	movs	r2, #16
 8000fda:	9201      	str	r2, [sp, #4]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	231f      	movs	r3, #31
 8000fe0:	000a      	movs	r2, r1
 8000fe2:	21c8      	movs	r1, #200	; 0xc8
 8000fe4:	f7ff fe0c 	bl	8000c00 <LCD_DrawString>

	currentSelectIndex = selectIndex;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <menu_move+0x8c>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	0000ffe0 	.word	0x0000ffe0
 8001000:	20000068 	.word	0x20000068

08001004 <menu_select>:

void menu_select(int selectIndex) {
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b087      	sub	sp, #28
 8001008:	af04      	add	r7, sp, #16
 800100a:	6078      	str	r0, [r7, #4]
	/*if (selectIndex == lastPressed) {
			return;
	}*/
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, menu[selectIndex], 16, 0);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	b29b      	uxth	r3, r3
 8001010:	1c1a      	adds	r2, r3, #0
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	1c1a      	adds	r2, r3, #0
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b29b      	uxth	r3, r3
 800101e:	3319      	adds	r3, #25
 8001020:	b298      	uxth	r0, r3
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <menu_select+0x74>)
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	58d3      	ldr	r3, [r2, r3]
 800102a:	22f8      	movs	r2, #248	; 0xf8
 800102c:	0212      	lsls	r2, r2, #8
 800102e:	4c13      	ldr	r4, [pc, #76]	; (800107c <menu_select+0x78>)
 8001030:	2100      	movs	r1, #0
 8001032:	9102      	str	r1, [sp, #8]
 8001034:	2110      	movs	r1, #16
 8001036:	9101      	str	r1, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	0013      	movs	r3, r2
 800103c:	0022      	movs	r2, r4
 800103e:	21c8      	movs	r1, #200	; 0xc8
 8001040:	f7ff fdde 	bl	8000c00 <LCD_DrawString>
    lastPressed = selectIndex;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <menu_select+0x7c>)
 800104a:	701a      	strb	r2, [r3, #0]

    if(selectIndex == 1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <menu_select+0x54>
    {
    	Tunemode();
 8001052:	f000 fb6d 	bl	8001730 <Tunemode>
    }
    else if (selectIndex == 0)
    {
    	Infomode();
    }
}
 8001056:	e00a      	b.n	800106e <menu_select+0x6a>
    else if (selectIndex == 2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d102      	bne.n	8001064 <menu_select+0x60>
    	Manualmode();
 800105e:	f000 f979 	bl	8001354 <Manualmode>
}
 8001062:	e004      	b.n	800106e <menu_select+0x6a>
    else if (selectIndex == 0)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <menu_select+0x6a>
    	Infomode();
 800106a:	f000 f80b 	bl	8001084 <Infomode>
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b003      	add	sp, #12
 8001074:	bd90      	pop	{r4, r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000000 	.word	0x20000000
 800107c:	0000ffe0 	.word	0x0000ffe0
 8001080:	2000003c 	.word	0x2000003c

08001084 <Infomode>:
void Infomode()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af04      	add	r7, sp, #16
	LCD_Clear(BLUE);
 800108a:	201f      	movs	r0, #31
 800108c:	f7ff fbe2 	bl	8000854 <LCD_Clear>
	for (int i = 0; i < 3; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e01c      	b.n	80010d0 <Infomode+0x4c>
		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Info[i], 16, 0);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	b29b      	uxth	r3, r3
 800109a:	1c1a      	adds	r2, r3, #0
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	18d3      	adds	r3, r2, r3
 80010a0:	1c1a      	adds	r2, r3, #0
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	3319      	adds	r3, #25
 80010aa:	b298      	uxth	r0, r3
 80010ac:	4b43      	ldr	r3, [pc, #268]	; (80011bc <Infomode+0x138>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	58d3      	ldr	r3, [r2, r3]
 80010b4:	4942      	ldr	r1, [pc, #264]	; (80011c0 <Infomode+0x13c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	9202      	str	r2, [sp, #8]
 80010ba:	2210      	movs	r2, #16
 80010bc:	9201      	str	r2, [sp, #4]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	231f      	movs	r3, #31
 80010c2:	000a      	movs	r2, r1
 80010c4:	21c8      	movs	r1, #200	; 0xc8
 80010c6:	f7ff fd9b 	bl	8000c00 <LCD_DrawString>
	for (int i = 0; i < 3; i++) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3301      	adds	r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	dddf      	ble.n	8001096 <Infomode+0x12>
	}
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Info will be displayed", 16, 0);
 80010d6:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <Infomode+0x13c>)
 80010d8:	2300      	movs	r3, #0
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2310      	movs	r3, #16
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <Infomode+0x140>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	231f      	movs	r3, #31
 80010e6:	2132      	movs	r1, #50	; 0x32
 80010e8:	2019      	movs	r0, #25
 80010ea:	f7ff fd89 	bl	8000c00 <LCD_DrawString>
	Info_move(0);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f86e 	bl	80011d0 <Info_move>

	 while (1)
	  {
		if (updateToggleHistory(2)) {
 80010f4:	2002      	movs	r0, #2
 80010f6:	f000 fe89 	bl	8001e0c <updateToggleHistory>
 80010fa:	1e03      	subs	r3, r0, #0
 80010fc:	d01a      	beq.n	8001134 <Infomode+0xb0>
			if (currentSelectIndex == 0) {
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <Infomode+0x144>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <Infomode+0x8a>
				Info_move(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f862 	bl	80011d0 <Info_move>
 800110c:	e00a      	b.n	8001124 <Infomode+0xa0>

			} else {
				Info_move((currentSelectIndex - 1) % 3);
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <Infomode+0x144>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	2103      	movs	r1, #3
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff f964 	bl	80003e4 <__aeabi_idivmod>
 800111c:	000b      	movs	r3, r1
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f856 	bl	80011d0 <Info_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4828      	ldr	r0, [pc, #160]	; (80011cc <Infomode+0x148>)
 800112a:	2201      	movs	r2, #1
 800112c:	0019      	movs	r1, r3
 800112e:	f001 fc4a 	bl	80029c6 <HAL_GPIO_WritePin>
 8001132:	e03b      	b.n	80011ac <Infomode+0x128>

		} else if (updateToggleHistory(3)) {
 8001134:	2003      	movs	r0, #3
 8001136:	f000 fe69 	bl	8001e0c <updateToggleHistory>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d00f      	beq.n	800115e <Infomode+0xda>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4822      	ldr	r0, [pc, #136]	; (80011cc <Infomode+0x148>)
 8001144:	2201      	movs	r2, #1
 8001146:	0019      	movs	r1, r3
 8001148:	f001 fc3d 	bl	80029c6 <HAL_GPIO_WritePin>
			if(Info_select(currentSelectIndex) == 1)
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <Infomode+0x144>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0018      	movs	r0, r3
 8001152:	f000 f885 	bl	8001260 <Info_select>
 8001156:	0003      	movs	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d127      	bne.n	80011ac <Infomode+0x128>
			{
				return;
 800115c:	e02a      	b.n	80011b4 <Infomode+0x130>
			}

		} else if (updateToggleHistory(4)) {
 800115e:	2004      	movs	r0, #4
 8001160:	f000 fe54 	bl	8001e0c <updateToggleHistory>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d01a      	beq.n	800119e <Infomode+0x11a>

			if (currentSelectIndex == 1) {
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <Infomode+0x144>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d103      	bne.n	8001178 <Infomode+0xf4>
						Info_move(0);
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f82d 	bl	80011d0 <Info_move>
 8001176:	e00a      	b.n	800118e <Infomode+0x10a>
			} else {
				Info_move((currentSelectIndex + 1) % 3);
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <Infomode+0x144>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	2103      	movs	r1, #3
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff f92f 	bl	80003e4 <__aeabi_idivmod>
 8001186:	000b      	movs	r3, r1
 8001188:	0018      	movs	r0, r3
 800118a:	f000 f821 	bl	80011d0 <Info_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	480e      	ldr	r0, [pc, #56]	; (80011cc <Infomode+0x148>)
 8001194:	2201      	movs	r2, #1
 8001196:	0019      	movs	r1, r3
 8001198:	f001 fc15 	bl	80029c6 <HAL_GPIO_WritePin>
 800119c:	e006      	b.n	80011ac <Infomode+0x128>

		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	480a      	ldr	r0, [pc, #40]	; (80011cc <Infomode+0x148>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	0019      	movs	r1, r3
 80011a8:	f001 fc0d 	bl	80029c6 <HAL_GPIO_WritePin>
		}

		HAL_Delay(40);
 80011ac:	2028      	movs	r0, #40	; 0x28
 80011ae:	f001 f99d 	bl	80024ec <HAL_Delay>
		if (updateToggleHistory(2)) {
 80011b2:	e79f      	b.n	80010f4 <Infomode+0x70>

	  }
}
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	20000034 	.word	0x20000034
 80011c0:	0000ffe0 	.word	0x0000ffe0
 80011c4:	08003ff0 	.word	0x08003ff0
 80011c8:	20000068 	.word	0x20000068
 80011cc:	48000800 	.word	0x48000800

080011d0 <Info_move>:
void Info_move(int selectIndex)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	6078      	str	r0, [r7, #4]
	LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, Info[currentSelectIndex], 16, 0);
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <Info_move+0x84>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	1c1a      	adds	r2, r3, #0
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	18d3      	adds	r3, r2, r3
 80011e4:	1c1a      	adds	r2, r3, #0
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3319      	adds	r3, #25
 80011ee:	b298      	uxth	r0, r3
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <Info_move+0x84>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <Info_move+0x88>)
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	58d3      	ldr	r3, [r2, r3]
 80011fa:	4918      	ldr	r1, [pc, #96]	; (800125c <Info_move+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	9202      	str	r2, [sp, #8]
 8001200:	2210      	movs	r2, #16
 8001202:	9201      	str	r2, [sp, #4]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	231f      	movs	r3, #31
 8001208:	000a      	movs	r2, r1
 800120a:	21c8      	movs	r1, #200	; 0xc8
 800120c:	f7ff fcf8 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, Info[selectIndex], 16, 0);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	b29b      	uxth	r3, r3
 8001214:	1c1a      	adds	r2, r3, #0
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	18d3      	adds	r3, r2, r3
 800121a:	1c1a      	adds	r2, r3, #0
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	b29b      	uxth	r3, r3
 8001222:	3319      	adds	r3, #25
 8001224:	b298      	uxth	r0, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <Info_move+0x88>)
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	58d3      	ldr	r3, [r2, r3]
 800122e:	490b      	ldr	r1, [pc, #44]	; (800125c <Info_move+0x8c>)
 8001230:	2200      	movs	r2, #0
 8001232:	9202      	str	r2, [sp, #8]
 8001234:	2210      	movs	r2, #16
 8001236:	9201      	str	r2, [sp, #4]
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	000a      	movs	r2, r1
 800123e:	21c8      	movs	r1, #200	; 0xc8
 8001240:	f7ff fcde 	bl	8000c00 <LCD_DrawString>
	currentSelectIndex = selectIndex;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <Info_move+0x84>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000068 	.word	0x20000068
 8001258:	20000034 	.word	0x20000034
 800125c:	0000ffe0 	.word	0x0000ffe0

08001260 <Info_select>:
int Info_select(int selectIndex) {
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
	/*if (selectIndex == lastPressed) {
			return 0;
	}*/
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, Info[selectIndex], 16, 0);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	b29b      	uxth	r3, r3
 800126c:	1c1a      	adds	r2, r3, #0
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	18d3      	adds	r3, r2, r3
 8001272:	1c1a      	adds	r2, r3, #0
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	3319      	adds	r3, #25
 800127c:	b298      	uxth	r0, r3
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <Info_select+0xe0>)
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	58d3      	ldr	r3, [r2, r3]
 8001286:	22f8      	movs	r2, #248	; 0xf8
 8001288:	0212      	lsls	r2, r2, #8
 800128a:	4c2e      	ldr	r4, [pc, #184]	; (8001344 <Info_select+0xe4>)
 800128c:	2100      	movs	r1, #0
 800128e:	9102      	str	r1, [sp, #8]
 8001290:	2110      	movs	r1, #16
 8001292:	9101      	str	r1, [sp, #4]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	0013      	movs	r3, r2
 8001298:	0022      	movs	r2, r4
 800129a:	21c8      	movs	r1, #200	; 0xc8
 800129c:	f7ff fcb0 	bl	8000c00 <LCD_DrawString>
    lastPressed = selectIndex;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <Info_select+0xe8>)
 80012a6:	701a      	strb	r2, [r3, #0]
    if(currentSelectIndex == 0)
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <Info_select+0xec>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d141      	bne.n	8001334 <Info_select+0xd4>
    {
    	LCD_Clear(BLUE);
 80012b0:	201f      	movs	r0, #31
 80012b2:	f7ff facf 	bl	8000854 <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e01c      	b.n	80012f6 <Info_select+0x96>
    		/*bb_init_oled();
    		bb_display1("Home Display");
    		bb_display2("Info Tune Manual");*/
    		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	1c1a      	adds	r2, r3, #0
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	18d3      	adds	r3, r2, r3
 80012c6:	1c1a      	adds	r2, r3, #0
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3319      	adds	r3, #25
 80012d0:	b298      	uxth	r0, r3
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <Info_select+0xf0>)
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	58d3      	ldr	r3, [r2, r3]
 80012da:	491a      	ldr	r1, [pc, #104]	; (8001344 <Info_select+0xe4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	9202      	str	r2, [sp, #8]
 80012e0:	2210      	movs	r2, #16
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	231f      	movs	r3, #31
 80012e8:	000a      	movs	r2, r1
 80012ea:	21c8      	movs	r1, #200	; 0xc8
 80012ec:	f7ff fc88 	bl	8000c00 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	dddf      	ble.n	80012bc <Info_select+0x5c>
    	}
    	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, menu[selectIndex], 16, 0);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	1c1a      	adds	r2, r3, #0
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	18d3      	adds	r3, r2, r3
 8001306:	1c1a      	adds	r2, r3, #0
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	3319      	adds	r3, #25
 8001310:	b298      	uxth	r0, r3
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <Info_select+0xf0>)
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	58d3      	ldr	r3, [r2, r3]
 800131a:	490a      	ldr	r1, [pc, #40]	; (8001344 <Info_select+0xe4>)
 800131c:	2200      	movs	r2, #0
 800131e:	9202      	str	r2, [sp, #8]
 8001320:	2210      	movs	r2, #16
 8001322:	9201      	str	r2, [sp, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	000a      	movs	r2, r1
 800132a:	21c8      	movs	r1, #200	; 0xc8
 800132c:	f7ff fc68 	bl	8000c00 <LCD_DrawString>
    	return 1;
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <Info_select+0xd6>
    }

    return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b005      	add	sp, #20
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	20000034 	.word	0x20000034
 8001344:	0000ffe0 	.word	0x0000ffe0
 8001348:	2000003c 	.word	0x2000003c
 800134c:	20000068 	.word	0x20000068
 8001350:	20000000 	.word	0x20000000

08001354 <Manualmode>:
void Manualmode()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af04      	add	r7, sp, #16
	LCD_Clear(BLUE);
 800135a:	201f      	movs	r0, #31
 800135c:	f7ff fa7a 	bl	8000854 <LCD_Clear>
	for (int i = 0; i < 3; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	e01c      	b.n	80013a0 <Manualmode+0x4c>
		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Manual[i], 16, 0);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	b29b      	uxth	r3, r3
 800136a:	1c1a      	adds	r2, r3, #0
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	18d3      	adds	r3, r2, r3
 8001370:	1c1a      	adds	r2, r3, #0
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	3319      	adds	r3, #25
 800137a:	b298      	uxth	r0, r3
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <Manualmode+0x154>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	58d3      	ldr	r3, [r2, r3]
 8001384:	4949      	ldr	r1, [pc, #292]	; (80014ac <Manualmode+0x158>)
 8001386:	2200      	movs	r2, #0
 8001388:	9202      	str	r2, [sp, #8]
 800138a:	2210      	movs	r2, #16
 800138c:	9201      	str	r2, [sp, #4]
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	231f      	movs	r3, #31
 8001392:	000a      	movs	r2, r1
 8001394:	21c8      	movs	r1, #200	; 0xc8
 8001396:	f7ff fc33 	bl	8000c00 <LCD_DrawString>
	for (int i = 0; i < 3; i++) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	dddf      	ble.n	8001366 <Manualmode+0x12>
	}
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Manually Control drill", 16, 0);
 80013a6:	4a41      	ldr	r2, [pc, #260]	; (80014ac <Manualmode+0x158>)
 80013a8:	2300      	movs	r3, #0
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	2310      	movs	r3, #16
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <Manualmode+0x15c>)
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	231f      	movs	r3, #31
 80013b6:	2132      	movs	r1, #50	; 0x32
 80013b8:	2019      	movs	r0, #25
 80013ba:	f7ff fc21 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(25 ,75,  YELLOW, BLUE,"Re-String Purpose", 16, 0);
 80013be:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <Manualmode+0x158>)
 80013c0:	2300      	movs	r3, #0
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2310      	movs	r3, #16
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <Manualmode+0x160>)
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	231f      	movs	r3, #31
 80013ce:	214b      	movs	r1, #75	; 0x4b
 80013d0:	2019      	movs	r0, #25
 80013d2:	f7ff fc15 	bl	8000c00 <LCD_DrawString>
	Manual_move(0, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f870 	bl	80014c0 <Manual_move>

	 while (1)
	  {
		if (updateToggleHistory(2)) {
 80013e0:	2002      	movs	r0, #2
 80013e2:	f000 fd13 	bl	8001e0c <updateToggleHistory>
 80013e6:	1e03      	subs	r3, r0, #0
 80013e8:	d01a      	beq.n	8001420 <Manualmode+0xcc>
			if (currentSelectIndex == 0) {
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <Manualmode+0x164>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <Manualmode+0xa6>
				Manual_move(2);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f000 f864 	bl	80014c0 <Manual_move>
 80013f8:	e00a      	b.n	8001410 <Manualmode+0xbc>

			} else {
				Manual_move((currentSelectIndex - 1) % 3);
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <Manualmode+0x164>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3b01      	subs	r3, #1
 8001400:	2103      	movs	r1, #3
 8001402:	0018      	movs	r0, r3
 8001404:	f7fe ffee 	bl	80003e4 <__aeabi_idivmod>
 8001408:	000b      	movs	r3, r1
 800140a:	0018      	movs	r0, r3
 800140c:	f000 f858 	bl	80014c0 <Manual_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4829      	ldr	r0, [pc, #164]	; (80014bc <Manualmode+0x168>)
 8001416:	2201      	movs	r2, #1
 8001418:	0019      	movs	r1, r3
 800141a:	f001 fad4 	bl	80029c6 <HAL_GPIO_WritePin>
 800141e:	e03b      	b.n	8001498 <Manualmode+0x144>

		} else if (updateToggleHistory(3)) {
 8001420:	2003      	movs	r0, #3
 8001422:	f000 fcf3 	bl	8001e0c <updateToggleHistory>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d00f      	beq.n	800144a <Manualmode+0xf6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <Manualmode+0x168>)
 8001430:	2201      	movs	r2, #1
 8001432:	0019      	movs	r1, r3
 8001434:	f001 fac7 	bl	80029c6 <HAL_GPIO_WritePin>
			if(Manual_select(currentSelectIndex) == 1)
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <Manualmode+0x164>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0018      	movs	r0, r3
 800143e:	f000 f887 	bl	8001550 <Manual_select>
 8001442:	0003      	movs	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d127      	bne.n	8001498 <Manualmode+0x144>
			{
				return;
 8001448:	e02a      	b.n	80014a0 <Manualmode+0x14c>
			}

		} else if (updateToggleHistory(4)) {
 800144a:	2004      	movs	r0, #4
 800144c:	f000 fcde 	bl	8001e0c <updateToggleHistory>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d01a      	beq.n	800148a <Manualmode+0x136>

			if (currentSelectIndex == 2) {
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <Manualmode+0x164>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d103      	bne.n	8001464 <Manualmode+0x110>
						Manual_move(0);
 800145c:	2000      	movs	r0, #0
 800145e:	f000 f82f 	bl	80014c0 <Manual_move>
 8001462:	e00a      	b.n	800147a <Manualmode+0x126>
			} else {
				Manual_move((currentSelectIndex + 1) % 3);
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <Manualmode+0x164>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	2103      	movs	r1, #3
 800146c:	0018      	movs	r0, r3
 800146e:	f7fe ffb9 	bl	80003e4 <__aeabi_idivmod>
 8001472:	000b      	movs	r3, r1
 8001474:	0018      	movs	r0, r3
 8001476:	f000 f823 	bl	80014c0 <Manual_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	480f      	ldr	r0, [pc, #60]	; (80014bc <Manualmode+0x168>)
 8001480:	2201      	movs	r2, #1
 8001482:	0019      	movs	r1, r3
 8001484:	f001 fa9f 	bl	80029c6 <HAL_GPIO_WritePin>
 8001488:	e006      	b.n	8001498 <Manualmode+0x144>

		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <Manualmode+0x168>)
 8001490:	2200      	movs	r2, #0
 8001492:	0019      	movs	r1, r3
 8001494:	f001 fa97 	bl	80029c6 <HAL_GPIO_WritePin>
		}

		HAL_Delay(40);
 8001498:	2028      	movs	r0, #40	; 0x28
 800149a:	f001 f827 	bl	80024ec <HAL_Delay>
		if (updateToggleHistory(2)) {
 800149e:	e79f      	b.n	80013e0 <Manualmode+0x8c>

	  }
}
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000028 	.word	0x20000028
 80014ac:	0000ffe0 	.word	0x0000ffe0
 80014b0:	08004008 	.word	0x08004008
 80014b4:	08004020 	.word	0x08004020
 80014b8:	20000068 	.word	0x20000068
 80014bc:	48000800 	.word	0x48000800

080014c0 <Manual_move>:
void Manual_move(int selectIndex)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af04      	add	r7, sp, #16
 80014c6:	6078      	str	r0, [r7, #4]
	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, Manual[selectIndex], 16, 0);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	1c1a      	adds	r2, r3, #0
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	18d3      	adds	r3, r2, r3
 80014d2:	1c1a      	adds	r2, r3, #0
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3319      	adds	r3, #25
 80014dc:	b298      	uxth	r0, r3
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <Manual_move+0x84>)
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	58d3      	ldr	r3, [r2, r3]
 80014e6:	4918      	ldr	r1, [pc, #96]	; (8001548 <Manual_move+0x88>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	9202      	str	r2, [sp, #8]
 80014ec:	2210      	movs	r2, #16
 80014ee:	9201      	str	r2, [sp, #4]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2300      	movs	r3, #0
 80014f4:	000a      	movs	r2, r1
 80014f6:	21c8      	movs	r1, #200	; 0xc8
 80014f8:	f7ff fb82 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, Manual[currentSelectIndex], 16, 0);
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <Manual_move+0x8c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	1c1a      	adds	r2, r3, #0
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	18d3      	adds	r3, r2, r3
 8001508:	1c1a      	adds	r2, r3, #0
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	3319      	adds	r3, #25
 8001512:	b298      	uxth	r0, r3
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <Manual_move+0x8c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <Manual_move+0x84>)
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	58d3      	ldr	r3, [r2, r3]
 800151e:	490a      	ldr	r1, [pc, #40]	; (8001548 <Manual_move+0x88>)
 8001520:	2200      	movs	r2, #0
 8001522:	9202      	str	r2, [sp, #8]
 8001524:	2210      	movs	r2, #16
 8001526:	9201      	str	r2, [sp, #4]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	231f      	movs	r3, #31
 800152c:	000a      	movs	r2, r1
 800152e:	21c8      	movs	r1, #200	; 0xc8
 8001530:	f7ff fb66 	bl	8000c00 <LCD_DrawString>
	currentSelectIndex = selectIndex;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <Manual_move+0x8c>)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	20000028 	.word	0x20000028
 8001548:	0000ffe0 	.word	0x0000ffe0
 800154c:	20000068 	.word	0x20000068

08001550 <Manual_select>:
int Manual_select(int selectIndex) {
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af04      	add	r7, sp, #16
 8001556:	6078      	str	r0, [r7, #4]
	/*if (selectIndex == lastPressed) {
			return 0;
	}*/
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, Manual[selectIndex], 16, 0);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	b29b      	uxth	r3, r3
 800155c:	1c1a      	adds	r2, r3, #0
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	18d3      	adds	r3, r2, r3
 8001562:	1c1a      	adds	r2, r3, #0
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	3319      	adds	r3, #25
 800156c:	b298      	uxth	r0, r3
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <Manual_select+0x11c>)
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	58d3      	ldr	r3, [r2, r3]
 8001576:	22f8      	movs	r2, #248	; 0xf8
 8001578:	0212      	lsls	r2, r2, #8
 800157a:	4c3d      	ldr	r4, [pc, #244]	; (8001670 <Manual_select+0x120>)
 800157c:	2100      	movs	r1, #0
 800157e:	9102      	str	r1, [sp, #8]
 8001580:	2110      	movs	r1, #16
 8001582:	9101      	str	r1, [sp, #4]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	0013      	movs	r3, r2
 8001588:	0022      	movs	r2, r4
 800158a:	21c8      	movs	r1, #200	; 0xc8
 800158c:	f7ff fb38 	bl	8000c00 <LCD_DrawString>
    lastPressed = selectIndex;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b37      	ldr	r3, [pc, #220]	; (8001674 <Manual_select+0x124>)
 8001596:	701a      	strb	r2, [r3, #0]
    if(currentSelectIndex == 0)
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <Manual_select+0x128>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d144      	bne.n	800162a <Manual_select+0xda>
    {
    	LCD_Clear(BLUE);
 80015a0:	201f      	movs	r0, #31
 80015a2:	f7ff f957 	bl	8000854 <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e01c      	b.n	80015e6 <Manual_select+0x96>
    		/*bb_init_oled();
    		bb_display1("Home Display");
    		bb_display2("Info Tune Manual");*/
    		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	1c1a      	adds	r2, r3, #0
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	1c1a      	adds	r2, r3, #0
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	b29b      	uxth	r3, r3
 80015be:	3319      	adds	r3, #25
 80015c0:	b298      	uxth	r0, r3
 80015c2:	4b2e      	ldr	r3, [pc, #184]	; (800167c <Manual_select+0x12c>)
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	58d3      	ldr	r3, [r2, r3]
 80015ca:	4929      	ldr	r1, [pc, #164]	; (8001670 <Manual_select+0x120>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	9202      	str	r2, [sp, #8]
 80015d0:	2210      	movs	r2, #16
 80015d2:	9201      	str	r2, [sp, #4]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	231f      	movs	r3, #31
 80015d8:	000a      	movs	r2, r1
 80015da:	21c8      	movs	r1, #200	; 0xc8
 80015dc:	f7ff fb10 	bl	8000c00 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	dddf      	ble.n	80015ac <Manual_select+0x5c>
    	}
    	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, menu[selectIndex], 16, 0);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	1c1a      	adds	r2, r3, #0
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	18d3      	adds	r3, r2, r3
 80015f6:	1c1a      	adds	r2, r3, #0
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3319      	adds	r3, #25
 8001600:	b298      	uxth	r0, r3
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <Manual_select+0x12c>)
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	58d3      	ldr	r3, [r2, r3]
 800160a:	4919      	ldr	r1, [pc, #100]	; (8001670 <Manual_select+0x120>)
 800160c:	2200      	movs	r2, #0
 800160e:	9202      	str	r2, [sp, #8]
 8001610:	2210      	movs	r2, #16
 8001612:	9201      	str	r2, [sp, #4]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	000a      	movs	r2, r1
 800161a:	21c8      	movs	r1, #200	; 0xc8
 800161c:	f7ff faf0 	bl	8000c00 <LCD_DrawString>
    	currentSelectIndex = 0;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <Manual_select+0x128>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    	return 1;
 8001626:	2301      	movs	r3, #1
 8001628:	e01c      	b.n	8001664 <Manual_select+0x114>
    }
    else if (currentSelectIndex == 1)
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <Manual_select+0x128>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <Manual_select+0xf2>
    {
    	stepperMotor(0, 15000, 1000);
 8001632:	23fa      	movs	r3, #250	; 0xfa
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4912      	ldr	r1, [pc, #72]	; (8001680 <Manual_select+0x130>)
 8001638:	001a      	movs	r2, r3
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f824 	bl	8001688 <stepperMotor>
 8001640:	e00a      	b.n	8001658 <Manual_select+0x108>
    }
    else if(currentSelectIndex == 2)
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <Manual_select+0x128>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d106      	bne.n	8001658 <Manual_select+0x108>
    {
    	stepperMotor(1, 15000, 1000);
 800164a:	23fa      	movs	r3, #250	; 0xfa
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <Manual_select+0x130>)
 8001650:	001a      	movs	r2, r3
 8001652:	2001      	movs	r0, #1
 8001654:	f000 f818 	bl	8001688 <stepperMotor>
    }
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <Manual_select+0x134>)
 800165a:	2100      	movs	r1, #0
 800165c:	0018      	movs	r0, r3
 800165e:	f001 ffb7 	bl	80035d0 <HAL_TIM_PWM_Stop>
    return 0;
 8001662:	2300      	movs	r3, #0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b005      	add	sp, #20
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	20000028 	.word	0x20000028
 8001670:	0000ffe0 	.word	0x0000ffe0
 8001674:	2000003c 	.word	0x2000003c
 8001678:	20000068 	.word	0x20000068
 800167c:	20000000 	.word	0x20000000
 8001680:	00003a98 	.word	0x00003a98
 8001684:	200000d0 	.word	0x200000d0

08001688 <stepperMotor>:
void stepperMotor(int direction, int per, int step)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	if(direction == 0)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <stepperMotor+0x20>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <stepperMotor+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	2108      	movs	r1, #8
 80016a0:	0018      	movs	r0, r3
 80016a2:	f001 f990 	bl	80029c6 <HAL_GPIO_WritePin>
 80016a6:	e005      	b.n	80016b4 <stepperMotor+0x2c>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <stepperMotor+0x98>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	2108      	movs	r1, #8
 80016ae:	0018      	movs	r0, r3
 80016b0:	f001 f989 	bl	80029c6 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <stepperMotor+0x98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	2101      	movs	r1, #1
 80016ba:	0018      	movs	r0, r3
 80016bc:	f001 f983 	bl	80029c6 <HAL_GPIO_WritePin>
	change_pwm(per);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff fbb8 	bl	8000e38 <change_pwm>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <stepperMotor+0x9c>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	0018      	movs	r0, r3
 80016ce:	f001 fec7 	bl	8003460 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <stepperMotor+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	2120      	movs	r1, #32
 80016d8:	0018      	movs	r0, r3
 80016da:	f001 f974 	bl	80029c6 <HAL_GPIO_WritePin>

	while(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 80016de:	e003      	b.n	80016e8 <stepperMotor+0x60>
	{
		nano_wait(5000000);
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <stepperMotor+0xa0>)
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7fe fe84 	bl	80003f0 <nano_wait>
	while(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 fb8f 	bl	8001e0c <updateToggleHistory>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d1f6      	bne.n	80016e0 <stepperMotor+0x58>
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <stepperMotor+0xa4>)
 80016f4:	2108      	movs	r1, #8
 80016f6:	0018      	movs	r0, r3
 80016f8:	f001 f948 	bl	800298c <HAL_GPIO_ReadPin>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d1ef      	bne.n	80016e0 <stepperMotor+0x58>
	}
	//nano_wait(5000000000);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <stepperMotor+0x9c>)
 8001702:	2100      	movs	r1, #0
 8001704:	0018      	movs	r0, r3
 8001706:	f001 ff63 	bl	80035d0 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <stepperMotor+0x98>)
 800170c:	2201      	movs	r2, #1
 800170e:	2101      	movs	r1, #1
 8001710:	0018      	movs	r0, r3
 8001712:	f001 f958 	bl	80029c6 <HAL_GPIO_WritePin>
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	48000800 	.word	0x48000800
 8001724:	200000d0 	.word	0x200000d0
 8001728:	004c4b40 	.word	0x004c4b40
 800172c:	48000400 	.word	0x48000400

08001730 <Tunemode>:
void Tunemode() {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b08d      	sub	sp, #52	; 0x34
 8001734:	af04      	add	r7, sp, #16
	/*bb_init_oled();
	bb_display1("Tune Mode");
	bb_display2("Select Peg");*/
	int scrollidx = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
	LCD_Clear(BLUE);
 800173a:	201f      	movs	r0, #31
 800173c:	f7ff f88a 	bl	8000854 <LCD_Clear>
	for (int i = 0; i < 3; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	e01c      	b.n	8001780 <Tunemode+0x50>
		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[i], 16, 0);
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	b29b      	uxth	r3, r3
 800174a:	1c1a      	adds	r2, r3, #0
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	18d3      	adds	r3, r2, r3
 8001750:	1c1a      	adds	r2, r3, #0
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b29b      	uxth	r3, r3
 8001758:	3319      	adds	r3, #25
 800175a:	b298      	uxth	r0, r3
 800175c:	4be4      	ldr	r3, [pc, #912]	; (8001af0 <Tunemode+0x3c0>)
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	58d3      	ldr	r3, [r2, r3]
 8001764:	49e3      	ldr	r1, [pc, #908]	; (8001af4 <Tunemode+0x3c4>)
 8001766:	2200      	movs	r2, #0
 8001768:	9202      	str	r2, [sp, #8]
 800176a:	2210      	movs	r2, #16
 800176c:	9201      	str	r2, [sp, #4]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	231f      	movs	r3, #31
 8001772:	000a      	movs	r2, r1
 8001774:	21c8      	movs	r1, #200	; 0xc8
 8001776:	f7ff fa43 	bl	8000c00 <LCD_DrawString>
	for (int i = 0; i < 3; i++) {
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b02      	cmp	r3, #2
 8001784:	dddf      	ble.n	8001746 <Tunemode+0x16>
	  }
	LCD_DrawString(95 ,25,  YELLOW, BLUE,"-----", 16, 0);
 8001786:	4adb      	ldr	r2, [pc, #876]	; (8001af4 <Tunemode+0x3c4>)
 8001788:	2300      	movs	r3, #0
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	2310      	movs	r3, #16
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	4bd9      	ldr	r3, [pc, #868]	; (8001af8 <Tunemode+0x3c8>)
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	231f      	movs	r3, #31
 8001796:	2119      	movs	r1, #25
 8001798:	205f      	movs	r0, #95	; 0x5f
 800179a:	f7ff fa31 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(60 ,40,  YELLOW, BLUE,"3 - |    | - 4", 16, 0);
 800179e:	4ad5      	ldr	r2, [pc, #852]	; (8001af4 <Tunemode+0x3c4>)
 80017a0:	2300      	movs	r3, #0
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2310      	movs	r3, #16
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	4bd4      	ldr	r3, [pc, #848]	; (8001afc <Tunemode+0x3cc>)
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	231f      	movs	r3, #31
 80017ae:	2128      	movs	r1, #40	; 0x28
 80017b0:	203c      	movs	r0, #60	; 0x3c
 80017b2:	f7ff fa25 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"2 - |    | - 5", 16, 0);
 80017b6:	4acf      	ldr	r2, [pc, #828]	; (8001af4 <Tunemode+0x3c4>)
 80017b8:	2300      	movs	r3, #0
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2310      	movs	r3, #16
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	4bcf      	ldr	r3, [pc, #828]	; (8001b00 <Tunemode+0x3d0>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	231f      	movs	r3, #31
 80017c6:	213c      	movs	r1, #60	; 0x3c
 80017c8:	203c      	movs	r0, #60	; 0x3c
 80017ca:	f7ff fa19 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(60 ,80,  YELLOW, BLUE,"1 - |    | - 6", 16, 0);
 80017ce:	4ac9      	ldr	r2, [pc, #804]	; (8001af4 <Tunemode+0x3c4>)
 80017d0:	2300      	movs	r3, #0
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	2310      	movs	r3, #16
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	4bca      	ldr	r3, [pc, #808]	; (8001b04 <Tunemode+0x3d4>)
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	231f      	movs	r3, #31
 80017de:	2150      	movs	r1, #80	; 0x50
 80017e0:	203c      	movs	r0, #60	; 0x3c
 80017e2:	f7ff fa0d 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(95 ,100,  YELLOW, BLUE,"-----", 16, 0);
 80017e6:	4ac3      	ldr	r2, [pc, #780]	; (8001af4 <Tunemode+0x3c4>)
 80017e8:	2300      	movs	r3, #0
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	2310      	movs	r3, #16
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	4bc1      	ldr	r3, [pc, #772]	; (8001af8 <Tunemode+0x3c8>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	231f      	movs	r3, #31
 80017f6:	2164      	movs	r1, #100	; 0x64
 80017f8:	205f      	movs	r0, #95	; 0x5f
 80017fa:	f7ff fa01 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(100 ,115,  YELLOW, BLUE,"||||", 16, 0);
 80017fe:	4abd      	ldr	r2, [pc, #756]	; (8001af4 <Tunemode+0x3c4>)
 8001800:	2300      	movs	r3, #0
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	2310      	movs	r3, #16
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	4bbf      	ldr	r3, [pc, #764]	; (8001b08 <Tunemode+0x3d8>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	231f      	movs	r3, #31
 800180e:	2173      	movs	r1, #115	; 0x73
 8001810:	2064      	movs	r0, #100	; 0x64
 8001812:	f7ff f9f5 	bl	8000c00 <LCD_DrawString>
	LCD_DrawString(100 ,130,  YELLOW, BLUE,"||||", 16, 0);
 8001816:	4ab7      	ldr	r2, [pc, #732]	; (8001af4 <Tunemode+0x3c4>)
 8001818:	2300      	movs	r3, #0
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	2310      	movs	r3, #16
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	4bb9      	ldr	r3, [pc, #740]	; (8001b08 <Tunemode+0x3d8>)
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	231f      	movs	r3, #31
 8001826:	2182      	movs	r1, #130	; 0x82
 8001828:	2064      	movs	r0, #100	; 0x64
 800182a:	f7ff f9e9 	bl	8000c00 <LCD_DrawString>
	Tune_move(0, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fa18 	bl	8001c68 <Tune_move>
	while (1)
	  {
	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
		scrollidx = currentScrollIndex;
 8001838:	4bb4      	ldr	r3, [pc, #720]	; (8001b0c <Tunemode+0x3dc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	603b      	str	r3, [r7, #0]

		if (updateToggleHistory(2)) {
 800183e:	2002      	movs	r0, #2
 8001840:	f000 fae4 	bl	8001e0c <updateToggleHistory>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d100      	bne.n	800184a <Tunemode+0x11a>
 8001848:	e0ed      	b.n	8001a26 <Tunemode+0x2f6>
			if (currentSelectIndex == 0) {
 800184a:	4bb1      	ldr	r3, [pc, #708]	; (8001b10 <Tunemode+0x3e0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d000      	beq.n	8001854 <Tunemode+0x124>
 8001852:	e0b9      	b.n	80019c8 <Tunemode+0x298>
				if(scrollidx == 0)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d137      	bne.n	80018ca <Tunemode+0x19a>
				{
					LCD_DrawString(75*0 + 25,200,  YELLOW, BLUE, Tune[6], 16, 0);
 800185a:	4ba5      	ldr	r3, [pc, #660]	; (8001af0 <Tunemode+0x3c0>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	49a5      	ldr	r1, [pc, #660]	; (8001af4 <Tunemode+0x3c4>)
 8001860:	2200      	movs	r2, #0
 8001862:	9202      	str	r2, [sp, #8]
 8001864:	2210      	movs	r2, #16
 8001866:	9201      	str	r2, [sp, #4]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	231f      	movs	r3, #31
 800186c:	000a      	movs	r2, r1
 800186e:	21c8      	movs	r1, #200	; 0xc8
 8001870:	2019      	movs	r0, #25
 8001872:	f7ff f9c5 	bl	8000c00 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 8001876:	2301      	movs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e01d      	b.n	80018b8 <Tunemode+0x188>
							LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[i-1], 16, 0);
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	b29b      	uxth	r3, r3
 8001880:	1c1a      	adds	r2, r3, #0
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	1c1a      	adds	r2, r3, #0
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	3319      	adds	r3, #25
 8001890:	b298      	uxth	r0, r3
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	4b96      	ldr	r3, [pc, #600]	; (8001af0 <Tunemode+0x3c0>)
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	58d3      	ldr	r3, [r2, r3]
 800189c:	4995      	ldr	r1, [pc, #596]	; (8001af4 <Tunemode+0x3c4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	9202      	str	r2, [sp, #8]
 80018a2:	2210      	movs	r2, #16
 80018a4:	9201      	str	r2, [sp, #4]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	231f      	movs	r3, #31
 80018aa:	000a      	movs	r2, r1
 80018ac:	21c8      	movs	r1, #200	; 0xc8
 80018ae:	f7ff f9a7 	bl	8000c00 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	3301      	adds	r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	ddde      	ble.n	800187c <Tunemode+0x14c>
						  }
					Tune_move(6, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2006      	movs	r0, #6
 80018c4:	f000 f9d0 	bl	8001c68 <Tune_move>
 80018c8:	e0a5      	b.n	8001a16 <Tunemode+0x2e6>
				}
				else if(scrollidx == 6)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b06      	cmp	r3, #6
 80018ce:	d13f      	bne.n	8001950 <Tunemode+0x220>
				{
					for (int i = 0; i < 2; i++) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e01d      	b.n	8001912 <Tunemode+0x1e2>
						LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[5+i], 16, 0);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	1c1a      	adds	r2, r3, #0
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	18d3      	adds	r3, r2, r3
 80018e0:	1c1a      	adds	r2, r3, #0
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3319      	adds	r3, #25
 80018ea:	b298      	uxth	r0, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1d5a      	adds	r2, r3, #5
 80018f0:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <Tunemode+0x3c0>)
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	497f      	ldr	r1, [pc, #508]	; (8001af4 <Tunemode+0x3c4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	9202      	str	r2, [sp, #8]
 80018fc:	2210      	movs	r2, #16
 80018fe:	9201      	str	r2, [sp, #4]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	231f      	movs	r3, #31
 8001904:	000a      	movs	r2, r1
 8001906:	21c8      	movs	r1, #200	; 0xc8
 8001908:	f7ff f97a 	bl	8000c00 <LCD_DrawString>
					for (int i = 0; i < 2; i++) {
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	ddde      	ble.n	80018d6 <Tunemode+0x1a6>
					}
					LCD_DrawString(75*2 + 25,200,  YELLOW, BLUE, Tune[0], 16, 0);
 8001918:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <Tunemode+0x3c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4975      	ldr	r1, [pc, #468]	; (8001af4 <Tunemode+0x3c4>)
 800191e:	2200      	movs	r2, #0
 8001920:	9202      	str	r2, [sp, #8]
 8001922:	2210      	movs	r2, #16
 8001924:	9201      	str	r2, [sp, #4]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	231f      	movs	r3, #31
 800192a:	000a      	movs	r2, r1
 800192c:	21c8      	movs	r1, #200	; 0xc8
 800192e:	20af      	movs	r0, #175	; 0xaf
 8001930:	f7ff f966 	bl	8000c00 <LCD_DrawString>
					Tune_move((currentScrollIndex - 1) % 7, 0, 0);
 8001934:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <Tunemode+0x3dc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	2107      	movs	r1, #7
 800193c:	0018      	movs	r0, r3
 800193e:	f7fe fd51 	bl	80003e4 <__aeabi_idivmod>
 8001942:	000b      	movs	r3, r1
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	0018      	movs	r0, r3
 800194a:	f000 f98d 	bl	8001c68 <Tune_move>
 800194e:	e062      	b.n	8001a16 <Tunemode+0x2e6>
				}
				else
				{
					//LCD_DrawString(75*0 + 25,200,  YELLOW, BLUE, Tune[(currentScrollIndex - 1) % 7], 16, 0);
					for (int i = 0; i < 3; i++) {
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e027      	b.n	80019a6 <Tunemode+0x276>
					LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[(currentScrollIndex - 1) % 7+i], 16, 0);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	b29b      	uxth	r3, r3
 800195a:	1c1a      	adds	r2, r3, #0
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	18d3      	adds	r3, r2, r3
 8001960:	1c1a      	adds	r2, r3, #0
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	3319      	adds	r3, #25
 800196a:	b29c      	uxth	r4, r3
 800196c:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <Tunemode+0x3dc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3b01      	subs	r3, #1
 8001972:	2107      	movs	r1, #7
 8001974:	0018      	movs	r0, r3
 8001976:	f7fe fd35 	bl	80003e4 <__aeabi_idivmod>
 800197a:	000b      	movs	r3, r1
 800197c:	001a      	movs	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	18d2      	adds	r2, r2, r3
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <Tunemode+0x3c0>)
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	58d3      	ldr	r3, [r2, r3]
 8001988:	495a      	ldr	r1, [pc, #360]	; (8001af4 <Tunemode+0x3c4>)
 800198a:	2200      	movs	r2, #0
 800198c:	9202      	str	r2, [sp, #8]
 800198e:	2210      	movs	r2, #16
 8001990:	9201      	str	r2, [sp, #4]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	231f      	movs	r3, #31
 8001996:	000a      	movs	r2, r1
 8001998:	21c8      	movs	r1, #200	; 0xc8
 800199a:	0020      	movs	r0, r4
 800199c:	f7ff f930 	bl	8000c00 <LCD_DrawString>
					for (int i = 0; i < 3; i++) {
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3301      	adds	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	ddd4      	ble.n	8001956 <Tunemode+0x226>

				}
					Tune_move((currentScrollIndex - 1) % 7, 0, 0);
 80019ac:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <Tunemode+0x3dc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	2107      	movs	r1, #7
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7fe fd15 	bl	80003e4 <__aeabi_idivmod>
 80019ba:	000b      	movs	r3, r1
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 f951 	bl	8001c68 <Tune_move>
 80019c6:	e026      	b.n	8001a16 <Tunemode+0x2e6>
			}


			} else {
				if(scrollidx == 0)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10d      	bne.n	80019ea <Tunemode+0x2ba>
				{
					Tune_move(6, (currentSelectIndex - 1) % 3, 1);
 80019ce:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <Tunemode+0x3e0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	2103      	movs	r1, #3
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7fe fd04 	bl	80003e4 <__aeabi_idivmod>
 80019dc:	000b      	movs	r3, r1
 80019de:	2201      	movs	r2, #1
 80019e0:	0019      	movs	r1, r3
 80019e2:	2006      	movs	r0, #6
 80019e4:	f000 f940 	bl	8001c68 <Tune_move>
 80019e8:	e015      	b.n	8001a16 <Tunemode+0x2e6>
				}
				else{
					Tune_move((currentScrollIndex - 1) % 7, (currentSelectIndex - 1) % 3, 1);
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <Tunemode+0x3dc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	2107      	movs	r1, #7
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7fe fcf6 	bl	80003e4 <__aeabi_idivmod>
 80019f8:	000b      	movs	r3, r1
 80019fa:	001c      	movs	r4, r3
 80019fc:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <Tunemode+0x3e0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	2103      	movs	r1, #3
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe fced 	bl	80003e4 <__aeabi_idivmod>
 8001a0a:	000b      	movs	r3, r1
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	0019      	movs	r1, r3
 8001a10:	0020      	movs	r0, r4
 8001a12:	f000 f929 	bl	8001c68 <Tune_move>
				}
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	483e      	ldr	r0, [pc, #248]	; (8001b14 <Tunemode+0x3e4>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	0019      	movs	r1, r3
 8001a20:	f000 ffd1 	bl	80029c6 <HAL_GPIO_WritePin>
 8001a24:	e10f      	b.n	8001c46 <Tunemode+0x516>

		} else if (updateToggleHistory(3)) {
 8001a26:	2003      	movs	r0, #3
 8001a28:	f000 f9f0 	bl	8001e0c <updateToggleHistory>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d013      	beq.n	8001a58 <Tunemode+0x328>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4837      	ldr	r0, [pc, #220]	; (8001b14 <Tunemode+0x3e4>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	0019      	movs	r1, r3
 8001a3a:	f000 ffc4 	bl	80029c6 <HAL_GPIO_WritePin>
			if(Tune_select(currentSelectIndex) == 1)
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <Tunemode+0x3e0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f962 	bl	8001d0c <Tune_select>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d000      	beq.n	8001a50 <Tunemode+0x320>
 8001a4e:	e0fa      	b.n	8001c46 <Tunemode+0x516>
			{
				currentSelectIndex = 0;
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <Tunemode+0x3e0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
				return;
 8001a56:	e0fa      	b.n	8001c4e <Tunemode+0x51e>
			}


		} else if (updateToggleHistory(4)) {
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f000 f9d7 	bl	8001e0c <updateToggleHistory>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d100      	bne.n	8001a64 <Tunemode+0x334>
 8001a62:	e0e9      	b.n	8001c38 <Tunemode+0x508>

			if (currentSelectIndex == 2) {
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <Tunemode+0x3e0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d000      	beq.n	8001a6e <Tunemode+0x33e>
 8001a6c:	e0b5      	b.n	8001bda <Tunemode+0x4aa>
				if(currentScrollIndex == 6)
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <Tunemode+0x3dc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d150      	bne.n	8001b18 <Tunemode+0x3e8>
				{	int x = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
					for (int i = 5; i < 7; i++) {
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	e01f      	b.n	8001ac0 <Tunemode+0x390>
						LCD_DrawString(75*x + 25,200,  YELLOW, BLUE, Tune[i], 16, 0);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	1c1a      	adds	r2, r3, #0
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	18d3      	adds	r3, r2, r3
 8001a8a:	1c1a      	adds	r2, r3, #0
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3319      	adds	r3, #25
 8001a94:	b298      	uxth	r0, r3
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <Tunemode+0x3c0>)
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	58d3      	ldr	r3, [r2, r3]
 8001a9e:	4915      	ldr	r1, [pc, #84]	; (8001af4 <Tunemode+0x3c4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	9202      	str	r2, [sp, #8]
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	9201      	str	r2, [sp, #4]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	231f      	movs	r3, #31
 8001aac:	000a      	movs	r2, r1
 8001aae:	21c8      	movs	r1, #200	; 0xc8
 8001ab0:	f7ff f8a6 	bl	8000c00 <LCD_DrawString>
						x++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
					for (int i = 5; i < 7; i++) {
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3301      	adds	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	dddc      	ble.n	8001a80 <Tunemode+0x350>
					}
					LCD_DrawString(75*2 + 25,200,  YELLOW, BLUE, Tune[0], 16, 0);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <Tunemode+0x3c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <Tunemode+0x3c4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	9202      	str	r2, [sp, #8]
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	9201      	str	r2, [sp, #4]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	231f      	movs	r3, #31
 8001ad8:	000a      	movs	r2, r1
 8001ada:	21c8      	movs	r1, #200	; 0xc8
 8001adc:	20af      	movs	r0, #175	; 0xaf
 8001ade:	f7ff f88f 	bl	8000c00 <LCD_DrawString>
					Tune_move(0, 2, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 f8be 	bl	8001c68 <Tune_move>
 8001aec:	e09c      	b.n	8001c28 <Tunemode+0x4f8>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	2000000c 	.word	0x2000000c
 8001af4:	0000ffe0 	.word	0x0000ffe0
 8001af8:	08004034 	.word	0x08004034
 8001afc:	0800403c 	.word	0x0800403c
 8001b00:	0800404c 	.word	0x0800404c
 8001b04:	0800405c 	.word	0x0800405c
 8001b08:	0800406c 	.word	0x0800406c
 8001b0c:	2000006c 	.word	0x2000006c
 8001b10:	20000068 	.word	0x20000068
 8001b14:	48000800 	.word	0x48000800
				}
				else
				{
					if(currentScrollIndex == 0)
 8001b18:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <Tunemode+0x524>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10e      	bne.n	8001b3e <Tunemode+0x40e>
						LCD_DrawString(75*0 + 25,200,  YELLOW, BLUE, Tune[6], 16, 0);
 8001b20:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <Tunemode+0x528>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <Tunemode+0x52c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	9202      	str	r2, [sp, #8]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	9201      	str	r2, [sp, #4]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	231f      	movs	r3, #31
 8001b32:	000a      	movs	r2, r1
 8001b34:	21c8      	movs	r1, #200	; 0xc8
 8001b36:	2019      	movs	r0, #25
 8001b38:	f7ff f862 	bl	8000c00 <LCD_DrawString>
 8001b3c:	e011      	b.n	8001b62 <Tunemode+0x432>
					else
						LCD_DrawString(75*0 + 25,200,  YELLOW, BLUE, Tune[currentScrollIndex - 1], 16, 0);
 8001b3e:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <Tunemode+0x524>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	1e5a      	subs	r2, r3, #1
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <Tunemode+0x528>)
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	58d3      	ldr	r3, [r2, r3]
 8001b4a:	4944      	ldr	r1, [pc, #272]	; (8001c5c <Tunemode+0x52c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	9202      	str	r2, [sp, #8]
 8001b50:	2210      	movs	r2, #16
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	231f      	movs	r3, #31
 8001b58:	000a      	movs	r2, r1
 8001b5a:	21c8      	movs	r1, #200	; 0xc8
 8001b5c:	2019      	movs	r0, #25
 8001b5e:	f7ff f84f 	bl	8000c00 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 8001b62:	2301      	movs	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e027      	b.n	8001bb8 <Tunemode+0x488>
						LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[(currentScrollIndex - 1) % 7+i], 16, 0);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	1c1a      	adds	r2, r3, #0
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	1c1a      	adds	r2, r3, #0
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3319      	adds	r3, #25
 8001b7c:	b29c      	uxth	r4, r3
 8001b7e:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <Tunemode+0x524>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	2107      	movs	r1, #7
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe fc2c 	bl	80003e4 <__aeabi_idivmod>
 8001b8c:	000b      	movs	r3, r1
 8001b8e:	001a      	movs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	18d2      	adds	r2, r2, r3
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <Tunemode+0x528>)
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	58d3      	ldr	r3, [r2, r3]
 8001b9a:	4930      	ldr	r1, [pc, #192]	; (8001c5c <Tunemode+0x52c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	9202      	str	r2, [sp, #8]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	000a      	movs	r2, r1
 8001baa:	21c8      	movs	r1, #200	; 0xc8
 8001bac:	0020      	movs	r0, r4
 8001bae:	f7ff f827 	bl	8000c00 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	ddd4      	ble.n	8001b68 <Tunemode+0x438>
					}
					Tune_move((currentScrollIndex + 1) % 7, 2, 0);
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <Tunemode+0x524>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2107      	movs	r1, #7
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7fe fc0c 	bl	80003e4 <__aeabi_idivmod>
 8001bcc:	000b      	movs	r3, r1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f848 	bl	8001c68 <Tune_move>
 8001bd8:	e026      	b.n	8001c28 <Tunemode+0x4f8>
				}
			} else {
				if(scrollidx == 6)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d10d      	bne.n	8001bfc <Tunemode+0x4cc>
				{
					Tune_move(0, (currentSelectIndex + 1) % 3, 1);
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <Tunemode+0x530>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	2103      	movs	r1, #3
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7fe fbfb 	bl	80003e4 <__aeabi_idivmod>
 8001bee:	000b      	movs	r3, r1
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f000 f837 	bl	8001c68 <Tune_move>
 8001bfa:	e015      	b.n	8001c28 <Tunemode+0x4f8>
				}
				else
					Tune_move( (currentScrollIndex + 1) % 7,(currentSelectIndex + 1) % 3, 1);
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <Tunemode+0x524>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	2107      	movs	r1, #7
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7fe fbed 	bl	80003e4 <__aeabi_idivmod>
 8001c0a:	000b      	movs	r3, r1
 8001c0c:	001c      	movs	r4, r3
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <Tunemode+0x530>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	2103      	movs	r1, #3
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7fe fbe4 	bl	80003e4 <__aeabi_idivmod>
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	2201      	movs	r2, #1
 8001c20:	0019      	movs	r1, r3
 8001c22:	0020      	movs	r0, r4
 8001c24:	f000 f820 	bl	8001c68 <Tune_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <Tunemode+0x534>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	0019      	movs	r1, r3
 8001c32:	f000 fec8 	bl	80029c6 <HAL_GPIO_WritePin>
 8001c36:	e006      	b.n	8001c46 <Tunemode+0x516>

		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <Tunemode+0x534>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	0019      	movs	r1, r3
 8001c42:	f000 fec0 	bl	80029c6 <HAL_GPIO_WritePin>
		}

		HAL_Delay(40);
 8001c46:	2028      	movs	r0, #40	; 0x28
 8001c48:	f000 fc50 	bl	80024ec <HAL_Delay>
		scrollidx = currentScrollIndex;
 8001c4c:	e5f4      	b.n	8001838 <Tunemode+0x108>


	  }
}
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b009      	add	sp, #36	; 0x24
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	2000006c 	.word	0x2000006c
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	0000ffe0 	.word	0x0000ffe0
 8001c60:	20000068 	.word	0x20000068
 8001c64:	48000800 	.word	0x48000800

08001c68 <Tune_move>:
void Tune_move(int scrollidx, int selectIndex, int enable) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]

	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, Tune[scrollidx], 16, 0);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	1c1a      	adds	r2, r3, #0
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	1c1a      	adds	r2, r3, #0
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3319      	adds	r3, #25
 8001c88:	b298      	uxth	r0, r3
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <Tune_move+0x94>)
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	58d3      	ldr	r3, [r2, r3]
 8001c92:	491b      	ldr	r1, [pc, #108]	; (8001d00 <Tune_move+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	9202      	str	r2, [sp, #8]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	9201      	str	r2, [sp, #4]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	000a      	movs	r2, r1
 8001ca2:	21c8      	movs	r1, #200	; 0xc8
 8001ca4:	f7fe ffac 	bl	8000c00 <LCD_DrawString>
	if(enable)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01b      	beq.n	8001ce6 <Tune_move+0x7e>
		LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, Tune[currentScrollIndex], 16, 0);
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <Tune_move+0x9c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	1c1a      	adds	r2, r3, #0
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	1c1a      	adds	r2, r3, #0
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3319      	adds	r3, #25
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <Tune_move+0xa0>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <Tune_move+0x94>)
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	58d3      	ldr	r3, [r2, r3]
 8001cd0:	490b      	ldr	r1, [pc, #44]	; (8001d00 <Tune_move+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	9202      	str	r2, [sp, #8]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	231f      	movs	r3, #31
 8001cde:	000a      	movs	r2, r1
 8001ce0:	21c8      	movs	r1, #200	; 0xc8
 8001ce2:	f7fe ff8d 	bl	8000c00 <LCD_DrawString>

	currentSelectIndex = selectIndex;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <Tune_move+0x9c>)
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	601a      	str	r2, [r3, #0]
	currentScrollIndex = scrollidx;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <Tune_move+0xa0>)
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	2000000c 	.word	0x2000000c
 8001d00:	0000ffe0 	.word	0x0000ffe0
 8001d04:	20000068 	.word	0x20000068
 8001d08:	2000006c 	.word	0x2000006c

08001d0c <Tune_select>:

int Tune_select(int selectIndex) {
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af04      	add	r7, sp, #16
 8001d12:	6078      	str	r0, [r7, #4]
	/*if (selectIndex == lastPressed) {
			return 0;
	}*/
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, Tune[currentScrollIndex], 16, 0);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	1c1a      	adds	r2, r3, #0
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	18d3      	adds	r3, r2, r3
 8001d1e:	1c1a      	adds	r2, r3, #0
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3319      	adds	r3, #25
 8001d28:	b298      	uxth	r0, r3
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <Tune_select+0xe8>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <Tune_select+0xec>)
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	58d3      	ldr	r3, [r2, r3]
 8001d34:	22f8      	movs	r2, #248	; 0xf8
 8001d36:	0212      	lsls	r2, r2, #8
 8001d38:	4c30      	ldr	r4, [pc, #192]	; (8001dfc <Tune_select+0xf0>)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	9102      	str	r1, [sp, #8]
 8001d3e:	2110      	movs	r1, #16
 8001d40:	9101      	str	r1, [sp, #4]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	0013      	movs	r3, r2
 8001d46:	0022      	movs	r2, r4
 8001d48:	21c8      	movs	r1, #200	; 0xc8
 8001d4a:	f7fe ff59 	bl	8000c00 <LCD_DrawString>
    lastPressed = selectIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <Tune_select+0xf4>)
 8001d54:	701a      	strb	r2, [r3, #0]
    if(currentScrollIndex == 0)
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <Tune_select+0xe8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d144      	bne.n	8001de8 <Tune_select+0xdc>
    {
    	LCD_Clear(BLUE);
 8001d5e:	201f      	movs	r0, #31
 8001d60:	f7fe fd78 	bl	8000854 <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e01c      	b.n	8001da4 <Tune_select+0x98>
    		/*bb_init_oled();
    		bb_display1("Home Display");
    		bb_display2("Info Tune Manual");*/
    		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	1c1a      	adds	r2, r3, #0
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	1c1a      	adds	r2, r3, #0
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3319      	adds	r3, #25
 8001d7e:	b298      	uxth	r0, r3
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <Tune_select+0xf8>)
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	58d3      	ldr	r3, [r2, r3]
 8001d88:	491c      	ldr	r1, [pc, #112]	; (8001dfc <Tune_select+0xf0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	9202      	str	r2, [sp, #8]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	9201      	str	r2, [sp, #4]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	231f      	movs	r3, #31
 8001d96:	000a      	movs	r2, r1
 8001d98:	21c8      	movs	r1, #200	; 0xc8
 8001d9a:	f7fe ff31 	bl	8000c00 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	dddf      	ble.n	8001d6a <Tune_select+0x5e>
    	}
    	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, menu[selectIndex], 16, 0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	1c1a      	adds	r2, r3, #0
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	18d3      	adds	r3, r2, r3
 8001db4:	1c1a      	adds	r2, r3, #0
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3319      	adds	r3, #25
 8001dbe:	b298      	uxth	r0, r3
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <Tune_select+0xf8>)
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	58d3      	ldr	r3, [r2, r3]
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <Tune_select+0xf0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	9202      	str	r2, [sp, #8]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	9201      	str	r2, [sp, #4]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	000a      	movs	r2, r1
 8001dd8:	21c8      	movs	r1, #200	; 0xc8
 8001dda:	f7fe ff11 	bl	8000c00 <LCD_DrawString>
    	currentSelectIndex = 0;
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <Tune_select+0xfc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    	return 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <Tune_select+0xde>
    }
    return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b005      	add	sp, #20
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	2000006c 	.word	0x2000006c
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	0000ffe0 	.word	0x0000ffe0
 8001e00:	2000003c 	.word	0x2000003c
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000068 	.word	0x20000068

08001e0c <updateToggleHistory>:

uint8_t updateToggleHistory(uint8_t button) {
 8001e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	0002      	movs	r2, r0
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	701a      	strb	r2, [r3, #0]
	uint8_t prev = pressHistory[button - 2];
 8001e18:	1dfb      	adds	r3, r7, #7
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	1e9a      	subs	r2, r3, #2
 8001e1e:	260f      	movs	r6, #15
 8001e20:	19bb      	adds	r3, r7, r6
 8001e22:	492c      	ldr	r1, [pc, #176]	; (8001ed4 <updateToggleHistory+0xc8>)
 8001e24:	5c8a      	ldrb	r2, [r1, r2]
 8001e26:	701a      	strb	r2, [r3, #0]
	uint8_t new = HAL_GPIO_ReadPin(GPIOB, 1 << (button));
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	250e      	movs	r5, #14
 8001e36:	197c      	adds	r4, r7, r5
 8001e38:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <updateToggleHistory+0xcc>)
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	0010      	movs	r0, r2
 8001e3e:	f000 fda5 	bl	800298c <HAL_GPIO_ReadPin>
 8001e42:	0003      	movs	r3, r0
 8001e44:	7023      	strb	r3, [r4, #0]
	pressHistory[button - 2] = new;
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	3b02      	subs	r3, #2
 8001e4c:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <updateToggleHistory+0xc8>)
 8001e4e:	0028      	movs	r0, r5
 8001e50:	1839      	adds	r1, r7, r0
 8001e52:	7809      	ldrb	r1, [r1, #0]
 8001e54:	54d1      	strb	r1, [r2, r3]
	if (lastButton == button && (prev == 1 || new == 1)) return 0;
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <updateToggleHistory+0xd0>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	1dfa      	adds	r2, r7, #7
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d109      	bne.n	8001e76 <updateToggleHistory+0x6a>
 8001e62:	19bb      	adds	r3, r7, r6
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d003      	beq.n	8001e72 <updateToggleHistory+0x66>
 8001e6a:	183b      	adds	r3, r7, r0
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <updateToggleHistory+0x6a>
 8001e72:	2300      	movs	r3, #0
 8001e74:	e029      	b.n	8001eca <updateToggleHistory+0xbe>
	else if (prev == 1 && new == 1) {
 8001e76:	230f      	movs	r3, #15
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d109      	bne.n	8001e94 <updateToggleHistory+0x88>
 8001e80:	230e      	movs	r3, #14
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d104      	bne.n	8001e94 <updateToggleHistory+0x88>
		lastButton = button;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <updateToggleHistory+0xd0>)
 8001e8c:	1dfa      	adds	r2, r7, #7
 8001e8e:	7812      	ldrb	r2, [r2, #0]
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	e00c      	b.n	8001eae <updateToggleHistory+0xa2>
	} else if (prev == 0 && new == 0){
 8001e94:	230f      	movs	r3, #15
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <updateToggleHistory+0xa2>
 8001e9e:	230e      	movs	r3, #14
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <updateToggleHistory+0xa2>
		lastButton = -1;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <updateToggleHistory+0xd0>)
 8001eaa:	22ff      	movs	r2, #255	; 0xff
 8001eac:	701a      	strb	r2, [r3, #0]
	}

	return prev && new;
 8001eae:	230f      	movs	r3, #15
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <updateToggleHistory+0xba>
 8001eb8:	230e      	movs	r3, #14
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <updateToggleHistory+0xba>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <updateToggleHistory+0xbc>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3

}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b005      	add	sp, #20
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000070 	.word	0x20000070
 8001ed8:	48000400 	.word	0x48000400
 8001edc:	2000003d 	.word	0x2000003d

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b093      	sub	sp, #76	; 0x4c
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	2414      	movs	r4, #20
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	0018      	movs	r0, r3
 8001eec:	2334      	movs	r3, #52	; 0x34
 8001eee:	001a      	movs	r2, r3
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f002 f82f 	bl	8003f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	0018      	movs	r0, r3
 8001efa:	2310      	movs	r3, #16
 8001efc:	001a      	movs	r2, r3
 8001efe:	2100      	movs	r1, #0
 8001f00:	f002 f828 	bl	8003f54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001f04:	0021      	movs	r1, r4
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2212      	movs	r2, #18
 8001f0a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2201      	movs	r2, #1
 8001f10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2201      	movs	r2, #1
 8001f16:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	2210      	movs	r2, #16
 8001f22:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fd67 	bl	8002a00 <HAL_RCC_OscConfig>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d001      	beq.n	8001f3a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001f36:	f000 f9a5 	bl	8002284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2100      	movs	r1, #0
 8001f56:	0018      	movs	r0, r3
 8001f58:	f001 f8d8 	bl	800310c <HAL_RCC_ClockConfig>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f60:	f000 f990 	bl	8002284 <Error_Handler>
  }
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b013      	add	sp, #76	; 0x4c
 8001f6a:	bd90      	pop	{r4, r7, pc}

08001f6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }*/
  /* USER CODE BEGIN SPI1_Init 2 */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <MX_SPI1_Init+0xb0>)
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <MX_SPI1_Init+0xb0>)
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	0289      	lsls	r1, r1, #10
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	615a      	str	r2, [r3, #20]
  GPIOA -> MODER &= ~GPIO_MODER_MODER4 & ~GPIO_MODER_MODER5 & ~GPIO_MODER_MODER7;
 8001f7e:	2390      	movs	r3, #144	; 0x90
 8001f80:	05db      	lsls	r3, r3, #23
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2390      	movs	r3, #144	; 0x90
 8001f86:	05db      	lsls	r3, r3, #23
 8001f88:	4925      	ldr	r1, [pc, #148]	; (8002020 <MX_SPI1_Init+0xb4>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8001f8e:	2390      	movs	r3, #144	; 0x90
 8001f90:	05db      	lsls	r3, r3, #23
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2390      	movs	r3, #144	; 0x90
 8001f96:	05db      	lsls	r3, r3, #23
 8001f98:	218a      	movs	r1, #138	; 0x8a
 8001f9a:	0209      	lsls	r1, r1, #8
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER &= ~GPIO_MODER_MODER2 & ~GPIO_MODER_MODER3;
 8001fa0:	2390      	movs	r3, #144	; 0x90
 8001fa2:	05db      	lsls	r3, r3, #23
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2390      	movs	r3, #144	; 0x90
 8001fa8:	05db      	lsls	r3, r3, #23
 8001faa:	21f0      	movs	r1, #240	; 0xf0
 8001fac:	438a      	bics	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
 8001fb0:	2390      	movs	r3, #144	; 0x90
 8001fb2:	05db      	lsls	r3, r3, #23
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2390      	movs	r3, #144	; 0x90
 8001fb8:	05db      	lsls	r3, r3, #23
 8001fba:	2150      	movs	r1, #80	; 0x50
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL4 & ~GPIO_AFRL_AFRL5 & ~GPIO_AFRL_AFRL7;
 8001fc0:	2390      	movs	r3, #144	; 0x90
 8001fc2:	05db      	lsls	r3, r3, #23
 8001fc4:	6a1a      	ldr	r2, [r3, #32]
 8001fc6:	2390      	movs	r3, #144	; 0x90
 8001fc8:	05db      	lsls	r3, r3, #23
 8001fca:	4916      	ldr	r1, [pc, #88]	; (8002024 <MX_SPI1_Init+0xb8>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	621a      	str	r2, [r3, #32]

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_SPI1_Init+0xb0>)
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_SPI1_Init+0xb0>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	0149      	lsls	r1, r1, #5
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	619a      	str	r2, [r3, #24]
  SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <MX_SPI1_Init+0xbc>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_SPI1_Init+0xbc>)
 8001fe4:	4911      	ldr	r1, [pc, #68]	; (800202c <MX_SPI1_Init+0xc0>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
  SPI1->CR1 &= ~SPI_CR1_BR;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_SPI1_Init+0xbc>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_SPI1_Init+0xbc>)
 8001ff0:	2138      	movs	r1, #56	; 0x38
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
  SPI1->CR2 = SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_SPI1_Init+0xbc>)
 8001ff8:	22e0      	movs	r2, #224	; 0xe0
 8001ffa:	00d2      	lsls	r2, r2, #3
 8001ffc:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |= SPI_CR2_NSSP | SPI_CR2_SSOE;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <MX_SPI1_Init+0xbc>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_SPI1_Init+0xbc>)
 8002004:	210c      	movs	r1, #12
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <MX_SPI1_Init+0xbc>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_SPI1_Init+0xbc>)
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	ffff30ff 	.word	0xffff30ff
 8002024:	0f00ffff 	.word	0x0f00ffff
 8002028:	40013000 	.word	0x40013000
 800202c:	0000c004 	.word	0x0000c004

08002030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b092      	sub	sp, #72	; 0x48
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002036:	2340      	movs	r3, #64	; 0x40
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	0018      	movs	r0, r3
 800203c:	2308      	movs	r3, #8
 800203e:	001a      	movs	r2, r3
 8002040:	2100      	movs	r1, #0
 8002042:	f001 ff87 	bl	8003f54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002046:	2324      	movs	r3, #36	; 0x24
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	0018      	movs	r0, r3
 800204c:	231c      	movs	r3, #28
 800204e:	001a      	movs	r2, r3
 8002050:	2100      	movs	r1, #0
 8002052:	f001 ff7f 	bl	8003f54 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	0018      	movs	r0, r3
 800205a:	2320      	movs	r3, #32
 800205c:	001a      	movs	r2, r3
 800205e:	2100      	movs	r1, #0
 8002060:	f001 ff78 	bl	8003f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <MX_TIM1_Init+0x120>)
 8002066:	4a3b      	ldr	r2, [pc, #236]	; (8002154 <MX_TIM1_Init+0x124>)
 8002068:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <MX_TIM1_Init+0x120>)
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002070:	4b37      	ldr	r3, [pc, #220]	; (8002150 <MX_TIM1_Init+0x120>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8002076:	4b36      	ldr	r3, [pc, #216]	; (8002150 <MX_TIM1_Init+0x120>)
 8002078:	4a37      	ldr	r2, [pc, #220]	; (8002158 <MX_TIM1_Init+0x128>)
 800207a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <MX_TIM1_Init+0x120>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002082:	4b33      	ldr	r3, [pc, #204]	; (8002150 <MX_TIM1_Init+0x120>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <MX_TIM1_Init+0x120>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <MX_TIM1_Init+0x120>)
 8002090:	0018      	movs	r0, r3
 8002092:	f001 f995 	bl	80033c0 <HAL_TIM_PWM_Init>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d001      	beq.n	800209e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800209a:	f000 f8f3 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	187b      	adds	r3, r7, r1
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ac:	187a      	adds	r2, r7, r1
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <MX_TIM1_Init+0x120>)
 80020b0:	0011      	movs	r1, r2
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 fe6e 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 80020b8:	1e03      	subs	r3, r0, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020bc:	f000 f8e2 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c0:	2124      	movs	r1, #36	; 0x24
 80020c2:	187b      	adds	r3, r7, r1
 80020c4:	2260      	movs	r2, #96	; 0x60
 80020c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15000;
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	4a24      	ldr	r2, [pc, #144]	; (800215c <MX_TIM1_Init+0x12c>)
 80020cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ce:	187b      	adds	r3, r7, r1
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020da:	187b      	adds	r3, r7, r1
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020e0:	187b      	adds	r3, r7, r1
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ec:	1879      	adds	r1, r7, r1
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_TIM1_Init+0x120>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	0018      	movs	r0, r3
 80020f4:	f001 fae8 	bl	80036c8 <HAL_TIM_PWM_ConfigChannel>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80020fc:	f000 f8c2 	bl	8002284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	0192      	lsls	r2, r2, #6
 8002124:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800212c:	1d3a      	adds	r2, r7, #4
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <MX_TIM1_Init+0x120>)
 8002130:	0011      	movs	r1, r2
 8002132:	0018      	movs	r0, r3
 8002134:	f001 fe8c 	bl	8003e50 <HAL_TIMEx_ConfigBreakDeadTime>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800213c:	f000 f8a2 	bl	8002284 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */



  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <MX_TIM1_Init+0x120>)
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f8e8 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b012      	add	sp, #72	; 0x48
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200000d0 	.word	0x200000d0
 8002154:	40012c00 	.word	0x40012c00
 8002158:	00007530 	.word	0x00007530
 800215c:	00003a98 	.word	0x00003a98

08002160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002166:	240c      	movs	r4, #12
 8002168:	193b      	adds	r3, r7, r4
 800216a:	0018      	movs	r0, r3
 800216c:	2314      	movs	r3, #20
 800216e:	001a      	movs	r2, r3
 8002170:	2100      	movs	r1, #0
 8002172:	f001 feef 	bl	8003f54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	4b40      	ldr	r3, [pc, #256]	; (8002278 <MX_GPIO_Init+0x118>)
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <MX_GPIO_Init+0x118>)
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	0309      	lsls	r1, r1, #12
 8002180:	430a      	orrs	r2, r1
 8002182:	615a      	str	r2, [r3, #20]
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <MX_GPIO_Init+0x118>)
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	031b      	lsls	r3, r3, #12
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <MX_GPIO_Init+0x118>)
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <MX_GPIO_Init+0x118>)
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0289      	lsls	r1, r1, #10
 800219c:	430a      	orrs	r2, r1
 800219e:	615a      	str	r2, [r3, #20]
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <MX_GPIO_Init+0x118>)
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <MX_GPIO_Init+0x118>)
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <MX_GPIO_Init+0x118>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	02c9      	lsls	r1, r1, #11
 80021b8:	430a      	orrs	r2, r1
 80021ba:	615a      	str	r2, [r3, #20]
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <MX_GPIO_Init+0x118>)
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	02db      	lsls	r3, r3, #11
 80021c4:	4013      	ands	r3, r2
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021ca:	2340      	movs	r3, #64	; 0x40
 80021cc:	33ff      	adds	r3, #255	; 0xff
 80021ce:	482b      	ldr	r0, [pc, #172]	; (800227c <MX_GPIO_Init+0x11c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	0019      	movs	r1, r3
 80021d4:	f000 fbf7 	bl	80029c6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80021d8:	2390      	movs	r3, #144	; 0x90
 80021da:	05db      	lsls	r3, r3, #23
 80021dc:	2200      	movs	r2, #0
 80021de:	2148      	movs	r1, #72	; 0x48
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 fbf0 	bl	80029c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021e6:	193b      	adds	r3, r7, r4
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	32ff      	adds	r2, #255	; 0xff
 80021ec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	2201      	movs	r2, #1
 80021f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	193b      	adds	r3, r7, r4
 8002202:	4a1e      	ldr	r2, [pc, #120]	; (800227c <MX_GPIO_Init+0x11c>)
 8002204:	0019      	movs	r1, r3
 8002206:	0010      	movs	r0, r2
 8002208:	f000 fa48 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2248      	movs	r2, #72	; 0x48
 8002210:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002212:	193b      	adds	r3, r7, r4
 8002214:	2201      	movs	r2, #1
 8002216:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	193b      	adds	r3, r7, r4
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	193b      	adds	r3, r7, r4
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	193a      	adds	r2, r7, r4
 8002226:	2390      	movs	r3, #144	; 0x90
 8002228:	05db      	lsls	r3, r3, #23
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fa35 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	223c      	movs	r2, #60	; 0x3c
 8002236:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	193b      	adds	r3, r7, r4
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	193b      	adds	r3, r7, r4
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	193b      	adds	r3, r7, r4
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <MX_GPIO_Init+0x120>)
 8002248:	0019      	movs	r1, r3
 800224a:	0010      	movs	r0, r2
 800224c:	f000 fa26 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002250:	0021      	movs	r1, r4
 8002252:	187b      	adds	r3, r7, r1
 8002254:	22c0      	movs	r2, #192	; 0xc0
 8002256:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	187b      	adds	r3, r7, r1
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <MX_GPIO_Init+0x11c>)
 8002268:	0019      	movs	r1, r3
 800226a:	0010      	movs	r0, r2
 800226c:	f000 fa16 	bl	800269c <HAL_GPIO_Init>

}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b009      	add	sp, #36	; 0x24
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	48000800 	.word	0x48000800
 8002280:	48000400 	.word	0x48000400

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	e7fe      	b.n	800228c <Error_Handler+0x8>
	...

08002290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_MspInit+0x44>)
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_MspInit+0x44>)
 800229c:	2101      	movs	r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	619a      	str	r2, [r3, #24]
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_MspInit+0x44>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_MspInit+0x44>)
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_MspInit+0x44>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0549      	lsls	r1, r1, #21
 80022b8:	430a      	orrs	r2, r1
 80022ba:	61da      	str	r2, [r3, #28]
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_MspInit+0x44>)
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_TIM_PWM_MspInit+0x38>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10d      	bne.n	8002306 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_TIM_PWM_MspInit+0x3c>)
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_TIM_PWM_MspInit+0x3c>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	0109      	lsls	r1, r1, #4
 80022f4:	430a      	orrs	r2, r1
 80022f6:	619a      	str	r2, [r3, #24]
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_TIM_PWM_MspInit+0x3c>)
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	240c      	movs	r4, #12
 8002322:	193b      	adds	r3, r7, r4
 8002324:	0018      	movs	r0, r3
 8002326:	2314      	movs	r3, #20
 8002328:	001a      	movs	r2, r3
 800232a:	2100      	movs	r1, #0
 800232c:	f001 fe12 	bl	8003f54 <memset>
  if(htim->Instance==TIM1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_TIM_MspPostInit+0x78>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d125      	bne.n	8002386 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_TIM_MspPostInit+0x7c>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_TIM_MspPostInit+0x7c>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0289      	lsls	r1, r1, #10
 8002344:	430a      	orrs	r2, r1
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_TIM_MspPostInit+0x7c>)
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002356:	193b      	adds	r3, r7, r4
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	0052      	lsls	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	0021      	movs	r1, r4
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2202      	movs	r2, #2
 8002364:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2202      	movs	r2, #2
 8002376:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	187a      	adds	r2, r7, r1
 800237a:	2390      	movs	r3, #144	; 0x90
 800237c:	05db      	lsls	r3, r3, #23
 800237e:	0011      	movs	r1, r2
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f98b 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b009      	add	sp, #36	; 0x24
 800238c:	bd90      	pop	{r4, r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40021000 	.word	0x40021000

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023bc:	f000 f87a 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490e      	ldr	r1, [pc, #56]	; (8002410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0b      	ldr	r4, [pc, #44]	; (800241c <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023fa:	f7ff ffe4 	bl	80023c6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80023fe:	f001 fd85 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002402:	f7fe fc57 	bl	8000cb4 <main>

08002406 <LoopForever>:

LoopForever:
    b LoopForever
 8002406:	e7fe      	b.n	8002406 <LoopForever>
  ldr   r0, =_estack
 8002408:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002414:	08004b10 	.word	0x08004b10
  ldr r2, =_sbss
 8002418:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800241c:	200001c0 	.word	0x200001c0

08002420 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC1_COMP_IRQHandler>
	...

08002424 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_Init+0x24>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_Init+0x24>)
 800242e:	2110      	movs	r1, #16
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f809 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243a:	f7ff ff29 	bl	8002290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	40022000 	.word	0x40022000

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_InitTick+0x5c>)
 8002456:	681c      	ldr	r4, [r3, #0]
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_InitTick+0x60>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	0019      	movs	r1, r3
 800245e:	23fa      	movs	r3, #250	; 0xfa
 8002460:	0098      	lsls	r0, r3, #2
 8002462:	f7fd fe4f 	bl	8000104 <__udivsi3>
 8002466:	0003      	movs	r3, r0
 8002468:	0019      	movs	r1, r3
 800246a:	0020      	movs	r0, r4
 800246c:	f7fd fe4a 	bl	8000104 <__udivsi3>
 8002470:	0003      	movs	r3, r0
 8002472:	0018      	movs	r0, r3
 8002474:	f000 f905 	bl	8002682 <HAL_SYSTICK_Config>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e00f      	b.n	80024a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d80b      	bhi.n	800249e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	2301      	movs	r3, #1
 800248a:	425b      	negs	r3, r3
 800248c:	2200      	movs	r2, #0
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f8e2 	bl	8002658 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_InitTick+0x64>)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b003      	add	sp, #12
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	20000040 	.word	0x20000040
 80024ac:	20000048 	.word	0x20000048
 80024b0:	20000044 	.word	0x20000044

080024b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_IncTick+0x1c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	001a      	movs	r2, r3
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_IncTick+0x20>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	18d2      	adds	r2, r2, r3
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_IncTick+0x20>)
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	20000048 	.word	0x20000048
 80024d4:	200001bc 	.word	0x200001bc

080024d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <HAL_GetTick+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	200001bc 	.word	0x200001bc

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3301      	adds	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	001a      	movs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	189b      	adds	r3, r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	f7ff ffe0 	bl	80024d8 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	20000048 	.word	0x20000048

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	0002      	movs	r2, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b7f      	cmp	r3, #127	; 0x7f
 8002548:	d828      	bhi.n	800259c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <__NVIC_SetPriority+0xd4>)
 800254c:	1dfb      	adds	r3, r7, #7
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b25b      	sxtb	r3, r3
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	33c0      	adds	r3, #192	; 0xc0
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	589b      	ldr	r3, [r3, r2]
 800255a:	1dfa      	adds	r2, r7, #7
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	0011      	movs	r1, r2
 8002560:	2203      	movs	r2, #3
 8002562:	400a      	ands	r2, r1
 8002564:	00d2      	lsls	r2, r2, #3
 8002566:	21ff      	movs	r1, #255	; 0xff
 8002568:	4091      	lsls	r1, r2
 800256a:	000a      	movs	r2, r1
 800256c:	43d2      	mvns	r2, r2
 800256e:	401a      	ands	r2, r3
 8002570:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	019b      	lsls	r3, r3, #6
 8002576:	22ff      	movs	r2, #255	; 0xff
 8002578:	401a      	ands	r2, r3
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	0018      	movs	r0, r3
 8002580:	2303      	movs	r3, #3
 8002582:	4003      	ands	r3, r0
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002588:	481f      	ldr	r0, [pc, #124]	; (8002608 <__NVIC_SetPriority+0xd4>)
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25b      	sxtb	r3, r3
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	430a      	orrs	r2, r1
 8002594:	33c0      	adds	r3, #192	; 0xc0
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800259a:	e031      	b.n	8002600 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <__NVIC_SetPriority+0xd8>)
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	0019      	movs	r1, r3
 80025a4:	230f      	movs	r3, #15
 80025a6:	400b      	ands	r3, r1
 80025a8:	3b08      	subs	r3, #8
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3306      	adds	r3, #6
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	18d3      	adds	r3, r2, r3
 80025b2:	3304      	adds	r3, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1dfa      	adds	r2, r7, #7
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	0011      	movs	r1, r2
 80025bc:	2203      	movs	r2, #3
 80025be:	400a      	ands	r2, r1
 80025c0:	00d2      	lsls	r2, r2, #3
 80025c2:	21ff      	movs	r1, #255	; 0xff
 80025c4:	4091      	lsls	r1, r2
 80025c6:	000a      	movs	r2, r1
 80025c8:	43d2      	mvns	r2, r2
 80025ca:	401a      	ands	r2, r3
 80025cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	019b      	lsls	r3, r3, #6
 80025d2:	22ff      	movs	r2, #255	; 0xff
 80025d4:	401a      	ands	r2, r3
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	2303      	movs	r3, #3
 80025de:	4003      	ands	r3, r0
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e4:	4809      	ldr	r0, [pc, #36]	; (800260c <__NVIC_SetPriority+0xd8>)
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	001c      	movs	r4, r3
 80025ec:	230f      	movs	r3, #15
 80025ee:	4023      	ands	r3, r4
 80025f0:	3b08      	subs	r3, #8
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	430a      	orrs	r2, r1
 80025f6:	3306      	adds	r3, #6
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	18c3      	adds	r3, r0, r3
 80025fc:	3304      	adds	r3, #4
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b003      	add	sp, #12
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1e5a      	subs	r2, r3, #1
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	045b      	lsls	r3, r3, #17
 8002620:	429a      	cmp	r2, r3
 8002622:	d301      	bcc.n	8002628 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002624:	2301      	movs	r3, #1
 8002626:	e010      	b.n	800264a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <SysTick_Config+0x44>)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	3a01      	subs	r2, #1
 800262e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002630:	2301      	movs	r3, #1
 8002632:	425b      	negs	r3, r3
 8002634:	2103      	movs	r1, #3
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff ff7c 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SysTick_Config+0x44>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <SysTick_Config+0x44>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	210f      	movs	r1, #15
 8002664:	187b      	adds	r3, r7, r1
 8002666:	1c02      	adds	r2, r0, #0
 8002668:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	187b      	adds	r3, r7, r1
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b25b      	sxtb	r3, r3
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b004      	add	sp, #16
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff ffbf 	bl	8002610 <SysTick_Config>
 8002692:	0003      	movs	r3, r0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	e155      	b.n	8002958 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4091      	lsls	r1, r2
 80026b6:	000a      	movs	r2, r1
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <HAL_GPIO_Init+0x28>
 80026c2:	e146      	b.n	8002952 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d005      	beq.n	80026dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2203      	movs	r2, #3
 80026d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d130      	bne.n	800273e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	409a      	lsls	r2, r3
 80026ea:	0013      	movs	r3, r2
 80026ec:	43da      	mvns	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	0013      	movs	r3, r2
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002712:	2201      	movs	r2, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
 8002718:	0013      	movs	r3, r2
 800271a:	43da      	mvns	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	2201      	movs	r2, #1
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2203      	movs	r2, #3
 8002744:	4013      	ands	r3, r2
 8002746:	2b03      	cmp	r3, #3
 8002748:	d017      	beq.n	800277a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	409a      	lsls	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2203      	movs	r2, #3
 8002780:	4013      	ands	r3, r2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d123      	bne.n	80027ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	58d3      	ldr	r3, [r2, r3]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2207      	movs	r2, #7
 8002798:	4013      	ands	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	409a      	lsls	r2, r3
 80027a0:	0013      	movs	r3, r2
 80027a2:	43da      	mvns	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2107      	movs	r1, #7
 80027b2:	400b      	ands	r3, r1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	409a      	lsls	r2, r3
 80027b8:	0013      	movs	r3, r2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	6939      	ldr	r1, [r7, #16]
 80027cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	409a      	lsls	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2203      	movs	r2, #3
 80027ec:	401a      	ands	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	23c0      	movs	r3, #192	; 0xc0
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	4013      	ands	r3, r2
 800280c:	d100      	bne.n	8002810 <HAL_GPIO_Init+0x174>
 800280e:	e0a0      	b.n	8002952 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002810:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x2d4>)
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	4b56      	ldr	r3, [pc, #344]	; (8002970 <HAL_GPIO_Init+0x2d4>)
 8002816:	2101      	movs	r1, #1
 8002818:	430a      	orrs	r2, r1
 800281a:	619a      	str	r2, [r3, #24]
 800281c:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_GPIO_Init+0x2d4>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_GPIO_Init+0x2d8>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	589b      	ldr	r3, [r3, r2]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2203      	movs	r2, #3
 800283a:	4013      	ands	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	409a      	lsls	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	43da      	mvns	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	2390      	movs	r3, #144	; 0x90
 8002850:	05db      	lsls	r3, r3, #23
 8002852:	429a      	cmp	r2, r3
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x1ee>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x1ea>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a46      	ldr	r2, [pc, #280]	; (800297c <HAL_GPIO_Init+0x2e0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x1e6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a45      	ldr	r2, [pc, #276]	; (8002980 <HAL_GPIO_Init+0x2e4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x1e2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a44      	ldr	r2, [pc, #272]	; (8002984 <HAL_GPIO_Init+0x2e8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x1de>
 8002876:	2304      	movs	r3, #4
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 800287a:	2305      	movs	r3, #5
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x1f0>
 800288a:	2300      	movs	r3, #0
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	2103      	movs	r1, #3
 8002890:	400a      	ands	r2, r1
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_GPIO_Init+0x2d8>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028aa:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	4013      	ands	r3, r2
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028d4:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43da      	mvns	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	029b      	lsls	r3, r3, #10
 80028ec:	4013      	ands	r3, r2
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43da      	mvns	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	035b      	lsls	r3, r3, #13
 8002916:	4013      	ands	r3, r2
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43da      	mvns	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	039b      	lsls	r3, r3, #14
 8002940:	4013      	ands	r3, r2
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_GPIO_Init+0x2ec>)
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	40da      	lsrs	r2, r3
 8002960:	1e13      	subs	r3, r2, #0
 8002962:	d000      	beq.n	8002966 <HAL_GPIO_Init+0x2ca>
 8002964:	e6a2      	b.n	80026ac <HAL_GPIO_Init+0x10>
  } 
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00
 8002984:	48001000 	.word	0x48001000
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	000a      	movs	r2, r1
 8002996:	1cbb      	adds	r3, r7, #2
 8002998:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	1cba      	adds	r2, r7, #2
 80029a0:	8812      	ldrh	r2, [r2, #0]
 80029a2:	4013      	ands	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80029a6:	230f      	movs	r3, #15
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e003      	b.n	80029b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b0:	230f      	movs	r3, #15
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80029b8:	230f      	movs	r3, #15
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	781b      	ldrb	r3, [r3, #0]
  }
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b004      	add	sp, #16
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	0008      	movs	r0, r1
 80029d0:	0011      	movs	r1, r2
 80029d2:	1cbb      	adds	r3, r7, #2
 80029d4:	1c02      	adds	r2, r0, #0
 80029d6:	801a      	strh	r2, [r3, #0]
 80029d8:	1c7b      	adds	r3, r7, #1
 80029da:	1c0a      	adds	r2, r1, #0
 80029dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029de:	1c7b      	adds	r3, r7, #1
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029e6:	1cbb      	adds	r3, r7, #2
 80029e8:	881a      	ldrh	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ee:	e003      	b.n	80029f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029f0:	1cbb      	adds	r3, r7, #2
 80029f2:	881a      	ldrh	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 fb76 	bl	8003100 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d100      	bne.n	8002a20 <HAL_RCC_OscConfig+0x20>
 8002a1e:	e08e      	b.n	8002b3e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a20:	4bc5      	ldr	r3, [pc, #788]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	220c      	movs	r2, #12
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d00e      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a2c:	4bc2      	ldr	r3, [pc, #776]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	220c      	movs	r2, #12
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d117      	bne.n	8002a68 <HAL_RCC_OscConfig+0x68>
 8002a38:	4bbf      	ldr	r3, [pc, #764]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	23c0      	movs	r3, #192	; 0xc0
 8002a3e:	025b      	lsls	r3, r3, #9
 8002a40:	401a      	ands	r2, r3
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	025b      	lsls	r3, r3, #9
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d10e      	bne.n	8002a68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4a:	4bbb      	ldr	r3, [pc, #748]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	029b      	lsls	r3, r3, #10
 8002a52:	4013      	ands	r3, r2
 8002a54:	d100      	bne.n	8002a58 <HAL_RCC_OscConfig+0x58>
 8002a56:	e071      	b.n	8002b3c <HAL_RCC_OscConfig+0x13c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d000      	beq.n	8002a62 <HAL_RCC_OscConfig+0x62>
 8002a60:	e06c      	b.n	8002b3c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f000 fb4c 	bl	8003100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_OscConfig+0x80>
 8002a70:	4bb1      	ldr	r3, [pc, #708]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4bb0      	ldr	r3, [pc, #704]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	0249      	lsls	r1, r1, #9
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e02f      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0xa2>
 8002a88:	4bab      	ldr	r3, [pc, #684]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4baa      	ldr	r3, [pc, #680]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a8e:	49ab      	ldr	r1, [pc, #684]	; (8002d3c <HAL_RCC_OscConfig+0x33c>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	4ba8      	ldr	r3, [pc, #672]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4ba7      	ldr	r3, [pc, #668]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002a9a:	49a9      	ldr	r1, [pc, #676]	; (8002d40 <HAL_RCC_OscConfig+0x340>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e01e      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xc8>
 8002aaa:	4ba3      	ldr	r3, [pc, #652]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4ba2      	ldr	r3, [pc, #648]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	02c9      	lsls	r1, r1, #11
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	4b9f      	ldr	r3, [pc, #636]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b9e      	ldr	r3, [pc, #632]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0249      	lsls	r1, r1, #9
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
 8002ac8:	4b9b      	ldr	r3, [pc, #620]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b9a      	ldr	r3, [pc, #616]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ace:	499b      	ldr	r1, [pc, #620]	; (8002d3c <HAL_RCC_OscConfig+0x33c>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	4b98      	ldr	r3, [pc, #608]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b97      	ldr	r3, [pc, #604]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ada:	4999      	ldr	r1, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x340>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d014      	beq.n	8002b12 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fcf6 	bl	80024d8 <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af2:	f7ff fcf1 	bl	80024d8 <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e2fd      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b04:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	029b      	lsls	r3, r3, #10
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0xf2>
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7ff fce1 	bl	80024d8 <HAL_GetTick>
 8002b16:	0003      	movs	r3, r0
 8002b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff fcdc 	bl	80024d8 <HAL_GetTick>
 8002b20:	0002      	movs	r2, r0
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e2e8      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x11c>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d100      	bne.n	8002b4a <HAL_RCC_OscConfig+0x14a>
 8002b48:	e06c      	b.n	8002c24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b4a:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	220c      	movs	r2, #12
 8002b50:	4013      	ands	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b54:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	220c      	movs	r2, #12
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d11f      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1a0>
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	23c0      	movs	r3, #192	; 0xc0
 8002b66:	025b      	lsls	r3, r3, #9
 8002b68:	401a      	ands	r2, r3
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b71      	ldr	r3, [pc, #452]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x188>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e2bb      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	22f8      	movs	r2, #248	; 0xf8
 8002b8e:	4393      	bics	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00da      	lsls	r2, r3, #3
 8002b98:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e041      	b.n	8002c24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d024      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff fc90 	bl	80024d8 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7ff fc8b 	bl	80024d8 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e297      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d0f1      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	22f8      	movs	r2, #248	; 0xf8
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	00da      	lsls	r2, r3, #3
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e018      	b.n	8002c24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	438a      	bics	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7ff fc6b 	bl	80024d8 <HAL_GetTick>
 8002c02:	0003      	movs	r3, r0
 8002c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c08:	f7ff fc66 	bl	80024d8 <HAL_GetTick>
 8002c0c:	0002      	movs	r2, r0
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e272      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d1f1      	bne.n	8002c08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d036      	beq.n	8002c9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d019      	beq.n	8002c6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7ff fc49 	bl	80024d8 <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7ff fc44 	bl	80024d8 <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e250      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	d0f1      	beq.n	8002c4c <HAL_RCC_OscConfig+0x24c>
 8002c68:	e018      	b.n	8002c9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	438a      	bics	r2, r1
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7ff fc2f 	bl	80024d8 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c80:	f7ff fc2a 	bl	80024d8 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e236      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d1f1      	bne.n	8002c80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d100      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
 8002ca6:	e0b5      	b.n	8002e14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca8:	201f      	movs	r0, #31
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	055b      	lsls	r3, r3, #21
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d110      	bne.n	8002cde <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	0549      	lsls	r1, r1, #21
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	61da      	str	r2, [r3, #28]
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cd8:	183b      	adds	r3, r7, r0
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d11a      	bne.n	8002d20 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0049      	lsls	r1, r1, #1
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf8:	f7ff fbee 	bl	80024d8 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7ff fbe9 	bl	80024d8 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1f5      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_OscConfig+0x344>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10f      	bne.n	8002d48 <HAL_RCC_OscConfig+0x348>
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <HAL_RCC_OscConfig+0x338>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	430a      	orrs	r2, r1
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	e036      	b.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	fffeffff 	.word	0xfffeffff
 8002d40:	fffbffff 	.word	0xfffbffff
 8002d44:	40007000 	.word	0x40007000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x36a>
 8002d50:	4bca      	ldr	r3, [pc, #808]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	4bc9      	ldr	r3, [pc, #804]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	438a      	bics	r2, r1
 8002d5a:	621a      	str	r2, [r3, #32]
 8002d5c:	4bc7      	ldr	r3, [pc, #796]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	4bc6      	ldr	r3, [pc, #792]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d62:	2104      	movs	r1, #4
 8002d64:	438a      	bics	r2, r1
 8002d66:	621a      	str	r2, [r3, #32]
 8002d68:	e01c      	b.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x38c>
 8002d72:	4bc2      	ldr	r3, [pc, #776]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	4bc1      	ldr	r3, [pc, #772]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d78:	2104      	movs	r1, #4
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	621a      	str	r2, [r3, #32]
 8002d7e:	4bbf      	ldr	r3, [pc, #764]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	4bbe      	ldr	r3, [pc, #760]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d84:	2101      	movs	r1, #1
 8002d86:	430a      	orrs	r2, r1
 8002d88:	621a      	str	r2, [r3, #32]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0x3a4>
 8002d8c:	4bbb      	ldr	r3, [pc, #748]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	4bba      	ldr	r3, [pc, #744]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	621a      	str	r2, [r3, #32]
 8002d98:	4bb8      	ldr	r3, [pc, #736]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4bb7      	ldr	r3, [pc, #732]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002d9e:	2104      	movs	r1, #4
 8002da0:	438a      	bics	r2, r1
 8002da2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d014      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7ff fb94 	bl	80024d8 <HAL_GetTick>
 8002db0:	0003      	movs	r3, r0
 8002db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	e009      	b.n	8002dca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7ff fb8f 	bl	80024d8 <HAL_GetTick>
 8002dba:	0002      	movs	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	4aaf      	ldr	r2, [pc, #700]	; (8003080 <HAL_RCC_OscConfig+0x680>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e19a      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	4bac      	ldr	r3, [pc, #688]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3b6>
 8002dd4:	e013      	b.n	8002dfe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff fb7f 	bl	80024d8 <HAL_GetTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	e009      	b.n	8002df4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f7ff fb7a 	bl	80024d8 <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	4aa5      	ldr	r2, [pc, #660]	; (8003080 <HAL_RCC_OscConfig+0x680>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e185      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	4ba1      	ldr	r3, [pc, #644]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e08:	4b9c      	ldr	r3, [pc, #624]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	4b9b      	ldr	r3, [pc, #620]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e0e:	499d      	ldr	r1, [pc, #628]	; (8003084 <HAL_RCC_OscConfig+0x684>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d12a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e26:	4b95      	ldr	r3, [pc, #596]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e2a:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e32:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e36:	4b91      	ldr	r3, [pc, #580]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7ff fb4b 	bl	80024d8 <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e48:	f7ff fb46 	bl	80024d8 <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e152      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4013      	ands	r3, r2
 8002e62:	d0f1      	beq.n	8002e48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e64:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	22f8      	movs	r2, #248	; 0xf8
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	00da      	lsls	r2, r3, #3
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7a:	e034      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	3305      	adds	r3, #5
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e84:	4b7d      	ldr	r3, [pc, #500]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e90:	4b7a      	ldr	r3, [pc, #488]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	22f8      	movs	r2, #248	; 0xf8
 8002e96:	4393      	bics	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	00da      	lsls	r2, r3, #3
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea6:	e01e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ea8:	4b74      	ldr	r3, [pc, #464]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eac:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eae:	2104      	movs	r1, #4
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002eb4:	4b71      	ldr	r3, [pc, #452]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb8:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7ff fb0a 	bl	80024d8 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eca:	f7ff fb05 	bl	80024d8 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e111      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d1f1      	bne.n	8002eca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	4013      	ands	r3, r2
 8002eee:	d05c      	beq.n	8002faa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ef0:	4b62      	ldr	r3, [pc, #392]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	220c      	movs	r2, #12
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d00e      	beq.n	8002f1a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002efc:	4b5f      	ldr	r3, [pc, #380]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	220c      	movs	r2, #12
 8002f02:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d114      	bne.n	8002f32 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f08:	4b5c      	ldr	r3, [pc, #368]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	23c0      	movs	r3, #192	; 0xc0
 8002f0e:	025b      	lsls	r3, r3, #9
 8002f10:	401a      	ands	r2, r3
 8002f12:	23c0      	movs	r3, #192	; 0xc0
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d10b      	bne.n	8002f32 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	025b      	lsls	r3, r3, #9
 8002f22:	4013      	ands	r3, r2
 8002f24:	d040      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x5a8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d03c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0e6      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01b      	beq.n	8002f72 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f3a:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3e:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f40:	2180      	movs	r1, #128	; 0x80
 8002f42:	0249      	lsls	r1, r1, #9
 8002f44:	430a      	orrs	r2, r1
 8002f46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7ff fac6 	bl	80024d8 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f52:	f7ff fac1 	bl	80024d8 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0cd      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f64:	4b45      	ldr	r3, [pc, #276]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	025b      	lsls	r3, r3, #9
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x552>
 8002f70:	e01b      	b.n	8002faa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f72:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f76:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f78:	4943      	ldr	r1, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0x688>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7ff faab 	bl	80024d8 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f88:	f7ff faa6 	bl	80024d8 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0b2      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	025b      	lsls	r3, r3, #9
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x588>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fa8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d100      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5b4>
 8002fb2:	e0a4      	b.n	80030fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	220c      	movs	r2, #12
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d100      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5c2>
 8002fc0:	e078      	b.n	80030b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d14c      	bne.n	8003064 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002fd0:	492e      	ldr	r1, [pc, #184]	; (800308c <HAL_RCC_OscConfig+0x68c>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff fa7f 	bl	80024d8 <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7ff fa7a 	bl	80024d8 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e086      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	049b      	lsls	r3, r3, #18
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	220f      	movs	r2, #15
 8003004:	4393      	bics	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 800300e:	430a      	orrs	r2, r1
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <HAL_RCC_OscConfig+0x690>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	431a      	orrs	r2, r3
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003032:	2180      	movs	r1, #128	; 0x80
 8003034:	0449      	lsls	r1, r1, #17
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7ff fa4d 	bl	80024d8 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7ff fa48 	bl	80024d8 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e054      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	049b      	lsls	r3, r3, #18
 800305e:	4013      	ands	r3, r2
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x644>
 8003062:	e04c      	b.n	80030fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <HAL_RCC_OscConfig+0x67c>)
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <HAL_RCC_OscConfig+0x68c>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7ff fa32 	bl	80024d8 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x6a6>
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40021000 	.word	0x40021000
 8003080:	00001388 	.word	0x00001388
 8003084:	efffffff 	.word	0xefffffff
 8003088:	fffeffff 	.word	0xfffeffff
 800308c:	feffffff 	.word	0xfeffffff
 8003090:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003094:	f7ff fa20 	bl	80024d8 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e02c      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_RCC_OscConfig+0x708>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	049b      	lsls	r3, r3, #18
 80030ae:	4013      	ands	r3, r2
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x694>
 80030b2:	e024      	b.n	80030fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01f      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_RCC_OscConfig+0x708>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <HAL_RCC_OscConfig+0x708>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	23c0      	movs	r3, #192	; 0xc0
 80030d0:	025b      	lsls	r3, r3, #9
 80030d2:	401a      	ands	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	429a      	cmp	r2, r3
 80030da:	d10e      	bne.n	80030fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	220f      	movs	r2, #15
 80030e0:	401a      	ands	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	23f0      	movs	r3, #240	; 0xf0
 80030ee:	039b      	lsls	r3, r3, #14
 80030f0:	401a      	ands	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b008      	add	sp, #32
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0bf      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b61      	ldr	r3, [pc, #388]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d911      	bls.n	8003152 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	4393      	bics	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d001      	beq.n	8003152 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0a6      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d015      	beq.n	8003188 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2204      	movs	r2, #4
 8003162:	4013      	ands	r3, r2
 8003164:	d006      	beq.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003166:	4b51      	ldr	r3, [pc, #324]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800316c:	21e0      	movs	r1, #224	; 0xe0
 800316e:	00c9      	lsls	r1, r1, #3
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	22f0      	movs	r2, #240	; 0xf0
 800317a:	4393      	bics	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d04c      	beq.n	800322c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	029b      	lsls	r3, r3, #10
 80031a2:	4013      	ands	r3, r2
 80031a4:	d120      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e07a      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	049b      	lsls	r3, r3, #18
 80031ba:	4013      	ands	r3, r2
 80031bc:	d114      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06e      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	025b      	lsls	r3, r3, #9
 80031d2:	4013      	ands	r3, r2
 80031d4:	d108      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e062      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2202      	movs	r2, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e05b      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e8:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	4393      	bics	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7ff f96c 	bl	80024d8 <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003204:	e009      	b.n	800321a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003206:	f7ff f967 	bl	80024d8 <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_RCC_ClockConfig+0x1a4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e042      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	220c      	movs	r2, #12
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1ec      	bne.n	8003206 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d211      	bcs.n	800325e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	4393      	bics	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x19c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e020      	b.n	80032a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <HAL_RCC_ClockConfig+0x1a8>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800327c:	f000 f820 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003280:	0001      	movs	r1, r0
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1a0>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	220f      	movs	r2, #15
 800328a:	4013      	ands	r3, r2
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x1ac>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	000a      	movs	r2, r1
 8003292:	40da      	lsrs	r2, r3
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003296:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003298:	2003      	movs	r0, #3
 800329a:	f7ff f8d7 	bl	800244c <HAL_InitTick>
  
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	00001388 	.word	0x00001388
 80032b4:	fffff8ff 	.word	0xfffff8ff
 80032b8:	08004af8 	.word	0x08004af8
 80032bc:	20000040 	.word	0x20000040

080032c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b08f      	sub	sp, #60	; 0x3c
 80032c4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80032c6:	2314      	movs	r3, #20
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <HAL_RCC_GetSysClockFreq+0xec>)
 80032cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032ce:	c313      	stmia	r3!, {r0, r1, r4}
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80032d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032da:	c313      	stmia	r3!, {r0, r1, r4}
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e4:	2300      	movs	r3, #0
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e8:	2300      	movs	r3, #0
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80032f4:	4b2f      	ldr	r3, [pc, #188]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	220c      	movs	r2, #12
 80032fe:	4013      	ands	r3, r2
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d047      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0xd4>
 8003304:	d849      	bhi.n	800339a <HAL_RCC_GetSysClockFreq+0xda>
 8003306:	2b04      	cmp	r3, #4
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x50>
 800330a:	2b08      	cmp	r3, #8
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x56>
 800330e:	e044      	b.n	800339a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003314:	e044      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	220f      	movs	r2, #15
 800331c:	4013      	ands	r3, r2
 800331e:	2214      	movs	r2, #20
 8003320:	18ba      	adds	r2, r7, r2
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	220f      	movs	r2, #15
 800332c:	4013      	ands	r3, r2
 800332e:	1d3a      	adds	r2, r7, #4
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003336:	23c0      	movs	r3, #192	; 0xc0
 8003338:	025b      	lsls	r3, r3, #9
 800333a:	401a      	ands	r2, r3
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	429a      	cmp	r2, r3
 8003342:	d109      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003346:	481c      	ldr	r0, [pc, #112]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003348:	f7fc fedc 	bl	8000104 <__udivsi3>
 800334c:	0003      	movs	r3, r0
 800334e:	001a      	movs	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	4353      	muls	r3, r2
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
 8003356:	e01a      	b.n	800338e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335a:	23c0      	movs	r3, #192	; 0xc0
 800335c:	025b      	lsls	r3, r3, #9
 800335e:	401a      	ands	r2, r3
 8003360:	23c0      	movs	r3, #192	; 0xc0
 8003362:	025b      	lsls	r3, r3, #9
 8003364:	429a      	cmp	r2, r3
 8003366:	d109      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800336a:	4814      	ldr	r0, [pc, #80]	; (80033bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800336c:	f7fc feca 	bl	8000104 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	001a      	movs	r2, r3
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	4353      	muls	r3, r2
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
 800337a:	e008      	b.n	800338e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800337c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800337e:	480e      	ldr	r0, [pc, #56]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003380:	f7fc fec0 	bl	8000104 <__udivsi3>
 8003384:	0003      	movs	r3, r0
 8003386:	001a      	movs	r2, r3
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	4353      	muls	r3, r2
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003392:	e005      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003398:	e002      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800339e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b00f      	add	sp, #60	; 0x3c
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	08004074 	.word	0x08004074
 80033b0:	08004084 	.word	0x08004084
 80033b4:	40021000 	.word	0x40021000
 80033b8:	007a1200 	.word	0x007a1200
 80033bc:	02dc6c00 	.word	0x02dc6c00

080033c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e042      	b.n	8003458 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223d      	movs	r2, #61	; 0x3d
 80033d6:	5c9b      	ldrb	r3, [r3, r2]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223c      	movs	r2, #60	; 0x3c
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fe ff75 	bl	80022d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223d      	movs	r2, #61	; 0x3d
 80033f2:	2102      	movs	r1, #2
 80033f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	0019      	movs	r1, r3
 8003400:	0010      	movs	r0, r2
 8003402:	f000 fa27 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2246      	movs	r2, #70	; 0x46
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223e      	movs	r2, #62	; 0x3e
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223f      	movs	r2, #63	; 0x3f
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2240      	movs	r2, #64	; 0x40
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2241      	movs	r2, #65	; 0x41
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2242      	movs	r2, #66	; 0x42
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2243      	movs	r2, #67	; 0x43
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2244      	movs	r2, #68	; 0x44
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2245      	movs	r2, #69	; 0x45
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	223d      	movs	r2, #61	; 0x3d
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d108      	bne.n	8003482 <HAL_TIM_PWM_Start+0x22>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	223e      	movs	r2, #62	; 0x3e
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	4193      	sbcs	r3, r2
 800347e:	b2db      	uxtb	r3, r3
 8003480:	e01f      	b.n	80034c2 <HAL_TIM_PWM_Start+0x62>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d108      	bne.n	800349a <HAL_TIM_PWM_Start+0x3a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	223f      	movs	r2, #63	; 0x3f
 800348c:	5c9b      	ldrb	r3, [r3, r2]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	4193      	sbcs	r3, r2
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e013      	b.n	80034c2 <HAL_TIM_PWM_Start+0x62>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d108      	bne.n	80034b2 <HAL_TIM_PWM_Start+0x52>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2240      	movs	r2, #64	; 0x40
 80034a4:	5c9b      	ldrb	r3, [r3, r2]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	1e5a      	subs	r2, r3, #1
 80034ac:	4193      	sbcs	r3, r2
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e007      	b.n	80034c2 <HAL_TIM_PWM_Start+0x62>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2241      	movs	r2, #65	; 0x41
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	1e5a      	subs	r2, r3, #1
 80034be:	4193      	sbcs	r3, r2
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e074      	b.n	80035b4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_TIM_PWM_Start+0x7a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	223e      	movs	r2, #62	; 0x3e
 80034d4:	2102      	movs	r1, #2
 80034d6:	5499      	strb	r1, [r3, r2]
 80034d8:	e013      	b.n	8003502 <HAL_TIM_PWM_Start+0xa2>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0x8a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	223f      	movs	r2, #63	; 0x3f
 80034e4:	2102      	movs	r1, #2
 80034e6:	5499      	strb	r1, [r3, r2]
 80034e8:	e00b      	b.n	8003502 <HAL_TIM_PWM_Start+0xa2>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0x9a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	2102      	movs	r1, #2
 80034f6:	5499      	strb	r1, [r3, r2]
 80034f8:	e003      	b.n	8003502 <HAL_TIM_PWM_Start+0xa2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2241      	movs	r2, #65	; 0x41
 80034fe:	2102      	movs	r1, #2
 8003500:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	0018      	movs	r0, r3
 800350c:	f000 fc1e 	bl	8003d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a29      	ldr	r2, [pc, #164]	; (80035bc <HAL_TIM_PWM_Start+0x15c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_TIM_PWM_Start+0xd8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <HAL_TIM_PWM_Start+0x160>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_TIM_PWM_Start+0xd8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_TIM_PWM_Start+0x164>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_PWM_Start+0xd8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <HAL_TIM_PWM_Start+0x168>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_TIM_PWM_Start+0xdc>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_TIM_PWM_Start+0xde>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	0209      	lsls	r1, r1, #8
 8003550:	430a      	orrs	r2, r1
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_TIM_PWM_Start+0x15c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00f      	beq.n	800357e <HAL_TIM_PWM_Start+0x11e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	05db      	lsls	r3, r3, #23
 8003566:	429a      	cmp	r2, r3
 8003568:	d009      	beq.n	800357e <HAL_TIM_PWM_Start+0x11e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_TIM_PWM_Start+0x16c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_TIM_PWM_Start+0x11e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a11      	ldr	r2, [pc, #68]	; (80035c0 <HAL_TIM_PWM_Start+0x160>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d111      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2207      	movs	r2, #7
 8003586:	4013      	ands	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b06      	cmp	r3, #6
 800358e:	d010      	beq.n	80035b2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	e007      	b.n	80035b2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b004      	add	sp, #16
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800
 80035cc:	40000400 	.word	0x40000400

080035d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fbb2 	bl	8003d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <HAL_TIM_PWM_Stop+0xdc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_TIM_PWM_Stop+0x40>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2e      	ldr	r2, [pc, #184]	; (80036b0 <HAL_TIM_PWM_Stop+0xe0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_TIM_PWM_Stop+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2c      	ldr	r2, [pc, #176]	; (80036b4 <HAL_TIM_PWM_Stop+0xe4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_TIM_PWM_Stop+0x40>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2b      	ldr	r2, [pc, #172]	; (80036b8 <HAL_TIM_PWM_Stop+0xe8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_TIM_PWM_Stop+0x44>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_TIM_PWM_Stop+0x46>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d013      	beq.n	8003642 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <HAL_TIM_PWM_Stop+0xec>)
 8003622:	4013      	ands	r3, r2
 8003624:	d10d      	bne.n	8003642 <HAL_TIM_PWM_Stop+0x72>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <HAL_TIM_PWM_Stop+0xf0>)
 800362e:	4013      	ands	r3, r2
 8003630:	d107      	bne.n	8003642 <HAL_TIM_PWM_Stop+0x72>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4921      	ldr	r1, [pc, #132]	; (80036c4 <HAL_TIM_PWM_Stop+0xf4>)
 800363e:	400a      	ands	r2, r1
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_TIM_PWM_Stop+0xec>)
 800364a:	4013      	ands	r3, r2
 800364c:	d10d      	bne.n	800366a <HAL_TIM_PWM_Stop+0x9a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <HAL_TIM_PWM_Stop+0xf0>)
 8003656:	4013      	ands	r3, r2
 8003658:	d107      	bne.n	800366a <HAL_TIM_PWM_Stop+0x9a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	438a      	bics	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <HAL_TIM_PWM_Stop+0xaa>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	223e      	movs	r2, #62	; 0x3e
 8003674:	2101      	movs	r1, #1
 8003676:	5499      	strb	r1, [r3, r2]
 8003678:	e013      	b.n	80036a2 <HAL_TIM_PWM_Stop+0xd2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Stop+0xba>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	223f      	movs	r2, #63	; 0x3f
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]
 8003688:	e00b      	b.n	80036a2 <HAL_TIM_PWM_Stop+0xd2>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d104      	bne.n	800369a <HAL_TIM_PWM_Stop+0xca>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	2101      	movs	r1, #1
 8003696:	5499      	strb	r1, [r3, r2]
 8003698:	e003      	b.n	80036a2 <HAL_TIM_PWM_Stop+0xd2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2241      	movs	r2, #65	; 0x41
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	00001111 	.word	0x00001111
 80036c0:	00000444 	.word	0x00000444
 80036c4:	ffff7fff 	.word	0xffff7fff

080036c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2317      	movs	r3, #23
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	223c      	movs	r2, #60	; 0x3c
 80036e0:	5c9b      	ldrb	r3, [r3, r2]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x22>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e0ad      	b.n	8003846 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	223c      	movs	r2, #60	; 0x3c
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d100      	bne.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x32>
 80036f8:	e076      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d900      	bls.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003700:	e095      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d04e      	beq.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b08      	cmp	r3, #8
 800370c:	d900      	bls.n	8003710 <HAL_TIM_PWM_ConfigChannel+0x48>
 800370e:	e08e      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d021      	beq.n	8003760 <HAL_TIM_PWM_ConfigChannel+0x98>
 800371c:	e087      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	0011      	movs	r1, r2
 8003726:	0018      	movs	r0, r3
 8003728:	f000 f914 	bl	8003954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2108      	movs	r1, #8
 8003738:	430a      	orrs	r2, r1
 800373a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2104      	movs	r1, #4
 8003748:	438a      	bics	r2, r1
 800374a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6999      	ldr	r1, [r3, #24]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	619a      	str	r2, [r3, #24]
      break;
 800375e:	e06b      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f000 f97b 	bl	8003a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	0109      	lsls	r1, r1, #4
 800377c:	430a      	orrs	r2, r1
 800377e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4931      	ldr	r1, [pc, #196]	; (8003850 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800378c:	400a      	ands	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	619a      	str	r2, [r3, #24]
      break;
 80037a4:	e048      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	0011      	movs	r1, r2
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f9dc 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2108      	movs	r1, #8
 80037c0:	430a      	orrs	r2, r1
 80037c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2104      	movs	r1, #4
 80037d0:	438a      	bics	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69d9      	ldr	r1, [r3, #28]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	61da      	str	r2, [r3, #28]
      break;
 80037e6:	e027      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0011      	movs	r1, r2
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 fa41 	bl	8003c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	0109      	lsls	r1, r1, #4
 8003804:	430a      	orrs	r2, r1
 8003806:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	490f      	ldr	r1, [pc, #60]	; (8003850 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003814:	400a      	ands	r2, r1
 8003816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69d9      	ldr	r1, [r3, #28]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	61da      	str	r2, [r3, #28]
      break;
 800382c:	e004      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800382e:	2317      	movs	r3, #23
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
      break;
 8003836:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	223c      	movs	r2, #60	; 0x3c
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

  return status;
 8003840:	2317      	movs	r3, #23
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	fffffbff 	.word	0xfffffbff

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a34      	ldr	r2, [pc, #208]	; (8003938 <TIM_Base_SetConfig+0xe4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d008      	beq.n	800387e <TIM_Base_SetConfig+0x2a>
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	05db      	lsls	r3, r3, #23
 8003872:	429a      	cmp	r2, r3
 8003874:	d003      	beq.n	800387e <TIM_Base_SetConfig+0x2a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a30      	ldr	r2, [pc, #192]	; (800393c <TIM_Base_SetConfig+0xe8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2270      	movs	r2, #112	; 0x70
 8003882:	4393      	bics	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <TIM_Base_SetConfig+0xe4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <TIM_Base_SetConfig+0x76>
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	05db      	lsls	r3, r3, #23
 800389e:	429a      	cmp	r2, r3
 80038a0:	d013      	beq.n	80038ca <TIM_Base_SetConfig+0x76>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a25      	ldr	r2, [pc, #148]	; (800393c <TIM_Base_SetConfig+0xe8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00f      	beq.n	80038ca <TIM_Base_SetConfig+0x76>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a24      	ldr	r2, [pc, #144]	; (8003940 <TIM_Base_SetConfig+0xec>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00b      	beq.n	80038ca <TIM_Base_SetConfig+0x76>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <TIM_Base_SetConfig+0xf0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0x76>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <TIM_Base_SetConfig+0xf4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0x76>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a21      	ldr	r2, [pc, #132]	; (800394c <TIM_Base_SetConfig+0xf8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <TIM_Base_SetConfig+0xfc>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	4393      	bics	r3, r2
 80038e2:	001a      	movs	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <TIM_Base_SetConfig+0xe4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0xce>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <TIM_Base_SetConfig+0xf0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0xce>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <TIM_Base_SetConfig+0xf4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0xce>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <TIM_Base_SetConfig+0xf8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d103      	bne.n	800392a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	615a      	str	r2, [r3, #20]
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b004      	add	sp, #16
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40000400 	.word	0x40000400
 8003940:	40002000 	.word	0x40002000
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800
 8003950:	fffffcff 	.word	0xfffffcff

08003954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	2201      	movs	r2, #1
 8003964:	4393      	bics	r3, r2
 8003966:	001a      	movs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2270      	movs	r2, #112	; 0x70
 8003982:	4393      	bics	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2203      	movs	r2, #3
 800398a:	4393      	bics	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2202      	movs	r2, #2
 800399c:	4393      	bics	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <TIM_OC1_SetConfig+0xf8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_OC1_SetConfig+0x76>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <TIM_OC1_SetConfig+0xfc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_OC1_SetConfig+0x76>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a25      	ldr	r2, [pc, #148]	; (8003a54 <TIM_OC1_SetConfig+0x100>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_OC1_SetConfig+0x76>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <TIM_OC1_SetConfig+0x104>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10c      	bne.n	80039e4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2208      	movs	r2, #8
 80039ce:	4393      	bics	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2204      	movs	r2, #4
 80039e0:	4393      	bics	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <TIM_OC1_SetConfig+0xf8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00b      	beq.n	8003a04 <TIM_OC1_SetConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <TIM_OC1_SetConfig+0xfc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_OC1_SetConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <TIM_OC1_SetConfig+0x100>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC1_SetConfig+0xb0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <TIM_OC1_SetConfig+0x104>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d111      	bne.n	8003a28 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <TIM_OC1_SetConfig+0x108>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <TIM_OC1_SetConfig+0x10c>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b006      	add	sp, #24
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40014400 	.word	0x40014400
 8003a58:	40014800 	.word	0x40014800
 8003a5c:	fffffeff 	.word	0xfffffeff
 8003a60:	fffffdff 	.word	0xfffffdff

08003a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	2210      	movs	r2, #16
 8003a74:	4393      	bics	r3, r2
 8003a76:	001a      	movs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a2e      	ldr	r2, [pc, #184]	; (8003b4c <TIM_OC2_SetConfig+0xe8>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <TIM_OC2_SetConfig+0xec>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2220      	movs	r2, #32
 8003aae:	4393      	bics	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <TIM_OC2_SetConfig+0xf0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10d      	bne.n	8003ae2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	4393      	bics	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2240      	movs	r2, #64	; 0x40
 8003ade:	4393      	bics	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <TIM_OC2_SetConfig+0xf0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_OC2_SetConfig+0x9e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <TIM_OC2_SetConfig+0xf4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_OC2_SetConfig+0x9e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <TIM_OC2_SetConfig+0xf8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_OC2_SetConfig+0x9e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <TIM_OC2_SetConfig+0xfc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d113      	bne.n	8003b2a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <TIM_OC2_SetConfig+0x100>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <TIM_OC2_SetConfig+0x104>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b006      	add	sp, #24
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	ffff8fff 	.word	0xffff8fff
 8003b50:	fffffcff 	.word	0xfffffcff
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40014400 	.word	0x40014400
 8003b60:	40014800 	.word	0x40014800
 8003b64:	fffffbff 	.word	0xfffffbff
 8003b68:	fffff7ff 	.word	0xfffff7ff

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a35      	ldr	r2, [pc, #212]	; (8003c50 <TIM_OC3_SetConfig+0xe4>)
 8003b7c:	401a      	ands	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2270      	movs	r2, #112	; 0x70
 8003b98:	4393      	bics	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <TIM_OC3_SetConfig+0xe8>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <TIM_OC3_SetConfig+0xec>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10d      	bne.n	8003be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4a23      	ldr	r2, [pc, #140]	; (8003c5c <TIM_OC3_SetConfig+0xf0>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <TIM_OC3_SetConfig+0xf4>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1b      	ldr	r2, [pc, #108]	; (8003c58 <TIM_OC3_SetConfig+0xec>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <TIM_OC3_SetConfig+0x9a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <TIM_OC3_SetConfig+0xf8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <TIM_OC3_SetConfig+0x9a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <TIM_OC3_SetConfig+0xfc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_OC3_SetConfig+0x9a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <TIM_OC3_SetConfig+0x100>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d113      	bne.n	8003c2e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <TIM_OC3_SetConfig+0x104>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <TIM_OC3_SetConfig+0x108>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b006      	add	sp, #24
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	fffffeff 	.word	0xfffffeff
 8003c54:	fffffdff 	.word	0xfffffdff
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	fffff7ff 	.word	0xfffff7ff
 8003c60:	fffffbff 	.word	0xfffffbff
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	40014800 	.word	0x40014800
 8003c70:	ffffefff 	.word	0xffffefff
 8003c74:	ffffdfff 	.word	0xffffdfff

08003c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <TIM_OC4_SetConfig+0xb0>)
 8003c88:	401a      	ands	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <TIM_OC4_SetConfig+0xb4>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <TIM_OC4_SetConfig+0xb8>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <TIM_OC4_SetConfig+0xbc>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <TIM_OC4_SetConfig+0xc0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_OC4_SetConfig+0x78>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <TIM_OC4_SetConfig+0xc4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_OC4_SetConfig+0x78>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <TIM_OC4_SetConfig+0xc8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_OC4_SetConfig+0x78>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <TIM_OC4_SetConfig+0xcc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d109      	bne.n	8003d04 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <TIM_OC4_SetConfig+0xd0>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b006      	add	sp, #24
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	ffffefff 	.word	0xffffefff
 8003d2c:	ffff8fff 	.word	0xffff8fff
 8003d30:	fffffcff 	.word	0xfffffcff
 8003d34:	ffffdfff 	.word	0xffffdfff
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800
 8003d48:	ffffbfff 	.word	0xffffbfff

08003d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	221f      	movs	r2, #31
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2201      	movs	r2, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	0013      	movs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	43d2      	mvns	r2, r2
 8003d6e:	401a      	ands	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	211f      	movs	r1, #31
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4099      	lsls	r1, r3
 8003d82:	000b      	movs	r3, r1
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b006      	add	sp, #24
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223c      	movs	r2, #60	; 0x3c
 8003da2:	5c9b      	ldrb	r3, [r3, r2]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e047      	b.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	223c      	movs	r2, #60	; 0x3c
 8003db0:	2101      	movs	r1, #1
 8003db2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	223d      	movs	r2, #61	; 0x3d
 8003db8:	2102      	movs	r1, #2
 8003dba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2270      	movs	r2, #112	; 0x70
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00f      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	05db      	lsls	r3, r3, #23
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d009      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a11      	ldr	r2, [pc, #68]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10c      	bne.n	8003e2a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	4393      	bics	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	223d      	movs	r2, #61	; 0x3d
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223c      	movs	r2, #60	; 0x3c
 8003e36:	2100      	movs	r1, #0
 8003e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40014000 	.word	0x40014000

08003e50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	223c      	movs	r2, #60	; 0x3c
 8003e62:	5c9b      	ldrb	r3, [r3, r2]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e03e      	b.n	8003eea <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223c      	movs	r2, #60	; 0x3c
 8003e70:	2101      	movs	r1, #1
 8003e72:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	22ff      	movs	r2, #255	; 0xff
 8003e78:	4393      	bics	r3, r2
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e88:	401a      	ands	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003e96:	401a      	ands	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003ece:	401a      	ands	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	223c      	movs	r2, #60	; 0x3c
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b004      	add	sp, #16
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	fffffcff 	.word	0xfffffcff
 8003ef8:	fffffbff 	.word	0xfffffbff
 8003efc:	fffff7ff 	.word	0xfffff7ff
 8003f00:	ffffefff 	.word	0xffffefff
 8003f04:	ffffdfff 	.word	0xffffdfff
 8003f08:	ffffbfff 	.word	0xffffbfff

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	2600      	movs	r6, #0
 8003f10:	4d0c      	ldr	r5, [pc, #48]	; (8003f44 <__libc_init_array+0x38>)
 8003f12:	4c0d      	ldr	r4, [pc, #52]	; (8003f48 <__libc_init_array+0x3c>)
 8003f14:	1b64      	subs	r4, r4, r5
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	f000 f821 	bl	8003f64 <_init>
 8003f22:	4d0a      	ldr	r5, [pc, #40]	; (8003f4c <__libc_init_array+0x40>)
 8003f24:	4c0a      	ldr	r4, [pc, #40]	; (8003f50 <__libc_init_array+0x44>)
 8003f26:	1b64      	subs	r4, r4, r5
 8003f28:	10a4      	asrs	r4, r4, #2
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	00b3      	lsls	r3, r6, #2
 8003f32:	58eb      	ldr	r3, [r5, r3]
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	00b3      	lsls	r3, r6, #2
 8003f3c:	58eb      	ldr	r3, [r5, r3]
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	08004b08 	.word	0x08004b08
 8003f48:	08004b08 	.word	0x08004b08
 8003f4c:	08004b08 	.word	0x08004b08
 8003f50:	08004b0c 	.word	0x08004b0c

08003f54 <memset>:
 8003f54:	0003      	movs	r3, r0
 8003f56:	1882      	adds	r2, r0, r2
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <memset+0xa>
 8003f5c:	4770      	bx	lr
 8003f5e:	7019      	strb	r1, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	e7f9      	b.n	8003f58 <memset+0x4>

08003f64 <_init>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr

08003f70 <_fini>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr
