
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007ac0  08007ac0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ac0  08007ac0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000088  08007b50  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08007b50  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f57  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002789  00000000  00000000  00032007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00034790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b840  00000000  00000000  00036868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f52  00000000  00000000  000520a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa4c5  00000000  00000000  00065ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001104bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004030  00000000  00000000  00110514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006e40 	.word	0x08006e40

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08006e40 	.word	0x08006e40

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_d2uiz>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	2200      	movs	r2, #0
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <__aeabi_d2uiz+0x38>)
 80003f6:	0004      	movs	r4, r0
 80003f8:	000d      	movs	r5, r1
 80003fa:	f001 f997 	bl	800172c <__aeabi_dcmpge>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d104      	bne.n	800040c <__aeabi_d2uiz+0x1c>
 8000402:	0020      	movs	r0, r4
 8000404:	0029      	movs	r1, r5
 8000406:	f001 f8f7 	bl	80015f8 <__aeabi_d2iz>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <__aeabi_d2uiz+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	0020      	movs	r0, r4
 8000412:	0029      	movs	r1, r5
 8000414:	f000 fd5e 	bl	8000ed4 <__aeabi_dsub>
 8000418:	f001 f8ee 	bl	80015f8 <__aeabi_d2iz>
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	061b      	lsls	r3, r3, #24
 8000420:	469c      	mov	ip, r3
 8000422:	4460      	add	r0, ip
 8000424:	e7f1      	b.n	800040a <__aeabi_d2uiz+0x1a>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	41e00000 	.word	0x41e00000

0800042c <__aeabi_ddiv>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	b5e0      	push	{r5, r6, r7, lr}
 8000438:	4681      	mov	r9, r0
 800043a:	0005      	movs	r5, r0
 800043c:	030c      	lsls	r4, r1, #12
 800043e:	0048      	lsls	r0, r1, #1
 8000440:	4692      	mov	sl, r2
 8000442:	001f      	movs	r7, r3
 8000444:	b085      	sub	sp, #20
 8000446:	0b24      	lsrs	r4, r4, #12
 8000448:	0d40      	lsrs	r0, r0, #21
 800044a:	0fce      	lsrs	r6, r1, #31
 800044c:	2800      	cmp	r0, #0
 800044e:	d059      	beq.n	8000504 <__aeabi_ddiv+0xd8>
 8000450:	4b87      	ldr	r3, [pc, #540]	; (8000670 <__aeabi_ddiv+0x244>)
 8000452:	4298      	cmp	r0, r3
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x2c>
 8000456:	e098      	b.n	800058a <__aeabi_ddiv+0x15e>
 8000458:	0f6b      	lsrs	r3, r5, #29
 800045a:	00e4      	lsls	r4, r4, #3
 800045c:	431c      	orrs	r4, r3
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	041b      	lsls	r3, r3, #16
 8000462:	4323      	orrs	r3, r4
 8000464:	4698      	mov	r8, r3
 8000466:	4b83      	ldr	r3, [pc, #524]	; (8000674 <__aeabi_ddiv+0x248>)
 8000468:	00ed      	lsls	r5, r5, #3
 800046a:	469b      	mov	fp, r3
 800046c:	2300      	movs	r3, #0
 800046e:	4699      	mov	r9, r3
 8000470:	4483      	add	fp, r0
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	033c      	lsls	r4, r7, #12
 8000476:	007b      	lsls	r3, r7, #1
 8000478:	4650      	mov	r0, sl
 800047a:	0b24      	lsrs	r4, r4, #12
 800047c:	0d5b      	lsrs	r3, r3, #21
 800047e:	0fff      	lsrs	r7, r7, #31
 8000480:	2b00      	cmp	r3, #0
 8000482:	d067      	beq.n	8000554 <__aeabi_ddiv+0x128>
 8000484:	4a7a      	ldr	r2, [pc, #488]	; (8000670 <__aeabi_ddiv+0x244>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d018      	beq.n	80004bc <__aeabi_ddiv+0x90>
 800048a:	497a      	ldr	r1, [pc, #488]	; (8000674 <__aeabi_ddiv+0x248>)
 800048c:	0f42      	lsrs	r2, r0, #29
 800048e:	468c      	mov	ip, r1
 8000490:	00e4      	lsls	r4, r4, #3
 8000492:	4659      	mov	r1, fp
 8000494:	4314      	orrs	r4, r2
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	4463      	add	r3, ip
 800049a:	0412      	lsls	r2, r2, #16
 800049c:	1acb      	subs	r3, r1, r3
 800049e:	4314      	orrs	r4, r2
 80004a0:	469b      	mov	fp, r3
 80004a2:	00c2      	lsls	r2, r0, #3
 80004a4:	2000      	movs	r0, #0
 80004a6:	0033      	movs	r3, r6
 80004a8:	407b      	eors	r3, r7
 80004aa:	469a      	mov	sl, r3
 80004ac:	464b      	mov	r3, r9
 80004ae:	2b0f      	cmp	r3, #15
 80004b0:	d900      	bls.n	80004b4 <__aeabi_ddiv+0x88>
 80004b2:	e0ef      	b.n	8000694 <__aeabi_ddiv+0x268>
 80004b4:	4970      	ldr	r1, [pc, #448]	; (8000678 <__aeabi_ddiv+0x24c>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	58cb      	ldr	r3, [r1, r3]
 80004ba:	469f      	mov	pc, r3
 80004bc:	4b6f      	ldr	r3, [pc, #444]	; (800067c <__aeabi_ddiv+0x250>)
 80004be:	4652      	mov	r2, sl
 80004c0:	469c      	mov	ip, r3
 80004c2:	4322      	orrs	r2, r4
 80004c4:	44e3      	add	fp, ip
 80004c6:	2a00      	cmp	r2, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_ddiv+0xa0>
 80004ca:	e095      	b.n	80005f8 <__aeabi_ddiv+0x1cc>
 80004cc:	4649      	mov	r1, r9
 80004ce:	2302      	movs	r3, #2
 80004d0:	4319      	orrs	r1, r3
 80004d2:	4689      	mov	r9, r1
 80004d4:	2400      	movs	r4, #0
 80004d6:	2002      	movs	r0, #2
 80004d8:	e7e5      	b.n	80004a6 <__aeabi_ddiv+0x7a>
 80004da:	2300      	movs	r3, #0
 80004dc:	2400      	movs	r4, #0
 80004de:	2500      	movs	r5, #0
 80004e0:	4652      	mov	r2, sl
 80004e2:	051b      	lsls	r3, r3, #20
 80004e4:	4323      	orrs	r3, r4
 80004e6:	07d2      	lsls	r2, r2, #31
 80004e8:	4313      	orrs	r3, r2
 80004ea:	0028      	movs	r0, r5
 80004ec:	0019      	movs	r1, r3
 80004ee:	b005      	add	sp, #20
 80004f0:	bcf0      	pop	{r4, r5, r6, r7}
 80004f2:	46bb      	mov	fp, r7
 80004f4:	46b2      	mov	sl, r6
 80004f6:	46a9      	mov	r9, r5
 80004f8:	46a0      	mov	r8, r4
 80004fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fc:	2400      	movs	r4, #0
 80004fe:	2500      	movs	r5, #0
 8000500:	4b5b      	ldr	r3, [pc, #364]	; (8000670 <__aeabi_ddiv+0x244>)
 8000502:	e7ed      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 8000504:	464b      	mov	r3, r9
 8000506:	4323      	orrs	r3, r4
 8000508:	4698      	mov	r8, r3
 800050a:	d100      	bne.n	800050e <__aeabi_ddiv+0xe2>
 800050c:	e089      	b.n	8000622 <__aeabi_ddiv+0x1f6>
 800050e:	2c00      	cmp	r4, #0
 8000510:	d100      	bne.n	8000514 <__aeabi_ddiv+0xe8>
 8000512:	e1e0      	b.n	80008d6 <__aeabi_ddiv+0x4aa>
 8000514:	0020      	movs	r0, r4
 8000516:	f001 f913 	bl	8001740 <__clzsi2>
 800051a:	0001      	movs	r1, r0
 800051c:	0002      	movs	r2, r0
 800051e:	390b      	subs	r1, #11
 8000520:	231d      	movs	r3, #29
 8000522:	1a5b      	subs	r3, r3, r1
 8000524:	4649      	mov	r1, r9
 8000526:	0010      	movs	r0, r2
 8000528:	40d9      	lsrs	r1, r3
 800052a:	3808      	subs	r0, #8
 800052c:	4084      	lsls	r4, r0
 800052e:	000b      	movs	r3, r1
 8000530:	464d      	mov	r5, r9
 8000532:	4323      	orrs	r3, r4
 8000534:	4698      	mov	r8, r3
 8000536:	4085      	lsls	r5, r0
 8000538:	4851      	ldr	r0, [pc, #324]	; (8000680 <__aeabi_ddiv+0x254>)
 800053a:	033c      	lsls	r4, r7, #12
 800053c:	1a83      	subs	r3, r0, r2
 800053e:	469b      	mov	fp, r3
 8000540:	2300      	movs	r3, #0
 8000542:	4699      	mov	r9, r3
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	007b      	lsls	r3, r7, #1
 8000548:	4650      	mov	r0, sl
 800054a:	0b24      	lsrs	r4, r4, #12
 800054c:	0d5b      	lsrs	r3, r3, #21
 800054e:	0fff      	lsrs	r7, r7, #31
 8000550:	2b00      	cmp	r3, #0
 8000552:	d197      	bne.n	8000484 <__aeabi_ddiv+0x58>
 8000554:	4652      	mov	r2, sl
 8000556:	4322      	orrs	r2, r4
 8000558:	d055      	beq.n	8000606 <__aeabi_ddiv+0x1da>
 800055a:	2c00      	cmp	r4, #0
 800055c:	d100      	bne.n	8000560 <__aeabi_ddiv+0x134>
 800055e:	e1ca      	b.n	80008f6 <__aeabi_ddiv+0x4ca>
 8000560:	0020      	movs	r0, r4
 8000562:	f001 f8ed 	bl	8001740 <__clzsi2>
 8000566:	0002      	movs	r2, r0
 8000568:	3a0b      	subs	r2, #11
 800056a:	231d      	movs	r3, #29
 800056c:	0001      	movs	r1, r0
 800056e:	1a9b      	subs	r3, r3, r2
 8000570:	4652      	mov	r2, sl
 8000572:	3908      	subs	r1, #8
 8000574:	40da      	lsrs	r2, r3
 8000576:	408c      	lsls	r4, r1
 8000578:	4314      	orrs	r4, r2
 800057a:	4652      	mov	r2, sl
 800057c:	408a      	lsls	r2, r1
 800057e:	4b41      	ldr	r3, [pc, #260]	; (8000684 <__aeabi_ddiv+0x258>)
 8000580:	4458      	add	r0, fp
 8000582:	469b      	mov	fp, r3
 8000584:	4483      	add	fp, r0
 8000586:	2000      	movs	r0, #0
 8000588:	e78d      	b.n	80004a6 <__aeabi_ddiv+0x7a>
 800058a:	464b      	mov	r3, r9
 800058c:	4323      	orrs	r3, r4
 800058e:	4698      	mov	r8, r3
 8000590:	d140      	bne.n	8000614 <__aeabi_ddiv+0x1e8>
 8000592:	2308      	movs	r3, #8
 8000594:	4699      	mov	r9, r3
 8000596:	3b06      	subs	r3, #6
 8000598:	2500      	movs	r5, #0
 800059a:	4683      	mov	fp, r0
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	e769      	b.n	8000474 <__aeabi_ddiv+0x48>
 80005a0:	46b2      	mov	sl, r6
 80005a2:	9b00      	ldr	r3, [sp, #0]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d0a9      	beq.n	80004fc <__aeabi_ddiv+0xd0>
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d100      	bne.n	80005ae <__aeabi_ddiv+0x182>
 80005ac:	e211      	b.n	80009d2 <__aeabi_ddiv+0x5a6>
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d093      	beq.n	80004da <__aeabi_ddiv+0xae>
 80005b2:	4a35      	ldr	r2, [pc, #212]	; (8000688 <__aeabi_ddiv+0x25c>)
 80005b4:	445a      	add	r2, fp
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	dc00      	bgt.n	80005bc <__aeabi_ddiv+0x190>
 80005ba:	e13c      	b.n	8000836 <__aeabi_ddiv+0x40a>
 80005bc:	076b      	lsls	r3, r5, #29
 80005be:	d000      	beq.n	80005c2 <__aeabi_ddiv+0x196>
 80005c0:	e1a7      	b.n	8000912 <__aeabi_ddiv+0x4e6>
 80005c2:	08ed      	lsrs	r5, r5, #3
 80005c4:	4643      	mov	r3, r8
 80005c6:	01db      	lsls	r3, r3, #7
 80005c8:	d506      	bpl.n	80005d8 <__aeabi_ddiv+0x1ac>
 80005ca:	4642      	mov	r2, r8
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <__aeabi_ddiv+0x260>)
 80005ce:	401a      	ands	r2, r3
 80005d0:	4690      	mov	r8, r2
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	00d2      	lsls	r2, r2, #3
 80005d6:	445a      	add	r2, fp
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <__aeabi_ddiv+0x264>)
 80005da:	429a      	cmp	r2, r3
 80005dc:	dc8e      	bgt.n	80004fc <__aeabi_ddiv+0xd0>
 80005de:	4643      	mov	r3, r8
 80005e0:	0552      	lsls	r2, r2, #21
 80005e2:	0758      	lsls	r0, r3, #29
 80005e4:	025c      	lsls	r4, r3, #9
 80005e6:	4305      	orrs	r5, r0
 80005e8:	0b24      	lsrs	r4, r4, #12
 80005ea:	0d53      	lsrs	r3, r2, #21
 80005ec:	e778      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 80005ee:	46ba      	mov	sl, r7
 80005f0:	46a0      	mov	r8, r4
 80005f2:	0015      	movs	r5, r2
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	e7d4      	b.n	80005a2 <__aeabi_ddiv+0x176>
 80005f8:	464a      	mov	r2, r9
 80005fa:	2303      	movs	r3, #3
 80005fc:	431a      	orrs	r2, r3
 80005fe:	4691      	mov	r9, r2
 8000600:	2003      	movs	r0, #3
 8000602:	4652      	mov	r2, sl
 8000604:	e74f      	b.n	80004a6 <__aeabi_ddiv+0x7a>
 8000606:	4649      	mov	r1, r9
 8000608:	2301      	movs	r3, #1
 800060a:	4319      	orrs	r1, r3
 800060c:	4689      	mov	r9, r1
 800060e:	2400      	movs	r4, #0
 8000610:	2001      	movs	r0, #1
 8000612:	e748      	b.n	80004a6 <__aeabi_ddiv+0x7a>
 8000614:	230c      	movs	r3, #12
 8000616:	4699      	mov	r9, r3
 8000618:	3b09      	subs	r3, #9
 800061a:	46a0      	mov	r8, r4
 800061c:	4683      	mov	fp, r0
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	e728      	b.n	8000474 <__aeabi_ddiv+0x48>
 8000622:	2304      	movs	r3, #4
 8000624:	4699      	mov	r9, r3
 8000626:	2300      	movs	r3, #0
 8000628:	469b      	mov	fp, r3
 800062a:	3301      	adds	r3, #1
 800062c:	2500      	movs	r5, #0
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	e720      	b.n	8000474 <__aeabi_ddiv+0x48>
 8000632:	2300      	movs	r3, #0
 8000634:	2480      	movs	r4, #128	; 0x80
 8000636:	469a      	mov	sl, r3
 8000638:	2500      	movs	r5, #0
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <__aeabi_ddiv+0x244>)
 800063c:	0324      	lsls	r4, r4, #12
 800063e:	e74f      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	4641      	mov	r1, r8
 8000644:	031b      	lsls	r3, r3, #12
 8000646:	4219      	tst	r1, r3
 8000648:	d008      	beq.n	800065c <__aeabi_ddiv+0x230>
 800064a:	421c      	tst	r4, r3
 800064c:	d106      	bne.n	800065c <__aeabi_ddiv+0x230>
 800064e:	431c      	orrs	r4, r3
 8000650:	0324      	lsls	r4, r4, #12
 8000652:	46ba      	mov	sl, r7
 8000654:	0015      	movs	r5, r2
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__aeabi_ddiv+0x244>)
 8000658:	0b24      	lsrs	r4, r4, #12
 800065a:	e741      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 800065c:	2480      	movs	r4, #128	; 0x80
 800065e:	4643      	mov	r3, r8
 8000660:	0324      	lsls	r4, r4, #12
 8000662:	431c      	orrs	r4, r3
 8000664:	0324      	lsls	r4, r4, #12
 8000666:	46b2      	mov	sl, r6
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <__aeabi_ddiv+0x244>)
 800066a:	0b24      	lsrs	r4, r4, #12
 800066c:	e738      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	000007ff 	.word	0x000007ff
 8000674:	fffffc01 	.word	0xfffffc01
 8000678:	08006fcc 	.word	0x08006fcc
 800067c:	fffff801 	.word	0xfffff801
 8000680:	fffffc0d 	.word	0xfffffc0d
 8000684:	000003f3 	.word	0x000003f3
 8000688:	000003ff 	.word	0x000003ff
 800068c:	feffffff 	.word	0xfeffffff
 8000690:	000007fe 	.word	0x000007fe
 8000694:	4544      	cmp	r4, r8
 8000696:	d200      	bcs.n	800069a <__aeabi_ddiv+0x26e>
 8000698:	e116      	b.n	80008c8 <__aeabi_ddiv+0x49c>
 800069a:	d100      	bne.n	800069e <__aeabi_ddiv+0x272>
 800069c:	e111      	b.n	80008c2 <__aeabi_ddiv+0x496>
 800069e:	2301      	movs	r3, #1
 80006a0:	425b      	negs	r3, r3
 80006a2:	469c      	mov	ip, r3
 80006a4:	002e      	movs	r6, r5
 80006a6:	4640      	mov	r0, r8
 80006a8:	2500      	movs	r5, #0
 80006aa:	44e3      	add	fp, ip
 80006ac:	0223      	lsls	r3, r4, #8
 80006ae:	0e14      	lsrs	r4, r2, #24
 80006b0:	431c      	orrs	r4, r3
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	4699      	mov	r9, r3
 80006b6:	0423      	lsls	r3, r4, #16
 80006b8:	0c1f      	lsrs	r7, r3, #16
 80006ba:	0212      	lsls	r2, r2, #8
 80006bc:	4649      	mov	r1, r9
 80006be:	9200      	str	r2, [sp, #0]
 80006c0:	9701      	str	r7, [sp, #4]
 80006c2:	f7ff fda5 	bl	8000210 <__aeabi_uidivmod>
 80006c6:	0002      	movs	r2, r0
 80006c8:	437a      	muls	r2, r7
 80006ca:	040b      	lsls	r3, r1, #16
 80006cc:	0c31      	lsrs	r1, r6, #16
 80006ce:	4680      	mov	r8, r0
 80006d0:	4319      	orrs	r1, r3
 80006d2:	428a      	cmp	r2, r1
 80006d4:	d90b      	bls.n	80006ee <__aeabi_ddiv+0x2c2>
 80006d6:	2301      	movs	r3, #1
 80006d8:	425b      	negs	r3, r3
 80006da:	469c      	mov	ip, r3
 80006dc:	1909      	adds	r1, r1, r4
 80006de:	44e0      	add	r8, ip
 80006e0:	428c      	cmp	r4, r1
 80006e2:	d804      	bhi.n	80006ee <__aeabi_ddiv+0x2c2>
 80006e4:	428a      	cmp	r2, r1
 80006e6:	d902      	bls.n	80006ee <__aeabi_ddiv+0x2c2>
 80006e8:	1e83      	subs	r3, r0, #2
 80006ea:	4698      	mov	r8, r3
 80006ec:	1909      	adds	r1, r1, r4
 80006ee:	1a88      	subs	r0, r1, r2
 80006f0:	4649      	mov	r1, r9
 80006f2:	f7ff fd8d 	bl	8000210 <__aeabi_uidivmod>
 80006f6:	0409      	lsls	r1, r1, #16
 80006f8:	468c      	mov	ip, r1
 80006fa:	0431      	lsls	r1, r6, #16
 80006fc:	4666      	mov	r6, ip
 80006fe:	9a01      	ldr	r2, [sp, #4]
 8000700:	0c09      	lsrs	r1, r1, #16
 8000702:	4342      	muls	r2, r0
 8000704:	0003      	movs	r3, r0
 8000706:	4331      	orrs	r1, r6
 8000708:	428a      	cmp	r2, r1
 800070a:	d904      	bls.n	8000716 <__aeabi_ddiv+0x2ea>
 800070c:	1909      	adds	r1, r1, r4
 800070e:	3b01      	subs	r3, #1
 8000710:	428c      	cmp	r4, r1
 8000712:	d800      	bhi.n	8000716 <__aeabi_ddiv+0x2ea>
 8000714:	e111      	b.n	800093a <__aeabi_ddiv+0x50e>
 8000716:	1a89      	subs	r1, r1, r2
 8000718:	4642      	mov	r2, r8
 800071a:	9e00      	ldr	r6, [sp, #0]
 800071c:	0412      	lsls	r2, r2, #16
 800071e:	431a      	orrs	r2, r3
 8000720:	0c33      	lsrs	r3, r6, #16
 8000722:	001f      	movs	r7, r3
 8000724:	0c10      	lsrs	r0, r2, #16
 8000726:	4690      	mov	r8, r2
 8000728:	9302      	str	r3, [sp, #8]
 800072a:	0413      	lsls	r3, r2, #16
 800072c:	0432      	lsls	r2, r6, #16
 800072e:	0c16      	lsrs	r6, r2, #16
 8000730:	0032      	movs	r2, r6
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	435a      	muls	r2, r3
 8000736:	9603      	str	r6, [sp, #12]
 8000738:	437b      	muls	r3, r7
 800073a:	4346      	muls	r6, r0
 800073c:	4378      	muls	r0, r7
 800073e:	0c17      	lsrs	r7, r2, #16
 8000740:	46bc      	mov	ip, r7
 8000742:	199b      	adds	r3, r3, r6
 8000744:	4463      	add	r3, ip
 8000746:	429e      	cmp	r6, r3
 8000748:	d903      	bls.n	8000752 <__aeabi_ddiv+0x326>
 800074a:	2680      	movs	r6, #128	; 0x80
 800074c:	0276      	lsls	r6, r6, #9
 800074e:	46b4      	mov	ip, r6
 8000750:	4460      	add	r0, ip
 8000752:	0c1e      	lsrs	r6, r3, #16
 8000754:	1830      	adds	r0, r6, r0
 8000756:	0416      	lsls	r6, r2, #16
 8000758:	041b      	lsls	r3, r3, #16
 800075a:	0c36      	lsrs	r6, r6, #16
 800075c:	199e      	adds	r6, r3, r6
 800075e:	4281      	cmp	r1, r0
 8000760:	d200      	bcs.n	8000764 <__aeabi_ddiv+0x338>
 8000762:	e09c      	b.n	800089e <__aeabi_ddiv+0x472>
 8000764:	d100      	bne.n	8000768 <__aeabi_ddiv+0x33c>
 8000766:	e097      	b.n	8000898 <__aeabi_ddiv+0x46c>
 8000768:	1bae      	subs	r6, r5, r6
 800076a:	1a09      	subs	r1, r1, r0
 800076c:	42b5      	cmp	r5, r6
 800076e:	4180      	sbcs	r0, r0
 8000770:	4240      	negs	r0, r0
 8000772:	1a08      	subs	r0, r1, r0
 8000774:	4284      	cmp	r4, r0
 8000776:	d100      	bne.n	800077a <__aeabi_ddiv+0x34e>
 8000778:	e111      	b.n	800099e <__aeabi_ddiv+0x572>
 800077a:	4649      	mov	r1, r9
 800077c:	f7ff fd48 	bl	8000210 <__aeabi_uidivmod>
 8000780:	9a01      	ldr	r2, [sp, #4]
 8000782:	040b      	lsls	r3, r1, #16
 8000784:	4342      	muls	r2, r0
 8000786:	0c31      	lsrs	r1, r6, #16
 8000788:	0005      	movs	r5, r0
 800078a:	4319      	orrs	r1, r3
 800078c:	428a      	cmp	r2, r1
 800078e:	d907      	bls.n	80007a0 <__aeabi_ddiv+0x374>
 8000790:	1909      	adds	r1, r1, r4
 8000792:	3d01      	subs	r5, #1
 8000794:	428c      	cmp	r4, r1
 8000796:	d803      	bhi.n	80007a0 <__aeabi_ddiv+0x374>
 8000798:	428a      	cmp	r2, r1
 800079a:	d901      	bls.n	80007a0 <__aeabi_ddiv+0x374>
 800079c:	1e85      	subs	r5, r0, #2
 800079e:	1909      	adds	r1, r1, r4
 80007a0:	1a88      	subs	r0, r1, r2
 80007a2:	4649      	mov	r1, r9
 80007a4:	f7ff fd34 	bl	8000210 <__aeabi_uidivmod>
 80007a8:	0409      	lsls	r1, r1, #16
 80007aa:	468c      	mov	ip, r1
 80007ac:	0431      	lsls	r1, r6, #16
 80007ae:	4666      	mov	r6, ip
 80007b0:	9a01      	ldr	r2, [sp, #4]
 80007b2:	0c09      	lsrs	r1, r1, #16
 80007b4:	4342      	muls	r2, r0
 80007b6:	0003      	movs	r3, r0
 80007b8:	4331      	orrs	r1, r6
 80007ba:	428a      	cmp	r2, r1
 80007bc:	d907      	bls.n	80007ce <__aeabi_ddiv+0x3a2>
 80007be:	1909      	adds	r1, r1, r4
 80007c0:	3b01      	subs	r3, #1
 80007c2:	428c      	cmp	r4, r1
 80007c4:	d803      	bhi.n	80007ce <__aeabi_ddiv+0x3a2>
 80007c6:	428a      	cmp	r2, r1
 80007c8:	d901      	bls.n	80007ce <__aeabi_ddiv+0x3a2>
 80007ca:	1e83      	subs	r3, r0, #2
 80007cc:	1909      	adds	r1, r1, r4
 80007ce:	9e03      	ldr	r6, [sp, #12]
 80007d0:	1a89      	subs	r1, r1, r2
 80007d2:	0032      	movs	r2, r6
 80007d4:	042d      	lsls	r5, r5, #16
 80007d6:	431d      	orrs	r5, r3
 80007d8:	9f02      	ldr	r7, [sp, #8]
 80007da:	042b      	lsls	r3, r5, #16
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	435a      	muls	r2, r3
 80007e0:	437b      	muls	r3, r7
 80007e2:	469c      	mov	ip, r3
 80007e4:	0c28      	lsrs	r0, r5, #16
 80007e6:	4346      	muls	r6, r0
 80007e8:	0c13      	lsrs	r3, r2, #16
 80007ea:	44b4      	add	ip, r6
 80007ec:	4463      	add	r3, ip
 80007ee:	4378      	muls	r0, r7
 80007f0:	429e      	cmp	r6, r3
 80007f2:	d903      	bls.n	80007fc <__aeabi_ddiv+0x3d0>
 80007f4:	2680      	movs	r6, #128	; 0x80
 80007f6:	0276      	lsls	r6, r6, #9
 80007f8:	46b4      	mov	ip, r6
 80007fa:	4460      	add	r0, ip
 80007fc:	0c1e      	lsrs	r6, r3, #16
 80007fe:	0412      	lsls	r2, r2, #16
 8000800:	041b      	lsls	r3, r3, #16
 8000802:	0c12      	lsrs	r2, r2, #16
 8000804:	1830      	adds	r0, r6, r0
 8000806:	189b      	adds	r3, r3, r2
 8000808:	4281      	cmp	r1, r0
 800080a:	d306      	bcc.n	800081a <__aeabi_ddiv+0x3ee>
 800080c:	d002      	beq.n	8000814 <__aeabi_ddiv+0x3e8>
 800080e:	2301      	movs	r3, #1
 8000810:	431d      	orrs	r5, r3
 8000812:	e6ce      	b.n	80005b2 <__aeabi_ddiv+0x186>
 8000814:	2b00      	cmp	r3, #0
 8000816:	d100      	bne.n	800081a <__aeabi_ddiv+0x3ee>
 8000818:	e6cb      	b.n	80005b2 <__aeabi_ddiv+0x186>
 800081a:	1861      	adds	r1, r4, r1
 800081c:	1e6e      	subs	r6, r5, #1
 800081e:	42a1      	cmp	r1, r4
 8000820:	d200      	bcs.n	8000824 <__aeabi_ddiv+0x3f8>
 8000822:	e0a4      	b.n	800096e <__aeabi_ddiv+0x542>
 8000824:	4281      	cmp	r1, r0
 8000826:	d200      	bcs.n	800082a <__aeabi_ddiv+0x3fe>
 8000828:	e0c9      	b.n	80009be <__aeabi_ddiv+0x592>
 800082a:	d100      	bne.n	800082e <__aeabi_ddiv+0x402>
 800082c:	e0d9      	b.n	80009e2 <__aeabi_ddiv+0x5b6>
 800082e:	0035      	movs	r5, r6
 8000830:	e7ed      	b.n	800080e <__aeabi_ddiv+0x3e2>
 8000832:	2501      	movs	r5, #1
 8000834:	426d      	negs	r5, r5
 8000836:	2101      	movs	r1, #1
 8000838:	1a89      	subs	r1, r1, r2
 800083a:	2938      	cmp	r1, #56	; 0x38
 800083c:	dd00      	ble.n	8000840 <__aeabi_ddiv+0x414>
 800083e:	e64c      	b.n	80004da <__aeabi_ddiv+0xae>
 8000840:	291f      	cmp	r1, #31
 8000842:	dc00      	bgt.n	8000846 <__aeabi_ddiv+0x41a>
 8000844:	e07f      	b.n	8000946 <__aeabi_ddiv+0x51a>
 8000846:	231f      	movs	r3, #31
 8000848:	425b      	negs	r3, r3
 800084a:	1a9a      	subs	r2, r3, r2
 800084c:	4643      	mov	r3, r8
 800084e:	40d3      	lsrs	r3, r2
 8000850:	2920      	cmp	r1, #32
 8000852:	d004      	beq.n	800085e <__aeabi_ddiv+0x432>
 8000854:	4644      	mov	r4, r8
 8000856:	4a65      	ldr	r2, [pc, #404]	; (80009ec <__aeabi_ddiv+0x5c0>)
 8000858:	445a      	add	r2, fp
 800085a:	4094      	lsls	r4, r2
 800085c:	4325      	orrs	r5, r4
 800085e:	1e6a      	subs	r2, r5, #1
 8000860:	4195      	sbcs	r5, r2
 8000862:	2207      	movs	r2, #7
 8000864:	432b      	orrs	r3, r5
 8000866:	0015      	movs	r5, r2
 8000868:	2400      	movs	r4, #0
 800086a:	401d      	ands	r5, r3
 800086c:	421a      	tst	r2, r3
 800086e:	d100      	bne.n	8000872 <__aeabi_ddiv+0x446>
 8000870:	e0a1      	b.n	80009b6 <__aeabi_ddiv+0x58a>
 8000872:	220f      	movs	r2, #15
 8000874:	2400      	movs	r4, #0
 8000876:	401a      	ands	r2, r3
 8000878:	2a04      	cmp	r2, #4
 800087a:	d100      	bne.n	800087e <__aeabi_ddiv+0x452>
 800087c:	e098      	b.n	80009b0 <__aeabi_ddiv+0x584>
 800087e:	1d1a      	adds	r2, r3, #4
 8000880:	429a      	cmp	r2, r3
 8000882:	419b      	sbcs	r3, r3
 8000884:	425b      	negs	r3, r3
 8000886:	18e4      	adds	r4, r4, r3
 8000888:	0013      	movs	r3, r2
 800088a:	0222      	lsls	r2, r4, #8
 800088c:	d400      	bmi.n	8000890 <__aeabi_ddiv+0x464>
 800088e:	e08f      	b.n	80009b0 <__aeabi_ddiv+0x584>
 8000890:	2301      	movs	r3, #1
 8000892:	2400      	movs	r4, #0
 8000894:	2500      	movs	r5, #0
 8000896:	e623      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 8000898:	42b5      	cmp	r5, r6
 800089a:	d300      	bcc.n	800089e <__aeabi_ddiv+0x472>
 800089c:	e764      	b.n	8000768 <__aeabi_ddiv+0x33c>
 800089e:	4643      	mov	r3, r8
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	9b00      	ldr	r3, [sp, #0]
 80008a4:	469c      	mov	ip, r3
 80008a6:	4465      	add	r5, ip
 80008a8:	001f      	movs	r7, r3
 80008aa:	429d      	cmp	r5, r3
 80008ac:	419b      	sbcs	r3, r3
 80008ae:	425b      	negs	r3, r3
 80008b0:	191b      	adds	r3, r3, r4
 80008b2:	18c9      	adds	r1, r1, r3
 80008b4:	428c      	cmp	r4, r1
 80008b6:	d23a      	bcs.n	800092e <__aeabi_ddiv+0x502>
 80008b8:	4288      	cmp	r0, r1
 80008ba:	d863      	bhi.n	8000984 <__aeabi_ddiv+0x558>
 80008bc:	d060      	beq.n	8000980 <__aeabi_ddiv+0x554>
 80008be:	4690      	mov	r8, r2
 80008c0:	e752      	b.n	8000768 <__aeabi_ddiv+0x33c>
 80008c2:	42aa      	cmp	r2, r5
 80008c4:	d900      	bls.n	80008c8 <__aeabi_ddiv+0x49c>
 80008c6:	e6ea      	b.n	800069e <__aeabi_ddiv+0x272>
 80008c8:	4643      	mov	r3, r8
 80008ca:	07de      	lsls	r6, r3, #31
 80008cc:	0858      	lsrs	r0, r3, #1
 80008ce:	086b      	lsrs	r3, r5, #1
 80008d0:	431e      	orrs	r6, r3
 80008d2:	07ed      	lsls	r5, r5, #31
 80008d4:	e6ea      	b.n	80006ac <__aeabi_ddiv+0x280>
 80008d6:	4648      	mov	r0, r9
 80008d8:	f000 ff32 	bl	8001740 <__clzsi2>
 80008dc:	0001      	movs	r1, r0
 80008de:	0002      	movs	r2, r0
 80008e0:	3115      	adds	r1, #21
 80008e2:	3220      	adds	r2, #32
 80008e4:	291c      	cmp	r1, #28
 80008e6:	dc00      	bgt.n	80008ea <__aeabi_ddiv+0x4be>
 80008e8:	e61a      	b.n	8000520 <__aeabi_ddiv+0xf4>
 80008ea:	464b      	mov	r3, r9
 80008ec:	3808      	subs	r0, #8
 80008ee:	4083      	lsls	r3, r0
 80008f0:	2500      	movs	r5, #0
 80008f2:	4698      	mov	r8, r3
 80008f4:	e620      	b.n	8000538 <__aeabi_ddiv+0x10c>
 80008f6:	f000 ff23 	bl	8001740 <__clzsi2>
 80008fa:	0003      	movs	r3, r0
 80008fc:	001a      	movs	r2, r3
 80008fe:	3215      	adds	r2, #21
 8000900:	3020      	adds	r0, #32
 8000902:	2a1c      	cmp	r2, #28
 8000904:	dc00      	bgt.n	8000908 <__aeabi_ddiv+0x4dc>
 8000906:	e630      	b.n	800056a <__aeabi_ddiv+0x13e>
 8000908:	4654      	mov	r4, sl
 800090a:	3b08      	subs	r3, #8
 800090c:	2200      	movs	r2, #0
 800090e:	409c      	lsls	r4, r3
 8000910:	e635      	b.n	800057e <__aeabi_ddiv+0x152>
 8000912:	230f      	movs	r3, #15
 8000914:	402b      	ands	r3, r5
 8000916:	2b04      	cmp	r3, #4
 8000918:	d100      	bne.n	800091c <__aeabi_ddiv+0x4f0>
 800091a:	e652      	b.n	80005c2 <__aeabi_ddiv+0x196>
 800091c:	2305      	movs	r3, #5
 800091e:	425b      	negs	r3, r3
 8000920:	42ab      	cmp	r3, r5
 8000922:	419b      	sbcs	r3, r3
 8000924:	3504      	adds	r5, #4
 8000926:	425b      	negs	r3, r3
 8000928:	08ed      	lsrs	r5, r5, #3
 800092a:	4498      	add	r8, r3
 800092c:	e64a      	b.n	80005c4 <__aeabi_ddiv+0x198>
 800092e:	428c      	cmp	r4, r1
 8000930:	d1c5      	bne.n	80008be <__aeabi_ddiv+0x492>
 8000932:	42af      	cmp	r7, r5
 8000934:	d9c0      	bls.n	80008b8 <__aeabi_ddiv+0x48c>
 8000936:	4690      	mov	r8, r2
 8000938:	e716      	b.n	8000768 <__aeabi_ddiv+0x33c>
 800093a:	428a      	cmp	r2, r1
 800093c:	d800      	bhi.n	8000940 <__aeabi_ddiv+0x514>
 800093e:	e6ea      	b.n	8000716 <__aeabi_ddiv+0x2ea>
 8000940:	1e83      	subs	r3, r0, #2
 8000942:	1909      	adds	r1, r1, r4
 8000944:	e6e7      	b.n	8000716 <__aeabi_ddiv+0x2ea>
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <__aeabi_ddiv+0x5c4>)
 8000948:	0028      	movs	r0, r5
 800094a:	445a      	add	r2, fp
 800094c:	4643      	mov	r3, r8
 800094e:	4095      	lsls	r5, r2
 8000950:	4093      	lsls	r3, r2
 8000952:	40c8      	lsrs	r0, r1
 8000954:	1e6a      	subs	r2, r5, #1
 8000956:	4195      	sbcs	r5, r2
 8000958:	4644      	mov	r4, r8
 800095a:	4303      	orrs	r3, r0
 800095c:	432b      	orrs	r3, r5
 800095e:	40cc      	lsrs	r4, r1
 8000960:	075a      	lsls	r2, r3, #29
 8000962:	d092      	beq.n	800088a <__aeabi_ddiv+0x45e>
 8000964:	220f      	movs	r2, #15
 8000966:	401a      	ands	r2, r3
 8000968:	2a04      	cmp	r2, #4
 800096a:	d188      	bne.n	800087e <__aeabi_ddiv+0x452>
 800096c:	e78d      	b.n	800088a <__aeabi_ddiv+0x45e>
 800096e:	0035      	movs	r5, r6
 8000970:	4281      	cmp	r1, r0
 8000972:	d000      	beq.n	8000976 <__aeabi_ddiv+0x54a>
 8000974:	e74b      	b.n	800080e <__aeabi_ddiv+0x3e2>
 8000976:	9a00      	ldr	r2, [sp, #0]
 8000978:	4293      	cmp	r3, r2
 800097a:	d000      	beq.n	800097e <__aeabi_ddiv+0x552>
 800097c:	e747      	b.n	800080e <__aeabi_ddiv+0x3e2>
 800097e:	e618      	b.n	80005b2 <__aeabi_ddiv+0x186>
 8000980:	42ae      	cmp	r6, r5
 8000982:	d99c      	bls.n	80008be <__aeabi_ddiv+0x492>
 8000984:	2302      	movs	r3, #2
 8000986:	425b      	negs	r3, r3
 8000988:	469c      	mov	ip, r3
 800098a:	9b00      	ldr	r3, [sp, #0]
 800098c:	44e0      	add	r8, ip
 800098e:	469c      	mov	ip, r3
 8000990:	4465      	add	r5, ip
 8000992:	429d      	cmp	r5, r3
 8000994:	419b      	sbcs	r3, r3
 8000996:	425b      	negs	r3, r3
 8000998:	191b      	adds	r3, r3, r4
 800099a:	18c9      	adds	r1, r1, r3
 800099c:	e6e4      	b.n	8000768 <__aeabi_ddiv+0x33c>
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <__aeabi_ddiv+0x5c8>)
 80009a0:	445a      	add	r2, fp
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	dc00      	bgt.n	80009a8 <__aeabi_ddiv+0x57c>
 80009a6:	e744      	b.n	8000832 <__aeabi_ddiv+0x406>
 80009a8:	2301      	movs	r3, #1
 80009aa:	2500      	movs	r5, #0
 80009ac:	4498      	add	r8, r3
 80009ae:	e609      	b.n	80005c4 <__aeabi_ddiv+0x198>
 80009b0:	0765      	lsls	r5, r4, #29
 80009b2:	0264      	lsls	r4, r4, #9
 80009b4:	0b24      	lsrs	r4, r4, #12
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	431d      	orrs	r5, r3
 80009ba:	2300      	movs	r3, #0
 80009bc:	e590      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 80009be:	9e00      	ldr	r6, [sp, #0]
 80009c0:	3d02      	subs	r5, #2
 80009c2:	0072      	lsls	r2, r6, #1
 80009c4:	42b2      	cmp	r2, r6
 80009c6:	41bf      	sbcs	r7, r7
 80009c8:	427f      	negs	r7, r7
 80009ca:	193c      	adds	r4, r7, r4
 80009cc:	1909      	adds	r1, r1, r4
 80009ce:	9200      	str	r2, [sp, #0]
 80009d0:	e7ce      	b.n	8000970 <__aeabi_ddiv+0x544>
 80009d2:	2480      	movs	r4, #128	; 0x80
 80009d4:	4643      	mov	r3, r8
 80009d6:	0324      	lsls	r4, r4, #12
 80009d8:	431c      	orrs	r4, r3
 80009da:	0324      	lsls	r4, r4, #12
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <__aeabi_ddiv+0x5cc>)
 80009de:	0b24      	lsrs	r4, r4, #12
 80009e0:	e57e      	b.n	80004e0 <__aeabi_ddiv+0xb4>
 80009e2:	9a00      	ldr	r2, [sp, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d3ea      	bcc.n	80009be <__aeabi_ddiv+0x592>
 80009e8:	0035      	movs	r5, r6
 80009ea:	e7c4      	b.n	8000976 <__aeabi_ddiv+0x54a>
 80009ec:	0000043e 	.word	0x0000043e
 80009f0:	0000041e 	.word	0x0000041e
 80009f4:	000003ff 	.word	0x000003ff
 80009f8:	000007ff 	.word	0x000007ff

080009fc <__aeabi_dmul>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	4657      	mov	r7, sl
 8000a00:	464e      	mov	r6, r9
 8000a02:	4645      	mov	r5, r8
 8000a04:	46de      	mov	lr, fp
 8000a06:	b5e0      	push	{r5, r6, r7, lr}
 8000a08:	4698      	mov	r8, r3
 8000a0a:	030c      	lsls	r4, r1, #12
 8000a0c:	004b      	lsls	r3, r1, #1
 8000a0e:	0006      	movs	r6, r0
 8000a10:	4692      	mov	sl, r2
 8000a12:	b087      	sub	sp, #28
 8000a14:	0b24      	lsrs	r4, r4, #12
 8000a16:	0d5b      	lsrs	r3, r3, #21
 8000a18:	0fcf      	lsrs	r7, r1, #31
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d06c      	beq.n	8000af8 <__aeabi_dmul+0xfc>
 8000a1e:	4add      	ldr	r2, [pc, #884]	; (8000d94 <__aeabi_dmul+0x398>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dmul+0x2a>
 8000a24:	e086      	b.n	8000b34 <__aeabi_dmul+0x138>
 8000a26:	0f42      	lsrs	r2, r0, #29
 8000a28:	00e4      	lsls	r4, r4, #3
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0412      	lsls	r2, r2, #16
 8000a30:	4314      	orrs	r4, r2
 8000a32:	4ad9      	ldr	r2, [pc, #868]	; (8000d98 <__aeabi_dmul+0x39c>)
 8000a34:	00c5      	lsls	r5, r0, #3
 8000a36:	4694      	mov	ip, r2
 8000a38:	4463      	add	r3, ip
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	4699      	mov	r9, r3
 8000a40:	469b      	mov	fp, r3
 8000a42:	4643      	mov	r3, r8
 8000a44:	4642      	mov	r2, r8
 8000a46:	031e      	lsls	r6, r3, #12
 8000a48:	0fd2      	lsrs	r2, r2, #31
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4650      	mov	r0, sl
 8000a4e:	4690      	mov	r8, r2
 8000a50:	0b36      	lsrs	r6, r6, #12
 8000a52:	0d5b      	lsrs	r3, r3, #21
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dmul+0x5c>
 8000a56:	e078      	b.n	8000b4a <__aeabi_dmul+0x14e>
 8000a58:	4ace      	ldr	r2, [pc, #824]	; (8000d94 <__aeabi_dmul+0x398>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d01d      	beq.n	8000a9a <__aeabi_dmul+0x9e>
 8000a5e:	49ce      	ldr	r1, [pc, #824]	; (8000d98 <__aeabi_dmul+0x39c>)
 8000a60:	0f42      	lsrs	r2, r0, #29
 8000a62:	468c      	mov	ip, r1
 8000a64:	9900      	ldr	r1, [sp, #0]
 8000a66:	4463      	add	r3, ip
 8000a68:	00f6      	lsls	r6, r6, #3
 8000a6a:	468c      	mov	ip, r1
 8000a6c:	4316      	orrs	r6, r2
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	449c      	add	ip, r3
 8000a72:	0412      	lsls	r2, r2, #16
 8000a74:	4663      	mov	r3, ip
 8000a76:	4316      	orrs	r6, r2
 8000a78:	00c2      	lsls	r2, r0, #3
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	9900      	ldr	r1, [sp, #0]
 8000a80:	4643      	mov	r3, r8
 8000a82:	3101      	adds	r1, #1
 8000a84:	468c      	mov	ip, r1
 8000a86:	4649      	mov	r1, r9
 8000a88:	407b      	eors	r3, r7
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	290f      	cmp	r1, #15
 8000a8e:	d900      	bls.n	8000a92 <__aeabi_dmul+0x96>
 8000a90:	e07e      	b.n	8000b90 <__aeabi_dmul+0x194>
 8000a92:	4bc2      	ldr	r3, [pc, #776]	; (8000d9c <__aeabi_dmul+0x3a0>)
 8000a94:	0089      	lsls	r1, r1, #2
 8000a96:	5859      	ldr	r1, [r3, r1]
 8000a98:	468f      	mov	pc, r1
 8000a9a:	4652      	mov	r2, sl
 8000a9c:	9b00      	ldr	r3, [sp, #0]
 8000a9e:	4332      	orrs	r2, r6
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dmul+0xa8>
 8000aa2:	e156      	b.n	8000d52 <__aeabi_dmul+0x356>
 8000aa4:	49bb      	ldr	r1, [pc, #748]	; (8000d94 <__aeabi_dmul+0x398>)
 8000aa6:	2600      	movs	r6, #0
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	4463      	add	r3, ip
 8000aac:	4649      	mov	r1, r9
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	4319      	orrs	r1, r3
 8000ab4:	4689      	mov	r9, r1
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	e7e1      	b.n	8000a7e <__aeabi_dmul+0x82>
 8000aba:	4643      	mov	r3, r8
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	0034      	movs	r4, r6
 8000ac0:	0015      	movs	r5, r2
 8000ac2:	4683      	mov	fp, r0
 8000ac4:	465b      	mov	r3, fp
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d05e      	beq.n	8000b88 <__aeabi_dmul+0x18c>
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dmul+0xd4>
 8000ace:	e1f3      	b.n	8000eb8 <__aeabi_dmul+0x4bc>
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dmul+0xda>
 8000ad4:	e118      	b.n	8000d08 <__aeabi_dmul+0x30c>
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2400      	movs	r4, #0
 8000ada:	2500      	movs	r5, #0
 8000adc:	9b01      	ldr	r3, [sp, #4]
 8000ade:	0512      	lsls	r2, r2, #20
 8000ae0:	4322      	orrs	r2, r4
 8000ae2:	07db      	lsls	r3, r3, #31
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	0011      	movs	r1, r2
 8000aea:	b007      	add	sp, #28
 8000aec:	bcf0      	pop	{r4, r5, r6, r7}
 8000aee:	46bb      	mov	fp, r7
 8000af0:	46b2      	mov	sl, r6
 8000af2:	46a9      	mov	r9, r5
 8000af4:	46a0      	mov	r8, r4
 8000af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af8:	0025      	movs	r5, r4
 8000afa:	4305      	orrs	r5, r0
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dmul+0x104>
 8000afe:	e141      	b.n	8000d84 <__aeabi_dmul+0x388>
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dmul+0x10a>
 8000b04:	e1ad      	b.n	8000e62 <__aeabi_dmul+0x466>
 8000b06:	0020      	movs	r0, r4
 8000b08:	f000 fe1a 	bl	8001740 <__clzsi2>
 8000b0c:	0001      	movs	r1, r0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	390b      	subs	r1, #11
 8000b12:	231d      	movs	r3, #29
 8000b14:	0010      	movs	r0, r2
 8000b16:	1a5b      	subs	r3, r3, r1
 8000b18:	0031      	movs	r1, r6
 8000b1a:	0035      	movs	r5, r6
 8000b1c:	3808      	subs	r0, #8
 8000b1e:	4084      	lsls	r4, r0
 8000b20:	40d9      	lsrs	r1, r3
 8000b22:	4085      	lsls	r5, r0
 8000b24:	430c      	orrs	r4, r1
 8000b26:	489e      	ldr	r0, [pc, #632]	; (8000da0 <__aeabi_dmul+0x3a4>)
 8000b28:	1a83      	subs	r3, r0, r2
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4699      	mov	r9, r3
 8000b30:	469b      	mov	fp, r3
 8000b32:	e786      	b.n	8000a42 <__aeabi_dmul+0x46>
 8000b34:	0005      	movs	r5, r0
 8000b36:	4325      	orrs	r5, r4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dmul+0x140>
 8000b3a:	e11c      	b.n	8000d76 <__aeabi_dmul+0x37a>
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2302      	movs	r3, #2
 8000b42:	2400      	movs	r4, #0
 8000b44:	4691      	mov	r9, r2
 8000b46:	469b      	mov	fp, r3
 8000b48:	e77b      	b.n	8000a42 <__aeabi_dmul+0x46>
 8000b4a:	4652      	mov	r2, sl
 8000b4c:	4332      	orrs	r2, r6
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dmul+0x156>
 8000b50:	e10a      	b.n	8000d68 <__aeabi_dmul+0x36c>
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dmul+0x15c>
 8000b56:	e176      	b.n	8000e46 <__aeabi_dmul+0x44a>
 8000b58:	0030      	movs	r0, r6
 8000b5a:	f000 fdf1 	bl	8001740 <__clzsi2>
 8000b5e:	0002      	movs	r2, r0
 8000b60:	3a0b      	subs	r2, #11
 8000b62:	231d      	movs	r3, #29
 8000b64:	0001      	movs	r1, r0
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	4652      	mov	r2, sl
 8000b6a:	3908      	subs	r1, #8
 8000b6c:	40da      	lsrs	r2, r3
 8000b6e:	408e      	lsls	r6, r1
 8000b70:	4316      	orrs	r6, r2
 8000b72:	4652      	mov	r2, sl
 8000b74:	408a      	lsls	r2, r1
 8000b76:	9b00      	ldr	r3, [sp, #0]
 8000b78:	4989      	ldr	r1, [pc, #548]	; (8000da0 <__aeabi_dmul+0x3a4>)
 8000b7a:	1a18      	subs	r0, r3, r0
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4463      	add	r3, ip
 8000b82:	2000      	movs	r0, #0
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	e77a      	b.n	8000a7e <__aeabi_dmul+0x82>
 8000b88:	2400      	movs	r4, #0
 8000b8a:	2500      	movs	r5, #0
 8000b8c:	4a81      	ldr	r2, [pc, #516]	; (8000d94 <__aeabi_dmul+0x398>)
 8000b8e:	e7a5      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000b90:	0c2f      	lsrs	r7, r5, #16
 8000b92:	042d      	lsls	r5, r5, #16
 8000b94:	0c2d      	lsrs	r5, r5, #16
 8000b96:	002b      	movs	r3, r5
 8000b98:	0c11      	lsrs	r1, r2, #16
 8000b9a:	0412      	lsls	r2, r2, #16
 8000b9c:	0c12      	lsrs	r2, r2, #16
 8000b9e:	4353      	muls	r3, r2
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	0013      	movs	r3, r2
 8000ba4:	0028      	movs	r0, r5
 8000ba6:	437b      	muls	r3, r7
 8000ba8:	4699      	mov	r9, r3
 8000baa:	4348      	muls	r0, r1
 8000bac:	4448      	add	r0, r9
 8000bae:	4683      	mov	fp, r0
 8000bb0:	4640      	mov	r0, r8
 8000bb2:	000b      	movs	r3, r1
 8000bb4:	0c00      	lsrs	r0, r0, #16
 8000bb6:	4682      	mov	sl, r0
 8000bb8:	4658      	mov	r0, fp
 8000bba:	437b      	muls	r3, r7
 8000bbc:	4450      	add	r0, sl
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	4581      	cmp	r9, r0
 8000bc2:	d906      	bls.n	8000bd2 <__aeabi_dmul+0x1d6>
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	4699      	mov	r9, r3
 8000bcc:	44ca      	add	sl, r9
 8000bce:	4653      	mov	r3, sl
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	0c03      	lsrs	r3, r0, #16
 8000bd4:	469b      	mov	fp, r3
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	041b      	lsls	r3, r3, #16
 8000bda:	0400      	lsls	r0, r0, #16
 8000bdc:	0c1b      	lsrs	r3, r3, #16
 8000bde:	4698      	mov	r8, r3
 8000be0:	0003      	movs	r3, r0
 8000be2:	4443      	add	r3, r8
 8000be4:	9304      	str	r3, [sp, #16]
 8000be6:	0c33      	lsrs	r3, r6, #16
 8000be8:	4699      	mov	r9, r3
 8000bea:	002b      	movs	r3, r5
 8000bec:	0436      	lsls	r6, r6, #16
 8000bee:	0c36      	lsrs	r6, r6, #16
 8000bf0:	4373      	muls	r3, r6
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	0033      	movs	r3, r6
 8000bf6:	437b      	muls	r3, r7
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	464b      	mov	r3, r9
 8000bfc:	435d      	muls	r5, r3
 8000bfe:	435f      	muls	r7, r3
 8000c00:	4643      	mov	r3, r8
 8000c02:	4455      	add	r5, sl
 8000c04:	0c18      	lsrs	r0, r3, #16
 8000c06:	1940      	adds	r0, r0, r5
 8000c08:	4582      	cmp	sl, r0
 8000c0a:	d903      	bls.n	8000c14 <__aeabi_dmul+0x218>
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	025b      	lsls	r3, r3, #9
 8000c10:	469a      	mov	sl, r3
 8000c12:	4457      	add	r7, sl
 8000c14:	0c05      	lsrs	r5, r0, #16
 8000c16:	19eb      	adds	r3, r5, r7
 8000c18:	9305      	str	r3, [sp, #20]
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	041d      	lsls	r5, r3, #16
 8000c1e:	0c2d      	lsrs	r5, r5, #16
 8000c20:	0400      	lsls	r0, r0, #16
 8000c22:	1940      	adds	r0, r0, r5
 8000c24:	0c25      	lsrs	r5, r4, #16
 8000c26:	0424      	lsls	r4, r4, #16
 8000c28:	0c24      	lsrs	r4, r4, #16
 8000c2a:	0027      	movs	r7, r4
 8000c2c:	4357      	muls	r7, r2
 8000c2e:	436a      	muls	r2, r5
 8000c30:	4690      	mov	r8, r2
 8000c32:	002a      	movs	r2, r5
 8000c34:	0c3b      	lsrs	r3, r7, #16
 8000c36:	469a      	mov	sl, r3
 8000c38:	434a      	muls	r2, r1
 8000c3a:	4361      	muls	r1, r4
 8000c3c:	4441      	add	r1, r8
 8000c3e:	4451      	add	r1, sl
 8000c40:	4483      	add	fp, r0
 8000c42:	4588      	cmp	r8, r1
 8000c44:	d903      	bls.n	8000c4e <__aeabi_dmul+0x252>
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	4442      	add	r2, r8
 8000c4e:	043f      	lsls	r7, r7, #16
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	0c3f      	lsrs	r7, r7, #16
 8000c54:	0409      	lsls	r1, r1, #16
 8000c56:	19c9      	adds	r1, r1, r7
 8000c58:	0027      	movs	r7, r4
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	464b      	mov	r3, r9
 8000c5e:	4377      	muls	r7, r6
 8000c60:	435c      	muls	r4, r3
 8000c62:	436e      	muls	r6, r5
 8000c64:	435d      	muls	r5, r3
 8000c66:	0c3b      	lsrs	r3, r7, #16
 8000c68:	4699      	mov	r9, r3
 8000c6a:	19a4      	adds	r4, r4, r6
 8000c6c:	444c      	add	r4, r9
 8000c6e:	4442      	add	r2, r8
 8000c70:	9503      	str	r5, [sp, #12]
 8000c72:	42a6      	cmp	r6, r4
 8000c74:	d904      	bls.n	8000c80 <__aeabi_dmul+0x284>
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	025b      	lsls	r3, r3, #9
 8000c7a:	4698      	mov	r8, r3
 8000c7c:	4445      	add	r5, r8
 8000c7e:	9503      	str	r5, [sp, #12]
 8000c80:	9b02      	ldr	r3, [sp, #8]
 8000c82:	043f      	lsls	r7, r7, #16
 8000c84:	445b      	add	r3, fp
 8000c86:	001e      	movs	r6, r3
 8000c88:	4283      	cmp	r3, r0
 8000c8a:	4180      	sbcs	r0, r0
 8000c8c:	0423      	lsls	r3, r4, #16
 8000c8e:	4698      	mov	r8, r3
 8000c90:	9b05      	ldr	r3, [sp, #20]
 8000c92:	0c3f      	lsrs	r7, r7, #16
 8000c94:	4447      	add	r7, r8
 8000c96:	4698      	mov	r8, r3
 8000c98:	1876      	adds	r6, r6, r1
 8000c9a:	428e      	cmp	r6, r1
 8000c9c:	4189      	sbcs	r1, r1
 8000c9e:	4447      	add	r7, r8
 8000ca0:	4240      	negs	r0, r0
 8000ca2:	183d      	adds	r5, r7, r0
 8000ca4:	46a8      	mov	r8, r5
 8000ca6:	4693      	mov	fp, r2
 8000ca8:	4249      	negs	r1, r1
 8000caa:	468a      	mov	sl, r1
 8000cac:	44c3      	add	fp, r8
 8000cae:	429f      	cmp	r7, r3
 8000cb0:	41bf      	sbcs	r7, r7
 8000cb2:	4580      	cmp	r8, r0
 8000cb4:	4180      	sbcs	r0, r0
 8000cb6:	9b03      	ldr	r3, [sp, #12]
 8000cb8:	44da      	add	sl, fp
 8000cba:	4698      	mov	r8, r3
 8000cbc:	4653      	mov	r3, sl
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	427f      	negs	r7, r7
 8000cc2:	4307      	orrs	r7, r0
 8000cc4:	0c24      	lsrs	r4, r4, #16
 8000cc6:	4593      	cmp	fp, r2
 8000cc8:	4192      	sbcs	r2, r2
 8000cca:	458a      	cmp	sl, r1
 8000ccc:	4189      	sbcs	r1, r1
 8000cce:	193f      	adds	r7, r7, r4
 8000cd0:	0ddc      	lsrs	r4, r3, #23
 8000cd2:	9b04      	ldr	r3, [sp, #16]
 8000cd4:	0275      	lsls	r5, r6, #9
 8000cd6:	431d      	orrs	r5, r3
 8000cd8:	1e68      	subs	r0, r5, #1
 8000cda:	4185      	sbcs	r5, r0
 8000cdc:	4653      	mov	r3, sl
 8000cde:	4252      	negs	r2, r2
 8000ce0:	4249      	negs	r1, r1
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	18bf      	adds	r7, r7, r2
 8000ce6:	4447      	add	r7, r8
 8000ce8:	0df6      	lsrs	r6, r6, #23
 8000cea:	027f      	lsls	r7, r7, #9
 8000cec:	4335      	orrs	r5, r6
 8000cee:	025a      	lsls	r2, r3, #9
 8000cf0:	433c      	orrs	r4, r7
 8000cf2:	4315      	orrs	r5, r2
 8000cf4:	01fb      	lsls	r3, r7, #7
 8000cf6:	d400      	bmi.n	8000cfa <__aeabi_dmul+0x2fe>
 8000cf8:	e0c1      	b.n	8000e7e <__aeabi_dmul+0x482>
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	086a      	lsrs	r2, r5, #1
 8000cfe:	400d      	ands	r5, r1
 8000d00:	4315      	orrs	r5, r2
 8000d02:	07e2      	lsls	r2, r4, #31
 8000d04:	4315      	orrs	r5, r2
 8000d06:	0864      	lsrs	r4, r4, #1
 8000d08:	4926      	ldr	r1, [pc, #152]	; (8000da4 <__aeabi_dmul+0x3a8>)
 8000d0a:	4461      	add	r1, ip
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	dd56      	ble.n	8000dbe <__aeabi_dmul+0x3c2>
 8000d10:	076b      	lsls	r3, r5, #29
 8000d12:	d009      	beq.n	8000d28 <__aeabi_dmul+0x32c>
 8000d14:	220f      	movs	r2, #15
 8000d16:	402a      	ands	r2, r5
 8000d18:	2a04      	cmp	r2, #4
 8000d1a:	d005      	beq.n	8000d28 <__aeabi_dmul+0x32c>
 8000d1c:	1d2a      	adds	r2, r5, #4
 8000d1e:	42aa      	cmp	r2, r5
 8000d20:	41ad      	sbcs	r5, r5
 8000d22:	426d      	negs	r5, r5
 8000d24:	1964      	adds	r4, r4, r5
 8000d26:	0015      	movs	r5, r2
 8000d28:	01e3      	lsls	r3, r4, #7
 8000d2a:	d504      	bpl.n	8000d36 <__aeabi_dmul+0x33a>
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <__aeabi_dmul+0x3ac>)
 8000d30:	00c9      	lsls	r1, r1, #3
 8000d32:	4014      	ands	r4, r2
 8000d34:	4461      	add	r1, ip
 8000d36:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <__aeabi_dmul+0x3b0>)
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	dd00      	ble.n	8000d3e <__aeabi_dmul+0x342>
 8000d3c:	e724      	b.n	8000b88 <__aeabi_dmul+0x18c>
 8000d3e:	0762      	lsls	r2, r4, #29
 8000d40:	08ed      	lsrs	r5, r5, #3
 8000d42:	0264      	lsls	r4, r4, #9
 8000d44:	0549      	lsls	r1, r1, #21
 8000d46:	4315      	orrs	r5, r2
 8000d48:	0b24      	lsrs	r4, r4, #12
 8000d4a:	0d4a      	lsrs	r2, r1, #21
 8000d4c:	e6c6      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000d4e:	9701      	str	r7, [sp, #4]
 8000d50:	e6b8      	b.n	8000ac4 <__aeabi_dmul+0xc8>
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <__aeabi_dmul+0x398>)
 8000d54:	2003      	movs	r0, #3
 8000d56:	4694      	mov	ip, r2
 8000d58:	4463      	add	r3, ip
 8000d5a:	464a      	mov	r2, r9
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2303      	movs	r3, #3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	4691      	mov	r9, r2
 8000d64:	4652      	mov	r2, sl
 8000d66:	e68a      	b.n	8000a7e <__aeabi_dmul+0x82>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	4689      	mov	r9, r1
 8000d70:	2600      	movs	r6, #0
 8000d72:	2001      	movs	r0, #1
 8000d74:	e683      	b.n	8000a7e <__aeabi_dmul+0x82>
 8000d76:	220c      	movs	r2, #12
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	4691      	mov	r9, r2
 8000d80:	469b      	mov	fp, r3
 8000d82:	e65e      	b.n	8000a42 <__aeabi_dmul+0x46>
 8000d84:	2304      	movs	r3, #4
 8000d86:	4699      	mov	r9, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	2400      	movs	r4, #0
 8000d90:	469b      	mov	fp, r3
 8000d92:	e656      	b.n	8000a42 <__aeabi_dmul+0x46>
 8000d94:	000007ff 	.word	0x000007ff
 8000d98:	fffffc01 	.word	0xfffffc01
 8000d9c:	0800700c 	.word	0x0800700c
 8000da0:	fffffc0d 	.word	0xfffffc0d
 8000da4:	000003ff 	.word	0x000003ff
 8000da8:	feffffff 	.word	0xfeffffff
 8000dac:	000007fe 	.word	0x000007fe
 8000db0:	2300      	movs	r3, #0
 8000db2:	2480      	movs	r4, #128	; 0x80
 8000db4:	2500      	movs	r5, #0
 8000db6:	4a44      	ldr	r2, [pc, #272]	; (8000ec8 <__aeabi_dmul+0x4cc>)
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	0324      	lsls	r4, r4, #12
 8000dbc:	e68e      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	1a40      	subs	r0, r0, r1
 8000dc2:	2838      	cmp	r0, #56	; 0x38
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_dmul+0x3cc>
 8000dc6:	e686      	b.n	8000ad6 <__aeabi_dmul+0xda>
 8000dc8:	281f      	cmp	r0, #31
 8000dca:	dd5b      	ble.n	8000e84 <__aeabi_dmul+0x488>
 8000dcc:	221f      	movs	r2, #31
 8000dce:	0023      	movs	r3, r4
 8000dd0:	4252      	negs	r2, r2
 8000dd2:	1a51      	subs	r1, r2, r1
 8000dd4:	40cb      	lsrs	r3, r1
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	2820      	cmp	r0, #32
 8000dda:	d003      	beq.n	8000de4 <__aeabi_dmul+0x3e8>
 8000ddc:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <__aeabi_dmul+0x4d0>)
 8000dde:	4462      	add	r2, ip
 8000de0:	4094      	lsls	r4, r2
 8000de2:	4325      	orrs	r5, r4
 8000de4:	1e6a      	subs	r2, r5, #1
 8000de6:	4195      	sbcs	r5, r2
 8000de8:	002a      	movs	r2, r5
 8000dea:	430a      	orrs	r2, r1
 8000dec:	2107      	movs	r1, #7
 8000dee:	000d      	movs	r5, r1
 8000df0:	2400      	movs	r4, #0
 8000df2:	4015      	ands	r5, r2
 8000df4:	4211      	tst	r1, r2
 8000df6:	d05b      	beq.n	8000eb0 <__aeabi_dmul+0x4b4>
 8000df8:	210f      	movs	r1, #15
 8000dfa:	2400      	movs	r4, #0
 8000dfc:	4011      	ands	r1, r2
 8000dfe:	2904      	cmp	r1, #4
 8000e00:	d053      	beq.n	8000eaa <__aeabi_dmul+0x4ae>
 8000e02:	1d11      	adds	r1, r2, #4
 8000e04:	4291      	cmp	r1, r2
 8000e06:	4192      	sbcs	r2, r2
 8000e08:	4252      	negs	r2, r2
 8000e0a:	18a4      	adds	r4, r4, r2
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	0223      	lsls	r3, r4, #8
 8000e10:	d54b      	bpl.n	8000eaa <__aeabi_dmul+0x4ae>
 8000e12:	2201      	movs	r2, #1
 8000e14:	2400      	movs	r4, #0
 8000e16:	2500      	movs	r5, #0
 8000e18:	e660      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	031b      	lsls	r3, r3, #12
 8000e1e:	421c      	tst	r4, r3
 8000e20:	d009      	beq.n	8000e36 <__aeabi_dmul+0x43a>
 8000e22:	421e      	tst	r6, r3
 8000e24:	d107      	bne.n	8000e36 <__aeabi_dmul+0x43a>
 8000e26:	4333      	orrs	r3, r6
 8000e28:	031c      	lsls	r4, r3, #12
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	0b24      	lsrs	r4, r4, #12
 8000e30:	4a25      	ldr	r2, [pc, #148]	; (8000ec8 <__aeabi_dmul+0x4cc>)
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	e652      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0312      	lsls	r2, r2, #12
 8000e3a:	4314      	orrs	r4, r2
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <__aeabi_dmul+0x4cc>)
 8000e40:	0b24      	lsrs	r4, r4, #12
 8000e42:	9701      	str	r7, [sp, #4]
 8000e44:	e64a      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000e46:	f000 fc7b 	bl	8001740 <__clzsi2>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	3215      	adds	r2, #21
 8000e50:	3020      	adds	r0, #32
 8000e52:	2a1c      	cmp	r2, #28
 8000e54:	dc00      	bgt.n	8000e58 <__aeabi_dmul+0x45c>
 8000e56:	e684      	b.n	8000b62 <__aeabi_dmul+0x166>
 8000e58:	4656      	mov	r6, sl
 8000e5a:	3b08      	subs	r3, #8
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	409e      	lsls	r6, r3
 8000e60:	e689      	b.n	8000b76 <__aeabi_dmul+0x17a>
 8000e62:	f000 fc6d 	bl	8001740 <__clzsi2>
 8000e66:	0001      	movs	r1, r0
 8000e68:	0002      	movs	r2, r0
 8000e6a:	3115      	adds	r1, #21
 8000e6c:	3220      	adds	r2, #32
 8000e6e:	291c      	cmp	r1, #28
 8000e70:	dc00      	bgt.n	8000e74 <__aeabi_dmul+0x478>
 8000e72:	e64e      	b.n	8000b12 <__aeabi_dmul+0x116>
 8000e74:	0034      	movs	r4, r6
 8000e76:	3808      	subs	r0, #8
 8000e78:	2500      	movs	r5, #0
 8000e7a:	4084      	lsls	r4, r0
 8000e7c:	e653      	b.n	8000b26 <__aeabi_dmul+0x12a>
 8000e7e:	9b00      	ldr	r3, [sp, #0]
 8000e80:	469c      	mov	ip, r3
 8000e82:	e741      	b.n	8000d08 <__aeabi_dmul+0x30c>
 8000e84:	4912      	ldr	r1, [pc, #72]	; (8000ed0 <__aeabi_dmul+0x4d4>)
 8000e86:	0022      	movs	r2, r4
 8000e88:	4461      	add	r1, ip
 8000e8a:	002e      	movs	r6, r5
 8000e8c:	408d      	lsls	r5, r1
 8000e8e:	408a      	lsls	r2, r1
 8000e90:	40c6      	lsrs	r6, r0
 8000e92:	1e69      	subs	r1, r5, #1
 8000e94:	418d      	sbcs	r5, r1
 8000e96:	4332      	orrs	r2, r6
 8000e98:	432a      	orrs	r2, r5
 8000e9a:	40c4      	lsrs	r4, r0
 8000e9c:	0753      	lsls	r3, r2, #29
 8000e9e:	d0b6      	beq.n	8000e0e <__aeabi_dmul+0x412>
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	4011      	ands	r1, r2
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d1ac      	bne.n	8000e02 <__aeabi_dmul+0x406>
 8000ea8:	e7b1      	b.n	8000e0e <__aeabi_dmul+0x412>
 8000eaa:	0765      	lsls	r5, r4, #29
 8000eac:	0264      	lsls	r4, r4, #9
 8000eae:	0b24      	lsrs	r4, r4, #12
 8000eb0:	08d2      	lsrs	r2, r2, #3
 8000eb2:	4315      	orrs	r5, r2
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	e611      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	0312      	lsls	r2, r2, #12
 8000ebc:	4314      	orrs	r4, r2
 8000ebe:	0324      	lsls	r4, r4, #12
 8000ec0:	4a01      	ldr	r2, [pc, #4]	; (8000ec8 <__aeabi_dmul+0x4cc>)
 8000ec2:	0b24      	lsrs	r4, r4, #12
 8000ec4:	e60a      	b.n	8000adc <__aeabi_dmul+0xe0>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	0000043e 	.word	0x0000043e
 8000ed0:	0000041e 	.word	0x0000041e

08000ed4 <__aeabi_dsub>:
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	4657      	mov	r7, sl
 8000ed8:	464e      	mov	r6, r9
 8000eda:	4645      	mov	r5, r8
 8000edc:	46de      	mov	lr, fp
 8000ede:	0004      	movs	r4, r0
 8000ee0:	b5e0      	push	{r5, r6, r7, lr}
 8000ee2:	001f      	movs	r7, r3
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	030b      	lsls	r3, r1, #12
 8000ee8:	0f62      	lsrs	r2, r4, #29
 8000eea:	004e      	lsls	r6, r1, #1
 8000eec:	0fcd      	lsrs	r5, r1, #31
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	0339      	lsls	r1, r7, #12
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	0a49      	lsrs	r1, r1, #9
 8000ef6:	00e2      	lsls	r2, r4, #3
 8000ef8:	0f44      	lsrs	r4, r0, #29
 8000efa:	4321      	orrs	r1, r4
 8000efc:	4cc2      	ldr	r4, [pc, #776]	; (8001208 <__aeabi_dsub+0x334>)
 8000efe:	4691      	mov	r9, r2
 8000f00:	4692      	mov	sl, r2
 8000f02:	00c0      	lsls	r0, r0, #3
 8000f04:	007a      	lsls	r2, r7, #1
 8000f06:	4680      	mov	r8, r0
 8000f08:	0d76      	lsrs	r6, r6, #21
 8000f0a:	0d52      	lsrs	r2, r2, #21
 8000f0c:	0fff      	lsrs	r7, r7, #31
 8000f0e:	42a2      	cmp	r2, r4
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dsub+0x40>
 8000f12:	e0b4      	b.n	800107e <__aeabi_dsub+0x1aa>
 8000f14:	2401      	movs	r4, #1
 8000f16:	4067      	eors	r7, r4
 8000f18:	46bb      	mov	fp, r7
 8000f1a:	42bd      	cmp	r5, r7
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dsub+0x4c>
 8000f1e:	e088      	b.n	8001032 <__aeabi_dsub+0x15e>
 8000f20:	1ab4      	subs	r4, r6, r2
 8000f22:	46a4      	mov	ip, r4
 8000f24:	2c00      	cmp	r4, #0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_dsub+0x56>
 8000f28:	e0b2      	b.n	8001090 <__aeabi_dsub+0x1bc>
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dsub+0x5c>
 8000f2e:	e0c5      	b.n	80010bc <__aeabi_dsub+0x1e8>
 8000f30:	4ab5      	ldr	r2, [pc, #724]	; (8001208 <__aeabi_dsub+0x334>)
 8000f32:	4296      	cmp	r6, r2
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x64>
 8000f36:	e28b      	b.n	8001450 <__aeabi_dsub+0x57c>
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0412      	lsls	r2, r2, #16
 8000f3c:	4311      	orrs	r1, r2
 8000f3e:	4662      	mov	r2, ip
 8000f40:	2a38      	cmp	r2, #56	; 0x38
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_dsub+0x72>
 8000f44:	e1a1      	b.n	800128a <__aeabi_dsub+0x3b6>
 8000f46:	2a1f      	cmp	r2, #31
 8000f48:	dd00      	ble.n	8000f4c <__aeabi_dsub+0x78>
 8000f4a:	e216      	b.n	800137a <__aeabi_dsub+0x4a6>
 8000f4c:	2720      	movs	r7, #32
 8000f4e:	000c      	movs	r4, r1
 8000f50:	1abf      	subs	r7, r7, r2
 8000f52:	40bc      	lsls	r4, r7
 8000f54:	0002      	movs	r2, r0
 8000f56:	46a0      	mov	r8, r4
 8000f58:	4664      	mov	r4, ip
 8000f5a:	40b8      	lsls	r0, r7
 8000f5c:	40e2      	lsrs	r2, r4
 8000f5e:	4644      	mov	r4, r8
 8000f60:	4314      	orrs	r4, r2
 8000f62:	0002      	movs	r2, r0
 8000f64:	1e50      	subs	r0, r2, #1
 8000f66:	4182      	sbcs	r2, r0
 8000f68:	4660      	mov	r0, ip
 8000f6a:	40c1      	lsrs	r1, r0
 8000f6c:	4322      	orrs	r2, r4
 8000f6e:	1a5b      	subs	r3, r3, r1
 8000f70:	4649      	mov	r1, r9
 8000f72:	1a8c      	subs	r4, r1, r2
 8000f74:	45a1      	cmp	r9, r4
 8000f76:	4192      	sbcs	r2, r2
 8000f78:	4252      	negs	r2, r2
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	4643      	mov	r3, r8
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	d400      	bmi.n	8000f86 <__aeabi_dsub+0xb2>
 8000f84:	e117      	b.n	80011b6 <__aeabi_dsub+0x2e2>
 8000f86:	4643      	mov	r3, r8
 8000f88:	025b      	lsls	r3, r3, #9
 8000f8a:	0a5b      	lsrs	r3, r3, #9
 8000f8c:	4698      	mov	r8, r3
 8000f8e:	4643      	mov	r3, r8
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dsub+0xc2>
 8000f94:	e16c      	b.n	8001270 <__aeabi_dsub+0x39c>
 8000f96:	4640      	mov	r0, r8
 8000f98:	f000 fbd2 	bl	8001740 <__clzsi2>
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	3a08      	subs	r2, #8
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	1a89      	subs	r1, r1, r2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	40c8      	lsrs	r0, r1
 8000fac:	4094      	lsls	r4, r2
 8000fae:	4303      	orrs	r3, r0
 8000fb0:	4296      	cmp	r6, r2
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_dsub+0xe2>
 8000fb4:	e157      	b.n	8001266 <__aeabi_dsub+0x392>
 8000fb6:	1b96      	subs	r6, r2, r6
 8000fb8:	1c71      	adds	r1, r6, #1
 8000fba:	291f      	cmp	r1, #31
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_dsub+0xec>
 8000fbe:	e1cb      	b.n	8001358 <__aeabi_dsub+0x484>
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	0026      	movs	r6, r4
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	4094      	lsls	r4, r2
 8000fca:	4090      	lsls	r0, r2
 8000fcc:	40ce      	lsrs	r6, r1
 8000fce:	40cb      	lsrs	r3, r1
 8000fd0:	1e62      	subs	r2, r4, #1
 8000fd2:	4194      	sbcs	r4, r2
 8000fd4:	4330      	orrs	r0, r6
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	2600      	movs	r6, #0
 8000fda:	4304      	orrs	r4, r0
 8000fdc:	0763      	lsls	r3, r4, #29
 8000fde:	d009      	beq.n	8000ff4 <__aeabi_dsub+0x120>
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	4023      	ands	r3, r4
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d005      	beq.n	8000ff4 <__aeabi_dsub+0x120>
 8000fe8:	1d23      	adds	r3, r4, #4
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	41a4      	sbcs	r4, r4
 8000fee:	4264      	negs	r4, r4
 8000ff0:	44a0      	add	r8, r4
 8000ff2:	001c      	movs	r4, r3
 8000ff4:	4643      	mov	r3, r8
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	d400      	bmi.n	8000ffc <__aeabi_dsub+0x128>
 8000ffa:	e0df      	b.n	80011bc <__aeabi_dsub+0x2e8>
 8000ffc:	4b82      	ldr	r3, [pc, #520]	; (8001208 <__aeabi_dsub+0x334>)
 8000ffe:	3601      	adds	r6, #1
 8001000:	429e      	cmp	r6, r3
 8001002:	d100      	bne.n	8001006 <__aeabi_dsub+0x132>
 8001004:	e0fb      	b.n	80011fe <__aeabi_dsub+0x32a>
 8001006:	4642      	mov	r2, r8
 8001008:	4b80      	ldr	r3, [pc, #512]	; (800120c <__aeabi_dsub+0x338>)
 800100a:	08e4      	lsrs	r4, r4, #3
 800100c:	401a      	ands	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	0571      	lsls	r1, r6, #21
 8001012:	0752      	lsls	r2, r2, #29
 8001014:	025b      	lsls	r3, r3, #9
 8001016:	4322      	orrs	r2, r4
 8001018:	0b1b      	lsrs	r3, r3, #12
 800101a:	0d49      	lsrs	r1, r1, #21
 800101c:	0509      	lsls	r1, r1, #20
 800101e:	07ed      	lsls	r5, r5, #31
 8001020:	4319      	orrs	r1, r3
 8001022:	4329      	orrs	r1, r5
 8001024:	0010      	movs	r0, r2
 8001026:	bcf0      	pop	{r4, r5, r6, r7}
 8001028:	46bb      	mov	fp, r7
 800102a:	46b2      	mov	sl, r6
 800102c:	46a9      	mov	r9, r5
 800102e:	46a0      	mov	r8, r4
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001032:	1ab4      	subs	r4, r6, r2
 8001034:	46a4      	mov	ip, r4
 8001036:	2c00      	cmp	r4, #0
 8001038:	dd58      	ble.n	80010ec <__aeabi_dsub+0x218>
 800103a:	2a00      	cmp	r2, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_dsub+0x16c>
 800103e:	e09e      	b.n	800117e <__aeabi_dsub+0x2aa>
 8001040:	4a71      	ldr	r2, [pc, #452]	; (8001208 <__aeabi_dsub+0x334>)
 8001042:	4296      	cmp	r6, r2
 8001044:	d100      	bne.n	8001048 <__aeabi_dsub+0x174>
 8001046:	e13b      	b.n	80012c0 <__aeabi_dsub+0x3ec>
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	0412      	lsls	r2, r2, #16
 800104c:	4311      	orrs	r1, r2
 800104e:	4662      	mov	r2, ip
 8001050:	2a38      	cmp	r2, #56	; 0x38
 8001052:	dd00      	ble.n	8001056 <__aeabi_dsub+0x182>
 8001054:	e0c1      	b.n	80011da <__aeabi_dsub+0x306>
 8001056:	2a1f      	cmp	r2, #31
 8001058:	dc00      	bgt.n	800105c <__aeabi_dsub+0x188>
 800105a:	e1bb      	b.n	80013d4 <__aeabi_dsub+0x500>
 800105c:	000c      	movs	r4, r1
 800105e:	3a20      	subs	r2, #32
 8001060:	40d4      	lsrs	r4, r2
 8001062:	0022      	movs	r2, r4
 8001064:	4664      	mov	r4, ip
 8001066:	2c20      	cmp	r4, #32
 8001068:	d004      	beq.n	8001074 <__aeabi_dsub+0x1a0>
 800106a:	2740      	movs	r7, #64	; 0x40
 800106c:	1b3f      	subs	r7, r7, r4
 800106e:	40b9      	lsls	r1, r7
 8001070:	4308      	orrs	r0, r1
 8001072:	4680      	mov	r8, r0
 8001074:	4644      	mov	r4, r8
 8001076:	1e61      	subs	r1, r4, #1
 8001078:	418c      	sbcs	r4, r1
 800107a:	4314      	orrs	r4, r2
 800107c:	e0b1      	b.n	80011e2 <__aeabi_dsub+0x30e>
 800107e:	000c      	movs	r4, r1
 8001080:	4304      	orrs	r4, r0
 8001082:	d02a      	beq.n	80010da <__aeabi_dsub+0x206>
 8001084:	46bb      	mov	fp, r7
 8001086:	42bd      	cmp	r5, r7
 8001088:	d02d      	beq.n	80010e6 <__aeabi_dsub+0x212>
 800108a:	4c61      	ldr	r4, [pc, #388]	; (8001210 <__aeabi_dsub+0x33c>)
 800108c:	46a4      	mov	ip, r4
 800108e:	44b4      	add	ip, r6
 8001090:	4664      	mov	r4, ip
 8001092:	2c00      	cmp	r4, #0
 8001094:	d05c      	beq.n	8001150 <__aeabi_dsub+0x27c>
 8001096:	1b94      	subs	r4, r2, r6
 8001098:	46a4      	mov	ip, r4
 800109a:	2e00      	cmp	r6, #0
 800109c:	d000      	beq.n	80010a0 <__aeabi_dsub+0x1cc>
 800109e:	e115      	b.n	80012cc <__aeabi_dsub+0x3f8>
 80010a0:	464d      	mov	r5, r9
 80010a2:	431d      	orrs	r5, r3
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dsub+0x1d4>
 80010a6:	e1c3      	b.n	8001430 <__aeabi_dsub+0x55c>
 80010a8:	1e65      	subs	r5, r4, #1
 80010aa:	2c01      	cmp	r4, #1
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dsub+0x1dc>
 80010ae:	e20c      	b.n	80014ca <__aeabi_dsub+0x5f6>
 80010b0:	4e55      	ldr	r6, [pc, #340]	; (8001208 <__aeabi_dsub+0x334>)
 80010b2:	42b4      	cmp	r4, r6
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x1e4>
 80010b6:	e1f8      	b.n	80014aa <__aeabi_dsub+0x5d6>
 80010b8:	46ac      	mov	ip, r5
 80010ba:	e10e      	b.n	80012da <__aeabi_dsub+0x406>
 80010bc:	000a      	movs	r2, r1
 80010be:	4302      	orrs	r2, r0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dsub+0x1f0>
 80010c2:	e136      	b.n	8001332 <__aeabi_dsub+0x45e>
 80010c4:	0022      	movs	r2, r4
 80010c6:	3a01      	subs	r2, #1
 80010c8:	2c01      	cmp	r4, #1
 80010ca:	d100      	bne.n	80010ce <__aeabi_dsub+0x1fa>
 80010cc:	e1c6      	b.n	800145c <__aeabi_dsub+0x588>
 80010ce:	4c4e      	ldr	r4, [pc, #312]	; (8001208 <__aeabi_dsub+0x334>)
 80010d0:	45a4      	cmp	ip, r4
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dsub+0x202>
 80010d4:	e0f4      	b.n	80012c0 <__aeabi_dsub+0x3ec>
 80010d6:	4694      	mov	ip, r2
 80010d8:	e731      	b.n	8000f3e <__aeabi_dsub+0x6a>
 80010da:	2401      	movs	r4, #1
 80010dc:	4067      	eors	r7, r4
 80010de:	46bb      	mov	fp, r7
 80010e0:	42bd      	cmp	r5, r7
 80010e2:	d000      	beq.n	80010e6 <__aeabi_dsub+0x212>
 80010e4:	e71c      	b.n	8000f20 <__aeabi_dsub+0x4c>
 80010e6:	4c4a      	ldr	r4, [pc, #296]	; (8001210 <__aeabi_dsub+0x33c>)
 80010e8:	46a4      	mov	ip, r4
 80010ea:	44b4      	add	ip, r6
 80010ec:	4664      	mov	r4, ip
 80010ee:	2c00      	cmp	r4, #0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dsub+0x220>
 80010f2:	e0cf      	b.n	8001294 <__aeabi_dsub+0x3c0>
 80010f4:	1b94      	subs	r4, r2, r6
 80010f6:	46a4      	mov	ip, r4
 80010f8:	2e00      	cmp	r6, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_dsub+0x22a>
 80010fc:	e15c      	b.n	80013b8 <__aeabi_dsub+0x4e4>
 80010fe:	4e42      	ldr	r6, [pc, #264]	; (8001208 <__aeabi_dsub+0x334>)
 8001100:	42b2      	cmp	r2, r6
 8001102:	d100      	bne.n	8001106 <__aeabi_dsub+0x232>
 8001104:	e1ec      	b.n	80014e0 <__aeabi_dsub+0x60c>
 8001106:	2680      	movs	r6, #128	; 0x80
 8001108:	0436      	lsls	r6, r6, #16
 800110a:	4333      	orrs	r3, r6
 800110c:	4664      	mov	r4, ip
 800110e:	2c38      	cmp	r4, #56	; 0x38
 8001110:	dd00      	ble.n	8001114 <__aeabi_dsub+0x240>
 8001112:	e1b3      	b.n	800147c <__aeabi_dsub+0x5a8>
 8001114:	2c1f      	cmp	r4, #31
 8001116:	dd00      	ble.n	800111a <__aeabi_dsub+0x246>
 8001118:	e238      	b.n	800158c <__aeabi_dsub+0x6b8>
 800111a:	2620      	movs	r6, #32
 800111c:	1b36      	subs	r6, r6, r4
 800111e:	001c      	movs	r4, r3
 8001120:	40b4      	lsls	r4, r6
 8001122:	464f      	mov	r7, r9
 8001124:	46a0      	mov	r8, r4
 8001126:	4664      	mov	r4, ip
 8001128:	40e7      	lsrs	r7, r4
 800112a:	4644      	mov	r4, r8
 800112c:	433c      	orrs	r4, r7
 800112e:	464f      	mov	r7, r9
 8001130:	40b7      	lsls	r7, r6
 8001132:	003e      	movs	r6, r7
 8001134:	1e77      	subs	r7, r6, #1
 8001136:	41be      	sbcs	r6, r7
 8001138:	4334      	orrs	r4, r6
 800113a:	4666      	mov	r6, ip
 800113c:	40f3      	lsrs	r3, r6
 800113e:	18c9      	adds	r1, r1, r3
 8001140:	1824      	adds	r4, r4, r0
 8001142:	4284      	cmp	r4, r0
 8001144:	419b      	sbcs	r3, r3
 8001146:	425b      	negs	r3, r3
 8001148:	4698      	mov	r8, r3
 800114a:	0016      	movs	r6, r2
 800114c:	4488      	add	r8, r1
 800114e:	e04e      	b.n	80011ee <__aeabi_dsub+0x31a>
 8001150:	4a30      	ldr	r2, [pc, #192]	; (8001214 <__aeabi_dsub+0x340>)
 8001152:	1c74      	adds	r4, r6, #1
 8001154:	4214      	tst	r4, r2
 8001156:	d000      	beq.n	800115a <__aeabi_dsub+0x286>
 8001158:	e0d6      	b.n	8001308 <__aeabi_dsub+0x434>
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	2e00      	cmp	r6, #0
 8001160:	d000      	beq.n	8001164 <__aeabi_dsub+0x290>
 8001162:	e15b      	b.n	800141c <__aeabi_dsub+0x548>
 8001164:	2a00      	cmp	r2, #0
 8001166:	d100      	bne.n	800116a <__aeabi_dsub+0x296>
 8001168:	e1a5      	b.n	80014b6 <__aeabi_dsub+0x5e2>
 800116a:	000a      	movs	r2, r1
 800116c:	4302      	orrs	r2, r0
 800116e:	d000      	beq.n	8001172 <__aeabi_dsub+0x29e>
 8001170:	e1bb      	b.n	80014ea <__aeabi_dsub+0x616>
 8001172:	464a      	mov	r2, r9
 8001174:	0759      	lsls	r1, r3, #29
 8001176:	08d2      	lsrs	r2, r2, #3
 8001178:	430a      	orrs	r2, r1
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	e027      	b.n	80011ce <__aeabi_dsub+0x2fa>
 800117e:	000a      	movs	r2, r1
 8001180:	4302      	orrs	r2, r0
 8001182:	d100      	bne.n	8001186 <__aeabi_dsub+0x2b2>
 8001184:	e174      	b.n	8001470 <__aeabi_dsub+0x59c>
 8001186:	0022      	movs	r2, r4
 8001188:	3a01      	subs	r2, #1
 800118a:	2c01      	cmp	r4, #1
 800118c:	d005      	beq.n	800119a <__aeabi_dsub+0x2c6>
 800118e:	4c1e      	ldr	r4, [pc, #120]	; (8001208 <__aeabi_dsub+0x334>)
 8001190:	45a4      	cmp	ip, r4
 8001192:	d100      	bne.n	8001196 <__aeabi_dsub+0x2c2>
 8001194:	e094      	b.n	80012c0 <__aeabi_dsub+0x3ec>
 8001196:	4694      	mov	ip, r2
 8001198:	e759      	b.n	800104e <__aeabi_dsub+0x17a>
 800119a:	4448      	add	r0, r9
 800119c:	4548      	cmp	r0, r9
 800119e:	4192      	sbcs	r2, r2
 80011a0:	185b      	adds	r3, r3, r1
 80011a2:	4698      	mov	r8, r3
 80011a4:	0004      	movs	r4, r0
 80011a6:	4252      	negs	r2, r2
 80011a8:	4490      	add	r8, r2
 80011aa:	4643      	mov	r3, r8
 80011ac:	2602      	movs	r6, #2
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	d500      	bpl.n	80011b4 <__aeabi_dsub+0x2e0>
 80011b2:	e0c4      	b.n	800133e <__aeabi_dsub+0x46a>
 80011b4:	3e01      	subs	r6, #1
 80011b6:	0763      	lsls	r3, r4, #29
 80011b8:	d000      	beq.n	80011bc <__aeabi_dsub+0x2e8>
 80011ba:	e711      	b.n	8000fe0 <__aeabi_dsub+0x10c>
 80011bc:	4643      	mov	r3, r8
 80011be:	46b4      	mov	ip, r6
 80011c0:	0759      	lsls	r1, r3, #29
 80011c2:	08e2      	lsrs	r2, r4, #3
 80011c4:	430a      	orrs	r2, r1
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	490f      	ldr	r1, [pc, #60]	; (8001208 <__aeabi_dsub+0x334>)
 80011ca:	458c      	cmp	ip, r1
 80011cc:	d040      	beq.n	8001250 <__aeabi_dsub+0x37c>
 80011ce:	4661      	mov	r1, ip
 80011d0:	031b      	lsls	r3, r3, #12
 80011d2:	0549      	lsls	r1, r1, #21
 80011d4:	0b1b      	lsrs	r3, r3, #12
 80011d6:	0d49      	lsrs	r1, r1, #21
 80011d8:	e720      	b.n	800101c <__aeabi_dsub+0x148>
 80011da:	4301      	orrs	r1, r0
 80011dc:	000c      	movs	r4, r1
 80011de:	1e61      	subs	r1, r4, #1
 80011e0:	418c      	sbcs	r4, r1
 80011e2:	444c      	add	r4, r9
 80011e4:	454c      	cmp	r4, r9
 80011e6:	4192      	sbcs	r2, r2
 80011e8:	4252      	negs	r2, r2
 80011ea:	4690      	mov	r8, r2
 80011ec:	4498      	add	r8, r3
 80011ee:	4643      	mov	r3, r8
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	d5e0      	bpl.n	80011b6 <__aeabi_dsub+0x2e2>
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__aeabi_dsub+0x334>)
 80011f6:	3601      	adds	r6, #1
 80011f8:	429e      	cmp	r6, r3
 80011fa:	d000      	beq.n	80011fe <__aeabi_dsub+0x32a>
 80011fc:	e09f      	b.n	800133e <__aeabi_dsub+0x46a>
 80011fe:	0031      	movs	r1, r6
 8001200:	2300      	movs	r3, #0
 8001202:	2200      	movs	r2, #0
 8001204:	e70a      	b.n	800101c <__aeabi_dsub+0x148>
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	000007ff 	.word	0x000007ff
 800120c:	ff7fffff 	.word	0xff7fffff
 8001210:	fffff801 	.word	0xfffff801
 8001214:	000007fe 	.word	0x000007fe
 8001218:	2a00      	cmp	r2, #0
 800121a:	d100      	bne.n	800121e <__aeabi_dsub+0x34a>
 800121c:	e160      	b.n	80014e0 <__aeabi_dsub+0x60c>
 800121e:	000a      	movs	r2, r1
 8001220:	4302      	orrs	r2, r0
 8001222:	d04d      	beq.n	80012c0 <__aeabi_dsub+0x3ec>
 8001224:	464a      	mov	r2, r9
 8001226:	075c      	lsls	r4, r3, #29
 8001228:	08d2      	lsrs	r2, r2, #3
 800122a:	4322      	orrs	r2, r4
 800122c:	2480      	movs	r4, #128	; 0x80
 800122e:	08db      	lsrs	r3, r3, #3
 8001230:	0324      	lsls	r4, r4, #12
 8001232:	4223      	tst	r3, r4
 8001234:	d007      	beq.n	8001246 <__aeabi_dsub+0x372>
 8001236:	08ce      	lsrs	r6, r1, #3
 8001238:	4226      	tst	r6, r4
 800123a:	d104      	bne.n	8001246 <__aeabi_dsub+0x372>
 800123c:	465d      	mov	r5, fp
 800123e:	0033      	movs	r3, r6
 8001240:	08c2      	lsrs	r2, r0, #3
 8001242:	0749      	lsls	r1, r1, #29
 8001244:	430a      	orrs	r2, r1
 8001246:	0f51      	lsrs	r1, r2, #29
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	08d2      	lsrs	r2, r2, #3
 800124c:	0749      	lsls	r1, r1, #29
 800124e:	430a      	orrs	r2, r1
 8001250:	0011      	movs	r1, r2
 8001252:	4319      	orrs	r1, r3
 8001254:	d100      	bne.n	8001258 <__aeabi_dsub+0x384>
 8001256:	e1c8      	b.n	80015ea <__aeabi_dsub+0x716>
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0309      	lsls	r1, r1, #12
 800125c:	430b      	orrs	r3, r1
 800125e:	031b      	lsls	r3, r3, #12
 8001260:	49d5      	ldr	r1, [pc, #852]	; (80015b8 <__aeabi_dsub+0x6e4>)
 8001262:	0b1b      	lsrs	r3, r3, #12
 8001264:	e6da      	b.n	800101c <__aeabi_dsub+0x148>
 8001266:	49d5      	ldr	r1, [pc, #852]	; (80015bc <__aeabi_dsub+0x6e8>)
 8001268:	1ab6      	subs	r6, r6, r2
 800126a:	400b      	ands	r3, r1
 800126c:	4698      	mov	r8, r3
 800126e:	e6b5      	b.n	8000fdc <__aeabi_dsub+0x108>
 8001270:	0020      	movs	r0, r4
 8001272:	f000 fa65 	bl	8001740 <__clzsi2>
 8001276:	0002      	movs	r2, r0
 8001278:	3218      	adds	r2, #24
 800127a:	2a1f      	cmp	r2, #31
 800127c:	dc00      	bgt.n	8001280 <__aeabi_dsub+0x3ac>
 800127e:	e68f      	b.n	8000fa0 <__aeabi_dsub+0xcc>
 8001280:	0023      	movs	r3, r4
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	2400      	movs	r4, #0
 8001288:	e692      	b.n	8000fb0 <__aeabi_dsub+0xdc>
 800128a:	4308      	orrs	r0, r1
 800128c:	0002      	movs	r2, r0
 800128e:	1e50      	subs	r0, r2, #1
 8001290:	4182      	sbcs	r2, r0
 8001292:	e66d      	b.n	8000f70 <__aeabi_dsub+0x9c>
 8001294:	4cca      	ldr	r4, [pc, #808]	; (80015c0 <__aeabi_dsub+0x6ec>)
 8001296:	1c72      	adds	r2, r6, #1
 8001298:	4222      	tst	r2, r4
 800129a:	d000      	beq.n	800129e <__aeabi_dsub+0x3ca>
 800129c:	e0ad      	b.n	80013fa <__aeabi_dsub+0x526>
 800129e:	464a      	mov	r2, r9
 80012a0:	431a      	orrs	r2, r3
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d1b8      	bne.n	8001218 <__aeabi_dsub+0x344>
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d100      	bne.n	80012ac <__aeabi_dsub+0x3d8>
 80012aa:	e158      	b.n	800155e <__aeabi_dsub+0x68a>
 80012ac:	000a      	movs	r2, r1
 80012ae:	4302      	orrs	r2, r0
 80012b0:	d000      	beq.n	80012b4 <__aeabi_dsub+0x3e0>
 80012b2:	e159      	b.n	8001568 <__aeabi_dsub+0x694>
 80012b4:	464a      	mov	r2, r9
 80012b6:	0759      	lsls	r1, r3, #29
 80012b8:	08d2      	lsrs	r2, r2, #3
 80012ba:	430a      	orrs	r2, r1
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	e786      	b.n	80011ce <__aeabi_dsub+0x2fa>
 80012c0:	464a      	mov	r2, r9
 80012c2:	0759      	lsls	r1, r3, #29
 80012c4:	08d2      	lsrs	r2, r2, #3
 80012c6:	430a      	orrs	r2, r1
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	e7c1      	b.n	8001250 <__aeabi_dsub+0x37c>
 80012cc:	4dba      	ldr	r5, [pc, #744]	; (80015b8 <__aeabi_dsub+0x6e4>)
 80012ce:	42aa      	cmp	r2, r5
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dsub+0x400>
 80012d2:	e11e      	b.n	8001512 <__aeabi_dsub+0x63e>
 80012d4:	2580      	movs	r5, #128	; 0x80
 80012d6:	042d      	lsls	r5, r5, #16
 80012d8:	432b      	orrs	r3, r5
 80012da:	4664      	mov	r4, ip
 80012dc:	2c38      	cmp	r4, #56	; 0x38
 80012de:	dc5d      	bgt.n	800139c <__aeabi_dsub+0x4c8>
 80012e0:	2c1f      	cmp	r4, #31
 80012e2:	dd00      	ble.n	80012e6 <__aeabi_dsub+0x412>
 80012e4:	e0d0      	b.n	8001488 <__aeabi_dsub+0x5b4>
 80012e6:	2520      	movs	r5, #32
 80012e8:	4667      	mov	r7, ip
 80012ea:	1b2d      	subs	r5, r5, r4
 80012ec:	464e      	mov	r6, r9
 80012ee:	001c      	movs	r4, r3
 80012f0:	40fe      	lsrs	r6, r7
 80012f2:	40ac      	lsls	r4, r5
 80012f4:	4334      	orrs	r4, r6
 80012f6:	464e      	mov	r6, r9
 80012f8:	40ae      	lsls	r6, r5
 80012fa:	0035      	movs	r5, r6
 80012fc:	40fb      	lsrs	r3, r7
 80012fe:	1e6e      	subs	r6, r5, #1
 8001300:	41b5      	sbcs	r5, r6
 8001302:	1ac9      	subs	r1, r1, r3
 8001304:	432c      	orrs	r4, r5
 8001306:	e04e      	b.n	80013a6 <__aeabi_dsub+0x4d2>
 8001308:	464a      	mov	r2, r9
 800130a:	1a14      	subs	r4, r2, r0
 800130c:	45a1      	cmp	r9, r4
 800130e:	4192      	sbcs	r2, r2
 8001310:	4252      	negs	r2, r2
 8001312:	4690      	mov	r8, r2
 8001314:	1a5f      	subs	r7, r3, r1
 8001316:	003a      	movs	r2, r7
 8001318:	4647      	mov	r7, r8
 800131a:	1bd2      	subs	r2, r2, r7
 800131c:	4690      	mov	r8, r2
 800131e:	0212      	lsls	r2, r2, #8
 8001320:	d500      	bpl.n	8001324 <__aeabi_dsub+0x450>
 8001322:	e08b      	b.n	800143c <__aeabi_dsub+0x568>
 8001324:	4642      	mov	r2, r8
 8001326:	4322      	orrs	r2, r4
 8001328:	d000      	beq.n	800132c <__aeabi_dsub+0x458>
 800132a:	e630      	b.n	8000f8e <__aeabi_dsub+0xba>
 800132c:	2300      	movs	r3, #0
 800132e:	2500      	movs	r5, #0
 8001330:	e74d      	b.n	80011ce <__aeabi_dsub+0x2fa>
 8001332:	464a      	mov	r2, r9
 8001334:	0759      	lsls	r1, r3, #29
 8001336:	08d2      	lsrs	r2, r2, #3
 8001338:	430a      	orrs	r2, r1
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	e744      	b.n	80011c8 <__aeabi_dsub+0x2f4>
 800133e:	4642      	mov	r2, r8
 8001340:	4b9e      	ldr	r3, [pc, #632]	; (80015bc <__aeabi_dsub+0x6e8>)
 8001342:	0861      	lsrs	r1, r4, #1
 8001344:	401a      	ands	r2, r3
 8001346:	0013      	movs	r3, r2
 8001348:	2201      	movs	r2, #1
 800134a:	4014      	ands	r4, r2
 800134c:	430c      	orrs	r4, r1
 800134e:	07da      	lsls	r2, r3, #31
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	4698      	mov	r8, r3
 8001354:	4314      	orrs	r4, r2
 8001356:	e641      	b.n	8000fdc <__aeabi_dsub+0x108>
 8001358:	001a      	movs	r2, r3
 800135a:	3e1f      	subs	r6, #31
 800135c:	40f2      	lsrs	r2, r6
 800135e:	0016      	movs	r6, r2
 8001360:	2920      	cmp	r1, #32
 8001362:	d003      	beq.n	800136c <__aeabi_dsub+0x498>
 8001364:	2240      	movs	r2, #64	; 0x40
 8001366:	1a51      	subs	r1, r2, r1
 8001368:	408b      	lsls	r3, r1
 800136a:	431c      	orrs	r4, r3
 800136c:	1e62      	subs	r2, r4, #1
 800136e:	4194      	sbcs	r4, r2
 8001370:	2300      	movs	r3, #0
 8001372:	4334      	orrs	r4, r6
 8001374:	4698      	mov	r8, r3
 8001376:	2600      	movs	r6, #0
 8001378:	e71d      	b.n	80011b6 <__aeabi_dsub+0x2e2>
 800137a:	000c      	movs	r4, r1
 800137c:	3a20      	subs	r2, #32
 800137e:	40d4      	lsrs	r4, r2
 8001380:	0022      	movs	r2, r4
 8001382:	4664      	mov	r4, ip
 8001384:	2c20      	cmp	r4, #32
 8001386:	d004      	beq.n	8001392 <__aeabi_dsub+0x4be>
 8001388:	2740      	movs	r7, #64	; 0x40
 800138a:	1b3f      	subs	r7, r7, r4
 800138c:	40b9      	lsls	r1, r7
 800138e:	4308      	orrs	r0, r1
 8001390:	4680      	mov	r8, r0
 8001392:	4644      	mov	r4, r8
 8001394:	1e61      	subs	r1, r4, #1
 8001396:	418c      	sbcs	r4, r1
 8001398:	4322      	orrs	r2, r4
 800139a:	e5e9      	b.n	8000f70 <__aeabi_dsub+0x9c>
 800139c:	464c      	mov	r4, r9
 800139e:	4323      	orrs	r3, r4
 80013a0:	001c      	movs	r4, r3
 80013a2:	1e63      	subs	r3, r4, #1
 80013a4:	419c      	sbcs	r4, r3
 80013a6:	1b04      	subs	r4, r0, r4
 80013a8:	42a0      	cmp	r0, r4
 80013aa:	419b      	sbcs	r3, r3
 80013ac:	425b      	negs	r3, r3
 80013ae:	1acb      	subs	r3, r1, r3
 80013b0:	4698      	mov	r8, r3
 80013b2:	465d      	mov	r5, fp
 80013b4:	0016      	movs	r6, r2
 80013b6:	e5e2      	b.n	8000f7e <__aeabi_dsub+0xaa>
 80013b8:	464e      	mov	r6, r9
 80013ba:	431e      	orrs	r6, r3
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dsub+0x4ec>
 80013be:	e0ae      	b.n	800151e <__aeabi_dsub+0x64a>
 80013c0:	1e66      	subs	r6, r4, #1
 80013c2:	2c01      	cmp	r4, #1
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dsub+0x4f4>
 80013c6:	e0fd      	b.n	80015c4 <__aeabi_dsub+0x6f0>
 80013c8:	4f7b      	ldr	r7, [pc, #492]	; (80015b8 <__aeabi_dsub+0x6e4>)
 80013ca:	42bc      	cmp	r4, r7
 80013cc:	d100      	bne.n	80013d0 <__aeabi_dsub+0x4fc>
 80013ce:	e107      	b.n	80015e0 <__aeabi_dsub+0x70c>
 80013d0:	46b4      	mov	ip, r6
 80013d2:	e69b      	b.n	800110c <__aeabi_dsub+0x238>
 80013d4:	4664      	mov	r4, ip
 80013d6:	2220      	movs	r2, #32
 80013d8:	1b12      	subs	r2, r2, r4
 80013da:	000c      	movs	r4, r1
 80013dc:	4094      	lsls	r4, r2
 80013de:	0007      	movs	r7, r0
 80013e0:	4090      	lsls	r0, r2
 80013e2:	46a0      	mov	r8, r4
 80013e4:	4664      	mov	r4, ip
 80013e6:	1e42      	subs	r2, r0, #1
 80013e8:	4190      	sbcs	r0, r2
 80013ea:	4662      	mov	r2, ip
 80013ec:	40e7      	lsrs	r7, r4
 80013ee:	4644      	mov	r4, r8
 80013f0:	40d1      	lsrs	r1, r2
 80013f2:	433c      	orrs	r4, r7
 80013f4:	4304      	orrs	r4, r0
 80013f6:	185b      	adds	r3, r3, r1
 80013f8:	e6f3      	b.n	80011e2 <__aeabi_dsub+0x30e>
 80013fa:	4c6f      	ldr	r4, [pc, #444]	; (80015b8 <__aeabi_dsub+0x6e4>)
 80013fc:	42a2      	cmp	r2, r4
 80013fe:	d100      	bne.n	8001402 <__aeabi_dsub+0x52e>
 8001400:	e0d5      	b.n	80015ae <__aeabi_dsub+0x6da>
 8001402:	4448      	add	r0, r9
 8001404:	185b      	adds	r3, r3, r1
 8001406:	4548      	cmp	r0, r9
 8001408:	4189      	sbcs	r1, r1
 800140a:	4249      	negs	r1, r1
 800140c:	185b      	adds	r3, r3, r1
 800140e:	07dc      	lsls	r4, r3, #31
 8001410:	0840      	lsrs	r0, r0, #1
 8001412:	085b      	lsrs	r3, r3, #1
 8001414:	4698      	mov	r8, r3
 8001416:	0016      	movs	r6, r2
 8001418:	4304      	orrs	r4, r0
 800141a:	e6cc      	b.n	80011b6 <__aeabi_dsub+0x2e2>
 800141c:	2a00      	cmp	r2, #0
 800141e:	d000      	beq.n	8001422 <__aeabi_dsub+0x54e>
 8001420:	e082      	b.n	8001528 <__aeabi_dsub+0x654>
 8001422:	000a      	movs	r2, r1
 8001424:	4302      	orrs	r2, r0
 8001426:	d140      	bne.n	80014aa <__aeabi_dsub+0x5d6>
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	2500      	movs	r5, #0
 800142c:	031b      	lsls	r3, r3, #12
 800142e:	e713      	b.n	8001258 <__aeabi_dsub+0x384>
 8001430:	074b      	lsls	r3, r1, #29
 8001432:	08c2      	lsrs	r2, r0, #3
 8001434:	431a      	orrs	r2, r3
 8001436:	465d      	mov	r5, fp
 8001438:	08cb      	lsrs	r3, r1, #3
 800143a:	e6c5      	b.n	80011c8 <__aeabi_dsub+0x2f4>
 800143c:	464a      	mov	r2, r9
 800143e:	1a84      	subs	r4, r0, r2
 8001440:	42a0      	cmp	r0, r4
 8001442:	4192      	sbcs	r2, r2
 8001444:	1acb      	subs	r3, r1, r3
 8001446:	4252      	negs	r2, r2
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	4698      	mov	r8, r3
 800144c:	465d      	mov	r5, fp
 800144e:	e59e      	b.n	8000f8e <__aeabi_dsub+0xba>
 8001450:	464a      	mov	r2, r9
 8001452:	0759      	lsls	r1, r3, #29
 8001454:	08d2      	lsrs	r2, r2, #3
 8001456:	430a      	orrs	r2, r1
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	e6f9      	b.n	8001250 <__aeabi_dsub+0x37c>
 800145c:	464a      	mov	r2, r9
 800145e:	1a14      	subs	r4, r2, r0
 8001460:	45a1      	cmp	r9, r4
 8001462:	4192      	sbcs	r2, r2
 8001464:	1a5b      	subs	r3, r3, r1
 8001466:	4252      	negs	r2, r2
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	4698      	mov	r8, r3
 800146c:	2601      	movs	r6, #1
 800146e:	e586      	b.n	8000f7e <__aeabi_dsub+0xaa>
 8001470:	464a      	mov	r2, r9
 8001472:	0759      	lsls	r1, r3, #29
 8001474:	08d2      	lsrs	r2, r2, #3
 8001476:	430a      	orrs	r2, r1
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	e6a5      	b.n	80011c8 <__aeabi_dsub+0x2f4>
 800147c:	464c      	mov	r4, r9
 800147e:	4323      	orrs	r3, r4
 8001480:	001c      	movs	r4, r3
 8001482:	1e63      	subs	r3, r4, #1
 8001484:	419c      	sbcs	r4, r3
 8001486:	e65b      	b.n	8001140 <__aeabi_dsub+0x26c>
 8001488:	4665      	mov	r5, ip
 800148a:	001e      	movs	r6, r3
 800148c:	3d20      	subs	r5, #32
 800148e:	40ee      	lsrs	r6, r5
 8001490:	2c20      	cmp	r4, #32
 8001492:	d005      	beq.n	80014a0 <__aeabi_dsub+0x5cc>
 8001494:	2540      	movs	r5, #64	; 0x40
 8001496:	1b2d      	subs	r5, r5, r4
 8001498:	40ab      	lsls	r3, r5
 800149a:	464c      	mov	r4, r9
 800149c:	431c      	orrs	r4, r3
 800149e:	46a2      	mov	sl, r4
 80014a0:	4654      	mov	r4, sl
 80014a2:	1e63      	subs	r3, r4, #1
 80014a4:	419c      	sbcs	r4, r3
 80014a6:	4334      	orrs	r4, r6
 80014a8:	e77d      	b.n	80013a6 <__aeabi_dsub+0x4d2>
 80014aa:	074b      	lsls	r3, r1, #29
 80014ac:	08c2      	lsrs	r2, r0, #3
 80014ae:	431a      	orrs	r2, r3
 80014b0:	465d      	mov	r5, fp
 80014b2:	08cb      	lsrs	r3, r1, #3
 80014b4:	e6cc      	b.n	8001250 <__aeabi_dsub+0x37c>
 80014b6:	000a      	movs	r2, r1
 80014b8:	4302      	orrs	r2, r0
 80014ba:	d100      	bne.n	80014be <__aeabi_dsub+0x5ea>
 80014bc:	e736      	b.n	800132c <__aeabi_dsub+0x458>
 80014be:	074b      	lsls	r3, r1, #29
 80014c0:	08c2      	lsrs	r2, r0, #3
 80014c2:	431a      	orrs	r2, r3
 80014c4:	465d      	mov	r5, fp
 80014c6:	08cb      	lsrs	r3, r1, #3
 80014c8:	e681      	b.n	80011ce <__aeabi_dsub+0x2fa>
 80014ca:	464a      	mov	r2, r9
 80014cc:	1a84      	subs	r4, r0, r2
 80014ce:	42a0      	cmp	r0, r4
 80014d0:	4192      	sbcs	r2, r2
 80014d2:	1acb      	subs	r3, r1, r3
 80014d4:	4252      	negs	r2, r2
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	4698      	mov	r8, r3
 80014da:	465d      	mov	r5, fp
 80014dc:	2601      	movs	r6, #1
 80014de:	e54e      	b.n	8000f7e <__aeabi_dsub+0xaa>
 80014e0:	074b      	lsls	r3, r1, #29
 80014e2:	08c2      	lsrs	r2, r0, #3
 80014e4:	431a      	orrs	r2, r3
 80014e6:	08cb      	lsrs	r3, r1, #3
 80014e8:	e6b2      	b.n	8001250 <__aeabi_dsub+0x37c>
 80014ea:	464a      	mov	r2, r9
 80014ec:	1a14      	subs	r4, r2, r0
 80014ee:	45a1      	cmp	r9, r4
 80014f0:	4192      	sbcs	r2, r2
 80014f2:	1a5f      	subs	r7, r3, r1
 80014f4:	4252      	negs	r2, r2
 80014f6:	1aba      	subs	r2, r7, r2
 80014f8:	4690      	mov	r8, r2
 80014fa:	0212      	lsls	r2, r2, #8
 80014fc:	d56b      	bpl.n	80015d6 <__aeabi_dsub+0x702>
 80014fe:	464a      	mov	r2, r9
 8001500:	1a84      	subs	r4, r0, r2
 8001502:	42a0      	cmp	r0, r4
 8001504:	4192      	sbcs	r2, r2
 8001506:	1acb      	subs	r3, r1, r3
 8001508:	4252      	negs	r2, r2
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	4698      	mov	r8, r3
 800150e:	465d      	mov	r5, fp
 8001510:	e564      	b.n	8000fdc <__aeabi_dsub+0x108>
 8001512:	074b      	lsls	r3, r1, #29
 8001514:	08c2      	lsrs	r2, r0, #3
 8001516:	431a      	orrs	r2, r3
 8001518:	465d      	mov	r5, fp
 800151a:	08cb      	lsrs	r3, r1, #3
 800151c:	e698      	b.n	8001250 <__aeabi_dsub+0x37c>
 800151e:	074b      	lsls	r3, r1, #29
 8001520:	08c2      	lsrs	r2, r0, #3
 8001522:	431a      	orrs	r2, r3
 8001524:	08cb      	lsrs	r3, r1, #3
 8001526:	e64f      	b.n	80011c8 <__aeabi_dsub+0x2f4>
 8001528:	000a      	movs	r2, r1
 800152a:	4302      	orrs	r2, r0
 800152c:	d090      	beq.n	8001450 <__aeabi_dsub+0x57c>
 800152e:	464a      	mov	r2, r9
 8001530:	075c      	lsls	r4, r3, #29
 8001532:	08d2      	lsrs	r2, r2, #3
 8001534:	4314      	orrs	r4, r2
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	0312      	lsls	r2, r2, #12
 800153c:	4213      	tst	r3, r2
 800153e:	d008      	beq.n	8001552 <__aeabi_dsub+0x67e>
 8001540:	08ce      	lsrs	r6, r1, #3
 8001542:	4216      	tst	r6, r2
 8001544:	d105      	bne.n	8001552 <__aeabi_dsub+0x67e>
 8001546:	08c0      	lsrs	r0, r0, #3
 8001548:	0749      	lsls	r1, r1, #29
 800154a:	4308      	orrs	r0, r1
 800154c:	0004      	movs	r4, r0
 800154e:	465d      	mov	r5, fp
 8001550:	0033      	movs	r3, r6
 8001552:	0f61      	lsrs	r1, r4, #29
 8001554:	00e2      	lsls	r2, r4, #3
 8001556:	0749      	lsls	r1, r1, #29
 8001558:	08d2      	lsrs	r2, r2, #3
 800155a:	430a      	orrs	r2, r1
 800155c:	e678      	b.n	8001250 <__aeabi_dsub+0x37c>
 800155e:	074b      	lsls	r3, r1, #29
 8001560:	08c2      	lsrs	r2, r0, #3
 8001562:	431a      	orrs	r2, r3
 8001564:	08cb      	lsrs	r3, r1, #3
 8001566:	e632      	b.n	80011ce <__aeabi_dsub+0x2fa>
 8001568:	4448      	add	r0, r9
 800156a:	185b      	adds	r3, r3, r1
 800156c:	4548      	cmp	r0, r9
 800156e:	4192      	sbcs	r2, r2
 8001570:	4698      	mov	r8, r3
 8001572:	4252      	negs	r2, r2
 8001574:	4490      	add	r8, r2
 8001576:	4643      	mov	r3, r8
 8001578:	0004      	movs	r4, r0
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	d400      	bmi.n	8001580 <__aeabi_dsub+0x6ac>
 800157e:	e61a      	b.n	80011b6 <__aeabi_dsub+0x2e2>
 8001580:	4642      	mov	r2, r8
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <__aeabi_dsub+0x6e8>)
 8001584:	2601      	movs	r6, #1
 8001586:	401a      	ands	r2, r3
 8001588:	4690      	mov	r8, r2
 800158a:	e614      	b.n	80011b6 <__aeabi_dsub+0x2e2>
 800158c:	4666      	mov	r6, ip
 800158e:	001f      	movs	r7, r3
 8001590:	3e20      	subs	r6, #32
 8001592:	40f7      	lsrs	r7, r6
 8001594:	2c20      	cmp	r4, #32
 8001596:	d005      	beq.n	80015a4 <__aeabi_dsub+0x6d0>
 8001598:	2640      	movs	r6, #64	; 0x40
 800159a:	1b36      	subs	r6, r6, r4
 800159c:	40b3      	lsls	r3, r6
 800159e:	464c      	mov	r4, r9
 80015a0:	431c      	orrs	r4, r3
 80015a2:	46a2      	mov	sl, r4
 80015a4:	4654      	mov	r4, sl
 80015a6:	1e63      	subs	r3, r4, #1
 80015a8:	419c      	sbcs	r4, r3
 80015aa:	433c      	orrs	r4, r7
 80015ac:	e5c8      	b.n	8001140 <__aeabi_dsub+0x26c>
 80015ae:	0011      	movs	r1, r2
 80015b0:	2300      	movs	r3, #0
 80015b2:	2200      	movs	r2, #0
 80015b4:	e532      	b.n	800101c <__aeabi_dsub+0x148>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	000007ff 	.word	0x000007ff
 80015bc:	ff7fffff 	.word	0xff7fffff
 80015c0:	000007fe 	.word	0x000007fe
 80015c4:	464a      	mov	r2, r9
 80015c6:	1814      	adds	r4, r2, r0
 80015c8:	4284      	cmp	r4, r0
 80015ca:	4192      	sbcs	r2, r2
 80015cc:	185b      	adds	r3, r3, r1
 80015ce:	4698      	mov	r8, r3
 80015d0:	4252      	negs	r2, r2
 80015d2:	4490      	add	r8, r2
 80015d4:	e5e9      	b.n	80011aa <__aeabi_dsub+0x2d6>
 80015d6:	4642      	mov	r2, r8
 80015d8:	4322      	orrs	r2, r4
 80015da:	d100      	bne.n	80015de <__aeabi_dsub+0x70a>
 80015dc:	e6a6      	b.n	800132c <__aeabi_dsub+0x458>
 80015de:	e5ea      	b.n	80011b6 <__aeabi_dsub+0x2e2>
 80015e0:	074b      	lsls	r3, r1, #29
 80015e2:	08c2      	lsrs	r2, r0, #3
 80015e4:	431a      	orrs	r2, r3
 80015e6:	08cb      	lsrs	r3, r1, #3
 80015e8:	e632      	b.n	8001250 <__aeabi_dsub+0x37c>
 80015ea:	2200      	movs	r2, #0
 80015ec:	4901      	ldr	r1, [pc, #4]	; (80015f4 <__aeabi_dsub+0x720>)
 80015ee:	0013      	movs	r3, r2
 80015f0:	e514      	b.n	800101c <__aeabi_dsub+0x148>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	000007ff 	.word	0x000007ff

080015f8 <__aeabi_d2iz>:
 80015f8:	000a      	movs	r2, r1
 80015fa:	b530      	push	{r4, r5, lr}
 80015fc:	4c13      	ldr	r4, [pc, #76]	; (800164c <__aeabi_d2iz+0x54>)
 80015fe:	0053      	lsls	r3, r2, #1
 8001600:	0309      	lsls	r1, r1, #12
 8001602:	0005      	movs	r5, r0
 8001604:	0b09      	lsrs	r1, r1, #12
 8001606:	2000      	movs	r0, #0
 8001608:	0d5b      	lsrs	r3, r3, #21
 800160a:	0fd2      	lsrs	r2, r2, #31
 800160c:	42a3      	cmp	r3, r4
 800160e:	dd04      	ble.n	800161a <__aeabi_d2iz+0x22>
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <__aeabi_d2iz+0x58>)
 8001612:	4283      	cmp	r3, r0
 8001614:	dd02      	ble.n	800161c <__aeabi_d2iz+0x24>
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <__aeabi_d2iz+0x5c>)
 8001618:	18d0      	adds	r0, r2, r3
 800161a:	bd30      	pop	{r4, r5, pc}
 800161c:	2080      	movs	r0, #128	; 0x80
 800161e:	0340      	lsls	r0, r0, #13
 8001620:	4301      	orrs	r1, r0
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <__aeabi_d2iz+0x60>)
 8001624:	1ac0      	subs	r0, r0, r3
 8001626:	281f      	cmp	r0, #31
 8001628:	dd08      	ble.n	800163c <__aeabi_d2iz+0x44>
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <__aeabi_d2iz+0x64>)
 800162c:	1ac3      	subs	r3, r0, r3
 800162e:	40d9      	lsrs	r1, r3
 8001630:	000b      	movs	r3, r1
 8001632:	4258      	negs	r0, r3
 8001634:	2a00      	cmp	r2, #0
 8001636:	d1f0      	bne.n	800161a <__aeabi_d2iz+0x22>
 8001638:	0018      	movs	r0, r3
 800163a:	e7ee      	b.n	800161a <__aeabi_d2iz+0x22>
 800163c:	4c08      	ldr	r4, [pc, #32]	; (8001660 <__aeabi_d2iz+0x68>)
 800163e:	40c5      	lsrs	r5, r0
 8001640:	46a4      	mov	ip, r4
 8001642:	4463      	add	r3, ip
 8001644:	4099      	lsls	r1, r3
 8001646:	000b      	movs	r3, r1
 8001648:	432b      	orrs	r3, r5
 800164a:	e7f2      	b.n	8001632 <__aeabi_d2iz+0x3a>
 800164c:	000003fe 	.word	0x000003fe
 8001650:	0000041d 	.word	0x0000041d
 8001654:	7fffffff 	.word	0x7fffffff
 8001658:	00000433 	.word	0x00000433
 800165c:	00000413 	.word	0x00000413
 8001660:	fffffbed 	.word	0xfffffbed

08001664 <__aeabi_i2d>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	2800      	cmp	r0, #0
 8001668:	d016      	beq.n	8001698 <__aeabi_i2d+0x34>
 800166a:	17c3      	asrs	r3, r0, #31
 800166c:	18c5      	adds	r5, r0, r3
 800166e:	405d      	eors	r5, r3
 8001670:	0fc4      	lsrs	r4, r0, #31
 8001672:	0028      	movs	r0, r5
 8001674:	f000 f864 	bl	8001740 <__clzsi2>
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <__aeabi_i2d+0x5c>)
 800167a:	1a12      	subs	r2, r2, r0
 800167c:	280a      	cmp	r0, #10
 800167e:	dc16      	bgt.n	80016ae <__aeabi_i2d+0x4a>
 8001680:	0003      	movs	r3, r0
 8001682:	002e      	movs	r6, r5
 8001684:	3315      	adds	r3, #21
 8001686:	409e      	lsls	r6, r3
 8001688:	230b      	movs	r3, #11
 800168a:	1a18      	subs	r0, r3, r0
 800168c:	40c5      	lsrs	r5, r0
 800168e:	0553      	lsls	r3, r2, #21
 8001690:	032d      	lsls	r5, r5, #12
 8001692:	0b2d      	lsrs	r5, r5, #12
 8001694:	0d5b      	lsrs	r3, r3, #21
 8001696:	e003      	b.n	80016a0 <__aeabi_i2d+0x3c>
 8001698:	2400      	movs	r4, #0
 800169a:	2300      	movs	r3, #0
 800169c:	2500      	movs	r5, #0
 800169e:	2600      	movs	r6, #0
 80016a0:	051b      	lsls	r3, r3, #20
 80016a2:	432b      	orrs	r3, r5
 80016a4:	07e4      	lsls	r4, r4, #31
 80016a6:	4323      	orrs	r3, r4
 80016a8:	0030      	movs	r0, r6
 80016aa:	0019      	movs	r1, r3
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
 80016ae:	380b      	subs	r0, #11
 80016b0:	4085      	lsls	r5, r0
 80016b2:	0553      	lsls	r3, r2, #21
 80016b4:	032d      	lsls	r5, r5, #12
 80016b6:	2600      	movs	r6, #0
 80016b8:	0b2d      	lsrs	r5, r5, #12
 80016ba:	0d5b      	lsrs	r3, r3, #21
 80016bc:	e7f0      	b.n	80016a0 <__aeabi_i2d+0x3c>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	0000041e 	.word	0x0000041e

080016c4 <__aeabi_cdrcmple>:
 80016c4:	4684      	mov	ip, r0
 80016c6:	1c10      	adds	r0, r2, #0
 80016c8:	4662      	mov	r2, ip
 80016ca:	468c      	mov	ip, r1
 80016cc:	1c19      	adds	r1, r3, #0
 80016ce:	4663      	mov	r3, ip
 80016d0:	e000      	b.n	80016d4 <__aeabi_cdcmpeq>
 80016d2:	46c0      	nop			; (mov r8, r8)

080016d4 <__aeabi_cdcmpeq>:
 80016d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016d6:	f000 f8ff 	bl	80018d8 <__ledf2>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d401      	bmi.n	80016e2 <__aeabi_cdcmpeq+0xe>
 80016de:	2100      	movs	r1, #0
 80016e0:	42c8      	cmn	r0, r1
 80016e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016e4 <__aeabi_dcmpeq>:
 80016e4:	b510      	push	{r4, lr}
 80016e6:	f000 f849 	bl	800177c <__eqdf2>
 80016ea:	4240      	negs	r0, r0
 80016ec:	3001      	adds	r0, #1
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <__aeabi_dcmplt>:
 80016f0:	b510      	push	{r4, lr}
 80016f2:	f000 f8f1 	bl	80018d8 <__ledf2>
 80016f6:	2800      	cmp	r0, #0
 80016f8:	db01      	blt.n	80016fe <__aeabi_dcmplt+0xe>
 80016fa:	2000      	movs	r0, #0
 80016fc:	bd10      	pop	{r4, pc}
 80016fe:	2001      	movs	r0, #1
 8001700:	bd10      	pop	{r4, pc}
 8001702:	46c0      	nop			; (mov r8, r8)

08001704 <__aeabi_dcmple>:
 8001704:	b510      	push	{r4, lr}
 8001706:	f000 f8e7 	bl	80018d8 <__ledf2>
 800170a:	2800      	cmp	r0, #0
 800170c:	dd01      	ble.n	8001712 <__aeabi_dcmple+0xe>
 800170e:	2000      	movs	r0, #0
 8001710:	bd10      	pop	{r4, pc}
 8001712:	2001      	movs	r0, #1
 8001714:	bd10      	pop	{r4, pc}
 8001716:	46c0      	nop			; (mov r8, r8)

08001718 <__aeabi_dcmpgt>:
 8001718:	b510      	push	{r4, lr}
 800171a:	f000 f86b 	bl	80017f4 <__gedf2>
 800171e:	2800      	cmp	r0, #0
 8001720:	dc01      	bgt.n	8001726 <__aeabi_dcmpgt+0xe>
 8001722:	2000      	movs	r0, #0
 8001724:	bd10      	pop	{r4, pc}
 8001726:	2001      	movs	r0, #1
 8001728:	bd10      	pop	{r4, pc}
 800172a:	46c0      	nop			; (mov r8, r8)

0800172c <__aeabi_dcmpge>:
 800172c:	b510      	push	{r4, lr}
 800172e:	f000 f861 	bl	80017f4 <__gedf2>
 8001732:	2800      	cmp	r0, #0
 8001734:	da01      	bge.n	800173a <__aeabi_dcmpge+0xe>
 8001736:	2000      	movs	r0, #0
 8001738:	bd10      	pop	{r4, pc}
 800173a:	2001      	movs	r0, #1
 800173c:	bd10      	pop	{r4, pc}
 800173e:	46c0      	nop			; (mov r8, r8)

08001740 <__clzsi2>:
 8001740:	211c      	movs	r1, #28
 8001742:	2301      	movs	r3, #1
 8001744:	041b      	lsls	r3, r3, #16
 8001746:	4298      	cmp	r0, r3
 8001748:	d301      	bcc.n	800174e <__clzsi2+0xe>
 800174a:	0c00      	lsrs	r0, r0, #16
 800174c:	3910      	subs	r1, #16
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	4298      	cmp	r0, r3
 8001752:	d301      	bcc.n	8001758 <__clzsi2+0x18>
 8001754:	0a00      	lsrs	r0, r0, #8
 8001756:	3908      	subs	r1, #8
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	4298      	cmp	r0, r3
 800175c:	d301      	bcc.n	8001762 <__clzsi2+0x22>
 800175e:	0900      	lsrs	r0, r0, #4
 8001760:	3904      	subs	r1, #4
 8001762:	a202      	add	r2, pc, #8	; (adr r2, 800176c <__clzsi2+0x2c>)
 8001764:	5c10      	ldrb	r0, [r2, r0]
 8001766:	1840      	adds	r0, r0, r1
 8001768:	4770      	bx	lr
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	02020304 	.word	0x02020304
 8001770:	01010101 	.word	0x01010101
	...

0800177c <__eqdf2>:
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	464f      	mov	r7, r9
 8001780:	4646      	mov	r6, r8
 8001782:	46d6      	mov	lr, sl
 8001784:	4694      	mov	ip, r2
 8001786:	4691      	mov	r9, r2
 8001788:	031a      	lsls	r2, r3, #12
 800178a:	0b12      	lsrs	r2, r2, #12
 800178c:	4d18      	ldr	r5, [pc, #96]	; (80017f0 <__eqdf2+0x74>)
 800178e:	b5c0      	push	{r6, r7, lr}
 8001790:	004c      	lsls	r4, r1, #1
 8001792:	030f      	lsls	r7, r1, #12
 8001794:	4692      	mov	sl, r2
 8001796:	005a      	lsls	r2, r3, #1
 8001798:	0006      	movs	r6, r0
 800179a:	4680      	mov	r8, r0
 800179c:	0b3f      	lsrs	r7, r7, #12
 800179e:	2001      	movs	r0, #1
 80017a0:	0d64      	lsrs	r4, r4, #21
 80017a2:	0fc9      	lsrs	r1, r1, #31
 80017a4:	0d52      	lsrs	r2, r2, #21
 80017a6:	0fdb      	lsrs	r3, r3, #31
 80017a8:	42ac      	cmp	r4, r5
 80017aa:	d00a      	beq.n	80017c2 <__eqdf2+0x46>
 80017ac:	42aa      	cmp	r2, r5
 80017ae:	d003      	beq.n	80017b8 <__eqdf2+0x3c>
 80017b0:	4294      	cmp	r4, r2
 80017b2:	d101      	bne.n	80017b8 <__eqdf2+0x3c>
 80017b4:	4557      	cmp	r7, sl
 80017b6:	d00d      	beq.n	80017d4 <__eqdf2+0x58>
 80017b8:	bce0      	pop	{r5, r6, r7}
 80017ba:	46ba      	mov	sl, r7
 80017bc:	46b1      	mov	r9, r6
 80017be:	46a8      	mov	r8, r5
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c2:	003d      	movs	r5, r7
 80017c4:	4335      	orrs	r5, r6
 80017c6:	d1f7      	bne.n	80017b8 <__eqdf2+0x3c>
 80017c8:	42a2      	cmp	r2, r4
 80017ca:	d1f5      	bne.n	80017b8 <__eqdf2+0x3c>
 80017cc:	4652      	mov	r2, sl
 80017ce:	4665      	mov	r5, ip
 80017d0:	432a      	orrs	r2, r5
 80017d2:	d1f1      	bne.n	80017b8 <__eqdf2+0x3c>
 80017d4:	2001      	movs	r0, #1
 80017d6:	45c8      	cmp	r8, r9
 80017d8:	d1ee      	bne.n	80017b8 <__eqdf2+0x3c>
 80017da:	4299      	cmp	r1, r3
 80017dc:	d006      	beq.n	80017ec <__eqdf2+0x70>
 80017de:	2c00      	cmp	r4, #0
 80017e0:	d1ea      	bne.n	80017b8 <__eqdf2+0x3c>
 80017e2:	433e      	orrs	r6, r7
 80017e4:	0030      	movs	r0, r6
 80017e6:	1e46      	subs	r6, r0, #1
 80017e8:	41b0      	sbcs	r0, r6
 80017ea:	e7e5      	b.n	80017b8 <__eqdf2+0x3c>
 80017ec:	2000      	movs	r0, #0
 80017ee:	e7e3      	b.n	80017b8 <__eqdf2+0x3c>
 80017f0:	000007ff 	.word	0x000007ff

080017f4 <__gedf2>:
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	464e      	mov	r6, r9
 80017f8:	4645      	mov	r5, r8
 80017fa:	4657      	mov	r7, sl
 80017fc:	46de      	mov	lr, fp
 80017fe:	0004      	movs	r4, r0
 8001800:	0018      	movs	r0, r3
 8001802:	b5e0      	push	{r5, r6, r7, lr}
 8001804:	0016      	movs	r6, r2
 8001806:	031b      	lsls	r3, r3, #12
 8001808:	0b1b      	lsrs	r3, r3, #12
 800180a:	4d32      	ldr	r5, [pc, #200]	; (80018d4 <__gedf2+0xe0>)
 800180c:	030f      	lsls	r7, r1, #12
 800180e:	004a      	lsls	r2, r1, #1
 8001810:	4699      	mov	r9, r3
 8001812:	0043      	lsls	r3, r0, #1
 8001814:	46a4      	mov	ip, r4
 8001816:	46b0      	mov	r8, r6
 8001818:	0b3f      	lsrs	r7, r7, #12
 800181a:	0d52      	lsrs	r2, r2, #21
 800181c:	0fc9      	lsrs	r1, r1, #31
 800181e:	0d5b      	lsrs	r3, r3, #21
 8001820:	0fc0      	lsrs	r0, r0, #31
 8001822:	42aa      	cmp	r2, r5
 8001824:	d029      	beq.n	800187a <__gedf2+0x86>
 8001826:	42ab      	cmp	r3, r5
 8001828:	d018      	beq.n	800185c <__gedf2+0x68>
 800182a:	2a00      	cmp	r2, #0
 800182c:	d12a      	bne.n	8001884 <__gedf2+0x90>
 800182e:	433c      	orrs	r4, r7
 8001830:	46a3      	mov	fp, r4
 8001832:	4265      	negs	r5, r4
 8001834:	4165      	adcs	r5, r4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <__gedf2+0x4c>
 800183a:	464c      	mov	r4, r9
 800183c:	4326      	orrs	r6, r4
 800183e:	d027      	beq.n	8001890 <__gedf2+0x9c>
 8001840:	2d00      	cmp	r5, #0
 8001842:	d115      	bne.n	8001870 <__gedf2+0x7c>
 8001844:	4281      	cmp	r1, r0
 8001846:	d028      	beq.n	800189a <__gedf2+0xa6>
 8001848:	2002      	movs	r0, #2
 800184a:	3901      	subs	r1, #1
 800184c:	4008      	ands	r0, r1
 800184e:	3801      	subs	r0, #1
 8001850:	bcf0      	pop	{r4, r5, r6, r7}
 8001852:	46bb      	mov	fp, r7
 8001854:	46b2      	mov	sl, r6
 8001856:	46a9      	mov	r9, r5
 8001858:	46a0      	mov	r8, r4
 800185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185c:	464d      	mov	r5, r9
 800185e:	432e      	orrs	r6, r5
 8001860:	d12f      	bne.n	80018c2 <__gedf2+0xce>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d1ee      	bne.n	8001844 <__gedf2+0x50>
 8001866:	433c      	orrs	r4, r7
 8001868:	4265      	negs	r5, r4
 800186a:	4165      	adcs	r5, r4
 800186c:	2d00      	cmp	r5, #0
 800186e:	d0e9      	beq.n	8001844 <__gedf2+0x50>
 8001870:	2800      	cmp	r0, #0
 8001872:	d1ed      	bne.n	8001850 <__gedf2+0x5c>
 8001874:	2001      	movs	r0, #1
 8001876:	4240      	negs	r0, r0
 8001878:	e7ea      	b.n	8001850 <__gedf2+0x5c>
 800187a:	003d      	movs	r5, r7
 800187c:	4325      	orrs	r5, r4
 800187e:	d120      	bne.n	80018c2 <__gedf2+0xce>
 8001880:	4293      	cmp	r3, r2
 8001882:	d0eb      	beq.n	800185c <__gedf2+0x68>
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1dd      	bne.n	8001844 <__gedf2+0x50>
 8001888:	464c      	mov	r4, r9
 800188a:	4326      	orrs	r6, r4
 800188c:	d1da      	bne.n	8001844 <__gedf2+0x50>
 800188e:	e7db      	b.n	8001848 <__gedf2+0x54>
 8001890:	465b      	mov	r3, fp
 8001892:	2000      	movs	r0, #0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0db      	beq.n	8001850 <__gedf2+0x5c>
 8001898:	e7d6      	b.n	8001848 <__gedf2+0x54>
 800189a:	429a      	cmp	r2, r3
 800189c:	dc0a      	bgt.n	80018b4 <__gedf2+0xc0>
 800189e:	dbe7      	blt.n	8001870 <__gedf2+0x7c>
 80018a0:	454f      	cmp	r7, r9
 80018a2:	d8d1      	bhi.n	8001848 <__gedf2+0x54>
 80018a4:	d010      	beq.n	80018c8 <__gedf2+0xd4>
 80018a6:	2000      	movs	r0, #0
 80018a8:	454f      	cmp	r7, r9
 80018aa:	d2d1      	bcs.n	8001850 <__gedf2+0x5c>
 80018ac:	2900      	cmp	r1, #0
 80018ae:	d0e1      	beq.n	8001874 <__gedf2+0x80>
 80018b0:	0008      	movs	r0, r1
 80018b2:	e7cd      	b.n	8001850 <__gedf2+0x5c>
 80018b4:	4243      	negs	r3, r0
 80018b6:	4158      	adcs	r0, r3
 80018b8:	2302      	movs	r3, #2
 80018ba:	4240      	negs	r0, r0
 80018bc:	4018      	ands	r0, r3
 80018be:	3801      	subs	r0, #1
 80018c0:	e7c6      	b.n	8001850 <__gedf2+0x5c>
 80018c2:	2002      	movs	r0, #2
 80018c4:	4240      	negs	r0, r0
 80018c6:	e7c3      	b.n	8001850 <__gedf2+0x5c>
 80018c8:	45c4      	cmp	ip, r8
 80018ca:	d8bd      	bhi.n	8001848 <__gedf2+0x54>
 80018cc:	2000      	movs	r0, #0
 80018ce:	45c4      	cmp	ip, r8
 80018d0:	d2be      	bcs.n	8001850 <__gedf2+0x5c>
 80018d2:	e7eb      	b.n	80018ac <__gedf2+0xb8>
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__ledf2>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	464e      	mov	r6, r9
 80018dc:	4645      	mov	r5, r8
 80018de:	4657      	mov	r7, sl
 80018e0:	46de      	mov	lr, fp
 80018e2:	0004      	movs	r4, r0
 80018e4:	0018      	movs	r0, r3
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	0016      	movs	r6, r2
 80018ea:	031b      	lsls	r3, r3, #12
 80018ec:	0b1b      	lsrs	r3, r3, #12
 80018ee:	4d31      	ldr	r5, [pc, #196]	; (80019b4 <__ledf2+0xdc>)
 80018f0:	030f      	lsls	r7, r1, #12
 80018f2:	004a      	lsls	r2, r1, #1
 80018f4:	4699      	mov	r9, r3
 80018f6:	0043      	lsls	r3, r0, #1
 80018f8:	46a4      	mov	ip, r4
 80018fa:	46b0      	mov	r8, r6
 80018fc:	0b3f      	lsrs	r7, r7, #12
 80018fe:	0d52      	lsrs	r2, r2, #21
 8001900:	0fc9      	lsrs	r1, r1, #31
 8001902:	0d5b      	lsrs	r3, r3, #21
 8001904:	0fc0      	lsrs	r0, r0, #31
 8001906:	42aa      	cmp	r2, r5
 8001908:	d011      	beq.n	800192e <__ledf2+0x56>
 800190a:	42ab      	cmp	r3, r5
 800190c:	d014      	beq.n	8001938 <__ledf2+0x60>
 800190e:	2a00      	cmp	r2, #0
 8001910:	d12f      	bne.n	8001972 <__ledf2+0x9a>
 8001912:	433c      	orrs	r4, r7
 8001914:	46a3      	mov	fp, r4
 8001916:	4265      	negs	r5, r4
 8001918:	4165      	adcs	r5, r4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d114      	bne.n	8001948 <__ledf2+0x70>
 800191e:	464c      	mov	r4, r9
 8001920:	4326      	orrs	r6, r4
 8001922:	d111      	bne.n	8001948 <__ledf2+0x70>
 8001924:	465b      	mov	r3, fp
 8001926:	2000      	movs	r0, #0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d017      	beq.n	800195c <__ledf2+0x84>
 800192c:	e010      	b.n	8001950 <__ledf2+0x78>
 800192e:	003d      	movs	r5, r7
 8001930:	4325      	orrs	r5, r4
 8001932:	d112      	bne.n	800195a <__ledf2+0x82>
 8001934:	4293      	cmp	r3, r2
 8001936:	d11c      	bne.n	8001972 <__ledf2+0x9a>
 8001938:	464d      	mov	r5, r9
 800193a:	432e      	orrs	r6, r5
 800193c:	d10d      	bne.n	800195a <__ledf2+0x82>
 800193e:	2a00      	cmp	r2, #0
 8001940:	d104      	bne.n	800194c <__ledf2+0x74>
 8001942:	433c      	orrs	r4, r7
 8001944:	4265      	negs	r5, r4
 8001946:	4165      	adcs	r5, r4
 8001948:	2d00      	cmp	r5, #0
 800194a:	d10d      	bne.n	8001968 <__ledf2+0x90>
 800194c:	4281      	cmp	r1, r0
 800194e:	d016      	beq.n	800197e <__ledf2+0xa6>
 8001950:	2002      	movs	r0, #2
 8001952:	3901      	subs	r1, #1
 8001954:	4008      	ands	r0, r1
 8001956:	3801      	subs	r0, #1
 8001958:	e000      	b.n	800195c <__ledf2+0x84>
 800195a:	2002      	movs	r0, #2
 800195c:	bcf0      	pop	{r4, r5, r6, r7}
 800195e:	46bb      	mov	fp, r7
 8001960:	46b2      	mov	sl, r6
 8001962:	46a9      	mov	r9, r5
 8001964:	46a0      	mov	r8, r4
 8001966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001968:	2800      	cmp	r0, #0
 800196a:	d1f7      	bne.n	800195c <__ledf2+0x84>
 800196c:	2001      	movs	r0, #1
 800196e:	4240      	negs	r0, r0
 8001970:	e7f4      	b.n	800195c <__ledf2+0x84>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ea      	bne.n	800194c <__ledf2+0x74>
 8001976:	464c      	mov	r4, r9
 8001978:	4326      	orrs	r6, r4
 800197a:	d1e7      	bne.n	800194c <__ledf2+0x74>
 800197c:	e7e8      	b.n	8001950 <__ledf2+0x78>
 800197e:	429a      	cmp	r2, r3
 8001980:	dd06      	ble.n	8001990 <__ledf2+0xb8>
 8001982:	4243      	negs	r3, r0
 8001984:	4158      	adcs	r0, r3
 8001986:	2302      	movs	r3, #2
 8001988:	4240      	negs	r0, r0
 800198a:	4018      	ands	r0, r3
 800198c:	3801      	subs	r0, #1
 800198e:	e7e5      	b.n	800195c <__ledf2+0x84>
 8001990:	429a      	cmp	r2, r3
 8001992:	dbe9      	blt.n	8001968 <__ledf2+0x90>
 8001994:	454f      	cmp	r7, r9
 8001996:	d8db      	bhi.n	8001950 <__ledf2+0x78>
 8001998:	d006      	beq.n	80019a8 <__ledf2+0xd0>
 800199a:	2000      	movs	r0, #0
 800199c:	454f      	cmp	r7, r9
 800199e:	d2dd      	bcs.n	800195c <__ledf2+0x84>
 80019a0:	2900      	cmp	r1, #0
 80019a2:	d0e3      	beq.n	800196c <__ledf2+0x94>
 80019a4:	0008      	movs	r0, r1
 80019a6:	e7d9      	b.n	800195c <__ledf2+0x84>
 80019a8:	45c4      	cmp	ip, r8
 80019aa:	d8d1      	bhi.n	8001950 <__ledf2+0x78>
 80019ac:	2000      	movs	r0, #0
 80019ae:	45c4      	cmp	ip, r8
 80019b0:	d2d4      	bcs.n	800195c <__ledf2+0x84>
 80019b2:	e7f5      	b.n	80019a0 <__ledf2+0xc8>
 80019b4:	000007ff 	.word	0x000007ff

080019b8 <nano_wait>:
#define LCD_RESET_CLR GPIO_TYPE->BRR=1<<LCD_RESET

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	1c18      	adds	r0, r3, #0

080019c4 <repeat>:
 80019c4:	3853      	subs	r0, #83	; 0x53
 80019c6:	dcfd      	bgt.n	80019c4 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <LCD_Reset>:

void LCD_Reset(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    // Assert reset
    GPIOA->BRR = 1<<LCD_RESET;
 80019d4:	2390      	movs	r3, #144	; 0x90
 80019d6:	05db      	lsls	r3, r3, #23
 80019d8:	2204      	movs	r2, #4
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(100000000);
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <LCD_Reset+0x2c>)
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff ffea 	bl	80019b8 <nano_wait>
    GPIOA->BSRR = 1<<LCD_RESET;
 80019e4:	2390      	movs	r3, #144	; 0x90
 80019e6:	05db      	lsls	r3, r3, #23
 80019e8:	2204      	movs	r2, #4
 80019ea:	619a      	str	r2, [r3, #24]
    nano_wait(50000000);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <LCD_Reset+0x30>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff ffe2 	bl	80019b8 <nano_wait>
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	05f5e100 	.word	0x05f5e100
 8001a00:	02faf080 	.word	0x02faf080

08001a04 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <LCD_WR_REG+0x30>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d1fa      	bne.n	8001a12 <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    LCD_RS_CLR;
 8001a1c:	2390      	movs	r3, #144	; 0x90
 8001a1e:	05db      	lsls	r3, r3, #23
 8001a20:	2208      	movs	r2, #8
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
    *((uint8_t*)&SPI->DR) = data;
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <LCD_WR_REG+0x34>)
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	7013      	strb	r3, [r2, #0]
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013000 	.word	0x40013000
 8001a38:	4001300c 	.word	0x4001300c

08001a3c <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	0002      	movs	r2, r0
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <LCD_WR_DATA+0x30>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	4013      	ands	r3, r2
 8001a52:	d1fa      	bne.n	8001a4a <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    LCD_RS_SET;
 8001a54:	2390      	movs	r3, #144	; 0x90
 8001a56:	05db      	lsls	r3, r3, #23
 8001a58:	2208      	movs	r2, #8
 8001a5a:	619a      	str	r2, [r3, #24]
    *((uint8_t*)&SPI->DR) = data;
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <LCD_WR_DATA+0x34>)
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	7013      	strb	r3, [r2, #0]
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40013000 	.word	0x40013000
 8001a70:	4001300c 	.word	0x4001300c

08001a74 <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
    LCD_RS_SET;
 8001a78:	2390      	movs	r3, #144	; 0x90
 8001a7a:	05db      	lsls	r3, r3, #23
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	619a      	str	r2, [r3, #24]
    SPI->CR2 |= SPI_CR2_DS;
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <LCD_WriteData16_Prepare+0x20>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <LCD_WriteData16_Prepare+0x20>)
 8001a86:	21f0      	movs	r1, #240	; 0xf0
 8001a88:	0109      	lsls	r1, r1, #4
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40013000 	.word	0x40013000

08001a98 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	1dbb      	adds	r3, r7, #6
 8001aa2:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <LCD_WriteData16+0x28>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	d0fa      	beq.n	8001aa6 <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <LCD_WriteData16+0x28>)
 8001ab2:	1dba      	adds	r2, r7, #6
 8001ab4:	8812      	ldrh	r2, [r2, #0]
 8001ab6:	60da      	str	r2, [r3, #12]
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40013000 	.word	0x40013000

08001ac4 <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <LCD_WriteData16_End+0x18>)
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <LCD_WriteData16_End+0x18>)
 8001ace:	4904      	ldr	r1, [pc, #16]	; (8001ae0 <LCD_WriteData16_End+0x1c>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	40013000 	.word	0x40013000
 8001ae0:	fffff0ff 	.word	0xfffff0ff

08001ae4 <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	0002      	movs	r2, r0
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	1c0a      	adds	r2, r1, #0
 8001af4:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff ff82 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff ff98 	bl	8001a3c <LCD_WR_DATA>
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <LCD_WriteRAM_Prepare+0x18>)
 8001b1a:	891b      	ldrh	r3, [r3, #8]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff ff70 	bl	8001a04 <LCD_WR_REG>
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	200000c0 	.word	0x200000c0

08001b30 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	0002      	movs	r2, r0
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <LCD_direction+0xa4>)
 8001b3e:	222a      	movs	r2, #42	; 0x2a
 8001b40:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <LCD_direction+0xa4>)
 8001b44:	222b      	movs	r2, #43	; 0x2b
 8001b46:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <LCD_direction+0xa4>)
 8001b4a:	222c      	movs	r2, #44	; 0x2c
 8001b4c:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d02c      	beq.n	8001bb0 <LCD_direction+0x80>
 8001b56:	dc37      	bgt.n	8001bc8 <LCD_direction+0x98>
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d01d      	beq.n	8001b98 <LCD_direction+0x68>
 8001b5c:	dc34      	bgt.n	8001bc8 <LCD_direction+0x98>
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <LCD_direction+0x38>
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d00c      	beq.n	8001b80 <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 8001b66:	e02f      	b.n	8001bc8 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <LCD_direction+0xa4>)
 8001b6a:	22f0      	movs	r2, #240	; 0xf0
 8001b6c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <LCD_direction+0xa4>)
 8001b70:	22a0      	movs	r2, #160	; 0xa0
 8001b72:	0052      	lsls	r2, r2, #1
 8001b74:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8001b76:	2108      	movs	r1, #8
 8001b78:	2036      	movs	r0, #54	; 0x36
 8001b7a:	f7ff ffb3 	bl	8001ae4 <LCD_WriteReg>
        break;
 8001b7e:	e024      	b.n	8001bca <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <LCD_direction+0xa4>)
 8001b82:	22a0      	movs	r2, #160	; 0xa0
 8001b84:	0052      	lsls	r2, r2, #1
 8001b86:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <LCD_direction+0xa4>)
 8001b8a:	22f0      	movs	r2, #240	; 0xf0
 8001b8c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001b8e:	2168      	movs	r1, #104	; 0x68
 8001b90:	2036      	movs	r0, #54	; 0x36
 8001b92:	f7ff ffa7 	bl	8001ae4 <LCD_WriteReg>
        break;
 8001b96:	e018      	b.n	8001bca <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <LCD_direction+0xa4>)
 8001b9a:	22f0      	movs	r2, #240	; 0xf0
 8001b9c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <LCD_direction+0xa4>)
 8001ba0:	22a0      	movs	r2, #160	; 0xa0
 8001ba2:	0052      	lsls	r2, r2, #1
 8001ba4:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8001ba6:	21c8      	movs	r1, #200	; 0xc8
 8001ba8:	2036      	movs	r0, #54	; 0x36
 8001baa:	f7ff ff9b 	bl	8001ae4 <LCD_WriteReg>
        break;
 8001bae:	e00c      	b.n	8001bca <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <LCD_direction+0xa4>)
 8001bb2:	22a0      	movs	r2, #160	; 0xa0
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <LCD_direction+0xa4>)
 8001bba:	22f0      	movs	r2, #240	; 0xf0
 8001bbc:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001bbe:	21a8      	movs	r1, #168	; 0xa8
 8001bc0:	2036      	movs	r0, #54	; 0x36
 8001bc2:	f7ff ff8f 	bl	8001ae4 <LCD_WriteReg>
        break;
 8001bc6:	e000      	b.n	8001bca <LCD_direction+0x9a>
    default:break;
 8001bc8:	46c0      	nop			; (mov r8, r8)
    }
}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	200000c0 	.word	0x200000c0

08001bd8 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    LCD_Reset();
 8001bdc:	f7ff fef8 	bl	80019d0 <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8001be0:	20cf      	movs	r0, #207	; 0xcf
 8001be2:	f7ff ff0f 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff ff28 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8001bec:	20d9      	movs	r0, #217	; 0xd9
 8001bee:	f7ff ff25 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8001bf2:	2030      	movs	r0, #48	; 0x30
 8001bf4:	f7ff ff22 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8001bf8:	20ed      	movs	r0, #237	; 0xed
 8001bfa:	f7ff ff03 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8001bfe:	2064      	movs	r0, #100	; 0x64
 8001c00:	f7ff ff1c 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f7ff ff19 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8001c0a:	2012      	movs	r0, #18
 8001c0c:	f7ff ff16 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8001c10:	2081      	movs	r0, #129	; 0x81
 8001c12:	f7ff ff13 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8001c16:	20e8      	movs	r0, #232	; 0xe8
 8001c18:	f7ff fef4 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8001c1c:	2085      	movs	r0, #133	; 0x85
 8001c1e:	f7ff ff0d 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8001c22:	2010      	movs	r0, #16
 8001c24:	f7ff ff0a 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8001c28:	207a      	movs	r0, #122	; 0x7a
 8001c2a:	f7ff ff07 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8001c2e:	20cb      	movs	r0, #203	; 0xcb
 8001c30:	f7ff fee8 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8001c34:	2039      	movs	r0, #57	; 0x39
 8001c36:	f7ff ff01 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8001c3a:	202c      	movs	r0, #44	; 0x2c
 8001c3c:	f7ff fefe 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fefb 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8001c46:	2034      	movs	r0, #52	; 0x34
 8001c48:	f7ff fef8 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f7ff fef5 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8001c52:	20f7      	movs	r0, #247	; 0xf7
 8001c54:	f7ff fed6 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 8001c58:	2020      	movs	r0, #32
 8001c5a:	f7ff feef 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8001c5e:	20ea      	movs	r0, #234	; 0xea
 8001c60:	f7ff fed0 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff fee9 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff fee6 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 8001c70:	20c0      	movs	r0, #192	; 0xc0
 8001c72:	f7ff fec7 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 8001c76:	2021      	movs	r0, #33	; 0x21
 8001c78:	f7ff fee0 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 8001c7c:	20c1      	movs	r0, #193	; 0xc1
 8001c7e:	f7ff fec1 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 8001c82:	2012      	movs	r0, #18
 8001c84:	f7ff feda 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 8001c88:	20c5      	movs	r0, #197	; 0xc5
 8001c8a:	f7ff febb 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 8001c8e:	2039      	movs	r0, #57	; 0x39
 8001c90:	f7ff fed4 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 8001c94:	2037      	movs	r0, #55	; 0x37
 8001c96:	f7ff fed1 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 8001c9a:	20c7      	movs	r0, #199	; 0xc7
 8001c9c:	f7ff feb2 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8001ca0:	20ab      	movs	r0, #171	; 0xab
 8001ca2:	f7ff fecb 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 8001ca6:	2036      	movs	r0, #54	; 0x36
 8001ca8:	f7ff feac 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 8001cac:	2048      	movs	r0, #72	; 0x48
 8001cae:	f7ff fec5 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8001cb2:	203a      	movs	r0, #58	; 0x3a
 8001cb4:	f7ff fea6 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 8001cb8:	2055      	movs	r0, #85	; 0x55
 8001cba:	f7ff febf 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8001cbe:	20b1      	movs	r0, #177	; 0xb1
 8001cc0:	f7ff fea0 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff feb9 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8001cca:	201b      	movs	r0, #27
 8001ccc:	f7ff feb6 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8001cd0:	20b6      	movs	r0, #182	; 0xb6
 8001cd2:	f7ff fe97 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8001cd6:	200a      	movs	r0, #10
 8001cd8:	f7ff feb0 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8001cdc:	20a2      	movs	r0, #162	; 0xa2
 8001cde:	f7ff fead 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001ce2:	20f2      	movs	r0, #242	; 0xf2
 8001ce4:	f7ff fe8e 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff fea7 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8001cee:	2026      	movs	r0, #38	; 0x26
 8001cf0:	f7ff fe88 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f7ff fea1 	bl	8001a3c <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8001cfa:	20e0      	movs	r0, #224	; 0xe0
 8001cfc:	f7ff fe82 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8001d00:	200f      	movs	r0, #15
 8001d02:	f7ff fe9b 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8001d06:	2023      	movs	r0, #35	; 0x23
 8001d08:	f7ff fe98 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8001d0c:	201f      	movs	r0, #31
 8001d0e:	f7ff fe95 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8001d12:	200b      	movs	r0, #11
 8001d14:	f7ff fe92 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8001d18:	200e      	movs	r0, #14
 8001d1a:	f7ff fe8f 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8001d1e:	2008      	movs	r0, #8
 8001d20:	f7ff fe8c 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8001d24:	204b      	movs	r0, #75	; 0x4b
 8001d26:	f7ff fe89 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8001d2a:	20a8      	movs	r0, #168	; 0xa8
 8001d2c:	f7ff fe86 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8001d30:	203b      	movs	r0, #59	; 0x3b
 8001d32:	f7ff fe83 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8001d36:	200a      	movs	r0, #10
 8001d38:	f7ff fe80 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8001d3c:	2014      	movs	r0, #20
 8001d3e:	f7ff fe7d 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8001d42:	2006      	movs	r0, #6
 8001d44:	f7ff fe7a 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8001d48:	2010      	movs	r0, #16
 8001d4a:	f7ff fe77 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8001d4e:	2009      	movs	r0, #9
 8001d50:	f7ff fe74 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fe71 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8001d5a:	20e1      	movs	r0, #225	; 0xe1
 8001d5c:	f7ff fe52 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fe6b 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 8001d66:	201c      	movs	r0, #28
 8001d68:	f7ff fe68 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 8001d6c:	2020      	movs	r0, #32
 8001d6e:	f7ff fe65 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 8001d72:	2004      	movs	r0, #4
 8001d74:	f7ff fe62 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8001d78:	2010      	movs	r0, #16
 8001d7a:	f7ff fe5f 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8001d7e:	2008      	movs	r0, #8
 8001d80:	f7ff fe5c 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8001d84:	2034      	movs	r0, #52	; 0x34
 8001d86:	f7ff fe59 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 8001d8a:	2047      	movs	r0, #71	; 0x47
 8001d8c:	f7ff fe56 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8001d90:	2044      	movs	r0, #68	; 0x44
 8001d92:	f7ff fe53 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8001d96:	2005      	movs	r0, #5
 8001d98:	f7ff fe50 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8001d9c:	200b      	movs	r0, #11
 8001d9e:	f7ff fe4d 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8001da2:	2009      	movs	r0, #9
 8001da4:	f7ff fe4a 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8001da8:	202f      	movs	r0, #47	; 0x2f
 8001daa:	f7ff fe47 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8001dae:	2036      	movs	r0, #54	; 0x36
 8001db0:	f7ff fe44 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8001db4:	200f      	movs	r0, #15
 8001db6:	f7ff fe41 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8001dba:	202b      	movs	r0, #43	; 0x2b
 8001dbc:	f7ff fe22 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fe3b 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fe38 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fe35 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8001dd2:	203f      	movs	r0, #63	; 0x3f
 8001dd4:	f7ff fe32 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8001dd8:	202a      	movs	r0, #42	; 0x2a
 8001dda:	f7ff fe13 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fe2c 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fe29 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fe26 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8001df0:	20ef      	movs	r0, #239	; 0xef
 8001df2:	f7ff fe23 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8001df6:	2011      	movs	r0, #17
 8001df8:	f7ff fe04 	bl	8001a04 <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <LCD_Init+0x240>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff fdda 	bl	80019b8 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 8001e04:	2029      	movs	r0, #41	; 0x29
 8001e06:	f7ff fdfd 	bl	8001a04 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fe90 	bl	8001b30 <LCD_direction>
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	07270e00 	.word	0x07270e00

08001e1c <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	0002      	movs	r2, r0
 8001e24:	1dbb      	adds	r3, r7, #6
 8001e26:	801a      	strh	r2, [r3, #0]
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <LCD_Clear+0x6c>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <LCD_Clear+0x6c>)
 8001e30:	885b      	ldrh	r3, [r3, #2]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	2100      	movs	r1, #0
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f828 	bl	8001e8c <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8001e3c:	f7ff fe1a 	bl	8001a74 <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e013      	b.n	8001e6e <LCD_Clear+0x52>
    {
        for(m=0;m<lcddev.width;m++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	e007      	b.n	8001e5c <LCD_Clear+0x40>
        {
            LCD_WriteData16(Color);
 8001e4c:	1dbb      	adds	r3, r7, #6
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fe21 	bl	8001a98 <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <LCD_Clear+0x6c>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	001a      	movs	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d3f1      	bcc.n	8001e4c <LCD_Clear+0x30>
    for(i=0;i<lcddev.height;i++)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <LCD_Clear+0x6c>)
 8001e70:	885b      	ldrh	r3, [r3, #2]
 8001e72:	001a      	movs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d3e5      	bcc.n	8001e46 <LCD_Clear+0x2a>
        }
    }
    LCD_WriteData16_End();
 8001e7a:	f7ff fe23 	bl	8001ac4 <LCD_WriteData16_End>
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b004      	add	sp, #16
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	200000c0 	.word	0x200000c0

08001e8c <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	0005      	movs	r5, r0
 8001e94:	000c      	movs	r4, r1
 8001e96:	0010      	movs	r0, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	1c2a      	adds	r2, r5, #0
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	1c22      	adds	r2, r4, #0
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	1cbb      	adds	r3, r7, #2
 8001ea8:	1c02      	adds	r2, r0, #0
 8001eaa:	801a      	strh	r2, [r3, #0]
 8001eac:	003b      	movs	r3, r7
 8001eae:	1c0a      	adds	r2, r1, #0
 8001eb0:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <LCD_SetWindow+0xbc>)
 8001eb4:	895b      	ldrh	r3, [r3, #10]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff fda3 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8001ebe:	1dbb      	adds	r3, r7, #6
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fdb7 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8001ece:	1dbb      	adds	r3, r7, #6
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff fdb1 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8001eda:	1cbb      	adds	r3, r7, #2
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff fda9 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8001eea:	1cbb      	adds	r3, r7, #2
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f7ff fda3 	bl	8001a3c <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <LCD_SetWindow+0xbc>)
 8001ef8:	899b      	ldrh	r3, [r3, #12]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff fd81 	bl	8001a04 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff fd95 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff fd8f 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8001f1e:	003b      	movs	r3, r7
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fd87 	bl	8001a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8001f2e:	003b      	movs	r3, r7
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff fd81 	bl	8001a3c <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8001f3a:	f7ff fdeb 	bl	8001b14 <LCD_WriteRAM_Prepare>
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bdb0      	pop	{r4, r5, r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	200000c0 	.word	0x200000c0

08001f4c <LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
void LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	0004      	movs	r4, r0
 8001f54:	0008      	movs	r0, r1
 8001f56:	0011      	movs	r1, r2
 8001f58:	1dbb      	adds	r3, r7, #6
 8001f5a:	1c22      	adds	r2, r4, #0
 8001f5c:	801a      	strh	r2, [r3, #0]
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	1c02      	adds	r2, r0, #0
 8001f62:	801a      	strh	r2, [r3, #0]
 8001f64:	1cbb      	adds	r3, r7, #2
 8001f66:	1c0a      	adds	r2, r1, #0
 8001f68:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	881c      	ldrh	r4, [r3, #0]
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	8819      	ldrh	r1, [r3, #0]
 8001f76:	1dbb      	adds	r3, r7, #6
 8001f78:	8818      	ldrh	r0, [r3, #0]
 8001f7a:	0023      	movs	r3, r4
 8001f7c:	f7ff ff86 	bl	8001e8c <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8001f80:	f7ff fd78 	bl	8001a74 <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 8001f84:	1cbb      	adds	r3, r7, #2
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fd85 	bl	8001a98 <LCD_WriteData16>
    LCD_WriteData16_End();
 8001f8e:	f7ff fd99 	bl	8001ac4 <LCD_WriteData16_End>
}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b003      	add	sp, #12
 8001f98:	bd90      	pop	{r4, r7, pc}
	...

08001f9c <LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8001f9c:	b5b0      	push	{r4, r5, r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	0005      	movs	r5, r0
 8001fa4:	000c      	movs	r4, r1
 8001fa6:	0010      	movs	r0, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	1dbb      	adds	r3, r7, #6
 8001fac:	1c2a      	adds	r2, r5, #0
 8001fae:	801a      	strh	r2, [r3, #0]
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	1c22      	adds	r2, r4, #0
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	1cbb      	adds	r3, r7, #2
 8001fb8:	1c02      	adds	r2, r0, #0
 8001fba:	801a      	strh	r2, [r3, #0]
 8001fbc:	003b      	movs	r3, r7
 8001fbe:	1c0a      	adds	r2, r1, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	18bb      	adds	r3, r7, r2
 8001fc6:	18ba      	adds	r2, r7, r2
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	3a20      	subs	r2, #32
 8001fcc:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8001fce:	2124      	movs	r1, #36	; 0x24
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	1dbb      	adds	r3, r7, #6
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	18d3      	adds	r3, r2, r3
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29c      	uxth	r4, r3
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	8819      	ldrh	r1, [r3, #0]
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	8818      	ldrh	r0, [r3, #0]
 8002000:	0013      	movs	r3, r2
 8002002:	0022      	movs	r2, r4
 8002004:	f7ff ff42 	bl	8001e8c <LCD_SetWindow>
    if (!mode) {
 8002008:	2328      	movs	r3, #40	; 0x28
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d166      	bne.n	80020e0 <LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 8002012:	f7ff fd2f 	bl	8001a74 <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 8002016:	230e      	movs	r3, #14
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e054      	b.n	80020ca <LCD_DrawChar+0x12e>
            if (size==12)
 8002020:	2324      	movs	r3, #36	; 0x24
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d110      	bne.n	800204c <LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 800202a:	2320      	movs	r3, #32
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	230e      	movs	r3, #14
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	7818      	ldrb	r0, [r3, #0]
 8002036:	230f      	movs	r3, #15
 8002038:	18f9      	adds	r1, r7, r3
 800203a:	4c61      	ldr	r4, [pc, #388]	; (80021c0 <LCD_DrawChar+0x224>)
 800203c:	0013      	movs	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	189b      	adds	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	18e3      	adds	r3, r4, r3
 8002046:	5c1b      	ldrb	r3, [r3, r0]
 8002048:	700b      	strb	r3, [r1, #0]
 800204a:	e00c      	b.n	8002066 <LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 800204c:	2320      	movs	r3, #32
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	7819      	ldrb	r1, [r3, #0]
 8002052:	230e      	movs	r3, #14
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	230f      	movs	r3, #15
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	4859      	ldr	r0, [pc, #356]	; (80021c4 <LCD_DrawChar+0x228>)
 800205e:	0109      	lsls	r1, r1, #4
 8002060:	1841      	adds	r1, r0, r1
 8002062:	5c8a      	ldrb	r2, [r1, r2]
 8002064:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8002066:	230d      	movs	r3, #13
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e01c      	b.n	80020aa <LCD_DrawChar+0x10e>
                if (temp&0x01)
 8002070:	230f      	movs	r3, #15
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d005      	beq.n	8002088 <LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 800207c:	1cbb      	adds	r3, r7, #2
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fd09 	bl	8001a98 <LCD_WriteData16>
 8002086:	e004      	b.n	8002092 <LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 8002088:	003b      	movs	r3, r7
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff fd03 	bl	8001a98 <LCD_WriteData16>
                temp>>=1;
 8002092:	220f      	movs	r2, #15
 8002094:	18bb      	adds	r3, r7, r2
 8002096:	18ba      	adds	r2, r7, r2
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	0852      	lsrs	r2, r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 800209e:	210d      	movs	r1, #13
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	3201      	adds	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	2324      	movs	r3, #36	; 0x24
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	220d      	movs	r2, #13
 80020b6:	18ba      	adds	r2, r7, r2
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3d8      	bcc.n	8002070 <LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 80020be:	210e      	movs	r1, #14
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	3201      	adds	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	230e      	movs	r3, #14
 80020cc:	18fa      	adds	r2, r7, r3
 80020ce:	2324      	movs	r3, #36	; 0x24
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d3a2      	bcc.n	8002020 <LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 80020da:	f7ff fcf3 	bl	8001ac4 <LCD_WriteData16_End>
                    LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 80020de:	e06b      	b.n	80021b8 <LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 80020e0:	230e      	movs	r3, #14
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	e05e      	b.n	80021a8 <LCD_DrawChar+0x20c>
            if (size==12)
 80020ea:	2324      	movs	r3, #36	; 0x24
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d110      	bne.n	8002116 <LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 80020f4:	2320      	movs	r3, #32
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	230e      	movs	r3, #14
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	7818      	ldrb	r0, [r3, #0]
 8002100:	230f      	movs	r3, #15
 8002102:	18f9      	adds	r1, r7, r3
 8002104:	4c2e      	ldr	r4, [pc, #184]	; (80021c0 <LCD_DrawChar+0x224>)
 8002106:	0013      	movs	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	189b      	adds	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	18e3      	adds	r3, r4, r3
 8002110:	5c1b      	ldrb	r3, [r3, r0]
 8002112:	700b      	strb	r3, [r1, #0]
 8002114:	e00c      	b.n	8002130 <LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 8002116:	2320      	movs	r3, #32
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	7819      	ldrb	r1, [r3, #0]
 800211c:	230e      	movs	r3, #14
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	230f      	movs	r3, #15
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	4827      	ldr	r0, [pc, #156]	; (80021c4 <LCD_DrawChar+0x228>)
 8002128:	0109      	lsls	r1, r1, #4
 800212a:	1841      	adds	r1, r0, r1
 800212c:	5c8a      	ldrb	r2, [r1, r2]
 800212e:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8002130:	230d      	movs	r3, #13
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e026      	b.n	8002188 <LCD_DrawChar+0x1ec>
                if(temp&0x01)
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	d014      	beq.n	8002170 <LCD_DrawChar+0x1d4>
                    LCD_DrawPoint(x+t,y+pos,fc);
 8002146:	230d      	movs	r3, #13
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b29a      	uxth	r2, r3
 800214e:	1dbb      	adds	r3, r7, #6
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	18d3      	adds	r3, r2, r3
 8002154:	b298      	uxth	r0, r3
 8002156:	230e      	movs	r3, #14
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b29a      	uxth	r2, r3
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	18d3      	adds	r3, r2, r3
 8002164:	b299      	uxth	r1, r3
 8002166:	1cbb      	adds	r3, r7, #2
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	001a      	movs	r2, r3
 800216c:	f7ff feee 	bl	8001f4c <LCD_DrawPoint>
                temp>>=1;
 8002170:	220f      	movs	r2, #15
 8002172:	18bb      	adds	r3, r7, r2
 8002174:	18ba      	adds	r2, r7, r2
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	0852      	lsrs	r2, r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 800217c:	210d      	movs	r1, #13
 800217e:	187b      	adds	r3, r7, r1
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	187b      	adds	r3, r7, r1
 8002184:	3201      	adds	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	2324      	movs	r3, #36	; 0x24
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	220d      	movs	r2, #13
 8002194:	18ba      	adds	r2, r7, r2
 8002196:	7812      	ldrb	r2, [r2, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3ce      	bcc.n	800213a <LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 800219c:	210e      	movs	r1, #14
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	3201      	adds	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	230e      	movs	r3, #14
 80021aa:	18fa      	adds	r2, r7, r3
 80021ac:	2324      	movs	r3, #36	; 0x24
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d398      	bcc.n	80020ea <LCD_DrawChar+0x14e>
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bdb0      	pop	{r4, r5, r7, pc}
 80021c0:	0800704c 	.word	0x0800704c
 80021c4:	080074c0 	.word	0x080074c0

080021c8 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af04      	add	r7, sp, #16
 80021ce:	0005      	movs	r5, r0
 80021d0:	000c      	movs	r4, r1
 80021d2:	0010      	movs	r0, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	1dbb      	adds	r3, r7, #6
 80021d8:	1c2a      	adds	r2, r5, #0
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	1c22      	adds	r2, r4, #0
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	1cbb      	adds	r3, r7, #2
 80021e4:	1c02      	adds	r2, r0, #0
 80021e6:	801a      	strh	r2, [r3, #0]
 80021e8:	003b      	movs	r3, r7
 80021ea:	1c0a      	adds	r2, r1, #0
 80021ec:	801a      	strh	r2, [r3, #0]
    while((*p<='~')&&(*p>=' '))
 80021ee:	e036      	b.n	800225e <LCD_DrawString+0x96>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <LCD_DrawString+0xb0>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	1dba      	adds	r2, r7, #6
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d239      	bcs.n	8002270 <LCD_DrawString+0xa8>
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <LCD_DrawString+0xb0>)
 80021fe:	885b      	ldrh	r3, [r3, #2]
 8002200:	1d3a      	adds	r2, r7, #4
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d233      	bcs.n	8002270 <LCD_DrawString+0xa8>
        return;
        LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	003a      	movs	r2, r7
 800220e:	8815      	ldrh	r5, [r2, #0]
 8002210:	1cba      	adds	r2, r7, #2
 8002212:	8814      	ldrh	r4, [r2, #0]
 8002214:	1d3a      	adds	r2, r7, #4
 8002216:	8811      	ldrh	r1, [r2, #0]
 8002218:	1dba      	adds	r2, r7, #6
 800221a:	8810      	ldrh	r0, [r2, #0]
 800221c:	2220      	movs	r2, #32
 800221e:	2608      	movs	r6, #8
 8002220:	46b4      	mov	ip, r6
 8002222:	44bc      	add	ip, r7
 8002224:	4462      	add	r2, ip
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	9202      	str	r2, [sp, #8]
 800222a:	261c      	movs	r6, #28
 800222c:	2208      	movs	r2, #8
 800222e:	18ba      	adds	r2, r7, r2
 8002230:	1992      	adds	r2, r2, r6
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	9201      	str	r2, [sp, #4]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	002b      	movs	r3, r5
 800223a:	0022      	movs	r2, r4
 800223c:	f7ff feae 	bl	8001f9c <LCD_DrawChar>
        x+=size/2;
 8002240:	2308      	movs	r3, #8
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	199b      	adds	r3, r3, r6
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	b299      	uxth	r1, r3
 800224e:	1dbb      	adds	r3, r7, #6
 8002250:	1dba      	adds	r2, r7, #6
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	188a      	adds	r2, r1, r2
 8002256:	801a      	strh	r2, [r3, #0]
        p++;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	3301      	adds	r3, #1
 800225c:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b7e      	cmp	r3, #126	; 0x7e
 8002264:	d805      	bhi.n	8002272 <LCD_DrawString+0xaa>
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b1f      	cmp	r3, #31
 800226c:	d8c0      	bhi.n	80021f0 <LCD_DrawString+0x28>
 800226e:	e000      	b.n	8002272 <LCD_DrawString+0xaa>
        return;
 8002270:	46c0      	nop			; (mov r8, r8)
    }
}
 8002272:	46bd      	mov	sp, r7
 8002274:	b003      	add	sp, #12
 8002276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002278:	200000c0 	.word	0x200000c0

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002282:	f002 f9a1 	bl	80045c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002286:	f000 f91f 	bl	80024c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800228a:	f000 fb4d 	bl	8002928 <MX_GPIO_Init>
  MX_ADC_Init();
 800228e:	f000 f961 	bl	8002554 <MX_ADC_Init>
  MX_I2C2_Init();
 8002292:	f000 f9bb 	bl	800260c <MX_I2C2_Init>
  MX_SPI1_Init();
 8002296:	f000 f9f9 	bl	800268c <MX_SPI1_Init>
  MX_DMA_Init();
 800229a:	f000 fb27 	bl	80028ec <MX_DMA_Init>
  MX_TIM1_Init();
 800229e:	f000 fa8f 	bl	80027c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 80022a2:	f7ff fc99 	bl	8001bd8 <LCD_Init>
  LCD_Clear(BLUE);
 80022a6:	201f      	movs	r0, #31
 80022a8:	f7ff fdb8 	bl	8001e1c <LCD_Clear>
  for (int i = 0; i < 3; i++) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	e01c      	b.n	80022ec <main+0x70>
	LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	1c1a      	adds	r2, r3, #0
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	18d3      	adds	r3, r2, r3
 80022bc:	1c1a      	adds	r2, r3, #0
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3319      	adds	r3, #25
 80022c6:	b298      	uxth	r0, r3
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <main+0xc0>)
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	58d3      	ldr	r3, [r2, r3]
 80022d0:	491b      	ldr	r1, [pc, #108]	; (8002340 <main+0xc4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	2210      	movs	r2, #16
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	231f      	movs	r3, #31
 80022de:	000a      	movs	r2, r1
 80022e0:	21c8      	movs	r1, #200	; 0xc8
 80022e2:	f7ff ff71 	bl	80021c8 <LCD_DrawString>
  for (int i = 0; i < 3; i++) {
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3301      	adds	r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	dddf      	ble.n	80022b2 <main+0x36>
  }
  LCD_DrawString(25,200,  YELLOW, BLACK, menu[0], 16, 0);
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <main+0xc0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4912      	ldr	r1, [pc, #72]	; (8002340 <main+0xc4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	9202      	str	r2, [sp, #8]
 80022fc:	2210      	movs	r2, #16
 80022fe:	9201      	str	r2, [sp, #4]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	000a      	movs	r2, r1
 8002306:	21c8      	movs	r1, #200	; 0xc8
 8002308:	2019      	movs	r0, #25
 800230a:	f7ff ff5d 	bl	80021c8 <LCD_DrawString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <main+0xc8>)
 8002310:	2201      	movs	r2, #1
 8002312:	2108      	movs	r1, #8
 8002314:	0018      	movs	r0, r3
 8002316:	f003 f8c2 	bl	800549e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <main+0xc8>)
 800231c:	2201      	movs	r2, #1
 800231e:	2101      	movs	r1, #1
 8002320:	0018      	movs	r0, r3
 8002322:	f003 f8bc 	bl	800549e <HAL_GPIO_WritePin>

 // HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, ADC_BUF_LEN);
  //adc_buf[3] = 420;
  //HAL_Delay(200);
  HAL_ADC_Stop(&hadc);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <main+0xcc>)
 8002328:	0018      	movs	r0, r3
 800232a:	f002 fb15 	bl	8004958 <HAL_ADC_Stop>
  menu_home();
 800232e:	f000 fbf1 	bl	8002b14 <menu_home>
 8002332:	2300      	movs	r3, #0

}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000000 	.word	0x20000000
 8002340:	0000ffe0 	.word	0x0000ffe0
 8002344:	48000800 	.word	0x48000800
 8002348:	2000020c 	.word	0x2000020c

0800234c <startmotor>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
void startmotor()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <startmotor+0x14>)
 8002352:	2100      	movs	r1, #0
 8002354:	0018      	movs	r0, r3
 8002356:	f003 fff1 	bl	800633c <HAL_TIM_PWM_Start>
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000011c 	.word	0x2000011c

08002364 <stopmotor>:
void stopmotor()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <stopmotor+0x20>)
 800236a:	2100      	movs	r1, #0
 800236c:	0018      	movs	r0, r3
 800236e:	f004 f89d 	bl	80064ac <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <stopmotor+0x24>)
 8002374:	2201      	movs	r2, #1
 8002376:	2101      	movs	r1, #1
 8002378:	0018      	movs	r0, r3
 800237a:	f003 f890 	bl	800549e <HAL_GPIO_WritePin>
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000011c 	.word	0x2000011c
 8002388:	48000800 	.word	0x48000800

0800238c <change_pwm>:
void change_pwm(int per)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b094      	sub	sp, #80	; 0x50
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002394:	2348      	movs	r3, #72	; 0x48
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	0018      	movs	r0, r3
 800239a:	2308      	movs	r3, #8
 800239c:	001a      	movs	r2, r3
 800239e:	2100      	movs	r1, #0
 80023a0:	f004 fd46 	bl	8006e30 <memset>
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a4:	232c      	movs	r3, #44	; 0x2c
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	0018      	movs	r0, r3
 80023aa:	231c      	movs	r3, #28
 80023ac:	001a      	movs	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f004 fd3e 	bl	8006e30 <memset>
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023b4:	230c      	movs	r3, #12
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	0018      	movs	r0, r3
 80023ba:	2320      	movs	r3, #32
 80023bc:	001a      	movs	r2, r3
 80023be:	2100      	movs	r1, #0
 80023c0:	f004 fd36 	bl	8006e30 <memset>

	  htim1.Instance = TIM1;
 80023c4:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <change_pwm+0x134>)
 80023c6:	4a3f      	ldr	r2, [pc, #252]	; (80024c4 <change_pwm+0x138>)
 80023c8:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 0;
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <change_pwm+0x134>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <change_pwm+0x134>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = per;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <change_pwm+0x134>)
 80023da:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023dc:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <change_pwm+0x134>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 90;//0;
 80023e2:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <change_pwm+0x134>)
 80023e4:	225a      	movs	r2, #90	; 0x5a
 80023e6:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <change_pwm+0x134>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <change_pwm+0x134>)
 80023f0:	0018      	movs	r0, r3
 80023f2:	f003 ff53 	bl	800629c <HAL_TIM_PWM_Init>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d001      	beq.n	80023fe <change_pwm+0x72>
	  {
	    Error_Handler();
 80023fa:	f000 fb85 	bl	8002b08 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fe:	2148      	movs	r1, #72	; 0x48
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2200      	movs	r2, #0
 800240a:	605a      	str	r2, [r3, #4]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800240c:	187a      	adds	r2, r7, r1
 800240e:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <change_pwm+0x134>)
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f004 fc2c 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <change_pwm+0x94>
	  {
	    Error_Handler();
 800241c:	f000 fb74 	bl	8002b08 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002420:	232c      	movs	r3, #44	; 0x2c
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2260      	movs	r2, #96	; 0x60
 8002426:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = per/2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	da00      	bge.n	8002430 <change_pwm+0xa4>
 800242e:	3301      	adds	r3, #1
 8002430:	105b      	asrs	r3, r3, #1
 8002432:	001a      	movs	r2, r3
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	187b      	adds	r3, r7, r1
 8002438:	605a      	str	r2, [r3, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243a:	187b      	adds	r3, r7, r1
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002440:	187b      	adds	r3, r7, r1
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002446:	187b      	adds	r3, r7, r1
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800244c:	187b      	adds	r3, r7, r1
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002458:	1879      	adds	r1, r7, r1
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <change_pwm+0x134>)
 800245c:	2200      	movs	r2, #0
 800245e:	0018      	movs	r0, r3
 8002460:	f004 f8a0 	bl	80065a4 <HAL_TIM_PWM_ConfigChannel>
 8002464:	1e03      	subs	r3, r0, #0
 8002466:	d001      	beq.n	800246c <change_pwm+0xe0>
	  {
	    Error_Handler();
 8002468:	f000 fb4e 	bl	8002b08 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800246c:	210c      	movs	r1, #12
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002474:	187b      	adds	r3, r7, r1
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0192      	lsls	r2, r2, #6
 8002492:	615a      	str	r2, [r3, #20]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002494:	187b      	adds	r3, r7, r1
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800249a:	187a      	adds	r2, r7, r1
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <change_pwm+0x134>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f004 fc43 	bl	8006d2c <HAL_TIMEx_ConfigBreakDeadTime>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <change_pwm+0x122>
	  {
	    Error_Handler();
 80024aa:	f000 fb2d 	bl	8002b08 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <change_pwm+0x134>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f001 ffe3 	bl	800447c <HAL_TIM_MspPostInit>
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b014      	add	sp, #80	; 0x50
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	2000011c 	.word	0x2000011c
 80024c4:	40012c00 	.word	0x40012c00

080024c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b093      	sub	sp, #76	; 0x4c
 80024cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ce:	2414      	movs	r4, #20
 80024d0:	193b      	adds	r3, r7, r4
 80024d2:	0018      	movs	r0, r3
 80024d4:	2334      	movs	r3, #52	; 0x34
 80024d6:	001a      	movs	r2, r3
 80024d8:	2100      	movs	r1, #0
 80024da:	f004 fca9 	bl	8006e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	0018      	movs	r0, r3
 80024e2:	2310      	movs	r3, #16
 80024e4:	001a      	movs	r2, r3
 80024e6:	2100      	movs	r1, #0
 80024e8:	f004 fca2 	bl	8006e30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80024ec:	0021      	movs	r1, r4
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2212      	movs	r2, #18
 80024f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2201      	movs	r2, #1
 80024f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2201      	movs	r2, #1
 80024fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002500:	187b      	adds	r3, r7, r1
 8002502:	2210      	movs	r2, #16
 8002504:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002506:	187b      	adds	r3, r7, r1
 8002508:	2210      	movs	r2, #16
 800250a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800250c:	187b      	adds	r3, r7, r1
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002512:	187b      	adds	r3, r7, r1
 8002514:	0018      	movs	r0, r3
 8002516:	f003 f929 	bl	800576c <HAL_RCC_OscConfig>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d001      	beq.n	8002522 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800251e:	f000 faf3 	bl	8002b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	2200      	movs	r2, #0
 800252c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2100      	movs	r1, #0
 800253e:	0018      	movs	r0, r3
 8002540:	f003 fc9a 	bl	8005e78 <HAL_RCC_ClockConfig>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d001      	beq.n	800254c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002548:	f000 fade 	bl	8002b08 <Error_Handler>
  }
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b013      	add	sp, #76	; 0x4c
 8002552:	bd90      	pop	{r4, r7, pc}

08002554 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	0018      	movs	r0, r3
 800255e:	230c      	movs	r3, #12
 8002560:	001a      	movs	r2, r3
 8002562:	2100      	movs	r1, #0
 8002564:	f004 fc64 	bl	8006e30 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <MX_ADC_Init+0xb0>)
 800256a:	4a27      	ldr	r2, [pc, #156]	; (8002608 <MX_ADC_Init+0xb4>)
 800256c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <MX_ADC_Init+0xb0>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <MX_ADC_Init+0xb0>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <MX_ADC_Init+0xb0>)
 800257c:	2200      	movs	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <MX_ADC_Init+0xb0>)
 8002582:	2201      	movs	r2, #1
 8002584:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <MX_ADC_Init+0xb0>)
 8002588:	2204      	movs	r2, #4
 800258a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_ADC_Init+0xb0>)
 800258e:	2200      	movs	r2, #0
 8002590:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <MX_ADC_Init+0xb0>)
 8002594:	2200      	movs	r2, #0
 8002596:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_ADC_Init+0xb0>)
 800259a:	2201      	movs	r2, #1
 800259c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <MX_ADC_Init+0xb0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <MX_ADC_Init+0xb0>)
 80025a6:	22c2      	movs	r2, #194	; 0xc2
 80025a8:	32ff      	adds	r2, #255	; 0xff
 80025aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_ADC_Init+0xb0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <MX_ADC_Init+0xb0>)
 80025b4:	2224      	movs	r2, #36	; 0x24
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_ADC_Init+0xb0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <MX_ADC_Init+0xb0>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f002 f888 	bl	80046d8 <HAL_ADC_Init>
 80025c8:	1e03      	subs	r3, r0, #0
 80025ca:	d001      	beq.n	80025d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80025cc:	f000 fa9c 	bl	8002b08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2208      	movs	r2, #8
 80025d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0152      	lsls	r2, r2, #5
 80025dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	0552      	lsls	r2, r2, #21
 80025e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025e6:	1d3a      	adds	r2, r7, #4
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_ADC_Init+0xb0>)
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f002 f9f3 	bl	80049d8 <HAL_ADC_ConfigChannel>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d001      	beq.n	80025fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80025f6:	f000 fa87 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	2000020c 	.word	0x2000020c
 8002608:	40012400 	.word	0x40012400

0800260c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_I2C2_Init+0x74>)
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <MX_I2C2_Init+0x78>)
 8002614:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <MX_I2C2_Init+0x74>)
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <MX_I2C2_Init+0x7c>)
 800261a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_I2C2_Init+0x74>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <MX_I2C2_Init+0x74>)
 8002624:	2201      	movs	r2, #1
 8002626:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_I2C2_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MX_I2C2_Init+0x74>)
 8002630:	2200      	movs	r2, #0
 8002632:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <MX_I2C2_Init+0x74>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <MX_I2C2_Init+0x74>)
 800263c:	2200      	movs	r2, #0
 800263e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MX_I2C2_Init+0x74>)
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <MX_I2C2_Init+0x74>)
 8002648:	0018      	movs	r0, r3
 800264a:	f002 ff61 	bl	8005510 <HAL_I2C_Init>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002652:	f000 fa59 	bl	8002b08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <MX_I2C2_Init+0x74>)
 8002658:	2100      	movs	r1, #0
 800265a:	0018      	movs	r0, r3
 800265c:	f002 ffee 	bl	800563c <HAL_I2CEx_ConfigAnalogFilter>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002664:	f000 fa50 	bl	8002b08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <MX_I2C2_Init+0x74>)
 800266a:	2100      	movs	r1, #0
 800266c:	0018      	movs	r0, r3
 800266e:	f003 f831 	bl	80056d4 <HAL_I2CEx_ConfigDigitalFilter>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d001      	beq.n	800267a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002676:	f000 fa47 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	200000d0 	.word	0x200000d0
 8002684:	40005800 	.word	0x40005800
 8002688:	2000090e 	.word	0x2000090e

0800268c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002690:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <MX_SPI1_Init+0x11c>)
 8002692:	4a46      	ldr	r2, [pc, #280]	; (80027ac <MX_SPI1_Init+0x120>)
 8002694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <MX_SPI1_Init+0x11c>)
 8002698:	2282      	movs	r2, #130	; 0x82
 800269a:	0052      	lsls	r2, r2, #1
 800269c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800269e:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026a6:	22c0      	movs	r2, #192	; 0xc0
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ac:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80026b8:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	02d2      	lsls	r2, r2, #11
 80026be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026c0:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026d8:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026da:	2207      	movs	r2, #7
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026de:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026e6:	2208      	movs	r2, #8
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <MX_SPI1_Init+0x11c>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f003 fd1d 	bl	800612c <HAL_SPI_Init>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026f6:	f000 fa07 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <MX_SPI1_Init+0x124>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <MX_SPI1_Init+0x124>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0289      	lsls	r1, r1, #10
 8002704:	430a      	orrs	r2, r1
 8002706:	615a      	str	r2, [r3, #20]
  GPIOA -> MODER &= ~GPIO_MODER_MODER4 & ~GPIO_MODER_MODER5 & ~GPIO_MODER_MODER7;
 8002708:	2390      	movs	r3, #144	; 0x90
 800270a:	05db      	lsls	r3, r3, #23
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2390      	movs	r3, #144	; 0x90
 8002710:	05db      	lsls	r3, r3, #23
 8002712:	4928      	ldr	r1, [pc, #160]	; (80027b4 <MX_SPI1_Init+0x128>)
 8002714:	400a      	ands	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8002718:	2390      	movs	r3, #144	; 0x90
 800271a:	05db      	lsls	r3, r3, #23
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2390      	movs	r3, #144	; 0x90
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	218a      	movs	r1, #138	; 0x8a
 8002724:	0209      	lsls	r1, r1, #8
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER &= ~GPIO_MODER_MODER2 & ~GPIO_MODER_MODER3;
 800272a:	2390      	movs	r3, #144	; 0x90
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2390      	movs	r3, #144	; 0x90
 8002732:	05db      	lsls	r3, r3, #23
 8002734:	21f0      	movs	r1, #240	; 0xf0
 8002736:	438a      	bics	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
 800273a:	2390      	movs	r3, #144	; 0x90
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2390      	movs	r3, #144	; 0x90
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	2150      	movs	r1, #80	; 0x50
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL4 & ~GPIO_AFRL_AFRL5 & ~GPIO_AFRL_AFRL7;
 800274a:	2390      	movs	r3, #144	; 0x90
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	2390      	movs	r3, #144	; 0x90
 8002752:	05db      	lsls	r3, r3, #23
 8002754:	4918      	ldr	r1, [pc, #96]	; (80027b8 <MX_SPI1_Init+0x12c>)
 8002756:	400a      	ands	r2, r1
 8002758:	621a      	str	r2, [r3, #32]

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_SPI1_Init+0x124>)
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <MX_SPI1_Init+0x124>)
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	0149      	lsls	r1, r1, #5
 8002764:	430a      	orrs	r2, r1
 8002766:	619a      	str	r2, [r3, #24]
  SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <MX_SPI1_Init+0x120>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <MX_SPI1_Init+0x120>)
 800276e:	4913      	ldr	r1, [pc, #76]	; (80027bc <MX_SPI1_Init+0x130>)
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
  SPI1->CR1 &= ~SPI_CR1_BR;
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <MX_SPI1_Init+0x120>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_SPI1_Init+0x120>)
 800277a:	2138      	movs	r1, #56	; 0x38
 800277c:	438a      	bics	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
  SPI1->CR2 = SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <MX_SPI1_Init+0x120>)
 8002782:	22e0      	movs	r2, #224	; 0xe0
 8002784:	00d2      	lsls	r2, r2, #3
 8002786:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |= SPI_CR2_NSSP | SPI_CR2_SSOE;
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MX_SPI1_Init+0x120>)
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <MX_SPI1_Init+0x120>)
 800278e:	210c      	movs	r1, #12
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <MX_SPI1_Init+0x120>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <MX_SPI1_Init+0x120>)
 800279a:	2140      	movs	r1, #64	; 0x40
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	20000164 	.word	0x20000164
 80027ac:	40013000 	.word	0x40013000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	ffff30ff 	.word	0xffff30ff
 80027b8:	0f00ffff 	.word	0x0f00ffff
 80027bc:	0000c004 	.word	0x0000c004

080027c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b092      	sub	sp, #72	; 0x48
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c6:	2340      	movs	r3, #64	; 0x40
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	0018      	movs	r0, r3
 80027cc:	2308      	movs	r3, #8
 80027ce:	001a      	movs	r2, r3
 80027d0:	2100      	movs	r1, #0
 80027d2:	f004 fb2d 	bl	8006e30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d6:	2324      	movs	r3, #36	; 0x24
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	0018      	movs	r0, r3
 80027dc:	231c      	movs	r3, #28
 80027de:	001a      	movs	r2, r3
 80027e0:	2100      	movs	r1, #0
 80027e2:	f004 fb25 	bl	8006e30 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	0018      	movs	r0, r3
 80027ea:	2320      	movs	r3, #32
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f004 fb1e 	bl	8006e30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <MX_TIM1_Init+0x120>)
 80027f6:	4a3b      	ldr	r2, [pc, #236]	; (80028e4 <MX_TIM1_Init+0x124>)
 80027f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027fa:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <MX_TIM1_Init+0x120>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002800:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <MX_TIM1_Init+0x120>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002806:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <MX_TIM1_Init+0x120>)
 8002808:	4a37      	ldr	r2, [pc, #220]	; (80028e8 <MX_TIM1_Init+0x128>)
 800280a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <MX_TIM1_Init+0x120>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002812:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <MX_TIM1_Init+0x120>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <MX_TIM1_Init+0x120>)
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <MX_TIM1_Init+0x120>)
 8002820:	0018      	movs	r0, r3
 8002822:	f003 fd3b 	bl	800629c <HAL_TIM_PWM_Init>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800282a:	f000 f96d 	bl	8002b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282e:	2140      	movs	r1, #64	; 0x40
 8002830:	187b      	adds	r3, r7, r1
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002836:	187b      	adds	r3, r7, r1
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800283c:	187a      	adds	r2, r7, r1
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <MX_TIM1_Init+0x120>)
 8002840:	0011      	movs	r1, r2
 8002842:	0018      	movs	r0, r3
 8002844:	f004 fa14 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800284c:	f000 f95c 	bl	8002b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002850:	2124      	movs	r1, #36	; 0x24
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2260      	movs	r2, #96	; 0x60
 8002856:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800285e:	187b      	adds	r3, r7, r1
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002864:	187b      	adds	r3, r7, r1
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800287c:	1879      	adds	r1, r7, r1
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <MX_TIM1_Init+0x120>)
 8002880:	2200      	movs	r2, #0
 8002882:	0018      	movs	r0, r3
 8002884:	f003 fe8e 	bl	80065a4 <HAL_TIM_PWM_ConfigChannel>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800288c:	f000 f93c 	bl	8002b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	0192      	lsls	r2, r2, #6
 80028b4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	2200      	movs	r2, #0
 80028ba:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028bc:	1d3a      	adds	r2, r7, #4
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <MX_TIM1_Init+0x120>)
 80028c0:	0011      	movs	r1, r2
 80028c2:	0018      	movs	r0, r3
 80028c4:	f004 fa32 	bl	8006d2c <HAL_TIMEx_ConfigBreakDeadTime>
 80028c8:	1e03      	subs	r3, r0, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80028cc:	f000 f91c 	bl	8002b08 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */



  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <MX_TIM1_Init+0x120>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f001 fdd2 	bl	800447c <HAL_TIM_MspPostInit>

}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b012      	add	sp, #72	; 0x48
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	2000011c 	.word	0x2000011c
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	0000ffff 	.word	0x0000ffff

080028ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <MX_DMA_Init+0x38>)
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <MX_DMA_Init+0x38>)
 80028f8:	2101      	movs	r1, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	615a      	str	r2, [r3, #20]
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <MX_DMA_Init+0x38>)
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2009      	movs	r0, #9
 8002910:	f002 fada 	bl	8004ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8002914:	2009      	movs	r0, #9
 8002916:	f002 faec 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	40021000 	.word	0x40021000

08002928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292e:	240c      	movs	r4, #12
 8002930:	193b      	adds	r3, r7, r4
 8002932:	0018      	movs	r0, r3
 8002934:	2314      	movs	r3, #20
 8002936:	001a      	movs	r2, r3
 8002938:	2100      	movs	r1, #0
 800293a:	f004 fa79 	bl	8006e30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <MX_GPIO_Init+0x15c>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <MX_GPIO_Init+0x15c>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0309      	lsls	r1, r1, #12
 8002948:	430a      	orrs	r2, r1
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <MX_GPIO_Init+0x15c>)
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	031b      	lsls	r3, r3, #12
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <MX_GPIO_Init+0x15c>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <MX_GPIO_Init+0x15c>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0289      	lsls	r1, r1, #10
 8002964:	430a      	orrs	r2, r1
 8002966:	615a      	str	r2, [r3, #20]
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <MX_GPIO_Init+0x15c>)
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	4013      	ands	r3, r2
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <MX_GPIO_Init+0x15c>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <MX_GPIO_Init+0x15c>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	02c9      	lsls	r1, r1, #11
 8002980:	430a      	orrs	r2, r1
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <MX_GPIO_Init+0x15c>)
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	02db      	lsls	r3, r3, #11
 800298c:	4013      	ands	r3, r2
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002992:	2340      	movs	r3, #64	; 0x40
 8002994:	33ff      	adds	r3, #255	; 0xff
 8002996:	483c      	ldr	r0, [pc, #240]	; (8002a88 <MX_GPIO_Init+0x160>)
 8002998:	2200      	movs	r2, #0
 800299a:	0019      	movs	r1, r3
 800299c:	f002 fd7f 	bl	800549e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80029a0:	2390      	movs	r3, #144	; 0x90
 80029a2:	05db      	lsls	r3, r3, #23
 80029a4:	2200      	movs	r2, #0
 80029a6:	2148      	movs	r1, #72	; 0x48
 80029a8:	0018      	movs	r0, r3
 80029aa:	f002 fd78 	bl	800549e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	32ff      	adds	r2, #255	; 0xff
 80029b4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	2201      	movs	r2, #1
 80029ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <MX_GPIO_Init+0x160>)
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f002 fbd0 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	2248      	movs	r2, #72	; 0x48
 80029d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	2201      	movs	r2, #1
 80029de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	193a      	adds	r2, r7, r4
 80029ee:	2390      	movs	r3, #144	; 0x90
 80029f0:	05db      	lsls	r3, r3, #23
 80029f2:	0011      	movs	r1, r2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f002 fbbd 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80029fa:	0021      	movs	r1, r4
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	221c      	movs	r2, #28
 8002a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2288      	movs	r2, #136	; 0x88
 8002a06:	0352      	lsls	r2, r2, #13
 8002a08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	000c      	movs	r4, r1
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <MX_GPIO_Init+0x164>)
 8002a16:	0019      	movs	r1, r3
 8002a18:	0010      	movs	r0, r2
 8002a1a:	f002 fbab 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	22c0      	movs	r2, #192	; 0xc0
 8002a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <MX_GPIO_Init+0x160>)
 8002a34:	0019      	movs	r1, r3
 8002a36:	0010      	movs	r0, r2
 8002a38:	f002 fb9c 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a3c:	0021      	movs	r1, r4
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	2220      	movs	r2, #32
 8002a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2200      	movs	r2, #0
 8002a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <MX_GPIO_Init+0x164>)
 8002a54:	0019      	movs	r1, r3
 8002a56:	0010      	movs	r0, r2
 8002a58:	f002 fb8c 	bl	8005174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2006      	movs	r0, #6
 8002a62:	f002 fa31 	bl	8004ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002a66:	2006      	movs	r0, #6
 8002a68:	f002 fa43 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2007      	movs	r0, #7
 8002a72:	f002 fa29 	bl	8004ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a76:	2007      	movs	r0, #7
 8002a78:	f002 fa3b 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b009      	add	sp, #36	; 0x24
 8002a82:	bd90      	pop	{r4, r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	48000800 	.word	0x48000800
 8002a8c:	48000400 	.word	0x48000400

08002a90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	0002      	movs	r2, r0
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	801a      	strh	r2, [r3, #0]
	curr = HAL_GetTick();
 8002a9c:	f001 fdee 	bl	800467c <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
	UNUSED(GPIO_Pin);
	if((GPIO_Pin == 4) && (curr - prev > 200))
 8002aa6:	1dbb      	adds	r3, r7, #6
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d10d      	bne.n	8002aca <HAL_GPIO_EXTI_Callback+0x3a>
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_GPIO_EXTI_Callback+0x6c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2bc8      	cmp	r3, #200	; 0xc8
 8002aba:	d906      	bls.n	8002aca <HAL_GPIO_EXTI_Callback+0x3a>
		{goleft = 1;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_GPIO_EXTI_Callback+0x70>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
		 prev = curr;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_GPIO_EXTI_Callback+0x6c>)
 8002ac8:	601a      	str	r2, [r3, #0]
		}
	if((GPIO_Pin == 16) && (curr - prev > 200))
 8002aca:	1dbb      	adds	r3, r7, #6
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d10d      	bne.n	8002aee <HAL_GPIO_EXTI_Callback+0x5e>
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_GPIO_EXTI_Callback+0x6c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2bc8      	cmp	r3, #200	; 0xc8
 8002ade:	d906      	bls.n	8002aee <HAL_GPIO_EXTI_Callback+0x5e>
		{goright = 1;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_GPIO_EXTI_Callback+0x74>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
		prev = curr;
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_GPIO_EXTI_Callback+0x6c>)
 8002aec:	601a      	str	r2, [r3, #0]
		}
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	200000b8 	.word	0x200000b8
 8002afc:	200000b4 	.word	0x200000b4
 8002b00:	200000ac 	.word	0x200000ac
 8002b04:	200000b0 	.word	0x200000b0

08002b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0c:	b672      	cpsid	i
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state*/
  __disable_irq();
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <Error_Handler+0x8>
	...

08002b14 <menu_home>:
uint8_t lastPressed = -1;
uint8_t lastButton = -1;
uint8_t pressHistory[3] = {0,0,0};
extern const Picture *image;
void menu_home()
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af04      	add	r7, sp, #16
	while (1)
	  {

		LCD_DrawString(80 ,40,  YELLOW, BLUE,"Home Menu", 16, 0);
 8002b1a:	4a36      	ldr	r2, [pc, #216]	; (8002bf4 <menu_home+0xe0>)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	2310      	movs	r3, #16
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <menu_home+0xe4>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	231f      	movs	r3, #31
 8002b2a:	2128      	movs	r1, #40	; 0x28
 8002b2c:	2050      	movs	r0, #80	; 0x50
 8002b2e:	f7ff fb4b 	bl	80021c8 <LCD_DrawString>

		if (goleft == 1) { //pressing left button
 8002b32:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <menu_home+0xe8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d11d      	bne.n	8002b76 <menu_home+0x62>
			if (currentSelectIndex == 0) {
 8002b3a:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <menu_home+0xec>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <menu_home+0x36>
				//if highlighted choice is very first choice, wrap around to last choice
				menu_move(2);
 8002b42:	2002      	movs	r0, #2
 8002b44:	f000 f862 	bl	8002c0c <menu_move>
 8002b48:	e00a      	b.n	8002b60 <menu_home+0x4c>

			} else {
				//else just highlight selection left to previous choice
				menu_move((currentSelectIndex - 1) % 3);
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <menu_home+0xec>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	2103      	movs	r1, #3
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7fd fc46 	bl	80003e4 <__aeabi_idivmod>
 8002b58:	000b      	movs	r3, r1
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f856 	bl	8002c0c <menu_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4827      	ldr	r0, [pc, #156]	; (8002c04 <menu_home+0xf0>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	0019      	movs	r1, r3
 8002b6a:	f002 fc98 	bl	800549e <HAL_GPIO_WritePin>
			goleft = 0; //reset left indication flag
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <menu_home+0xe8>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e03a      	b.n	8002bec <menu_home+0xd8>

		} else if (updateToggleHistory(3)) {
 8002b76:	2003      	movs	r0, #3
 8002b78:	f001 fab4 	bl	80040e4 <updateToggleHistory>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d00c      	beq.n	8002b9a <menu_home+0x86>
			//select button is pressed
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	481f      	ldr	r0, [pc, #124]	; (8002c04 <menu_home+0xf0>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	0019      	movs	r1, r3
 8002b8a:	f002 fc88 	bl	800549e <HAL_GPIO_WritePin>
			menu_select(currentSelectIndex);
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <menu_home+0xec>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 f882 	bl	8002c9c <menu_select>
 8002b98:	e028      	b.n	8002bec <menu_home+0xd8>

		} else if (goright == 1) { //pressing right button
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <menu_home+0xf4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d11d      	bne.n	8002bde <menu_home+0xca>
			if (currentSelectIndex == 2) {
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <menu_home+0xec>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <menu_home+0x9e>
				//if highlighted choice is very last choice, wrap around to first choice
						menu_move(0);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f000 f82e 	bl	8002c0c <menu_move>
 8002bb0:	e00a      	b.n	8002bc8 <menu_home+0xb4>
			} else {
				//else just highlight selection to previous choice
				menu_move((currentSelectIndex + 1) % 3);
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <menu_home+0xec>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	2103      	movs	r1, #3
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7fd fc12 	bl	80003e4 <__aeabi_idivmod>
 8002bc0:	000b      	movs	r3, r1
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f822 	bl	8002c0c <menu_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <menu_home+0xf0>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	f002 fc64 	bl	800549e <HAL_GPIO_WritePin>
			goright = 0; // reset right indication flag
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <menu_home+0xf4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e006      	b.n	8002bec <menu_home+0xd8>

		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4808      	ldr	r0, [pc, #32]	; (8002c04 <menu_home+0xf0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	0019      	movs	r1, r3
 8002be8:	f002 fc59 	bl	800549e <HAL_GPIO_WritePin>
		}

		HAL_Delay(40);
 8002bec:	2028      	movs	r0, #40	; 0x28
 8002bee:	f001 fd4f 	bl	8004690 <HAL_Delay>
		LCD_DrawString(80 ,40,  YELLOW, BLUE,"Home Menu", 16, 0);
 8002bf2:	e792      	b.n	8002b1a <menu_home+0x6>
 8002bf4:	0000ffe0 	.word	0x0000ffe0
 8002bf8:	08006f10 	.word	0x08006f10
 8002bfc:	200000ac 	.word	0x200000ac
 8002c00:	200000a4 	.word	0x200000a4
 8002c04:	48000800 	.word	0x48000800
 8002c08:	200000b0 	.word	0x200000b0

08002c0c <menu_move>:


	  }
}
void menu_move(int selectIndex) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af04      	add	r7, sp, #16
 8002c12:	6078      	str	r0, [r7, #4]
	//just unhighlighting previous choice and highlighting current choice
	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, menu[selectIndex], 16, 0);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	1c1a      	adds	r2, r3, #0
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	18d3      	adds	r3, r2, r3
 8002c1e:	1c1a      	adds	r2, r3, #0
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3319      	adds	r3, #25
 8002c28:	b298      	uxth	r0, r3
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <menu_move+0x84>)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	0092      	lsls	r2, r2, #2
 8002c30:	58d3      	ldr	r3, [r2, r3]
 8002c32:	4918      	ldr	r1, [pc, #96]	; (8002c94 <menu_move+0x88>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	9202      	str	r2, [sp, #8]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	9201      	str	r2, [sp, #4]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	000a      	movs	r2, r1
 8002c42:	21c8      	movs	r1, #200	; 0xc8
 8002c44:	f7ff fac0 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, menu[currentSelectIndex], 16, 0);
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <menu_move+0x8c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	1c1a      	adds	r2, r3, #0
 8002c50:	0092      	lsls	r2, r2, #2
 8002c52:	18d3      	adds	r3, r2, r3
 8002c54:	1c1a      	adds	r2, r3, #0
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3319      	adds	r3, #25
 8002c5e:	b298      	uxth	r0, r3
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <menu_move+0x8c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <menu_move+0x84>)
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	58d3      	ldr	r3, [r2, r3]
 8002c6a:	490a      	ldr	r1, [pc, #40]	; (8002c94 <menu_move+0x88>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	2210      	movs	r2, #16
 8002c72:	9201      	str	r2, [sp, #4]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	231f      	movs	r3, #31
 8002c78:	000a      	movs	r2, r1
 8002c7a:	21c8      	movs	r1, #200	; 0xc8
 8002c7c:	f7ff faa4 	bl	80021c8 <LCD_DrawString>

	currentSelectIndex = selectIndex;
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <menu_move+0x8c>)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	20000000 	.word	0x20000000
 8002c94:	0000ffe0 	.word	0x0000ffe0
 8002c98:	200000a4 	.word	0x200000a4

08002c9c <menu_select>:

void menu_select(int selectIndex) {
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	6078      	str	r0, [r7, #4]
	//selection cases of where to go
	//highlight selected choice in red
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, menu[selectIndex], 16, 0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	1c1a      	adds	r2, r3, #0
 8002caa:	0092      	lsls	r2, r2, #2
 8002cac:	18d3      	adds	r3, r2, r3
 8002cae:	1c1a      	adds	r2, r3, #0
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3319      	adds	r3, #25
 8002cb8:	b298      	uxth	r0, r3
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <menu_select+0x74>)
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	0092      	lsls	r2, r2, #2
 8002cc0:	58d3      	ldr	r3, [r2, r3]
 8002cc2:	22f8      	movs	r2, #248	; 0xf8
 8002cc4:	0212      	lsls	r2, r2, #8
 8002cc6:	4c13      	ldr	r4, [pc, #76]	; (8002d14 <menu_select+0x78>)
 8002cc8:	2100      	movs	r1, #0
 8002cca:	9102      	str	r1, [sp, #8]
 8002ccc:	2110      	movs	r1, #16
 8002cce:	9101      	str	r1, [sp, #4]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	0022      	movs	r2, r4
 8002cd6:	21c8      	movs	r1, #200	; 0xc8
 8002cd8:	f7ff fa76 	bl	80021c8 <LCD_DrawString>
    lastPressed = selectIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <menu_select+0x7c>)
 8002ce2:	701a      	strb	r2, [r3, #0]

    if(selectIndex == 1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <menu_select+0x54>
    {//Tune mode is selected so go to tune display
    	Tunemode();
 8002cea:	f000 fbc3 	bl	8003474 <Tunemode>
    }
    else if (selectIndex == 0)
    {//Info mode is selected so go to info display
    	Infomode();
    }
}
 8002cee:	e00a      	b.n	8002d06 <menu_select+0x6a>
    else if (selectIndex == 2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d102      	bne.n	8002cfc <menu_select+0x60>
    	Manualmode();
 8002cf6:	f000 f981 	bl	8002ffc <Manualmode>
}
 8002cfa:	e004      	b.n	8002d06 <menu_select+0x6a>
    else if (selectIndex == 0)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <menu_select+0x6a>
    	Infomode();
 8002d02:	f000 f80b 	bl	8002d1c <Infomode>
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b003      	add	sp, #12
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	20000000 	.word	0x20000000
 8002d14:	0000ffe0 	.word	0x0000ffe0
 8002d18:	20000078 	.word	0x20000078

08002d1c <Infomode>:
void Infomode()
{//Info mode that displays product usage and info
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af04      	add	r7, sp, #16
	LCD_Clear(BLUE);
 8002d22:	201f      	movs	r0, #31
 8002d24:	f7ff f87a 	bl	8001e1c <LCD_Clear>
	for (int i = 0; i < 2; i++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	e01c      	b.n	8002d68 <Infomode+0x4c>
		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Info[i], 16, 0);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	1c1a      	adds	r2, r3, #0
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	18d3      	adds	r3, r2, r3
 8002d38:	1c1a      	adds	r2, r3, #0
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3319      	adds	r3, #25
 8002d42:	b298      	uxth	r0, r3
 8002d44:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <Infomode+0x140>)
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	58d3      	ldr	r3, [r2, r3]
 8002d4c:	4944      	ldr	r1, [pc, #272]	; (8002e60 <Infomode+0x144>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	9202      	str	r2, [sp, #8]
 8002d52:	2210      	movs	r2, #16
 8002d54:	9201      	str	r2, [sp, #4]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	231f      	movs	r3, #31
 8002d5a:	000a      	movs	r2, r1
 8002d5c:	21c8      	movs	r1, #200	; 0xc8
 8002d5e:	f7ff fa33 	bl	80021c8 <LCD_DrawString>
	for (int i = 0; i < 2; i++) {
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3301      	adds	r3, #1
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	dddf      	ble.n	8002d2e <Infomode+0x12>
	}
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Info will be displayed", 16, 0);
 8002d6e:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <Infomode+0x144>)
 8002d70:	2300      	movs	r3, #0
 8002d72:	9302      	str	r3, [sp, #8]
 8002d74:	2310      	movs	r3, #16
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <Infomode+0x148>)
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	231f      	movs	r3, #31
 8002d7e:	2132      	movs	r1, #50	; 0x32
 8002d80:	2019      	movs	r0, #25
 8002d82:	f7ff fa21 	bl	80021c8 <LCD_DrawString>
	//currently nothing is displayed for now
	Info_move(0);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f876 	bl	8002e78 <Info_move>

	 while (1)
	  {
		if (goleft == 1) {//going left
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <Infomode+0x14c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d11d      	bne.n	8002dd0 <Infomode+0xb4>
			if (currentSelectIndex == 0) {
 8002d94:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <Infomode+0x150>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <Infomode+0x88>
				Info_move(1); // wrap around if very first choice
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f000 f86b 	bl	8002e78 <Info_move>
 8002da2:	e00a      	b.n	8002dba <Infomode+0x9e>

			} else {// else just highlight left of previous choice
				Info_move((currentSelectIndex - 1) % 3);
 8002da4:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <Infomode+0x150>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	2103      	movs	r1, #3
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fd fb19 	bl	80003e4 <__aeabi_idivmod>
 8002db2:	000b      	movs	r3, r1
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f85f 	bl	8002e78 <Info_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	482c      	ldr	r0, [pc, #176]	; (8002e70 <Infomode+0x154>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	f002 fb6b 	bl	800549e <HAL_GPIO_WritePin>
			goleft = 0;
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <Infomode+0x14c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e03d      	b.n	8002e4c <Infomode+0x130>
		} else if (updateToggleHistory(3)) {
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f001 f987 	bl	80040e4 <updateToggleHistory>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d00f      	beq.n	8002dfa <Infomode+0xde>
			//selection button pressed
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4824      	ldr	r0, [pc, #144]	; (8002e70 <Infomode+0x154>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	0019      	movs	r1, r3
 8002de4:	f002 fb5b 	bl	800549e <HAL_GPIO_WritePin>
			if(Info_select(currentSelectIndex) == 1)
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <Infomode+0x150>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f88b 	bl	8002f08 <Info_select>
 8002df2:	0003      	movs	r3, r0
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d129      	bne.n	8002e4c <Infomode+0x130>
			{//if back selection is pressed, then return to home display
				return;
 8002df8:	e02c      	b.n	8002e54 <Infomode+0x138>
			}

		} else if (goright == 1) {//right button pressed
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <Infomode+0x158>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d11d      	bne.n	8002e3e <Infomode+0x122>

			if (currentSelectIndex == 1) {
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <Infomode+0x150>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d103      	bne.n	8002e12 <Infomode+0xf6>
						Info_move(0);//wrap around if very last choices
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f000 f834 	bl	8002e78 <Info_move>
 8002e10:	e00a      	b.n	8002e28 <Infomode+0x10c>
			} else { //else highlight right of previous choice
				Info_move((currentSelectIndex + 1) % 3);
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <Infomode+0x150>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	2103      	movs	r1, #3
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7fd fae2 	bl	80003e4 <__aeabi_idivmod>
 8002e20:	000b      	movs	r3, r1
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f828 	bl	8002e78 <Info_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4810      	ldr	r0, [pc, #64]	; (8002e70 <Infomode+0x154>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	0019      	movs	r1, r3
 8002e32:	f002 fb34 	bl	800549e <HAL_GPIO_WritePin>
			goright = 0;
 8002e36:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <Infomode+0x158>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e006      	b.n	8002e4c <Infomode+0x130>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	480b      	ldr	r0, [pc, #44]	; (8002e70 <Infomode+0x154>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	0019      	movs	r1, r3
 8002e48:	f002 fb29 	bl	800549e <HAL_GPIO_WritePin>
		}

		HAL_Delay(40);
 8002e4c:	2028      	movs	r0, #40	; 0x28
 8002e4e:	f001 fc1f 	bl	8004690 <HAL_Delay>
		if (goleft == 1) {//going left
 8002e52:	e79b      	b.n	8002d8c <Infomode+0x70>

	  }
}
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	20000034 	.word	0x20000034
 8002e60:	0000ffe0 	.word	0x0000ffe0
 8002e64:	08006f1c 	.word	0x08006f1c
 8002e68:	200000ac 	.word	0x200000ac
 8002e6c:	200000a4 	.word	0x200000a4
 8002e70:	48000800 	.word	0x48000800
 8002e74:	200000b0 	.word	0x200000b0

08002e78 <Info_move>:
void Info_move(int selectIndex)
{//move highlight to current selection and unhighlight previous selection
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af04      	add	r7, sp, #16
 8002e7e:	6078      	str	r0, [r7, #4]
	LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, Info[currentSelectIndex], 16, 0);
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <Info_move+0x84>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	1c1a      	adds	r2, r3, #0
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	1c1a      	adds	r2, r3, #0
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3319      	adds	r3, #25
 8002e96:	b298      	uxth	r0, r3
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <Info_move+0x84>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <Info_move+0x88>)
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	58d3      	ldr	r3, [r2, r3]
 8002ea2:	4918      	ldr	r1, [pc, #96]	; (8002f04 <Info_move+0x8c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	9202      	str	r2, [sp, #8]
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	9201      	str	r2, [sp, #4]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	231f      	movs	r3, #31
 8002eb0:	000a      	movs	r2, r1
 8002eb2:	21c8      	movs	r1, #200	; 0xc8
 8002eb4:	f7ff f988 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, Info[selectIndex], 16, 0);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	1c1a      	adds	r2, r3, #0
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	1c1a      	adds	r2, r3, #0
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3319      	adds	r3, #25
 8002ecc:	b298      	uxth	r0, r3
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <Info_move+0x88>)
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	58d3      	ldr	r3, [r2, r3]
 8002ed6:	490b      	ldr	r1, [pc, #44]	; (8002f04 <Info_move+0x8c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	9202      	str	r2, [sp, #8]
 8002edc:	2210      	movs	r2, #16
 8002ede:	9201      	str	r2, [sp, #4]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	21c8      	movs	r1, #200	; 0xc8
 8002ee8:	f7ff f96e 	bl	80021c8 <LCD_DrawString>
	currentSelectIndex = selectIndex;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <Info_move+0x84>)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	200000a4 	.word	0x200000a4
 8002f00:	20000034 	.word	0x20000034
 8002f04:	0000ffe0 	.word	0x0000ffe0

08002f08 <Info_select>:
int Info_select(int selectIndex) {
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	6078      	str	r0, [r7, #4]
	//highlight selected option in RED
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, Info[selectIndex], 16, 0);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	1c1a      	adds	r2, r3, #0
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	18d3      	adds	r3, r2, r3
 8002f1a:	1c1a      	adds	r2, r3, #0
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3319      	adds	r3, #25
 8002f24:	b298      	uxth	r0, r3
 8002f26:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <Info_select+0xe0>)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	0092      	lsls	r2, r2, #2
 8002f2c:	58d3      	ldr	r3, [r2, r3]
 8002f2e:	22f8      	movs	r2, #248	; 0xf8
 8002f30:	0212      	lsls	r2, r2, #8
 8002f32:	4c2e      	ldr	r4, [pc, #184]	; (8002fec <Info_select+0xe4>)
 8002f34:	2100      	movs	r1, #0
 8002f36:	9102      	str	r1, [sp, #8]
 8002f38:	2110      	movs	r1, #16
 8002f3a:	9101      	str	r1, [sp, #4]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	0013      	movs	r3, r2
 8002f40:	0022      	movs	r2, r4
 8002f42:	21c8      	movs	r1, #200	; 0xc8
 8002f44:	f7ff f940 	bl	80021c8 <LCD_DrawString>
    lastPressed = selectIndex;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <Info_select+0xe8>)
 8002f4e:	701a      	strb	r2, [r3, #0]
    if(currentSelectIndex == 0)
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <Info_select+0xec>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d141      	bne.n	8002fdc <Info_select+0xd4>
    {//for now, the back button is the only functional option. if more information
     //needs to be displayed, the 'next' option will be used.
    	//Reseting the display to show Home, before returning
    	LCD_Clear(BLUE);
 8002f58:	201f      	movs	r0, #31
 8002f5a:	f7fe ff5f 	bl	8001e1c <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	e01c      	b.n	8002f9e <Info_select+0x96>
    		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	1c1a      	adds	r2, r3, #0
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	1c1a      	adds	r2, r3, #0
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3319      	adds	r3, #25
 8002f78:	b298      	uxth	r0, r3
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <Info_select+0xf0>)
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	0092      	lsls	r2, r2, #2
 8002f80:	58d3      	ldr	r3, [r2, r3]
 8002f82:	491a      	ldr	r1, [pc, #104]	; (8002fec <Info_select+0xe4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	9202      	str	r2, [sp, #8]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	231f      	movs	r3, #31
 8002f90:	000a      	movs	r2, r1
 8002f92:	21c8      	movs	r1, #200	; 0xc8
 8002f94:	f7ff f918 	bl	80021c8 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	dddf      	ble.n	8002f64 <Info_select+0x5c>
    	}
    	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, menu[selectIndex], 16, 0);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	1c1a      	adds	r2, r3, #0
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	18d3      	adds	r3, r2, r3
 8002fae:	1c1a      	adds	r2, r3, #0
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3319      	adds	r3, #25
 8002fb8:	b298      	uxth	r0, r3
 8002fba:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <Info_select+0xf0>)
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	58d3      	ldr	r3, [r2, r3]
 8002fc2:	490a      	ldr	r1, [pc, #40]	; (8002fec <Info_select+0xe4>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	9202      	str	r2, [sp, #8]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	9201      	str	r2, [sp, #4]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	000a      	movs	r2, r1
 8002fd2:	21c8      	movs	r1, #200	; 0xc8
 8002fd4:	f7ff f8f8 	bl	80021c8 <LCD_DrawString>
    	return 1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <Info_select+0xd6>
    }

    return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b005      	add	sp, #20
 8002fe4:	bd90      	pop	{r4, r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	20000034 	.word	0x20000034
 8002fec:	0000ffe0 	.word	0x0000ffe0
 8002ff0:	20000078 	.word	0x20000078
 8002ff4:	200000a4 	.word	0x200000a4
 8002ff8:	20000000 	.word	0x20000000

08002ffc <Manualmode>:
void Manualmode()
{ //display manual mode
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af04      	add	r7, sp, #16
	LCD_Clear(BLUE);
 8003002:	201f      	movs	r0, #31
 8003004:	f7fe ff0a 	bl	8001e1c <LCD_Clear>
	for (int i = 0; i < 3; i++) {
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	e01c      	b.n	8003048 <Manualmode+0x4c>
		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Manual[i], 16, 0);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	b29b      	uxth	r3, r3
 8003012:	1c1a      	adds	r2, r3, #0
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	18d3      	adds	r3, r2, r3
 8003018:	1c1a      	adds	r2, r3, #0
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	b29b      	uxth	r3, r3
 8003020:	3319      	adds	r3, #25
 8003022:	b298      	uxth	r0, r3
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <Manualmode+0x15c>)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	58d3      	ldr	r3, [r2, r3]
 800302c:	494b      	ldr	r1, [pc, #300]	; (800315c <Manualmode+0x160>)
 800302e:	2200      	movs	r2, #0
 8003030:	9202      	str	r2, [sp, #8]
 8003032:	2210      	movs	r2, #16
 8003034:	9201      	str	r2, [sp, #4]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	231f      	movs	r3, #31
 800303a:	000a      	movs	r2, r1
 800303c:	21c8      	movs	r1, #200	; 0xc8
 800303e:	f7ff f8c3 	bl	80021c8 <LCD_DrawString>
	for (int i = 0; i < 3; i++) {
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3301      	adds	r3, #1
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	dddf      	ble.n	800300e <Manualmode+0x12>
	}
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Manually Control drill", 16, 0);
 800304e:	4a43      	ldr	r2, [pc, #268]	; (800315c <Manualmode+0x160>)
 8003050:	2300      	movs	r3, #0
 8003052:	9302      	str	r3, [sp, #8]
 8003054:	2310      	movs	r3, #16
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <Manualmode+0x164>)
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	231f      	movs	r3, #31
 800305e:	2132      	movs	r1, #50	; 0x32
 8003060:	2019      	movs	r0, #25
 8003062:	f7ff f8b1 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(25 ,75,  YELLOW, BLUE,"Re-String Purpose", 16, 0);
 8003066:	4a3d      	ldr	r2, [pc, #244]	; (800315c <Manualmode+0x160>)
 8003068:	2300      	movs	r3, #0
 800306a:	9302      	str	r3, [sp, #8]
 800306c:	2310      	movs	r3, #16
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <Manualmode+0x168>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	231f      	movs	r3, #31
 8003076:	214b      	movs	r1, #75	; 0x4b
 8003078:	2019      	movs	r0, #25
 800307a:	f7ff f8a5 	bl	80021c8 <LCD_DrawString>
	Manual_move(0, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2000      	movs	r0, #0
 8003084:	f000 f878 	bl	8003178 <Manual_move>

	//same selction mechanics as Home display
	 while (1)
	  {
		if (goleft == 1) {
 8003088:	4b37      	ldr	r3, [pc, #220]	; (8003168 <Manualmode+0x16c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d11d      	bne.n	80030cc <Manualmode+0xd0>
			if (currentSelectIndex == 0) {
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <Manualmode+0x170>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <Manualmode+0xa4>
				Manual_move(2);
 8003098:	2002      	movs	r0, #2
 800309a:	f000 f86d 	bl	8003178 <Manual_move>
 800309e:	e00a      	b.n	80030b6 <Manualmode+0xba>

			} else {
				Manual_move((currentSelectIndex - 1) % 3);
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <Manualmode+0x170>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	2103      	movs	r1, #3
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7fd f99b 	bl	80003e4 <__aeabi_idivmod>
 80030ae:	000b      	movs	r3, r1
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f861 	bl	8003178 <Manual_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	482d      	ldr	r0, [pc, #180]	; (8003170 <Manualmode+0x174>)
 80030bc:	2201      	movs	r2, #1
 80030be:	0019      	movs	r1, r3
 80030c0:	f002 f9ed 	bl	800549e <HAL_GPIO_WritePin>
			goleft = 0;
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <Manualmode+0x16c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e03d      	b.n	8003148 <Manualmode+0x14c>
		} else if (updateToggleHistory(3)) {
 80030cc:	2003      	movs	r0, #3
 80030ce:	f001 f809 	bl	80040e4 <updateToggleHistory>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d00f      	beq.n	80030f6 <Manualmode+0xfa>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4825      	ldr	r0, [pc, #148]	; (8003170 <Manualmode+0x174>)
 80030dc:	2201      	movs	r2, #1
 80030de:	0019      	movs	r1, r3
 80030e0:	f002 f9dd 	bl	800549e <HAL_GPIO_WritePin>
			if(Manual_select(currentSelectIndex) == 1)
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <Manualmode+0x170>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 f88d 	bl	8003208 <Manual_select>
 80030ee:	0003      	movs	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d129      	bne.n	8003148 <Manualmode+0x14c>
			{
				return;
 80030f4:	e02c      	b.n	8003150 <Manualmode+0x154>
			}

		} else if (goright == 1) {
 80030f6:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <Manualmode+0x178>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d11d      	bne.n	800313a <Manualmode+0x13e>

			if (currentSelectIndex == 2) {
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <Manualmode+0x170>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d103      	bne.n	800310e <Manualmode+0x112>
						Manual_move(0);
 8003106:	2000      	movs	r0, #0
 8003108:	f000 f836 	bl	8003178 <Manual_move>
 800310c:	e00a      	b.n	8003124 <Manualmode+0x128>
			} else {
				Manual_move((currentSelectIndex + 1) % 3);
 800310e:	4b17      	ldr	r3, [pc, #92]	; (800316c <Manualmode+0x170>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3301      	adds	r3, #1
 8003114:	2103      	movs	r1, #3
 8003116:	0018      	movs	r0, r3
 8003118:	f7fd f964 	bl	80003e4 <__aeabi_idivmod>
 800311c:	000b      	movs	r3, r1
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f82a 	bl	8003178 <Manual_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4811      	ldr	r0, [pc, #68]	; (8003170 <Manualmode+0x174>)
 800312a:	2201      	movs	r2, #1
 800312c:	0019      	movs	r1, r3
 800312e:	f002 f9b6 	bl	800549e <HAL_GPIO_WritePin>
			goright = 0;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <Manualmode+0x178>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e006      	b.n	8003148 <Manualmode+0x14c>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	480c      	ldr	r0, [pc, #48]	; (8003170 <Manualmode+0x174>)
 8003140:	2200      	movs	r2, #0
 8003142:	0019      	movs	r1, r3
 8003144:	f002 f9ab 	bl	800549e <HAL_GPIO_WritePin>
		}

		HAL_Delay(40);
 8003148:	2028      	movs	r0, #40	; 0x28
 800314a:	f001 faa1 	bl	8004690 <HAL_Delay>
		if (goleft == 1) {
 800314e:	e79b      	b.n	8003088 <Manualmode+0x8c>

	  }
}
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	20000028 	.word	0x20000028
 800315c:	0000ffe0 	.word	0x0000ffe0
 8003160:	08006f34 	.word	0x08006f34
 8003164:	08006f4c 	.word	0x08006f4c
 8003168:	200000ac 	.word	0x200000ac
 800316c:	200000a4 	.word	0x200000a4
 8003170:	48000800 	.word	0x48000800
 8003174:	200000b0 	.word	0x200000b0

08003178 <Manual_move>:
void Manual_move(int selectIndex)
{//highlight current selection and unhighlight previous
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af04      	add	r7, sp, #16
 800317e:	6078      	str	r0, [r7, #4]
	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, Manual[selectIndex], 16, 0);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	b29b      	uxth	r3, r3
 8003184:	1c1a      	adds	r2, r3, #0
 8003186:	0092      	lsls	r2, r2, #2
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	1c1a      	adds	r2, r3, #0
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	3319      	adds	r3, #25
 8003194:	b298      	uxth	r0, r3
 8003196:	4b19      	ldr	r3, [pc, #100]	; (80031fc <Manual_move+0x84>)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	58d3      	ldr	r3, [r2, r3]
 800319e:	4918      	ldr	r1, [pc, #96]	; (8003200 <Manual_move+0x88>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	9202      	str	r2, [sp, #8]
 80031a4:	2210      	movs	r2, #16
 80031a6:	9201      	str	r2, [sp, #4]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	000a      	movs	r2, r1
 80031ae:	21c8      	movs	r1, #200	; 0xc8
 80031b0:	f7ff f80a 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, Manual[currentSelectIndex], 16, 0);
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <Manual_move+0x8c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	1c1a      	adds	r2, r3, #0
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	18d3      	adds	r3, r2, r3
 80031c0:	1c1a      	adds	r2, r3, #0
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3319      	adds	r3, #25
 80031ca:	b298      	uxth	r0, r3
 80031cc:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <Manual_move+0x8c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <Manual_move+0x84>)
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	58d3      	ldr	r3, [r2, r3]
 80031d6:	490a      	ldr	r1, [pc, #40]	; (8003200 <Manual_move+0x88>)
 80031d8:	2200      	movs	r2, #0
 80031da:	9202      	str	r2, [sp, #8]
 80031dc:	2210      	movs	r2, #16
 80031de:	9201      	str	r2, [sp, #4]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	231f      	movs	r3, #31
 80031e4:	000a      	movs	r2, r1
 80031e6:	21c8      	movs	r1, #200	; 0xc8
 80031e8:	f7fe ffee 	bl	80021c8 <LCD_DrawString>
	currentSelectIndex = selectIndex;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <Manual_move+0x8c>)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	20000028 	.word	0x20000028
 8003200:	0000ffe0 	.word	0x0000ffe0
 8003204:	200000a4 	.word	0x200000a4

08003208 <Manual_select>:
int Manual_select(int selectIndex) {
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af04      	add	r7, sp, #16
 800320e:	6078      	str	r0, [r7, #4]
	//highlight selected option in red
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, Manual[selectIndex], 16, 0);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	b29b      	uxth	r3, r3
 8003214:	1c1a      	adds	r2, r3, #0
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	18d3      	adds	r3, r2, r3
 800321a:	1c1a      	adds	r2, r3, #0
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	b29b      	uxth	r3, r3
 8003222:	3319      	adds	r3, #25
 8003224:	b298      	uxth	r0, r3
 8003226:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <Manual_select+0x118>)
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	58d3      	ldr	r3, [r2, r3]
 800322e:	22f8      	movs	r2, #248	; 0xf8
 8003230:	0212      	lsls	r2, r2, #8
 8003232:	4c3c      	ldr	r4, [pc, #240]	; (8003324 <Manual_select+0x11c>)
 8003234:	2100      	movs	r1, #0
 8003236:	9102      	str	r1, [sp, #8]
 8003238:	2110      	movs	r1, #16
 800323a:	9101      	str	r1, [sp, #4]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	0013      	movs	r3, r2
 8003240:	0022      	movs	r2, r4
 8003242:	21c8      	movs	r1, #200	; 0xc8
 8003244:	f7fe ffc0 	bl	80021c8 <LCD_DrawString>
    lastPressed = selectIndex;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	b2da      	uxtb	r2, r3
 800324c:	4b36      	ldr	r3, [pc, #216]	; (8003328 <Manual_select+0x120>)
 800324e:	701a      	strb	r2, [r3, #0]
    if(currentSelectIndex == 0)
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <Manual_select+0x124>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d144      	bne.n	80032e2 <Manual_select+0xda>
    {// back option is selected, reset display to home and return
    	LCD_Clear(BLUE);
 8003258:	201f      	movs	r0, #31
 800325a:	f7fe fddf 	bl	8001e1c <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e01c      	b.n	800329e <Manual_select+0x96>
    		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	b29b      	uxth	r3, r3
 8003268:	1c1a      	adds	r2, r3, #0
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	18d3      	adds	r3, r2, r3
 800326e:	1c1a      	adds	r2, r3, #0
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	b29b      	uxth	r3, r3
 8003276:	3319      	adds	r3, #25
 8003278:	b298      	uxth	r0, r3
 800327a:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <Manual_select+0x128>)
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	58d3      	ldr	r3, [r2, r3]
 8003282:	4928      	ldr	r1, [pc, #160]	; (8003324 <Manual_select+0x11c>)
 8003284:	2200      	movs	r2, #0
 8003286:	9202      	str	r2, [sp, #8]
 8003288:	2210      	movs	r2, #16
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	231f      	movs	r3, #31
 8003290:	000a      	movs	r2, r1
 8003292:	21c8      	movs	r1, #200	; 0xc8
 8003294:	f7fe ff98 	bl	80021c8 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	dddf      	ble.n	8003264 <Manual_select+0x5c>
    	}
    	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, menu[selectIndex], 16, 0);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	1c1a      	adds	r2, r3, #0
 80032aa:	0092      	lsls	r2, r2, #2
 80032ac:	18d3      	adds	r3, r2, r3
 80032ae:	1c1a      	adds	r2, r3, #0
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3319      	adds	r3, #25
 80032b8:	b298      	uxth	r0, r3
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <Manual_select+0x128>)
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	58d3      	ldr	r3, [r2, r3]
 80032c2:	4918      	ldr	r1, [pc, #96]	; (8003324 <Manual_select+0x11c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	9202      	str	r2, [sp, #8]
 80032c8:	2210      	movs	r2, #16
 80032ca:	9201      	str	r2, [sp, #4]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2300      	movs	r3, #0
 80032d0:	000a      	movs	r2, r1
 80032d2:	21c8      	movs	r1, #200	; 0xc8
 80032d4:	f7fe ff78 	bl	80021c8 <LCD_DrawString>
    	currentSelectIndex = 0;
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <Manual_select+0x124>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    	return 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	e019      	b.n	8003316 <Manual_select+0x10e>
    }
    else if (currentSelectIndex == 1)
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <Manual_select+0x124>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <Manual_select+0xf2>
    {//'Tighten' option is selected, move stepper motor to tighten rotation as long as trigger is pressed
    	stepperMotor(0, 15000, 1000, 1);
 80032ea:	23fa      	movs	r3, #250	; 0xfa
 80032ec:	009a      	lsls	r2, r3, #2
 80032ee:	4911      	ldr	r1, [pc, #68]	; (8003334 <Manual_select+0x12c>)
 80032f0:	2301      	movs	r3, #1
 80032f2:	2000      	movs	r0, #0
 80032f4:	f000 f820 	bl	8003338 <stepperMotor>
 80032f8:	e00a      	b.n	8003310 <Manual_select+0x108>
    }
    else if(currentSelectIndex == 2)
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <Manual_select+0x124>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d106      	bne.n	8003310 <Manual_select+0x108>
    {//'loosen' option is selected, move stepper motor to loosen rotation as long as trigger is pressed
    	stepperMotor(1, 15000, 1000, 1);
 8003302:	23fa      	movs	r3, #250	; 0xfa
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	490b      	ldr	r1, [pc, #44]	; (8003334 <Manual_select+0x12c>)
 8003308:	2301      	movs	r3, #1
 800330a:	2001      	movs	r0, #1
 800330c:	f000 f814 	bl	8003338 <stepperMotor>
    }
    stopmotor();
 8003310:	f7ff f828 	bl	8002364 <stopmotor>
    return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b005      	add	sp, #20
 800331c:	bd90      	pop	{r4, r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	20000028 	.word	0x20000028
 8003324:	0000ffe0 	.word	0x0000ffe0
 8003328:	20000078 	.word	0x20000078
 800332c:	200000a4 	.word	0x200000a4
 8003330:	20000000 	.word	0x20000000
 8003334:	00003a98 	.word	0x00003a98

08003338 <stepperMotor>:

void stepperMotor(int direction, int per, int angle, int mode)
{// stepper motor control
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
	if(direction == 0) // directional change
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <stepperMotor+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <stepperMotor+0x120>)
 800334e:	2200      	movs	r2, #0
 8003350:	2108      	movs	r1, #8
 8003352:	0018      	movs	r0, r3
 8003354:	f002 f8a3 	bl	800549e <HAL_GPIO_WritePin>
 8003358:	e005      	b.n	8003366 <stepperMotor+0x2e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <stepperMotor+0x120>)
 800335c:	2201      	movs	r2, #1
 800335e:	2108      	movs	r1, #8
 8003360:	0018      	movs	r0, r3
 8003362:	f002 f89c 	bl	800549e <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //motor Enable
 8003366:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <stepperMotor+0x120>)
 8003368:	2200      	movs	r2, #0
 800336a:	2101      	movs	r1, #1
 800336c:	0018      	movs	r0, r3
 800336e:	f002 f896 	bl	800549e <HAL_GPIO_WritePin>
	change_pwm(per);// this is to change pwm signal in case we want to speed or low down motore
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0018      	movs	r0, r3
 8003376:	f7ff f809 	bl	800238c <change_pwm>
	// change_pwm might not even be used
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);//seting motor to full drive
 800337a:	4b37      	ldr	r3, [pc, #220]	; (8003458 <stepperMotor+0x120>)
 800337c:	2200      	movs	r2, #0
 800337e:	2120      	movs	r1, #32
 8003380:	0018      	movs	r0, r3
 8003382:	f002 f88c 	bl	800549e <HAL_GPIO_WritePin>

	if(mode == 1) //Manual stepper rotation
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d113      	bne.n	80033b4 <stepperMotor+0x7c>
	{startmotor();
 800338c:	f7fe ffde 	bl	800234c <startmotor>
	while(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 8003390:	e003      	b.n	800339a <stepperMotor+0x62>
	{//while trigger button is being pressed, currently mapped to selection button for testing
		nano_wait(5000000);
 8003392:	4b32      	ldr	r3, [pc, #200]	; (800345c <stepperMotor+0x124>)
 8003394:	0018      	movs	r0, r3
 8003396:	f7fe fb0f 	bl	80019b8 <nano_wait>
	while(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 800339a:	2003      	movs	r0, #3
 800339c:	f000 fea2 	bl	80040e4 <updateToggleHistory>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d1f6      	bne.n	8003392 <stepperMotor+0x5a>
 80033a4:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <stepperMotor+0x128>)
 80033a6:	2108      	movs	r1, #8
 80033a8:	0018      	movs	r0, r3
 80033aa:	f002 f85b 	bl	8005464 <HAL_GPIO_ReadPin>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d1ef      	bne.n	8003392 <stepperMotor+0x5a>
 80033b2:	e04a      	b.n	800344a <stepperMotor+0x112>

	}
	}
	else //Angular precise stepper movements
		{
		uint32_t timemotor = per* angle  / 10000 / 1.8 * 1.25; //period * number of steps(angle) / 10000 / 1.8degrees per step * 1.25
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4353      	muls	r3, r2
 80033ba:	492a      	ldr	r1, [pc, #168]	; (8003464 <stepperMotor+0x12c>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f7fc ff2b 	bl	8000218 <__divsi3>
 80033c2:	0003      	movs	r3, r0
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7fe f94d 	bl	8001664 <__aeabi_i2d>
 80033ca:	4a27      	ldr	r2, [pc, #156]	; (8003468 <stepperMotor+0x130>)
 80033cc:	4b27      	ldr	r3, [pc, #156]	; (800346c <stepperMotor+0x134>)
 80033ce:	f7fd f82d 	bl	800042c <__aeabi_ddiv>
 80033d2:	0002      	movs	r2, r0
 80033d4:	000b      	movs	r3, r1
 80033d6:	0010      	movs	r0, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	4b24      	ldr	r3, [pc, #144]	; (8003470 <stepperMotor+0x138>)
 80033de:	f7fd fb0d 	bl	80009fc <__aeabi_dmul>
 80033e2:	0002      	movs	r2, r0
 80033e4:	000b      	movs	r3, r1
 80033e6:	0010      	movs	r0, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	f7fd f801 	bl	80003f0 <__aeabi_d2uiz>
 80033ee:	0003      	movs	r3, r0
 80033f0:	61fb      	str	r3, [r7, #28]
		startmotor();
 80033f2:	f7fe ffab 	bl	800234c <startmotor>
		uint32_t motorstarttime = HAL_GetTick();
 80033f6:	f001 f941 	bl	800467c <HAL_GetTick>
 80033fa:	0003      	movs	r3, r0
 80033fc:	61bb      	str	r3, [r7, #24]
		uint32_t currmotor = HAL_GetTick();
 80033fe:	f001 f93d 	bl	800467c <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	617b      	str	r3, [r7, #20]
		while((HAL_GetTick() - motorstarttime < timemotor) &( updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3))))
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	f001 f938 	bl	800467c <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	429a      	cmp	r2, r3
 8003416:	419b      	sbcs	r3, r3
 8003418:	425b      	negs	r3, r3
 800341a:	b2dc      	uxtb	r4, r3
 800341c:	2003      	movs	r0, #3
 800341e:	f000 fe61 	bl	80040e4 <updateToggleHistory>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d106      	bne.n	8003434 <stepperMotor+0xfc>
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <stepperMotor+0x128>)
 8003428:	2108      	movs	r1, #8
 800342a:	0018      	movs	r0, r3
 800342c:	f002 f81a 	bl	8005464 <HAL_GPIO_ReadPin>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d001      	beq.n	8003438 <stepperMotor+0x100>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <stepperMotor+0x102>
 8003438:	2300      	movs	r3, #0
 800343a:	1c1a      	adds	r2, r3, #0
 800343c:	2301      	movs	r3, #1
 800343e:	4013      	ands	r3, r2
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4023      	ands	r3, r4
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1de      	bne.n	8003408 <stepperMotor+0xd0>
		{//while trigger is pressed and angle time is not exceeded, continue running the motor
		}
		}

	//stop motor
	stopmotor();
 800344a:	f7fe ff8b 	bl	8002364 <stopmotor>
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b009      	add	sp, #36	; 0x24
 8003454:	bd90      	pop	{r4, r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	48000800 	.word	0x48000800
 800345c:	004c4b40 	.word	0x004c4b40
 8003460:	48000400 	.word	0x48000400
 8003464:	00002710 	.word	0x00002710
 8003468:	cccccccd 	.word	0xcccccccd
 800346c:	3ffccccc 	.word	0x3ffccccc
 8003470:	3ff40000 	.word	0x3ff40000

08003474 <Tunemode>:
void Tunemode() {
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b08d      	sub	sp, #52	; 0x34
 8003478:	af04      	add	r7, sp, #16
	//introduce scroll index which represents the current index in the list of tune
	/*currentSelectIndex is just representing the index respective to which of current three selection
	on the screen is being highlighted */
	int scrollidx = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	603b      	str	r3, [r7, #0]
	LCD_Clear(BLUE);
 800347e:	201f      	movs	r0, #31
 8003480:	f7fe fccc 	bl	8001e1c <LCD_Clear>
	for (int i = 0; i < 3; i++) {
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e01c      	b.n	80034c4 <Tunemode+0x50>
		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[i], 16, 0);
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	b29b      	uxth	r3, r3
 800348e:	1c1a      	adds	r2, r3, #0
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	18d3      	adds	r3, r2, r3
 8003494:	1c1a      	adds	r2, r3, #0
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	3319      	adds	r3, #25
 800349e:	b298      	uxth	r0, r3
 80034a0:	4be4      	ldr	r3, [pc, #912]	; (8003834 <Tunemode+0x3c0>)
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	58d3      	ldr	r3, [r2, r3]
 80034a8:	49e3      	ldr	r1, [pc, #908]	; (8003838 <Tunemode+0x3c4>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	9202      	str	r2, [sp, #8]
 80034ae:	2210      	movs	r2, #16
 80034b0:	9201      	str	r2, [sp, #4]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	231f      	movs	r3, #31
 80034b6:	000a      	movs	r2, r1
 80034b8:	21c8      	movs	r1, #200	; 0xc8
 80034ba:	f7fe fe85 	bl	80021c8 <LCD_DrawString>
	for (int i = 0; i < 3; i++) {
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3301      	adds	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	dddf      	ble.n	800348a <Tunemode+0x16>
	  }
	//display peg diagram
	LCD_DrawString(95 ,25,  YELLOW, BLUE,"-----", 16, 0);
 80034ca:	4adb      	ldr	r2, [pc, #876]	; (8003838 <Tunemode+0x3c4>)
 80034cc:	2300      	movs	r3, #0
 80034ce:	9302      	str	r3, [sp, #8]
 80034d0:	2310      	movs	r3, #16
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	4bd9      	ldr	r3, [pc, #868]	; (800383c <Tunemode+0x3c8>)
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	231f      	movs	r3, #31
 80034da:	2119      	movs	r1, #25
 80034dc:	205f      	movs	r0, #95	; 0x5f
 80034de:	f7fe fe73 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(60 ,40,  YELLOW, BLUE,"3 - |    | - 4", 16, 0);
 80034e2:	4ad5      	ldr	r2, [pc, #852]	; (8003838 <Tunemode+0x3c4>)
 80034e4:	2300      	movs	r3, #0
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	2310      	movs	r3, #16
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	4bd4      	ldr	r3, [pc, #848]	; (8003840 <Tunemode+0x3cc>)
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	231f      	movs	r3, #31
 80034f2:	2128      	movs	r1, #40	; 0x28
 80034f4:	203c      	movs	r0, #60	; 0x3c
 80034f6:	f7fe fe67 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"2 - |    | - 5", 16, 0);
 80034fa:	4acf      	ldr	r2, [pc, #828]	; (8003838 <Tunemode+0x3c4>)
 80034fc:	2300      	movs	r3, #0
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	2310      	movs	r3, #16
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	4bcf      	ldr	r3, [pc, #828]	; (8003844 <Tunemode+0x3d0>)
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	231f      	movs	r3, #31
 800350a:	213c      	movs	r1, #60	; 0x3c
 800350c:	203c      	movs	r0, #60	; 0x3c
 800350e:	f7fe fe5b 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(60 ,80,  YELLOW, BLUE,"1 - |    | - 6", 16, 0);
 8003512:	4ac9      	ldr	r2, [pc, #804]	; (8003838 <Tunemode+0x3c4>)
 8003514:	2300      	movs	r3, #0
 8003516:	9302      	str	r3, [sp, #8]
 8003518:	2310      	movs	r3, #16
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	4bca      	ldr	r3, [pc, #808]	; (8003848 <Tunemode+0x3d4>)
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	231f      	movs	r3, #31
 8003522:	2150      	movs	r1, #80	; 0x50
 8003524:	203c      	movs	r0, #60	; 0x3c
 8003526:	f7fe fe4f 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(95 ,100,  YELLOW, BLUE,"-----", 16, 0);
 800352a:	4ac3      	ldr	r2, [pc, #780]	; (8003838 <Tunemode+0x3c4>)
 800352c:	2300      	movs	r3, #0
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	2310      	movs	r3, #16
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	4bc1      	ldr	r3, [pc, #772]	; (800383c <Tunemode+0x3c8>)
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	231f      	movs	r3, #31
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	205f      	movs	r0, #95	; 0x5f
 800353e:	f7fe fe43 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(100 ,115,  YELLOW, BLUE,"||||", 16, 0);
 8003542:	4abd      	ldr	r2, [pc, #756]	; (8003838 <Tunemode+0x3c4>)
 8003544:	2300      	movs	r3, #0
 8003546:	9302      	str	r3, [sp, #8]
 8003548:	2310      	movs	r3, #16
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	4bbf      	ldr	r3, [pc, #764]	; (800384c <Tunemode+0x3d8>)
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	231f      	movs	r3, #31
 8003552:	2173      	movs	r1, #115	; 0x73
 8003554:	2064      	movs	r0, #100	; 0x64
 8003556:	f7fe fe37 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(100 ,130,  YELLOW, BLUE,"||||", 16, 0);
 800355a:	4ab7      	ldr	r2, [pc, #732]	; (8003838 <Tunemode+0x3c4>)
 800355c:	2300      	movs	r3, #0
 800355e:	9302      	str	r3, [sp, #8]
 8003560:	2310      	movs	r3, #16
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	4bb9      	ldr	r3, [pc, #740]	; (800384c <Tunemode+0x3d8>)
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	231f      	movs	r3, #31
 800356a:	2182      	movs	r1, #130	; 0x82
 800356c:	2064      	movs	r0, #100	; 0x64
 800356e:	f7fe fe2b 	bl	80021c8 <LCD_DrawString>
	Tune_move(0, 0, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2100      	movs	r1, #0
 8003576:	2000      	movs	r0, #0
 8003578:	f000 fa22 	bl	80039c0 <Tune_move>
	while (1)
	  {
		scrollidx = currentScrollIndex;
 800357c:	4bb4      	ldr	r3, [pc, #720]	; (8003850 <Tunemode+0x3dc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	603b      	str	r3, [r7, #0]

		if (goleft == 1) {
 8003582:	4bb4      	ldr	r3, [pc, #720]	; (8003854 <Tunemode+0x3e0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d000      	beq.n	800358c <Tunemode+0x118>
 800358a:	e0f0      	b.n	800376e <Tunemode+0x2fa>
			if (currentSelectIndex == 0) {
 800358c:	4bb2      	ldr	r3, [pc, #712]	; (8003858 <Tunemode+0x3e4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d000      	beq.n	8003596 <Tunemode+0x122>
 8003594:	e0bc      	b.n	8003710 <Tunemode+0x29c>
				if(scrollidx == 0) //special display case when currently going left beyond screen and scroll index is 0
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d137      	bne.n	800360c <Tunemode+0x198>
				{//looping scroll options
					LCD_DrawString(75*0 + 25,200,  YELLOW, BLUE, Tune[6], 16, 0);
 800359c:	4ba5      	ldr	r3, [pc, #660]	; (8003834 <Tunemode+0x3c0>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	49a5      	ldr	r1, [pc, #660]	; (8003838 <Tunemode+0x3c4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	9202      	str	r2, [sp, #8]
 80035a6:	2210      	movs	r2, #16
 80035a8:	9201      	str	r2, [sp, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	231f      	movs	r3, #31
 80035ae:	000a      	movs	r2, r1
 80035b0:	21c8      	movs	r1, #200	; 0xc8
 80035b2:	2019      	movs	r0, #25
 80035b4:	f7fe fe08 	bl	80021c8 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 80035b8:	2301      	movs	r3, #1
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e01d      	b.n	80035fa <Tunemode+0x186>
							LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[i-1], 16, 0);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	1c1a      	adds	r2, r3, #0
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	18d3      	adds	r3, r2, r3
 80035c8:	1c1a      	adds	r2, r3, #0
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3319      	adds	r3, #25
 80035d2:	b298      	uxth	r0, r3
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	1e5a      	subs	r2, r3, #1
 80035d8:	4b96      	ldr	r3, [pc, #600]	; (8003834 <Tunemode+0x3c0>)
 80035da:	0092      	lsls	r2, r2, #2
 80035dc:	58d3      	ldr	r3, [r2, r3]
 80035de:	4996      	ldr	r1, [pc, #600]	; (8003838 <Tunemode+0x3c4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	9202      	str	r2, [sp, #8]
 80035e4:	2210      	movs	r2, #16
 80035e6:	9201      	str	r2, [sp, #4]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	231f      	movs	r3, #31
 80035ec:	000a      	movs	r2, r1
 80035ee:	21c8      	movs	r1, #200	; 0xc8
 80035f0:	f7fe fdea 	bl	80021c8 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	3301      	adds	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	ddde      	ble.n	80035be <Tunemode+0x14a>
						  }
					Tune_move(6, 0, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2006      	movs	r0, #6
 8003606:	f000 f9db 	bl	80039c0 <Tune_move>
 800360a:	e07d      	b.n	8003708 <Tunemode+0x294>
				}
				else if(scrollidx == 6) //if scrolling left past screen and current choice is peg6, special display case
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d13f      	bne.n	8003692 <Tunemode+0x21e>
				{//looping scroll options
					for (int i = 0; i < 2; i++) {
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e01d      	b.n	8003654 <Tunemode+0x1e0>
						LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[5+i], 16, 0);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	b29b      	uxth	r3, r3
 800361c:	1c1a      	adds	r2, r3, #0
 800361e:	0092      	lsls	r2, r2, #2
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	1c1a      	adds	r2, r3, #0
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	b29b      	uxth	r3, r3
 800362a:	3319      	adds	r3, #25
 800362c:	b298      	uxth	r0, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1d5a      	adds	r2, r3, #5
 8003632:	4b80      	ldr	r3, [pc, #512]	; (8003834 <Tunemode+0x3c0>)
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	58d3      	ldr	r3, [r2, r3]
 8003638:	497f      	ldr	r1, [pc, #508]	; (8003838 <Tunemode+0x3c4>)
 800363a:	2200      	movs	r2, #0
 800363c:	9202      	str	r2, [sp, #8]
 800363e:	2210      	movs	r2, #16
 8003640:	9201      	str	r2, [sp, #4]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	231f      	movs	r3, #31
 8003646:	000a      	movs	r2, r1
 8003648:	21c8      	movs	r1, #200	; 0xc8
 800364a:	f7fe fdbd 	bl	80021c8 <LCD_DrawString>
					for (int i = 0; i < 2; i++) {
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	3301      	adds	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b01      	cmp	r3, #1
 8003658:	ddde      	ble.n	8003618 <Tunemode+0x1a4>
					}
					LCD_DrawString(75*2 + 25,200,  YELLOW, BLUE, Tune[0], 16, 0);
 800365a:	4b76      	ldr	r3, [pc, #472]	; (8003834 <Tunemode+0x3c0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4976      	ldr	r1, [pc, #472]	; (8003838 <Tunemode+0x3c4>)
 8003660:	2200      	movs	r2, #0
 8003662:	9202      	str	r2, [sp, #8]
 8003664:	2210      	movs	r2, #16
 8003666:	9201      	str	r2, [sp, #4]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	231f      	movs	r3, #31
 800366c:	000a      	movs	r2, r1
 800366e:	21c8      	movs	r1, #200	; 0xc8
 8003670:	20af      	movs	r0, #175	; 0xaf
 8003672:	f7fe fda9 	bl	80021c8 <LCD_DrawString>
					Tune_move((currentScrollIndex - 1) % 7, 0, 0);
 8003676:	4b76      	ldr	r3, [pc, #472]	; (8003850 <Tunemode+0x3dc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3b01      	subs	r3, #1
 800367c:	2107      	movs	r1, #7
 800367e:	0018      	movs	r0, r3
 8003680:	f7fc feb0 	bl	80003e4 <__aeabi_idivmod>
 8003684:	000b      	movs	r3, r1
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f998 	bl	80039c0 <Tune_move>
 8003690:	e03a      	b.n	8003708 <Tunemode+0x294>
				}
				else
				{
					//normal changing display options
					for (int i = 0; i < 3; i++) {
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e027      	b.n	80036e8 <Tunemode+0x274>
					LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[(currentScrollIndex - 1) % 7+i], 16, 0);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	b29b      	uxth	r3, r3
 800369c:	1c1a      	adds	r2, r3, #0
 800369e:	0092      	lsls	r2, r2, #2
 80036a0:	18d3      	adds	r3, r2, r3
 80036a2:	1c1a      	adds	r2, r3, #0
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3319      	adds	r3, #25
 80036ac:	b29c      	uxth	r4, r3
 80036ae:	4b68      	ldr	r3, [pc, #416]	; (8003850 <Tunemode+0x3dc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	2107      	movs	r1, #7
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fc fe94 	bl	80003e4 <__aeabi_idivmod>
 80036bc:	000b      	movs	r3, r1
 80036be:	001a      	movs	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	18d2      	adds	r2, r2, r3
 80036c4:	4b5b      	ldr	r3, [pc, #364]	; (8003834 <Tunemode+0x3c0>)
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	58d3      	ldr	r3, [r2, r3]
 80036ca:	495b      	ldr	r1, [pc, #364]	; (8003838 <Tunemode+0x3c4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	9202      	str	r2, [sp, #8]
 80036d0:	2210      	movs	r2, #16
 80036d2:	9201      	str	r2, [sp, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	231f      	movs	r3, #31
 80036d8:	000a      	movs	r2, r1
 80036da:	21c8      	movs	r1, #200	; 0xc8
 80036dc:	0020      	movs	r0, r4
 80036de:	f7fe fd73 	bl	80021c8 <LCD_DrawString>
					for (int i = 0; i < 3; i++) {
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	3301      	adds	r3, #1
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	ddd4      	ble.n	8003698 <Tunemode+0x224>

				}
					Tune_move((currentScrollIndex - 1) % 7, 0, 0);
 80036ee:	4b58      	ldr	r3, [pc, #352]	; (8003850 <Tunemode+0x3dc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	2107      	movs	r1, #7
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7fc fe74 	bl	80003e4 <__aeabi_idivmod>
 80036fc:	000b      	movs	r3, r1
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f95c 	bl	80039c0 <Tune_move>
			}
			goleft = 0;
 8003708:	4b52      	ldr	r3, [pc, #328]	; (8003854 <Tunemode+0x3e0>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e026      	b.n	800375e <Tunemode+0x2ea>

			} else {
				if(scrollidx == 0) //no new display options just looping array around
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <Tunemode+0x2be>
				{
					Tune_move(6, (currentSelectIndex - 1) % 3, 1);
 8003716:	4b50      	ldr	r3, [pc, #320]	; (8003858 <Tunemode+0x3e4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3b01      	subs	r3, #1
 800371c:	2103      	movs	r1, #3
 800371e:	0018      	movs	r0, r3
 8003720:	f7fc fe60 	bl	80003e4 <__aeabi_idivmod>
 8003724:	000b      	movs	r3, r1
 8003726:	2201      	movs	r2, #1
 8003728:	0019      	movs	r1, r3
 800372a:	2006      	movs	r0, #6
 800372c:	f000 f948 	bl	80039c0 <Tune_move>
 8003730:	e015      	b.n	800375e <Tunemode+0x2ea>
				}
				else{ //normal change
					Tune_move((currentScrollIndex - 1) % 7, (currentSelectIndex - 1) % 3, 1);
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <Tunemode+0x3dc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3b01      	subs	r3, #1
 8003738:	2107      	movs	r1, #7
 800373a:	0018      	movs	r0, r3
 800373c:	f7fc fe52 	bl	80003e4 <__aeabi_idivmod>
 8003740:	000b      	movs	r3, r1
 8003742:	001c      	movs	r4, r3
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <Tunemode+0x3e4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	2103      	movs	r1, #3
 800374c:	0018      	movs	r0, r3
 800374e:	f7fc fe49 	bl	80003e4 <__aeabi_idivmod>
 8003752:	000b      	movs	r3, r1
 8003754:	2201      	movs	r2, #1
 8003756:	0019      	movs	r1, r3
 8003758:	0020      	movs	r0, r4
 800375a:	f000 f931 	bl	80039c0 <Tune_move>
				}
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	483e      	ldr	r0, [pc, #248]	; (800385c <Tunemode+0x3e8>)
 8003764:	2201      	movs	r2, #1
 8003766:	0019      	movs	r1, r3
 8003768:	f001 fe99 	bl	800549e <HAL_GPIO_WritePin>
 800376c:	e114      	b.n	8003998 <Tunemode+0x524>

		} else if (updateToggleHistory(3)) { //normal selection
 800376e:	2003      	movs	r0, #3
 8003770:	f000 fcb8 	bl	80040e4 <updateToggleHistory>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d013      	beq.n	80037a0 <Tunemode+0x32c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4837      	ldr	r0, [pc, #220]	; (800385c <Tunemode+0x3e8>)
 800377e:	2201      	movs	r2, #1
 8003780:	0019      	movs	r1, r3
 8003782:	f001 fe8c 	bl	800549e <HAL_GPIO_WritePin>
			if(Tune_select(currentSelectIndex) == 1) //if back option is selected
 8003786:	4b34      	ldr	r3, [pc, #208]	; (8003858 <Tunemode+0x3e4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f96a 	bl	8003a64 <Tune_select>
 8003790:	0003      	movs	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d000      	beq.n	8003798 <Tunemode+0x324>
 8003796:	e0ff      	b.n	8003998 <Tunemode+0x524>
			{
				currentSelectIndex = 0;
 8003798:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <Tunemode+0x3e4>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
				return;
 800379e:	e0ff      	b.n	80039a0 <Tunemode+0x52c>
			}


		} else if (goright == 1) { // similar to left conditions just applied to right side of screen
 80037a0:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <Tunemode+0x3ec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d000      	beq.n	80037aa <Tunemode+0x336>
 80037a8:	e0ef      	b.n	800398a <Tunemode+0x516>

			if (currentSelectIndex == 2) {
 80037aa:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <Tunemode+0x3e4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d000      	beq.n	80037b4 <Tunemode+0x340>
 80037b2:	e0b8      	b.n	8003926 <Tunemode+0x4b2>
				if(currentScrollIndex == 6)
 80037b4:	4b26      	ldr	r3, [pc, #152]	; (8003850 <Tunemode+0x3dc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b06      	cmp	r3, #6
 80037ba:	d153      	bne.n	8003864 <Tunemode+0x3f0>
				{	int x = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
					for (int i = 5; i < 7; i++) {
 80037c0:	2305      	movs	r3, #5
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	e01f      	b.n	8003806 <Tunemode+0x392>
						LCD_DrawString(75*x + 25,200,  YELLOW, BLUE, Tune[i], 16, 0);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	1c1a      	adds	r2, r3, #0
 80037cc:	0092      	lsls	r2, r2, #2
 80037ce:	18d3      	adds	r3, r2, r3
 80037d0:	1c1a      	adds	r2, r3, #0
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3319      	adds	r3, #25
 80037da:	b298      	uxth	r0, r3
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <Tunemode+0x3c0>)
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	58d3      	ldr	r3, [r2, r3]
 80037e4:	4914      	ldr	r1, [pc, #80]	; (8003838 <Tunemode+0x3c4>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	9202      	str	r2, [sp, #8]
 80037ea:	2210      	movs	r2, #16
 80037ec:	9201      	str	r2, [sp, #4]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	231f      	movs	r3, #31
 80037f2:	000a      	movs	r2, r1
 80037f4:	21c8      	movs	r1, #200	; 0xc8
 80037f6:	f7fe fce7 	bl	80021c8 <LCD_DrawString>
						x++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
					for (int i = 5; i < 7; i++) {
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	3301      	adds	r3, #1
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b06      	cmp	r3, #6
 800380a:	dddc      	ble.n	80037c6 <Tunemode+0x352>
					}
					LCD_DrawString(75*2 + 25,200,  YELLOW, BLUE, Tune[0], 16, 0);
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <Tunemode+0x3c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4909      	ldr	r1, [pc, #36]	; (8003838 <Tunemode+0x3c4>)
 8003812:	2200      	movs	r2, #0
 8003814:	9202      	str	r2, [sp, #8]
 8003816:	2210      	movs	r2, #16
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	231f      	movs	r3, #31
 800381e:	000a      	movs	r2, r1
 8003820:	21c8      	movs	r1, #200	; 0xc8
 8003822:	20af      	movs	r0, #175	; 0xaf
 8003824:	f7fe fcd0 	bl	80021c8 <LCD_DrawString>
					Tune_move(0, 2, 0);
 8003828:	2200      	movs	r2, #0
 800382a:	2102      	movs	r1, #2
 800382c:	2000      	movs	r0, #0
 800382e:	f000 f8c7 	bl	80039c0 <Tune_move>
 8003832:	e09f      	b.n	8003974 <Tunemode+0x500>
 8003834:	2000000c 	.word	0x2000000c
 8003838:	0000ffe0 	.word	0x0000ffe0
 800383c:	08006f60 	.word	0x08006f60
 8003840:	08006f68 	.word	0x08006f68
 8003844:	08006f78 	.word	0x08006f78
 8003848:	08006f88 	.word	0x08006f88
 800384c:	08006f98 	.word	0x08006f98
 8003850:	200000a8 	.word	0x200000a8
 8003854:	200000ac 	.word	0x200000ac
 8003858:	200000a4 	.word	0x200000a4
 800385c:	48000800 	.word	0x48000800
 8003860:	200000b0 	.word	0x200000b0
				}
				else
				{
					if(currentScrollIndex == 0)
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <Tunemode+0x534>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10e      	bne.n	800388a <Tunemode+0x416>
						LCD_DrawString(75*0 + 25,200,  YELLOW, BLUE, Tune[6], 16, 0);
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <Tunemode+0x538>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	494f      	ldr	r1, [pc, #316]	; (80039b0 <Tunemode+0x53c>)
 8003872:	2200      	movs	r2, #0
 8003874:	9202      	str	r2, [sp, #8]
 8003876:	2210      	movs	r2, #16
 8003878:	9201      	str	r2, [sp, #4]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	231f      	movs	r3, #31
 800387e:	000a      	movs	r2, r1
 8003880:	21c8      	movs	r1, #200	; 0xc8
 8003882:	2019      	movs	r0, #25
 8003884:	f7fe fca0 	bl	80021c8 <LCD_DrawString>
 8003888:	e011      	b.n	80038ae <Tunemode+0x43a>
					else
						LCD_DrawString(75*0 + 25,200,  YELLOW, BLUE, Tune[currentScrollIndex - 1], 16, 0);
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <Tunemode+0x534>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <Tunemode+0x538>)
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	58d3      	ldr	r3, [r2, r3]
 8003896:	4946      	ldr	r1, [pc, #280]	; (80039b0 <Tunemode+0x53c>)
 8003898:	2200      	movs	r2, #0
 800389a:	9202      	str	r2, [sp, #8]
 800389c:	2210      	movs	r2, #16
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	231f      	movs	r3, #31
 80038a4:	000a      	movs	r2, r1
 80038a6:	21c8      	movs	r1, #200	; 0xc8
 80038a8:	2019      	movs	r0, #25
 80038aa:	f7fe fc8d 	bl	80021c8 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 80038ae:	2301      	movs	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	e027      	b.n	8003904 <Tunemode+0x490>
						LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[(currentScrollIndex - 1) % 7+i], 16, 0);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	1c1a      	adds	r2, r3, #0
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	18d3      	adds	r3, r2, r3
 80038be:	1c1a      	adds	r2, r3, #0
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3319      	adds	r3, #25
 80038c8:	b29c      	uxth	r4, r3
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <Tunemode+0x534>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	2107      	movs	r1, #7
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fc fd86 	bl	80003e4 <__aeabi_idivmod>
 80038d8:	000b      	movs	r3, r1
 80038da:	001a      	movs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	18d2      	adds	r2, r2, r3
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <Tunemode+0x538>)
 80038e2:	0092      	lsls	r2, r2, #2
 80038e4:	58d3      	ldr	r3, [r2, r3]
 80038e6:	4932      	ldr	r1, [pc, #200]	; (80039b0 <Tunemode+0x53c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	9202      	str	r2, [sp, #8]
 80038ec:	2210      	movs	r2, #16
 80038ee:	9201      	str	r2, [sp, #4]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	231f      	movs	r3, #31
 80038f4:	000a      	movs	r2, r1
 80038f6:	21c8      	movs	r1, #200	; 0xc8
 80038f8:	0020      	movs	r0, r4
 80038fa:	f7fe fc65 	bl	80021c8 <LCD_DrawString>
					for (int i = 1; i < 3; i++) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3301      	adds	r3, #1
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	ddd4      	ble.n	80038b4 <Tunemode+0x440>
					}
					Tune_move((currentScrollIndex + 1) % 7, 2, 0);
 800390a:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <Tunemode+0x534>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	2107      	movs	r1, #7
 8003912:	0018      	movs	r0, r3
 8003914:	f7fc fd66 	bl	80003e4 <__aeabi_idivmod>
 8003918:	000b      	movs	r3, r1
 800391a:	2200      	movs	r2, #0
 800391c:	2102      	movs	r1, #2
 800391e:	0018      	movs	r0, r3
 8003920:	f000 f84e 	bl	80039c0 <Tune_move>
 8003924:	e026      	b.n	8003974 <Tunemode+0x500>
				}
			} else {
				if(scrollidx == 6)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b06      	cmp	r3, #6
 800392a:	d10d      	bne.n	8003948 <Tunemode+0x4d4>
				{
					Tune_move(0, (currentSelectIndex + 1) % 3, 1);
 800392c:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <Tunemode+0x540>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	2103      	movs	r1, #3
 8003934:	0018      	movs	r0, r3
 8003936:	f7fc fd55 	bl	80003e4 <__aeabi_idivmod>
 800393a:	000b      	movs	r3, r1
 800393c:	2201      	movs	r2, #1
 800393e:	0019      	movs	r1, r3
 8003940:	2000      	movs	r0, #0
 8003942:	f000 f83d 	bl	80039c0 <Tune_move>
 8003946:	e015      	b.n	8003974 <Tunemode+0x500>
				}
				else
					Tune_move( (currentScrollIndex + 1) % 7,(currentSelectIndex + 1) % 3, 1);
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <Tunemode+0x534>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	2107      	movs	r1, #7
 8003950:	0018      	movs	r0, r3
 8003952:	f7fc fd47 	bl	80003e4 <__aeabi_idivmod>
 8003956:	000b      	movs	r3, r1
 8003958:	001c      	movs	r4, r3
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <Tunemode+0x540>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	2103      	movs	r1, #3
 8003962:	0018      	movs	r0, r3
 8003964:	f7fc fd3e 	bl	80003e4 <__aeabi_idivmod>
 8003968:	000b      	movs	r3, r1
 800396a:	2201      	movs	r2, #1
 800396c:	0019      	movs	r1, r3
 800396e:	0020      	movs	r0, r4
 8003970:	f000 f826 	bl	80039c0 <Tune_move>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	480f      	ldr	r0, [pc, #60]	; (80039b8 <Tunemode+0x544>)
 800397a:	2201      	movs	r2, #1
 800397c:	0019      	movs	r1, r3
 800397e:	f001 fd8e 	bl	800549e <HAL_GPIO_WritePin>
			goright = 0;
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <Tunemode+0x548>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e006      	b.n	8003998 <Tunemode+0x524>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	480a      	ldr	r0, [pc, #40]	; (80039b8 <Tunemode+0x544>)
 8003990:	2200      	movs	r2, #0
 8003992:	0019      	movs	r1, r3
 8003994:	f001 fd83 	bl	800549e <HAL_GPIO_WritePin>
		}

		HAL_Delay(40);
 8003998:	2028      	movs	r0, #40	; 0x28
 800399a:	f000 fe79 	bl	8004690 <HAL_Delay>
		scrollidx = currentScrollIndex;
 800399e:	e5ed      	b.n	800357c <Tunemode+0x108>


	  }
}
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b009      	add	sp, #36	; 0x24
 80039a4:	bd90      	pop	{r4, r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	200000a8 	.word	0x200000a8
 80039ac:	2000000c 	.word	0x2000000c
 80039b0:	0000ffe0 	.word	0x0000ffe0
 80039b4:	200000a4 	.word	0x200000a4
 80039b8:	48000800 	.word	0x48000800
 80039bc:	200000b0 	.word	0x200000b0

080039c0 <Tune_move>:
void Tune_move(int scrollidx, int selectIndex, int enable) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af04      	add	r7, sp, #16
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
	//highlight current selection
	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, Tune[scrollidx], 16, 0);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	1c1a      	adds	r2, r3, #0
 80039d2:	0092      	lsls	r2, r2, #2
 80039d4:	18d3      	adds	r3, r2, r3
 80039d6:	1c1a      	adds	r2, r3, #0
 80039d8:	0112      	lsls	r2, r2, #4
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3319      	adds	r3, #25
 80039e0:	b298      	uxth	r0, r3
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <Tune_move+0x94>)
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	58d3      	ldr	r3, [r2, r3]
 80039ea:	491b      	ldr	r1, [pc, #108]	; (8003a58 <Tune_move+0x98>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	9202      	str	r2, [sp, #8]
 80039f0:	2210      	movs	r2, #16
 80039f2:	9201      	str	r2, [sp, #4]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	000a      	movs	r2, r1
 80039fa:	21c8      	movs	r1, #200	; 0xc8
 80039fc:	f7fe fbe4 	bl	80021c8 <LCD_DrawString>
	if(enable) //enable is for if unhighlighting previous section is necesary
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01b      	beq.n	8003a3e <Tune_move+0x7e>
		LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, Tune[currentScrollIndex], 16, 0);
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <Tune_move+0x9c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	1c1a      	adds	r2, r3, #0
 8003a0e:	0092      	lsls	r2, r2, #2
 8003a10:	18d3      	adds	r3, r2, r3
 8003a12:	1c1a      	adds	r2, r3, #0
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3319      	adds	r3, #25
 8003a1c:	b298      	uxth	r0, r3
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <Tune_move+0xa0>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <Tune_move+0x94>)
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	58d3      	ldr	r3, [r2, r3]
 8003a28:	490b      	ldr	r1, [pc, #44]	; (8003a58 <Tune_move+0x98>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	9202      	str	r2, [sp, #8]
 8003a2e:	2210      	movs	r2, #16
 8003a30:	9201      	str	r2, [sp, #4]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	231f      	movs	r3, #31
 8003a36:	000a      	movs	r2, r1
 8003a38:	21c8      	movs	r1, #200	; 0xc8
 8003a3a:	f7fe fbc5 	bl	80021c8 <LCD_DrawString>

	currentSelectIndex = selectIndex;
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <Tune_move+0x9c>)
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	601a      	str	r2, [r3, #0]
	currentScrollIndex = scrollidx;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <Tune_move+0xa0>)
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b004      	add	sp, #16
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	2000000c 	.word	0x2000000c
 8003a58:	0000ffe0 	.word	0x0000ffe0
 8003a5c:	200000a4 	.word	0x200000a4
 8003a60:	200000a8 	.word	0x200000a8

08003a64 <Tune_select>:

int Tune_select(int selectIndex) {
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af04      	add	r7, sp, #16
 8003a6a:	6078      	str	r0, [r7, #4]
	//highlight selected option to red
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, Tune[currentScrollIndex], 16, 0);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	1c1a      	adds	r2, r3, #0
 8003a72:	0092      	lsls	r2, r2, #2
 8003a74:	18d3      	adds	r3, r2, r3
 8003a76:	1c1a      	adds	r2, r3, #0
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3319      	adds	r3, #25
 8003a80:	b298      	uxth	r0, r3
 8003a82:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <Tune_select+0x1dc>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b6f      	ldr	r3, [pc, #444]	; (8003c44 <Tune_select+0x1e0>)
 8003a88:	0092      	lsls	r2, r2, #2
 8003a8a:	58d3      	ldr	r3, [r2, r3]
 8003a8c:	22f8      	movs	r2, #248	; 0xf8
 8003a8e:	0212      	lsls	r2, r2, #8
 8003a90:	4c6d      	ldr	r4, [pc, #436]	; (8003c48 <Tune_select+0x1e4>)
 8003a92:	2100      	movs	r1, #0
 8003a94:	9102      	str	r1, [sp, #8]
 8003a96:	2110      	movs	r1, #16
 8003a98:	9101      	str	r1, [sp, #4]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	0022      	movs	r2, r4
 8003aa0:	21c8      	movs	r1, #200	; 0xc8
 8003aa2:	f7fe fb91 	bl	80021c8 <LCD_DrawString>
    lastPressed = selectIndex;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <Tune_select+0x1e8>)
 8003aac:	701a      	strb	r2, [r3, #0]
    if(currentScrollIndex == 0) //back option selected
 8003aae:	4b64      	ldr	r3, [pc, #400]	; (8003c40 <Tune_select+0x1dc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d138      	bne.n	8003b28 <Tune_select+0xc4>
    {
    	LCD_Clear(BLUE);
 8003ab6:	201f      	movs	r0, #31
 8003ab8:	f7fe f9b0 	bl	8001e1c <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e01c      	b.n	8003afc <Tune_select+0x98>
    		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, menu[i], 16, 0);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	1c1a      	adds	r2, r3, #0
 8003ac8:	0092      	lsls	r2, r2, #2
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	1c1a      	adds	r2, r3, #0
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3319      	adds	r3, #25
 8003ad6:	b298      	uxth	r0, r3
 8003ad8:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <Tune_select+0x1ec>)
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	0092      	lsls	r2, r2, #2
 8003ade:	58d3      	ldr	r3, [r2, r3]
 8003ae0:	4959      	ldr	r1, [pc, #356]	; (8003c48 <Tune_select+0x1e4>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	9202      	str	r2, [sp, #8]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	9201      	str	r2, [sp, #4]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	231f      	movs	r3, #31
 8003aee:	000a      	movs	r2, r1
 8003af0:	21c8      	movs	r1, #200	; 0xc8
 8003af2:	f7fe fb69 	bl	80021c8 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	dddf      	ble.n	8003ac2 <Tune_select+0x5e>
    	}
    	LCD_DrawString(25,200,  YELLOW, BLACK, menu[0], 16, 0);
 8003b02:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <Tune_select+0x1ec>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4950      	ldr	r1, [pc, #320]	; (8003c48 <Tune_select+0x1e4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	9202      	str	r2, [sp, #8]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	9201      	str	r2, [sp, #4]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2300      	movs	r3, #0
 8003b14:	000a      	movs	r2, r1
 8003b16:	21c8      	movs	r1, #200	; 0xc8
 8003b18:	2019      	movs	r0, #25
 8003b1a:	f7fe fb55 	bl	80021c8 <LCD_DrawString>
    	currentSelectIndex = 0;
 8003b1e:	4b4d      	ldr	r3, [pc, #308]	; (8003c54 <Tune_select+0x1f0>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
    	return 1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e087      	b.n	8003c38 <Tune_select+0x1d4>
    }
    else
    {
    	pegDisplay(); //display peg screen
 8003b28:	f000 f8a0 	bl	8003c6c <pegDisplay>

    	//reset Tune display before return
    	LCD_Clear(BLUE);
 8003b2c:	201f      	movs	r0, #31
 8003b2e:	f7fe f975 	bl	8001e1c <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	e01c      	b.n	8003b72 <Tune_select+0x10e>
    	    LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, Tune[i], 16, 0);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	1c1a      	adds	r2, r3, #0
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	18d3      	adds	r3, r2, r3
 8003b42:	1c1a      	adds	r2, r3, #0
 8003b44:	0112      	lsls	r2, r2, #4
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3319      	adds	r3, #25
 8003b4c:	b298      	uxth	r0, r3
 8003b4e:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <Tune_select+0x1e0>)
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	0092      	lsls	r2, r2, #2
 8003b54:	58d3      	ldr	r3, [r2, r3]
 8003b56:	493c      	ldr	r1, [pc, #240]	; (8003c48 <Tune_select+0x1e4>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	9202      	str	r2, [sp, #8]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	9201      	str	r2, [sp, #4]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	231f      	movs	r3, #31
 8003b64:	000a      	movs	r2, r1
 8003b66:	21c8      	movs	r1, #200	; 0xc8
 8003b68:	f7fe fb2e 	bl	80021c8 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	dddf      	ble.n	8003b38 <Tune_select+0xd4>
    	 }

    	currentSelectIndex = 0;
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <Tune_select+0x1f0>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    	currentScrollIndex = 0;
 8003b7e:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <Tune_select+0x1dc>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
    	LCD_DrawString(95 ,25,  YELLOW, BLUE,"-----", 16, 0);
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <Tune_select+0x1e4>)
 8003b86:	2300      	movs	r3, #0
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <Tune_select+0x1f4>)
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	231f      	movs	r3, #31
 8003b94:	2119      	movs	r1, #25
 8003b96:	205f      	movs	r0, #95	; 0x5f
 8003b98:	f7fe fb16 	bl	80021c8 <LCD_DrawString>
    	LCD_DrawString(60 ,40,  YELLOW, BLUE,"3 - |    | - 4", 16, 0);
 8003b9c:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <Tune_select+0x1e4>)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9302      	str	r3, [sp, #8]
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <Tune_select+0x1f8>)
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	231f      	movs	r3, #31
 8003bac:	2128      	movs	r1, #40	; 0x28
 8003bae:	203c      	movs	r0, #60	; 0x3c
 8003bb0:	f7fe fb0a 	bl	80021c8 <LCD_DrawString>
    	LCD_DrawString(60 ,60,  YELLOW, BLUE,"2 - |    | - 5", 16, 0);
 8003bb4:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <Tune_select+0x1e4>)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9302      	str	r3, [sp, #8]
 8003bba:	2310      	movs	r3, #16
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <Tune_select+0x1fc>)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	231f      	movs	r3, #31
 8003bc4:	213c      	movs	r1, #60	; 0x3c
 8003bc6:	203c      	movs	r0, #60	; 0x3c
 8003bc8:	f7fe fafe 	bl	80021c8 <LCD_DrawString>
    	LCD_DrawString(60 ,80,  YELLOW, BLUE,"1 - |    | - 6", 16, 0);
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <Tune_select+0x1e4>)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9302      	str	r3, [sp, #8]
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <Tune_select+0x200>)
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	231f      	movs	r3, #31
 8003bdc:	2150      	movs	r1, #80	; 0x50
 8003bde:	203c      	movs	r0, #60	; 0x3c
 8003be0:	f7fe faf2 	bl	80021c8 <LCD_DrawString>
    	LCD_DrawString(95 ,100,  YELLOW, BLUE,"-----", 16, 0);
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <Tune_select+0x1e4>)
 8003be6:	2300      	movs	r3, #0
 8003be8:	9302      	str	r3, [sp, #8]
 8003bea:	2310      	movs	r3, #16
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <Tune_select+0x1f4>)
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	231f      	movs	r3, #31
 8003bf4:	2164      	movs	r1, #100	; 0x64
 8003bf6:	205f      	movs	r0, #95	; 0x5f
 8003bf8:	f7fe fae6 	bl	80021c8 <LCD_DrawString>
    	LCD_DrawString(100 ,115,  YELLOW, BLUE,"||||", 16, 0);
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <Tune_select+0x1e4>)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9302      	str	r3, [sp, #8]
 8003c02:	2310      	movs	r3, #16
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <Tune_select+0x204>)
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	2173      	movs	r1, #115	; 0x73
 8003c0e:	2064      	movs	r0, #100	; 0x64
 8003c10:	f7fe fada 	bl	80021c8 <LCD_DrawString>
    	LCD_DrawString(100 ,130,  YELLOW, BLUE,"||||", 16, 0);
 8003c14:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <Tune_select+0x1e4>)
 8003c16:	2300      	movs	r3, #0
 8003c18:	9302      	str	r3, [sp, #8]
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <Tune_select+0x204>)
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	231f      	movs	r3, #31
 8003c24:	2182      	movs	r1, #130	; 0x82
 8003c26:	2064      	movs	r0, #100	; 0x64
 8003c28:	f7fe face 	bl	80021c8 <LCD_DrawString>
    	Tune_move(0, 0, 0);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2100      	movs	r1, #0
 8003c30:	2000      	movs	r0, #0
 8003c32:	f7ff fec5 	bl	80039c0 <Tune_move>
    	return 0;
 8003c36:	2300      	movs	r3, #0
    }
    return 0;
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b005      	add	sp, #20
 8003c3e:	bd90      	pop	{r4, r7, pc}
 8003c40:	200000a8 	.word	0x200000a8
 8003c44:	2000000c 	.word	0x2000000c
 8003c48:	0000ffe0 	.word	0x0000ffe0
 8003c4c:	20000078 	.word	0x20000078
 8003c50:	20000000 	.word	0x20000000
 8003c54:	200000a4 	.word	0x200000a4
 8003c58:	08006f60 	.word	0x08006f60
 8003c5c:	08006f68 	.word	0x08006f68
 8003c60:	08006f78 	.word	0x08006f78
 8003c64:	08006f88 	.word	0x08006f88
 8003c68:	08006f98 	.word	0x08006f98

08003c6c <pegDisplay>:
int pegDisplay()
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af04      	add	r7, sp, #16
	LCD_Clear(BLUE);
 8003c72:	201f      	movs	r0, #31
 8003c74:	f7fe f8d2 	bl	8001e1c <LCD_Clear>
	for (int i = 0; i < 3; i++) {
 8003c78:	2300      	movs	r3, #0
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e01c      	b.n	8003cb8 <pegDisplay+0x4c>
		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, peg[i], 16, 0);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	1c1a      	adds	r2, r3, #0
 8003c84:	0092      	lsls	r2, r2, #2
 8003c86:	18d3      	adds	r3, r2, r3
 8003c88:	1c1a      	adds	r2, r3, #0
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3319      	adds	r3, #25
 8003c92:	b298      	uxth	r0, r3
 8003c94:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <pegDisplay+0x184>)
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	0092      	lsls	r2, r2, #2
 8003c9a:	58d3      	ldr	r3, [r2, r3]
 8003c9c:	4955      	ldr	r1, [pc, #340]	; (8003df4 <pegDisplay+0x188>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	9202      	str	r2, [sp, #8]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	9201      	str	r2, [sp, #4]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	231f      	movs	r3, #31
 8003caa:	000a      	movs	r2, r1
 8003cac:	21c8      	movs	r1, #200	; 0xc8
 8003cae:	f7fe fa8b 	bl	80021c8 <LCD_DrawString>
	for (int i = 0; i < 3; i++) {
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	dddf      	ble.n	8003c7e <pegDisplay+0x12>
	}
	LCD_DrawString(60 ,40,  YELLOW, BLUE,pegsel[currentScrollIndex-1], 16, 0);
 8003cbe:	4b4e      	ldr	r3, [pc, #312]	; (8003df8 <pegDisplay+0x18c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	1e5a      	subs	r2, r3, #1
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <pegDisplay+0x190>)
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	58d3      	ldr	r3, [r2, r3]
 8003cca:	494a      	ldr	r1, [pc, #296]	; (8003df4 <pegDisplay+0x188>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	9202      	str	r2, [sp, #8]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	9201      	str	r2, [sp, #4]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	231f      	movs	r3, #31
 8003cd8:	000a      	movs	r2, r1
 8003cda:	2128      	movs	r1, #40	; 0x28
 8003cdc:	203c      	movs	r0, #60	; 0x3c
 8003cde:	f7fe fa73 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"Play Note", 16, 0);
 8003ce2:	4a44      	ldr	r2, [pc, #272]	; (8003df4 <pegDisplay+0x188>)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9302      	str	r3, [sp, #8]
 8003ce8:	2310      	movs	r3, #16
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <pegDisplay+0x194>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	231f      	movs	r3, #31
 8003cf2:	213c      	movs	r1, #60	; 0x3c
 8003cf4:	203c      	movs	r0, #60	; 0x3c
 8003cf6:	f7fe fa67 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(140 ,60,  YELLOW, BLUE, note[currentScrollIndex-1], 16, 0);
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <pegDisplay+0x18c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1e5a      	subs	r2, r3, #1
 8003d00:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <pegDisplay+0x198>)
 8003d02:	0092      	lsls	r2, r2, #2
 8003d04:	58d3      	ldr	r3, [r2, r3]
 8003d06:	493b      	ldr	r1, [pc, #236]	; (8003df4 <pegDisplay+0x188>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	9201      	str	r2, [sp, #4]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	231f      	movs	r3, #31
 8003d14:	000a      	movs	r2, r1
 8003d16:	213c      	movs	r1, #60	; 0x3c
 8003d18:	208c      	movs	r0, #140	; 0x8c
 8003d1a:	f7fe fa55 	bl	80021c8 <LCD_DrawString>
	peg_move(0);
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f000 f87a 	bl	8003e18 <peg_move>
	//same select mechanics as Home and Manual display
	while(1)
	{

		if (goleft == 1) {
 8003d24:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <pegDisplay+0x19c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d11d      	bne.n	8003d68 <pegDisplay+0xfc>
				if (currentSelectIndex == 0) {
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <pegDisplay+0x1a0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <pegDisplay+0xd0>
					peg_move(2);
 8003d34:	2002      	movs	r0, #2
 8003d36:	f000 f86f 	bl	8003e18 <peg_move>
 8003d3a:	e00a      	b.n	8003d52 <pegDisplay+0xe6>

				} else {
					peg_move((currentSelectIndex - 1) % 3);
 8003d3c:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <pegDisplay+0x1a0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	2103      	movs	r1, #3
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7fc fb4d 	bl	80003e4 <__aeabi_idivmod>
 8003d4a:	000b      	movs	r3, r1
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 f863 	bl	8003e18 <peg_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	482e      	ldr	r0, [pc, #184]	; (8003e10 <pegDisplay+0x1a4>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	f001 fb9f 	bl	800549e <HAL_GPIO_WritePin>
			goleft = 0;
 8003d60:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <pegDisplay+0x19c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e7dd      	b.n	8003d24 <pegDisplay+0xb8>

			} else if (updateToggleHistory(3)) {
 8003d68:	2003      	movs	r0, #3
 8003d6a:	f000 f9bb 	bl	80040e4 <updateToggleHistory>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d00f      	beq.n	8003d92 <pegDisplay+0x126>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4826      	ldr	r0, [pc, #152]	; (8003e10 <pegDisplay+0x1a4>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	f001 fb8f 	bl	800549e <HAL_GPIO_WritePin>
				if(peg_select(currentSelectIndex) == 1)
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <pegDisplay+0x1a0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f000 f88f 	bl	8003ea8 <peg_select>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d1c9      	bne.n	8003d24 <pegDisplay+0xb8>
				{
					return;
 8003d90:	e029      	b.n	8003de6 <pegDisplay+0x17a>
				}

			} else if (goright == 1) {
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <pegDisplay+0x1a8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d11d      	bne.n	8003dd6 <pegDisplay+0x16a>

				if (currentSelectIndex == 2) {
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <pegDisplay+0x1a0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d103      	bne.n	8003daa <pegDisplay+0x13e>
							peg_move(0);
 8003da2:	2000      	movs	r0, #0
 8003da4:	f000 f838 	bl	8003e18 <peg_move>
 8003da8:	e00a      	b.n	8003dc0 <pegDisplay+0x154>
				} else {
					peg_move((currentSelectIndex + 1) % 3);
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <pegDisplay+0x1a0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	2103      	movs	r1, #3
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fc fb16 	bl	80003e4 <__aeabi_idivmod>
 8003db8:	000b      	movs	r3, r1
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 f82c 	bl	8003e18 <peg_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4812      	ldr	r0, [pc, #72]	; (8003e10 <pegDisplay+0x1a4>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	0019      	movs	r1, r3
 8003dca:	f001 fb68 	bl	800549e <HAL_GPIO_WritePin>
			goright =0;
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <pegDisplay+0x1a8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e7a6      	b.n	8003d24 <pegDisplay+0xb8>

			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	480d      	ldr	r0, [pc, #52]	; (8003e10 <pegDisplay+0x1a4>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	0019      	movs	r1, r3
 8003de0:	f001 fb5d 	bl	800549e <HAL_GPIO_WritePin>
		if (goleft == 1) {
 8003de4:	e79e      	b.n	8003d24 <pegDisplay+0xb8>
					return;
 8003de6:	46c0      	nop			; (mov r8, r8)
			}
	}
}
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	2000003c 	.word	0x2000003c
 8003df4:	0000ffe0 	.word	0x0000ffe0
 8003df8:	200000a8 	.word	0x200000a8
 8003dfc:	20000048 	.word	0x20000048
 8003e00:	08006fa0 	.word	0x08006fa0
 8003e04:	20000060 	.word	0x20000060
 8003e08:	200000ac 	.word	0x200000ac
 8003e0c:	200000a4 	.word	0x200000a4
 8003e10:	48000800 	.word	0x48000800
 8003e14:	200000b0 	.word	0x200000b0

08003e18 <peg_move>:
void peg_move(int selectIndex)
{//highlight current option and unhighlight previous option
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	6078      	str	r0, [r7, #4]
	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, peg[selectIndex], 16, 0);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	1c1a      	adds	r2, r3, #0
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	18d3      	adds	r3, r2, r3
 8003e2a:	1c1a      	adds	r2, r3, #0
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3319      	adds	r3, #25
 8003e34:	b298      	uxth	r0, r3
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <peg_move+0x84>)
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	58d3      	ldr	r3, [r2, r3]
 8003e3e:	4918      	ldr	r1, [pc, #96]	; (8003ea0 <peg_move+0x88>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	9202      	str	r2, [sp, #8]
 8003e44:	2210      	movs	r2, #16
 8003e46:	9201      	str	r2, [sp, #4]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	000a      	movs	r2, r1
 8003e4e:	21c8      	movs	r1, #200	; 0xc8
 8003e50:	f7fe f9ba 	bl	80021c8 <LCD_DrawString>
	LCD_DrawString(75*currentSelectIndex + 25,200,  YELLOW, BLUE, peg[currentSelectIndex], 16, 0);
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <peg_move+0x8c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	1c1a      	adds	r2, r3, #0
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	1c1a      	adds	r2, r3, #0
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3319      	adds	r3, #25
 8003e6a:	b298      	uxth	r0, r3
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <peg_move+0x8c>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <peg_move+0x84>)
 8003e72:	0092      	lsls	r2, r2, #2
 8003e74:	58d3      	ldr	r3, [r2, r3]
 8003e76:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <peg_move+0x88>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	9202      	str	r2, [sp, #8]
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	9201      	str	r2, [sp, #4]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	231f      	movs	r3, #31
 8003e84:	000a      	movs	r2, r1
 8003e86:	21c8      	movs	r1, #200	; 0xc8
 8003e88:	f7fe f99e 	bl	80021c8 <LCD_DrawString>
	currentSelectIndex = selectIndex;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <peg_move+0x8c>)
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	b002      	add	sp, #8
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	2000003c 	.word	0x2000003c
 8003ea0:	0000ffe0 	.word	0x0000ffe0
 8003ea4:	200000a4 	.word	0x200000a4

08003ea8 <peg_select>:
int peg_select(int selectIndex) {
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b08d      	sub	sp, #52	; 0x34
 8003eac:	af04      	add	r7, sp, #16
 8003eae:	6078      	str	r0, [r7, #4]
	//highlight selected option as red
    LCD_DrawString(75*selectIndex + 25,200,  YELLOW, RED, peg[selectIndex], 16, 0);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	1c1a      	adds	r2, r3, #0
 8003eb6:	0092      	lsls	r2, r2, #2
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	1c1a      	adds	r2, r3, #0
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3319      	adds	r3, #25
 8003ec4:	b298      	uxth	r0, r3
 8003ec6:	4b81      	ldr	r3, [pc, #516]	; (80040cc <peg_select+0x224>)
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	58d3      	ldr	r3, [r2, r3]
 8003ece:	22f8      	movs	r2, #248	; 0xf8
 8003ed0:	0212      	lsls	r2, r2, #8
 8003ed2:	4c7f      	ldr	r4, [pc, #508]	; (80040d0 <peg_select+0x228>)
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	9102      	str	r1, [sp, #8]
 8003ed8:	2110      	movs	r1, #16
 8003eda:	9101      	str	r1, [sp, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	0013      	movs	r3, r2
 8003ee0:	0022      	movs	r2, r4
 8003ee2:	21c8      	movs	r1, #200	; 0xc8
 8003ee4:	f7fe f970 	bl	80021c8 <LCD_DrawString>
    lastPressed = selectIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	4b79      	ldr	r3, [pc, #484]	; (80040d4 <peg_select+0x22c>)
 8003eee:	701a      	strb	r2, [r3, #0]
    if(currentSelectIndex == 0)
 8003ef0:	4b79      	ldr	r3, [pc, #484]	; (80040d8 <peg_select+0x230>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d144      	bne.n	8003f82 <peg_select+0xda>
    {
    	LCD_Clear(BLUE);
 8003ef8:	201f      	movs	r0, #31
 8003efa:	f7fd ff8f 	bl	8001e1c <LCD_Clear>
    	for (int i = 0; i < 3; i++) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e01c      	b.n	8003f3e <peg_select+0x96>
    		LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, peg[i], 16, 0);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	1c1a      	adds	r2, r3, #0
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	18d3      	adds	r3, r2, r3
 8003f0e:	1c1a      	adds	r2, r3, #0
 8003f10:	0112      	lsls	r2, r2, #4
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3319      	adds	r3, #25
 8003f18:	b298      	uxth	r0, r3
 8003f1a:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <peg_select+0x224>)
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	0092      	lsls	r2, r2, #2
 8003f20:	58d3      	ldr	r3, [r2, r3]
 8003f22:	496b      	ldr	r1, [pc, #428]	; (80040d0 <peg_select+0x228>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	9202      	str	r2, [sp, #8]
 8003f28:	2210      	movs	r2, #16
 8003f2a:	9201      	str	r2, [sp, #4]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	231f      	movs	r3, #31
 8003f30:	000a      	movs	r2, r1
 8003f32:	21c8      	movs	r1, #200	; 0xc8
 8003f34:	f7fe f948 	bl	80021c8 <LCD_DrawString>
    	for (int i = 0; i < 3; i++) {
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	dddf      	ble.n	8003f04 <peg_select+0x5c>
    	}
    	LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, peg[selectIndex], 16, 0);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	1c1a      	adds	r2, r3, #0
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	1c1a      	adds	r2, r3, #0
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3319      	adds	r3, #25
 8003f58:	b298      	uxth	r0, r3
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <peg_select+0x224>)
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	0092      	lsls	r2, r2, #2
 8003f60:	58d3      	ldr	r3, [r2, r3]
 8003f62:	495b      	ldr	r1, [pc, #364]	; (80040d0 <peg_select+0x228>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	9202      	str	r2, [sp, #8]
 8003f68:	2210      	movs	r2, #16
 8003f6a:	9201      	str	r2, [sp, #4]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	000a      	movs	r2, r1
 8003f72:	21c8      	movs	r1, #200	; 0xc8
 8003f74:	f7fe f928 	bl	80021c8 <LCD_DrawString>
    	currentSelectIndex = 0;
 8003f78:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <peg_select+0x230>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
    	return 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0a0      	b.n	80040c4 <peg_select+0x21c>
    }
    else if (currentSelectIndex == 1) // this is the incremental test for precise motor movements
 8003f82:	4b55      	ldr	r3, [pc, #340]	; (80040d8 <peg_select+0x230>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d000      	beq.n	8003f8c <peg_select+0xe4>
 8003f8a:	e08b      	b.n	80040a4 <peg_select+0x1fc>
    {
    	stepperMotor(0, 15000,45 , 0); //checking 45 degrees
 8003f8c:	4953      	ldr	r1, [pc, #332]	; (80040dc <peg_select+0x234>)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	222d      	movs	r2, #45	; 0x2d
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7ff f9d0 	bl	8003338 <stepperMotor>
    	HAL_Delay(500);
 8003f98:	23fa      	movs	r3, #250	; 0xfa
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 fb77 	bl	8004690 <HAL_Delay>

    		for(int j = 0; j < 10; j++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e019      	b.n	8003fdc <peg_select+0x134>
    		{
    	if(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f000 f89b 	bl	80040e4 <updateToggleHistory>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d106      	bne.n	8003fc0 <peg_select+0x118>
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	; (80040e0 <peg_select+0x238>)
 8003fb4:	2108      	movs	r1, #8
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f001 fa54 	bl	8005464 <HAL_GPIO_ReadPin>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d00a      	beq.n	8003fd6 <peg_select+0x12e>
    		{//10 degrees
    		stepperMotor(0, 15000,10 , 0);
 8003fc0:	4946      	ldr	r1, [pc, #280]	; (80040dc <peg_select+0x234>)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	220a      	movs	r2, #10
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7ff f9b6 	bl	8003338 <stepperMotor>
    		HAL_Delay(500);}
 8003fcc:	23fa      	movs	r3, #250	; 0xfa
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 fb5d 	bl	8004690 <HAL_Delay>
    		for(int j = 0; j < 10; j++)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b09      	cmp	r3, #9
 8003fe0:	dde2      	ble.n	8003fa8 <peg_select+0x100>
    		}
    		for(int j = 0; j < 10; j++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e019      	b.n	800401c <peg_select+0x174>
    		 {
    		if(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 8003fe8:	2003      	movs	r0, #3
 8003fea:	f000 f87b 	bl	80040e4 <updateToggleHistory>
 8003fee:	1e03      	subs	r3, r0, #0
 8003ff0:	d106      	bne.n	8004000 <peg_select+0x158>
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <peg_select+0x238>)
 8003ff4:	2108      	movs	r1, #8
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f001 fa34 	bl	8005464 <HAL_GPIO_ReadPin>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d00a      	beq.n	8004016 <peg_select+0x16e>
    			{//45 degrees
    			stepperMotor(0, 15000,45 , 0);
 8004000:	4936      	ldr	r1, [pc, #216]	; (80040dc <peg_select+0x234>)
 8004002:	2300      	movs	r3, #0
 8004004:	222d      	movs	r2, #45	; 0x2d
 8004006:	2000      	movs	r0, #0
 8004008:	f7ff f996 	bl	8003338 <stepperMotor>
    			HAL_Delay(500);}
 800400c:	23fa      	movs	r3, #250	; 0xfa
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	0018      	movs	r0, r3
 8004012:	f000 fb3d 	bl	8004690 <HAL_Delay>
    		for(int j = 0; j < 10; j++)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3301      	adds	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b09      	cmp	r3, #9
 8004020:	dde2      	ble.n	8003fe8 <peg_select+0x140>

    		 }
    		for(int j = 0; j < 10; j++)
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e019      	b.n	800405c <peg_select+0x1b4>
    		  {//90 degrees
    		   if(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 8004028:	2003      	movs	r0, #3
 800402a:	f000 f85b 	bl	80040e4 <updateToggleHistory>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d106      	bne.n	8004040 <peg_select+0x198>
 8004032:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <peg_select+0x238>)
 8004034:	2108      	movs	r1, #8
 8004036:	0018      	movs	r0, r3
 8004038:	f001 fa14 	bl	8005464 <HAL_GPIO_ReadPin>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d00a      	beq.n	8004056 <peg_select+0x1ae>
    			   {stepperMotor(0, 15000,90 , 0);
 8004040:	4926      	ldr	r1, [pc, #152]	; (80040dc <peg_select+0x234>)
 8004042:	2300      	movs	r3, #0
 8004044:	225a      	movs	r2, #90	; 0x5a
 8004046:	2000      	movs	r0, #0
 8004048:	f7ff f976 	bl	8003338 <stepperMotor>
    			   HAL_Delay(500);}
 800404c:	23fa      	movs	r3, #250	; 0xfa
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	0018      	movs	r0, r3
 8004052:	f000 fb1d 	bl	8004690 <HAL_Delay>
    		for(int j = 0; j < 10; j++)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b09      	cmp	r3, #9
 8004060:	dde2      	ble.n	8004028 <peg_select+0x180>
    		  }
    		for(int j = 0; j < 10; j++)
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e019      	b.n	800409c <peg_select+0x1f4>
    		    		  {//180 degrees
    		    		   if (updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 8004068:	2003      	movs	r0, #3
 800406a:	f000 f83b 	bl	80040e4 <updateToggleHistory>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d106      	bne.n	8004080 <peg_select+0x1d8>
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <peg_select+0x238>)
 8004074:	2108      	movs	r1, #8
 8004076:	0018      	movs	r0, r3
 8004078:	f001 f9f4 	bl	8005464 <HAL_GPIO_ReadPin>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d00a      	beq.n	8004096 <peg_select+0x1ee>
    		    			   {stepperMotor(0, 15000,180 , 0);
 8004080:	4916      	ldr	r1, [pc, #88]	; (80040dc <peg_select+0x234>)
 8004082:	2300      	movs	r3, #0
 8004084:	22b4      	movs	r2, #180	; 0xb4
 8004086:	2000      	movs	r0, #0
 8004088:	f7ff f956 	bl	8003338 <stepperMotor>
    		    			   HAL_Delay(500);}
 800408c:	23fa      	movs	r3, #250	; 0xfa
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	0018      	movs	r0, r3
 8004092:	f000 fafd 	bl	8004690 <HAL_Delay>
    		for(int j = 0; j < 10; j++)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b09      	cmp	r3, #9
 80040a0:	dde2      	ble.n	8004068 <peg_select+0x1c0>
 80040a2:	e009      	b.n	80040b8 <peg_select+0x210>
    		    		  }
    }
    else if(currentSelectIndex == 2) //this is manual 90 degree motor movement
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <peg_select+0x230>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d105      	bne.n	80040b8 <peg_select+0x210>
    {
    	stepperMotor(1, 15000, 90, 0);
 80040ac:	490b      	ldr	r1, [pc, #44]	; (80040dc <peg_select+0x234>)
 80040ae:	2300      	movs	r3, #0
 80040b0:	225a      	movs	r2, #90	; 0x5a
 80040b2:	2001      	movs	r0, #1
 80040b4:	f7ff f940 	bl	8003338 <stepperMotor>
    }
    stopmotor();
 80040b8:	f7fe f954 	bl	8002364 <stopmotor>
    HAL_Delay(100);
 80040bc:	2064      	movs	r0, #100	; 0x64
 80040be:	f000 fae7 	bl	8004690 <HAL_Delay>
    return 0;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b009      	add	sp, #36	; 0x24
 80040ca:	bd90      	pop	{r4, r7, pc}
 80040cc:	2000003c 	.word	0x2000003c
 80040d0:	0000ffe0 	.word	0x0000ffe0
 80040d4:	20000078 	.word	0x20000078
 80040d8:	200000a4 	.word	0x200000a4
 80040dc:	00003a98 	.word	0x00003a98
 80040e0:	48000400 	.word	0x48000400

080040e4 <updateToggleHistory>:
uint8_t updateToggleHistory(uint8_t button) {
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	0002      	movs	r2, r0
 80040ec:	1dfb      	adds	r3, r7, #7
 80040ee:	701a      	strb	r2, [r3, #0]
	uint8_t prev = pressHistory[button - 2];
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	1e9a      	subs	r2, r3, #2
 80040f6:	260f      	movs	r6, #15
 80040f8:	19bb      	adds	r3, r7, r6
 80040fa:	492c      	ldr	r1, [pc, #176]	; (80041ac <updateToggleHistory+0xc8>)
 80040fc:	5c8a      	ldrb	r2, [r1, r2]
 80040fe:	701a      	strb	r2, [r3, #0]
	uint8_t new = HAL_GPIO_ReadPin(GPIOB, 1 << (button));
 8004100:	1dfb      	adds	r3, r7, #7
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	0013      	movs	r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	250e      	movs	r5, #14
 800410e:	197c      	adds	r4, r7, r5
 8004110:	4a27      	ldr	r2, [pc, #156]	; (80041b0 <updateToggleHistory+0xcc>)
 8004112:	0019      	movs	r1, r3
 8004114:	0010      	movs	r0, r2
 8004116:	f001 f9a5 	bl	8005464 <HAL_GPIO_ReadPin>
 800411a:	0003      	movs	r3, r0
 800411c:	7023      	strb	r3, [r4, #0]
	pressHistory[button - 2] = new;
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	3b02      	subs	r3, #2
 8004124:	4a21      	ldr	r2, [pc, #132]	; (80041ac <updateToggleHistory+0xc8>)
 8004126:	0028      	movs	r0, r5
 8004128:	1839      	adds	r1, r7, r0
 800412a:	7809      	ldrb	r1, [r1, #0]
 800412c:	54d1      	strb	r1, [r2, r3]
	if (lastButton == button && (prev == 1 || new == 1)) return 0;
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <updateToggleHistory+0xd0>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	1dfa      	adds	r2, r7, #7
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d109      	bne.n	800414e <updateToggleHistory+0x6a>
 800413a:	19bb      	adds	r3, r7, r6
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d003      	beq.n	800414a <updateToggleHistory+0x66>
 8004142:	183b      	adds	r3, r7, r0
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <updateToggleHistory+0x6a>
 800414a:	2300      	movs	r3, #0
 800414c:	e029      	b.n	80041a2 <updateToggleHistory+0xbe>
	else if (prev == 1 && new == 1) {
 800414e:	230f      	movs	r3, #15
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d109      	bne.n	800416c <updateToggleHistory+0x88>
 8004158:	230e      	movs	r3, #14
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d104      	bne.n	800416c <updateToggleHistory+0x88>
		lastButton = button;
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <updateToggleHistory+0xd0>)
 8004164:	1dfa      	adds	r2, r7, #7
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e00c      	b.n	8004186 <updateToggleHistory+0xa2>
	} else if (prev == 0 && new == 0){
 800416c:	230f      	movs	r3, #15
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <updateToggleHistory+0xa2>
 8004176:	230e      	movs	r3, #14
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <updateToggleHistory+0xa2>
		lastButton = -1;
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <updateToggleHistory+0xd0>)
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	701a      	strb	r2, [r3, #0]
	}

	return prev && new;
 8004186:	230f      	movs	r3, #15
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <updateToggleHistory+0xba>
 8004190:	230e      	movs	r3, #14
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <updateToggleHistory+0xba>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <updateToggleHistory+0xbc>
 800419e:	2300      	movs	r3, #0
 80041a0:	b2db      	uxtb	r3, r3


  /* USER CODE END 3 */
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b005      	add	sp, #20
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	200000bc 	.word	0x200000bc
 80041b0:	48000400 	.word	0x48000400
 80041b4:	20000079 	.word	0x20000079

080041b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_MspInit+0x44>)
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_MspInit+0x44>)
 80041c4:	2101      	movs	r1, #1
 80041c6:	430a      	orrs	r2, r1
 80041c8:	619a      	str	r2, [r3, #24]
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_MspInit+0x44>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2201      	movs	r2, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_MspInit+0x44>)
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_MspInit+0x44>)
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	0549      	lsls	r1, r1, #21
 80041e0:	430a      	orrs	r2, r1
 80041e2:	61da      	str	r2, [r3, #28]
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_MspInit+0x44>)
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	055b      	lsls	r3, r3, #21
 80041ec:	4013      	ands	r3, r2
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	40021000 	.word	0x40021000

08004200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b08b      	sub	sp, #44	; 0x2c
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	2414      	movs	r4, #20
 800420a:	193b      	adds	r3, r7, r4
 800420c:	0018      	movs	r0, r3
 800420e:	2314      	movs	r3, #20
 8004210:	001a      	movs	r2, r3
 8004212:	2100      	movs	r1, #0
 8004214:	f002 fe0c 	bl	8006e30 <memset>
  if(hadc->Instance==ADC1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a34      	ldr	r2, [pc, #208]	; (80042f0 <HAL_ADC_MspInit+0xf0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d162      	bne.n	80042e8 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004222:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <HAL_ADC_MspInit+0xf4>)
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <HAL_ADC_MspInit+0xf4>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	0089      	lsls	r1, r1, #2
 800422c:	430a      	orrs	r2, r1
 800422e:	619a      	str	r2, [r3, #24]
 8004230:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <HAL_ADC_MspInit+0xf4>)
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <HAL_ADC_MspInit+0xf4>)
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HAL_ADC_MspInit+0xf4>)
 8004244:	2180      	movs	r1, #128	; 0x80
 8004246:	02c9      	lsls	r1, r1, #11
 8004248:	430a      	orrs	r2, r1
 800424a:	615a      	str	r2, [r3, #20]
 800424c:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <HAL_ADC_MspInit+0xf4>)
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	02db      	lsls	r3, r3, #11
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800425a:	193b      	adds	r3, r7, r4
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004260:	193b      	adds	r3, r7, r4
 8004262:	2203      	movs	r2, #3
 8004264:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	193b      	adds	r3, r7, r4
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426c:	193b      	adds	r3, r7, r4
 800426e:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <HAL_ADC_MspInit+0xf8>)
 8004270:	0019      	movs	r1, r3
 8004272:	0010      	movs	r0, r2
 8004274:	f000 ff7e 	bl	8005174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004278:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 800427a:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_ADC_MspInit+0x100>)
 800427c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800427e:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	0052      	lsls	r2, r2, #1
 8004296:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004298:	4b18      	ldr	r3, [pc, #96]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	00d2      	lsls	r2, r2, #3
 800429e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80042a0:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 80042a2:	2220      	movs	r2, #32
 80042a4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80042a6:	4b15      	ldr	r3, [pc, #84]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 fe3c 	bl	8004f2c <HAL_DMA_Init>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d001      	beq.n	80042bc <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80042b8:	f7fe fc26 	bl	8002b08 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 80042bc:	4a11      	ldr	r2, [pc, #68]	; (8004304 <HAL_ADC_MspInit+0x104>)
 80042be:	23a8      	movs	r3, #168	; 0xa8
 80042c0:	58d3      	ldr	r3, [r2, r3]
 80042c2:	4910      	ldr	r1, [pc, #64]	; (8004304 <HAL_ADC_MspInit+0x104>)
 80042c4:	220f      	movs	r2, #15
 80042c6:	4393      	bics	r3, r2
 80042c8:	22a8      	movs	r2, #168	; 0xa8
 80042ca:	508b      	str	r3, [r1, r2]
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <HAL_ADC_MspInit+0x104>)
 80042ce:	23a8      	movs	r3, #168	; 0xa8
 80042d0:	58d3      	ldr	r3, [r2, r3]
 80042d2:	490c      	ldr	r1, [pc, #48]	; (8004304 <HAL_ADC_MspInit+0x104>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	22a8      	movs	r2, #168	; 0xa8
 80042da:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a07      	ldr	r2, [pc, #28]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_ADC_MspInit+0xfc>)
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b00b      	add	sp, #44	; 0x2c
 80042ee:	bd90      	pop	{r4, r7, pc}
 80042f0:	40012400 	.word	0x40012400
 80042f4:	40021000 	.word	0x40021000
 80042f8:	48000400 	.word	0x48000400
 80042fc:	200001c8 	.word	0x200001c8
 8004300:	40020008 	.word	0x40020008
 8004304:	40020000 	.word	0x40020000

08004308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b08b      	sub	sp, #44	; 0x2c
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	2414      	movs	r4, #20
 8004312:	193b      	adds	r3, r7, r4
 8004314:	0018      	movs	r0, r3
 8004316:	2314      	movs	r3, #20
 8004318:	001a      	movs	r2, r3
 800431a:	2100      	movs	r1, #0
 800431c:	f002 fd88 	bl	8006e30 <memset>
  if(hi2c->Instance==I2C2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <HAL_I2C_MspInit+0x90>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d132      	bne.n	8004390 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432a:	4b1c      	ldr	r3, [pc, #112]	; (800439c <HAL_I2C_MspInit+0x94>)
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_I2C_MspInit+0x94>)
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	02c9      	lsls	r1, r1, #11
 8004334:	430a      	orrs	r2, r1
 8004336:	615a      	str	r2, [r3, #20]
 8004338:	4b18      	ldr	r3, [pc, #96]	; (800439c <HAL_I2C_MspInit+0x94>)
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	02db      	lsls	r3, r3, #11
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004346:	193b      	adds	r3, r7, r4
 8004348:	22c0      	movs	r2, #192	; 0xc0
 800434a:	0112      	lsls	r2, r2, #4
 800434c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800434e:	0021      	movs	r1, r4
 8004350:	187b      	adds	r3, r7, r1
 8004352:	2212      	movs	r2, #18
 8004354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004356:	187b      	adds	r3, r7, r1
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800435c:	187b      	adds	r3, r7, r1
 800435e:	2203      	movs	r2, #3
 8004360:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8004362:	187b      	adds	r3, r7, r1
 8004364:	2201      	movs	r2, #1
 8004366:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004368:	187b      	adds	r3, r7, r1
 800436a:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <HAL_I2C_MspInit+0x98>)
 800436c:	0019      	movs	r1, r3
 800436e:	0010      	movs	r0, r2
 8004370:	f000 ff00 	bl	8005174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_I2C_MspInit+0x94>)
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_I2C_MspInit+0x94>)
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	03c9      	lsls	r1, r1, #15
 800437e:	430a      	orrs	r2, r1
 8004380:	61da      	str	r2, [r3, #28]
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_I2C_MspInit+0x94>)
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	03db      	lsls	r3, r3, #15
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b00b      	add	sp, #44	; 0x2c
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	40005800 	.word	0x40005800
 800439c:	40021000 	.word	0x40021000
 80043a0:	48000400 	.word	0x48000400

080043a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b08b      	sub	sp, #44	; 0x2c
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	2414      	movs	r4, #20
 80043ae:	193b      	adds	r3, r7, r4
 80043b0:	0018      	movs	r0, r3
 80043b2:	2314      	movs	r3, #20
 80043b4:	001a      	movs	r2, r3
 80043b6:	2100      	movs	r1, #0
 80043b8:	f002 fd3a 	bl	8006e30 <memset>
  if(hspi->Instance==SPI1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_SPI_MspInit+0x90>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d132      	bne.n	800442c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <HAL_SPI_MspInit+0x94>)
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_SPI_MspInit+0x94>)
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	0149      	lsls	r1, r1, #5
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_SPI_MspInit+0x94>)
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	015b      	lsls	r3, r3, #5
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_SPI_MspInit+0x94>)
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <HAL_SPI_MspInit+0x94>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0289      	lsls	r1, r1, #10
 80043ec:	430a      	orrs	r2, r1
 80043ee:	615a      	str	r2, [r3, #20]
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_SPI_MspInit+0x94>)
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	029b      	lsls	r3, r3, #10
 80043f8:	4013      	ands	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80043fe:	0021      	movs	r1, r4
 8004400:	187b      	adds	r3, r7, r1
 8004402:	22b0      	movs	r2, #176	; 0xb0
 8004404:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	187b      	adds	r3, r7, r1
 8004408:	2202      	movs	r2, #2
 800440a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	187b      	adds	r3, r7, r1
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004412:	187b      	adds	r3, r7, r1
 8004414:	2203      	movs	r2, #3
 8004416:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004418:	187b      	adds	r3, r7, r1
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800441e:	187a      	adds	r2, r7, r1
 8004420:	2390      	movs	r3, #144	; 0x90
 8004422:	05db      	lsls	r3, r3, #23
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f000 fea4 	bl	8005174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b00b      	add	sp, #44	; 0x2c
 8004432:	bd90      	pop	{r4, r7, pc}
 8004434:	40013000 	.word	0x40013000
 8004438:	40021000 	.word	0x40021000

0800443c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <HAL_TIM_PWM_MspInit+0x38>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10d      	bne.n	800446a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <HAL_TIM_PWM_MspInit+0x3c>)
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_TIM_PWM_MspInit+0x3c>)
 8004454:	2180      	movs	r1, #128	; 0x80
 8004456:	0109      	lsls	r1, r1, #4
 8004458:	430a      	orrs	r2, r1
 800445a:	619a      	str	r2, [r3, #24]
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_TIM_PWM_MspInit+0x3c>)
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4013      	ands	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	46bd      	mov	sp, r7
 800446e:	b004      	add	sp, #16
 8004470:	bd80      	pop	{r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800447c:	b590      	push	{r4, r7, lr}
 800447e:	b089      	sub	sp, #36	; 0x24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	240c      	movs	r4, #12
 8004486:	193b      	adds	r3, r7, r4
 8004488:	0018      	movs	r0, r3
 800448a:	2314      	movs	r3, #20
 800448c:	001a      	movs	r2, r3
 800448e:	2100      	movs	r1, #0
 8004490:	f002 fcce 	bl	8006e30 <memset>
  if(htim->Instance==TIM1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_TIM_MspPostInit+0x78>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d125      	bne.n	80044ea <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <HAL_TIM_MspPostInit+0x7c>)
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_TIM_MspPostInit+0x7c>)
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	0289      	lsls	r1, r1, #10
 80044a8:	430a      	orrs	r2, r1
 80044aa:	615a      	str	r2, [r3, #20]
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_TIM_MspPostInit+0x7c>)
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	029b      	lsls	r3, r3, #10
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	0052      	lsls	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	0021      	movs	r1, r4
 80044c4:	187b      	adds	r3, r7, r1
 80044c6:	2202      	movs	r2, #2
 80044c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	187b      	adds	r3, r7, r1
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	2202      	movs	r2, #2
 80044da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044dc:	187a      	adds	r2, r7, r1
 80044de:	2390      	movs	r3, #144	; 0x90
 80044e0:	05db      	lsls	r3, r3, #23
 80044e2:	0011      	movs	r1, r2
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 fe45 	bl	8005174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b009      	add	sp, #36	; 0x24
 80044f0:	bd90      	pop	{r4, r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40021000 	.word	0x40021000

080044fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004500:	e7fe      	b.n	8004500 <NMI_Handler+0x4>

08004502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004506:	e7fe      	b.n	8004506 <HardFault_Handler+0x4>

08004508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004520:	f000 f89a 	bl	8004658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800452e:	2004      	movs	r0, #4
 8004530:	f000 ffd2 	bl	80054d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004534:	2008      	movs	r0, #8
 8004536:	f000 ffcf 	bl	80054d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004544:	2010      	movs	r0, #16
 8004546:	f000 ffc7 	bl	80054d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <DMA1_Ch1_IRQHandler+0x14>)
 8004556:	0018      	movs	r0, r3
 8004558:	f000 fd30 	bl	8004fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	200001c8 	.word	0x200001c8

08004568 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004574:	480d      	ldr	r0, [pc, #52]	; (80045ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004576:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004578:	480d      	ldr	r0, [pc, #52]	; (80045b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800457a:	490e      	ldr	r1, [pc, #56]	; (80045b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <LoopForever+0xe>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004580:	e002      	b.n	8004588 <LoopCopyDataInit>

08004582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004586:	3304      	adds	r3, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800458c:	d3f9      	bcc.n	8004582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004590:	4c0b      	ldr	r4, [pc, #44]	; (80045c0 <LoopForever+0x16>)
  movs r3, #0
 8004592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004594:	e001      	b.n	800459a <LoopFillZerobss>

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004598:	3204      	adds	r2, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800459e:	f7ff ffe3 	bl	8004568 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80045a2:	f002 fc21 	bl	8006de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045a6:	f7fd fe69 	bl	800227c <main>

080045aa <LoopForever>:

LoopForever:
    b LoopForever
 80045aa:	e7fe      	b.n	80045aa <LoopForever>
  ldr   r0, =_estack
 80045ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80045b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80045b8:	08007ac8 	.word	0x08007ac8
  ldr r2, =_sbss
 80045bc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80045c0:	20000250 	.word	0x20000250

080045c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC1_COMP_IRQHandler>
	...

080045c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045cc:	4b07      	ldr	r3, [pc, #28]	; (80045ec <HAL_Init+0x24>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_Init+0x24>)
 80045d2:	2110      	movs	r1, #16
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80045d8:	2003      	movs	r0, #3
 80045da:	f000 f809 	bl	80045f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045de:	f7ff fdeb 	bl	80041b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40022000 	.word	0x40022000

080045f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <HAL_InitTick+0x5c>)
 80045fa:	681c      	ldr	r4, [r3, #0]
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_InitTick+0x60>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	0019      	movs	r1, r3
 8004602:	23fa      	movs	r3, #250	; 0xfa
 8004604:	0098      	lsls	r0, r3, #2
 8004606:	f7fb fd7d 	bl	8000104 <__udivsi3>
 800460a:	0003      	movs	r3, r0
 800460c:	0019      	movs	r1, r3
 800460e:	0020      	movs	r0, r4
 8004610:	f7fb fd78 	bl	8000104 <__udivsi3>
 8004614:	0003      	movs	r3, r0
 8004616:	0018      	movs	r0, r3
 8004618:	f000 fc7b 	bl	8004f12 <HAL_SYSTICK_Config>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d001      	beq.n	8004624 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e00f      	b.n	8004644 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d80b      	bhi.n	8004642 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	2301      	movs	r3, #1
 800462e:	425b      	negs	r3, r3
 8004630:	2200      	movs	r2, #0
 8004632:	0018      	movs	r0, r3
 8004634:	f000 fc48 	bl	8004ec8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_InitTick+0x64>)
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b003      	add	sp, #12
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	2000007c 	.word	0x2000007c
 8004650:	20000084 	.word	0x20000084
 8004654:	20000080 	.word	0x20000080

08004658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_IncTick+0x1c>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	001a      	movs	r2, r3
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_IncTick+0x20>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	18d2      	adds	r2, r2, r3
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <HAL_IncTick+0x20>)
 800466a:	601a      	str	r2, [r3, #0]
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	20000084 	.word	0x20000084
 8004678:	2000024c 	.word	0x2000024c

0800467c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  return uwTick;
 8004680:	4b02      	ldr	r3, [pc, #8]	; (800468c <HAL_GetTick+0x10>)
 8004682:	681b      	ldr	r3, [r3, #0]
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	2000024c 	.word	0x2000024c

08004690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004698:	f7ff fff0 	bl	800467c <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	d005      	beq.n	80046b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_Delay+0x44>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	001a      	movs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	f7ff ffe0 	bl	800467c <HAL_GetTick>
 80046bc:	0002      	movs	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d8f7      	bhi.n	80046b8 <HAL_Delay+0x28>
  {
  }
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b004      	add	sp, #16
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	20000084 	.word	0x20000084

080046d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e0:	230f      	movs	r3, #15
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e125      	b.n	8004942 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2234      	movs	r2, #52	; 0x34
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff fd76 	bl	8004200 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	2210      	movs	r2, #16
 800471a:	4013      	ands	r3, r2
 800471c:	d000      	beq.n	8004720 <HAL_ADC_Init+0x48>
 800471e:	e103      	b.n	8004928 <HAL_ADC_Init+0x250>
 8004720:	230f      	movs	r3, #15
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d000      	beq.n	800472c <HAL_ADC_Init+0x54>
 800472a:	e0fd      	b.n	8004928 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2204      	movs	r2, #4
 8004734:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004736:	d000      	beq.n	800473a <HAL_ADC_Init+0x62>
 8004738:	e0f6      	b.n	8004928 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	4a83      	ldr	r2, [pc, #524]	; (800494c <HAL_ADC_Init+0x274>)
 8004740:	4013      	ands	r3, r2
 8004742:	2202      	movs	r2, #2
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2203      	movs	r2, #3
 8004752:	4013      	ands	r3, r2
 8004754:	2b01      	cmp	r3, #1
 8004756:	d112      	bne.n	800477e <HAL_ADC_Init+0xa6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	4013      	ands	r3, r2
 8004762:	2b01      	cmp	r3, #1
 8004764:	d009      	beq.n	800477a <HAL_ADC_Init+0xa2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	401a      	ands	r2, r3
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	429a      	cmp	r2, r3
 8004778:	d101      	bne.n	800477e <HAL_ADC_Init+0xa6>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <HAL_ADC_Init+0xa8>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d116      	bne.n	80047b2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2218      	movs	r2, #24
 800478c:	4393      	bics	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	0899      	lsrs	r1, r3, #2
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4964      	ldr	r1, [pc, #400]	; (8004950 <HAL_ADC_Init+0x278>)
 80047be:	400a      	ands	r2, r1
 80047c0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7e1b      	ldrb	r3, [r3, #24]
 80047c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7e5b      	ldrb	r3, [r3, #25]
 80047cc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7e9b      	ldrb	r3, [r3, #26]
 80047d4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80047d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d002      	beq.n	80047e6 <HAL_ADC_Init+0x10e>
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	015b      	lsls	r3, r3, #5
 80047e4:	e000      	b.n	80047e8 <HAL_ADC_Init+0x110>
 80047e6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80047e8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80047ee:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_Init+0x124>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e000      	b.n	80047fe <HAL_ADC_Init+0x126>
 80047fc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80047fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2124      	movs	r1, #36	; 0x24
 8004804:	5c5b      	ldrb	r3, [r3, r1]
 8004806:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004808:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4313      	orrs	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7edb      	ldrb	r3, [r3, #27]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d115      	bne.n	8004844 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	7e9b      	ldrb	r3, [r3, #26]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2280      	movs	r2, #128	; 0x80
 8004824:	0252      	lsls	r2, r2, #9
 8004826:	4313      	orrs	r3, r2
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	e00b      	b.n	8004844 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	2220      	movs	r2, #32
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	2201      	movs	r2, #1
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	23c2      	movs	r3, #194	; 0xc2
 800484a:	33ff      	adds	r3, #255	; 0xff
 800484c:	429a      	cmp	r2, r3
 800484e:	d007      	beq.n	8004860 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004858:	4313      	orrs	r3, r2
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4313      	orrs	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68d9      	ldr	r1, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	430a      	orrs	r2, r1
 800486e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	055b      	lsls	r3, r3, #21
 8004878:	429a      	cmp	r2, r3
 800487a:	d01b      	beq.n	80048b4 <HAL_ADC_Init+0x1dc>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d017      	beq.n	80048b4 <HAL_ADC_Init+0x1dc>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	2b02      	cmp	r3, #2
 800488a:	d013      	beq.n	80048b4 <HAL_ADC_Init+0x1dc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	2b03      	cmp	r3, #3
 8004892:	d00f      	beq.n	80048b4 <HAL_ADC_Init+0x1dc>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	2b04      	cmp	r3, #4
 800489a:	d00b      	beq.n	80048b4 <HAL_ADC_Init+0x1dc>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d007      	beq.n	80048b4 <HAL_ADC_Init+0x1dc>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2b06      	cmp	r3, #6
 80048aa:	d003      	beq.n	80048b4 <HAL_ADC_Init+0x1dc>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2b07      	cmp	r3, #7
 80048b2:	d112      	bne.n	80048da <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2107      	movs	r1, #7
 80048c0:	438a      	bics	r2, r1
 80048c2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6959      	ldr	r1, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	2207      	movs	r2, #7
 80048d0:	401a      	ands	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_ADC_Init+0x27c>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d10b      	bne.n	8004902 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	2203      	movs	r2, #3
 80048f6:	4393      	bics	r3, r2
 80048f8:	2201      	movs	r2, #1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004900:	e01c      	b.n	800493c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	2212      	movs	r2, #18
 8004908:	4393      	bics	r3, r2
 800490a:	2210      	movs	r2, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	2201      	movs	r2, #1
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800491e:	230f      	movs	r3, #15
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004926:	e009      	b.n	800493c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	2210      	movs	r2, #16
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004934:	230f      	movs	r3, #15
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2201      	movs	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800493c:	230f      	movs	r3, #15
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	781b      	ldrb	r3, [r3, #0]
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b004      	add	sp, #16
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	fffffefd 	.word	0xfffffefd
 8004950:	fffe0219 	.word	0xfffe0219
 8004954:	833fffe7 	.word	0x833fffe7

08004958 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004960:	230f      	movs	r3, #15
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2234      	movs	r2, #52	; 0x34
 800496c:	5c9b      	ldrb	r3, [r3, r2]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_ADC_Stop+0x1e>
 8004972:	2302      	movs	r3, #2
 8004974:	e029      	b.n	80049ca <HAL_ADC_Stop+0x72>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2234      	movs	r2, #52	; 0x34
 800497a:	2101      	movs	r1, #1
 800497c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800497e:	250f      	movs	r5, #15
 8004980:	197c      	adds	r4, r7, r5
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f000 f9a6 	bl	8004cd6 <ADC_ConversionStop>
 800498a:	0003      	movs	r3, r0
 800498c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800498e:	197b      	adds	r3, r7, r5
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d112      	bne.n	80049bc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004996:	197c      	adds	r4, r7, r5
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	0018      	movs	r0, r3
 800499c:	f000 f92a 	bl	8004bf4 <ADC_Disable>
 80049a0:	0003      	movs	r3, r0
 80049a2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80049a4:	197b      	adds	r3, r7, r5
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_ADC_Stop+0x7c>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	2201      	movs	r2, #1
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2234      	movs	r2, #52	; 0x34
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80049c4:	230f      	movs	r3, #15
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	781b      	ldrb	r3, [r3, #0]
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b004      	add	sp, #16
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	fffffefe 	.word	0xfffffefe

080049d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049e2:	230f      	movs	r3, #15
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	055b      	lsls	r3, r3, #21
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d011      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x46>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d00d      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x46>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d009      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x46>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d005      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x46>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d001      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x46>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2234      	movs	r2, #52	; 0x34
 8004a22:	5c9b      	ldrb	r3, [r3, r2]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x54>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e0d0      	b.n	8004bce <HAL_ADC_ConfigChannel+0x1f6>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2234      	movs	r2, #52	; 0x34
 8004a30:	2101      	movs	r1, #1
 8004a32:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d000      	beq.n	8004a42 <HAL_ADC_ConfigChannel+0x6a>
 8004a40:	e0b4      	b.n	8004bac <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4a64      	ldr	r2, [pc, #400]	; (8004bd8 <HAL_ADC_ConfigChannel+0x200>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x76>
 8004a4c:	e082      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	055b      	lsls	r3, r3, #21
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d037      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d033      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d02f      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d02b      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d027      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d023      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	d01f      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	2b07      	cmp	r3, #7
 8004aa6:	d01b      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2107      	movs	r1, #7
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d012      	beq.n	8004ae0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2107      	movs	r1, #7
 8004ac6:	438a      	bics	r2, r1
 8004ac8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6959      	ldr	r1, [r3, #20]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d007      	beq.n	8004af8 <HAL_ADC_ConfigChannel+0x120>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b11      	cmp	r3, #17
 8004aee:	d003      	beq.n	8004af8 <HAL_ADC_ConfigChannel+0x120>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b12      	cmp	r3, #18
 8004af6:	d163      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004af8:	4b38      	ldr	r3, [pc, #224]	; (8004bdc <HAL_ADC_ConfigChannel+0x204>)
 8004afa:	6819      	ldr	r1, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d009      	beq.n	8004b18 <HAL_ADC_ConfigChannel+0x140>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b11      	cmp	r3, #17
 8004b0a:	d102      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x13a>
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	03db      	lsls	r3, r3, #15
 8004b10:	e004      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x144>
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	045b      	lsls	r3, r3, #17
 8004b16:	e001      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x144>
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <HAL_ADC_ConfigChannel+0x204>)
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d14a      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b2a:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <HAL_ADC_ConfigChannel+0x208>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	492d      	ldr	r1, [pc, #180]	; (8004be4 <HAL_ADC_ConfigChannel+0x20c>)
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7fb fae7 	bl	8000104 <__udivsi3>
 8004b36:	0003      	movs	r3, r0
 8004b38:	001a      	movs	r2, r3
 8004b3a:	0013      	movs	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	189b      	adds	r3, r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b44:	e002      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f9      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x16e>
 8004b52:	e035      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2101      	movs	r1, #1
 8004b60:	4099      	lsls	r1, r3
 8004b62:	000b      	movs	r3, r1
 8004b64:	43d9      	mvns	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d007      	beq.n	8004b86 <HAL_ADC_ConfigChannel+0x1ae>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b11      	cmp	r3, #17
 8004b7c:	d003      	beq.n	8004b86 <HAL_ADC_ConfigChannel+0x1ae>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b12      	cmp	r3, #18
 8004b84:	d11c      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_ADC_ConfigChannel+0x204>)
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d007      	beq.n	8004ba2 <HAL_ADC_ConfigChannel+0x1ca>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b11      	cmp	r3, #17
 8004b98:	d101      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x1c6>
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_ADC_ConfigChannel+0x210>)
 8004b9c:	e002      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x1cc>
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_ADC_ConfigChannel+0x214>)
 8004ba0:	e000      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x1cc>
 8004ba2:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_ADC_ConfigChannel+0x218>)
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <HAL_ADC_ConfigChannel+0x204>)
 8004ba6:	400b      	ands	r3, r1
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e009      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004bb8:	230f      	movs	r3, #15
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2234      	movs	r2, #52	; 0x34
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	781b      	ldrb	r3, [r3, #0]
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	00001001 	.word	0x00001001
 8004bdc:	40012708 	.word	0x40012708
 8004be0:	2000007c 	.word	0x2000007c
 8004be4:	000f4240 	.word	0x000f4240
 8004be8:	ffbfffff 	.word	0xffbfffff
 8004bec:	feffffff 	.word	0xfeffffff
 8004bf0:	ff7fffff 	.word	0xff7fffff

08004bf4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2203      	movs	r2, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d112      	bne.n	8004c34 <ADC_Disable+0x40>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d009      	beq.n	8004c30 <ADC_Disable+0x3c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	401a      	ands	r2, r3
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d101      	bne.n	8004c34 <ADC_Disable+0x40>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <ADC_Disable+0x42>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d048      	beq.n	8004ccc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2205      	movs	r2, #5
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d110      	bne.n	8004c6a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2102      	movs	r1, #2
 8004c54:	430a      	orrs	r2, r1
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c60:	f7ff fd0c 	bl	800467c <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c68:	e029      	b.n	8004cbe <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	2210      	movs	r2, #16
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e023      	b.n	8004cce <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c86:	f7ff fcf9 	bl	800467c <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d914      	bls.n	8004cbe <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10d      	bne.n	8004cbe <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e007      	b.n	8004cce <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d0dc      	beq.n	8004c86 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b004      	add	sp, #16
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	4013      	ands	r3, r2
 8004cec:	d03a      	beq.n	8004d64 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d10d      	bne.n	8004d18 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2202      	movs	r2, #2
 8004d04:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004d06:	d107      	bne.n	8004d18 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2110      	movs	r1, #16
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d18:	f7ff fcb0 	bl	800467c <HAL_GetTick>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004d20:	e01a      	b.n	8004d58 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d22:	f7ff fcab 	bl	800467c <HAL_GetTick>
 8004d26:	0002      	movs	r2, r0
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d913      	bls.n	8004d58 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2204      	movs	r2, #4
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d00d      	beq.n	8004d58 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	2210      	movs	r2, #16
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e006      	b.n	8004d66 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	4013      	ands	r3, r2
 8004d62:	d1de      	bne.n	8004d22 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	0018      	movs	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b004      	add	sp, #16
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	0002      	movs	r2, r0
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d7c:	1dfb      	adds	r3, r7, #7
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b7f      	cmp	r3, #127	; 0x7f
 8004d82:	d809      	bhi.n	8004d98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	001a      	movs	r2, r3
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__NVIC_EnableIRQ+0x30>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	4091      	lsls	r1, r2
 8004d94:	000a      	movs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]
  }
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	e000e100 	.word	0xe000e100

08004da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	0002      	movs	r2, r0
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	1dfb      	adds	r3, r7, #7
 8004db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b7f      	cmp	r3, #127	; 0x7f
 8004db8:	d828      	bhi.n	8004e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dba:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <__NVIC_SetPriority+0xd4>)
 8004dbc:	1dfb      	adds	r3, r7, #7
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	33c0      	adds	r3, #192	; 0xc0
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	589b      	ldr	r3, [r3, r2]
 8004dca:	1dfa      	adds	r2, r7, #7
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	0011      	movs	r1, r2
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	400a      	ands	r2, r1
 8004dd4:	00d2      	lsls	r2, r2, #3
 8004dd6:	21ff      	movs	r1, #255	; 0xff
 8004dd8:	4091      	lsls	r1, r2
 8004dda:	000a      	movs	r2, r1
 8004ddc:	43d2      	mvns	r2, r2
 8004dde:	401a      	ands	r2, r3
 8004de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	22ff      	movs	r2, #255	; 0xff
 8004de8:	401a      	ands	r2, r3
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	0018      	movs	r0, r3
 8004df0:	2303      	movs	r3, #3
 8004df2:	4003      	ands	r3, r0
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004df8:	481f      	ldr	r0, [pc, #124]	; (8004e78 <__NVIC_SetPriority+0xd4>)
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	430a      	orrs	r2, r1
 8004e04:	33c0      	adds	r3, #192	; 0xc0
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e0a:	e031      	b.n	8004e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <__NVIC_SetPriority+0xd8>)
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	0019      	movs	r1, r3
 8004e14:	230f      	movs	r3, #15
 8004e16:	400b      	ands	r3, r1
 8004e18:	3b08      	subs	r3, #8
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	3306      	adds	r3, #6
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	3304      	adds	r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1dfa      	adds	r2, r7, #7
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	400a      	ands	r2, r1
 8004e30:	00d2      	lsls	r2, r2, #3
 8004e32:	21ff      	movs	r1, #255	; 0xff
 8004e34:	4091      	lsls	r1, r2
 8004e36:	000a      	movs	r2, r1
 8004e38:	43d2      	mvns	r2, r2
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	22ff      	movs	r2, #255	; 0xff
 8004e44:	401a      	ands	r2, r3
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	4003      	ands	r3, r0
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e54:	4809      	ldr	r0, [pc, #36]	; (8004e7c <__NVIC_SetPriority+0xd8>)
 8004e56:	1dfb      	adds	r3, r7, #7
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	001c      	movs	r4, r3
 8004e5c:	230f      	movs	r3, #15
 8004e5e:	4023      	ands	r3, r4
 8004e60:	3b08      	subs	r3, #8
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	430a      	orrs	r2, r1
 8004e66:	3306      	adds	r3, #6
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	18c3      	adds	r3, r0, r3
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	46c0      	nop			; (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b003      	add	sp, #12
 8004e76:	bd90      	pop	{r4, r7, pc}
 8004e78:	e000e100 	.word	0xe000e100
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1e5a      	subs	r2, r3, #1
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	045b      	lsls	r3, r3, #17
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d301      	bcc.n	8004e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e94:	2301      	movs	r3, #1
 8004e96:	e010      	b.n	8004eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <SysTick_Config+0x44>)
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	425b      	negs	r3, r3
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff ff7c 	bl	8004da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SysTick_Config+0x44>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <SysTick_Config+0x44>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	e000e010 	.word	0xe000e010

08004ec8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	210f      	movs	r1, #15
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	1c02      	adds	r2, r0, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7ff ff5d 	bl	8004da4 <__NVIC_SetPriority>
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	0002      	movs	r2, r0
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b25b      	sxtb	r3, r3
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7ff ff33 	bl	8004d70 <__NVIC_EnableIRQ>
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7ff ffaf 	bl	8004e80 <SysTick_Config>
 8004f22:	0003      	movs	r3, r0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e036      	b.n	8004fb0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2221      	movs	r2, #33	; 0x21
 8004f46:	2102      	movs	r1, #2
 8004f48:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <HAL_DMA_Init+0x8c>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 f8b4 	bl	8005100 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2221      	movs	r2, #33	; 0x21
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	2100      	movs	r1, #0
 8004fac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}  
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b004      	add	sp, #16
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	ffffc00f 	.word	0xffffc00f

08004fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	2204      	movs	r2, #4
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	0013      	movs	r3, r2
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d024      	beq.n	800502e <HAL_DMA_IRQHandler+0x72>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d020      	beq.n	800502e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d107      	bne.n	8005008 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2104      	movs	r1, #4
 8005004:	438a      	bics	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	2104      	movs	r1, #4
 8005012:	4091      	lsls	r1, r2
 8005014:	000a      	movs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d100      	bne.n	8005022 <HAL_DMA_IRQHandler+0x66>
 8005020:	e06a      	b.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	0010      	movs	r0, r2
 800502a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800502c:	e064      	b.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2202      	movs	r2, #2
 8005034:	409a      	lsls	r2, r3
 8005036:	0013      	movs	r3, r2
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4013      	ands	r3, r2
 800503c:	d02b      	beq.n	8005096 <HAL_DMA_IRQHandler+0xda>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2202      	movs	r2, #2
 8005042:	4013      	ands	r3, r2
 8005044:	d027      	beq.n	8005096 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2220      	movs	r2, #32
 800504e:	4013      	ands	r3, r2
 8005050:	d10b      	bne.n	800506a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	210a      	movs	r1, #10
 800505e:	438a      	bics	r2, r1
 8005060:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2221      	movs	r2, #33	; 0x21
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	2102      	movs	r1, #2
 8005074:	4091      	lsls	r1, r2
 8005076:	000a      	movs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	2100      	movs	r1, #0
 8005080:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d036      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	0010      	movs	r0, r2
 8005092:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005094:	e030      	b.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2208      	movs	r2, #8
 800509c:	409a      	lsls	r2, r3
 800509e:	0013      	movs	r3, r2
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4013      	ands	r3, r2
 80050a4:	d028      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2208      	movs	r2, #8
 80050aa:	4013      	ands	r3, r2
 80050ac:	d024      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	210e      	movs	r1, #14
 80050ba:	438a      	bics	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2101      	movs	r1, #1
 80050c8:	4091      	lsls	r1, r2
 80050ca:	000a      	movs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2221      	movs	r2, #33	; 0x21
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	2100      	movs	r1, #0
 80050e2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	0010      	movs	r0, r2
 80050f4:	4798      	blx	r3
    }
   }
}  
 80050f6:	e7ff      	b.n	80050f8 <HAL_DMA_IRQHandler+0x13c>
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b004      	add	sp, #16
 80050fe:	bd80      	pop	{r7, pc}

08005100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	001a      	movs	r2, r3
 800510e:	4b14      	ldr	r3, [pc, #80]	; (8005160 <DMA_CalcBaseAndBitshift+0x60>)
 8005110:	429a      	cmp	r2, r3
 8005112:	d810      	bhi.n	8005136 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a12      	ldr	r2, [pc, #72]	; (8005164 <DMA_CalcBaseAndBitshift+0x64>)
 800511a:	4694      	mov	ip, r2
 800511c:	4463      	add	r3, ip
 800511e:	2114      	movs	r1, #20
 8005120:	0018      	movs	r0, r3
 8005122:	f7fa ffef 	bl	8000104 <__udivsi3>
 8005126:	0003      	movs	r3, r0
 8005128:	009a      	lsls	r2, r3, #2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <DMA_CalcBaseAndBitshift+0x68>)
 8005132:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005134:	e00f      	b.n	8005156 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a0c      	ldr	r2, [pc, #48]	; (800516c <DMA_CalcBaseAndBitshift+0x6c>)
 800513c:	4694      	mov	ip, r2
 800513e:	4463      	add	r3, ip
 8005140:	2114      	movs	r1, #20
 8005142:	0018      	movs	r0, r3
 8005144:	f7fa ffde 	bl	8000104 <__udivsi3>
 8005148:	0003      	movs	r3, r0
 800514a:	009a      	lsls	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a07      	ldr	r2, [pc, #28]	; (8005170 <DMA_CalcBaseAndBitshift+0x70>)
 8005154:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b002      	add	sp, #8
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	40020407 	.word	0x40020407
 8005164:	bffdfff8 	.word	0xbffdfff8
 8005168:	40020000 	.word	0x40020000
 800516c:	bffdfbf8 	.word	0xbffdfbf8
 8005170:	40020400 	.word	0x40020400

08005174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005182:	e155      	b.n	8005430 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2101      	movs	r1, #1
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4091      	lsls	r1, r2
 800518e:	000a      	movs	r2, r1
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d100      	bne.n	800519c <HAL_GPIO_Init+0x28>
 800519a:	e146      	b.n	800542a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2203      	movs	r2, #3
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d005      	beq.n	80051b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2203      	movs	r2, #3
 80051ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d130      	bne.n	8005216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2203      	movs	r2, #3
 80051c0:	409a      	lsls	r2, r3
 80051c2:	0013      	movs	r3, r2
 80051c4:	43da      	mvns	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4013      	ands	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	409a      	lsls	r2, r3
 80051d6:	0013      	movs	r3, r2
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051ea:	2201      	movs	r2, #1
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	409a      	lsls	r2, r3
 80051f0:	0013      	movs	r3, r2
 80051f2:	43da      	mvns	r2, r3
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4013      	ands	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	2201      	movs	r2, #1
 8005202:	401a      	ands	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	409a      	lsls	r2, r3
 8005208:	0013      	movs	r3, r2
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2203      	movs	r2, #3
 800521c:	4013      	ands	r3, r2
 800521e:	2b03      	cmp	r3, #3
 8005220:	d017      	beq.n	8005252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	2203      	movs	r2, #3
 800522e:	409a      	lsls	r2, r3
 8005230:	0013      	movs	r3, r2
 8005232:	43da      	mvns	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	409a      	lsls	r2, r3
 8005244:	0013      	movs	r3, r2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2203      	movs	r2, #3
 8005258:	4013      	ands	r3, r2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d123      	bne.n	80052a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3208      	adds	r2, #8
 8005266:	0092      	lsls	r2, r2, #2
 8005268:	58d3      	ldr	r3, [r2, r3]
 800526a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2207      	movs	r2, #7
 8005270:	4013      	ands	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	220f      	movs	r2, #15
 8005276:	409a      	lsls	r2, r3
 8005278:	0013      	movs	r3, r2
 800527a:	43da      	mvns	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4013      	ands	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2107      	movs	r1, #7
 800528a:	400b      	ands	r3, r1
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	409a      	lsls	r2, r3
 8005290:	0013      	movs	r3, r2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	08da      	lsrs	r2, r3, #3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3208      	adds	r2, #8
 80052a0:	0092      	lsls	r2, r2, #2
 80052a2:	6939      	ldr	r1, [r7, #16]
 80052a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	2203      	movs	r2, #3
 80052b2:	409a      	lsls	r2, r3
 80052b4:	0013      	movs	r3, r2
 80052b6:	43da      	mvns	r2, r3
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2203      	movs	r2, #3
 80052c4:	401a      	ands	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	409a      	lsls	r2, r3
 80052cc:	0013      	movs	r3, r2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	23c0      	movs	r3, #192	; 0xc0
 80052e0:	029b      	lsls	r3, r3, #10
 80052e2:	4013      	ands	r3, r2
 80052e4:	d100      	bne.n	80052e8 <HAL_GPIO_Init+0x174>
 80052e6:	e0a0      	b.n	800542a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e8:	4b57      	ldr	r3, [pc, #348]	; (8005448 <HAL_GPIO_Init+0x2d4>)
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	4b56      	ldr	r3, [pc, #344]	; (8005448 <HAL_GPIO_Init+0x2d4>)
 80052ee:	2101      	movs	r1, #1
 80052f0:	430a      	orrs	r2, r1
 80052f2:	619a      	str	r2, [r3, #24]
 80052f4:	4b54      	ldr	r3, [pc, #336]	; (8005448 <HAL_GPIO_Init+0x2d4>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2201      	movs	r2, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005300:	4a52      	ldr	r2, [pc, #328]	; (800544c <HAL_GPIO_Init+0x2d8>)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	3302      	adds	r3, #2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	589b      	ldr	r3, [r3, r2]
 800530c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2203      	movs	r2, #3
 8005312:	4013      	ands	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	220f      	movs	r2, #15
 8005318:	409a      	lsls	r2, r3
 800531a:	0013      	movs	r3, r2
 800531c:	43da      	mvns	r2, r3
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	2390      	movs	r3, #144	; 0x90
 8005328:	05db      	lsls	r3, r3, #23
 800532a:	429a      	cmp	r2, r3
 800532c:	d019      	beq.n	8005362 <HAL_GPIO_Init+0x1ee>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a47      	ldr	r2, [pc, #284]	; (8005450 <HAL_GPIO_Init+0x2dc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_GPIO_Init+0x1ea>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a46      	ldr	r2, [pc, #280]	; (8005454 <HAL_GPIO_Init+0x2e0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00d      	beq.n	800535a <HAL_GPIO_Init+0x1e6>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a45      	ldr	r2, [pc, #276]	; (8005458 <HAL_GPIO_Init+0x2e4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <HAL_GPIO_Init+0x1e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a44      	ldr	r2, [pc, #272]	; (800545c <HAL_GPIO_Init+0x2e8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <HAL_GPIO_Init+0x1de>
 800534e:	2304      	movs	r3, #4
 8005350:	e008      	b.n	8005364 <HAL_GPIO_Init+0x1f0>
 8005352:	2305      	movs	r3, #5
 8005354:	e006      	b.n	8005364 <HAL_GPIO_Init+0x1f0>
 8005356:	2303      	movs	r3, #3
 8005358:	e004      	b.n	8005364 <HAL_GPIO_Init+0x1f0>
 800535a:	2302      	movs	r3, #2
 800535c:	e002      	b.n	8005364 <HAL_GPIO_Init+0x1f0>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_GPIO_Init+0x1f0>
 8005362:	2300      	movs	r3, #0
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	2103      	movs	r1, #3
 8005368:	400a      	ands	r2, r1
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	4093      	lsls	r3, r2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005374:	4935      	ldr	r1, [pc, #212]	; (800544c <HAL_GPIO_Init+0x2d8>)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005382:	4b37      	ldr	r3, [pc, #220]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	43da      	mvns	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	025b      	lsls	r3, r3, #9
 800539a:	4013      	ands	r3, r2
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80053a6:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80053ac:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	43da      	mvns	r2, r3
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4013      	ands	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	4013      	ands	r3, r2
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053d0:	4b23      	ldr	r3, [pc, #140]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	43da      	mvns	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	035b      	lsls	r3, r3, #13
 80053ee:	4013      	ands	r3, r2
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053fa:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005400:	4b17      	ldr	r3, [pc, #92]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	43da      	mvns	r2, r3
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4013      	ands	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	039b      	lsls	r3, r3, #14
 8005418:	4013      	ands	r3, r2
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	3301      	adds	r3, #1
 800542e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	40da      	lsrs	r2, r3
 8005438:	1e13      	subs	r3, r2, #0
 800543a:	d000      	beq.n	800543e <HAL_GPIO_Init+0x2ca>
 800543c:	e6a2      	b.n	8005184 <HAL_GPIO_Init+0x10>
  } 
}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	b006      	add	sp, #24
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	40010000 	.word	0x40010000
 8005450:	48000400 	.word	0x48000400
 8005454:	48000800 	.word	0x48000800
 8005458:	48000c00 	.word	0x48000c00
 800545c:	48001000 	.word	0x48001000
 8005460:	40010400 	.word	0x40010400

08005464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	000a      	movs	r2, r1
 800546e:	1cbb      	adds	r3, r7, #2
 8005470:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	1cba      	adds	r2, r7, #2
 8005478:	8812      	ldrh	r2, [r2, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800547e:	230f      	movs	r3, #15
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e003      	b.n	8005490 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005488:	230f      	movs	r3, #15
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005490:	230f      	movs	r3, #15
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	781b      	ldrb	r3, [r3, #0]
  }
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b004      	add	sp, #16
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	0008      	movs	r0, r1
 80054a8:	0011      	movs	r1, r2
 80054aa:	1cbb      	adds	r3, r7, #2
 80054ac:	1c02      	adds	r2, r0, #0
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	1c7b      	adds	r3, r7, #1
 80054b2:	1c0a      	adds	r2, r1, #0
 80054b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054b6:	1c7b      	adds	r3, r7, #1
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054be:	1cbb      	adds	r3, r7, #2
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054c6:	e003      	b.n	80054d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054c8:	1cbb      	adds	r3, r7, #2
 80054ca:	881a      	ldrh	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b002      	add	sp, #8
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	0002      	movs	r2, r0
 80054e0:	1dbb      	adds	r3, r7, #6
 80054e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	1dba      	adds	r2, r7, #6
 80054ea:	8812      	ldrh	r2, [r2, #0]
 80054ec:	4013      	ands	r3, r2
 80054ee:	d008      	beq.n	8005502 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054f2:	1dba      	adds	r2, r7, #6
 80054f4:	8812      	ldrh	r2, [r2, #0]
 80054f6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054f8:	1dbb      	adds	r3, r7, #6
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fd fac7 	bl	8002a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	46bd      	mov	sp, r7
 8005506:	b002      	add	sp, #8
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	40010400 	.word	0x40010400

08005510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e082      	b.n	8005628 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2241      	movs	r2, #65	; 0x41
 8005526:	5c9b      	ldrb	r3, [r3, r2]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d107      	bne.n	800553e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	2100      	movs	r1, #0
 8005534:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	0018      	movs	r0, r3
 800553a:	f7fe fee5 	bl	8004308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2241      	movs	r2, #65	; 0x41
 8005542:	2124      	movs	r1, #36	; 0x24
 8005544:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	438a      	bics	r2, r1
 8005554:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4934      	ldr	r1, [pc, #208]	; (8005630 <HAL_I2C_Init+0x120>)
 8005560:	400a      	ands	r2, r1
 8005562:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4931      	ldr	r1, [pc, #196]	; (8005634 <HAL_I2C_Init+0x124>)
 8005570:	400a      	ands	r2, r1
 8005572:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d108      	bne.n	800558e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2180      	movs	r1, #128	; 0x80
 8005586:	0209      	lsls	r1, r1, #8
 8005588:	430a      	orrs	r2, r1
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	e007      	b.n	800559e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2184      	movs	r1, #132	; 0x84
 8005598:	0209      	lsls	r1, r1, #8
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d104      	bne.n	80055b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	0112      	lsls	r2, r2, #4
 80055ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	491f      	ldr	r1, [pc, #124]	; (8005638 <HAL_I2C_Init+0x128>)
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	491a      	ldr	r1, [pc, #104]	; (8005634 <HAL_I2C_Init+0x124>)
 80055cc:	400a      	ands	r2, r1
 80055ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	431a      	orrs	r2, r3
 80055da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69d9      	ldr	r1, [r3, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2101      	movs	r1, #1
 8005606:	430a      	orrs	r2, r1
 8005608:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2241      	movs	r2, #65	; 0x41
 8005614:	2120      	movs	r1, #32
 8005616:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2242      	movs	r2, #66	; 0x42
 8005622:	2100      	movs	r1, #0
 8005624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	0018      	movs	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	b002      	add	sp, #8
 800562e:	bd80      	pop	{r7, pc}
 8005630:	f0ffffff 	.word	0xf0ffffff
 8005634:	ffff7fff 	.word	0xffff7fff
 8005638:	02008000 	.word	0x02008000

0800563c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2241      	movs	r2, #65	; 0x41
 800564a:	5c9b      	ldrb	r3, [r3, r2]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b20      	cmp	r3, #32
 8005650:	d138      	bne.n	80056c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2240      	movs	r2, #64	; 0x40
 8005656:	5c9b      	ldrb	r3, [r3, r2]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800565c:	2302      	movs	r3, #2
 800565e:	e032      	b.n	80056c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2240      	movs	r2, #64	; 0x40
 8005664:	2101      	movs	r1, #1
 8005666:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2241      	movs	r2, #65	; 0x41
 800566c:	2124      	movs	r1, #36	; 0x24
 800566e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2101      	movs	r1, #1
 800567c:	438a      	bics	r2, r1
 800567e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4911      	ldr	r1, [pc, #68]	; (80056d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800568c:	400a      	ands	r2, r1
 800568e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6819      	ldr	r1, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2101      	movs	r1, #1
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2241      	movs	r2, #65	; 0x41
 80056b4:	2120      	movs	r1, #32
 80056b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2240      	movs	r2, #64	; 0x40
 80056bc:	2100      	movs	r1, #0
 80056be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e000      	b.n	80056c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
  }
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b002      	add	sp, #8
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	ffffefff 	.word	0xffffefff

080056d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2241      	movs	r2, #65	; 0x41
 80056e2:	5c9b      	ldrb	r3, [r3, r2]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d139      	bne.n	800575e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2240      	movs	r2, #64	; 0x40
 80056ee:	5c9b      	ldrb	r3, [r3, r2]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e033      	b.n	8005760 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	2101      	movs	r1, #1
 80056fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2241      	movs	r2, #65	; 0x41
 8005704:	2124      	movs	r1, #36	; 0x24
 8005706:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2101      	movs	r1, #1
 8005714:	438a      	bics	r2, r1
 8005716:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a11      	ldr	r2, [pc, #68]	; (8005768 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005724:	4013      	ands	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2101      	movs	r1, #1
 8005746:	430a      	orrs	r2, r1
 8005748:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2241      	movs	r2, #65	; 0x41
 800574e:	2120      	movs	r1, #32
 8005750:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2240      	movs	r2, #64	; 0x40
 8005756:	2100      	movs	r1, #0
 8005758:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	e000      	b.n	8005760 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800575e:	2302      	movs	r3, #2
  }
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b004      	add	sp, #16
 8005766:	bd80      	pop	{r7, pc}
 8005768:	fffff0ff 	.word	0xfffff0ff

0800576c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f000 fb76 	bl	8005e6c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2201      	movs	r2, #1
 8005786:	4013      	ands	r3, r2
 8005788:	d100      	bne.n	800578c <HAL_RCC_OscConfig+0x20>
 800578a:	e08e      	b.n	80058aa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800578c:	4bc5      	ldr	r3, [pc, #788]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	220c      	movs	r2, #12
 8005792:	4013      	ands	r3, r2
 8005794:	2b04      	cmp	r3, #4
 8005796:	d00e      	beq.n	80057b6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005798:	4bc2      	ldr	r3, [pc, #776]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	220c      	movs	r2, #12
 800579e:	4013      	ands	r3, r2
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d117      	bne.n	80057d4 <HAL_RCC_OscConfig+0x68>
 80057a4:	4bbf      	ldr	r3, [pc, #764]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	23c0      	movs	r3, #192	; 0xc0
 80057aa:	025b      	lsls	r3, r3, #9
 80057ac:	401a      	ands	r2, r3
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	025b      	lsls	r3, r3, #9
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d10e      	bne.n	80057d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b6:	4bbb      	ldr	r3, [pc, #748]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	029b      	lsls	r3, r3, #10
 80057be:	4013      	ands	r3, r2
 80057c0:	d100      	bne.n	80057c4 <HAL_RCC_OscConfig+0x58>
 80057c2:	e071      	b.n	80058a8 <HAL_RCC_OscConfig+0x13c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d000      	beq.n	80057ce <HAL_RCC_OscConfig+0x62>
 80057cc:	e06c      	b.n	80058a8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f000 fb4c 	bl	8005e6c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_RCC_OscConfig+0x80>
 80057dc:	4bb1      	ldr	r3, [pc, #708]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4bb0      	ldr	r3, [pc, #704]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	0249      	lsls	r1, r1, #9
 80057e6:	430a      	orrs	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e02f      	b.n	800584c <HAL_RCC_OscConfig+0xe0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10c      	bne.n	800580e <HAL_RCC_OscConfig+0xa2>
 80057f4:	4bab      	ldr	r3, [pc, #684]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4baa      	ldr	r3, [pc, #680]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80057fa:	49ab      	ldr	r1, [pc, #684]	; (8005aa8 <HAL_RCC_OscConfig+0x33c>)
 80057fc:	400a      	ands	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	4ba8      	ldr	r3, [pc, #672]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4ba7      	ldr	r3, [pc, #668]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005806:	49a9      	ldr	r1, [pc, #676]	; (8005aac <HAL_RCC_OscConfig+0x340>)
 8005808:	400a      	ands	r2, r1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e01e      	b.n	800584c <HAL_RCC_OscConfig+0xe0>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b05      	cmp	r3, #5
 8005814:	d10e      	bne.n	8005834 <HAL_RCC_OscConfig+0xc8>
 8005816:	4ba3      	ldr	r3, [pc, #652]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4ba2      	ldr	r3, [pc, #648]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	02c9      	lsls	r1, r1, #11
 8005820:	430a      	orrs	r2, r1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	4b9f      	ldr	r3, [pc, #636]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b9e      	ldr	r3, [pc, #632]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	0249      	lsls	r1, r1, #9
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e00b      	b.n	800584c <HAL_RCC_OscConfig+0xe0>
 8005834:	4b9b      	ldr	r3, [pc, #620]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b9a      	ldr	r3, [pc, #616]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800583a:	499b      	ldr	r1, [pc, #620]	; (8005aa8 <HAL_RCC_OscConfig+0x33c>)
 800583c:	400a      	ands	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	4b98      	ldr	r3, [pc, #608]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b97      	ldr	r3, [pc, #604]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005846:	4999      	ldr	r1, [pc, #612]	; (8005aac <HAL_RCC_OscConfig+0x340>)
 8005848:	400a      	ands	r2, r1
 800584a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d014      	beq.n	800587e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005854:	f7fe ff12 	bl	800467c <HAL_GetTick>
 8005858:	0003      	movs	r3, r0
 800585a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800585e:	f7fe ff0d 	bl	800467c <HAL_GetTick>
 8005862:	0002      	movs	r2, r0
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e2fd      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005870:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	2380      	movs	r3, #128	; 0x80
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	4013      	ands	r3, r2
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0xf2>
 800587c:	e015      	b.n	80058aa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587e:	f7fe fefd 	bl	800467c <HAL_GetTick>
 8005882:	0003      	movs	r3, r0
 8005884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005888:	f7fe fef8 	bl	800467c <HAL_GetTick>
 800588c:	0002      	movs	r2, r0
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e2e8      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589a:	4b82      	ldr	r3, [pc, #520]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	2380      	movs	r3, #128	; 0x80
 80058a0:	029b      	lsls	r3, r3, #10
 80058a2:	4013      	ands	r3, r2
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0x11c>
 80058a6:	e000      	b.n	80058aa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2202      	movs	r2, #2
 80058b0:	4013      	ands	r3, r2
 80058b2:	d100      	bne.n	80058b6 <HAL_RCC_OscConfig+0x14a>
 80058b4:	e06c      	b.n	8005990 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80058b6:	4b7b      	ldr	r3, [pc, #492]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	220c      	movs	r2, #12
 80058bc:	4013      	ands	r3, r2
 80058be:	d00e      	beq.n	80058de <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058c0:	4b78      	ldr	r3, [pc, #480]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	220c      	movs	r2, #12
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d11f      	bne.n	800590c <HAL_RCC_OscConfig+0x1a0>
 80058cc:	4b75      	ldr	r3, [pc, #468]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	23c0      	movs	r3, #192	; 0xc0
 80058d2:	025b      	lsls	r3, r3, #9
 80058d4:	401a      	ands	r2, r3
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	429a      	cmp	r2, r3
 80058dc:	d116      	bne.n	800590c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058de:	4b71      	ldr	r3, [pc, #452]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2202      	movs	r2, #2
 80058e4:	4013      	ands	r3, r2
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_OscConfig+0x188>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e2bb      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f4:	4b6b      	ldr	r3, [pc, #428]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	22f8      	movs	r2, #248	; 0xf8
 80058fa:	4393      	bics	r3, r2
 80058fc:	0019      	movs	r1, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	00da      	lsls	r2, r3, #3
 8005904:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005906:	430a      	orrs	r2, r1
 8005908:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800590a:	e041      	b.n	8005990 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d024      	beq.n	800595e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005914:	4b63      	ldr	r3, [pc, #396]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b62      	ldr	r3, [pc, #392]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800591a:	2101      	movs	r1, #1
 800591c:	430a      	orrs	r2, r1
 800591e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7fe feac 	bl	800467c <HAL_GetTick>
 8005924:	0003      	movs	r3, r0
 8005926:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592a:	f7fe fea7 	bl	800467c <HAL_GetTick>
 800592e:	0002      	movs	r2, r0
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e297      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593c:	4b59      	ldr	r3, [pc, #356]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2202      	movs	r2, #2
 8005942:	4013      	ands	r3, r2
 8005944:	d0f1      	beq.n	800592a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005946:	4b57      	ldr	r3, [pc, #348]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	22f8      	movs	r2, #248	; 0xf8
 800594c:	4393      	bics	r3, r2
 800594e:	0019      	movs	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	00da      	lsls	r2, r3, #3
 8005956:	4b53      	ldr	r3, [pc, #332]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	e018      	b.n	8005990 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800595e:	4b51      	ldr	r3, [pc, #324]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b50      	ldr	r3, [pc, #320]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005964:	2101      	movs	r1, #1
 8005966:	438a      	bics	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596a:	f7fe fe87 	bl	800467c <HAL_GetTick>
 800596e:	0003      	movs	r3, r0
 8005970:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005974:	f7fe fe82 	bl	800467c <HAL_GetTick>
 8005978:	0002      	movs	r2, r0
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e272      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005986:	4b47      	ldr	r3, [pc, #284]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2202      	movs	r2, #2
 800598c:	4013      	ands	r3, r2
 800598e:	d1f1      	bne.n	8005974 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2208      	movs	r2, #8
 8005996:	4013      	ands	r3, r2
 8005998:	d036      	beq.n	8005a08 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d019      	beq.n	80059d6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a2:	4b40      	ldr	r3, [pc, #256]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80059a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a6:	4b3f      	ldr	r3, [pc, #252]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80059a8:	2101      	movs	r1, #1
 80059aa:	430a      	orrs	r2, r1
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ae:	f7fe fe65 	bl	800467c <HAL_GetTick>
 80059b2:	0003      	movs	r3, r0
 80059b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b8:	f7fe fe60 	bl	800467c <HAL_GetTick>
 80059bc:	0002      	movs	r2, r0
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e250      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ca:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2202      	movs	r2, #2
 80059d0:	4013      	ands	r3, r2
 80059d2:	d0f1      	beq.n	80059b8 <HAL_RCC_OscConfig+0x24c>
 80059d4:	e018      	b.n	8005a08 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d6:	4b33      	ldr	r3, [pc, #204]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80059d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059da:	4b32      	ldr	r3, [pc, #200]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 80059dc:	2101      	movs	r1, #1
 80059de:	438a      	bics	r2, r1
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e2:	f7fe fe4b 	bl	800467c <HAL_GetTick>
 80059e6:	0003      	movs	r3, r0
 80059e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fe fe46 	bl	800467c <HAL_GetTick>
 80059f0:	0002      	movs	r2, r0
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e236      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059fe:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	2202      	movs	r2, #2
 8005a04:	4013      	ands	r3, r2
 8005a06:	d1f1      	bne.n	80059ec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d100      	bne.n	8005a14 <HAL_RCC_OscConfig+0x2a8>
 8005a12:	e0b5      	b.n	8005b80 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a14:	201f      	movs	r0, #31
 8005a16:	183b      	adds	r3, r7, r0
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a1c:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	055b      	lsls	r3, r3, #21
 8005a24:	4013      	ands	r3, r2
 8005a26:	d110      	bne.n	8005a4a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a28:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005a2e:	2180      	movs	r1, #128	; 0x80
 8005a30:	0549      	lsls	r1, r1, #21
 8005a32:	430a      	orrs	r2, r1
 8005a34:	61da      	str	r2, [r3, #28]
 8005a36:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	2380      	movs	r3, #128	; 0x80
 8005a3c:	055b      	lsls	r3, r3, #21
 8005a3e:	4013      	ands	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a44:	183b      	adds	r3, r7, r0
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4a:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <HAL_RCC_OscConfig+0x344>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4013      	ands	r3, r2
 8005a54:	d11a      	bne.n	8005a8c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a56:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <HAL_RCC_OscConfig+0x344>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <HAL_RCC_OscConfig+0x344>)
 8005a5c:	2180      	movs	r1, #128	; 0x80
 8005a5e:	0049      	lsls	r1, r1, #1
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a64:	f7fe fe0a 	bl	800467c <HAL_GetTick>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6e:	f7fe fe05 	bl	800467c <HAL_GetTick>
 8005a72:	0002      	movs	r2, r0
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b64      	cmp	r3, #100	; 0x64
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e1f5      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCC_OscConfig+0x344>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10f      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x348>
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	4b02      	ldr	r3, [pc, #8]	; (8005aa4 <HAL_RCC_OscConfig+0x338>)
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	621a      	str	r2, [r3, #32]
 8005aa0:	e036      	b.n	8005b10 <HAL_RCC_OscConfig+0x3a4>
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	fffeffff 	.word	0xfffeffff
 8005aac:	fffbffff 	.word	0xfffbffff
 8005ab0:	40007000 	.word	0x40007000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10c      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x36a>
 8005abc:	4bca      	ldr	r3, [pc, #808]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	4bc9      	ldr	r3, [pc, #804]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	438a      	bics	r2, r1
 8005ac6:	621a      	str	r2, [r3, #32]
 8005ac8:	4bc7      	ldr	r3, [pc, #796]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	4bc6      	ldr	r3, [pc, #792]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ace:	2104      	movs	r1, #4
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	621a      	str	r2, [r3, #32]
 8005ad4:	e01c      	b.n	8005b10 <HAL_RCC_OscConfig+0x3a4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x38c>
 8005ade:	4bc2      	ldr	r3, [pc, #776]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ae0:	6a1a      	ldr	r2, [r3, #32]
 8005ae2:	4bc1      	ldr	r3, [pc, #772]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ae4:	2104      	movs	r1, #4
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	621a      	str	r2, [r3, #32]
 8005aea:	4bbf      	ldr	r3, [pc, #764]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	4bbe      	ldr	r3, [pc, #760]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005af0:	2101      	movs	r1, #1
 8005af2:	430a      	orrs	r2, r1
 8005af4:	621a      	str	r2, [r3, #32]
 8005af6:	e00b      	b.n	8005b10 <HAL_RCC_OscConfig+0x3a4>
 8005af8:	4bbb      	ldr	r3, [pc, #748]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	4bba      	ldr	r3, [pc, #744]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005afe:	2101      	movs	r1, #1
 8005b00:	438a      	bics	r2, r1
 8005b02:	621a      	str	r2, [r3, #32]
 8005b04:	4bb8      	ldr	r3, [pc, #736]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	4bb7      	ldr	r3, [pc, #732]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d014      	beq.n	8005b42 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b18:	f7fe fdb0 	bl	800467c <HAL_GetTick>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b20:	e009      	b.n	8005b36 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fe fdab 	bl	800467c <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	4aaf      	ldr	r2, [pc, #700]	; (8005dec <HAL_RCC_OscConfig+0x680>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e19a      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b36:	4bac      	ldr	r3, [pc, #688]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x3b6>
 8005b40:	e013      	b.n	8005b6a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b42:	f7fe fd9b 	bl	800467c <HAL_GetTick>
 8005b46:	0003      	movs	r3, r0
 8005b48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4a:	e009      	b.n	8005b60 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f7fe fd96 	bl	800467c <HAL_GetTick>
 8005b50:	0002      	movs	r2, r0
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	4aa5      	ldr	r2, [pc, #660]	; (8005dec <HAL_RCC_OscConfig+0x680>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e185      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b60:	4ba1      	ldr	r3, [pc, #644]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	2202      	movs	r2, #2
 8005b66:	4013      	ands	r3, r2
 8005b68:	d1f0      	bne.n	8005b4c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b6a:	231f      	movs	r3, #31
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b9c      	ldr	r3, [pc, #624]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	4b9b      	ldr	r3, [pc, #620]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b7a:	499d      	ldr	r1, [pc, #628]	; (8005df0 <HAL_RCC_OscConfig+0x684>)
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2210      	movs	r2, #16
 8005b86:	4013      	ands	r3, r2
 8005b88:	d063      	beq.n	8005c52 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d12a      	bne.n	8005be8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b92:	4b95      	ldr	r3, [pc, #596]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b96:	4b94      	ldr	r3, [pc, #592]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005b98:	2104      	movs	r1, #4
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005b9e:	4b92      	ldr	r3, [pc, #584]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba2:	4b91      	ldr	r3, [pc, #580]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005baa:	f7fe fd67 	bl	800467c <HAL_GetTick>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005bb4:	f7fe fd62 	bl	800467c <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e152      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005bc6:	4b88      	ldr	r3, [pc, #544]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d0f1      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005bd0:	4b85      	ldr	r3, [pc, #532]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	22f8      	movs	r2, #248	; 0xf8
 8005bd6:	4393      	bics	r3, r2
 8005bd8:	0019      	movs	r1, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	00da      	lsls	r2, r3, #3
 8005be0:	4b81      	ldr	r3, [pc, #516]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005be2:	430a      	orrs	r2, r1
 8005be4:	635a      	str	r2, [r3, #52]	; 0x34
 8005be6:	e034      	b.n	8005c52 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	3305      	adds	r3, #5
 8005bee:	d111      	bne.n	8005c14 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005bf0:	4b7d      	ldr	r3, [pc, #500]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf4:	4b7c      	ldr	r3, [pc, #496]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005bf6:	2104      	movs	r1, #4
 8005bf8:	438a      	bics	r2, r1
 8005bfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005bfc:	4b7a      	ldr	r3, [pc, #488]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	22f8      	movs	r2, #248	; 0xf8
 8005c02:	4393      	bics	r3, r2
 8005c04:	0019      	movs	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	00da      	lsls	r2, r3, #3
 8005c0c:	4b76      	ldr	r3, [pc, #472]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	635a      	str	r2, [r3, #52]	; 0x34
 8005c12:	e01e      	b.n	8005c52 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005c14:	4b74      	ldr	r3, [pc, #464]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c18:	4b73      	ldr	r3, [pc, #460]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005c20:	4b71      	ldr	r3, [pc, #452]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c24:	4b70      	ldr	r3, [pc, #448]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c26:	2101      	movs	r1, #1
 8005c28:	438a      	bics	r2, r1
 8005c2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2c:	f7fe fd26 	bl	800467c <HAL_GetTick>
 8005c30:	0003      	movs	r3, r0
 8005c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005c36:	f7fe fd21 	bl	800467c <HAL_GetTick>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e111      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005c48:	4b67      	ldr	r3, [pc, #412]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d1f1      	bne.n	8005c36 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2220      	movs	r2, #32
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d05c      	beq.n	8005d16 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005c5c:	4b62      	ldr	r3, [pc, #392]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	220c      	movs	r2, #12
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d00e      	beq.n	8005c86 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c68:	4b5f      	ldr	r3, [pc, #380]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	220c      	movs	r2, #12
 8005c6e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d114      	bne.n	8005c9e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c74:	4b5c      	ldr	r3, [pc, #368]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	23c0      	movs	r3, #192	; 0xc0
 8005c7a:	025b      	lsls	r3, r3, #9
 8005c7c:	401a      	ands	r2, r3
 8005c7e:	23c0      	movs	r3, #192	; 0xc0
 8005c80:	025b      	lsls	r3, r3, #9
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d10b      	bne.n	8005c9e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005c86:	4b58      	ldr	r3, [pc, #352]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	025b      	lsls	r3, r3, #9
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d040      	beq.n	8005d14 <HAL_RCC_OscConfig+0x5a8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d03c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e0e6      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01b      	beq.n	8005cde <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005ca6:	4b50      	ldr	r3, [pc, #320]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005caa:	4b4f      	ldr	r3, [pc, #316]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005cac:	2180      	movs	r1, #128	; 0x80
 8005cae:	0249      	lsls	r1, r1, #9
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb4:	f7fe fce2 	bl	800467c <HAL_GetTick>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cbe:	f7fe fcdd 	bl	800467c <HAL_GetTick>
 8005cc2:	0002      	movs	r2, r0
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e0cd      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005cd0:	4b45      	ldr	r3, [pc, #276]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	025b      	lsls	r3, r3, #9
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d0f0      	beq.n	8005cbe <HAL_RCC_OscConfig+0x552>
 8005cdc:	e01b      	b.n	8005d16 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005cde:	4b42      	ldr	r3, [pc, #264]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce2:	4b41      	ldr	r3, [pc, #260]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005ce4:	4943      	ldr	r1, [pc, #268]	; (8005df4 <HAL_RCC_OscConfig+0x688>)
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cea:	f7fe fcc7 	bl	800467c <HAL_GetTick>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cf4:	f7fe fcc2 	bl	800467c <HAL_GetTick>
 8005cf8:	0002      	movs	r2, r0
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0b2      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005d06:	4b38      	ldr	r3, [pc, #224]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	025b      	lsls	r3, r3, #9
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x588>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005d14:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d100      	bne.n	8005d20 <HAL_RCC_OscConfig+0x5b4>
 8005d1e:	e0a4      	b.n	8005e6a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d20:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	220c      	movs	r2, #12
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d100      	bne.n	8005d2e <HAL_RCC_OscConfig+0x5c2>
 8005d2c:	e078      	b.n	8005e20 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d14c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d36:	4b2c      	ldr	r3, [pc, #176]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b2b      	ldr	r3, [pc, #172]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d3c:	492e      	ldr	r1, [pc, #184]	; (8005df8 <HAL_RCC_OscConfig+0x68c>)
 8005d3e:	400a      	ands	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fe fc9b 	bl	800467c <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fe fc96 	bl	800467c <HAL_GetTick>
 8005d50:	0002      	movs	r2, r0
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e086      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d5e:	4b22      	ldr	r3, [pc, #136]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	049b      	lsls	r3, r3, #18
 8005d66:	4013      	ands	r3, r2
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d6a:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	220f      	movs	r2, #15
 8005d70:	4393      	bics	r3, r2
 8005d72:	0019      	movs	r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d78:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	4a1e      	ldr	r2, [pc, #120]	; (8005dfc <HAL_RCC_OscConfig+0x690>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	0019      	movs	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	431a      	orrs	r2, r3
 8005d92:	4b15      	ldr	r3, [pc, #84]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d98:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	0449      	lsls	r1, r1, #17
 8005da2:	430a      	orrs	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da6:	f7fe fc69 	bl	800467c <HAL_GetTick>
 8005daa:	0003      	movs	r3, r0
 8005dac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db0:	f7fe fc64 	bl	800467c <HAL_GetTick>
 8005db4:	0002      	movs	r2, r0
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e054      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	049b      	lsls	r3, r3, #18
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x644>
 8005dce:	e04c      	b.n	8005e6a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <HAL_RCC_OscConfig+0x67c>)
 8005dd6:	4908      	ldr	r1, [pc, #32]	; (8005df8 <HAL_RCC_OscConfig+0x68c>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fe fc4e 	bl	800467c <HAL_GetTick>
 8005de0:	0003      	movs	r3, r0
 8005de2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de4:	e015      	b.n	8005e12 <HAL_RCC_OscConfig+0x6a6>
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	40021000 	.word	0x40021000
 8005dec:	00001388 	.word	0x00001388
 8005df0:	efffffff 	.word	0xefffffff
 8005df4:	fffeffff 	.word	0xfffeffff
 8005df8:	feffffff 	.word	0xfeffffff
 8005dfc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fe fc3c 	bl	800467c <HAL_GetTick>
 8005e04:	0002      	movs	r2, r0
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e02c      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <HAL_RCC_OscConfig+0x708>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	049b      	lsls	r3, r3, #18
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0x694>
 8005e1e:	e024      	b.n	8005e6a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e01f      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005e2c:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <HAL_RCC_OscConfig+0x708>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <HAL_RCC_OscConfig+0x708>)
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	23c0      	movs	r3, #192	; 0xc0
 8005e3c:	025b      	lsls	r3, r3, #9
 8005e3e:	401a      	ands	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d10e      	bne.n	8005e66 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	220f      	movs	r2, #15
 8005e4c:	401a      	ands	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d107      	bne.n	8005e66 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	23f0      	movs	r3, #240	; 0xf0
 8005e5a:	039b      	lsls	r3, r3, #14
 8005e5c:	401a      	ands	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d001      	beq.n	8005e6a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b008      	add	sp, #32
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000

08005e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0bf      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e8c:	4b61      	ldr	r3, [pc, #388]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2201      	movs	r2, #1
 8005e92:	4013      	ands	r3, r2
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d911      	bls.n	8005ebe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9a:	4b5e      	ldr	r3, [pc, #376]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4393      	bics	r3, r2
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	4b5b      	ldr	r3, [pc, #364]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eac:	4b59      	ldr	r3, [pc, #356]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d001      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e0a6      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d015      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d006      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ed2:	4b51      	ldr	r3, [pc, #324]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	4b50      	ldr	r3, [pc, #320]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005ed8:	21e0      	movs	r1, #224	; 0xe0
 8005eda:	00c9      	lsls	r1, r1, #3
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee0:	4b4d      	ldr	r3, [pc, #308]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	22f0      	movs	r2, #240	; 0xf0
 8005ee6:	4393      	bics	r3, r2
 8005ee8:	0019      	movs	r1, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	4b4a      	ldr	r3, [pc, #296]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	d04c      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d107      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f06:	4b44      	ldr	r3, [pc, #272]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d120      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e07a      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1e:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	2380      	movs	r3, #128	; 0x80
 8005f24:	049b      	lsls	r3, r3, #18
 8005f26:	4013      	ands	r3, r2
 8005f28:	d114      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e06e      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d107      	bne.n	8005f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005f36:	4b38      	ldr	r3, [pc, #224]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	025b      	lsls	r3, r3, #9
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d108      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e062      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f46:	4b34      	ldr	r3, [pc, #208]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e05b      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f54:	4b30      	ldr	r3, [pc, #192]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2203      	movs	r2, #3
 8005f5a:	4393      	bics	r3, r2
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f68:	f7fe fb88 	bl	800467c <HAL_GetTick>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f70:	e009      	b.n	8005f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f72:	f7fe fb83 	bl	800467c <HAL_GetTick>
 8005f76:	0002      	movs	r2, r0
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <HAL_RCC_ClockConfig+0x1a4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e042      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	220c      	movs	r2, #12
 8005f8c:	401a      	ands	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d1ec      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d211      	bcs.n	8005fca <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa6:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2201      	movs	r2, #1
 8005fac:	4393      	bics	r3, r2
 8005fae:	0019      	movs	r1, r3
 8005fb0:	4b18      	ldr	r3, [pc, #96]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb8:	4b16      	ldr	r3, [pc, #88]	; (8006014 <HAL_RCC_ClockConfig+0x19c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e020      	b.n	800600c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2204      	movs	r2, #4
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a11      	ldr	r2, [pc, #68]	; (8006020 <HAL_RCC_ClockConfig+0x1a8>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	0019      	movs	r1, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005fe8:	f000 f820 	bl	800602c <HAL_RCC_GetSysClockFreq>
 8005fec:	0001      	movs	r1, r0
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <HAL_RCC_ClockConfig+0x1a0>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	220f      	movs	r2, #15
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <HAL_RCC_ClockConfig+0x1ac>)
 8005ffa:	5cd3      	ldrb	r3, [r2, r3]
 8005ffc:	000a      	movs	r2, r1
 8005ffe:	40da      	lsrs	r2, r3
 8006000:	4b09      	ldr	r3, [pc, #36]	; (8006028 <HAL_RCC_ClockConfig+0x1b0>)
 8006002:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006004:	2003      	movs	r0, #3
 8006006:	f7fe faf3 	bl	80045f0 <HAL_InitTick>
  
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b004      	add	sp, #16
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40022000 	.word	0x40022000
 8006018:	40021000 	.word	0x40021000
 800601c:	00001388 	.word	0x00001388
 8006020:	fffff8ff 	.word	0xfffff8ff
 8006024:	08007ab0 	.word	0x08007ab0
 8006028:	2000007c 	.word	0x2000007c

0800602c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b08f      	sub	sp, #60	; 0x3c
 8006030:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006032:	2314      	movs	r3, #20
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	4a38      	ldr	r2, [pc, #224]	; (8006118 <HAL_RCC_GetSysClockFreq+0xec>)
 8006038:	ca13      	ldmia	r2!, {r0, r1, r4}
 800603a:	c313      	stmia	r3!, {r0, r1, r4}
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006040:	1d3b      	adds	r3, r7, #4
 8006042:	4a36      	ldr	r2, [pc, #216]	; (800611c <HAL_RCC_GetSysClockFreq+0xf0>)
 8006044:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006046:	c313      	stmia	r3!, {r0, r1, r4}
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006050:	2300      	movs	r3, #0
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
 8006054:	2300      	movs	r3, #0
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
 8006058:	2300      	movs	r3, #0
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006060:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	220c      	movs	r2, #12
 800606a:	4013      	ands	r3, r2
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d047      	beq.n	8006100 <HAL_RCC_GetSysClockFreq+0xd4>
 8006070:	d849      	bhi.n	8006106 <HAL_RCC_GetSysClockFreq+0xda>
 8006072:	2b04      	cmp	r3, #4
 8006074:	d002      	beq.n	800607c <HAL_RCC_GetSysClockFreq+0x50>
 8006076:	2b08      	cmp	r3, #8
 8006078:	d003      	beq.n	8006082 <HAL_RCC_GetSysClockFreq+0x56>
 800607a:	e044      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800607c:	4b29      	ldr	r3, [pc, #164]	; (8006124 <HAL_RCC_GetSysClockFreq+0xf8>)
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006080:	e044      	b.n	800610c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	0c9b      	lsrs	r3, r3, #18
 8006086:	220f      	movs	r2, #15
 8006088:	4013      	ands	r3, r2
 800608a:	2214      	movs	r2, #20
 800608c:	18ba      	adds	r2, r7, r2
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006092:	4b23      	ldr	r3, [pc, #140]	; (8006120 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	220f      	movs	r2, #15
 8006098:	4013      	ands	r3, r2
 800609a:	1d3a      	adds	r2, r7, #4
 800609c:	5cd3      	ldrb	r3, [r2, r3]
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80060a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a2:	23c0      	movs	r3, #192	; 0xc0
 80060a4:	025b      	lsls	r3, r3, #9
 80060a6:	401a      	ands	r2, r3
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	025b      	lsls	r3, r3, #9
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d109      	bne.n	80060c4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80060b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b2:	481c      	ldr	r0, [pc, #112]	; (8006124 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060b4:	f7fa f826 	bl	8000104 <__udivsi3>
 80060b8:	0003      	movs	r3, r0
 80060ba:	001a      	movs	r2, r3
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	4353      	muls	r3, r2
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
 80060c2:	e01a      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80060c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c6:	23c0      	movs	r3, #192	; 0xc0
 80060c8:	025b      	lsls	r3, r3, #9
 80060ca:	401a      	ands	r2, r3
 80060cc:	23c0      	movs	r3, #192	; 0xc0
 80060ce:	025b      	lsls	r3, r3, #9
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d109      	bne.n	80060e8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80060d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060d6:	4814      	ldr	r0, [pc, #80]	; (8006128 <HAL_RCC_GetSysClockFreq+0xfc>)
 80060d8:	f7fa f814 	bl	8000104 <__udivsi3>
 80060dc:	0003      	movs	r3, r0
 80060de:	001a      	movs	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	4353      	muls	r3, r2
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
 80060e6:	e008      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80060e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ea:	480e      	ldr	r0, [pc, #56]	; (8006124 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060ec:	f7fa f80a 	bl	8000104 <__udivsi3>
 80060f0:	0003      	movs	r3, r0
 80060f2:	001a      	movs	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	4353      	muls	r3, r2
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060fe:	e005      	b.n	800610c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006100:	4b09      	ldr	r3, [pc, #36]	; (8006128 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006104:	e002      	b.n	800610c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006108:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800610a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800610e:	0018      	movs	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	b00f      	add	sp, #60	; 0x3c
 8006114:	bd90      	pop	{r4, r7, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	08006fac 	.word	0x08006fac
 800611c:	08006fbc 	.word	0x08006fbc
 8006120:	40021000 	.word	0x40021000
 8006124:	007a1200 	.word	0x007a1200
 8006128:	02dc6c00 	.word	0x02dc6c00

0800612c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e0a8      	b.n	8006290 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	2382      	movs	r3, #130	; 0x82
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	429a      	cmp	r2, r3
 8006150:	d009      	beq.n	8006166 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	61da      	str	r2, [r3, #28]
 8006158:	e005      	b.n	8006166 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	225d      	movs	r2, #93	; 0x5d
 8006170:	5c9b      	ldrb	r3, [r3, r2]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d107      	bne.n	8006188 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	225c      	movs	r2, #92	; 0x5c
 800617c:	2100      	movs	r1, #0
 800617e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	0018      	movs	r0, r3
 8006184:	f7fe f90e 	bl	80043a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	225d      	movs	r2, #93	; 0x5d
 800618c:	2102      	movs	r1, #2
 800618e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2140      	movs	r1, #64	; 0x40
 800619c:	438a      	bics	r2, r1
 800619e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	23e0      	movs	r3, #224	; 0xe0
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d902      	bls.n	80061b2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e002      	b.n	80061b8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	015b      	lsls	r3, r3, #5
 80061b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	23f0      	movs	r3, #240	; 0xf0
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d008      	beq.n	80061d6 <HAL_SPI_Init+0xaa>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	23e0      	movs	r3, #224	; 0xe0
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d002      	beq.n	80061d6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	2382      	movs	r3, #130	; 0x82
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	401a      	ands	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6899      	ldr	r1, [r3, #8]
 80061e4:	2384      	movs	r3, #132	; 0x84
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	400b      	ands	r3, r1
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2102      	movs	r1, #2
 80061f2:	400b      	ands	r3, r1
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	2101      	movs	r1, #1
 80061fc:	400b      	ands	r3, r1
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6999      	ldr	r1, [r3, #24]
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	400b      	ands	r3, r1
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	2138      	movs	r1, #56	; 0x38
 8006212:	400b      	ands	r3, r1
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	400b      	ands	r3, r1
 800621e:	431a      	orrs	r2, r3
 8006220:	0011      	movs	r1, r2
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	019b      	lsls	r3, r3, #6
 800622a:	401a      	ands	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	0c1b      	lsrs	r3, r3, #16
 800623a:	2204      	movs	r2, #4
 800623c:	401a      	ands	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2110      	movs	r1, #16
 8006244:	400b      	ands	r3, r1
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	2108      	movs	r1, #8
 800624e:	400b      	ands	r3, r1
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68d9      	ldr	r1, [r3, #12]
 8006256:	23f0      	movs	r3, #240	; 0xf0
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	400b      	ands	r3, r1
 800625c:	431a      	orrs	r2, r3
 800625e:	0011      	movs	r1, r2
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	015b      	lsls	r3, r3, #5
 8006266:	401a      	ands	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4907      	ldr	r1, [pc, #28]	; (8006298 <HAL_SPI_Init+0x16c>)
 800627c:	400a      	ands	r2, r1
 800627e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	225d      	movs	r2, #93	; 0x5d
 800628a:	2101      	movs	r1, #1
 800628c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	0018      	movs	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	b004      	add	sp, #16
 8006296:	bd80      	pop	{r7, pc}
 8006298:	fffff7ff 	.word	0xfffff7ff

0800629c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e042      	b.n	8006334 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	223d      	movs	r2, #61	; 0x3d
 80062b2:	5c9b      	ldrb	r3, [r3, r2]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	223c      	movs	r2, #60	; 0x3c
 80062be:	2100      	movs	r1, #0
 80062c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7fe f8b9 	bl	800443c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	223d      	movs	r2, #61	; 0x3d
 80062ce:	2102      	movs	r1, #2
 80062d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	0019      	movs	r1, r3
 80062dc:	0010      	movs	r0, r2
 80062de:	f000 fa27 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2246      	movs	r2, #70	; 0x46
 80062e6:	2101      	movs	r1, #1
 80062e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	223e      	movs	r2, #62	; 0x3e
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	223f      	movs	r2, #63	; 0x3f
 80062f6:	2101      	movs	r1, #1
 80062f8:	5499      	strb	r1, [r3, r2]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2240      	movs	r2, #64	; 0x40
 80062fe:	2101      	movs	r1, #1
 8006300:	5499      	strb	r1, [r3, r2]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2241      	movs	r2, #65	; 0x41
 8006306:	2101      	movs	r1, #1
 8006308:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2242      	movs	r2, #66	; 0x42
 800630e:	2101      	movs	r1, #1
 8006310:	5499      	strb	r1, [r3, r2]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2243      	movs	r2, #67	; 0x43
 8006316:	2101      	movs	r1, #1
 8006318:	5499      	strb	r1, [r3, r2]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2244      	movs	r2, #68	; 0x44
 800631e:	2101      	movs	r1, #1
 8006320:	5499      	strb	r1, [r3, r2]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2245      	movs	r2, #69	; 0x45
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	223d      	movs	r2, #61	; 0x3d
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d108      	bne.n	800635e <HAL_TIM_PWM_Start+0x22>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	223e      	movs	r2, #62	; 0x3e
 8006350:	5c9b      	ldrb	r3, [r3, r2]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	1e5a      	subs	r2, r3, #1
 8006358:	4193      	sbcs	r3, r2
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e01f      	b.n	800639e <HAL_TIM_PWM_Start+0x62>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d108      	bne.n	8006376 <HAL_TIM_PWM_Start+0x3a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	223f      	movs	r2, #63	; 0x3f
 8006368:	5c9b      	ldrb	r3, [r3, r2]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	1e5a      	subs	r2, r3, #1
 8006370:	4193      	sbcs	r3, r2
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e013      	b.n	800639e <HAL_TIM_PWM_Start+0x62>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d108      	bne.n	800638e <HAL_TIM_PWM_Start+0x52>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2240      	movs	r2, #64	; 0x40
 8006380:	5c9b      	ldrb	r3, [r3, r2]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	1e5a      	subs	r2, r3, #1
 8006388:	4193      	sbcs	r3, r2
 800638a:	b2db      	uxtb	r3, r3
 800638c:	e007      	b.n	800639e <HAL_TIM_PWM_Start+0x62>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2241      	movs	r2, #65	; 0x41
 8006392:	5c9b      	ldrb	r3, [r3, r2]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	1e5a      	subs	r2, r3, #1
 800639a:	4193      	sbcs	r3, r2
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e074      	b.n	8006490 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <HAL_TIM_PWM_Start+0x7a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	223e      	movs	r2, #62	; 0x3e
 80063b0:	2102      	movs	r1, #2
 80063b2:	5499      	strb	r1, [r3, r2]
 80063b4:	e013      	b.n	80063de <HAL_TIM_PWM_Start+0xa2>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d104      	bne.n	80063c6 <HAL_TIM_PWM_Start+0x8a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	223f      	movs	r2, #63	; 0x3f
 80063c0:	2102      	movs	r1, #2
 80063c2:	5499      	strb	r1, [r3, r2]
 80063c4:	e00b      	b.n	80063de <HAL_TIM_PWM_Start+0xa2>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_PWM_Start+0x9a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2240      	movs	r2, #64	; 0x40
 80063d0:	2102      	movs	r1, #2
 80063d2:	5499      	strb	r1, [r3, r2]
 80063d4:	e003      	b.n	80063de <HAL_TIM_PWM_Start+0xa2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2241      	movs	r2, #65	; 0x41
 80063da:	2102      	movs	r1, #2
 80063dc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	0018      	movs	r0, r3
 80063e8:	f000 fc1e 	bl	8006c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a29      	ldr	r2, [pc, #164]	; (8006498 <HAL_TIM_PWM_Start+0x15c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00e      	beq.n	8006414 <HAL_TIM_PWM_Start+0xd8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a28      	ldr	r2, [pc, #160]	; (800649c <HAL_TIM_PWM_Start+0x160>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d009      	beq.n	8006414 <HAL_TIM_PWM_Start+0xd8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <HAL_TIM_PWM_Start+0x164>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIM_PWM_Start+0xd8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <HAL_TIM_PWM_Start+0x168>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d101      	bne.n	8006418 <HAL_TIM_PWM_Start+0xdc>
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <HAL_TIM_PWM_Start+0xde>
 8006418:	2300      	movs	r3, #0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2180      	movs	r1, #128	; 0x80
 800642a:	0209      	lsls	r1, r1, #8
 800642c:	430a      	orrs	r2, r1
 800642e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a18      	ldr	r2, [pc, #96]	; (8006498 <HAL_TIM_PWM_Start+0x15c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <HAL_TIM_PWM_Start+0x11e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	05db      	lsls	r3, r3, #23
 8006442:	429a      	cmp	r2, r3
 8006444:	d009      	beq.n	800645a <HAL_TIM_PWM_Start+0x11e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <HAL_TIM_PWM_Start+0x16c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_TIM_PWM_Start+0x11e>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a11      	ldr	r2, [pc, #68]	; (800649c <HAL_TIM_PWM_Start+0x160>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d111      	bne.n	800647e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2207      	movs	r2, #7
 8006462:	4013      	ands	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b06      	cmp	r3, #6
 800646a:	d010      	beq.n	800648e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2101      	movs	r1, #1
 8006478:	430a      	orrs	r2, r1
 800647a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647c:	e007      	b.n	800648e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2101      	movs	r1, #1
 800648a:	430a      	orrs	r2, r1
 800648c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	0018      	movs	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	b004      	add	sp, #16
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	40000400 	.word	0x40000400

080064ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	2200      	movs	r2, #0
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 fbb2 	bl	8006c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a2f      	ldr	r2, [pc, #188]	; (8006588 <HAL_TIM_PWM_Stop+0xdc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00e      	beq.n	80064ec <HAL_TIM_PWM_Stop+0x40>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a2e      	ldr	r2, [pc, #184]	; (800658c <HAL_TIM_PWM_Stop+0xe0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d009      	beq.n	80064ec <HAL_TIM_PWM_Stop+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2c      	ldr	r2, [pc, #176]	; (8006590 <HAL_TIM_PWM_Stop+0xe4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIM_PWM_Stop+0x40>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2b      	ldr	r2, [pc, #172]	; (8006594 <HAL_TIM_PWM_Stop+0xe8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d101      	bne.n	80064f0 <HAL_TIM_PWM_Stop+0x44>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <HAL_TIM_PWM_Stop+0x46>
 80064f0:	2300      	movs	r3, #0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d013      	beq.n	800651e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	4a26      	ldr	r2, [pc, #152]	; (8006598 <HAL_TIM_PWM_Stop+0xec>)
 80064fe:	4013      	ands	r3, r2
 8006500:	d10d      	bne.n	800651e <HAL_TIM_PWM_Stop+0x72>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	4a24      	ldr	r2, [pc, #144]	; (800659c <HAL_TIM_PWM_Stop+0xf0>)
 800650a:	4013      	ands	r3, r2
 800650c:	d107      	bne.n	800651e <HAL_TIM_PWM_Stop+0x72>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4921      	ldr	r1, [pc, #132]	; (80065a0 <HAL_TIM_PWM_Stop+0xf4>)
 800651a:	400a      	ands	r2, r1
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <HAL_TIM_PWM_Stop+0xec>)
 8006526:	4013      	ands	r3, r2
 8006528:	d10d      	bne.n	8006546 <HAL_TIM_PWM_Stop+0x9a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	4a1a      	ldr	r2, [pc, #104]	; (800659c <HAL_TIM_PWM_Stop+0xf0>)
 8006532:	4013      	ands	r3, r2
 8006534:	d107      	bne.n	8006546 <HAL_TIM_PWM_Stop+0x9a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2101      	movs	r1, #1
 8006542:	438a      	bics	r2, r1
 8006544:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Stop+0xaa>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	223e      	movs	r2, #62	; 0x3e
 8006550:	2101      	movs	r1, #1
 8006552:	5499      	strb	r1, [r3, r2]
 8006554:	e013      	b.n	800657e <HAL_TIM_PWM_Stop+0xd2>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b04      	cmp	r3, #4
 800655a:	d104      	bne.n	8006566 <HAL_TIM_PWM_Stop+0xba>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	223f      	movs	r2, #63	; 0x3f
 8006560:	2101      	movs	r1, #1
 8006562:	5499      	strb	r1, [r3, r2]
 8006564:	e00b      	b.n	800657e <HAL_TIM_PWM_Stop+0xd2>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b08      	cmp	r3, #8
 800656a:	d104      	bne.n	8006576 <HAL_TIM_PWM_Stop+0xca>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2240      	movs	r2, #64	; 0x40
 8006570:	2101      	movs	r1, #1
 8006572:	5499      	strb	r1, [r3, r2]
 8006574:	e003      	b.n	800657e <HAL_TIM_PWM_Stop+0xd2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2241      	movs	r2, #65	; 0x41
 800657a:	2101      	movs	r1, #1
 800657c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	0018      	movs	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40012c00 	.word	0x40012c00
 800658c:	40014000 	.word	0x40014000
 8006590:	40014400 	.word	0x40014400
 8006594:	40014800 	.word	0x40014800
 8006598:	00001111 	.word	0x00001111
 800659c:	00000444 	.word	0x00000444
 80065a0:	ffff7fff 	.word	0xffff7fff

080065a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b0:	2317      	movs	r3, #23
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	223c      	movs	r2, #60	; 0x3c
 80065bc:	5c9b      	ldrb	r3, [r3, r2]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e0ad      	b.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	223c      	movs	r2, #60	; 0x3c
 80065ca:	2101      	movs	r1, #1
 80065cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	d100      	bne.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80065d4:	e076      	b.n	80066c4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b0c      	cmp	r3, #12
 80065da:	d900      	bls.n	80065de <HAL_TIM_PWM_ConfigChannel+0x3a>
 80065dc:	e095      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x166>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d04e      	beq.n	8006682 <HAL_TIM_PWM_ConfigChannel+0xde>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d900      	bls.n	80065ec <HAL_TIM_PWM_ConfigChannel+0x48>
 80065ea:	e08e      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x166>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_PWM_ConfigChannel+0x56>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d021      	beq.n	800663c <HAL_TIM_PWM_ConfigChannel+0x98>
 80065f8:	e087      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	0011      	movs	r1, r2
 8006602:	0018      	movs	r0, r3
 8006604:	f000 f914 	bl	8006830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2108      	movs	r1, #8
 8006614:	430a      	orrs	r2, r1
 8006616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2104      	movs	r1, #4
 8006624:	438a      	bics	r2, r1
 8006626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	619a      	str	r2, [r3, #24]
      break;
 800663a:	e06b      	b.n	8006714 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	0011      	movs	r1, r2
 8006644:	0018      	movs	r0, r3
 8006646:	f000 f97b 	bl	8006940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2180      	movs	r1, #128	; 0x80
 8006656:	0109      	lsls	r1, r1, #4
 8006658:	430a      	orrs	r2, r1
 800665a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4931      	ldr	r1, [pc, #196]	; (800672c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006668:	400a      	ands	r2, r1
 800666a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6999      	ldr	r1, [r3, #24]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	021a      	lsls	r2, r3, #8
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	619a      	str	r2, [r3, #24]
      break;
 8006680:	e048      	b.n	8006714 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	0011      	movs	r1, r2
 800668a:	0018      	movs	r0, r3
 800668c:	f000 f9dc 	bl	8006a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2108      	movs	r1, #8
 800669c:	430a      	orrs	r2, r1
 800669e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2104      	movs	r1, #4
 80066ac:	438a      	bics	r2, r1
 80066ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69d9      	ldr	r1, [r3, #28]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	61da      	str	r2, [r3, #28]
      break;
 80066c2:	e027      	b.n	8006714 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	0011      	movs	r1, r2
 80066cc:	0018      	movs	r0, r3
 80066ce:	f000 fa41 	bl	8006b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2180      	movs	r1, #128	; 0x80
 80066de:	0109      	lsls	r1, r1, #4
 80066e0:	430a      	orrs	r2, r1
 80066e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	490f      	ldr	r1, [pc, #60]	; (800672c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80066f0:	400a      	ands	r2, r1
 80066f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69d9      	ldr	r1, [r3, #28]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	61da      	str	r2, [r3, #28]
      break;
 8006708:	e004      	b.n	8006714 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800670a:	2317      	movs	r3, #23
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	2201      	movs	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
      break;
 8006712:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	223c      	movs	r2, #60	; 0x3c
 8006718:	2100      	movs	r1, #0
 800671a:	5499      	strb	r1, [r3, r2]

  return status;
 800671c:	2317      	movs	r3, #23
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	781b      	ldrb	r3, [r3, #0]
}
 8006722:	0018      	movs	r0, r3
 8006724:	46bd      	mov	sp, r7
 8006726:	b006      	add	sp, #24
 8006728:	bd80      	pop	{r7, pc}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	fffffbff 	.word	0xfffffbff

08006730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a34      	ldr	r2, [pc, #208]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d008      	beq.n	800675a <TIM_Base_SetConfig+0x2a>
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	2380      	movs	r3, #128	; 0x80
 800674c:	05db      	lsls	r3, r3, #23
 800674e:	429a      	cmp	r2, r3
 8006750:	d003      	beq.n	800675a <TIM_Base_SetConfig+0x2a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a30      	ldr	r2, [pc, #192]	; (8006818 <TIM_Base_SetConfig+0xe8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d108      	bne.n	800676c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2270      	movs	r2, #112	; 0x70
 800675e:	4393      	bics	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a29      	ldr	r2, [pc, #164]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d018      	beq.n	80067a6 <TIM_Base_SetConfig+0x76>
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	05db      	lsls	r3, r3, #23
 800677a:	429a      	cmp	r2, r3
 800677c:	d013      	beq.n	80067a6 <TIM_Base_SetConfig+0x76>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a25      	ldr	r2, [pc, #148]	; (8006818 <TIM_Base_SetConfig+0xe8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_Base_SetConfig+0x76>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a24      	ldr	r2, [pc, #144]	; (800681c <TIM_Base_SetConfig+0xec>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_Base_SetConfig+0x76>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a23      	ldr	r2, [pc, #140]	; (8006820 <TIM_Base_SetConfig+0xf0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_Base_SetConfig+0x76>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a22      	ldr	r2, [pc, #136]	; (8006824 <TIM_Base_SetConfig+0xf4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_Base_SetConfig+0x76>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a21      	ldr	r2, [pc, #132]	; (8006828 <TIM_Base_SetConfig+0xf8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d108      	bne.n	80067b8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4a20      	ldr	r2, [pc, #128]	; (800682c <TIM_Base_SetConfig+0xfc>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	4393      	bics	r3, r2
 80067be:	001a      	movs	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a0c      	ldr	r2, [pc, #48]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_Base_SetConfig+0xce>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a0d      	ldr	r2, [pc, #52]	; (8006820 <TIM_Base_SetConfig+0xf0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_Base_SetConfig+0xce>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <TIM_Base_SetConfig+0xf4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_Base_SetConfig+0xce>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a0b      	ldr	r2, [pc, #44]	; (8006828 <TIM_Base_SetConfig+0xf8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d103      	bne.n	8006806 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	615a      	str	r2, [r3, #20]
}
 800680c:	46c0      	nop			; (mov r8, r8)
 800680e:	46bd      	mov	sp, r7
 8006810:	b004      	add	sp, #16
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40000400 	.word	0x40000400
 800681c:	40002000 	.word	0x40002000
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800
 800682c:	fffffcff 	.word	0xfffffcff

08006830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	2201      	movs	r2, #1
 8006840:	4393      	bics	r3, r2
 8006842:	001a      	movs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2270      	movs	r2, #112	; 0x70
 800685e:	4393      	bics	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2203      	movs	r2, #3
 8006866:	4393      	bics	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2202      	movs	r2, #2
 8006878:	4393      	bics	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a27      	ldr	r2, [pc, #156]	; (8006928 <TIM_OC1_SetConfig+0xf8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00b      	beq.n	80068a6 <TIM_OC1_SetConfig+0x76>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <TIM_OC1_SetConfig+0xfc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d007      	beq.n	80068a6 <TIM_OC1_SetConfig+0x76>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <TIM_OC1_SetConfig+0x100>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d003      	beq.n	80068a6 <TIM_OC1_SetConfig+0x76>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a24      	ldr	r2, [pc, #144]	; (8006934 <TIM_OC1_SetConfig+0x104>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d10c      	bne.n	80068c0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2208      	movs	r2, #8
 80068aa:	4393      	bics	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2204      	movs	r2, #4
 80068bc:	4393      	bics	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a19      	ldr	r2, [pc, #100]	; (8006928 <TIM_OC1_SetConfig+0xf8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00b      	beq.n	80068e0 <TIM_OC1_SetConfig+0xb0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a18      	ldr	r2, [pc, #96]	; (800692c <TIM_OC1_SetConfig+0xfc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_OC1_SetConfig+0xb0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a17      	ldr	r2, [pc, #92]	; (8006930 <TIM_OC1_SetConfig+0x100>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC1_SetConfig+0xb0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a16      	ldr	r2, [pc, #88]	; (8006934 <TIM_OC1_SetConfig+0x104>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d111      	bne.n	8006904 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <TIM_OC1_SetConfig+0x108>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4a14      	ldr	r2, [pc, #80]	; (800693c <TIM_OC1_SetConfig+0x10c>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	46bd      	mov	sp, r7
 8006922:	b006      	add	sp, #24
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400
 8006934:	40014800 	.word	0x40014800
 8006938:	fffffeff 	.word	0xfffffeff
 800693c:	fffffdff 	.word	0xfffffdff

08006940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	2210      	movs	r2, #16
 8006950:	4393      	bics	r3, r2
 8006952:	001a      	movs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a2e      	ldr	r2, [pc, #184]	; (8006a28 <TIM_OC2_SetConfig+0xe8>)
 800696e:	4013      	ands	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a2d      	ldr	r2, [pc, #180]	; (8006a2c <TIM_OC2_SetConfig+0xec>)
 8006976:	4013      	ands	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2220      	movs	r2, #32
 800698a:	4393      	bics	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <TIM_OC2_SetConfig+0xf0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d10d      	bne.n	80069be <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2280      	movs	r2, #128	; 0x80
 80069a6:	4393      	bics	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2240      	movs	r2, #64	; 0x40
 80069ba:	4393      	bics	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <TIM_OC2_SetConfig+0xf0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <TIM_OC2_SetConfig+0x9e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <TIM_OC2_SetConfig+0xf4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_OC2_SetConfig+0x9e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <TIM_OC2_SetConfig+0xf8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_OC2_SetConfig+0x9e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <TIM_OC2_SetConfig+0xfc>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d113      	bne.n	8006a06 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <TIM_OC2_SetConfig+0x100>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <TIM_OC2_SetConfig+0x104>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	621a      	str	r2, [r3, #32]
}
 8006a20:	46c0      	nop			; (mov r8, r8)
 8006a22:	46bd      	mov	sp, r7
 8006a24:	b006      	add	sp, #24
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	ffff8fff 	.word	0xffff8fff
 8006a2c:	fffffcff 	.word	0xfffffcff
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40014400 	.word	0x40014400
 8006a3c:	40014800 	.word	0x40014800
 8006a40:	fffffbff 	.word	0xfffffbff
 8006a44:	fffff7ff 	.word	0xfffff7ff

08006a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	4a35      	ldr	r2, [pc, #212]	; (8006b2c <TIM_OC3_SetConfig+0xe4>)
 8006a58:	401a      	ands	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2270      	movs	r2, #112	; 0x70
 8006a74:	4393      	bics	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	4393      	bics	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <TIM_OC3_SetConfig+0xe8>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a24      	ldr	r2, [pc, #144]	; (8006b34 <TIM_OC3_SetConfig+0xec>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d10d      	bne.n	8006ac2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	4a23      	ldr	r2, [pc, #140]	; (8006b38 <TIM_OC3_SetConfig+0xf0>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4a1f      	ldr	r2, [pc, #124]	; (8006b3c <TIM_OC3_SetConfig+0xf4>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	; (8006b34 <TIM_OC3_SetConfig+0xec>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_OC3_SetConfig+0x9a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <TIM_OC3_SetConfig+0xf8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_OC3_SetConfig+0x9a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1b      	ldr	r2, [pc, #108]	; (8006b44 <TIM_OC3_SetConfig+0xfc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_OC3_SetConfig+0x9a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <TIM_OC3_SetConfig+0x100>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d113      	bne.n	8006b0a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <TIM_OC3_SetConfig+0x104>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <TIM_OC3_SetConfig+0x108>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b006      	add	sp, #24
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	fffffeff 	.word	0xfffffeff
 8006b30:	fffffdff 	.word	0xfffffdff
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	fffff7ff 	.word	0xfffff7ff
 8006b3c:	fffffbff 	.word	0xfffffbff
 8006b40:	40014000 	.word	0x40014000
 8006b44:	40014400 	.word	0x40014400
 8006b48:	40014800 	.word	0x40014800
 8006b4c:	ffffefff 	.word	0xffffefff
 8006b50:	ffffdfff 	.word	0xffffdfff

08006b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <TIM_OC4_SetConfig+0xb0>)
 8006b64:	401a      	ands	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a22      	ldr	r2, [pc, #136]	; (8006c08 <TIM_OC4_SetConfig+0xb4>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a21      	ldr	r2, [pc, #132]	; (8006c0c <TIM_OC4_SetConfig+0xb8>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	4a1d      	ldr	r2, [pc, #116]	; (8006c10 <TIM_OC4_SetConfig+0xbc>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	031b      	lsls	r3, r3, #12
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <TIM_OC4_SetConfig+0xc0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00b      	beq.n	8006bcc <TIM_OC4_SetConfig+0x78>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <TIM_OC4_SetConfig+0xc4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_OC4_SetConfig+0x78>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a17      	ldr	r2, [pc, #92]	; (8006c1c <TIM_OC4_SetConfig+0xc8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_OC4_SetConfig+0x78>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a16      	ldr	r2, [pc, #88]	; (8006c20 <TIM_OC4_SetConfig+0xcc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d109      	bne.n	8006be0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	4a15      	ldr	r2, [pc, #84]	; (8006c24 <TIM_OC4_SetConfig+0xd0>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	019b      	lsls	r3, r3, #6
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b006      	add	sp, #24
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	ffffefff 	.word	0xffffefff
 8006c08:	ffff8fff 	.word	0xffff8fff
 8006c0c:	fffffcff 	.word	0xfffffcff
 8006c10:	ffffdfff 	.word	0xffffdfff
 8006c14:	40012c00 	.word	0x40012c00
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800
 8006c24:	ffffbfff 	.word	0xffffbfff

08006c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	221f      	movs	r2, #31
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	0013      	movs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	43d2      	mvns	r2, r2
 8006c4a:	401a      	ands	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	211f      	movs	r1, #31
 8006c58:	400b      	ands	r3, r1
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4099      	lsls	r1, r3
 8006c5e:	000b      	movs	r3, r1
 8006c60:	431a      	orrs	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b006      	add	sp, #24
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	223c      	movs	r2, #60	; 0x3c
 8006c7e:	5c9b      	ldrb	r3, [r3, r2]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e047      	b.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	223c      	movs	r2, #60	; 0x3c
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	223d      	movs	r2, #61	; 0x3d
 8006c94:	2102      	movs	r1, #2
 8006c96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2270      	movs	r2, #112	; 0x70
 8006cac:	4393      	bics	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00f      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	2380      	movs	r3, #128	; 0x80
 8006cd2:	05db      	lsls	r3, r3, #23
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d009      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a11      	ldr	r2, [pc, #68]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a10      	ldr	r2, [pc, #64]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d10c      	bne.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2280      	movs	r2, #128	; 0x80
 8006cf0:	4393      	bics	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	223d      	movs	r2, #61	; 0x3d
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	223c      	movs	r2, #60	; 0x3c
 8006d12:	2100      	movs	r1, #0
 8006d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b004      	add	sp, #16
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40012c00 	.word	0x40012c00
 8006d24:	40000400 	.word	0x40000400
 8006d28:	40014000 	.word	0x40014000

08006d2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	223c      	movs	r2, #60	; 0x3c
 8006d3e:	5c9b      	ldrb	r3, [r3, r2]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e03e      	b.n	8006dc6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	223c      	movs	r2, #60	; 0x3c
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	4393      	bics	r3, r2
 8006d56:	001a      	movs	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006d64:	401a      	ands	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006d72:	401a      	ands	r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a16      	ldr	r2, [pc, #88]	; (8006dd8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006d80:	401a      	ands	r2, r3
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006d8e:	401a      	ands	r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4a11      	ldr	r2, [pc, #68]	; (8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006d9c:	401a      	ands	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006daa:	401a      	ands	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	223c      	movs	r2, #60	; 0x3c
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b004      	add	sp, #16
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	fffffcff 	.word	0xfffffcff
 8006dd4:	fffffbff 	.word	0xfffffbff
 8006dd8:	fffff7ff 	.word	0xfffff7ff
 8006ddc:	ffffefff 	.word	0xffffefff
 8006de0:	ffffdfff 	.word	0xffffdfff
 8006de4:	ffffbfff 	.word	0xffffbfff

08006de8 <__libc_init_array>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	2600      	movs	r6, #0
 8006dec:	4d0c      	ldr	r5, [pc, #48]	; (8006e20 <__libc_init_array+0x38>)
 8006dee:	4c0d      	ldr	r4, [pc, #52]	; (8006e24 <__libc_init_array+0x3c>)
 8006df0:	1b64      	subs	r4, r4, r5
 8006df2:	10a4      	asrs	r4, r4, #2
 8006df4:	42a6      	cmp	r6, r4
 8006df6:	d109      	bne.n	8006e0c <__libc_init_array+0x24>
 8006df8:	2600      	movs	r6, #0
 8006dfa:	f000 f821 	bl	8006e40 <_init>
 8006dfe:	4d0a      	ldr	r5, [pc, #40]	; (8006e28 <__libc_init_array+0x40>)
 8006e00:	4c0a      	ldr	r4, [pc, #40]	; (8006e2c <__libc_init_array+0x44>)
 8006e02:	1b64      	subs	r4, r4, r5
 8006e04:	10a4      	asrs	r4, r4, #2
 8006e06:	42a6      	cmp	r6, r4
 8006e08:	d105      	bne.n	8006e16 <__libc_init_array+0x2e>
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	00b3      	lsls	r3, r6, #2
 8006e0e:	58eb      	ldr	r3, [r5, r3]
 8006e10:	4798      	blx	r3
 8006e12:	3601      	adds	r6, #1
 8006e14:	e7ee      	b.n	8006df4 <__libc_init_array+0xc>
 8006e16:	00b3      	lsls	r3, r6, #2
 8006e18:	58eb      	ldr	r3, [r5, r3]
 8006e1a:	4798      	blx	r3
 8006e1c:	3601      	adds	r6, #1
 8006e1e:	e7f2      	b.n	8006e06 <__libc_init_array+0x1e>
 8006e20:	08007ac0 	.word	0x08007ac0
 8006e24:	08007ac0 	.word	0x08007ac0
 8006e28:	08007ac0 	.word	0x08007ac0
 8006e2c:	08007ac4 	.word	0x08007ac4

08006e30 <memset>:
 8006e30:	0003      	movs	r3, r0
 8006e32:	1882      	adds	r2, r0, r2
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d100      	bne.n	8006e3a <memset+0xa>
 8006e38:	4770      	bx	lr
 8006e3a:	7019      	strb	r1, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	e7f9      	b.n	8006e34 <memset+0x4>

08006e40 <_init>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e46:	bc08      	pop	{r3}
 8006e48:	469e      	mov	lr, r3
 8006e4a:	4770      	bx	lr

08006e4c <_fini>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e52:	bc08      	pop	{r3}
 8006e54:	469e      	mov	lr, r3
 8006e56:	4770      	bx	lr
