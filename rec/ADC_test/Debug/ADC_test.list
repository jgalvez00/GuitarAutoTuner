
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adbc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  0800ae78  0800ae78  0001ae78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde0  0800bde0  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bde0  0800bde0  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bde0  0800bde0  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde0  0800bde0  0001bde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800bde8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  200000ec  0800bed4  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012dc  0800bed4  000212dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001415d  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd8  00000000  00000000  00034271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00037050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00038298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010437  00000000  00000000  000393b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005249  00000000  00000000  000497e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0004ea30  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000052c0  00000000  00000000  0004ea84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000ec 	.word	0x200000ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ae60 	.word	0x0800ae60

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f0 	.word	0x200000f0
 8000100:	0800ae60 	.word	0x0800ae60

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_d2uiz>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	2200      	movs	r2, #0
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <__aeabi_d2uiz+0x38>)
 80003f6:	0004      	movs	r4, r0
 80003f8:	000d      	movs	r5, r1
 80003fa:	f001 fd01 	bl	8001e00 <__aeabi_dcmpge>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d104      	bne.n	800040c <__aeabi_d2uiz+0x1c>
 8000402:	0020      	movs	r0, r4
 8000404:	0029      	movs	r1, r5
 8000406:	f001 fc61 	bl	8001ccc <__aeabi_d2iz>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <__aeabi_d2uiz+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	0020      	movs	r0, r4
 8000412:	0029      	movs	r1, r5
 8000414:	f001 f8c8 	bl	80015a8 <__aeabi_dsub>
 8000418:	f001 fc58 	bl	8001ccc <__aeabi_d2iz>
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	061b      	lsls	r3, r3, #24
 8000420:	469c      	mov	ip, r3
 8000422:	4460      	add	r0, ip
 8000424:	e7f1      	b.n	800040a <__aeabi_d2uiz+0x1a>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	41e00000 	.word	0x41e00000

0800042c <__aeabi_dadd>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	464f      	mov	r7, r9
 8000430:	46d6      	mov	lr, sl
 8000432:	4646      	mov	r6, r8
 8000434:	000d      	movs	r5, r1
 8000436:	0001      	movs	r1, r0
 8000438:	0018      	movs	r0, r3
 800043a:	b5c0      	push	{r6, r7, lr}
 800043c:	0017      	movs	r7, r2
 800043e:	032b      	lsls	r3, r5, #12
 8000440:	0a5a      	lsrs	r2, r3, #9
 8000442:	0f4b      	lsrs	r3, r1, #29
 8000444:	4313      	orrs	r3, r2
 8000446:	00ca      	lsls	r2, r1, #3
 8000448:	4691      	mov	r9, r2
 800044a:	0302      	lsls	r2, r0, #12
 800044c:	006e      	lsls	r6, r5, #1
 800044e:	0041      	lsls	r1, r0, #1
 8000450:	0a52      	lsrs	r2, r2, #9
 8000452:	0fec      	lsrs	r4, r5, #31
 8000454:	0f7d      	lsrs	r5, r7, #29
 8000456:	4315      	orrs	r5, r2
 8000458:	0d76      	lsrs	r6, r6, #21
 800045a:	0d49      	lsrs	r1, r1, #21
 800045c:	0fc0      	lsrs	r0, r0, #31
 800045e:	4682      	mov	sl, r0
 8000460:	46ac      	mov	ip, r5
 8000462:	00ff      	lsls	r7, r7, #3
 8000464:	1a72      	subs	r2, r6, r1
 8000466:	4284      	cmp	r4, r0
 8000468:	d100      	bne.n	800046c <__aeabi_dadd+0x40>
 800046a:	e098      	b.n	800059e <__aeabi_dadd+0x172>
 800046c:	2a00      	cmp	r2, #0
 800046e:	dc00      	bgt.n	8000472 <__aeabi_dadd+0x46>
 8000470:	e081      	b.n	8000576 <__aeabi_dadd+0x14a>
 8000472:	2900      	cmp	r1, #0
 8000474:	d100      	bne.n	8000478 <__aeabi_dadd+0x4c>
 8000476:	e0b6      	b.n	80005e6 <__aeabi_dadd+0x1ba>
 8000478:	49c9      	ldr	r1, [pc, #804]	; (80007a0 <__aeabi_dadd+0x374>)
 800047a:	428e      	cmp	r6, r1
 800047c:	d100      	bne.n	8000480 <__aeabi_dadd+0x54>
 800047e:	e172      	b.n	8000766 <__aeabi_dadd+0x33a>
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0028      	movs	r0, r5
 8000484:	0409      	lsls	r1, r1, #16
 8000486:	4308      	orrs	r0, r1
 8000488:	4684      	mov	ip, r0
 800048a:	2a38      	cmp	r2, #56	; 0x38
 800048c:	dd00      	ble.n	8000490 <__aeabi_dadd+0x64>
 800048e:	e15e      	b.n	800074e <__aeabi_dadd+0x322>
 8000490:	2a1f      	cmp	r2, #31
 8000492:	dd00      	ble.n	8000496 <__aeabi_dadd+0x6a>
 8000494:	e1ee      	b.n	8000874 <__aeabi_dadd+0x448>
 8000496:	2020      	movs	r0, #32
 8000498:	0039      	movs	r1, r7
 800049a:	4665      	mov	r5, ip
 800049c:	1a80      	subs	r0, r0, r2
 800049e:	4087      	lsls	r7, r0
 80004a0:	40d1      	lsrs	r1, r2
 80004a2:	4085      	lsls	r5, r0
 80004a4:	430d      	orrs	r5, r1
 80004a6:	0039      	movs	r1, r7
 80004a8:	1e4f      	subs	r7, r1, #1
 80004aa:	41b9      	sbcs	r1, r7
 80004ac:	4667      	mov	r7, ip
 80004ae:	40d7      	lsrs	r7, r2
 80004b0:	4329      	orrs	r1, r5
 80004b2:	1bdb      	subs	r3, r3, r7
 80004b4:	464a      	mov	r2, r9
 80004b6:	1a55      	subs	r5, r2, r1
 80004b8:	45a9      	cmp	r9, r5
 80004ba:	4189      	sbcs	r1, r1
 80004bc:	4249      	negs	r1, r1
 80004be:	1a5b      	subs	r3, r3, r1
 80004c0:	4698      	mov	r8, r3
 80004c2:	4643      	mov	r3, r8
 80004c4:	021b      	lsls	r3, r3, #8
 80004c6:	d400      	bmi.n	80004ca <__aeabi_dadd+0x9e>
 80004c8:	e0cc      	b.n	8000664 <__aeabi_dadd+0x238>
 80004ca:	4643      	mov	r3, r8
 80004cc:	025b      	lsls	r3, r3, #9
 80004ce:	0a5b      	lsrs	r3, r3, #9
 80004d0:	4698      	mov	r8, r3
 80004d2:	4643      	mov	r3, r8
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0xae>
 80004d8:	e12c      	b.n	8000734 <__aeabi_dadd+0x308>
 80004da:	4640      	mov	r0, r8
 80004dc:	f001 fc9a 	bl	8001e14 <__clzsi2>
 80004e0:	0001      	movs	r1, r0
 80004e2:	3908      	subs	r1, #8
 80004e4:	2220      	movs	r2, #32
 80004e6:	0028      	movs	r0, r5
 80004e8:	4643      	mov	r3, r8
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	408b      	lsls	r3, r1
 80004ee:	40d0      	lsrs	r0, r2
 80004f0:	408d      	lsls	r5, r1
 80004f2:	4303      	orrs	r3, r0
 80004f4:	428e      	cmp	r6, r1
 80004f6:	dd00      	ble.n	80004fa <__aeabi_dadd+0xce>
 80004f8:	e117      	b.n	800072a <__aeabi_dadd+0x2fe>
 80004fa:	1b8e      	subs	r6, r1, r6
 80004fc:	1c72      	adds	r2, r6, #1
 80004fe:	2a1f      	cmp	r2, #31
 8000500:	dd00      	ble.n	8000504 <__aeabi_dadd+0xd8>
 8000502:	e1a7      	b.n	8000854 <__aeabi_dadd+0x428>
 8000504:	2120      	movs	r1, #32
 8000506:	0018      	movs	r0, r3
 8000508:	002e      	movs	r6, r5
 800050a:	1a89      	subs	r1, r1, r2
 800050c:	408d      	lsls	r5, r1
 800050e:	4088      	lsls	r0, r1
 8000510:	40d6      	lsrs	r6, r2
 8000512:	40d3      	lsrs	r3, r2
 8000514:	1e69      	subs	r1, r5, #1
 8000516:	418d      	sbcs	r5, r1
 8000518:	4330      	orrs	r0, r6
 800051a:	4698      	mov	r8, r3
 800051c:	2600      	movs	r6, #0
 800051e:	4305      	orrs	r5, r0
 8000520:	076b      	lsls	r3, r5, #29
 8000522:	d009      	beq.n	8000538 <__aeabi_dadd+0x10c>
 8000524:	230f      	movs	r3, #15
 8000526:	402b      	ands	r3, r5
 8000528:	2b04      	cmp	r3, #4
 800052a:	d005      	beq.n	8000538 <__aeabi_dadd+0x10c>
 800052c:	1d2b      	adds	r3, r5, #4
 800052e:	42ab      	cmp	r3, r5
 8000530:	41ad      	sbcs	r5, r5
 8000532:	426d      	negs	r5, r5
 8000534:	44a8      	add	r8, r5
 8000536:	001d      	movs	r5, r3
 8000538:	4643      	mov	r3, r8
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	d400      	bmi.n	8000540 <__aeabi_dadd+0x114>
 800053e:	e094      	b.n	800066a <__aeabi_dadd+0x23e>
 8000540:	4b97      	ldr	r3, [pc, #604]	; (80007a0 <__aeabi_dadd+0x374>)
 8000542:	1c72      	adds	r2, r6, #1
 8000544:	429a      	cmp	r2, r3
 8000546:	d100      	bne.n	800054a <__aeabi_dadd+0x11e>
 8000548:	e09d      	b.n	8000686 <__aeabi_dadd+0x25a>
 800054a:	4641      	mov	r1, r8
 800054c:	4b95      	ldr	r3, [pc, #596]	; (80007a4 <__aeabi_dadd+0x378>)
 800054e:	08ed      	lsrs	r5, r5, #3
 8000550:	4019      	ands	r1, r3
 8000552:	000b      	movs	r3, r1
 8000554:	0552      	lsls	r2, r2, #21
 8000556:	0749      	lsls	r1, r1, #29
 8000558:	025b      	lsls	r3, r3, #9
 800055a:	4329      	orrs	r1, r5
 800055c:	0b1b      	lsrs	r3, r3, #12
 800055e:	0d52      	lsrs	r2, r2, #21
 8000560:	0512      	lsls	r2, r2, #20
 8000562:	4313      	orrs	r3, r2
 8000564:	07e4      	lsls	r4, r4, #31
 8000566:	4323      	orrs	r3, r4
 8000568:	0008      	movs	r0, r1
 800056a:	0019      	movs	r1, r3
 800056c:	bce0      	pop	{r5, r6, r7}
 800056e:	46ba      	mov	sl, r7
 8000570:	46b1      	mov	r9, r6
 8000572:	46a8      	mov	r8, r5
 8000574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000576:	2a00      	cmp	r2, #0
 8000578:	d043      	beq.n	8000602 <__aeabi_dadd+0x1d6>
 800057a:	1b8a      	subs	r2, r1, r6
 800057c:	2e00      	cmp	r6, #0
 800057e:	d000      	beq.n	8000582 <__aeabi_dadd+0x156>
 8000580:	e12a      	b.n	80007d8 <__aeabi_dadd+0x3ac>
 8000582:	464c      	mov	r4, r9
 8000584:	431c      	orrs	r4, r3
 8000586:	d100      	bne.n	800058a <__aeabi_dadd+0x15e>
 8000588:	e1d1      	b.n	800092e <__aeabi_dadd+0x502>
 800058a:	1e54      	subs	r4, r2, #1
 800058c:	2a01      	cmp	r2, #1
 800058e:	d100      	bne.n	8000592 <__aeabi_dadd+0x166>
 8000590:	e21f      	b.n	80009d2 <__aeabi_dadd+0x5a6>
 8000592:	4d83      	ldr	r5, [pc, #524]	; (80007a0 <__aeabi_dadd+0x374>)
 8000594:	42aa      	cmp	r2, r5
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x16e>
 8000598:	e272      	b.n	8000a80 <__aeabi_dadd+0x654>
 800059a:	0022      	movs	r2, r4
 800059c:	e123      	b.n	80007e6 <__aeabi_dadd+0x3ba>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	dc00      	bgt.n	80005a4 <__aeabi_dadd+0x178>
 80005a2:	e098      	b.n	80006d6 <__aeabi_dadd+0x2aa>
 80005a4:	2900      	cmp	r1, #0
 80005a6:	d042      	beq.n	800062e <__aeabi_dadd+0x202>
 80005a8:	497d      	ldr	r1, [pc, #500]	; (80007a0 <__aeabi_dadd+0x374>)
 80005aa:	428e      	cmp	r6, r1
 80005ac:	d100      	bne.n	80005b0 <__aeabi_dadd+0x184>
 80005ae:	e0da      	b.n	8000766 <__aeabi_dadd+0x33a>
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0028      	movs	r0, r5
 80005b4:	0409      	lsls	r1, r1, #16
 80005b6:	4308      	orrs	r0, r1
 80005b8:	4684      	mov	ip, r0
 80005ba:	2a38      	cmp	r2, #56	; 0x38
 80005bc:	dd00      	ble.n	80005c0 <__aeabi_dadd+0x194>
 80005be:	e129      	b.n	8000814 <__aeabi_dadd+0x3e8>
 80005c0:	2a1f      	cmp	r2, #31
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_dadd+0x19a>
 80005c4:	e187      	b.n	80008d6 <__aeabi_dadd+0x4aa>
 80005c6:	0011      	movs	r1, r2
 80005c8:	4665      	mov	r5, ip
 80005ca:	3920      	subs	r1, #32
 80005cc:	40cd      	lsrs	r5, r1
 80005ce:	2a20      	cmp	r2, #32
 80005d0:	d004      	beq.n	80005dc <__aeabi_dadd+0x1b0>
 80005d2:	2040      	movs	r0, #64	; 0x40
 80005d4:	4661      	mov	r1, ip
 80005d6:	1a82      	subs	r2, r0, r2
 80005d8:	4091      	lsls	r1, r2
 80005da:	430f      	orrs	r7, r1
 80005dc:	0039      	movs	r1, r7
 80005de:	1e4f      	subs	r7, r1, #1
 80005e0:	41b9      	sbcs	r1, r7
 80005e2:	430d      	orrs	r5, r1
 80005e4:	e11b      	b.n	800081e <__aeabi_dadd+0x3f2>
 80005e6:	0029      	movs	r1, r5
 80005e8:	4339      	orrs	r1, r7
 80005ea:	d100      	bne.n	80005ee <__aeabi_dadd+0x1c2>
 80005ec:	e0b5      	b.n	800075a <__aeabi_dadd+0x32e>
 80005ee:	1e51      	subs	r1, r2, #1
 80005f0:	2a01      	cmp	r2, #1
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0x1ca>
 80005f4:	e1ab      	b.n	800094e <__aeabi_dadd+0x522>
 80005f6:	486a      	ldr	r0, [pc, #424]	; (80007a0 <__aeabi_dadd+0x374>)
 80005f8:	4282      	cmp	r2, r0
 80005fa:	d100      	bne.n	80005fe <__aeabi_dadd+0x1d2>
 80005fc:	e1b2      	b.n	8000964 <__aeabi_dadd+0x538>
 80005fe:	000a      	movs	r2, r1
 8000600:	e743      	b.n	800048a <__aeabi_dadd+0x5e>
 8000602:	4969      	ldr	r1, [pc, #420]	; (80007a8 <__aeabi_dadd+0x37c>)
 8000604:	1c75      	adds	r5, r6, #1
 8000606:	420d      	tst	r5, r1
 8000608:	d000      	beq.n	800060c <__aeabi_dadd+0x1e0>
 800060a:	e0cf      	b.n	80007ac <__aeabi_dadd+0x380>
 800060c:	2e00      	cmp	r6, #0
 800060e:	d000      	beq.n	8000612 <__aeabi_dadd+0x1e6>
 8000610:	e193      	b.n	800093a <__aeabi_dadd+0x50e>
 8000612:	4649      	mov	r1, r9
 8000614:	4319      	orrs	r1, r3
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x1ee>
 8000618:	e1d1      	b.n	80009be <__aeabi_dadd+0x592>
 800061a:	4661      	mov	r1, ip
 800061c:	4339      	orrs	r1, r7
 800061e:	d000      	beq.n	8000622 <__aeabi_dadd+0x1f6>
 8000620:	e1e3      	b.n	80009ea <__aeabi_dadd+0x5be>
 8000622:	4649      	mov	r1, r9
 8000624:	0758      	lsls	r0, r3, #29
 8000626:	08c9      	lsrs	r1, r1, #3
 8000628:	4301      	orrs	r1, r0
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	e026      	b.n	800067c <__aeabi_dadd+0x250>
 800062e:	0029      	movs	r1, r5
 8000630:	4339      	orrs	r1, r7
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0x20a>
 8000634:	e091      	b.n	800075a <__aeabi_dadd+0x32e>
 8000636:	1e51      	subs	r1, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d005      	beq.n	8000648 <__aeabi_dadd+0x21c>
 800063c:	4858      	ldr	r0, [pc, #352]	; (80007a0 <__aeabi_dadd+0x374>)
 800063e:	4282      	cmp	r2, r0
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x218>
 8000642:	e18f      	b.n	8000964 <__aeabi_dadd+0x538>
 8000644:	000a      	movs	r2, r1
 8000646:	e7b8      	b.n	80005ba <__aeabi_dadd+0x18e>
 8000648:	003d      	movs	r5, r7
 800064a:	444d      	add	r5, r9
 800064c:	454d      	cmp	r5, r9
 800064e:	4189      	sbcs	r1, r1
 8000650:	4463      	add	r3, ip
 8000652:	4698      	mov	r8, r3
 8000654:	4249      	negs	r1, r1
 8000656:	4488      	add	r8, r1
 8000658:	4643      	mov	r3, r8
 800065a:	2602      	movs	r6, #2
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	d500      	bpl.n	8000662 <__aeabi_dadd+0x236>
 8000660:	e0eb      	b.n	800083a <__aeabi_dadd+0x40e>
 8000662:	3e01      	subs	r6, #1
 8000664:	076b      	lsls	r3, r5, #29
 8000666:	d000      	beq.n	800066a <__aeabi_dadd+0x23e>
 8000668:	e75c      	b.n	8000524 <__aeabi_dadd+0xf8>
 800066a:	4643      	mov	r3, r8
 800066c:	08e9      	lsrs	r1, r5, #3
 800066e:	075a      	lsls	r2, r3, #29
 8000670:	4311      	orrs	r1, r2
 8000672:	0032      	movs	r2, r6
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	484a      	ldr	r0, [pc, #296]	; (80007a0 <__aeabi_dadd+0x374>)
 8000678:	4282      	cmp	r2, r0
 800067a:	d021      	beq.n	80006c0 <__aeabi_dadd+0x294>
 800067c:	031b      	lsls	r3, r3, #12
 800067e:	0552      	lsls	r2, r2, #21
 8000680:	0b1b      	lsrs	r3, r3, #12
 8000682:	0d52      	lsrs	r2, r2, #21
 8000684:	e76c      	b.n	8000560 <__aeabi_dadd+0x134>
 8000686:	2300      	movs	r3, #0
 8000688:	2100      	movs	r1, #0
 800068a:	e769      	b.n	8000560 <__aeabi_dadd+0x134>
 800068c:	002a      	movs	r2, r5
 800068e:	433a      	orrs	r2, r7
 8000690:	d069      	beq.n	8000766 <__aeabi_dadd+0x33a>
 8000692:	464a      	mov	r2, r9
 8000694:	0758      	lsls	r0, r3, #29
 8000696:	08d1      	lsrs	r1, r2, #3
 8000698:	08da      	lsrs	r2, r3, #3
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	031b      	lsls	r3, r3, #12
 800069e:	4308      	orrs	r0, r1
 80006a0:	421a      	tst	r2, r3
 80006a2:	d007      	beq.n	80006b4 <__aeabi_dadd+0x288>
 80006a4:	0029      	movs	r1, r5
 80006a6:	08ed      	lsrs	r5, r5, #3
 80006a8:	421d      	tst	r5, r3
 80006aa:	d103      	bne.n	80006b4 <__aeabi_dadd+0x288>
 80006ac:	002a      	movs	r2, r5
 80006ae:	08ff      	lsrs	r7, r7, #3
 80006b0:	0748      	lsls	r0, r1, #29
 80006b2:	4338      	orrs	r0, r7
 80006b4:	0f43      	lsrs	r3, r0, #29
 80006b6:	00c1      	lsls	r1, r0, #3
 80006b8:	075b      	lsls	r3, r3, #29
 80006ba:	08c9      	lsrs	r1, r1, #3
 80006bc:	4319      	orrs	r1, r3
 80006be:	0013      	movs	r3, r2
 80006c0:	000a      	movs	r2, r1
 80006c2:	431a      	orrs	r2, r3
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x29c>
 80006c6:	e213      	b.n	8000af0 <__aeabi_dadd+0x6c4>
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	0312      	lsls	r2, r2, #12
 80006cc:	4313      	orrs	r3, r2
 80006ce:	031b      	lsls	r3, r3, #12
 80006d0:	4a33      	ldr	r2, [pc, #204]	; (80007a0 <__aeabi_dadd+0x374>)
 80006d2:	0b1b      	lsrs	r3, r3, #12
 80006d4:	e744      	b.n	8000560 <__aeabi_dadd+0x134>
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d04b      	beq.n	8000772 <__aeabi_dadd+0x346>
 80006da:	1b8a      	subs	r2, r1, r6
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x2b6>
 80006e0:	e0e7      	b.n	80008b2 <__aeabi_dadd+0x486>
 80006e2:	482f      	ldr	r0, [pc, #188]	; (80007a0 <__aeabi_dadd+0x374>)
 80006e4:	4281      	cmp	r1, r0
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x2be>
 80006e8:	e195      	b.n	8000a16 <__aeabi_dadd+0x5ea>
 80006ea:	2080      	movs	r0, #128	; 0x80
 80006ec:	0400      	lsls	r0, r0, #16
 80006ee:	4303      	orrs	r3, r0
 80006f0:	2a38      	cmp	r2, #56	; 0x38
 80006f2:	dd00      	ble.n	80006f6 <__aeabi_dadd+0x2ca>
 80006f4:	e143      	b.n	800097e <__aeabi_dadd+0x552>
 80006f6:	2a1f      	cmp	r2, #31
 80006f8:	dd00      	ble.n	80006fc <__aeabi_dadd+0x2d0>
 80006fa:	e1db      	b.n	8000ab4 <__aeabi_dadd+0x688>
 80006fc:	2020      	movs	r0, #32
 80006fe:	001d      	movs	r5, r3
 8000700:	464e      	mov	r6, r9
 8000702:	1a80      	subs	r0, r0, r2
 8000704:	4085      	lsls	r5, r0
 8000706:	40d6      	lsrs	r6, r2
 8000708:	4335      	orrs	r5, r6
 800070a:	464e      	mov	r6, r9
 800070c:	4086      	lsls	r6, r0
 800070e:	0030      	movs	r0, r6
 8000710:	40d3      	lsrs	r3, r2
 8000712:	1e46      	subs	r6, r0, #1
 8000714:	41b0      	sbcs	r0, r6
 8000716:	449c      	add	ip, r3
 8000718:	4305      	orrs	r5, r0
 800071a:	19ed      	adds	r5, r5, r7
 800071c:	42bd      	cmp	r5, r7
 800071e:	419b      	sbcs	r3, r3
 8000720:	425b      	negs	r3, r3
 8000722:	4463      	add	r3, ip
 8000724:	4698      	mov	r8, r3
 8000726:	000e      	movs	r6, r1
 8000728:	e07f      	b.n	800082a <__aeabi_dadd+0x3fe>
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <__aeabi_dadd+0x378>)
 800072c:	1a76      	subs	r6, r6, r1
 800072e:	4013      	ands	r3, r2
 8000730:	4698      	mov	r8, r3
 8000732:	e6f5      	b.n	8000520 <__aeabi_dadd+0xf4>
 8000734:	0028      	movs	r0, r5
 8000736:	f001 fb6d 	bl	8001e14 <__clzsi2>
 800073a:	0001      	movs	r1, r0
 800073c:	3118      	adds	r1, #24
 800073e:	291f      	cmp	r1, #31
 8000740:	dc00      	bgt.n	8000744 <__aeabi_dadd+0x318>
 8000742:	e6cf      	b.n	80004e4 <__aeabi_dadd+0xb8>
 8000744:	002b      	movs	r3, r5
 8000746:	3808      	subs	r0, #8
 8000748:	4083      	lsls	r3, r0
 800074a:	2500      	movs	r5, #0
 800074c:	e6d2      	b.n	80004f4 <__aeabi_dadd+0xc8>
 800074e:	4662      	mov	r2, ip
 8000750:	433a      	orrs	r2, r7
 8000752:	0011      	movs	r1, r2
 8000754:	1e4f      	subs	r7, r1, #1
 8000756:	41b9      	sbcs	r1, r7
 8000758:	e6ac      	b.n	80004b4 <__aeabi_dadd+0x88>
 800075a:	4649      	mov	r1, r9
 800075c:	0758      	lsls	r0, r3, #29
 800075e:	08c9      	lsrs	r1, r1, #3
 8000760:	4301      	orrs	r1, r0
 8000762:	08db      	lsrs	r3, r3, #3
 8000764:	e787      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000766:	4649      	mov	r1, r9
 8000768:	075a      	lsls	r2, r3, #29
 800076a:	08c9      	lsrs	r1, r1, #3
 800076c:	4311      	orrs	r1, r2
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	e7a6      	b.n	80006c0 <__aeabi_dadd+0x294>
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <__aeabi_dadd+0x37c>)
 8000774:	1c70      	adds	r0, r6, #1
 8000776:	4208      	tst	r0, r1
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x350>
 800077a:	e0bb      	b.n	80008f4 <__aeabi_dadd+0x4c8>
 800077c:	2e00      	cmp	r6, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x356>
 8000780:	e114      	b.n	80009ac <__aeabi_dadd+0x580>
 8000782:	4649      	mov	r1, r9
 8000784:	4319      	orrs	r1, r3
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x35e>
 8000788:	e175      	b.n	8000a76 <__aeabi_dadd+0x64a>
 800078a:	0029      	movs	r1, r5
 800078c:	4339      	orrs	r1, r7
 800078e:	d000      	beq.n	8000792 <__aeabi_dadd+0x366>
 8000790:	e17e      	b.n	8000a90 <__aeabi_dadd+0x664>
 8000792:	4649      	mov	r1, r9
 8000794:	0758      	lsls	r0, r3, #29
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	4301      	orrs	r1, r0
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	e76e      	b.n	800067c <__aeabi_dadd+0x250>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	ff7fffff 	.word	0xff7fffff
 80007a8:	000007fe 	.word	0x000007fe
 80007ac:	4649      	mov	r1, r9
 80007ae:	1bcd      	subs	r5, r1, r7
 80007b0:	4661      	mov	r1, ip
 80007b2:	1a58      	subs	r0, r3, r1
 80007b4:	45a9      	cmp	r9, r5
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4249      	negs	r1, r1
 80007ba:	4688      	mov	r8, r1
 80007bc:	0001      	movs	r1, r0
 80007be:	4640      	mov	r0, r8
 80007c0:	1a09      	subs	r1, r1, r0
 80007c2:	4688      	mov	r8, r1
 80007c4:	0209      	lsls	r1, r1, #8
 80007c6:	d500      	bpl.n	80007ca <__aeabi_dadd+0x39e>
 80007c8:	e0a6      	b.n	8000918 <__aeabi_dadd+0x4ec>
 80007ca:	4641      	mov	r1, r8
 80007cc:	4329      	orrs	r1, r5
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x3a6>
 80007d0:	e67f      	b.n	80004d2 <__aeabi_dadd+0xa6>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2400      	movs	r4, #0
 80007d6:	e751      	b.n	800067c <__aeabi_dadd+0x250>
 80007d8:	4cc7      	ldr	r4, [pc, #796]	; (8000af8 <__aeabi_dadd+0x6cc>)
 80007da:	42a1      	cmp	r1, r4
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dadd+0x3b4>
 80007de:	e0c7      	b.n	8000970 <__aeabi_dadd+0x544>
 80007e0:	2480      	movs	r4, #128	; 0x80
 80007e2:	0424      	lsls	r4, r4, #16
 80007e4:	4323      	orrs	r3, r4
 80007e6:	2a38      	cmp	r2, #56	; 0x38
 80007e8:	dc54      	bgt.n	8000894 <__aeabi_dadd+0x468>
 80007ea:	2a1f      	cmp	r2, #31
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_dadd+0x3c4>
 80007ee:	e0cc      	b.n	800098a <__aeabi_dadd+0x55e>
 80007f0:	2420      	movs	r4, #32
 80007f2:	4648      	mov	r0, r9
 80007f4:	1aa4      	subs	r4, r4, r2
 80007f6:	001d      	movs	r5, r3
 80007f8:	464e      	mov	r6, r9
 80007fa:	40a0      	lsls	r0, r4
 80007fc:	40d6      	lsrs	r6, r2
 80007fe:	40a5      	lsls	r5, r4
 8000800:	0004      	movs	r4, r0
 8000802:	40d3      	lsrs	r3, r2
 8000804:	4662      	mov	r2, ip
 8000806:	4335      	orrs	r5, r6
 8000808:	1e66      	subs	r6, r4, #1
 800080a:	41b4      	sbcs	r4, r6
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	469c      	mov	ip, r3
 8000810:	4325      	orrs	r5, r4
 8000812:	e044      	b.n	800089e <__aeabi_dadd+0x472>
 8000814:	4662      	mov	r2, ip
 8000816:	433a      	orrs	r2, r7
 8000818:	0015      	movs	r5, r2
 800081a:	1e6f      	subs	r7, r5, #1
 800081c:	41bd      	sbcs	r5, r7
 800081e:	444d      	add	r5, r9
 8000820:	454d      	cmp	r5, r9
 8000822:	4189      	sbcs	r1, r1
 8000824:	4249      	negs	r1, r1
 8000826:	4688      	mov	r8, r1
 8000828:	4498      	add	r8, r3
 800082a:	4643      	mov	r3, r8
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	d400      	bmi.n	8000832 <__aeabi_dadd+0x406>
 8000830:	e718      	b.n	8000664 <__aeabi_dadd+0x238>
 8000832:	4bb1      	ldr	r3, [pc, #708]	; (8000af8 <__aeabi_dadd+0x6cc>)
 8000834:	3601      	adds	r6, #1
 8000836:	429e      	cmp	r6, r3
 8000838:	d049      	beq.n	80008ce <__aeabi_dadd+0x4a2>
 800083a:	4642      	mov	r2, r8
 800083c:	4baf      	ldr	r3, [pc, #700]	; (8000afc <__aeabi_dadd+0x6d0>)
 800083e:	2101      	movs	r1, #1
 8000840:	401a      	ands	r2, r3
 8000842:	0013      	movs	r3, r2
 8000844:	086a      	lsrs	r2, r5, #1
 8000846:	400d      	ands	r5, r1
 8000848:	4315      	orrs	r5, r2
 800084a:	07d9      	lsls	r1, r3, #31
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	4698      	mov	r8, r3
 8000850:	430d      	orrs	r5, r1
 8000852:	e665      	b.n	8000520 <__aeabi_dadd+0xf4>
 8000854:	0018      	movs	r0, r3
 8000856:	3e1f      	subs	r6, #31
 8000858:	40f0      	lsrs	r0, r6
 800085a:	2a20      	cmp	r2, #32
 800085c:	d003      	beq.n	8000866 <__aeabi_dadd+0x43a>
 800085e:	2140      	movs	r1, #64	; 0x40
 8000860:	1a8a      	subs	r2, r1, r2
 8000862:	4093      	lsls	r3, r2
 8000864:	431d      	orrs	r5, r3
 8000866:	1e69      	subs	r1, r5, #1
 8000868:	418d      	sbcs	r5, r1
 800086a:	2300      	movs	r3, #0
 800086c:	2600      	movs	r6, #0
 800086e:	4698      	mov	r8, r3
 8000870:	4305      	orrs	r5, r0
 8000872:	e6f7      	b.n	8000664 <__aeabi_dadd+0x238>
 8000874:	0011      	movs	r1, r2
 8000876:	4665      	mov	r5, ip
 8000878:	3920      	subs	r1, #32
 800087a:	40cd      	lsrs	r5, r1
 800087c:	2a20      	cmp	r2, #32
 800087e:	d004      	beq.n	800088a <__aeabi_dadd+0x45e>
 8000880:	2040      	movs	r0, #64	; 0x40
 8000882:	4661      	mov	r1, ip
 8000884:	1a82      	subs	r2, r0, r2
 8000886:	4091      	lsls	r1, r2
 8000888:	430f      	orrs	r7, r1
 800088a:	0039      	movs	r1, r7
 800088c:	1e4f      	subs	r7, r1, #1
 800088e:	41b9      	sbcs	r1, r7
 8000890:	4329      	orrs	r1, r5
 8000892:	e60f      	b.n	80004b4 <__aeabi_dadd+0x88>
 8000894:	464a      	mov	r2, r9
 8000896:	4313      	orrs	r3, r2
 8000898:	001d      	movs	r5, r3
 800089a:	1e6b      	subs	r3, r5, #1
 800089c:	419d      	sbcs	r5, r3
 800089e:	1b7d      	subs	r5, r7, r5
 80008a0:	42af      	cmp	r7, r5
 80008a2:	419b      	sbcs	r3, r3
 80008a4:	4662      	mov	r2, ip
 80008a6:	425b      	negs	r3, r3
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	4698      	mov	r8, r3
 80008ac:	4654      	mov	r4, sl
 80008ae:	000e      	movs	r6, r1
 80008b0:	e607      	b.n	80004c2 <__aeabi_dadd+0x96>
 80008b2:	4648      	mov	r0, r9
 80008b4:	4318      	orrs	r0, r3
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x48e>
 80008b8:	e0b3      	b.n	8000a22 <__aeabi_dadd+0x5f6>
 80008ba:	1e50      	subs	r0, r2, #1
 80008bc:	2a01      	cmp	r2, #1
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x496>
 80008c0:	e10d      	b.n	8000ade <__aeabi_dadd+0x6b2>
 80008c2:	4d8d      	ldr	r5, [pc, #564]	; (8000af8 <__aeabi_dadd+0x6cc>)
 80008c4:	42aa      	cmp	r2, r5
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x49e>
 80008c8:	e0a5      	b.n	8000a16 <__aeabi_dadd+0x5ea>
 80008ca:	0002      	movs	r2, r0
 80008cc:	e710      	b.n	80006f0 <__aeabi_dadd+0x2c4>
 80008ce:	0032      	movs	r2, r6
 80008d0:	2300      	movs	r3, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	e644      	b.n	8000560 <__aeabi_dadd+0x134>
 80008d6:	2120      	movs	r1, #32
 80008d8:	0038      	movs	r0, r7
 80008da:	1a89      	subs	r1, r1, r2
 80008dc:	4665      	mov	r5, ip
 80008de:	408f      	lsls	r7, r1
 80008e0:	408d      	lsls	r5, r1
 80008e2:	40d0      	lsrs	r0, r2
 80008e4:	1e79      	subs	r1, r7, #1
 80008e6:	418f      	sbcs	r7, r1
 80008e8:	4305      	orrs	r5, r0
 80008ea:	433d      	orrs	r5, r7
 80008ec:	4667      	mov	r7, ip
 80008ee:	40d7      	lsrs	r7, r2
 80008f0:	19db      	adds	r3, r3, r7
 80008f2:	e794      	b.n	800081e <__aeabi_dadd+0x3f2>
 80008f4:	4a80      	ldr	r2, [pc, #512]	; (8000af8 <__aeabi_dadd+0x6cc>)
 80008f6:	4290      	cmp	r0, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x4d0>
 80008fa:	e0ec      	b.n	8000ad6 <__aeabi_dadd+0x6aa>
 80008fc:	0039      	movs	r1, r7
 80008fe:	4449      	add	r1, r9
 8000900:	4549      	cmp	r1, r9
 8000902:	4192      	sbcs	r2, r2
 8000904:	4463      	add	r3, ip
 8000906:	4252      	negs	r2, r2
 8000908:	189b      	adds	r3, r3, r2
 800090a:	07dd      	lsls	r5, r3, #31
 800090c:	0849      	lsrs	r1, r1, #1
 800090e:	085b      	lsrs	r3, r3, #1
 8000910:	4698      	mov	r8, r3
 8000912:	0006      	movs	r6, r0
 8000914:	430d      	orrs	r5, r1
 8000916:	e6a5      	b.n	8000664 <__aeabi_dadd+0x238>
 8000918:	464a      	mov	r2, r9
 800091a:	1abd      	subs	r5, r7, r2
 800091c:	42af      	cmp	r7, r5
 800091e:	4189      	sbcs	r1, r1
 8000920:	4662      	mov	r2, ip
 8000922:	4249      	negs	r1, r1
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	1a5b      	subs	r3, r3, r1
 8000928:	4698      	mov	r8, r3
 800092a:	4654      	mov	r4, sl
 800092c:	e5d1      	b.n	80004d2 <__aeabi_dadd+0xa6>
 800092e:	076c      	lsls	r4, r5, #29
 8000930:	08f9      	lsrs	r1, r7, #3
 8000932:	4321      	orrs	r1, r4
 8000934:	08eb      	lsrs	r3, r5, #3
 8000936:	0004      	movs	r4, r0
 8000938:	e69d      	b.n	8000676 <__aeabi_dadd+0x24a>
 800093a:	464a      	mov	r2, r9
 800093c:	431a      	orrs	r2, r3
 800093e:	d175      	bne.n	8000a2c <__aeabi_dadd+0x600>
 8000940:	4661      	mov	r1, ip
 8000942:	4339      	orrs	r1, r7
 8000944:	d114      	bne.n	8000970 <__aeabi_dadd+0x544>
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	2400      	movs	r4, #0
 800094a:	031b      	lsls	r3, r3, #12
 800094c:	e6bc      	b.n	80006c8 <__aeabi_dadd+0x29c>
 800094e:	464a      	mov	r2, r9
 8000950:	1bd5      	subs	r5, r2, r7
 8000952:	45a9      	cmp	r9, r5
 8000954:	4189      	sbcs	r1, r1
 8000956:	4662      	mov	r2, ip
 8000958:	4249      	negs	r1, r1
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	4698      	mov	r8, r3
 8000960:	2601      	movs	r6, #1
 8000962:	e5ae      	b.n	80004c2 <__aeabi_dadd+0x96>
 8000964:	464a      	mov	r2, r9
 8000966:	08d1      	lsrs	r1, r2, #3
 8000968:	075a      	lsls	r2, r3, #29
 800096a:	4311      	orrs	r1, r2
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	e6a7      	b.n	80006c0 <__aeabi_dadd+0x294>
 8000970:	4663      	mov	r3, ip
 8000972:	08f9      	lsrs	r1, r7, #3
 8000974:	075a      	lsls	r2, r3, #29
 8000976:	4654      	mov	r4, sl
 8000978:	4311      	orrs	r1, r2
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	e6a0      	b.n	80006c0 <__aeabi_dadd+0x294>
 800097e:	464a      	mov	r2, r9
 8000980:	4313      	orrs	r3, r2
 8000982:	001d      	movs	r5, r3
 8000984:	1e6b      	subs	r3, r5, #1
 8000986:	419d      	sbcs	r5, r3
 8000988:	e6c7      	b.n	800071a <__aeabi_dadd+0x2ee>
 800098a:	0014      	movs	r4, r2
 800098c:	001e      	movs	r6, r3
 800098e:	3c20      	subs	r4, #32
 8000990:	40e6      	lsrs	r6, r4
 8000992:	2a20      	cmp	r2, #32
 8000994:	d005      	beq.n	80009a2 <__aeabi_dadd+0x576>
 8000996:	2440      	movs	r4, #64	; 0x40
 8000998:	1aa2      	subs	r2, r4, r2
 800099a:	4093      	lsls	r3, r2
 800099c:	464a      	mov	r2, r9
 800099e:	431a      	orrs	r2, r3
 80009a0:	4691      	mov	r9, r2
 80009a2:	464d      	mov	r5, r9
 80009a4:	1e6b      	subs	r3, r5, #1
 80009a6:	419d      	sbcs	r5, r3
 80009a8:	4335      	orrs	r5, r6
 80009aa:	e778      	b.n	800089e <__aeabi_dadd+0x472>
 80009ac:	464a      	mov	r2, r9
 80009ae:	431a      	orrs	r2, r3
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x588>
 80009b2:	e66b      	b.n	800068c <__aeabi_dadd+0x260>
 80009b4:	076b      	lsls	r3, r5, #29
 80009b6:	08f9      	lsrs	r1, r7, #3
 80009b8:	4319      	orrs	r1, r3
 80009ba:	08eb      	lsrs	r3, r5, #3
 80009bc:	e680      	b.n	80006c0 <__aeabi_dadd+0x294>
 80009be:	4661      	mov	r1, ip
 80009c0:	4339      	orrs	r1, r7
 80009c2:	d054      	beq.n	8000a6e <__aeabi_dadd+0x642>
 80009c4:	4663      	mov	r3, ip
 80009c6:	08f9      	lsrs	r1, r7, #3
 80009c8:	075c      	lsls	r4, r3, #29
 80009ca:	4321      	orrs	r1, r4
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	0004      	movs	r4, r0
 80009d0:	e654      	b.n	800067c <__aeabi_dadd+0x250>
 80009d2:	464a      	mov	r2, r9
 80009d4:	1abd      	subs	r5, r7, r2
 80009d6:	42af      	cmp	r7, r5
 80009d8:	4189      	sbcs	r1, r1
 80009da:	4662      	mov	r2, ip
 80009dc:	4249      	negs	r1, r1
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	1a5b      	subs	r3, r3, r1
 80009e2:	4698      	mov	r8, r3
 80009e4:	0004      	movs	r4, r0
 80009e6:	2601      	movs	r6, #1
 80009e8:	e56b      	b.n	80004c2 <__aeabi_dadd+0x96>
 80009ea:	464a      	mov	r2, r9
 80009ec:	1bd5      	subs	r5, r2, r7
 80009ee:	45a9      	cmp	r9, r5
 80009f0:	4189      	sbcs	r1, r1
 80009f2:	4662      	mov	r2, ip
 80009f4:	4249      	negs	r1, r1
 80009f6:	1a9a      	subs	r2, r3, r2
 80009f8:	1a52      	subs	r2, r2, r1
 80009fa:	4690      	mov	r8, r2
 80009fc:	0212      	lsls	r2, r2, #8
 80009fe:	d532      	bpl.n	8000a66 <__aeabi_dadd+0x63a>
 8000a00:	464a      	mov	r2, r9
 8000a02:	1abd      	subs	r5, r7, r2
 8000a04:	42af      	cmp	r7, r5
 8000a06:	4189      	sbcs	r1, r1
 8000a08:	4662      	mov	r2, ip
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	1a5b      	subs	r3, r3, r1
 8000a10:	4698      	mov	r8, r3
 8000a12:	0004      	movs	r4, r0
 8000a14:	e584      	b.n	8000520 <__aeabi_dadd+0xf4>
 8000a16:	4663      	mov	r3, ip
 8000a18:	08f9      	lsrs	r1, r7, #3
 8000a1a:	075a      	lsls	r2, r3, #29
 8000a1c:	4311      	orrs	r1, r2
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	e64e      	b.n	80006c0 <__aeabi_dadd+0x294>
 8000a22:	08f9      	lsrs	r1, r7, #3
 8000a24:	0768      	lsls	r0, r5, #29
 8000a26:	4301      	orrs	r1, r0
 8000a28:	08eb      	lsrs	r3, r5, #3
 8000a2a:	e624      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	433a      	orrs	r2, r7
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x608>
 8000a32:	e698      	b.n	8000766 <__aeabi_dadd+0x33a>
 8000a34:	464a      	mov	r2, r9
 8000a36:	08d1      	lsrs	r1, r2, #3
 8000a38:	075a      	lsls	r2, r3, #29
 8000a3a:	4311      	orrs	r1, r2
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	031b      	lsls	r3, r3, #12
 8000a42:	421a      	tst	r2, r3
 8000a44:	d008      	beq.n	8000a58 <__aeabi_dadd+0x62c>
 8000a46:	4660      	mov	r0, ip
 8000a48:	08c5      	lsrs	r5, r0, #3
 8000a4a:	421d      	tst	r5, r3
 8000a4c:	d104      	bne.n	8000a58 <__aeabi_dadd+0x62c>
 8000a4e:	4654      	mov	r4, sl
 8000a50:	002a      	movs	r2, r5
 8000a52:	08f9      	lsrs	r1, r7, #3
 8000a54:	0743      	lsls	r3, r0, #29
 8000a56:	4319      	orrs	r1, r3
 8000a58:	0f4b      	lsrs	r3, r1, #29
 8000a5a:	00c9      	lsls	r1, r1, #3
 8000a5c:	075b      	lsls	r3, r3, #29
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	4319      	orrs	r1, r3
 8000a62:	0013      	movs	r3, r2
 8000a64:	e62c      	b.n	80006c0 <__aeabi_dadd+0x294>
 8000a66:	4641      	mov	r1, r8
 8000a68:	4329      	orrs	r1, r5
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_dadd+0x642>
 8000a6c:	e5fa      	b.n	8000664 <__aeabi_dadd+0x238>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	000a      	movs	r2, r1
 8000a72:	2400      	movs	r4, #0
 8000a74:	e602      	b.n	800067c <__aeabi_dadd+0x250>
 8000a76:	076b      	lsls	r3, r5, #29
 8000a78:	08f9      	lsrs	r1, r7, #3
 8000a7a:	4319      	orrs	r1, r3
 8000a7c:	08eb      	lsrs	r3, r5, #3
 8000a7e:	e5fd      	b.n	800067c <__aeabi_dadd+0x250>
 8000a80:	4663      	mov	r3, ip
 8000a82:	08f9      	lsrs	r1, r7, #3
 8000a84:	075b      	lsls	r3, r3, #29
 8000a86:	4319      	orrs	r1, r3
 8000a88:	4663      	mov	r3, ip
 8000a8a:	0004      	movs	r4, r0
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	e617      	b.n	80006c0 <__aeabi_dadd+0x294>
 8000a90:	003d      	movs	r5, r7
 8000a92:	444d      	add	r5, r9
 8000a94:	4463      	add	r3, ip
 8000a96:	454d      	cmp	r5, r9
 8000a98:	4189      	sbcs	r1, r1
 8000a9a:	4698      	mov	r8, r3
 8000a9c:	4249      	negs	r1, r1
 8000a9e:	4488      	add	r8, r1
 8000aa0:	4643      	mov	r3, r8
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	d400      	bmi.n	8000aa8 <__aeabi_dadd+0x67c>
 8000aa6:	e5dd      	b.n	8000664 <__aeabi_dadd+0x238>
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <__aeabi_dadd+0x6d0>)
 8000aac:	2601      	movs	r6, #1
 8000aae:	401a      	ands	r2, r3
 8000ab0:	4690      	mov	r8, r2
 8000ab2:	e5d7      	b.n	8000664 <__aeabi_dadd+0x238>
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	001e      	movs	r6, r3
 8000ab8:	3820      	subs	r0, #32
 8000aba:	40c6      	lsrs	r6, r0
 8000abc:	2a20      	cmp	r2, #32
 8000abe:	d005      	beq.n	8000acc <__aeabi_dadd+0x6a0>
 8000ac0:	2040      	movs	r0, #64	; 0x40
 8000ac2:	1a82      	subs	r2, r0, r2
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	464a      	mov	r2, r9
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	4691      	mov	r9, r2
 8000acc:	464d      	mov	r5, r9
 8000ace:	1e6b      	subs	r3, r5, #1
 8000ad0:	419d      	sbcs	r5, r3
 8000ad2:	4335      	orrs	r5, r6
 8000ad4:	e621      	b.n	800071a <__aeabi_dadd+0x2ee>
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	e540      	b.n	8000560 <__aeabi_dadd+0x134>
 8000ade:	464a      	mov	r2, r9
 8000ae0:	19d5      	adds	r5, r2, r7
 8000ae2:	42bd      	cmp	r5, r7
 8000ae4:	4189      	sbcs	r1, r1
 8000ae6:	4463      	add	r3, ip
 8000ae8:	4698      	mov	r8, r3
 8000aea:	4249      	negs	r1, r1
 8000aec:	4488      	add	r8, r1
 8000aee:	e5b3      	b.n	8000658 <__aeabi_dadd+0x22c>
 8000af0:	2100      	movs	r1, #0
 8000af2:	4a01      	ldr	r2, [pc, #4]	; (8000af8 <__aeabi_dadd+0x6cc>)
 8000af4:	000b      	movs	r3, r1
 8000af6:	e533      	b.n	8000560 <__aeabi_dadd+0x134>
 8000af8:	000007ff 	.word	0x000007ff
 8000afc:	ff7fffff 	.word	0xff7fffff

08000b00 <__aeabi_ddiv>:
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	4657      	mov	r7, sl
 8000b04:	464e      	mov	r6, r9
 8000b06:	4645      	mov	r5, r8
 8000b08:	46de      	mov	lr, fp
 8000b0a:	b5e0      	push	{r5, r6, r7, lr}
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	0005      	movs	r5, r0
 8000b10:	030c      	lsls	r4, r1, #12
 8000b12:	0048      	lsls	r0, r1, #1
 8000b14:	4692      	mov	sl, r2
 8000b16:	001f      	movs	r7, r3
 8000b18:	b085      	sub	sp, #20
 8000b1a:	0b24      	lsrs	r4, r4, #12
 8000b1c:	0d40      	lsrs	r0, r0, #21
 8000b1e:	0fce      	lsrs	r6, r1, #31
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d059      	beq.n	8000bd8 <__aeabi_ddiv+0xd8>
 8000b24:	4b87      	ldr	r3, [pc, #540]	; (8000d44 <__aeabi_ddiv+0x244>)
 8000b26:	4298      	cmp	r0, r3
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x2c>
 8000b2a:	e098      	b.n	8000c5e <__aeabi_ddiv+0x15e>
 8000b2c:	0f6b      	lsrs	r3, r5, #29
 8000b2e:	00e4      	lsls	r4, r4, #3
 8000b30:	431c      	orrs	r4, r3
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	4323      	orrs	r3, r4
 8000b38:	4698      	mov	r8, r3
 8000b3a:	4b83      	ldr	r3, [pc, #524]	; (8000d48 <__aeabi_ddiv+0x248>)
 8000b3c:	00ed      	lsls	r5, r5, #3
 8000b3e:	469b      	mov	fp, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	4699      	mov	r9, r3
 8000b44:	4483      	add	fp, r0
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	033c      	lsls	r4, r7, #12
 8000b4a:	007b      	lsls	r3, r7, #1
 8000b4c:	4650      	mov	r0, sl
 8000b4e:	0b24      	lsrs	r4, r4, #12
 8000b50:	0d5b      	lsrs	r3, r3, #21
 8000b52:	0fff      	lsrs	r7, r7, #31
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d067      	beq.n	8000c28 <__aeabi_ddiv+0x128>
 8000b58:	4a7a      	ldr	r2, [pc, #488]	; (8000d44 <__aeabi_ddiv+0x244>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d018      	beq.n	8000b90 <__aeabi_ddiv+0x90>
 8000b5e:	497a      	ldr	r1, [pc, #488]	; (8000d48 <__aeabi_ddiv+0x248>)
 8000b60:	0f42      	lsrs	r2, r0, #29
 8000b62:	468c      	mov	ip, r1
 8000b64:	00e4      	lsls	r4, r4, #3
 8000b66:	4659      	mov	r1, fp
 8000b68:	4314      	orrs	r4, r2
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	4463      	add	r3, ip
 8000b6e:	0412      	lsls	r2, r2, #16
 8000b70:	1acb      	subs	r3, r1, r3
 8000b72:	4314      	orrs	r4, r2
 8000b74:	469b      	mov	fp, r3
 8000b76:	00c2      	lsls	r2, r0, #3
 8000b78:	2000      	movs	r0, #0
 8000b7a:	0033      	movs	r3, r6
 8000b7c:	407b      	eors	r3, r7
 8000b7e:	469a      	mov	sl, r3
 8000b80:	464b      	mov	r3, r9
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d900      	bls.n	8000b88 <__aeabi_ddiv+0x88>
 8000b86:	e0ef      	b.n	8000d68 <__aeabi_ddiv+0x268>
 8000b88:	4970      	ldr	r1, [pc, #448]	; (8000d4c <__aeabi_ddiv+0x24c>)
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	58cb      	ldr	r3, [r1, r3]
 8000b8e:	469f      	mov	pc, r3
 8000b90:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <__aeabi_ddiv+0x250>)
 8000b92:	4652      	mov	r2, sl
 8000b94:	469c      	mov	ip, r3
 8000b96:	4322      	orrs	r2, r4
 8000b98:	44e3      	add	fp, ip
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_ddiv+0xa0>
 8000b9e:	e095      	b.n	8000ccc <__aeabi_ddiv+0x1cc>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	4689      	mov	r9, r1
 8000ba8:	2400      	movs	r4, #0
 8000baa:	2002      	movs	r0, #2
 8000bac:	e7e5      	b.n	8000b7a <__aeabi_ddiv+0x7a>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	2400      	movs	r4, #0
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	051b      	lsls	r3, r3, #20
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	07d2      	lsls	r2, r2, #31
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	0028      	movs	r0, r5
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	b005      	add	sp, #20
 8000bc4:	bcf0      	pop	{r4, r5, r6, r7}
 8000bc6:	46bb      	mov	fp, r7
 8000bc8:	46b2      	mov	sl, r6
 8000bca:	46a9      	mov	r9, r5
 8000bcc:	46a0      	mov	r8, r4
 8000bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd0:	2400      	movs	r4, #0
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	4b5b      	ldr	r3, [pc, #364]	; (8000d44 <__aeabi_ddiv+0x244>)
 8000bd6:	e7ed      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 8000bd8:	464b      	mov	r3, r9
 8000bda:	4323      	orrs	r3, r4
 8000bdc:	4698      	mov	r8, r3
 8000bde:	d100      	bne.n	8000be2 <__aeabi_ddiv+0xe2>
 8000be0:	e089      	b.n	8000cf6 <__aeabi_ddiv+0x1f6>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_ddiv+0xe8>
 8000be6:	e1e0      	b.n	8000faa <__aeabi_ddiv+0x4aa>
 8000be8:	0020      	movs	r0, r4
 8000bea:	f001 f913 	bl	8001e14 <__clzsi2>
 8000bee:	0001      	movs	r1, r0
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	390b      	subs	r1, #11
 8000bf4:	231d      	movs	r3, #29
 8000bf6:	1a5b      	subs	r3, r3, r1
 8000bf8:	4649      	mov	r1, r9
 8000bfa:	0010      	movs	r0, r2
 8000bfc:	40d9      	lsrs	r1, r3
 8000bfe:	3808      	subs	r0, #8
 8000c00:	4084      	lsls	r4, r0
 8000c02:	000b      	movs	r3, r1
 8000c04:	464d      	mov	r5, r9
 8000c06:	4323      	orrs	r3, r4
 8000c08:	4698      	mov	r8, r3
 8000c0a:	4085      	lsls	r5, r0
 8000c0c:	4851      	ldr	r0, [pc, #324]	; (8000d54 <__aeabi_ddiv+0x254>)
 8000c0e:	033c      	lsls	r4, r7, #12
 8000c10:	1a83      	subs	r3, r0, r2
 8000c12:	469b      	mov	fp, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	4699      	mov	r9, r3
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	007b      	lsls	r3, r7, #1
 8000c1c:	4650      	mov	r0, sl
 8000c1e:	0b24      	lsrs	r4, r4, #12
 8000c20:	0d5b      	lsrs	r3, r3, #21
 8000c22:	0fff      	lsrs	r7, r7, #31
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d197      	bne.n	8000b58 <__aeabi_ddiv+0x58>
 8000c28:	4652      	mov	r2, sl
 8000c2a:	4322      	orrs	r2, r4
 8000c2c:	d055      	beq.n	8000cda <__aeabi_ddiv+0x1da>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_ddiv+0x134>
 8000c32:	e1ca      	b.n	8000fca <__aeabi_ddiv+0x4ca>
 8000c34:	0020      	movs	r0, r4
 8000c36:	f001 f8ed 	bl	8001e14 <__clzsi2>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	3a0b      	subs	r2, #11
 8000c3e:	231d      	movs	r3, #29
 8000c40:	0001      	movs	r1, r0
 8000c42:	1a9b      	subs	r3, r3, r2
 8000c44:	4652      	mov	r2, sl
 8000c46:	3908      	subs	r1, #8
 8000c48:	40da      	lsrs	r2, r3
 8000c4a:	408c      	lsls	r4, r1
 8000c4c:	4314      	orrs	r4, r2
 8000c4e:	4652      	mov	r2, sl
 8000c50:	408a      	lsls	r2, r1
 8000c52:	4b41      	ldr	r3, [pc, #260]	; (8000d58 <__aeabi_ddiv+0x258>)
 8000c54:	4458      	add	r0, fp
 8000c56:	469b      	mov	fp, r3
 8000c58:	4483      	add	fp, r0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	e78d      	b.n	8000b7a <__aeabi_ddiv+0x7a>
 8000c5e:	464b      	mov	r3, r9
 8000c60:	4323      	orrs	r3, r4
 8000c62:	4698      	mov	r8, r3
 8000c64:	d140      	bne.n	8000ce8 <__aeabi_ddiv+0x1e8>
 8000c66:	2308      	movs	r3, #8
 8000c68:	4699      	mov	r9, r3
 8000c6a:	3b06      	subs	r3, #6
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	4683      	mov	fp, r0
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	e769      	b.n	8000b48 <__aeabi_ddiv+0x48>
 8000c74:	46b2      	mov	sl, r6
 8000c76:	9b00      	ldr	r3, [sp, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d0a9      	beq.n	8000bd0 <__aeabi_ddiv+0xd0>
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_ddiv+0x182>
 8000c80:	e211      	b.n	80010a6 <__aeabi_ddiv+0x5a6>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d093      	beq.n	8000bae <__aeabi_ddiv+0xae>
 8000c86:	4a35      	ldr	r2, [pc, #212]	; (8000d5c <__aeabi_ddiv+0x25c>)
 8000c88:	445a      	add	r2, fp
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_ddiv+0x190>
 8000c8e:	e13c      	b.n	8000f0a <__aeabi_ddiv+0x40a>
 8000c90:	076b      	lsls	r3, r5, #29
 8000c92:	d000      	beq.n	8000c96 <__aeabi_ddiv+0x196>
 8000c94:	e1a7      	b.n	8000fe6 <__aeabi_ddiv+0x4e6>
 8000c96:	08ed      	lsrs	r5, r5, #3
 8000c98:	4643      	mov	r3, r8
 8000c9a:	01db      	lsls	r3, r3, #7
 8000c9c:	d506      	bpl.n	8000cac <__aeabi_ddiv+0x1ac>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <__aeabi_ddiv+0x260>)
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	00d2      	lsls	r2, r2, #3
 8000caa:	445a      	add	r2, fp
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <__aeabi_ddiv+0x264>)
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dc8e      	bgt.n	8000bd0 <__aeabi_ddiv+0xd0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	0552      	lsls	r2, r2, #21
 8000cb6:	0758      	lsls	r0, r3, #29
 8000cb8:	025c      	lsls	r4, r3, #9
 8000cba:	4305      	orrs	r5, r0
 8000cbc:	0b24      	lsrs	r4, r4, #12
 8000cbe:	0d53      	lsrs	r3, r2, #21
 8000cc0:	e778      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 8000cc2:	46ba      	mov	sl, r7
 8000cc4:	46a0      	mov	r8, r4
 8000cc6:	0015      	movs	r5, r2
 8000cc8:	9000      	str	r0, [sp, #0]
 8000cca:	e7d4      	b.n	8000c76 <__aeabi_ddiv+0x176>
 8000ccc:	464a      	mov	r2, r9
 8000cce:	2303      	movs	r3, #3
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	4652      	mov	r2, sl
 8000cd8:	e74f      	b.n	8000b7a <__aeabi_ddiv+0x7a>
 8000cda:	4649      	mov	r1, r9
 8000cdc:	2301      	movs	r3, #1
 8000cde:	4319      	orrs	r1, r3
 8000ce0:	4689      	mov	r9, r1
 8000ce2:	2400      	movs	r4, #0
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	e748      	b.n	8000b7a <__aeabi_ddiv+0x7a>
 8000ce8:	230c      	movs	r3, #12
 8000cea:	4699      	mov	r9, r3
 8000cec:	3b09      	subs	r3, #9
 8000cee:	46a0      	mov	r8, r4
 8000cf0:	4683      	mov	fp, r0
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	e728      	b.n	8000b48 <__aeabi_ddiv+0x48>
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	4699      	mov	r9, r3
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	469b      	mov	fp, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	2500      	movs	r5, #0
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	e720      	b.n	8000b48 <__aeabi_ddiv+0x48>
 8000d06:	2300      	movs	r3, #0
 8000d08:	2480      	movs	r4, #128	; 0x80
 8000d0a:	469a      	mov	sl, r3
 8000d0c:	2500      	movs	r5, #0
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <__aeabi_ddiv+0x244>)
 8000d10:	0324      	lsls	r4, r4, #12
 8000d12:	e74f      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	4641      	mov	r1, r8
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	4219      	tst	r1, r3
 8000d1c:	d008      	beq.n	8000d30 <__aeabi_ddiv+0x230>
 8000d1e:	421c      	tst	r4, r3
 8000d20:	d106      	bne.n	8000d30 <__aeabi_ddiv+0x230>
 8000d22:	431c      	orrs	r4, r3
 8000d24:	0324      	lsls	r4, r4, #12
 8000d26:	46ba      	mov	sl, r7
 8000d28:	0015      	movs	r5, r2
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <__aeabi_ddiv+0x244>)
 8000d2c:	0b24      	lsrs	r4, r4, #12
 8000d2e:	e741      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 8000d30:	2480      	movs	r4, #128	; 0x80
 8000d32:	4643      	mov	r3, r8
 8000d34:	0324      	lsls	r4, r4, #12
 8000d36:	431c      	orrs	r4, r3
 8000d38:	0324      	lsls	r4, r4, #12
 8000d3a:	46b2      	mov	sl, r6
 8000d3c:	4b01      	ldr	r3, [pc, #4]	; (8000d44 <__aeabi_ddiv+0x244>)
 8000d3e:	0b24      	lsrs	r4, r4, #12
 8000d40:	e738      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	000007ff 	.word	0x000007ff
 8000d48:	fffffc01 	.word	0xfffffc01
 8000d4c:	0800b020 	.word	0x0800b020
 8000d50:	fffff801 	.word	0xfffff801
 8000d54:	fffffc0d 	.word	0xfffffc0d
 8000d58:	000003f3 	.word	0x000003f3
 8000d5c:	000003ff 	.word	0x000003ff
 8000d60:	feffffff 	.word	0xfeffffff
 8000d64:	000007fe 	.word	0x000007fe
 8000d68:	4544      	cmp	r4, r8
 8000d6a:	d200      	bcs.n	8000d6e <__aeabi_ddiv+0x26e>
 8000d6c:	e116      	b.n	8000f9c <__aeabi_ddiv+0x49c>
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0x272>
 8000d70:	e111      	b.n	8000f96 <__aeabi_ddiv+0x496>
 8000d72:	2301      	movs	r3, #1
 8000d74:	425b      	negs	r3, r3
 8000d76:	469c      	mov	ip, r3
 8000d78:	002e      	movs	r6, r5
 8000d7a:	4640      	mov	r0, r8
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	44e3      	add	fp, ip
 8000d80:	0223      	lsls	r3, r4, #8
 8000d82:	0e14      	lsrs	r4, r2, #24
 8000d84:	431c      	orrs	r4, r3
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	4699      	mov	r9, r3
 8000d8a:	0423      	lsls	r3, r4, #16
 8000d8c:	0c1f      	lsrs	r7, r3, #16
 8000d8e:	0212      	lsls	r2, r2, #8
 8000d90:	4649      	mov	r1, r9
 8000d92:	9200      	str	r2, [sp, #0]
 8000d94:	9701      	str	r7, [sp, #4]
 8000d96:	f7ff fa3b 	bl	8000210 <__aeabi_uidivmod>
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	437a      	muls	r2, r7
 8000d9e:	040b      	lsls	r3, r1, #16
 8000da0:	0c31      	lsrs	r1, r6, #16
 8000da2:	4680      	mov	r8, r0
 8000da4:	4319      	orrs	r1, r3
 8000da6:	428a      	cmp	r2, r1
 8000da8:	d90b      	bls.n	8000dc2 <__aeabi_ddiv+0x2c2>
 8000daa:	2301      	movs	r3, #1
 8000dac:	425b      	negs	r3, r3
 8000dae:	469c      	mov	ip, r3
 8000db0:	1909      	adds	r1, r1, r4
 8000db2:	44e0      	add	r8, ip
 8000db4:	428c      	cmp	r4, r1
 8000db6:	d804      	bhi.n	8000dc2 <__aeabi_ddiv+0x2c2>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d902      	bls.n	8000dc2 <__aeabi_ddiv+0x2c2>
 8000dbc:	1e83      	subs	r3, r0, #2
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	1909      	adds	r1, r1, r4
 8000dc2:	1a88      	subs	r0, r1, r2
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	f7ff fa23 	bl	8000210 <__aeabi_uidivmod>
 8000dca:	0409      	lsls	r1, r1, #16
 8000dcc:	468c      	mov	ip, r1
 8000dce:	0431      	lsls	r1, r6, #16
 8000dd0:	4666      	mov	r6, ip
 8000dd2:	9a01      	ldr	r2, [sp, #4]
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	4342      	muls	r2, r0
 8000dd8:	0003      	movs	r3, r0
 8000dda:	4331      	orrs	r1, r6
 8000ddc:	428a      	cmp	r2, r1
 8000dde:	d904      	bls.n	8000dea <__aeabi_ddiv+0x2ea>
 8000de0:	1909      	adds	r1, r1, r4
 8000de2:	3b01      	subs	r3, #1
 8000de4:	428c      	cmp	r4, r1
 8000de6:	d800      	bhi.n	8000dea <__aeabi_ddiv+0x2ea>
 8000de8:	e111      	b.n	800100e <__aeabi_ddiv+0x50e>
 8000dea:	1a89      	subs	r1, r1, r2
 8000dec:	4642      	mov	r2, r8
 8000dee:	9e00      	ldr	r6, [sp, #0]
 8000df0:	0412      	lsls	r2, r2, #16
 8000df2:	431a      	orrs	r2, r3
 8000df4:	0c33      	lsrs	r3, r6, #16
 8000df6:	001f      	movs	r7, r3
 8000df8:	0c10      	lsrs	r0, r2, #16
 8000dfa:	4690      	mov	r8, r2
 8000dfc:	9302      	str	r3, [sp, #8]
 8000dfe:	0413      	lsls	r3, r2, #16
 8000e00:	0432      	lsls	r2, r6, #16
 8000e02:	0c16      	lsrs	r6, r2, #16
 8000e04:	0032      	movs	r2, r6
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	435a      	muls	r2, r3
 8000e0a:	9603      	str	r6, [sp, #12]
 8000e0c:	437b      	muls	r3, r7
 8000e0e:	4346      	muls	r6, r0
 8000e10:	4378      	muls	r0, r7
 8000e12:	0c17      	lsrs	r7, r2, #16
 8000e14:	46bc      	mov	ip, r7
 8000e16:	199b      	adds	r3, r3, r6
 8000e18:	4463      	add	r3, ip
 8000e1a:	429e      	cmp	r6, r3
 8000e1c:	d903      	bls.n	8000e26 <__aeabi_ddiv+0x326>
 8000e1e:	2680      	movs	r6, #128	; 0x80
 8000e20:	0276      	lsls	r6, r6, #9
 8000e22:	46b4      	mov	ip, r6
 8000e24:	4460      	add	r0, ip
 8000e26:	0c1e      	lsrs	r6, r3, #16
 8000e28:	1830      	adds	r0, r6, r0
 8000e2a:	0416      	lsls	r6, r2, #16
 8000e2c:	041b      	lsls	r3, r3, #16
 8000e2e:	0c36      	lsrs	r6, r6, #16
 8000e30:	199e      	adds	r6, r3, r6
 8000e32:	4281      	cmp	r1, r0
 8000e34:	d200      	bcs.n	8000e38 <__aeabi_ddiv+0x338>
 8000e36:	e09c      	b.n	8000f72 <__aeabi_ddiv+0x472>
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x33c>
 8000e3a:	e097      	b.n	8000f6c <__aeabi_ddiv+0x46c>
 8000e3c:	1bae      	subs	r6, r5, r6
 8000e3e:	1a09      	subs	r1, r1, r0
 8000e40:	42b5      	cmp	r5, r6
 8000e42:	4180      	sbcs	r0, r0
 8000e44:	4240      	negs	r0, r0
 8000e46:	1a08      	subs	r0, r1, r0
 8000e48:	4284      	cmp	r4, r0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_ddiv+0x34e>
 8000e4c:	e111      	b.n	8001072 <__aeabi_ddiv+0x572>
 8000e4e:	4649      	mov	r1, r9
 8000e50:	f7ff f9de 	bl	8000210 <__aeabi_uidivmod>
 8000e54:	9a01      	ldr	r2, [sp, #4]
 8000e56:	040b      	lsls	r3, r1, #16
 8000e58:	4342      	muls	r2, r0
 8000e5a:	0c31      	lsrs	r1, r6, #16
 8000e5c:	0005      	movs	r5, r0
 8000e5e:	4319      	orrs	r1, r3
 8000e60:	428a      	cmp	r2, r1
 8000e62:	d907      	bls.n	8000e74 <__aeabi_ddiv+0x374>
 8000e64:	1909      	adds	r1, r1, r4
 8000e66:	3d01      	subs	r5, #1
 8000e68:	428c      	cmp	r4, r1
 8000e6a:	d803      	bhi.n	8000e74 <__aeabi_ddiv+0x374>
 8000e6c:	428a      	cmp	r2, r1
 8000e6e:	d901      	bls.n	8000e74 <__aeabi_ddiv+0x374>
 8000e70:	1e85      	subs	r5, r0, #2
 8000e72:	1909      	adds	r1, r1, r4
 8000e74:	1a88      	subs	r0, r1, r2
 8000e76:	4649      	mov	r1, r9
 8000e78:	f7ff f9ca 	bl	8000210 <__aeabi_uidivmod>
 8000e7c:	0409      	lsls	r1, r1, #16
 8000e7e:	468c      	mov	ip, r1
 8000e80:	0431      	lsls	r1, r6, #16
 8000e82:	4666      	mov	r6, ip
 8000e84:	9a01      	ldr	r2, [sp, #4]
 8000e86:	0c09      	lsrs	r1, r1, #16
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	4331      	orrs	r1, r6
 8000e8e:	428a      	cmp	r2, r1
 8000e90:	d907      	bls.n	8000ea2 <__aeabi_ddiv+0x3a2>
 8000e92:	1909      	adds	r1, r1, r4
 8000e94:	3b01      	subs	r3, #1
 8000e96:	428c      	cmp	r4, r1
 8000e98:	d803      	bhi.n	8000ea2 <__aeabi_ddiv+0x3a2>
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	d901      	bls.n	8000ea2 <__aeabi_ddiv+0x3a2>
 8000e9e:	1e83      	subs	r3, r0, #2
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	9e03      	ldr	r6, [sp, #12]
 8000ea4:	1a89      	subs	r1, r1, r2
 8000ea6:	0032      	movs	r2, r6
 8000ea8:	042d      	lsls	r5, r5, #16
 8000eaa:	431d      	orrs	r5, r3
 8000eac:	9f02      	ldr	r7, [sp, #8]
 8000eae:	042b      	lsls	r3, r5, #16
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	435a      	muls	r2, r3
 8000eb4:	437b      	muls	r3, r7
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	0c28      	lsrs	r0, r5, #16
 8000eba:	4346      	muls	r6, r0
 8000ebc:	0c13      	lsrs	r3, r2, #16
 8000ebe:	44b4      	add	ip, r6
 8000ec0:	4463      	add	r3, ip
 8000ec2:	4378      	muls	r0, r7
 8000ec4:	429e      	cmp	r6, r3
 8000ec6:	d903      	bls.n	8000ed0 <__aeabi_ddiv+0x3d0>
 8000ec8:	2680      	movs	r6, #128	; 0x80
 8000eca:	0276      	lsls	r6, r6, #9
 8000ecc:	46b4      	mov	ip, r6
 8000ece:	4460      	add	r0, ip
 8000ed0:	0c1e      	lsrs	r6, r3, #16
 8000ed2:	0412      	lsls	r2, r2, #16
 8000ed4:	041b      	lsls	r3, r3, #16
 8000ed6:	0c12      	lsrs	r2, r2, #16
 8000ed8:	1830      	adds	r0, r6, r0
 8000eda:	189b      	adds	r3, r3, r2
 8000edc:	4281      	cmp	r1, r0
 8000ede:	d306      	bcc.n	8000eee <__aeabi_ddiv+0x3ee>
 8000ee0:	d002      	beq.n	8000ee8 <__aeabi_ddiv+0x3e8>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	431d      	orrs	r5, r3
 8000ee6:	e6ce      	b.n	8000c86 <__aeabi_ddiv+0x186>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0x3ee>
 8000eec:	e6cb      	b.n	8000c86 <__aeabi_ddiv+0x186>
 8000eee:	1861      	adds	r1, r4, r1
 8000ef0:	1e6e      	subs	r6, r5, #1
 8000ef2:	42a1      	cmp	r1, r4
 8000ef4:	d200      	bcs.n	8000ef8 <__aeabi_ddiv+0x3f8>
 8000ef6:	e0a4      	b.n	8001042 <__aeabi_ddiv+0x542>
 8000ef8:	4281      	cmp	r1, r0
 8000efa:	d200      	bcs.n	8000efe <__aeabi_ddiv+0x3fe>
 8000efc:	e0c9      	b.n	8001092 <__aeabi_ddiv+0x592>
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0x402>
 8000f00:	e0d9      	b.n	80010b6 <__aeabi_ddiv+0x5b6>
 8000f02:	0035      	movs	r5, r6
 8000f04:	e7ed      	b.n	8000ee2 <__aeabi_ddiv+0x3e2>
 8000f06:	2501      	movs	r5, #1
 8000f08:	426d      	negs	r5, r5
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	1a89      	subs	r1, r1, r2
 8000f0e:	2938      	cmp	r1, #56	; 0x38
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_ddiv+0x414>
 8000f12:	e64c      	b.n	8000bae <__aeabi_ddiv+0xae>
 8000f14:	291f      	cmp	r1, #31
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_ddiv+0x41a>
 8000f18:	e07f      	b.n	800101a <__aeabi_ddiv+0x51a>
 8000f1a:	231f      	movs	r3, #31
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	1a9a      	subs	r2, r3, r2
 8000f20:	4643      	mov	r3, r8
 8000f22:	40d3      	lsrs	r3, r2
 8000f24:	2920      	cmp	r1, #32
 8000f26:	d004      	beq.n	8000f32 <__aeabi_ddiv+0x432>
 8000f28:	4644      	mov	r4, r8
 8000f2a:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <__aeabi_ddiv+0x5c0>)
 8000f2c:	445a      	add	r2, fp
 8000f2e:	4094      	lsls	r4, r2
 8000f30:	4325      	orrs	r5, r4
 8000f32:	1e6a      	subs	r2, r5, #1
 8000f34:	4195      	sbcs	r5, r2
 8000f36:	2207      	movs	r2, #7
 8000f38:	432b      	orrs	r3, r5
 8000f3a:	0015      	movs	r5, r2
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	401d      	ands	r5, r3
 8000f40:	421a      	tst	r2, r3
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0x446>
 8000f44:	e0a1      	b.n	800108a <__aeabi_ddiv+0x58a>
 8000f46:	220f      	movs	r2, #15
 8000f48:	2400      	movs	r4, #0
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	2a04      	cmp	r2, #4
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_ddiv+0x452>
 8000f50:	e098      	b.n	8001084 <__aeabi_ddiv+0x584>
 8000f52:	1d1a      	adds	r2, r3, #4
 8000f54:	429a      	cmp	r2, r3
 8000f56:	419b      	sbcs	r3, r3
 8000f58:	425b      	negs	r3, r3
 8000f5a:	18e4      	adds	r4, r4, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	0222      	lsls	r2, r4, #8
 8000f60:	d400      	bmi.n	8000f64 <__aeabi_ddiv+0x464>
 8000f62:	e08f      	b.n	8001084 <__aeabi_ddiv+0x584>
 8000f64:	2301      	movs	r3, #1
 8000f66:	2400      	movs	r4, #0
 8000f68:	2500      	movs	r5, #0
 8000f6a:	e623      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 8000f6c:	42b5      	cmp	r5, r6
 8000f6e:	d300      	bcc.n	8000f72 <__aeabi_ddiv+0x472>
 8000f70:	e764      	b.n	8000e3c <__aeabi_ddiv+0x33c>
 8000f72:	4643      	mov	r3, r8
 8000f74:	1e5a      	subs	r2, r3, #1
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	469c      	mov	ip, r3
 8000f7a:	4465      	add	r5, ip
 8000f7c:	001f      	movs	r7, r3
 8000f7e:	429d      	cmp	r5, r3
 8000f80:	419b      	sbcs	r3, r3
 8000f82:	425b      	negs	r3, r3
 8000f84:	191b      	adds	r3, r3, r4
 8000f86:	18c9      	adds	r1, r1, r3
 8000f88:	428c      	cmp	r4, r1
 8000f8a:	d23a      	bcs.n	8001002 <__aeabi_ddiv+0x502>
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	d863      	bhi.n	8001058 <__aeabi_ddiv+0x558>
 8000f90:	d060      	beq.n	8001054 <__aeabi_ddiv+0x554>
 8000f92:	4690      	mov	r8, r2
 8000f94:	e752      	b.n	8000e3c <__aeabi_ddiv+0x33c>
 8000f96:	42aa      	cmp	r2, r5
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x49c>
 8000f9a:	e6ea      	b.n	8000d72 <__aeabi_ddiv+0x272>
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	07de      	lsls	r6, r3, #31
 8000fa0:	0858      	lsrs	r0, r3, #1
 8000fa2:	086b      	lsrs	r3, r5, #1
 8000fa4:	431e      	orrs	r6, r3
 8000fa6:	07ed      	lsls	r5, r5, #31
 8000fa8:	e6ea      	b.n	8000d80 <__aeabi_ddiv+0x280>
 8000faa:	4648      	mov	r0, r9
 8000fac:	f000 ff32 	bl	8001e14 <__clzsi2>
 8000fb0:	0001      	movs	r1, r0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	3115      	adds	r1, #21
 8000fb6:	3220      	adds	r2, #32
 8000fb8:	291c      	cmp	r1, #28
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_ddiv+0x4be>
 8000fbc:	e61a      	b.n	8000bf4 <__aeabi_ddiv+0xf4>
 8000fbe:	464b      	mov	r3, r9
 8000fc0:	3808      	subs	r0, #8
 8000fc2:	4083      	lsls	r3, r0
 8000fc4:	2500      	movs	r5, #0
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	e620      	b.n	8000c0c <__aeabi_ddiv+0x10c>
 8000fca:	f000 ff23 	bl	8001e14 <__clzsi2>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	3215      	adds	r2, #21
 8000fd4:	3020      	adds	r0, #32
 8000fd6:	2a1c      	cmp	r2, #28
 8000fd8:	dc00      	bgt.n	8000fdc <__aeabi_ddiv+0x4dc>
 8000fda:	e630      	b.n	8000c3e <__aeabi_ddiv+0x13e>
 8000fdc:	4654      	mov	r4, sl
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	409c      	lsls	r4, r3
 8000fe4:	e635      	b.n	8000c52 <__aeabi_ddiv+0x152>
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	402b      	ands	r3, r5
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_ddiv+0x4f0>
 8000fee:	e652      	b.n	8000c96 <__aeabi_ddiv+0x196>
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	42ab      	cmp	r3, r5
 8000ff6:	419b      	sbcs	r3, r3
 8000ff8:	3504      	adds	r5, #4
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	08ed      	lsrs	r5, r5, #3
 8000ffe:	4498      	add	r8, r3
 8001000:	e64a      	b.n	8000c98 <__aeabi_ddiv+0x198>
 8001002:	428c      	cmp	r4, r1
 8001004:	d1c5      	bne.n	8000f92 <__aeabi_ddiv+0x492>
 8001006:	42af      	cmp	r7, r5
 8001008:	d9c0      	bls.n	8000f8c <__aeabi_ddiv+0x48c>
 800100a:	4690      	mov	r8, r2
 800100c:	e716      	b.n	8000e3c <__aeabi_ddiv+0x33c>
 800100e:	428a      	cmp	r2, r1
 8001010:	d800      	bhi.n	8001014 <__aeabi_ddiv+0x514>
 8001012:	e6ea      	b.n	8000dea <__aeabi_ddiv+0x2ea>
 8001014:	1e83      	subs	r3, r0, #2
 8001016:	1909      	adds	r1, r1, r4
 8001018:	e6e7      	b.n	8000dea <__aeabi_ddiv+0x2ea>
 800101a:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <__aeabi_ddiv+0x5c4>)
 800101c:	0028      	movs	r0, r5
 800101e:	445a      	add	r2, fp
 8001020:	4643      	mov	r3, r8
 8001022:	4095      	lsls	r5, r2
 8001024:	4093      	lsls	r3, r2
 8001026:	40c8      	lsrs	r0, r1
 8001028:	1e6a      	subs	r2, r5, #1
 800102a:	4195      	sbcs	r5, r2
 800102c:	4644      	mov	r4, r8
 800102e:	4303      	orrs	r3, r0
 8001030:	432b      	orrs	r3, r5
 8001032:	40cc      	lsrs	r4, r1
 8001034:	075a      	lsls	r2, r3, #29
 8001036:	d092      	beq.n	8000f5e <__aeabi_ddiv+0x45e>
 8001038:	220f      	movs	r2, #15
 800103a:	401a      	ands	r2, r3
 800103c:	2a04      	cmp	r2, #4
 800103e:	d188      	bne.n	8000f52 <__aeabi_ddiv+0x452>
 8001040:	e78d      	b.n	8000f5e <__aeabi_ddiv+0x45e>
 8001042:	0035      	movs	r5, r6
 8001044:	4281      	cmp	r1, r0
 8001046:	d000      	beq.n	800104a <__aeabi_ddiv+0x54a>
 8001048:	e74b      	b.n	8000ee2 <__aeabi_ddiv+0x3e2>
 800104a:	9a00      	ldr	r2, [sp, #0]
 800104c:	4293      	cmp	r3, r2
 800104e:	d000      	beq.n	8001052 <__aeabi_ddiv+0x552>
 8001050:	e747      	b.n	8000ee2 <__aeabi_ddiv+0x3e2>
 8001052:	e618      	b.n	8000c86 <__aeabi_ddiv+0x186>
 8001054:	42ae      	cmp	r6, r5
 8001056:	d99c      	bls.n	8000f92 <__aeabi_ddiv+0x492>
 8001058:	2302      	movs	r3, #2
 800105a:	425b      	negs	r3, r3
 800105c:	469c      	mov	ip, r3
 800105e:	9b00      	ldr	r3, [sp, #0]
 8001060:	44e0      	add	r8, ip
 8001062:	469c      	mov	ip, r3
 8001064:	4465      	add	r5, ip
 8001066:	429d      	cmp	r5, r3
 8001068:	419b      	sbcs	r3, r3
 800106a:	425b      	negs	r3, r3
 800106c:	191b      	adds	r3, r3, r4
 800106e:	18c9      	adds	r1, r1, r3
 8001070:	e6e4      	b.n	8000e3c <__aeabi_ddiv+0x33c>
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <__aeabi_ddiv+0x5c8>)
 8001074:	445a      	add	r2, fp
 8001076:	2a00      	cmp	r2, #0
 8001078:	dc00      	bgt.n	800107c <__aeabi_ddiv+0x57c>
 800107a:	e744      	b.n	8000f06 <__aeabi_ddiv+0x406>
 800107c:	2301      	movs	r3, #1
 800107e:	2500      	movs	r5, #0
 8001080:	4498      	add	r8, r3
 8001082:	e609      	b.n	8000c98 <__aeabi_ddiv+0x198>
 8001084:	0765      	lsls	r5, r4, #29
 8001086:	0264      	lsls	r4, r4, #9
 8001088:	0b24      	lsrs	r4, r4, #12
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	431d      	orrs	r5, r3
 800108e:	2300      	movs	r3, #0
 8001090:	e590      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 8001092:	9e00      	ldr	r6, [sp, #0]
 8001094:	3d02      	subs	r5, #2
 8001096:	0072      	lsls	r2, r6, #1
 8001098:	42b2      	cmp	r2, r6
 800109a:	41bf      	sbcs	r7, r7
 800109c:	427f      	negs	r7, r7
 800109e:	193c      	adds	r4, r7, r4
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	e7ce      	b.n	8001044 <__aeabi_ddiv+0x544>
 80010a6:	2480      	movs	r4, #128	; 0x80
 80010a8:	4643      	mov	r3, r8
 80010aa:	0324      	lsls	r4, r4, #12
 80010ac:	431c      	orrs	r4, r3
 80010ae:	0324      	lsls	r4, r4, #12
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <__aeabi_ddiv+0x5cc>)
 80010b2:	0b24      	lsrs	r4, r4, #12
 80010b4:	e57e      	b.n	8000bb4 <__aeabi_ddiv+0xb4>
 80010b6:	9a00      	ldr	r2, [sp, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3ea      	bcc.n	8001092 <__aeabi_ddiv+0x592>
 80010bc:	0035      	movs	r5, r6
 80010be:	e7c4      	b.n	800104a <__aeabi_ddiv+0x54a>
 80010c0:	0000043e 	.word	0x0000043e
 80010c4:	0000041e 	.word	0x0000041e
 80010c8:	000003ff 	.word	0x000003ff
 80010cc:	000007ff 	.word	0x000007ff

080010d0 <__aeabi_dmul>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	4657      	mov	r7, sl
 80010d4:	464e      	mov	r6, r9
 80010d6:	4645      	mov	r5, r8
 80010d8:	46de      	mov	lr, fp
 80010da:	b5e0      	push	{r5, r6, r7, lr}
 80010dc:	4698      	mov	r8, r3
 80010de:	030c      	lsls	r4, r1, #12
 80010e0:	004b      	lsls	r3, r1, #1
 80010e2:	0006      	movs	r6, r0
 80010e4:	4692      	mov	sl, r2
 80010e6:	b087      	sub	sp, #28
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	0d5b      	lsrs	r3, r3, #21
 80010ec:	0fcf      	lsrs	r7, r1, #31
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06c      	beq.n	80011cc <__aeabi_dmul+0xfc>
 80010f2:	4add      	ldr	r2, [pc, #884]	; (8001468 <__aeabi_dmul+0x398>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d100      	bne.n	80010fa <__aeabi_dmul+0x2a>
 80010f8:	e086      	b.n	8001208 <__aeabi_dmul+0x138>
 80010fa:	0f42      	lsrs	r2, r0, #29
 80010fc:	00e4      	lsls	r4, r4, #3
 80010fe:	4314      	orrs	r4, r2
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	0412      	lsls	r2, r2, #16
 8001104:	4314      	orrs	r4, r2
 8001106:	4ad9      	ldr	r2, [pc, #868]	; (800146c <__aeabi_dmul+0x39c>)
 8001108:	00c5      	lsls	r5, r0, #3
 800110a:	4694      	mov	ip, r2
 800110c:	4463      	add	r3, ip
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2300      	movs	r3, #0
 8001112:	4699      	mov	r9, r3
 8001114:	469b      	mov	fp, r3
 8001116:	4643      	mov	r3, r8
 8001118:	4642      	mov	r2, r8
 800111a:	031e      	lsls	r6, r3, #12
 800111c:	0fd2      	lsrs	r2, r2, #31
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4650      	mov	r0, sl
 8001122:	4690      	mov	r8, r2
 8001124:	0b36      	lsrs	r6, r6, #12
 8001126:	0d5b      	lsrs	r3, r3, #21
 8001128:	d100      	bne.n	800112c <__aeabi_dmul+0x5c>
 800112a:	e078      	b.n	800121e <__aeabi_dmul+0x14e>
 800112c:	4ace      	ldr	r2, [pc, #824]	; (8001468 <__aeabi_dmul+0x398>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01d      	beq.n	800116e <__aeabi_dmul+0x9e>
 8001132:	49ce      	ldr	r1, [pc, #824]	; (800146c <__aeabi_dmul+0x39c>)
 8001134:	0f42      	lsrs	r2, r0, #29
 8001136:	468c      	mov	ip, r1
 8001138:	9900      	ldr	r1, [sp, #0]
 800113a:	4463      	add	r3, ip
 800113c:	00f6      	lsls	r6, r6, #3
 800113e:	468c      	mov	ip, r1
 8001140:	4316      	orrs	r6, r2
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	449c      	add	ip, r3
 8001146:	0412      	lsls	r2, r2, #16
 8001148:	4663      	mov	r3, ip
 800114a:	4316      	orrs	r6, r2
 800114c:	00c2      	lsls	r2, r0, #3
 800114e:	2000      	movs	r0, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	9900      	ldr	r1, [sp, #0]
 8001154:	4643      	mov	r3, r8
 8001156:	3101      	adds	r1, #1
 8001158:	468c      	mov	ip, r1
 800115a:	4649      	mov	r1, r9
 800115c:	407b      	eors	r3, r7
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	290f      	cmp	r1, #15
 8001162:	d900      	bls.n	8001166 <__aeabi_dmul+0x96>
 8001164:	e07e      	b.n	8001264 <__aeabi_dmul+0x194>
 8001166:	4bc2      	ldr	r3, [pc, #776]	; (8001470 <__aeabi_dmul+0x3a0>)
 8001168:	0089      	lsls	r1, r1, #2
 800116a:	5859      	ldr	r1, [r3, r1]
 800116c:	468f      	mov	pc, r1
 800116e:	4652      	mov	r2, sl
 8001170:	9b00      	ldr	r3, [sp, #0]
 8001172:	4332      	orrs	r2, r6
 8001174:	d000      	beq.n	8001178 <__aeabi_dmul+0xa8>
 8001176:	e156      	b.n	8001426 <__aeabi_dmul+0x356>
 8001178:	49bb      	ldr	r1, [pc, #748]	; (8001468 <__aeabi_dmul+0x398>)
 800117a:	2600      	movs	r6, #0
 800117c:	468c      	mov	ip, r1
 800117e:	4463      	add	r3, ip
 8001180:	4649      	mov	r1, r9
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2302      	movs	r3, #2
 8001186:	4319      	orrs	r1, r3
 8001188:	4689      	mov	r9, r1
 800118a:	2002      	movs	r0, #2
 800118c:	e7e1      	b.n	8001152 <__aeabi_dmul+0x82>
 800118e:	4643      	mov	r3, r8
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	0034      	movs	r4, r6
 8001194:	0015      	movs	r5, r2
 8001196:	4683      	mov	fp, r0
 8001198:	465b      	mov	r3, fp
 800119a:	2b02      	cmp	r3, #2
 800119c:	d05e      	beq.n	800125c <__aeabi_dmul+0x18c>
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dmul+0xd4>
 80011a2:	e1f3      	b.n	800158c <__aeabi_dmul+0x4bc>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d000      	beq.n	80011aa <__aeabi_dmul+0xda>
 80011a8:	e118      	b.n	80013dc <__aeabi_dmul+0x30c>
 80011aa:	2200      	movs	r2, #0
 80011ac:	2400      	movs	r4, #0
 80011ae:	2500      	movs	r5, #0
 80011b0:	9b01      	ldr	r3, [sp, #4]
 80011b2:	0512      	lsls	r2, r2, #20
 80011b4:	4322      	orrs	r2, r4
 80011b6:	07db      	lsls	r3, r3, #31
 80011b8:	431a      	orrs	r2, r3
 80011ba:	0028      	movs	r0, r5
 80011bc:	0011      	movs	r1, r2
 80011be:	b007      	add	sp, #28
 80011c0:	bcf0      	pop	{r4, r5, r6, r7}
 80011c2:	46bb      	mov	fp, r7
 80011c4:	46b2      	mov	sl, r6
 80011c6:	46a9      	mov	r9, r5
 80011c8:	46a0      	mov	r8, r4
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	0025      	movs	r5, r4
 80011ce:	4305      	orrs	r5, r0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dmul+0x104>
 80011d2:	e141      	b.n	8001458 <__aeabi_dmul+0x388>
 80011d4:	2c00      	cmp	r4, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_dmul+0x10a>
 80011d8:	e1ad      	b.n	8001536 <__aeabi_dmul+0x466>
 80011da:	0020      	movs	r0, r4
 80011dc:	f000 fe1a 	bl	8001e14 <__clzsi2>
 80011e0:	0001      	movs	r1, r0
 80011e2:	0002      	movs	r2, r0
 80011e4:	390b      	subs	r1, #11
 80011e6:	231d      	movs	r3, #29
 80011e8:	0010      	movs	r0, r2
 80011ea:	1a5b      	subs	r3, r3, r1
 80011ec:	0031      	movs	r1, r6
 80011ee:	0035      	movs	r5, r6
 80011f0:	3808      	subs	r0, #8
 80011f2:	4084      	lsls	r4, r0
 80011f4:	40d9      	lsrs	r1, r3
 80011f6:	4085      	lsls	r5, r0
 80011f8:	430c      	orrs	r4, r1
 80011fa:	489e      	ldr	r0, [pc, #632]	; (8001474 <__aeabi_dmul+0x3a4>)
 80011fc:	1a83      	subs	r3, r0, r2
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	4699      	mov	r9, r3
 8001204:	469b      	mov	fp, r3
 8001206:	e786      	b.n	8001116 <__aeabi_dmul+0x46>
 8001208:	0005      	movs	r5, r0
 800120a:	4325      	orrs	r5, r4
 800120c:	d000      	beq.n	8001210 <__aeabi_dmul+0x140>
 800120e:	e11c      	b.n	800144a <__aeabi_dmul+0x37a>
 8001210:	2208      	movs	r2, #8
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2302      	movs	r3, #2
 8001216:	2400      	movs	r4, #0
 8001218:	4691      	mov	r9, r2
 800121a:	469b      	mov	fp, r3
 800121c:	e77b      	b.n	8001116 <__aeabi_dmul+0x46>
 800121e:	4652      	mov	r2, sl
 8001220:	4332      	orrs	r2, r6
 8001222:	d100      	bne.n	8001226 <__aeabi_dmul+0x156>
 8001224:	e10a      	b.n	800143c <__aeabi_dmul+0x36c>
 8001226:	2e00      	cmp	r6, #0
 8001228:	d100      	bne.n	800122c <__aeabi_dmul+0x15c>
 800122a:	e176      	b.n	800151a <__aeabi_dmul+0x44a>
 800122c:	0030      	movs	r0, r6
 800122e:	f000 fdf1 	bl	8001e14 <__clzsi2>
 8001232:	0002      	movs	r2, r0
 8001234:	3a0b      	subs	r2, #11
 8001236:	231d      	movs	r3, #29
 8001238:	0001      	movs	r1, r0
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	4652      	mov	r2, sl
 800123e:	3908      	subs	r1, #8
 8001240:	40da      	lsrs	r2, r3
 8001242:	408e      	lsls	r6, r1
 8001244:	4316      	orrs	r6, r2
 8001246:	4652      	mov	r2, sl
 8001248:	408a      	lsls	r2, r1
 800124a:	9b00      	ldr	r3, [sp, #0]
 800124c:	4989      	ldr	r1, [pc, #548]	; (8001474 <__aeabi_dmul+0x3a4>)
 800124e:	1a18      	subs	r0, r3, r0
 8001250:	0003      	movs	r3, r0
 8001252:	468c      	mov	ip, r1
 8001254:	4463      	add	r3, ip
 8001256:	2000      	movs	r0, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	e77a      	b.n	8001152 <__aeabi_dmul+0x82>
 800125c:	2400      	movs	r4, #0
 800125e:	2500      	movs	r5, #0
 8001260:	4a81      	ldr	r2, [pc, #516]	; (8001468 <__aeabi_dmul+0x398>)
 8001262:	e7a5      	b.n	80011b0 <__aeabi_dmul+0xe0>
 8001264:	0c2f      	lsrs	r7, r5, #16
 8001266:	042d      	lsls	r5, r5, #16
 8001268:	0c2d      	lsrs	r5, r5, #16
 800126a:	002b      	movs	r3, r5
 800126c:	0c11      	lsrs	r1, r2, #16
 800126e:	0412      	lsls	r2, r2, #16
 8001270:	0c12      	lsrs	r2, r2, #16
 8001272:	4353      	muls	r3, r2
 8001274:	4698      	mov	r8, r3
 8001276:	0013      	movs	r3, r2
 8001278:	0028      	movs	r0, r5
 800127a:	437b      	muls	r3, r7
 800127c:	4699      	mov	r9, r3
 800127e:	4348      	muls	r0, r1
 8001280:	4448      	add	r0, r9
 8001282:	4683      	mov	fp, r0
 8001284:	4640      	mov	r0, r8
 8001286:	000b      	movs	r3, r1
 8001288:	0c00      	lsrs	r0, r0, #16
 800128a:	4682      	mov	sl, r0
 800128c:	4658      	mov	r0, fp
 800128e:	437b      	muls	r3, r7
 8001290:	4450      	add	r0, sl
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	4581      	cmp	r9, r0
 8001296:	d906      	bls.n	80012a6 <__aeabi_dmul+0x1d6>
 8001298:	469a      	mov	sl, r3
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	025b      	lsls	r3, r3, #9
 800129e:	4699      	mov	r9, r3
 80012a0:	44ca      	add	sl, r9
 80012a2:	4653      	mov	r3, sl
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	0c03      	lsrs	r3, r0, #16
 80012a8:	469b      	mov	fp, r3
 80012aa:	4643      	mov	r3, r8
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	0400      	lsls	r0, r0, #16
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	4698      	mov	r8, r3
 80012b4:	0003      	movs	r3, r0
 80012b6:	4443      	add	r3, r8
 80012b8:	9304      	str	r3, [sp, #16]
 80012ba:	0c33      	lsrs	r3, r6, #16
 80012bc:	4699      	mov	r9, r3
 80012be:	002b      	movs	r3, r5
 80012c0:	0436      	lsls	r6, r6, #16
 80012c2:	0c36      	lsrs	r6, r6, #16
 80012c4:	4373      	muls	r3, r6
 80012c6:	4698      	mov	r8, r3
 80012c8:	0033      	movs	r3, r6
 80012ca:	437b      	muls	r3, r7
 80012cc:	469a      	mov	sl, r3
 80012ce:	464b      	mov	r3, r9
 80012d0:	435d      	muls	r5, r3
 80012d2:	435f      	muls	r7, r3
 80012d4:	4643      	mov	r3, r8
 80012d6:	4455      	add	r5, sl
 80012d8:	0c18      	lsrs	r0, r3, #16
 80012da:	1940      	adds	r0, r0, r5
 80012dc:	4582      	cmp	sl, r0
 80012de:	d903      	bls.n	80012e8 <__aeabi_dmul+0x218>
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	025b      	lsls	r3, r3, #9
 80012e4:	469a      	mov	sl, r3
 80012e6:	4457      	add	r7, sl
 80012e8:	0c05      	lsrs	r5, r0, #16
 80012ea:	19eb      	adds	r3, r5, r7
 80012ec:	9305      	str	r3, [sp, #20]
 80012ee:	4643      	mov	r3, r8
 80012f0:	041d      	lsls	r5, r3, #16
 80012f2:	0c2d      	lsrs	r5, r5, #16
 80012f4:	0400      	lsls	r0, r0, #16
 80012f6:	1940      	adds	r0, r0, r5
 80012f8:	0c25      	lsrs	r5, r4, #16
 80012fa:	0424      	lsls	r4, r4, #16
 80012fc:	0c24      	lsrs	r4, r4, #16
 80012fe:	0027      	movs	r7, r4
 8001300:	4357      	muls	r7, r2
 8001302:	436a      	muls	r2, r5
 8001304:	4690      	mov	r8, r2
 8001306:	002a      	movs	r2, r5
 8001308:	0c3b      	lsrs	r3, r7, #16
 800130a:	469a      	mov	sl, r3
 800130c:	434a      	muls	r2, r1
 800130e:	4361      	muls	r1, r4
 8001310:	4441      	add	r1, r8
 8001312:	4451      	add	r1, sl
 8001314:	4483      	add	fp, r0
 8001316:	4588      	cmp	r8, r1
 8001318:	d903      	bls.n	8001322 <__aeabi_dmul+0x252>
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	025b      	lsls	r3, r3, #9
 800131e:	4698      	mov	r8, r3
 8001320:	4442      	add	r2, r8
 8001322:	043f      	lsls	r7, r7, #16
 8001324:	0c0b      	lsrs	r3, r1, #16
 8001326:	0c3f      	lsrs	r7, r7, #16
 8001328:	0409      	lsls	r1, r1, #16
 800132a:	19c9      	adds	r1, r1, r7
 800132c:	0027      	movs	r7, r4
 800132e:	4698      	mov	r8, r3
 8001330:	464b      	mov	r3, r9
 8001332:	4377      	muls	r7, r6
 8001334:	435c      	muls	r4, r3
 8001336:	436e      	muls	r6, r5
 8001338:	435d      	muls	r5, r3
 800133a:	0c3b      	lsrs	r3, r7, #16
 800133c:	4699      	mov	r9, r3
 800133e:	19a4      	adds	r4, r4, r6
 8001340:	444c      	add	r4, r9
 8001342:	4442      	add	r2, r8
 8001344:	9503      	str	r5, [sp, #12]
 8001346:	42a6      	cmp	r6, r4
 8001348:	d904      	bls.n	8001354 <__aeabi_dmul+0x284>
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	4698      	mov	r8, r3
 8001350:	4445      	add	r5, r8
 8001352:	9503      	str	r5, [sp, #12]
 8001354:	9b02      	ldr	r3, [sp, #8]
 8001356:	043f      	lsls	r7, r7, #16
 8001358:	445b      	add	r3, fp
 800135a:	001e      	movs	r6, r3
 800135c:	4283      	cmp	r3, r0
 800135e:	4180      	sbcs	r0, r0
 8001360:	0423      	lsls	r3, r4, #16
 8001362:	4698      	mov	r8, r3
 8001364:	9b05      	ldr	r3, [sp, #20]
 8001366:	0c3f      	lsrs	r7, r7, #16
 8001368:	4447      	add	r7, r8
 800136a:	4698      	mov	r8, r3
 800136c:	1876      	adds	r6, r6, r1
 800136e:	428e      	cmp	r6, r1
 8001370:	4189      	sbcs	r1, r1
 8001372:	4447      	add	r7, r8
 8001374:	4240      	negs	r0, r0
 8001376:	183d      	adds	r5, r7, r0
 8001378:	46a8      	mov	r8, r5
 800137a:	4693      	mov	fp, r2
 800137c:	4249      	negs	r1, r1
 800137e:	468a      	mov	sl, r1
 8001380:	44c3      	add	fp, r8
 8001382:	429f      	cmp	r7, r3
 8001384:	41bf      	sbcs	r7, r7
 8001386:	4580      	cmp	r8, r0
 8001388:	4180      	sbcs	r0, r0
 800138a:	9b03      	ldr	r3, [sp, #12]
 800138c:	44da      	add	sl, fp
 800138e:	4698      	mov	r8, r3
 8001390:	4653      	mov	r3, sl
 8001392:	4240      	negs	r0, r0
 8001394:	427f      	negs	r7, r7
 8001396:	4307      	orrs	r7, r0
 8001398:	0c24      	lsrs	r4, r4, #16
 800139a:	4593      	cmp	fp, r2
 800139c:	4192      	sbcs	r2, r2
 800139e:	458a      	cmp	sl, r1
 80013a0:	4189      	sbcs	r1, r1
 80013a2:	193f      	adds	r7, r7, r4
 80013a4:	0ddc      	lsrs	r4, r3, #23
 80013a6:	9b04      	ldr	r3, [sp, #16]
 80013a8:	0275      	lsls	r5, r6, #9
 80013aa:	431d      	orrs	r5, r3
 80013ac:	1e68      	subs	r0, r5, #1
 80013ae:	4185      	sbcs	r5, r0
 80013b0:	4653      	mov	r3, sl
 80013b2:	4252      	negs	r2, r2
 80013b4:	4249      	negs	r1, r1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	18bf      	adds	r7, r7, r2
 80013ba:	4447      	add	r7, r8
 80013bc:	0df6      	lsrs	r6, r6, #23
 80013be:	027f      	lsls	r7, r7, #9
 80013c0:	4335      	orrs	r5, r6
 80013c2:	025a      	lsls	r2, r3, #9
 80013c4:	433c      	orrs	r4, r7
 80013c6:	4315      	orrs	r5, r2
 80013c8:	01fb      	lsls	r3, r7, #7
 80013ca:	d400      	bmi.n	80013ce <__aeabi_dmul+0x2fe>
 80013cc:	e0c1      	b.n	8001552 <__aeabi_dmul+0x482>
 80013ce:	2101      	movs	r1, #1
 80013d0:	086a      	lsrs	r2, r5, #1
 80013d2:	400d      	ands	r5, r1
 80013d4:	4315      	orrs	r5, r2
 80013d6:	07e2      	lsls	r2, r4, #31
 80013d8:	4315      	orrs	r5, r2
 80013da:	0864      	lsrs	r4, r4, #1
 80013dc:	4926      	ldr	r1, [pc, #152]	; (8001478 <__aeabi_dmul+0x3a8>)
 80013de:	4461      	add	r1, ip
 80013e0:	2900      	cmp	r1, #0
 80013e2:	dd56      	ble.n	8001492 <__aeabi_dmul+0x3c2>
 80013e4:	076b      	lsls	r3, r5, #29
 80013e6:	d009      	beq.n	80013fc <__aeabi_dmul+0x32c>
 80013e8:	220f      	movs	r2, #15
 80013ea:	402a      	ands	r2, r5
 80013ec:	2a04      	cmp	r2, #4
 80013ee:	d005      	beq.n	80013fc <__aeabi_dmul+0x32c>
 80013f0:	1d2a      	adds	r2, r5, #4
 80013f2:	42aa      	cmp	r2, r5
 80013f4:	41ad      	sbcs	r5, r5
 80013f6:	426d      	negs	r5, r5
 80013f8:	1964      	adds	r4, r4, r5
 80013fa:	0015      	movs	r5, r2
 80013fc:	01e3      	lsls	r3, r4, #7
 80013fe:	d504      	bpl.n	800140a <__aeabi_dmul+0x33a>
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <__aeabi_dmul+0x3ac>)
 8001404:	00c9      	lsls	r1, r1, #3
 8001406:	4014      	ands	r4, r2
 8001408:	4461      	add	r1, ip
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <__aeabi_dmul+0x3b0>)
 800140c:	4291      	cmp	r1, r2
 800140e:	dd00      	ble.n	8001412 <__aeabi_dmul+0x342>
 8001410:	e724      	b.n	800125c <__aeabi_dmul+0x18c>
 8001412:	0762      	lsls	r2, r4, #29
 8001414:	08ed      	lsrs	r5, r5, #3
 8001416:	0264      	lsls	r4, r4, #9
 8001418:	0549      	lsls	r1, r1, #21
 800141a:	4315      	orrs	r5, r2
 800141c:	0b24      	lsrs	r4, r4, #12
 800141e:	0d4a      	lsrs	r2, r1, #21
 8001420:	e6c6      	b.n	80011b0 <__aeabi_dmul+0xe0>
 8001422:	9701      	str	r7, [sp, #4]
 8001424:	e6b8      	b.n	8001198 <__aeabi_dmul+0xc8>
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <__aeabi_dmul+0x398>)
 8001428:	2003      	movs	r0, #3
 800142a:	4694      	mov	ip, r2
 800142c:	4463      	add	r3, ip
 800142e:	464a      	mov	r2, r9
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2303      	movs	r3, #3
 8001434:	431a      	orrs	r2, r3
 8001436:	4691      	mov	r9, r2
 8001438:	4652      	mov	r2, sl
 800143a:	e68a      	b.n	8001152 <__aeabi_dmul+0x82>
 800143c:	4649      	mov	r1, r9
 800143e:	2301      	movs	r3, #1
 8001440:	4319      	orrs	r1, r3
 8001442:	4689      	mov	r9, r1
 8001444:	2600      	movs	r6, #0
 8001446:	2001      	movs	r0, #1
 8001448:	e683      	b.n	8001152 <__aeabi_dmul+0x82>
 800144a:	220c      	movs	r2, #12
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2303      	movs	r3, #3
 8001450:	0005      	movs	r5, r0
 8001452:	4691      	mov	r9, r2
 8001454:	469b      	mov	fp, r3
 8001456:	e65e      	b.n	8001116 <__aeabi_dmul+0x46>
 8001458:	2304      	movs	r3, #4
 800145a:	4699      	mov	r9, r3
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	2400      	movs	r4, #0
 8001464:	469b      	mov	fp, r3
 8001466:	e656      	b.n	8001116 <__aeabi_dmul+0x46>
 8001468:	000007ff 	.word	0x000007ff
 800146c:	fffffc01 	.word	0xfffffc01
 8001470:	0800b060 	.word	0x0800b060
 8001474:	fffffc0d 	.word	0xfffffc0d
 8001478:	000003ff 	.word	0x000003ff
 800147c:	feffffff 	.word	0xfeffffff
 8001480:	000007fe 	.word	0x000007fe
 8001484:	2300      	movs	r3, #0
 8001486:	2480      	movs	r4, #128	; 0x80
 8001488:	2500      	movs	r5, #0
 800148a:	4a44      	ldr	r2, [pc, #272]	; (800159c <__aeabi_dmul+0x4cc>)
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	0324      	lsls	r4, r4, #12
 8001490:	e68e      	b.n	80011b0 <__aeabi_dmul+0xe0>
 8001492:	2001      	movs	r0, #1
 8001494:	1a40      	subs	r0, r0, r1
 8001496:	2838      	cmp	r0, #56	; 0x38
 8001498:	dd00      	ble.n	800149c <__aeabi_dmul+0x3cc>
 800149a:	e686      	b.n	80011aa <__aeabi_dmul+0xda>
 800149c:	281f      	cmp	r0, #31
 800149e:	dd5b      	ble.n	8001558 <__aeabi_dmul+0x488>
 80014a0:	221f      	movs	r2, #31
 80014a2:	0023      	movs	r3, r4
 80014a4:	4252      	negs	r2, r2
 80014a6:	1a51      	subs	r1, r2, r1
 80014a8:	40cb      	lsrs	r3, r1
 80014aa:	0019      	movs	r1, r3
 80014ac:	2820      	cmp	r0, #32
 80014ae:	d003      	beq.n	80014b8 <__aeabi_dmul+0x3e8>
 80014b0:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <__aeabi_dmul+0x4d0>)
 80014b2:	4462      	add	r2, ip
 80014b4:	4094      	lsls	r4, r2
 80014b6:	4325      	orrs	r5, r4
 80014b8:	1e6a      	subs	r2, r5, #1
 80014ba:	4195      	sbcs	r5, r2
 80014bc:	002a      	movs	r2, r5
 80014be:	430a      	orrs	r2, r1
 80014c0:	2107      	movs	r1, #7
 80014c2:	000d      	movs	r5, r1
 80014c4:	2400      	movs	r4, #0
 80014c6:	4015      	ands	r5, r2
 80014c8:	4211      	tst	r1, r2
 80014ca:	d05b      	beq.n	8001584 <__aeabi_dmul+0x4b4>
 80014cc:	210f      	movs	r1, #15
 80014ce:	2400      	movs	r4, #0
 80014d0:	4011      	ands	r1, r2
 80014d2:	2904      	cmp	r1, #4
 80014d4:	d053      	beq.n	800157e <__aeabi_dmul+0x4ae>
 80014d6:	1d11      	adds	r1, r2, #4
 80014d8:	4291      	cmp	r1, r2
 80014da:	4192      	sbcs	r2, r2
 80014dc:	4252      	negs	r2, r2
 80014de:	18a4      	adds	r4, r4, r2
 80014e0:	000a      	movs	r2, r1
 80014e2:	0223      	lsls	r3, r4, #8
 80014e4:	d54b      	bpl.n	800157e <__aeabi_dmul+0x4ae>
 80014e6:	2201      	movs	r2, #1
 80014e8:	2400      	movs	r4, #0
 80014ea:	2500      	movs	r5, #0
 80014ec:	e660      	b.n	80011b0 <__aeabi_dmul+0xe0>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	031b      	lsls	r3, r3, #12
 80014f2:	421c      	tst	r4, r3
 80014f4:	d009      	beq.n	800150a <__aeabi_dmul+0x43a>
 80014f6:	421e      	tst	r6, r3
 80014f8:	d107      	bne.n	800150a <__aeabi_dmul+0x43a>
 80014fa:	4333      	orrs	r3, r6
 80014fc:	031c      	lsls	r4, r3, #12
 80014fe:	4643      	mov	r3, r8
 8001500:	0015      	movs	r5, r2
 8001502:	0b24      	lsrs	r4, r4, #12
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <__aeabi_dmul+0x4cc>)
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	e652      	b.n	80011b0 <__aeabi_dmul+0xe0>
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	0312      	lsls	r2, r2, #12
 800150e:	4314      	orrs	r4, r2
 8001510:	0324      	lsls	r4, r4, #12
 8001512:	4a22      	ldr	r2, [pc, #136]	; (800159c <__aeabi_dmul+0x4cc>)
 8001514:	0b24      	lsrs	r4, r4, #12
 8001516:	9701      	str	r7, [sp, #4]
 8001518:	e64a      	b.n	80011b0 <__aeabi_dmul+0xe0>
 800151a:	f000 fc7b 	bl	8001e14 <__clzsi2>
 800151e:	0003      	movs	r3, r0
 8001520:	001a      	movs	r2, r3
 8001522:	3215      	adds	r2, #21
 8001524:	3020      	adds	r0, #32
 8001526:	2a1c      	cmp	r2, #28
 8001528:	dc00      	bgt.n	800152c <__aeabi_dmul+0x45c>
 800152a:	e684      	b.n	8001236 <__aeabi_dmul+0x166>
 800152c:	4656      	mov	r6, sl
 800152e:	3b08      	subs	r3, #8
 8001530:	2200      	movs	r2, #0
 8001532:	409e      	lsls	r6, r3
 8001534:	e689      	b.n	800124a <__aeabi_dmul+0x17a>
 8001536:	f000 fc6d 	bl	8001e14 <__clzsi2>
 800153a:	0001      	movs	r1, r0
 800153c:	0002      	movs	r2, r0
 800153e:	3115      	adds	r1, #21
 8001540:	3220      	adds	r2, #32
 8001542:	291c      	cmp	r1, #28
 8001544:	dc00      	bgt.n	8001548 <__aeabi_dmul+0x478>
 8001546:	e64e      	b.n	80011e6 <__aeabi_dmul+0x116>
 8001548:	0034      	movs	r4, r6
 800154a:	3808      	subs	r0, #8
 800154c:	2500      	movs	r5, #0
 800154e:	4084      	lsls	r4, r0
 8001550:	e653      	b.n	80011fa <__aeabi_dmul+0x12a>
 8001552:	9b00      	ldr	r3, [sp, #0]
 8001554:	469c      	mov	ip, r3
 8001556:	e741      	b.n	80013dc <__aeabi_dmul+0x30c>
 8001558:	4912      	ldr	r1, [pc, #72]	; (80015a4 <__aeabi_dmul+0x4d4>)
 800155a:	0022      	movs	r2, r4
 800155c:	4461      	add	r1, ip
 800155e:	002e      	movs	r6, r5
 8001560:	408d      	lsls	r5, r1
 8001562:	408a      	lsls	r2, r1
 8001564:	40c6      	lsrs	r6, r0
 8001566:	1e69      	subs	r1, r5, #1
 8001568:	418d      	sbcs	r5, r1
 800156a:	4332      	orrs	r2, r6
 800156c:	432a      	orrs	r2, r5
 800156e:	40c4      	lsrs	r4, r0
 8001570:	0753      	lsls	r3, r2, #29
 8001572:	d0b6      	beq.n	80014e2 <__aeabi_dmul+0x412>
 8001574:	210f      	movs	r1, #15
 8001576:	4011      	ands	r1, r2
 8001578:	2904      	cmp	r1, #4
 800157a:	d1ac      	bne.n	80014d6 <__aeabi_dmul+0x406>
 800157c:	e7b1      	b.n	80014e2 <__aeabi_dmul+0x412>
 800157e:	0765      	lsls	r5, r4, #29
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0b24      	lsrs	r4, r4, #12
 8001584:	08d2      	lsrs	r2, r2, #3
 8001586:	4315      	orrs	r5, r2
 8001588:	2200      	movs	r2, #0
 800158a:	e611      	b.n	80011b0 <__aeabi_dmul+0xe0>
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0312      	lsls	r2, r2, #12
 8001590:	4314      	orrs	r4, r2
 8001592:	0324      	lsls	r4, r4, #12
 8001594:	4a01      	ldr	r2, [pc, #4]	; (800159c <__aeabi_dmul+0x4cc>)
 8001596:	0b24      	lsrs	r4, r4, #12
 8001598:	e60a      	b.n	80011b0 <__aeabi_dmul+0xe0>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	0000043e 	.word	0x0000043e
 80015a4:	0000041e 	.word	0x0000041e

080015a8 <__aeabi_dsub>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	4657      	mov	r7, sl
 80015ac:	464e      	mov	r6, r9
 80015ae:	4645      	mov	r5, r8
 80015b0:	46de      	mov	lr, fp
 80015b2:	0004      	movs	r4, r0
 80015b4:	b5e0      	push	{r5, r6, r7, lr}
 80015b6:	001f      	movs	r7, r3
 80015b8:	0010      	movs	r0, r2
 80015ba:	030b      	lsls	r3, r1, #12
 80015bc:	0f62      	lsrs	r2, r4, #29
 80015be:	004e      	lsls	r6, r1, #1
 80015c0:	0fcd      	lsrs	r5, r1, #31
 80015c2:	0a5b      	lsrs	r3, r3, #9
 80015c4:	0339      	lsls	r1, r7, #12
 80015c6:	4313      	orrs	r3, r2
 80015c8:	0a49      	lsrs	r1, r1, #9
 80015ca:	00e2      	lsls	r2, r4, #3
 80015cc:	0f44      	lsrs	r4, r0, #29
 80015ce:	4321      	orrs	r1, r4
 80015d0:	4cc2      	ldr	r4, [pc, #776]	; (80018dc <__aeabi_dsub+0x334>)
 80015d2:	4691      	mov	r9, r2
 80015d4:	4692      	mov	sl, r2
 80015d6:	00c0      	lsls	r0, r0, #3
 80015d8:	007a      	lsls	r2, r7, #1
 80015da:	4680      	mov	r8, r0
 80015dc:	0d76      	lsrs	r6, r6, #21
 80015de:	0d52      	lsrs	r2, r2, #21
 80015e0:	0fff      	lsrs	r7, r7, #31
 80015e2:	42a2      	cmp	r2, r4
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dsub+0x40>
 80015e6:	e0b4      	b.n	8001752 <__aeabi_dsub+0x1aa>
 80015e8:	2401      	movs	r4, #1
 80015ea:	4067      	eors	r7, r4
 80015ec:	46bb      	mov	fp, r7
 80015ee:	42bd      	cmp	r5, r7
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dsub+0x4c>
 80015f2:	e088      	b.n	8001706 <__aeabi_dsub+0x15e>
 80015f4:	1ab4      	subs	r4, r6, r2
 80015f6:	46a4      	mov	ip, r4
 80015f8:	2c00      	cmp	r4, #0
 80015fa:	dc00      	bgt.n	80015fe <__aeabi_dsub+0x56>
 80015fc:	e0b2      	b.n	8001764 <__aeabi_dsub+0x1bc>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d100      	bne.n	8001604 <__aeabi_dsub+0x5c>
 8001602:	e0c5      	b.n	8001790 <__aeabi_dsub+0x1e8>
 8001604:	4ab5      	ldr	r2, [pc, #724]	; (80018dc <__aeabi_dsub+0x334>)
 8001606:	4296      	cmp	r6, r2
 8001608:	d100      	bne.n	800160c <__aeabi_dsub+0x64>
 800160a:	e28b      	b.n	8001b24 <__aeabi_dsub+0x57c>
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	0412      	lsls	r2, r2, #16
 8001610:	4311      	orrs	r1, r2
 8001612:	4662      	mov	r2, ip
 8001614:	2a38      	cmp	r2, #56	; 0x38
 8001616:	dd00      	ble.n	800161a <__aeabi_dsub+0x72>
 8001618:	e1a1      	b.n	800195e <__aeabi_dsub+0x3b6>
 800161a:	2a1f      	cmp	r2, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dsub+0x78>
 800161e:	e216      	b.n	8001a4e <__aeabi_dsub+0x4a6>
 8001620:	2720      	movs	r7, #32
 8001622:	000c      	movs	r4, r1
 8001624:	1abf      	subs	r7, r7, r2
 8001626:	40bc      	lsls	r4, r7
 8001628:	0002      	movs	r2, r0
 800162a:	46a0      	mov	r8, r4
 800162c:	4664      	mov	r4, ip
 800162e:	40b8      	lsls	r0, r7
 8001630:	40e2      	lsrs	r2, r4
 8001632:	4644      	mov	r4, r8
 8001634:	4314      	orrs	r4, r2
 8001636:	0002      	movs	r2, r0
 8001638:	1e50      	subs	r0, r2, #1
 800163a:	4182      	sbcs	r2, r0
 800163c:	4660      	mov	r0, ip
 800163e:	40c1      	lsrs	r1, r0
 8001640:	4322      	orrs	r2, r4
 8001642:	1a5b      	subs	r3, r3, r1
 8001644:	4649      	mov	r1, r9
 8001646:	1a8c      	subs	r4, r1, r2
 8001648:	45a1      	cmp	r9, r4
 800164a:	4192      	sbcs	r2, r2
 800164c:	4252      	negs	r2, r2
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	4698      	mov	r8, r3
 8001652:	4643      	mov	r3, r8
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	d400      	bmi.n	800165a <__aeabi_dsub+0xb2>
 8001658:	e117      	b.n	800188a <__aeabi_dsub+0x2e2>
 800165a:	4643      	mov	r3, r8
 800165c:	025b      	lsls	r3, r3, #9
 800165e:	0a5b      	lsrs	r3, r3, #9
 8001660:	4698      	mov	r8, r3
 8001662:	4643      	mov	r3, r8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dsub+0xc2>
 8001668:	e16c      	b.n	8001944 <__aeabi_dsub+0x39c>
 800166a:	4640      	mov	r0, r8
 800166c:	f000 fbd2 	bl	8001e14 <__clzsi2>
 8001670:	0002      	movs	r2, r0
 8001672:	3a08      	subs	r2, #8
 8001674:	2120      	movs	r1, #32
 8001676:	0020      	movs	r0, r4
 8001678:	4643      	mov	r3, r8
 800167a:	1a89      	subs	r1, r1, r2
 800167c:	4093      	lsls	r3, r2
 800167e:	40c8      	lsrs	r0, r1
 8001680:	4094      	lsls	r4, r2
 8001682:	4303      	orrs	r3, r0
 8001684:	4296      	cmp	r6, r2
 8001686:	dd00      	ble.n	800168a <__aeabi_dsub+0xe2>
 8001688:	e157      	b.n	800193a <__aeabi_dsub+0x392>
 800168a:	1b96      	subs	r6, r2, r6
 800168c:	1c71      	adds	r1, r6, #1
 800168e:	291f      	cmp	r1, #31
 8001690:	dd00      	ble.n	8001694 <__aeabi_dsub+0xec>
 8001692:	e1cb      	b.n	8001a2c <__aeabi_dsub+0x484>
 8001694:	2220      	movs	r2, #32
 8001696:	0018      	movs	r0, r3
 8001698:	0026      	movs	r6, r4
 800169a:	1a52      	subs	r2, r2, r1
 800169c:	4094      	lsls	r4, r2
 800169e:	4090      	lsls	r0, r2
 80016a0:	40ce      	lsrs	r6, r1
 80016a2:	40cb      	lsrs	r3, r1
 80016a4:	1e62      	subs	r2, r4, #1
 80016a6:	4194      	sbcs	r4, r2
 80016a8:	4330      	orrs	r0, r6
 80016aa:	4698      	mov	r8, r3
 80016ac:	2600      	movs	r6, #0
 80016ae:	4304      	orrs	r4, r0
 80016b0:	0763      	lsls	r3, r4, #29
 80016b2:	d009      	beq.n	80016c8 <__aeabi_dsub+0x120>
 80016b4:	230f      	movs	r3, #15
 80016b6:	4023      	ands	r3, r4
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <__aeabi_dsub+0x120>
 80016bc:	1d23      	adds	r3, r4, #4
 80016be:	42a3      	cmp	r3, r4
 80016c0:	41a4      	sbcs	r4, r4
 80016c2:	4264      	negs	r4, r4
 80016c4:	44a0      	add	r8, r4
 80016c6:	001c      	movs	r4, r3
 80016c8:	4643      	mov	r3, r8
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	d400      	bmi.n	80016d0 <__aeabi_dsub+0x128>
 80016ce:	e0df      	b.n	8001890 <__aeabi_dsub+0x2e8>
 80016d0:	4b82      	ldr	r3, [pc, #520]	; (80018dc <__aeabi_dsub+0x334>)
 80016d2:	3601      	adds	r6, #1
 80016d4:	429e      	cmp	r6, r3
 80016d6:	d100      	bne.n	80016da <__aeabi_dsub+0x132>
 80016d8:	e0fb      	b.n	80018d2 <__aeabi_dsub+0x32a>
 80016da:	4642      	mov	r2, r8
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <__aeabi_dsub+0x338>)
 80016de:	08e4      	lsrs	r4, r4, #3
 80016e0:	401a      	ands	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	0571      	lsls	r1, r6, #21
 80016e6:	0752      	lsls	r2, r2, #29
 80016e8:	025b      	lsls	r3, r3, #9
 80016ea:	4322      	orrs	r2, r4
 80016ec:	0b1b      	lsrs	r3, r3, #12
 80016ee:	0d49      	lsrs	r1, r1, #21
 80016f0:	0509      	lsls	r1, r1, #20
 80016f2:	07ed      	lsls	r5, r5, #31
 80016f4:	4319      	orrs	r1, r3
 80016f6:	4329      	orrs	r1, r5
 80016f8:	0010      	movs	r0, r2
 80016fa:	bcf0      	pop	{r4, r5, r6, r7}
 80016fc:	46bb      	mov	fp, r7
 80016fe:	46b2      	mov	sl, r6
 8001700:	46a9      	mov	r9, r5
 8001702:	46a0      	mov	r8, r4
 8001704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001706:	1ab4      	subs	r4, r6, r2
 8001708:	46a4      	mov	ip, r4
 800170a:	2c00      	cmp	r4, #0
 800170c:	dd58      	ble.n	80017c0 <__aeabi_dsub+0x218>
 800170e:	2a00      	cmp	r2, #0
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x16c>
 8001712:	e09e      	b.n	8001852 <__aeabi_dsub+0x2aa>
 8001714:	4a71      	ldr	r2, [pc, #452]	; (80018dc <__aeabi_dsub+0x334>)
 8001716:	4296      	cmp	r6, r2
 8001718:	d100      	bne.n	800171c <__aeabi_dsub+0x174>
 800171a:	e13b      	b.n	8001994 <__aeabi_dsub+0x3ec>
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	0412      	lsls	r2, r2, #16
 8001720:	4311      	orrs	r1, r2
 8001722:	4662      	mov	r2, ip
 8001724:	2a38      	cmp	r2, #56	; 0x38
 8001726:	dd00      	ble.n	800172a <__aeabi_dsub+0x182>
 8001728:	e0c1      	b.n	80018ae <__aeabi_dsub+0x306>
 800172a:	2a1f      	cmp	r2, #31
 800172c:	dc00      	bgt.n	8001730 <__aeabi_dsub+0x188>
 800172e:	e1bb      	b.n	8001aa8 <__aeabi_dsub+0x500>
 8001730:	000c      	movs	r4, r1
 8001732:	3a20      	subs	r2, #32
 8001734:	40d4      	lsrs	r4, r2
 8001736:	0022      	movs	r2, r4
 8001738:	4664      	mov	r4, ip
 800173a:	2c20      	cmp	r4, #32
 800173c:	d004      	beq.n	8001748 <__aeabi_dsub+0x1a0>
 800173e:	2740      	movs	r7, #64	; 0x40
 8001740:	1b3f      	subs	r7, r7, r4
 8001742:	40b9      	lsls	r1, r7
 8001744:	4308      	orrs	r0, r1
 8001746:	4680      	mov	r8, r0
 8001748:	4644      	mov	r4, r8
 800174a:	1e61      	subs	r1, r4, #1
 800174c:	418c      	sbcs	r4, r1
 800174e:	4314      	orrs	r4, r2
 8001750:	e0b1      	b.n	80018b6 <__aeabi_dsub+0x30e>
 8001752:	000c      	movs	r4, r1
 8001754:	4304      	orrs	r4, r0
 8001756:	d02a      	beq.n	80017ae <__aeabi_dsub+0x206>
 8001758:	46bb      	mov	fp, r7
 800175a:	42bd      	cmp	r5, r7
 800175c:	d02d      	beq.n	80017ba <__aeabi_dsub+0x212>
 800175e:	4c61      	ldr	r4, [pc, #388]	; (80018e4 <__aeabi_dsub+0x33c>)
 8001760:	46a4      	mov	ip, r4
 8001762:	44b4      	add	ip, r6
 8001764:	4664      	mov	r4, ip
 8001766:	2c00      	cmp	r4, #0
 8001768:	d05c      	beq.n	8001824 <__aeabi_dsub+0x27c>
 800176a:	1b94      	subs	r4, r2, r6
 800176c:	46a4      	mov	ip, r4
 800176e:	2e00      	cmp	r6, #0
 8001770:	d000      	beq.n	8001774 <__aeabi_dsub+0x1cc>
 8001772:	e115      	b.n	80019a0 <__aeabi_dsub+0x3f8>
 8001774:	464d      	mov	r5, r9
 8001776:	431d      	orrs	r5, r3
 8001778:	d100      	bne.n	800177c <__aeabi_dsub+0x1d4>
 800177a:	e1c3      	b.n	8001b04 <__aeabi_dsub+0x55c>
 800177c:	1e65      	subs	r5, r4, #1
 800177e:	2c01      	cmp	r4, #1
 8001780:	d100      	bne.n	8001784 <__aeabi_dsub+0x1dc>
 8001782:	e20c      	b.n	8001b9e <__aeabi_dsub+0x5f6>
 8001784:	4e55      	ldr	r6, [pc, #340]	; (80018dc <__aeabi_dsub+0x334>)
 8001786:	42b4      	cmp	r4, r6
 8001788:	d100      	bne.n	800178c <__aeabi_dsub+0x1e4>
 800178a:	e1f8      	b.n	8001b7e <__aeabi_dsub+0x5d6>
 800178c:	46ac      	mov	ip, r5
 800178e:	e10e      	b.n	80019ae <__aeabi_dsub+0x406>
 8001790:	000a      	movs	r2, r1
 8001792:	4302      	orrs	r2, r0
 8001794:	d100      	bne.n	8001798 <__aeabi_dsub+0x1f0>
 8001796:	e136      	b.n	8001a06 <__aeabi_dsub+0x45e>
 8001798:	0022      	movs	r2, r4
 800179a:	3a01      	subs	r2, #1
 800179c:	2c01      	cmp	r4, #1
 800179e:	d100      	bne.n	80017a2 <__aeabi_dsub+0x1fa>
 80017a0:	e1c6      	b.n	8001b30 <__aeabi_dsub+0x588>
 80017a2:	4c4e      	ldr	r4, [pc, #312]	; (80018dc <__aeabi_dsub+0x334>)
 80017a4:	45a4      	cmp	ip, r4
 80017a6:	d100      	bne.n	80017aa <__aeabi_dsub+0x202>
 80017a8:	e0f4      	b.n	8001994 <__aeabi_dsub+0x3ec>
 80017aa:	4694      	mov	ip, r2
 80017ac:	e731      	b.n	8001612 <__aeabi_dsub+0x6a>
 80017ae:	2401      	movs	r4, #1
 80017b0:	4067      	eors	r7, r4
 80017b2:	46bb      	mov	fp, r7
 80017b4:	42bd      	cmp	r5, r7
 80017b6:	d000      	beq.n	80017ba <__aeabi_dsub+0x212>
 80017b8:	e71c      	b.n	80015f4 <__aeabi_dsub+0x4c>
 80017ba:	4c4a      	ldr	r4, [pc, #296]	; (80018e4 <__aeabi_dsub+0x33c>)
 80017bc:	46a4      	mov	ip, r4
 80017be:	44b4      	add	ip, r6
 80017c0:	4664      	mov	r4, ip
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dsub+0x220>
 80017c6:	e0cf      	b.n	8001968 <__aeabi_dsub+0x3c0>
 80017c8:	1b94      	subs	r4, r2, r6
 80017ca:	46a4      	mov	ip, r4
 80017cc:	2e00      	cmp	r6, #0
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dsub+0x22a>
 80017d0:	e15c      	b.n	8001a8c <__aeabi_dsub+0x4e4>
 80017d2:	4e42      	ldr	r6, [pc, #264]	; (80018dc <__aeabi_dsub+0x334>)
 80017d4:	42b2      	cmp	r2, r6
 80017d6:	d100      	bne.n	80017da <__aeabi_dsub+0x232>
 80017d8:	e1ec      	b.n	8001bb4 <__aeabi_dsub+0x60c>
 80017da:	2680      	movs	r6, #128	; 0x80
 80017dc:	0436      	lsls	r6, r6, #16
 80017de:	4333      	orrs	r3, r6
 80017e0:	4664      	mov	r4, ip
 80017e2:	2c38      	cmp	r4, #56	; 0x38
 80017e4:	dd00      	ble.n	80017e8 <__aeabi_dsub+0x240>
 80017e6:	e1b3      	b.n	8001b50 <__aeabi_dsub+0x5a8>
 80017e8:	2c1f      	cmp	r4, #31
 80017ea:	dd00      	ble.n	80017ee <__aeabi_dsub+0x246>
 80017ec:	e238      	b.n	8001c60 <__aeabi_dsub+0x6b8>
 80017ee:	2620      	movs	r6, #32
 80017f0:	1b36      	subs	r6, r6, r4
 80017f2:	001c      	movs	r4, r3
 80017f4:	40b4      	lsls	r4, r6
 80017f6:	464f      	mov	r7, r9
 80017f8:	46a0      	mov	r8, r4
 80017fa:	4664      	mov	r4, ip
 80017fc:	40e7      	lsrs	r7, r4
 80017fe:	4644      	mov	r4, r8
 8001800:	433c      	orrs	r4, r7
 8001802:	464f      	mov	r7, r9
 8001804:	40b7      	lsls	r7, r6
 8001806:	003e      	movs	r6, r7
 8001808:	1e77      	subs	r7, r6, #1
 800180a:	41be      	sbcs	r6, r7
 800180c:	4334      	orrs	r4, r6
 800180e:	4666      	mov	r6, ip
 8001810:	40f3      	lsrs	r3, r6
 8001812:	18c9      	adds	r1, r1, r3
 8001814:	1824      	adds	r4, r4, r0
 8001816:	4284      	cmp	r4, r0
 8001818:	419b      	sbcs	r3, r3
 800181a:	425b      	negs	r3, r3
 800181c:	4698      	mov	r8, r3
 800181e:	0016      	movs	r6, r2
 8001820:	4488      	add	r8, r1
 8001822:	e04e      	b.n	80018c2 <__aeabi_dsub+0x31a>
 8001824:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <__aeabi_dsub+0x340>)
 8001826:	1c74      	adds	r4, r6, #1
 8001828:	4214      	tst	r4, r2
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x286>
 800182c:	e0d6      	b.n	80019dc <__aeabi_dsub+0x434>
 800182e:	464a      	mov	r2, r9
 8001830:	431a      	orrs	r2, r3
 8001832:	2e00      	cmp	r6, #0
 8001834:	d000      	beq.n	8001838 <__aeabi_dsub+0x290>
 8001836:	e15b      	b.n	8001af0 <__aeabi_dsub+0x548>
 8001838:	2a00      	cmp	r2, #0
 800183a:	d100      	bne.n	800183e <__aeabi_dsub+0x296>
 800183c:	e1a5      	b.n	8001b8a <__aeabi_dsub+0x5e2>
 800183e:	000a      	movs	r2, r1
 8001840:	4302      	orrs	r2, r0
 8001842:	d000      	beq.n	8001846 <__aeabi_dsub+0x29e>
 8001844:	e1bb      	b.n	8001bbe <__aeabi_dsub+0x616>
 8001846:	464a      	mov	r2, r9
 8001848:	0759      	lsls	r1, r3, #29
 800184a:	08d2      	lsrs	r2, r2, #3
 800184c:	430a      	orrs	r2, r1
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	e027      	b.n	80018a2 <__aeabi_dsub+0x2fa>
 8001852:	000a      	movs	r2, r1
 8001854:	4302      	orrs	r2, r0
 8001856:	d100      	bne.n	800185a <__aeabi_dsub+0x2b2>
 8001858:	e174      	b.n	8001b44 <__aeabi_dsub+0x59c>
 800185a:	0022      	movs	r2, r4
 800185c:	3a01      	subs	r2, #1
 800185e:	2c01      	cmp	r4, #1
 8001860:	d005      	beq.n	800186e <__aeabi_dsub+0x2c6>
 8001862:	4c1e      	ldr	r4, [pc, #120]	; (80018dc <__aeabi_dsub+0x334>)
 8001864:	45a4      	cmp	ip, r4
 8001866:	d100      	bne.n	800186a <__aeabi_dsub+0x2c2>
 8001868:	e094      	b.n	8001994 <__aeabi_dsub+0x3ec>
 800186a:	4694      	mov	ip, r2
 800186c:	e759      	b.n	8001722 <__aeabi_dsub+0x17a>
 800186e:	4448      	add	r0, r9
 8001870:	4548      	cmp	r0, r9
 8001872:	4192      	sbcs	r2, r2
 8001874:	185b      	adds	r3, r3, r1
 8001876:	4698      	mov	r8, r3
 8001878:	0004      	movs	r4, r0
 800187a:	4252      	negs	r2, r2
 800187c:	4490      	add	r8, r2
 800187e:	4643      	mov	r3, r8
 8001880:	2602      	movs	r6, #2
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	d500      	bpl.n	8001888 <__aeabi_dsub+0x2e0>
 8001886:	e0c4      	b.n	8001a12 <__aeabi_dsub+0x46a>
 8001888:	3e01      	subs	r6, #1
 800188a:	0763      	lsls	r3, r4, #29
 800188c:	d000      	beq.n	8001890 <__aeabi_dsub+0x2e8>
 800188e:	e711      	b.n	80016b4 <__aeabi_dsub+0x10c>
 8001890:	4643      	mov	r3, r8
 8001892:	46b4      	mov	ip, r6
 8001894:	0759      	lsls	r1, r3, #29
 8001896:	08e2      	lsrs	r2, r4, #3
 8001898:	430a      	orrs	r2, r1
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	490f      	ldr	r1, [pc, #60]	; (80018dc <__aeabi_dsub+0x334>)
 800189e:	458c      	cmp	ip, r1
 80018a0:	d040      	beq.n	8001924 <__aeabi_dsub+0x37c>
 80018a2:	4661      	mov	r1, ip
 80018a4:	031b      	lsls	r3, r3, #12
 80018a6:	0549      	lsls	r1, r1, #21
 80018a8:	0b1b      	lsrs	r3, r3, #12
 80018aa:	0d49      	lsrs	r1, r1, #21
 80018ac:	e720      	b.n	80016f0 <__aeabi_dsub+0x148>
 80018ae:	4301      	orrs	r1, r0
 80018b0:	000c      	movs	r4, r1
 80018b2:	1e61      	subs	r1, r4, #1
 80018b4:	418c      	sbcs	r4, r1
 80018b6:	444c      	add	r4, r9
 80018b8:	454c      	cmp	r4, r9
 80018ba:	4192      	sbcs	r2, r2
 80018bc:	4252      	negs	r2, r2
 80018be:	4690      	mov	r8, r2
 80018c0:	4498      	add	r8, r3
 80018c2:	4643      	mov	r3, r8
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	d5e0      	bpl.n	800188a <__aeabi_dsub+0x2e2>
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__aeabi_dsub+0x334>)
 80018ca:	3601      	adds	r6, #1
 80018cc:	429e      	cmp	r6, r3
 80018ce:	d000      	beq.n	80018d2 <__aeabi_dsub+0x32a>
 80018d0:	e09f      	b.n	8001a12 <__aeabi_dsub+0x46a>
 80018d2:	0031      	movs	r1, r6
 80018d4:	2300      	movs	r3, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	e70a      	b.n	80016f0 <__aeabi_dsub+0x148>
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	000007ff 	.word	0x000007ff
 80018e0:	ff7fffff 	.word	0xff7fffff
 80018e4:	fffff801 	.word	0xfffff801
 80018e8:	000007fe 	.word	0x000007fe
 80018ec:	2a00      	cmp	r2, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dsub+0x34a>
 80018f0:	e160      	b.n	8001bb4 <__aeabi_dsub+0x60c>
 80018f2:	000a      	movs	r2, r1
 80018f4:	4302      	orrs	r2, r0
 80018f6:	d04d      	beq.n	8001994 <__aeabi_dsub+0x3ec>
 80018f8:	464a      	mov	r2, r9
 80018fa:	075c      	lsls	r4, r3, #29
 80018fc:	08d2      	lsrs	r2, r2, #3
 80018fe:	4322      	orrs	r2, r4
 8001900:	2480      	movs	r4, #128	; 0x80
 8001902:	08db      	lsrs	r3, r3, #3
 8001904:	0324      	lsls	r4, r4, #12
 8001906:	4223      	tst	r3, r4
 8001908:	d007      	beq.n	800191a <__aeabi_dsub+0x372>
 800190a:	08ce      	lsrs	r6, r1, #3
 800190c:	4226      	tst	r6, r4
 800190e:	d104      	bne.n	800191a <__aeabi_dsub+0x372>
 8001910:	465d      	mov	r5, fp
 8001912:	0033      	movs	r3, r6
 8001914:	08c2      	lsrs	r2, r0, #3
 8001916:	0749      	lsls	r1, r1, #29
 8001918:	430a      	orrs	r2, r1
 800191a:	0f51      	lsrs	r1, r2, #29
 800191c:	00d2      	lsls	r2, r2, #3
 800191e:	08d2      	lsrs	r2, r2, #3
 8001920:	0749      	lsls	r1, r1, #29
 8001922:	430a      	orrs	r2, r1
 8001924:	0011      	movs	r1, r2
 8001926:	4319      	orrs	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x384>
 800192a:	e1c8      	b.n	8001cbe <__aeabi_dsub+0x716>
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	0309      	lsls	r1, r1, #12
 8001930:	430b      	orrs	r3, r1
 8001932:	031b      	lsls	r3, r3, #12
 8001934:	49d5      	ldr	r1, [pc, #852]	; (8001c8c <__aeabi_dsub+0x6e4>)
 8001936:	0b1b      	lsrs	r3, r3, #12
 8001938:	e6da      	b.n	80016f0 <__aeabi_dsub+0x148>
 800193a:	49d5      	ldr	r1, [pc, #852]	; (8001c90 <__aeabi_dsub+0x6e8>)
 800193c:	1ab6      	subs	r6, r6, r2
 800193e:	400b      	ands	r3, r1
 8001940:	4698      	mov	r8, r3
 8001942:	e6b5      	b.n	80016b0 <__aeabi_dsub+0x108>
 8001944:	0020      	movs	r0, r4
 8001946:	f000 fa65 	bl	8001e14 <__clzsi2>
 800194a:	0002      	movs	r2, r0
 800194c:	3218      	adds	r2, #24
 800194e:	2a1f      	cmp	r2, #31
 8001950:	dc00      	bgt.n	8001954 <__aeabi_dsub+0x3ac>
 8001952:	e68f      	b.n	8001674 <__aeabi_dsub+0xcc>
 8001954:	0023      	movs	r3, r4
 8001956:	3808      	subs	r0, #8
 8001958:	4083      	lsls	r3, r0
 800195a:	2400      	movs	r4, #0
 800195c:	e692      	b.n	8001684 <__aeabi_dsub+0xdc>
 800195e:	4308      	orrs	r0, r1
 8001960:	0002      	movs	r2, r0
 8001962:	1e50      	subs	r0, r2, #1
 8001964:	4182      	sbcs	r2, r0
 8001966:	e66d      	b.n	8001644 <__aeabi_dsub+0x9c>
 8001968:	4cca      	ldr	r4, [pc, #808]	; (8001c94 <__aeabi_dsub+0x6ec>)
 800196a:	1c72      	adds	r2, r6, #1
 800196c:	4222      	tst	r2, r4
 800196e:	d000      	beq.n	8001972 <__aeabi_dsub+0x3ca>
 8001970:	e0ad      	b.n	8001ace <__aeabi_dsub+0x526>
 8001972:	464a      	mov	r2, r9
 8001974:	431a      	orrs	r2, r3
 8001976:	2e00      	cmp	r6, #0
 8001978:	d1b8      	bne.n	80018ec <__aeabi_dsub+0x344>
 800197a:	2a00      	cmp	r2, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x3d8>
 800197e:	e158      	b.n	8001c32 <__aeabi_dsub+0x68a>
 8001980:	000a      	movs	r2, r1
 8001982:	4302      	orrs	r2, r0
 8001984:	d000      	beq.n	8001988 <__aeabi_dsub+0x3e0>
 8001986:	e159      	b.n	8001c3c <__aeabi_dsub+0x694>
 8001988:	464a      	mov	r2, r9
 800198a:	0759      	lsls	r1, r3, #29
 800198c:	08d2      	lsrs	r2, r2, #3
 800198e:	430a      	orrs	r2, r1
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	e786      	b.n	80018a2 <__aeabi_dsub+0x2fa>
 8001994:	464a      	mov	r2, r9
 8001996:	0759      	lsls	r1, r3, #29
 8001998:	08d2      	lsrs	r2, r2, #3
 800199a:	430a      	orrs	r2, r1
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	e7c1      	b.n	8001924 <__aeabi_dsub+0x37c>
 80019a0:	4dba      	ldr	r5, [pc, #744]	; (8001c8c <__aeabi_dsub+0x6e4>)
 80019a2:	42aa      	cmp	r2, r5
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0x400>
 80019a6:	e11e      	b.n	8001be6 <__aeabi_dsub+0x63e>
 80019a8:	2580      	movs	r5, #128	; 0x80
 80019aa:	042d      	lsls	r5, r5, #16
 80019ac:	432b      	orrs	r3, r5
 80019ae:	4664      	mov	r4, ip
 80019b0:	2c38      	cmp	r4, #56	; 0x38
 80019b2:	dc5d      	bgt.n	8001a70 <__aeabi_dsub+0x4c8>
 80019b4:	2c1f      	cmp	r4, #31
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dsub+0x412>
 80019b8:	e0d0      	b.n	8001b5c <__aeabi_dsub+0x5b4>
 80019ba:	2520      	movs	r5, #32
 80019bc:	4667      	mov	r7, ip
 80019be:	1b2d      	subs	r5, r5, r4
 80019c0:	464e      	mov	r6, r9
 80019c2:	001c      	movs	r4, r3
 80019c4:	40fe      	lsrs	r6, r7
 80019c6:	40ac      	lsls	r4, r5
 80019c8:	4334      	orrs	r4, r6
 80019ca:	464e      	mov	r6, r9
 80019cc:	40ae      	lsls	r6, r5
 80019ce:	0035      	movs	r5, r6
 80019d0:	40fb      	lsrs	r3, r7
 80019d2:	1e6e      	subs	r6, r5, #1
 80019d4:	41b5      	sbcs	r5, r6
 80019d6:	1ac9      	subs	r1, r1, r3
 80019d8:	432c      	orrs	r4, r5
 80019da:	e04e      	b.n	8001a7a <__aeabi_dsub+0x4d2>
 80019dc:	464a      	mov	r2, r9
 80019de:	1a14      	subs	r4, r2, r0
 80019e0:	45a1      	cmp	r9, r4
 80019e2:	4192      	sbcs	r2, r2
 80019e4:	4252      	negs	r2, r2
 80019e6:	4690      	mov	r8, r2
 80019e8:	1a5f      	subs	r7, r3, r1
 80019ea:	003a      	movs	r2, r7
 80019ec:	4647      	mov	r7, r8
 80019ee:	1bd2      	subs	r2, r2, r7
 80019f0:	4690      	mov	r8, r2
 80019f2:	0212      	lsls	r2, r2, #8
 80019f4:	d500      	bpl.n	80019f8 <__aeabi_dsub+0x450>
 80019f6:	e08b      	b.n	8001b10 <__aeabi_dsub+0x568>
 80019f8:	4642      	mov	r2, r8
 80019fa:	4322      	orrs	r2, r4
 80019fc:	d000      	beq.n	8001a00 <__aeabi_dsub+0x458>
 80019fe:	e630      	b.n	8001662 <__aeabi_dsub+0xba>
 8001a00:	2300      	movs	r3, #0
 8001a02:	2500      	movs	r5, #0
 8001a04:	e74d      	b.n	80018a2 <__aeabi_dsub+0x2fa>
 8001a06:	464a      	mov	r2, r9
 8001a08:	0759      	lsls	r1, r3, #29
 8001a0a:	08d2      	lsrs	r2, r2, #3
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	e744      	b.n	800189c <__aeabi_dsub+0x2f4>
 8001a12:	4642      	mov	r2, r8
 8001a14:	4b9e      	ldr	r3, [pc, #632]	; (8001c90 <__aeabi_dsub+0x6e8>)
 8001a16:	0861      	lsrs	r1, r4, #1
 8001a18:	401a      	ands	r2, r3
 8001a1a:	0013      	movs	r3, r2
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4014      	ands	r4, r2
 8001a20:	430c      	orrs	r4, r1
 8001a22:	07da      	lsls	r2, r3, #31
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	4698      	mov	r8, r3
 8001a28:	4314      	orrs	r4, r2
 8001a2a:	e641      	b.n	80016b0 <__aeabi_dsub+0x108>
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	3e1f      	subs	r6, #31
 8001a30:	40f2      	lsrs	r2, r6
 8001a32:	0016      	movs	r6, r2
 8001a34:	2920      	cmp	r1, #32
 8001a36:	d003      	beq.n	8001a40 <__aeabi_dsub+0x498>
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	1a51      	subs	r1, r2, r1
 8001a3c:	408b      	lsls	r3, r1
 8001a3e:	431c      	orrs	r4, r3
 8001a40:	1e62      	subs	r2, r4, #1
 8001a42:	4194      	sbcs	r4, r2
 8001a44:	2300      	movs	r3, #0
 8001a46:	4334      	orrs	r4, r6
 8001a48:	4698      	mov	r8, r3
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	e71d      	b.n	800188a <__aeabi_dsub+0x2e2>
 8001a4e:	000c      	movs	r4, r1
 8001a50:	3a20      	subs	r2, #32
 8001a52:	40d4      	lsrs	r4, r2
 8001a54:	0022      	movs	r2, r4
 8001a56:	4664      	mov	r4, ip
 8001a58:	2c20      	cmp	r4, #32
 8001a5a:	d004      	beq.n	8001a66 <__aeabi_dsub+0x4be>
 8001a5c:	2740      	movs	r7, #64	; 0x40
 8001a5e:	1b3f      	subs	r7, r7, r4
 8001a60:	40b9      	lsls	r1, r7
 8001a62:	4308      	orrs	r0, r1
 8001a64:	4680      	mov	r8, r0
 8001a66:	4644      	mov	r4, r8
 8001a68:	1e61      	subs	r1, r4, #1
 8001a6a:	418c      	sbcs	r4, r1
 8001a6c:	4322      	orrs	r2, r4
 8001a6e:	e5e9      	b.n	8001644 <__aeabi_dsub+0x9c>
 8001a70:	464c      	mov	r4, r9
 8001a72:	4323      	orrs	r3, r4
 8001a74:	001c      	movs	r4, r3
 8001a76:	1e63      	subs	r3, r4, #1
 8001a78:	419c      	sbcs	r4, r3
 8001a7a:	1b04      	subs	r4, r0, r4
 8001a7c:	42a0      	cmp	r0, r4
 8001a7e:	419b      	sbcs	r3, r3
 8001a80:	425b      	negs	r3, r3
 8001a82:	1acb      	subs	r3, r1, r3
 8001a84:	4698      	mov	r8, r3
 8001a86:	465d      	mov	r5, fp
 8001a88:	0016      	movs	r6, r2
 8001a8a:	e5e2      	b.n	8001652 <__aeabi_dsub+0xaa>
 8001a8c:	464e      	mov	r6, r9
 8001a8e:	431e      	orrs	r6, r3
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x4ec>
 8001a92:	e0ae      	b.n	8001bf2 <__aeabi_dsub+0x64a>
 8001a94:	1e66      	subs	r6, r4, #1
 8001a96:	2c01      	cmp	r4, #1
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x4f4>
 8001a9a:	e0fd      	b.n	8001c98 <__aeabi_dsub+0x6f0>
 8001a9c:	4f7b      	ldr	r7, [pc, #492]	; (8001c8c <__aeabi_dsub+0x6e4>)
 8001a9e:	42bc      	cmp	r4, r7
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x4fc>
 8001aa2:	e107      	b.n	8001cb4 <__aeabi_dsub+0x70c>
 8001aa4:	46b4      	mov	ip, r6
 8001aa6:	e69b      	b.n	80017e0 <__aeabi_dsub+0x238>
 8001aa8:	4664      	mov	r4, ip
 8001aaa:	2220      	movs	r2, #32
 8001aac:	1b12      	subs	r2, r2, r4
 8001aae:	000c      	movs	r4, r1
 8001ab0:	4094      	lsls	r4, r2
 8001ab2:	0007      	movs	r7, r0
 8001ab4:	4090      	lsls	r0, r2
 8001ab6:	46a0      	mov	r8, r4
 8001ab8:	4664      	mov	r4, ip
 8001aba:	1e42      	subs	r2, r0, #1
 8001abc:	4190      	sbcs	r0, r2
 8001abe:	4662      	mov	r2, ip
 8001ac0:	40e7      	lsrs	r7, r4
 8001ac2:	4644      	mov	r4, r8
 8001ac4:	40d1      	lsrs	r1, r2
 8001ac6:	433c      	orrs	r4, r7
 8001ac8:	4304      	orrs	r4, r0
 8001aca:	185b      	adds	r3, r3, r1
 8001acc:	e6f3      	b.n	80018b6 <__aeabi_dsub+0x30e>
 8001ace:	4c6f      	ldr	r4, [pc, #444]	; (8001c8c <__aeabi_dsub+0x6e4>)
 8001ad0:	42a2      	cmp	r2, r4
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x52e>
 8001ad4:	e0d5      	b.n	8001c82 <__aeabi_dsub+0x6da>
 8001ad6:	4448      	add	r0, r9
 8001ad8:	185b      	adds	r3, r3, r1
 8001ada:	4548      	cmp	r0, r9
 8001adc:	4189      	sbcs	r1, r1
 8001ade:	4249      	negs	r1, r1
 8001ae0:	185b      	adds	r3, r3, r1
 8001ae2:	07dc      	lsls	r4, r3, #31
 8001ae4:	0840      	lsrs	r0, r0, #1
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	4698      	mov	r8, r3
 8001aea:	0016      	movs	r6, r2
 8001aec:	4304      	orrs	r4, r0
 8001aee:	e6cc      	b.n	800188a <__aeabi_dsub+0x2e2>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dsub+0x54e>
 8001af4:	e082      	b.n	8001bfc <__aeabi_dsub+0x654>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d140      	bne.n	8001b7e <__aeabi_dsub+0x5d6>
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	2500      	movs	r5, #0
 8001b00:	031b      	lsls	r3, r3, #12
 8001b02:	e713      	b.n	800192c <__aeabi_dsub+0x384>
 8001b04:	074b      	lsls	r3, r1, #29
 8001b06:	08c2      	lsrs	r2, r0, #3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	465d      	mov	r5, fp
 8001b0c:	08cb      	lsrs	r3, r1, #3
 8001b0e:	e6c5      	b.n	800189c <__aeabi_dsub+0x2f4>
 8001b10:	464a      	mov	r2, r9
 8001b12:	1a84      	subs	r4, r0, r2
 8001b14:	42a0      	cmp	r0, r4
 8001b16:	4192      	sbcs	r2, r2
 8001b18:	1acb      	subs	r3, r1, r3
 8001b1a:	4252      	negs	r2, r2
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	4698      	mov	r8, r3
 8001b20:	465d      	mov	r5, fp
 8001b22:	e59e      	b.n	8001662 <__aeabi_dsub+0xba>
 8001b24:	464a      	mov	r2, r9
 8001b26:	0759      	lsls	r1, r3, #29
 8001b28:	08d2      	lsrs	r2, r2, #3
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	e6f9      	b.n	8001924 <__aeabi_dsub+0x37c>
 8001b30:	464a      	mov	r2, r9
 8001b32:	1a14      	subs	r4, r2, r0
 8001b34:	45a1      	cmp	r9, r4
 8001b36:	4192      	sbcs	r2, r2
 8001b38:	1a5b      	subs	r3, r3, r1
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	4698      	mov	r8, r3
 8001b40:	2601      	movs	r6, #1
 8001b42:	e586      	b.n	8001652 <__aeabi_dsub+0xaa>
 8001b44:	464a      	mov	r2, r9
 8001b46:	0759      	lsls	r1, r3, #29
 8001b48:	08d2      	lsrs	r2, r2, #3
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	e6a5      	b.n	800189c <__aeabi_dsub+0x2f4>
 8001b50:	464c      	mov	r4, r9
 8001b52:	4323      	orrs	r3, r4
 8001b54:	001c      	movs	r4, r3
 8001b56:	1e63      	subs	r3, r4, #1
 8001b58:	419c      	sbcs	r4, r3
 8001b5a:	e65b      	b.n	8001814 <__aeabi_dsub+0x26c>
 8001b5c:	4665      	mov	r5, ip
 8001b5e:	001e      	movs	r6, r3
 8001b60:	3d20      	subs	r5, #32
 8001b62:	40ee      	lsrs	r6, r5
 8001b64:	2c20      	cmp	r4, #32
 8001b66:	d005      	beq.n	8001b74 <__aeabi_dsub+0x5cc>
 8001b68:	2540      	movs	r5, #64	; 0x40
 8001b6a:	1b2d      	subs	r5, r5, r4
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	464c      	mov	r4, r9
 8001b70:	431c      	orrs	r4, r3
 8001b72:	46a2      	mov	sl, r4
 8001b74:	4654      	mov	r4, sl
 8001b76:	1e63      	subs	r3, r4, #1
 8001b78:	419c      	sbcs	r4, r3
 8001b7a:	4334      	orrs	r4, r6
 8001b7c:	e77d      	b.n	8001a7a <__aeabi_dsub+0x4d2>
 8001b7e:	074b      	lsls	r3, r1, #29
 8001b80:	08c2      	lsrs	r2, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	465d      	mov	r5, fp
 8001b86:	08cb      	lsrs	r3, r1, #3
 8001b88:	e6cc      	b.n	8001924 <__aeabi_dsub+0x37c>
 8001b8a:	000a      	movs	r2, r1
 8001b8c:	4302      	orrs	r2, r0
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x5ea>
 8001b90:	e736      	b.n	8001a00 <__aeabi_dsub+0x458>
 8001b92:	074b      	lsls	r3, r1, #29
 8001b94:	08c2      	lsrs	r2, r0, #3
 8001b96:	431a      	orrs	r2, r3
 8001b98:	465d      	mov	r5, fp
 8001b9a:	08cb      	lsrs	r3, r1, #3
 8001b9c:	e681      	b.n	80018a2 <__aeabi_dsub+0x2fa>
 8001b9e:	464a      	mov	r2, r9
 8001ba0:	1a84      	subs	r4, r0, r2
 8001ba2:	42a0      	cmp	r0, r4
 8001ba4:	4192      	sbcs	r2, r2
 8001ba6:	1acb      	subs	r3, r1, r3
 8001ba8:	4252      	negs	r2, r2
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	4698      	mov	r8, r3
 8001bae:	465d      	mov	r5, fp
 8001bb0:	2601      	movs	r6, #1
 8001bb2:	e54e      	b.n	8001652 <__aeabi_dsub+0xaa>
 8001bb4:	074b      	lsls	r3, r1, #29
 8001bb6:	08c2      	lsrs	r2, r0, #3
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	08cb      	lsrs	r3, r1, #3
 8001bbc:	e6b2      	b.n	8001924 <__aeabi_dsub+0x37c>
 8001bbe:	464a      	mov	r2, r9
 8001bc0:	1a14      	subs	r4, r2, r0
 8001bc2:	45a1      	cmp	r9, r4
 8001bc4:	4192      	sbcs	r2, r2
 8001bc6:	1a5f      	subs	r7, r3, r1
 8001bc8:	4252      	negs	r2, r2
 8001bca:	1aba      	subs	r2, r7, r2
 8001bcc:	4690      	mov	r8, r2
 8001bce:	0212      	lsls	r2, r2, #8
 8001bd0:	d56b      	bpl.n	8001caa <__aeabi_dsub+0x702>
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	1a84      	subs	r4, r0, r2
 8001bd6:	42a0      	cmp	r0, r4
 8001bd8:	4192      	sbcs	r2, r2
 8001bda:	1acb      	subs	r3, r1, r3
 8001bdc:	4252      	negs	r2, r2
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	4698      	mov	r8, r3
 8001be2:	465d      	mov	r5, fp
 8001be4:	e564      	b.n	80016b0 <__aeabi_dsub+0x108>
 8001be6:	074b      	lsls	r3, r1, #29
 8001be8:	08c2      	lsrs	r2, r0, #3
 8001bea:	431a      	orrs	r2, r3
 8001bec:	465d      	mov	r5, fp
 8001bee:	08cb      	lsrs	r3, r1, #3
 8001bf0:	e698      	b.n	8001924 <__aeabi_dsub+0x37c>
 8001bf2:	074b      	lsls	r3, r1, #29
 8001bf4:	08c2      	lsrs	r2, r0, #3
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	08cb      	lsrs	r3, r1, #3
 8001bfa:	e64f      	b.n	800189c <__aeabi_dsub+0x2f4>
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	4302      	orrs	r2, r0
 8001c00:	d090      	beq.n	8001b24 <__aeabi_dsub+0x57c>
 8001c02:	464a      	mov	r2, r9
 8001c04:	075c      	lsls	r4, r3, #29
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	4314      	orrs	r4, r2
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	4213      	tst	r3, r2
 8001c12:	d008      	beq.n	8001c26 <__aeabi_dsub+0x67e>
 8001c14:	08ce      	lsrs	r6, r1, #3
 8001c16:	4216      	tst	r6, r2
 8001c18:	d105      	bne.n	8001c26 <__aeabi_dsub+0x67e>
 8001c1a:	08c0      	lsrs	r0, r0, #3
 8001c1c:	0749      	lsls	r1, r1, #29
 8001c1e:	4308      	orrs	r0, r1
 8001c20:	0004      	movs	r4, r0
 8001c22:	465d      	mov	r5, fp
 8001c24:	0033      	movs	r3, r6
 8001c26:	0f61      	lsrs	r1, r4, #29
 8001c28:	00e2      	lsls	r2, r4, #3
 8001c2a:	0749      	lsls	r1, r1, #29
 8001c2c:	08d2      	lsrs	r2, r2, #3
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	e678      	b.n	8001924 <__aeabi_dsub+0x37c>
 8001c32:	074b      	lsls	r3, r1, #29
 8001c34:	08c2      	lsrs	r2, r0, #3
 8001c36:	431a      	orrs	r2, r3
 8001c38:	08cb      	lsrs	r3, r1, #3
 8001c3a:	e632      	b.n	80018a2 <__aeabi_dsub+0x2fa>
 8001c3c:	4448      	add	r0, r9
 8001c3e:	185b      	adds	r3, r3, r1
 8001c40:	4548      	cmp	r0, r9
 8001c42:	4192      	sbcs	r2, r2
 8001c44:	4698      	mov	r8, r3
 8001c46:	4252      	negs	r2, r2
 8001c48:	4490      	add	r8, r2
 8001c4a:	4643      	mov	r3, r8
 8001c4c:	0004      	movs	r4, r0
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	d400      	bmi.n	8001c54 <__aeabi_dsub+0x6ac>
 8001c52:	e61a      	b.n	800188a <__aeabi_dsub+0x2e2>
 8001c54:	4642      	mov	r2, r8
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <__aeabi_dsub+0x6e8>)
 8001c58:	2601      	movs	r6, #1
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	e614      	b.n	800188a <__aeabi_dsub+0x2e2>
 8001c60:	4666      	mov	r6, ip
 8001c62:	001f      	movs	r7, r3
 8001c64:	3e20      	subs	r6, #32
 8001c66:	40f7      	lsrs	r7, r6
 8001c68:	2c20      	cmp	r4, #32
 8001c6a:	d005      	beq.n	8001c78 <__aeabi_dsub+0x6d0>
 8001c6c:	2640      	movs	r6, #64	; 0x40
 8001c6e:	1b36      	subs	r6, r6, r4
 8001c70:	40b3      	lsls	r3, r6
 8001c72:	464c      	mov	r4, r9
 8001c74:	431c      	orrs	r4, r3
 8001c76:	46a2      	mov	sl, r4
 8001c78:	4654      	mov	r4, sl
 8001c7a:	1e63      	subs	r3, r4, #1
 8001c7c:	419c      	sbcs	r4, r3
 8001c7e:	433c      	orrs	r4, r7
 8001c80:	e5c8      	b.n	8001814 <__aeabi_dsub+0x26c>
 8001c82:	0011      	movs	r1, r2
 8001c84:	2300      	movs	r3, #0
 8001c86:	2200      	movs	r2, #0
 8001c88:	e532      	b.n	80016f0 <__aeabi_dsub+0x148>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	ff7fffff 	.word	0xff7fffff
 8001c94:	000007fe 	.word	0x000007fe
 8001c98:	464a      	mov	r2, r9
 8001c9a:	1814      	adds	r4, r2, r0
 8001c9c:	4284      	cmp	r4, r0
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	185b      	adds	r3, r3, r1
 8001ca2:	4698      	mov	r8, r3
 8001ca4:	4252      	negs	r2, r2
 8001ca6:	4490      	add	r8, r2
 8001ca8:	e5e9      	b.n	800187e <__aeabi_dsub+0x2d6>
 8001caa:	4642      	mov	r2, r8
 8001cac:	4322      	orrs	r2, r4
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dsub+0x70a>
 8001cb0:	e6a6      	b.n	8001a00 <__aeabi_dsub+0x458>
 8001cb2:	e5ea      	b.n	800188a <__aeabi_dsub+0x2e2>
 8001cb4:	074b      	lsls	r3, r1, #29
 8001cb6:	08c2      	lsrs	r2, r0, #3
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	08cb      	lsrs	r3, r1, #3
 8001cbc:	e632      	b.n	8001924 <__aeabi_dsub+0x37c>
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4901      	ldr	r1, [pc, #4]	; (8001cc8 <__aeabi_dsub+0x720>)
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	e514      	b.n	80016f0 <__aeabi_dsub+0x148>
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	000007ff 	.word	0x000007ff

08001ccc <__aeabi_d2iz>:
 8001ccc:	000a      	movs	r2, r1
 8001cce:	b530      	push	{r4, r5, lr}
 8001cd0:	4c13      	ldr	r4, [pc, #76]	; (8001d20 <__aeabi_d2iz+0x54>)
 8001cd2:	0053      	lsls	r3, r2, #1
 8001cd4:	0309      	lsls	r1, r1, #12
 8001cd6:	0005      	movs	r5, r0
 8001cd8:	0b09      	lsrs	r1, r1, #12
 8001cda:	2000      	movs	r0, #0
 8001cdc:	0d5b      	lsrs	r3, r3, #21
 8001cde:	0fd2      	lsrs	r2, r2, #31
 8001ce0:	42a3      	cmp	r3, r4
 8001ce2:	dd04      	ble.n	8001cee <__aeabi_d2iz+0x22>
 8001ce4:	480f      	ldr	r0, [pc, #60]	; (8001d24 <__aeabi_d2iz+0x58>)
 8001ce6:	4283      	cmp	r3, r0
 8001ce8:	dd02      	ble.n	8001cf0 <__aeabi_d2iz+0x24>
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <__aeabi_d2iz+0x5c>)
 8001cec:	18d0      	adds	r0, r2, r3
 8001cee:	bd30      	pop	{r4, r5, pc}
 8001cf0:	2080      	movs	r0, #128	; 0x80
 8001cf2:	0340      	lsls	r0, r0, #13
 8001cf4:	4301      	orrs	r1, r0
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <__aeabi_d2iz+0x60>)
 8001cf8:	1ac0      	subs	r0, r0, r3
 8001cfa:	281f      	cmp	r0, #31
 8001cfc:	dd08      	ble.n	8001d10 <__aeabi_d2iz+0x44>
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <__aeabi_d2iz+0x64>)
 8001d00:	1ac3      	subs	r3, r0, r3
 8001d02:	40d9      	lsrs	r1, r3
 8001d04:	000b      	movs	r3, r1
 8001d06:	4258      	negs	r0, r3
 8001d08:	2a00      	cmp	r2, #0
 8001d0a:	d1f0      	bne.n	8001cee <__aeabi_d2iz+0x22>
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	e7ee      	b.n	8001cee <__aeabi_d2iz+0x22>
 8001d10:	4c08      	ldr	r4, [pc, #32]	; (8001d34 <__aeabi_d2iz+0x68>)
 8001d12:	40c5      	lsrs	r5, r0
 8001d14:	46a4      	mov	ip, r4
 8001d16:	4463      	add	r3, ip
 8001d18:	4099      	lsls	r1, r3
 8001d1a:	000b      	movs	r3, r1
 8001d1c:	432b      	orrs	r3, r5
 8001d1e:	e7f2      	b.n	8001d06 <__aeabi_d2iz+0x3a>
 8001d20:	000003fe 	.word	0x000003fe
 8001d24:	0000041d 	.word	0x0000041d
 8001d28:	7fffffff 	.word	0x7fffffff
 8001d2c:	00000433 	.word	0x00000433
 8001d30:	00000413 	.word	0x00000413
 8001d34:	fffffbed 	.word	0xfffffbed

08001d38 <__aeabi_i2d>:
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d016      	beq.n	8001d6c <__aeabi_i2d+0x34>
 8001d3e:	17c3      	asrs	r3, r0, #31
 8001d40:	18c5      	adds	r5, r0, r3
 8001d42:	405d      	eors	r5, r3
 8001d44:	0fc4      	lsrs	r4, r0, #31
 8001d46:	0028      	movs	r0, r5
 8001d48:	f000 f864 	bl	8001e14 <__clzsi2>
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <__aeabi_i2d+0x5c>)
 8001d4e:	1a12      	subs	r2, r2, r0
 8001d50:	280a      	cmp	r0, #10
 8001d52:	dc16      	bgt.n	8001d82 <__aeabi_i2d+0x4a>
 8001d54:	0003      	movs	r3, r0
 8001d56:	002e      	movs	r6, r5
 8001d58:	3315      	adds	r3, #21
 8001d5a:	409e      	lsls	r6, r3
 8001d5c:	230b      	movs	r3, #11
 8001d5e:	1a18      	subs	r0, r3, r0
 8001d60:	40c5      	lsrs	r5, r0
 8001d62:	0553      	lsls	r3, r2, #21
 8001d64:	032d      	lsls	r5, r5, #12
 8001d66:	0b2d      	lsrs	r5, r5, #12
 8001d68:	0d5b      	lsrs	r3, r3, #21
 8001d6a:	e003      	b.n	8001d74 <__aeabi_i2d+0x3c>
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2500      	movs	r5, #0
 8001d72:	2600      	movs	r6, #0
 8001d74:	051b      	lsls	r3, r3, #20
 8001d76:	432b      	orrs	r3, r5
 8001d78:	07e4      	lsls	r4, r4, #31
 8001d7a:	4323      	orrs	r3, r4
 8001d7c:	0030      	movs	r0, r6
 8001d7e:	0019      	movs	r1, r3
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	380b      	subs	r0, #11
 8001d84:	4085      	lsls	r5, r0
 8001d86:	0553      	lsls	r3, r2, #21
 8001d88:	032d      	lsls	r5, r5, #12
 8001d8a:	2600      	movs	r6, #0
 8001d8c:	0b2d      	lsrs	r5, r5, #12
 8001d8e:	0d5b      	lsrs	r3, r3, #21
 8001d90:	e7f0      	b.n	8001d74 <__aeabi_i2d+0x3c>
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	0000041e 	.word	0x0000041e

08001d98 <__aeabi_cdrcmple>:
 8001d98:	4684      	mov	ip, r0
 8001d9a:	1c10      	adds	r0, r2, #0
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	468c      	mov	ip, r1
 8001da0:	1c19      	adds	r1, r3, #0
 8001da2:	4663      	mov	r3, ip
 8001da4:	e000      	b.n	8001da8 <__aeabi_cdcmpeq>
 8001da6:	46c0      	nop			; (mov r8, r8)

08001da8 <__aeabi_cdcmpeq>:
 8001da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001daa:	f000 f8ff 	bl	8001fac <__ledf2>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d401      	bmi.n	8001db6 <__aeabi_cdcmpeq+0xe>
 8001db2:	2100      	movs	r1, #0
 8001db4:	42c8      	cmn	r0, r1
 8001db6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001db8 <__aeabi_dcmpeq>:
 8001db8:	b510      	push	{r4, lr}
 8001dba:	f000 f849 	bl	8001e50 <__eqdf2>
 8001dbe:	4240      	negs	r0, r0
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	bd10      	pop	{r4, pc}

08001dc4 <__aeabi_dcmplt>:
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	f000 f8f1 	bl	8001fac <__ledf2>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	db01      	blt.n	8001dd2 <__aeabi_dcmplt+0xe>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd10      	pop	{r4, pc}
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)

08001dd8 <__aeabi_dcmple>:
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	f000 f8e7 	bl	8001fac <__ledf2>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	dd01      	ble.n	8001de6 <__aeabi_dcmple+0xe>
 8001de2:	2000      	movs	r0, #0
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	2001      	movs	r0, #1
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)

08001dec <__aeabi_dcmpgt>:
 8001dec:	b510      	push	{r4, lr}
 8001dee:	f000 f86b 	bl	8001ec8 <__gedf2>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	dc01      	bgt.n	8001dfa <__aeabi_dcmpgt+0xe>
 8001df6:	2000      	movs	r0, #0
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	bd10      	pop	{r4, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)

08001e00 <__aeabi_dcmpge>:
 8001e00:	b510      	push	{r4, lr}
 8001e02:	f000 f861 	bl	8001ec8 <__gedf2>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	da01      	bge.n	8001e0e <__aeabi_dcmpge+0xe>
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	bd10      	pop	{r4, pc}
 8001e0e:	2001      	movs	r0, #1
 8001e10:	bd10      	pop	{r4, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)

08001e14 <__clzsi2>:
 8001e14:	211c      	movs	r1, #28
 8001e16:	2301      	movs	r3, #1
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	4298      	cmp	r0, r3
 8001e1c:	d301      	bcc.n	8001e22 <__clzsi2+0xe>
 8001e1e:	0c00      	lsrs	r0, r0, #16
 8001e20:	3910      	subs	r1, #16
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	4298      	cmp	r0, r3
 8001e26:	d301      	bcc.n	8001e2c <__clzsi2+0x18>
 8001e28:	0a00      	lsrs	r0, r0, #8
 8001e2a:	3908      	subs	r1, #8
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	4298      	cmp	r0, r3
 8001e30:	d301      	bcc.n	8001e36 <__clzsi2+0x22>
 8001e32:	0900      	lsrs	r0, r0, #4
 8001e34:	3904      	subs	r1, #4
 8001e36:	a202      	add	r2, pc, #8	; (adr r2, 8001e40 <__clzsi2+0x2c>)
 8001e38:	5c10      	ldrb	r0, [r2, r0]
 8001e3a:	1840      	adds	r0, r0, r1
 8001e3c:	4770      	bx	lr
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	02020304 	.word	0x02020304
 8001e44:	01010101 	.word	0x01010101
	...

08001e50 <__eqdf2>:
 8001e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e52:	464f      	mov	r7, r9
 8001e54:	4646      	mov	r6, r8
 8001e56:	46d6      	mov	lr, sl
 8001e58:	4694      	mov	ip, r2
 8001e5a:	4691      	mov	r9, r2
 8001e5c:	031a      	lsls	r2, r3, #12
 8001e5e:	0b12      	lsrs	r2, r2, #12
 8001e60:	4d18      	ldr	r5, [pc, #96]	; (8001ec4 <__eqdf2+0x74>)
 8001e62:	b5c0      	push	{r6, r7, lr}
 8001e64:	004c      	lsls	r4, r1, #1
 8001e66:	030f      	lsls	r7, r1, #12
 8001e68:	4692      	mov	sl, r2
 8001e6a:	005a      	lsls	r2, r3, #1
 8001e6c:	0006      	movs	r6, r0
 8001e6e:	4680      	mov	r8, r0
 8001e70:	0b3f      	lsrs	r7, r7, #12
 8001e72:	2001      	movs	r0, #1
 8001e74:	0d64      	lsrs	r4, r4, #21
 8001e76:	0fc9      	lsrs	r1, r1, #31
 8001e78:	0d52      	lsrs	r2, r2, #21
 8001e7a:	0fdb      	lsrs	r3, r3, #31
 8001e7c:	42ac      	cmp	r4, r5
 8001e7e:	d00a      	beq.n	8001e96 <__eqdf2+0x46>
 8001e80:	42aa      	cmp	r2, r5
 8001e82:	d003      	beq.n	8001e8c <__eqdf2+0x3c>
 8001e84:	4294      	cmp	r4, r2
 8001e86:	d101      	bne.n	8001e8c <__eqdf2+0x3c>
 8001e88:	4557      	cmp	r7, sl
 8001e8a:	d00d      	beq.n	8001ea8 <__eqdf2+0x58>
 8001e8c:	bce0      	pop	{r5, r6, r7}
 8001e8e:	46ba      	mov	sl, r7
 8001e90:	46b1      	mov	r9, r6
 8001e92:	46a8      	mov	r8, r5
 8001e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e96:	003d      	movs	r5, r7
 8001e98:	4335      	orrs	r5, r6
 8001e9a:	d1f7      	bne.n	8001e8c <__eqdf2+0x3c>
 8001e9c:	42a2      	cmp	r2, r4
 8001e9e:	d1f5      	bne.n	8001e8c <__eqdf2+0x3c>
 8001ea0:	4652      	mov	r2, sl
 8001ea2:	4665      	mov	r5, ip
 8001ea4:	432a      	orrs	r2, r5
 8001ea6:	d1f1      	bne.n	8001e8c <__eqdf2+0x3c>
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	45c8      	cmp	r8, r9
 8001eac:	d1ee      	bne.n	8001e8c <__eqdf2+0x3c>
 8001eae:	4299      	cmp	r1, r3
 8001eb0:	d006      	beq.n	8001ec0 <__eqdf2+0x70>
 8001eb2:	2c00      	cmp	r4, #0
 8001eb4:	d1ea      	bne.n	8001e8c <__eqdf2+0x3c>
 8001eb6:	433e      	orrs	r6, r7
 8001eb8:	0030      	movs	r0, r6
 8001eba:	1e46      	subs	r6, r0, #1
 8001ebc:	41b0      	sbcs	r0, r6
 8001ebe:	e7e5      	b.n	8001e8c <__eqdf2+0x3c>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e7e3      	b.n	8001e8c <__eqdf2+0x3c>
 8001ec4:	000007ff 	.word	0x000007ff

08001ec8 <__gedf2>:
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	464e      	mov	r6, r9
 8001ecc:	4645      	mov	r5, r8
 8001ece:	4657      	mov	r7, sl
 8001ed0:	46de      	mov	lr, fp
 8001ed2:	0004      	movs	r4, r0
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	b5e0      	push	{r5, r6, r7, lr}
 8001ed8:	0016      	movs	r6, r2
 8001eda:	031b      	lsls	r3, r3, #12
 8001edc:	0b1b      	lsrs	r3, r3, #12
 8001ede:	4d32      	ldr	r5, [pc, #200]	; (8001fa8 <__gedf2+0xe0>)
 8001ee0:	030f      	lsls	r7, r1, #12
 8001ee2:	004a      	lsls	r2, r1, #1
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	0043      	lsls	r3, r0, #1
 8001ee8:	46a4      	mov	ip, r4
 8001eea:	46b0      	mov	r8, r6
 8001eec:	0b3f      	lsrs	r7, r7, #12
 8001eee:	0d52      	lsrs	r2, r2, #21
 8001ef0:	0fc9      	lsrs	r1, r1, #31
 8001ef2:	0d5b      	lsrs	r3, r3, #21
 8001ef4:	0fc0      	lsrs	r0, r0, #31
 8001ef6:	42aa      	cmp	r2, r5
 8001ef8:	d029      	beq.n	8001f4e <__gedf2+0x86>
 8001efa:	42ab      	cmp	r3, r5
 8001efc:	d018      	beq.n	8001f30 <__gedf2+0x68>
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	d12a      	bne.n	8001f58 <__gedf2+0x90>
 8001f02:	433c      	orrs	r4, r7
 8001f04:	46a3      	mov	fp, r4
 8001f06:	4265      	negs	r5, r4
 8001f08:	4165      	adcs	r5, r4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <__gedf2+0x4c>
 8001f0e:	464c      	mov	r4, r9
 8001f10:	4326      	orrs	r6, r4
 8001f12:	d027      	beq.n	8001f64 <__gedf2+0x9c>
 8001f14:	2d00      	cmp	r5, #0
 8001f16:	d115      	bne.n	8001f44 <__gedf2+0x7c>
 8001f18:	4281      	cmp	r1, r0
 8001f1a:	d028      	beq.n	8001f6e <__gedf2+0xa6>
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	3901      	subs	r1, #1
 8001f20:	4008      	ands	r0, r1
 8001f22:	3801      	subs	r0, #1
 8001f24:	bcf0      	pop	{r4, r5, r6, r7}
 8001f26:	46bb      	mov	fp, r7
 8001f28:	46b2      	mov	sl, r6
 8001f2a:	46a9      	mov	r9, r5
 8001f2c:	46a0      	mov	r8, r4
 8001f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f30:	464d      	mov	r5, r9
 8001f32:	432e      	orrs	r6, r5
 8001f34:	d12f      	bne.n	8001f96 <__gedf2+0xce>
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	d1ee      	bne.n	8001f18 <__gedf2+0x50>
 8001f3a:	433c      	orrs	r4, r7
 8001f3c:	4265      	negs	r5, r4
 8001f3e:	4165      	adcs	r5, r4
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	d0e9      	beq.n	8001f18 <__gedf2+0x50>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d1ed      	bne.n	8001f24 <__gedf2+0x5c>
 8001f48:	2001      	movs	r0, #1
 8001f4a:	4240      	negs	r0, r0
 8001f4c:	e7ea      	b.n	8001f24 <__gedf2+0x5c>
 8001f4e:	003d      	movs	r5, r7
 8001f50:	4325      	orrs	r5, r4
 8001f52:	d120      	bne.n	8001f96 <__gedf2+0xce>
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d0eb      	beq.n	8001f30 <__gedf2+0x68>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1dd      	bne.n	8001f18 <__gedf2+0x50>
 8001f5c:	464c      	mov	r4, r9
 8001f5e:	4326      	orrs	r6, r4
 8001f60:	d1da      	bne.n	8001f18 <__gedf2+0x50>
 8001f62:	e7db      	b.n	8001f1c <__gedf2+0x54>
 8001f64:	465b      	mov	r3, fp
 8001f66:	2000      	movs	r0, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0db      	beq.n	8001f24 <__gedf2+0x5c>
 8001f6c:	e7d6      	b.n	8001f1c <__gedf2+0x54>
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dc0a      	bgt.n	8001f88 <__gedf2+0xc0>
 8001f72:	dbe7      	blt.n	8001f44 <__gedf2+0x7c>
 8001f74:	454f      	cmp	r7, r9
 8001f76:	d8d1      	bhi.n	8001f1c <__gedf2+0x54>
 8001f78:	d010      	beq.n	8001f9c <__gedf2+0xd4>
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	d2d1      	bcs.n	8001f24 <__gedf2+0x5c>
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d0e1      	beq.n	8001f48 <__gedf2+0x80>
 8001f84:	0008      	movs	r0, r1
 8001f86:	e7cd      	b.n	8001f24 <__gedf2+0x5c>
 8001f88:	4243      	negs	r3, r0
 8001f8a:	4158      	adcs	r0, r3
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	4240      	negs	r0, r0
 8001f90:	4018      	ands	r0, r3
 8001f92:	3801      	subs	r0, #1
 8001f94:	e7c6      	b.n	8001f24 <__gedf2+0x5c>
 8001f96:	2002      	movs	r0, #2
 8001f98:	4240      	negs	r0, r0
 8001f9a:	e7c3      	b.n	8001f24 <__gedf2+0x5c>
 8001f9c:	45c4      	cmp	ip, r8
 8001f9e:	d8bd      	bhi.n	8001f1c <__gedf2+0x54>
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	45c4      	cmp	ip, r8
 8001fa4:	d2be      	bcs.n	8001f24 <__gedf2+0x5c>
 8001fa6:	e7eb      	b.n	8001f80 <__gedf2+0xb8>
 8001fa8:	000007ff 	.word	0x000007ff

08001fac <__ledf2>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	464e      	mov	r6, r9
 8001fb0:	4645      	mov	r5, r8
 8001fb2:	4657      	mov	r7, sl
 8001fb4:	46de      	mov	lr, fp
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	0018      	movs	r0, r3
 8001fba:	b5e0      	push	{r5, r6, r7, lr}
 8001fbc:	0016      	movs	r6, r2
 8001fbe:	031b      	lsls	r3, r3, #12
 8001fc0:	0b1b      	lsrs	r3, r3, #12
 8001fc2:	4d31      	ldr	r5, [pc, #196]	; (8002088 <__ledf2+0xdc>)
 8001fc4:	030f      	lsls	r7, r1, #12
 8001fc6:	004a      	lsls	r2, r1, #1
 8001fc8:	4699      	mov	r9, r3
 8001fca:	0043      	lsls	r3, r0, #1
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	46b0      	mov	r8, r6
 8001fd0:	0b3f      	lsrs	r7, r7, #12
 8001fd2:	0d52      	lsrs	r2, r2, #21
 8001fd4:	0fc9      	lsrs	r1, r1, #31
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	0fc0      	lsrs	r0, r0, #31
 8001fda:	42aa      	cmp	r2, r5
 8001fdc:	d011      	beq.n	8002002 <__ledf2+0x56>
 8001fde:	42ab      	cmp	r3, r5
 8001fe0:	d014      	beq.n	800200c <__ledf2+0x60>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d12f      	bne.n	8002046 <__ledf2+0x9a>
 8001fe6:	433c      	orrs	r4, r7
 8001fe8:	46a3      	mov	fp, r4
 8001fea:	4265      	negs	r5, r4
 8001fec:	4165      	adcs	r5, r4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d114      	bne.n	800201c <__ledf2+0x70>
 8001ff2:	464c      	mov	r4, r9
 8001ff4:	4326      	orrs	r6, r4
 8001ff6:	d111      	bne.n	800201c <__ledf2+0x70>
 8001ff8:	465b      	mov	r3, fp
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d017      	beq.n	8002030 <__ledf2+0x84>
 8002000:	e010      	b.n	8002024 <__ledf2+0x78>
 8002002:	003d      	movs	r5, r7
 8002004:	4325      	orrs	r5, r4
 8002006:	d112      	bne.n	800202e <__ledf2+0x82>
 8002008:	4293      	cmp	r3, r2
 800200a:	d11c      	bne.n	8002046 <__ledf2+0x9a>
 800200c:	464d      	mov	r5, r9
 800200e:	432e      	orrs	r6, r5
 8002010:	d10d      	bne.n	800202e <__ledf2+0x82>
 8002012:	2a00      	cmp	r2, #0
 8002014:	d104      	bne.n	8002020 <__ledf2+0x74>
 8002016:	433c      	orrs	r4, r7
 8002018:	4265      	negs	r5, r4
 800201a:	4165      	adcs	r5, r4
 800201c:	2d00      	cmp	r5, #0
 800201e:	d10d      	bne.n	800203c <__ledf2+0x90>
 8002020:	4281      	cmp	r1, r0
 8002022:	d016      	beq.n	8002052 <__ledf2+0xa6>
 8002024:	2002      	movs	r0, #2
 8002026:	3901      	subs	r1, #1
 8002028:	4008      	ands	r0, r1
 800202a:	3801      	subs	r0, #1
 800202c:	e000      	b.n	8002030 <__ledf2+0x84>
 800202e:	2002      	movs	r0, #2
 8002030:	bcf0      	pop	{r4, r5, r6, r7}
 8002032:	46bb      	mov	fp, r7
 8002034:	46b2      	mov	sl, r6
 8002036:	46a9      	mov	r9, r5
 8002038:	46a0      	mov	r8, r4
 800203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203c:	2800      	cmp	r0, #0
 800203e:	d1f7      	bne.n	8002030 <__ledf2+0x84>
 8002040:	2001      	movs	r0, #1
 8002042:	4240      	negs	r0, r0
 8002044:	e7f4      	b.n	8002030 <__ledf2+0x84>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ea      	bne.n	8002020 <__ledf2+0x74>
 800204a:	464c      	mov	r4, r9
 800204c:	4326      	orrs	r6, r4
 800204e:	d1e7      	bne.n	8002020 <__ledf2+0x74>
 8002050:	e7e8      	b.n	8002024 <__ledf2+0x78>
 8002052:	429a      	cmp	r2, r3
 8002054:	dd06      	ble.n	8002064 <__ledf2+0xb8>
 8002056:	4243      	negs	r3, r0
 8002058:	4158      	adcs	r0, r3
 800205a:	2302      	movs	r3, #2
 800205c:	4240      	negs	r0, r0
 800205e:	4018      	ands	r0, r3
 8002060:	3801      	subs	r0, #1
 8002062:	e7e5      	b.n	8002030 <__ledf2+0x84>
 8002064:	429a      	cmp	r2, r3
 8002066:	dbe9      	blt.n	800203c <__ledf2+0x90>
 8002068:	454f      	cmp	r7, r9
 800206a:	d8db      	bhi.n	8002024 <__ledf2+0x78>
 800206c:	d006      	beq.n	800207c <__ledf2+0xd0>
 800206e:	2000      	movs	r0, #0
 8002070:	454f      	cmp	r7, r9
 8002072:	d2dd      	bcs.n	8002030 <__ledf2+0x84>
 8002074:	2900      	cmp	r1, #0
 8002076:	d0e3      	beq.n	8002040 <__ledf2+0x94>
 8002078:	0008      	movs	r0, r1
 800207a:	e7d9      	b.n	8002030 <__ledf2+0x84>
 800207c:	45c4      	cmp	ip, r8
 800207e:	d8d1      	bhi.n	8002024 <__ledf2+0x78>
 8002080:	2000      	movs	r0, #0
 8002082:	45c4      	cmp	ip, r8
 8002084:	d2d4      	bcs.n	8002030 <__ledf2+0x84>
 8002086:	e7f5      	b.n	8002074 <__ledf2+0xc8>
 8002088:	000007ff 	.word	0x000007ff

0800208c <__gnu_thumb1_case_uqi>:
 800208c:	b402      	push	{r1}
 800208e:	4671      	mov	r1, lr
 8002090:	0849      	lsrs	r1, r1, #1
 8002092:	0049      	lsls	r1, r1, #1
 8002094:	5c09      	ldrb	r1, [r1, r0]
 8002096:	0049      	lsls	r1, r1, #1
 8002098:	448e      	add	lr, r1
 800209a:	bc02      	pop	{r1}
 800209c:	4770      	bx	lr
 800209e:	46c0      	nop			; (mov r8, r8)

080020a0 <__gnu_thumb1_case_shi>:
 80020a0:	b403      	push	{r0, r1}
 80020a2:	4671      	mov	r1, lr
 80020a4:	0849      	lsrs	r1, r1, #1
 80020a6:	0040      	lsls	r0, r0, #1
 80020a8:	0049      	lsls	r1, r1, #1
 80020aa:	5e09      	ldrsh	r1, [r1, r0]
 80020ac:	0049      	lsls	r1, r1, #1
 80020ae:	448e      	add	lr, r1
 80020b0:	bc03      	pop	{r0, r1}
 80020b2:	4770      	bx	lr

080020b4 <__aeabi_ui2d>:
 80020b4:	b510      	push	{r4, lr}
 80020b6:	1e04      	subs	r4, r0, #0
 80020b8:	d010      	beq.n	80020dc <__aeabi_ui2d+0x28>
 80020ba:	f7ff feab 	bl	8001e14 <__clzsi2>
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <__aeabi_ui2d+0x48>)
 80020c0:	1a1b      	subs	r3, r3, r0
 80020c2:	280a      	cmp	r0, #10
 80020c4:	dc11      	bgt.n	80020ea <__aeabi_ui2d+0x36>
 80020c6:	220b      	movs	r2, #11
 80020c8:	0021      	movs	r1, r4
 80020ca:	1a12      	subs	r2, r2, r0
 80020cc:	40d1      	lsrs	r1, r2
 80020ce:	3015      	adds	r0, #21
 80020d0:	030a      	lsls	r2, r1, #12
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	4084      	lsls	r4, r0
 80020d6:	0b12      	lsrs	r2, r2, #12
 80020d8:	0d5b      	lsrs	r3, r3, #21
 80020da:	e001      	b.n	80020e0 <__aeabi_ui2d+0x2c>
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	051b      	lsls	r3, r3, #20
 80020e2:	4313      	orrs	r3, r2
 80020e4:	0020      	movs	r0, r4
 80020e6:	0019      	movs	r1, r3
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	0022      	movs	r2, r4
 80020ec:	380b      	subs	r0, #11
 80020ee:	4082      	lsls	r2, r0
 80020f0:	055b      	lsls	r3, r3, #21
 80020f2:	0312      	lsls	r2, r2, #12
 80020f4:	2400      	movs	r4, #0
 80020f6:	0b12      	lsrs	r2, r2, #12
 80020f8:	0d5b      	lsrs	r3, r3, #21
 80020fa:	e7f1      	b.n	80020e0 <__aeabi_ui2d+0x2c>
 80020fc:	0000041e 	.word	0x0000041e

08002100 <nano_wait>:
#define LCD_RESET_CLR GPIO_TYPE->BRR=1<<LCD_RESET

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1c18      	adds	r0, r3, #0

0800210c <repeat>:
 800210c:	3853      	subs	r0, #83	; 0x53
 800210e:	dcfd      	bgt.n	800210c <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <LCD_Reset>:

void LCD_Reset(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    // Assert reset
    GPIOA->BRR = 1<<LCD_RESET;
 800211c:	2390      	movs	r3, #144	; 0x90
 800211e:	05db      	lsls	r3, r3, #23
 8002120:	2204      	movs	r2, #4
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(100000000);
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <LCD_Reset+0x2c>)
 8002126:	0018      	movs	r0, r3
 8002128:	f7ff ffea 	bl	8002100 <nano_wait>
    GPIOA->BSRR = 1<<LCD_RESET;
 800212c:	2390      	movs	r3, #144	; 0x90
 800212e:	05db      	lsls	r3, r3, #23
 8002130:	2204      	movs	r2, #4
 8002132:	619a      	str	r2, [r3, #24]
    nano_wait(50000000);
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <LCD_Reset+0x30>)
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff ffe2 	bl	8002100 <nano_wait>
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	05f5e100 	.word	0x05f5e100
 8002148:	02faf080 	.word	0x02faf080

0800214c <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	0002      	movs	r2, r0
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <LCD_WR_REG+0x30>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	4013      	ands	r3, r2
 8002162:	d1fa      	bne.n	800215a <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    LCD_RS_CLR;
 8002164:	2390      	movs	r3, #144	; 0x90
 8002166:	05db      	lsls	r3, r3, #23
 8002168:	2208      	movs	r2, #8
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
    *((uint8_t*)&SPI->DR) = data;
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <LCD_WR_REG+0x34>)
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	7013      	strb	r3, [r2, #0]
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40013000 	.word	0x40013000
 8002180:	4001300c 	.word	0x4001300c

08002184 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	0002      	movs	r2, r0
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <LCD_WR_DATA+0x30>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	4013      	ands	r3, r2
 800219a:	d1fa      	bne.n	8002192 <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    LCD_RS_SET;
 800219c:	2390      	movs	r3, #144	; 0x90
 800219e:	05db      	lsls	r3, r3, #23
 80021a0:	2208      	movs	r2, #8
 80021a2:	619a      	str	r2, [r3, #24]
    *((uint8_t*)&SPI->DR) = data;
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <LCD_WR_DATA+0x34>)
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	7013      	strb	r3, [r2, #0]
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40013000 	.word	0x40013000
 80021b8:	4001300c 	.word	0x4001300c

080021bc <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
    LCD_RS_SET;
 80021c0:	2390      	movs	r3, #144	; 0x90
 80021c2:	05db      	lsls	r3, r3, #23
 80021c4:	2208      	movs	r2, #8
 80021c6:	619a      	str	r2, [r3, #24]
    SPI->CR2 |= SPI_CR2_DS;
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <LCD_WriteData16_Prepare+0x20>)
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <LCD_WriteData16_Prepare+0x20>)
 80021ce:	21f0      	movs	r1, #240	; 0xf0
 80021d0:	0109      	lsls	r1, r1, #4
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40013000 	.word	0x40013000

080021e0 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	0002      	movs	r2, r0
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <LCD_WriteData16+0x28>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0fa      	beq.n	80021ee <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <LCD_WriteData16+0x28>)
 80021fa:	1dba      	adds	r2, r7, #6
 80021fc:	8812      	ldrh	r2, [r2, #0]
 80021fe:	60da      	str	r2, [r3, #12]
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013000 	.word	0x40013000

0800220c <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <LCD_WriteData16_End+0x18>)
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <LCD_WriteData16_End+0x18>)
 8002216:	4904      	ldr	r1, [pc, #16]	; (8002228 <LCD_WriteData16_End+0x1c>)
 8002218:	400a      	ands	r2, r1
 800221a:	605a      	str	r2, [r3, #4]
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	40013000 	.word	0x40013000
 8002228:	fffff0ff 	.word	0xfffff0ff

0800222c <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	0002      	movs	r2, r0
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	1c0a      	adds	r2, r1, #0
 800223c:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff ff82 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	0018      	movs	r0, r3
 8002250:	f7ff ff98 	bl	8002184 <LCD_WR_DATA>
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <LCD_WriteRAM_Prepare+0x18>)
 8002262:	891b      	ldrh	r3, [r3, #8]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff ff70 	bl	800214c <LCD_WR_REG>
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	20001130 	.word	0x20001130

08002278 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	0002      	movs	r2, r0
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <LCD_direction+0xa4>)
 8002286:	222a      	movs	r2, #42	; 0x2a
 8002288:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <LCD_direction+0xa4>)
 800228c:	222b      	movs	r2, #43	; 0x2b
 800228e:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <LCD_direction+0xa4>)
 8002292:	222c      	movs	r2, #44	; 0x2c
 8002294:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d02c      	beq.n	80022f8 <LCD_direction+0x80>
 800229e:	dc37      	bgt.n	8002310 <LCD_direction+0x98>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d01d      	beq.n	80022e0 <LCD_direction+0x68>
 80022a4:	dc34      	bgt.n	8002310 <LCD_direction+0x98>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <LCD_direction+0x38>
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d00c      	beq.n	80022c8 <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 80022ae:	e02f      	b.n	8002310 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <LCD_direction+0xa4>)
 80022b2:	22f0      	movs	r2, #240	; 0xf0
 80022b4:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <LCD_direction+0xa4>)
 80022b8:	22a0      	movs	r2, #160	; 0xa0
 80022ba:	0052      	lsls	r2, r2, #1
 80022bc:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 80022be:	2108      	movs	r1, #8
 80022c0:	2036      	movs	r0, #54	; 0x36
 80022c2:	f7ff ffb3 	bl	800222c <LCD_WriteReg>
        break;
 80022c6:	e024      	b.n	8002312 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <LCD_direction+0xa4>)
 80022ca:	22a0      	movs	r2, #160	; 0xa0
 80022cc:	0052      	lsls	r2, r2, #1
 80022ce:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <LCD_direction+0xa4>)
 80022d2:	22f0      	movs	r2, #240	; 0xf0
 80022d4:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 80022d6:	2168      	movs	r1, #104	; 0x68
 80022d8:	2036      	movs	r0, #54	; 0x36
 80022da:	f7ff ffa7 	bl	800222c <LCD_WriteReg>
        break;
 80022de:	e018      	b.n	8002312 <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <LCD_direction+0xa4>)
 80022e2:	22f0      	movs	r2, #240	; 0xf0
 80022e4:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <LCD_direction+0xa4>)
 80022e8:	22a0      	movs	r2, #160	; 0xa0
 80022ea:	0052      	lsls	r2, r2, #1
 80022ec:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 80022ee:	21c8      	movs	r1, #200	; 0xc8
 80022f0:	2036      	movs	r0, #54	; 0x36
 80022f2:	f7ff ff9b 	bl	800222c <LCD_WriteReg>
        break;
 80022f6:	e00c      	b.n	8002312 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <LCD_direction+0xa4>)
 80022fa:	22a0      	movs	r2, #160	; 0xa0
 80022fc:	0052      	lsls	r2, r2, #1
 80022fe:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <LCD_direction+0xa4>)
 8002302:	22f0      	movs	r2, #240	; 0xf0
 8002304:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8002306:	21a8      	movs	r1, #168	; 0xa8
 8002308:	2036      	movs	r0, #54	; 0x36
 800230a:	f7ff ff8f 	bl	800222c <LCD_WriteReg>
        break;
 800230e:	e000      	b.n	8002312 <LCD_direction+0x9a>
    default:break;
 8002310:	46c0      	nop			; (mov r8, r8)
    }
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20001130 	.word	0x20001130

08002320 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    LCD_Reset();
 8002324:	f7ff fef8 	bl	8002118 <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8002328:	20cf      	movs	r0, #207	; 0xcf
 800232a:	f7ff ff0f 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff ff28 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8002334:	20d9      	movs	r0, #217	; 0xd9
 8002336:	f7ff ff25 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 800233a:	2030      	movs	r0, #48	; 0x30
 800233c:	f7ff ff22 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8002340:	20ed      	movs	r0, #237	; 0xed
 8002342:	f7ff ff03 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8002346:	2064      	movs	r0, #100	; 0x64
 8002348:	f7ff ff1c 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 800234c:	2003      	movs	r0, #3
 800234e:	f7ff ff19 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8002352:	2012      	movs	r0, #18
 8002354:	f7ff ff16 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8002358:	2081      	movs	r0, #129	; 0x81
 800235a:	f7ff ff13 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 800235e:	20e8      	movs	r0, #232	; 0xe8
 8002360:	f7ff fef4 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8002364:	2085      	movs	r0, #133	; 0x85
 8002366:	f7ff ff0d 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 800236a:	2010      	movs	r0, #16
 800236c:	f7ff ff0a 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8002370:	207a      	movs	r0, #122	; 0x7a
 8002372:	f7ff ff07 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8002376:	20cb      	movs	r0, #203	; 0xcb
 8002378:	f7ff fee8 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 800237c:	2039      	movs	r0, #57	; 0x39
 800237e:	f7ff ff01 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8002382:	202c      	movs	r0, #44	; 0x2c
 8002384:	f7ff fefe 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff fefb 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 800238e:	2034      	movs	r0, #52	; 0x34
 8002390:	f7ff fef8 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8002394:	2002      	movs	r0, #2
 8002396:	f7ff fef5 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 800239a:	20f7      	movs	r0, #247	; 0xf7
 800239c:	f7ff fed6 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 80023a0:	2020      	movs	r0, #32
 80023a2:	f7ff feef 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 80023a6:	20ea      	movs	r0, #234	; 0xea
 80023a8:	f7ff fed0 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fee9 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff fee6 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 80023b8:	20c0      	movs	r0, #192	; 0xc0
 80023ba:	f7ff fec7 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 80023be:	2021      	movs	r0, #33	; 0x21
 80023c0:	f7ff fee0 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 80023c4:	20c1      	movs	r0, #193	; 0xc1
 80023c6:	f7ff fec1 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 80023ca:	2012      	movs	r0, #18
 80023cc:	f7ff feda 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 80023d0:	20c5      	movs	r0, #197	; 0xc5
 80023d2:	f7ff febb 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 80023d6:	2039      	movs	r0, #57	; 0x39
 80023d8:	f7ff fed4 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 80023dc:	2037      	movs	r0, #55	; 0x37
 80023de:	f7ff fed1 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 80023e2:	20c7      	movs	r0, #199	; 0xc7
 80023e4:	f7ff feb2 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 80023e8:	20ab      	movs	r0, #171	; 0xab
 80023ea:	f7ff fecb 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 80023ee:	2036      	movs	r0, #54	; 0x36
 80023f0:	f7ff feac 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 80023f4:	2048      	movs	r0, #72	; 0x48
 80023f6:	f7ff fec5 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 80023fa:	203a      	movs	r0, #58	; 0x3a
 80023fc:	f7ff fea6 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 8002400:	2055      	movs	r0, #85	; 0x55
 8002402:	f7ff febf 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8002406:	20b1      	movs	r0, #177	; 0xb1
 8002408:	f7ff fea0 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff feb9 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8002412:	201b      	movs	r0, #27
 8002414:	f7ff feb6 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8002418:	20b6      	movs	r0, #182	; 0xb6
 800241a:	f7ff fe97 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 800241e:	200a      	movs	r0, #10
 8002420:	f7ff feb0 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8002424:	20a2      	movs	r0, #162	; 0xa2
 8002426:	f7ff fead 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800242a:	20f2      	movs	r0, #242	; 0xf2
 800242c:	f7ff fe8e 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fea7 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8002436:	2026      	movs	r0, #38	; 0x26
 8002438:	f7ff fe88 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 800243c:	2001      	movs	r0, #1
 800243e:	f7ff fea1 	bl	8002184 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8002442:	20e0      	movs	r0, #224	; 0xe0
 8002444:	f7ff fe82 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8002448:	200f      	movs	r0, #15
 800244a:	f7ff fe9b 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 800244e:	2023      	movs	r0, #35	; 0x23
 8002450:	f7ff fe98 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8002454:	201f      	movs	r0, #31
 8002456:	f7ff fe95 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 800245a:	200b      	movs	r0, #11
 800245c:	f7ff fe92 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8002460:	200e      	movs	r0, #14
 8002462:	f7ff fe8f 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8002466:	2008      	movs	r0, #8
 8002468:	f7ff fe8c 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 800246c:	204b      	movs	r0, #75	; 0x4b
 800246e:	f7ff fe89 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8002472:	20a8      	movs	r0, #168	; 0xa8
 8002474:	f7ff fe86 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8002478:	203b      	movs	r0, #59	; 0x3b
 800247a:	f7ff fe83 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 800247e:	200a      	movs	r0, #10
 8002480:	f7ff fe80 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8002484:	2014      	movs	r0, #20
 8002486:	f7ff fe7d 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 800248a:	2006      	movs	r0, #6
 800248c:	f7ff fe7a 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002490:	2010      	movs	r0, #16
 8002492:	f7ff fe77 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8002496:	2009      	movs	r0, #9
 8002498:	f7ff fe74 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff fe71 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 80024a2:	20e1      	movs	r0, #225	; 0xe1
 80024a4:	f7ff fe52 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff fe6b 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 80024ae:	201c      	movs	r0, #28
 80024b0:	f7ff fe68 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 80024b4:	2020      	movs	r0, #32
 80024b6:	f7ff fe65 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 80024ba:	2004      	movs	r0, #4
 80024bc:	f7ff fe62 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 80024c0:	2010      	movs	r0, #16
 80024c2:	f7ff fe5f 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 80024c6:	2008      	movs	r0, #8
 80024c8:	f7ff fe5c 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 80024cc:	2034      	movs	r0, #52	; 0x34
 80024ce:	f7ff fe59 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 80024d2:	2047      	movs	r0, #71	; 0x47
 80024d4:	f7ff fe56 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 80024d8:	2044      	movs	r0, #68	; 0x44
 80024da:	f7ff fe53 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 80024de:	2005      	movs	r0, #5
 80024e0:	f7ff fe50 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 80024e4:	200b      	movs	r0, #11
 80024e6:	f7ff fe4d 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 80024ea:	2009      	movs	r0, #9
 80024ec:	f7ff fe4a 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 80024f0:	202f      	movs	r0, #47	; 0x2f
 80024f2:	f7ff fe47 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 80024f6:	2036      	movs	r0, #54	; 0x36
 80024f8:	f7ff fe44 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 80024fc:	200f      	movs	r0, #15
 80024fe:	f7ff fe41 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8002502:	202b      	movs	r0, #43	; 0x2b
 8002504:	f7ff fe22 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f7ff fe3b 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff fe38 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff fe35 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 800251a:	203f      	movs	r0, #63	; 0x3f
 800251c:	f7ff fe32 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8002520:	202a      	movs	r0, #42	; 0x2a
 8002522:	f7ff fe13 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff fe2c 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff fe29 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff fe26 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8002538:	20ef      	movs	r0, #239	; 0xef
 800253a:	f7ff fe23 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 800253e:	2011      	movs	r0, #17
 8002540:	f7ff fe04 	bl	800214c <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <LCD_Init+0x240>)
 8002546:	0018      	movs	r0, r3
 8002548:	f7ff fdda 	bl	8002100 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 800254c:	2029      	movs	r0, #41	; 0x29
 800254e:	f7ff fdfd 	bl	800214c <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8002552:	2000      	movs	r0, #0
 8002554:	f7ff fe90 	bl	8002278 <LCD_direction>
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	07270e00 	.word	0x07270e00

08002564 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	0002      	movs	r2, r0
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	801a      	strh	r2, [r3, #0]
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <LCD_Clear+0x6c>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <LCD_Clear+0x6c>)
 8002578:	885b      	ldrh	r3, [r3, #2]
 800257a:	3b01      	subs	r3, #1
 800257c:	2100      	movs	r1, #0
 800257e:	2000      	movs	r0, #0
 8002580:	f000 f828 	bl	80025d4 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8002584:	f7ff fe1a 	bl	80021bc <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e013      	b.n	80025b6 <LCD_Clear+0x52>
    {
        for(m=0;m<lcddev.width;m++)
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	e007      	b.n	80025a4 <LCD_Clear+0x40>
        {
            LCD_WriteData16(Color);
 8002594:	1dbb      	adds	r3, r7, #6
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fe21 	bl	80021e0 <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <LCD_Clear+0x6c>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	001a      	movs	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d3f1      	bcc.n	8002594 <LCD_Clear+0x30>
    for(i=0;i<lcddev.height;i++)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <LCD_Clear+0x6c>)
 80025b8:	885b      	ldrh	r3, [r3, #2]
 80025ba:	001a      	movs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d3e5      	bcc.n	800258e <LCD_Clear+0x2a>
        }
    }
    LCD_WriteData16_End();
 80025c2:	f7ff fe23 	bl	800220c <LCD_WriteData16_End>
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	20001130 	.word	0x20001130

080025d4 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	0005      	movs	r5, r0
 80025dc:	000c      	movs	r4, r1
 80025de:	0010      	movs	r0, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	1dbb      	adds	r3, r7, #6
 80025e4:	1c2a      	adds	r2, r5, #0
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	1c22      	adds	r2, r4, #0
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	1cbb      	adds	r3, r7, #2
 80025f0:	1c02      	adds	r2, r0, #0
 80025f2:	801a      	strh	r2, [r3, #0]
 80025f4:	003b      	movs	r3, r7
 80025f6:	1c0a      	adds	r2, r1, #0
 80025f8:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 80025fa:	4b25      	ldr	r3, [pc, #148]	; (8002690 <LCD_SetWindow+0xbc>)
 80025fc:	895b      	ldrh	r3, [r3, #10]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fda3 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8002606:	1dbb      	adds	r3, r7, #6
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	b29b      	uxth	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff fdb7 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8002616:	1dbb      	adds	r3, r7, #6
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff fdb1 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8002622:	1cbb      	adds	r3, r7, #2
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff fda9 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8002632:	1cbb      	adds	r3, r7, #2
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff fda3 	bl	8002184 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <LCD_SetWindow+0xbc>)
 8002640:	899b      	ldrh	r3, [r3, #12]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff fd81 	bl	800214c <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	b29b      	uxth	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff fd95 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff fd8f 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8002666:	003b      	movs	r3, r7
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	b29b      	uxth	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff fd87 	bl	8002184 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8002676:	003b      	movs	r3, r7
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff fd81 	bl	8002184 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8002682:	f7ff fdeb 	bl	800225c <LCD_WriteRAM_Prepare>
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b002      	add	sp, #8
 800268c:	bdb0      	pop	{r4, r5, r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	20001130 	.word	0x20001130

08002694 <LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
void LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	0004      	movs	r4, r0
 800269c:	0008      	movs	r0, r1
 800269e:	0011      	movs	r1, r2
 80026a0:	1dbb      	adds	r3, r7, #6
 80026a2:	1c22      	adds	r2, r4, #0
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	1c02      	adds	r2, r0, #0
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	1cbb      	adds	r3, r7, #2
 80026ae:	1c0a      	adds	r2, r1, #0
 80026b0:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	881c      	ldrh	r4, [r3, #0]
 80026b6:	1dbb      	adds	r3, r7, #6
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	8819      	ldrh	r1, [r3, #0]
 80026be:	1dbb      	adds	r3, r7, #6
 80026c0:	8818      	ldrh	r0, [r3, #0]
 80026c2:	0023      	movs	r3, r4
 80026c4:	f7ff ff86 	bl	80025d4 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 80026c8:	f7ff fd78 	bl	80021bc <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 80026cc:	1cbb      	adds	r3, r7, #2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff fd85 	bl	80021e0 <LCD_WriteData16>
    LCD_WriteData16_End();
 80026d6:	f7ff fd99 	bl	800220c <LCD_WriteData16_End>
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b003      	add	sp, #12
 80026e0:	bd90      	pop	{r4, r7, pc}
	...

080026e4 <LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	0005      	movs	r5, r0
 80026ec:	000c      	movs	r4, r1
 80026ee:	0010      	movs	r0, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	1dbb      	adds	r3, r7, #6
 80026f4:	1c2a      	adds	r2, r5, #0
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	1c22      	adds	r2, r4, #0
 80026fc:	801a      	strh	r2, [r3, #0]
 80026fe:	1cbb      	adds	r3, r7, #2
 8002700:	1c02      	adds	r2, r0, #0
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	003b      	movs	r3, r7
 8002706:	1c0a      	adds	r2, r1, #0
 8002708:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 800270a:	2220      	movs	r2, #32
 800270c:	18bb      	adds	r3, r7, r2
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	3a20      	subs	r2, #32
 8002714:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8002716:	2124      	movs	r1, #36	; 0x24
 8002718:	187b      	adds	r3, r7, r1
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	b29a      	uxth	r2, r3
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	18d3      	adds	r3, r2, r3
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29c      	uxth	r4, r3
 800272e:	187b      	adds	r3, r7, r1
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b29a      	uxth	r2, r3
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	18d3      	adds	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	8819      	ldrh	r1, [r3, #0]
 8002744:	1dbb      	adds	r3, r7, #6
 8002746:	8818      	ldrh	r0, [r3, #0]
 8002748:	0013      	movs	r3, r2
 800274a:	0022      	movs	r2, r4
 800274c:	f7ff ff42 	bl	80025d4 <LCD_SetWindow>
    if (!mode) {
 8002750:	2328      	movs	r3, #40	; 0x28
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d166      	bne.n	8002828 <LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 800275a:	f7ff fd2f 	bl	80021bc <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 800275e:	230e      	movs	r3, #14
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e054      	b.n	8002812 <LCD_DrawChar+0x12e>
            if (size==12)
 8002768:	2324      	movs	r3, #36	; 0x24
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d110      	bne.n	8002794 <LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 8002772:	2320      	movs	r3, #32
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	230e      	movs	r3, #14
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	7818      	ldrb	r0, [r3, #0]
 800277e:	230f      	movs	r3, #15
 8002780:	18f9      	adds	r1, r7, r3
 8002782:	4c61      	ldr	r4, [pc, #388]	; (8002908 <LCD_DrawChar+0x224>)
 8002784:	0013      	movs	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	189b      	adds	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	18e3      	adds	r3, r4, r3
 800278e:	5c1b      	ldrb	r3, [r3, r0]
 8002790:	700b      	strb	r3, [r1, #0]
 8002792:	e00c      	b.n	80027ae <LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 8002794:	2320      	movs	r3, #32
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	7819      	ldrb	r1, [r3, #0]
 800279a:	230e      	movs	r3, #14
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	4859      	ldr	r0, [pc, #356]	; (800290c <LCD_DrawChar+0x228>)
 80027a6:	0109      	lsls	r1, r1, #4
 80027a8:	1841      	adds	r1, r0, r1
 80027aa:	5c8a      	ldrb	r2, [r1, r2]
 80027ac:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 80027ae:	230d      	movs	r3, #13
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e01c      	b.n	80027f2 <LCD_DrawChar+0x10e>
                if (temp&0x01)
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	d005      	beq.n	80027d0 <LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 80027c4:	1cbb      	adds	r3, r7, #2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff fd09 	bl	80021e0 <LCD_WriteData16>
 80027ce:	e004      	b.n	80027da <LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 80027d0:	003b      	movs	r3, r7
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff fd03 	bl	80021e0 <LCD_WriteData16>
                temp>>=1;
 80027da:	220f      	movs	r2, #15
 80027dc:	18bb      	adds	r3, r7, r2
 80027de:	18ba      	adds	r2, r7, r2
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	0852      	lsrs	r2, r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 80027e6:	210d      	movs	r1, #13
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	3201      	adds	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	2324      	movs	r3, #36	; 0x24
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	220d      	movs	r2, #13
 80027fe:	18ba      	adds	r2, r7, r2
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d3d8      	bcc.n	80027b8 <LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 8002806:	210e      	movs	r1, #14
 8002808:	187b      	adds	r3, r7, r1
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	187b      	adds	r3, r7, r1
 800280e:	3201      	adds	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	230e      	movs	r3, #14
 8002814:	18fa      	adds	r2, r7, r3
 8002816:	2324      	movs	r3, #36	; 0x24
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	7812      	ldrb	r2, [r2, #0]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3a2      	bcc.n	8002768 <LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 8002822:	f7ff fcf3 	bl	800220c <LCD_WriteData16_End>
                    LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 8002826:	e06b      	b.n	8002900 <LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 8002828:	230e      	movs	r3, #14
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e05e      	b.n	80028f0 <LCD_DrawChar+0x20c>
            if (size==12)
 8002832:	2324      	movs	r3, #36	; 0x24
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d110      	bne.n	800285e <LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 800283c:	2320      	movs	r3, #32
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	781a      	ldrb	r2, [r3, #0]
 8002842:	230e      	movs	r3, #14
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	7818      	ldrb	r0, [r3, #0]
 8002848:	230f      	movs	r3, #15
 800284a:	18f9      	adds	r1, r7, r3
 800284c:	4c2e      	ldr	r4, [pc, #184]	; (8002908 <LCD_DrawChar+0x224>)
 800284e:	0013      	movs	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	189b      	adds	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	18e3      	adds	r3, r4, r3
 8002858:	5c1b      	ldrb	r3, [r3, r0]
 800285a:	700b      	strb	r3, [r1, #0]
 800285c:	e00c      	b.n	8002878 <LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 800285e:	2320      	movs	r3, #32
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	7819      	ldrb	r1, [r3, #0]
 8002864:	230e      	movs	r3, #14
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	230f      	movs	r3, #15
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	4827      	ldr	r0, [pc, #156]	; (800290c <LCD_DrawChar+0x228>)
 8002870:	0109      	lsls	r1, r1, #4
 8002872:	1841      	adds	r1, r0, r1
 8002874:	5c8a      	ldrb	r2, [r1, r2]
 8002876:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8002878:	230d      	movs	r3, #13
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e026      	b.n	80028d0 <LCD_DrawChar+0x1ec>
                if(temp&0x01)
 8002882:	230f      	movs	r3, #15
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d014      	beq.n	80028b8 <LCD_DrawChar+0x1d4>
                    LCD_DrawPoint(x+t,y+pos,fc);
 800288e:	230d      	movs	r3, #13
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b29a      	uxth	r2, r3
 8002896:	1dbb      	adds	r3, r7, #6
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	18d3      	adds	r3, r2, r3
 800289c:	b298      	uxth	r0, r3
 800289e:	230e      	movs	r3, #14
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	18d3      	adds	r3, r2, r3
 80028ac:	b299      	uxth	r1, r3
 80028ae:	1cbb      	adds	r3, r7, #2
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	001a      	movs	r2, r3
 80028b4:	f7ff feee 	bl	8002694 <LCD_DrawPoint>
                temp>>=1;
 80028b8:	220f      	movs	r2, #15
 80028ba:	18bb      	adds	r3, r7, r2
 80028bc:	18ba      	adds	r2, r7, r2
 80028be:	7812      	ldrb	r2, [r2, #0]
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 80028c4:	210d      	movs	r1, #13
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	3201      	adds	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	2324      	movs	r3, #36	; 0x24
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	220d      	movs	r2, #13
 80028dc:	18ba      	adds	r2, r7, r2
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3ce      	bcc.n	8002882 <LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 80028e4:	210e      	movs	r1, #14
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	3201      	adds	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	230e      	movs	r3, #14
 80028f2:	18fa      	adds	r2, r7, r3
 80028f4:	2324      	movs	r3, #36	; 0x24
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d398      	bcc.n	8002832 <LCD_DrawChar+0x14e>
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b004      	add	sp, #16
 8002906:	bdb0      	pop	{r4, r5, r7, pc}
 8002908:	0800b0a0 	.word	0x0800b0a0
 800290c:	0800b514 	.word	0x0800b514

08002910 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 8002910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002912:	b087      	sub	sp, #28
 8002914:	af04      	add	r7, sp, #16
 8002916:	0005      	movs	r5, r0
 8002918:	000c      	movs	r4, r1
 800291a:	0010      	movs	r0, r2
 800291c:	0019      	movs	r1, r3
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	1c2a      	adds	r2, r5, #0
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	1c22      	adds	r2, r4, #0
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	1cbb      	adds	r3, r7, #2
 800292c:	1c02      	adds	r2, r0, #0
 800292e:	801a      	strh	r2, [r3, #0]
 8002930:	003b      	movs	r3, r7
 8002932:	1c0a      	adds	r2, r1, #0
 8002934:	801a      	strh	r2, [r3, #0]
    while((*p<='~')&&(*p>=' '))
 8002936:	e036      	b.n	80029a6 <LCD_DrawString+0x96>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <LCD_DrawString+0xb0>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	1dba      	adds	r2, r7, #6
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d239      	bcs.n	80029b8 <LCD_DrawString+0xa8>
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <LCD_DrawString+0xb0>)
 8002946:	885b      	ldrh	r3, [r3, #2]
 8002948:	1d3a      	adds	r2, r7, #4
 800294a:	8812      	ldrh	r2, [r2, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d233      	bcs.n	80029b8 <LCD_DrawString+0xa8>
        return;
        LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	003a      	movs	r2, r7
 8002956:	8815      	ldrh	r5, [r2, #0]
 8002958:	1cba      	adds	r2, r7, #2
 800295a:	8814      	ldrh	r4, [r2, #0]
 800295c:	1d3a      	adds	r2, r7, #4
 800295e:	8811      	ldrh	r1, [r2, #0]
 8002960:	1dba      	adds	r2, r7, #6
 8002962:	8810      	ldrh	r0, [r2, #0]
 8002964:	2220      	movs	r2, #32
 8002966:	2608      	movs	r6, #8
 8002968:	46b4      	mov	ip, r6
 800296a:	44bc      	add	ip, r7
 800296c:	4462      	add	r2, ip
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	9202      	str	r2, [sp, #8]
 8002972:	261c      	movs	r6, #28
 8002974:	2208      	movs	r2, #8
 8002976:	18ba      	adds	r2, r7, r2
 8002978:	1992      	adds	r2, r2, r6
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	9201      	str	r2, [sp, #4]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	002b      	movs	r3, r5
 8002982:	0022      	movs	r2, r4
 8002984:	f7ff feae 	bl	80026e4 <LCD_DrawChar>
        x+=size/2;
 8002988:	2308      	movs	r3, #8
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	199b      	adds	r3, r3, r6
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	b299      	uxth	r1, r3
 8002996:	1dbb      	adds	r3, r7, #6
 8002998:	1dba      	adds	r2, r7, #6
 800299a:	8812      	ldrh	r2, [r2, #0]
 800299c:	188a      	adds	r2, r1, r2
 800299e:	801a      	strh	r2, [r3, #0]
        p++;
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	3301      	adds	r3, #1
 80029a4:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b7e      	cmp	r3, #126	; 0x7e
 80029ac:	d805      	bhi.n	80029ba <LCD_DrawString+0xaa>
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b1f      	cmp	r3, #31
 80029b4:	d8c0      	bhi.n	8002938 <LCD_DrawString+0x28>
 80029b6:	e000      	b.n	80029ba <LCD_DrawString+0xaa>
        return;
 80029b8:	46c0      	nop			; (mov r8, r8)
    }
}
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b003      	add	sp, #12
 80029be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c0:	20001130 	.word	0x20001130

080029c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029c8:	f001 fca6 	bl	8004318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029cc:	f000 f822 	bl	8002a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d0:	f000 fa68 	bl	8002ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 80029d4:	f000 fa48 	bl	8002e68 <MX_DMA_Init>
  MX_ADC_Init();
 80029d8:	f000 f87a 	bl	8002ad0 <MX_ADC_Init>
  MX_SPI1_Init();
 80029dc:	f000 f912 	bl	8002c04 <MX_SPI1_Init>
  MX_TIM1_Init();
 80029e0:	f000 f9aa 	bl	8002d38 <MX_TIM1_Init>
  MX_I2C1_Init();
 80029e4:	f000 f8ce 	bl	8002b84 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	4808      	ldr	r0, [pc, #32]	; (8002a10 <main+0x4c>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	0019      	movs	r1, r3
 80029f2:	f002 fd50 	bl	8005496 <HAL_GPIO_WritePin>
  initialize();
 80029f6:	f000 fc31 	bl	800325c <initialize>
  LCD_Init();
 80029fa:	f7ff fc91 	bl	8002320 <LCD_Init>
  LCD_Clear(BLUE);
 80029fe:	201f      	movs	r0, #31
 8002a00:	f7ff fdb0 	bl	8002564 <LCD_Clear>
  resetSel();
 8002a04:	f000 ffa6 	bl	8003954 <resetSel>
  menu_home();
 8002a08:	f000 fd4a 	bl	80034a0 <menu_home>
  /*auto_tune();
  HAL_Delay(1000);
  dspmain();*/
  while(1)
 8002a0c:	e7fe      	b.n	8002a0c <main+0x48>
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	48000400 	.word	0x48000400

08002a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b099      	sub	sp, #100	; 0x64
 8002a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1a:	242c      	movs	r4, #44	; 0x2c
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	0018      	movs	r0, r3
 8002a20:	2334      	movs	r3, #52	; 0x34
 8002a22:	001a      	movs	r2, r3
 8002a24:	2100      	movs	r1, #0
 8002a26:	f005 fe43 	bl	80086b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a2a:	231c      	movs	r3, #28
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	0018      	movs	r0, r3
 8002a30:	2310      	movs	r3, #16
 8002a32:	001a      	movs	r2, r3
 8002a34:	2100      	movs	r1, #0
 8002a36:	f005 fe3b 	bl	80086b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	231c      	movs	r3, #28
 8002a40:	001a      	movs	r2, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	f005 fe34 	bl	80086b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002a48:	0021      	movs	r1, r4
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2212      	movs	r2, #18
 8002a4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2201      	movs	r2, #1
 8002a54:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2201      	movs	r2, #1
 8002a5a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2210      	movs	r2, #16
 8002a60:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2210      	movs	r2, #16
 8002a66:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	0018      	movs	r0, r3
 8002a72:	f004 f985 	bl	8006d80 <HAL_RCC_OscConfig>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002a7a:	f000 fbe9 	bl	8003250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a7e:	211c      	movs	r1, #28
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	2207      	movs	r2, #7
 8002a84:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f004 fcf5 	bl	800748c <HAL_RCC_ClockConfig>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002aa6:	f000 fbd3 	bl	8003250 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002aaa:	003b      	movs	r3, r7
 8002aac:	2220      	movs	r2, #32
 8002aae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002ab0:	003b      	movs	r3, r7
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab6:	003b      	movs	r3, r7
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f004 fe41 	bl	8007740 <HAL_RCCEx_PeriphCLKConfig>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d001      	beq.n	8002ac6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002ac2:	f000 fbc5 	bl	8003250 <Error_Handler>
  }
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b019      	add	sp, #100	; 0x64
 8002acc:	bd90      	pop	{r4, r7, pc}
	...

08002ad0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	0018      	movs	r0, r3
 8002ada:	230c      	movs	r3, #12
 8002adc:	001a      	movs	r2, r3
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f005 fde6 	bl	80086b0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <MX_ADC_Init+0xac>)
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <MX_ADC_Init+0xb0>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <MX_ADC_Init+0xac>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <MX_ADC_Init+0xac>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <MX_ADC_Init+0xac>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <MX_ADC_Init+0xac>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b04:	2204      	movs	r2, #4
 8002b06:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b22:	22c2      	movs	r2, #194	; 0xc2
 8002b24:	32ff      	adds	r2, #255	; 0xff
 8002b26:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b30:	2224      	movs	r2, #36	; 0x24
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 fc4e 	bl	80043e0 <HAL_ADC_Init>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002b48:	f000 fb82 	bl	8003250 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0152      	lsls	r2, r2, #5
 8002b58:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002b60:	1d3a      	adds	r2, r7, #4
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_ADC_Init+0xac>)
 8002b64:	0011      	movs	r1, r2
 8002b66:	0018      	movs	r0, r3
 8002b68:	f001 fe04 	bl	8004774 <HAL_ADC_ConfigChannel>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002b70:	f000 fb6e 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b004      	add	sp, #16
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20001284 	.word	0x20001284
 8002b80:	40012400 	.word	0x40012400

08002b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <MX_I2C1_Init+0x78>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <MX_I2C1_Init+0x7c>)
 8002b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b94:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f002 fca1 	bl	8005508 <HAL_I2C_Init>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d001      	beq.n	8002bce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bca:	f000 fb41 	bl	8003250 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f004 f83c 	bl	8006c50 <HAL_I2CEx_ConfigAnalogFilter>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d001      	beq.n	8002be0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bdc:	f000 fb38 	bl	8003250 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <MX_I2C1_Init+0x74>)
 8002be2:	2100      	movs	r1, #0
 8002be4:	0018      	movs	r0, r3
 8002be6:	f004 f87f 	bl	8006ce8 <HAL_I2CEx_ConfigDigitalFilter>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bee:	f000 fb2f 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20001144 	.word	0x20001144
 8002bfc:	40005400 	.word	0x40005400
 8002c00:	2000090e 	.word	0x2000090e

08002c04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c08:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c0a:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c0e:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c10:	2282      	movs	r2, #130	; 0x82
 8002c12:	0052      	lsls	r2, r2, #1
 8002c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c16:	4b42      	ldr	r3, [pc, #264]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c1e:	22c0      	movs	r2, #192	; 0xc0
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c24:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002c30:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	02d2      	lsls	r2, r2, #11
 8002c36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c50:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c52:	2207      	movs	r2, #7
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c56:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c5e:	2208      	movs	r2, #8
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <MX_SPI1_Init+0x11c>)
 8002c64:	0018      	movs	r0, r3
 8002c66:	f004 fe6b 	bl	8007940 <HAL_SPI_Init>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c6e:	f000 faef 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <MX_SPI1_Init+0x124>)
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <MX_SPI1_Init+0x124>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0289      	lsls	r1, r1, #10
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	615a      	str	r2, [r3, #20]
  GPIOA -> MODER &= ~GPIO_MODER_MODER4 & ~GPIO_MODER_MODER5 & ~GPIO_MODER_MODER7;
 8002c80:	2390      	movs	r3, #144	; 0x90
 8002c82:	05db      	lsls	r3, r3, #23
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2390      	movs	r3, #144	; 0x90
 8002c88:	05db      	lsls	r3, r3, #23
 8002c8a:	4928      	ldr	r1, [pc, #160]	; (8002d2c <MX_SPI1_Init+0x128>)
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8002c90:	2390      	movs	r3, #144	; 0x90
 8002c92:	05db      	lsls	r3, r3, #23
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2390      	movs	r3, #144	; 0x90
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	218a      	movs	r1, #138	; 0x8a
 8002c9c:	0209      	lsls	r1, r1, #8
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER &= ~GPIO_MODER_MODER2 & ~GPIO_MODER_MODER3;
 8002ca2:	2390      	movs	r3, #144	; 0x90
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2390      	movs	r3, #144	; 0x90
 8002caa:	05db      	lsls	r3, r3, #23
 8002cac:	21f0      	movs	r1, #240	; 0xf0
 8002cae:	438a      	bics	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
 8002cb2:	2390      	movs	r3, #144	; 0x90
 8002cb4:	05db      	lsls	r3, r3, #23
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2390      	movs	r3, #144	; 0x90
 8002cba:	05db      	lsls	r3, r3, #23
 8002cbc:	2150      	movs	r1, #80	; 0x50
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL4 & ~GPIO_AFRL_AFRL5 & ~GPIO_AFRL_AFRL7;
 8002cc2:	2390      	movs	r3, #144	; 0x90
 8002cc4:	05db      	lsls	r3, r3, #23
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	2390      	movs	r3, #144	; 0x90
 8002cca:	05db      	lsls	r3, r3, #23
 8002ccc:	4918      	ldr	r1, [pc, #96]	; (8002d30 <MX_SPI1_Init+0x12c>)
 8002cce:	400a      	ands	r2, r1
 8002cd0:	621a      	str	r2, [r3, #32]

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_SPI1_Init+0x124>)
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_SPI1_Init+0x124>)
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	0149      	lsls	r1, r1, #5
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	619a      	str	r2, [r3, #24]
  SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002ce6:	4913      	ldr	r1, [pc, #76]	; (8002d34 <MX_SPI1_Init+0x130>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
  SPI1->CR1 &= ~SPI_CR1_BR;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002cf2:	2138      	movs	r1, #56	; 0x38
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
  SPI1->CR2 = SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002cfa:	22e0      	movs	r2, #224	; 0xe0
 8002cfc:	00d2      	lsls	r2, r2, #3
 8002cfe:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |= SPI_CR2_NSSP | SPI_CR2_SSOE;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002d06:	210c      	movs	r1, #12
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <MX_SPI1_Init+0x120>)
 8002d12:	2140      	movs	r1, #64	; 0x40
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	200011dc 	.word	0x200011dc
 8002d24:	40013000 	.word	0x40013000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	ffff30ff 	.word	0xffff30ff
 8002d30:	0f00ffff 	.word	0x0f00ffff
 8002d34:	0000c004 	.word	0x0000c004

08002d38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b092      	sub	sp, #72	; 0x48
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	0018      	movs	r0, r3
 8002d44:	2308      	movs	r3, #8
 8002d46:	001a      	movs	r2, r3
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f005 fcb1 	bl	80086b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4e:	2324      	movs	r3, #36	; 0x24
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	0018      	movs	r0, r3
 8002d54:	231c      	movs	r3, #28
 8002d56:	001a      	movs	r2, r3
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f005 fca9 	bl	80086b0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	0018      	movs	r0, r3
 8002d62:	2320      	movs	r3, #32
 8002d64:	001a      	movs	r2, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	f005 fca2 	bl	80086b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d6c:	4b3a      	ldr	r3, [pc, #232]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <MX_TIM1_Init+0x124>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d72:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7500;
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d80:	4a37      	ldr	r2, [pc, #220]	; (8002e60 <MX_TIM1_Init+0x128>)
 8002d82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d96:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f004 fe89 	bl	8007ab0 <HAL_TIM_PWM_Init>
 8002d9e:	1e03      	subs	r3, r0, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002da2:	f000 fa55 	bl	8003250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002db4:	187a      	adds	r2, r7, r1
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002db8:	0011      	movs	r1, r2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f005 fb62 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002dc4:	f000 fa44 	bl	8003250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc8:	2124      	movs	r1, #36	; 0x24
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2260      	movs	r2, #96	; 0x60
 8002dce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7500/2;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <MX_TIM1_Init+0x12c>)
 8002dd4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df4:	1879      	adds	r1, r7, r1
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f004 ffdc 	bl	8007db8 <HAL_TIM_PWM_ConfigChannel>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002e04:	f000 fa24 	bl	8003250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	0192      	lsls	r2, r2, #6
 8002e2c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e34:	1d3a      	adds	r2, r7, #4
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f005 fb80 	bl	8008540 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002e44:	f000 fa04 	bl	8003250 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */



  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <MX_TIM1_Init+0x120>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f001 f902 	bl	8004054 <HAL_TIM_MspPostInit>

}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b012      	add	sp, #72	; 0x48
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20001194 	.word	0x20001194
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	00001d4c 	.word	0x00001d4c
 8002e64:	00000ea6 	.word	0x00000ea6

08002e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <MX_DMA_Init+0x38>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <MX_DMA_Init+0x38>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	430a      	orrs	r2, r1
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <MX_DMA_Init+0x38>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	2009      	movs	r0, #9
 8002e8c:	f001 ff34 	bl	8004cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8002e90:	2009      	movs	r0, #9
 8002e92:	f001 ff46 	bl	8004d22 <HAL_NVIC_EnableIRQ>

}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eaa:	240c      	movs	r4, #12
 8002eac:	193b      	adds	r3, r7, r4
 8002eae:	0018      	movs	r0, r3
 8002eb0:	2314      	movs	r3, #20
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f005 fbfb 	bl	80086b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	4b62      	ldr	r3, [pc, #392]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	0289      	lsls	r1, r1, #10
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	4b5f      	ldr	r3, [pc, #380]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	02c9      	lsls	r1, r1, #11
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	4b58      	ldr	r3, [pc, #352]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	02db      	lsls	r3, r3, #11
 8002eec:	4013      	ands	r3, r2
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef2:	4b55      	ldr	r3, [pc, #340]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	4b54      	ldr	r3, [pc, #336]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0309      	lsls	r1, r1, #12
 8002efc:	430a      	orrs	r2, r1
 8002efe:	615a      	str	r2, [r3, #20]
 8002f00:	4b51      	ldr	r3, [pc, #324]	; (8003048 <MX_GPIO_Init+0x1a4>)
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	031b      	lsls	r3, r3, #12
 8002f08:	4013      	ands	r3, r2
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002f0e:	2390      	movs	r3, #144	; 0x90
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	2200      	movs	r2, #0
 8002f14:	210c      	movs	r1, #12
 8002f16:	0018      	movs	r0, r3
 8002f18:	f002 fabd 	bl	8005496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002f1c:	23c8      	movs	r3, #200	; 0xc8
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	484a      	ldr	r0, [pc, #296]	; (800304c <MX_GPIO_Init+0x1a8>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	0019      	movs	r1, r3
 8002f26:	f002 fab6 	bl	8005496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	4847      	ldr	r0, [pc, #284]	; (800304c <MX_GPIO_Init+0x1a8>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	0019      	movs	r1, r3
 8002f34:	f002 faaf 	bl	8005496 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8002f38:	23b8      	movs	r3, #184	; 0xb8
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4844      	ldr	r0, [pc, #272]	; (8003050 <MX_GPIO_Init+0x1ac>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	0019      	movs	r1, r3
 8002f42:	f002 faa8 	bl	8005496 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	220c      	movs	r2, #12
 8002f4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	2201      	movs	r2, #1
 8002f50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	193a      	adds	r2, r7, r4
 8002f60:	2390      	movs	r3, #144	; 0x90
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f002 f900 	bl	800516c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002f6c:	0021      	movs	r1, r4
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	22e0      	movs	r2, #224	; 0xe0
 8002f72:	0192      	lsls	r2, r2, #6
 8002f74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f76:	000c      	movs	r4, r1
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	2201      	movs	r2, #1
 8002f82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	4a2f      	ldr	r2, [pc, #188]	; (800304c <MX_GPIO_Init+0x1a8>)
 8002f8e:	0019      	movs	r1, r3
 8002f90:	0010      	movs	r0, r2
 8002f92:	f002 f8eb 	bl	800516c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f96:	0021      	movs	r1, r4
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	22c0      	movs	r2, #192	; 0xc0
 8002f9c:	0212      	lsls	r2, r2, #8
 8002f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa0:	000c      	movs	r4, r1
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	4a25      	ldr	r2, [pc, #148]	; (800304c <MX_GPIO_Init+0x1a8>)
 8002fb8:	0019      	movs	r1, r3
 8002fba:	0010      	movs	r0, r2
 8002fbc:	f002 f8d6 	bl	800516c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8002fc0:	0021      	movs	r1, r4
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	22b8      	movs	r2, #184	; 0xb8
 8002fc6:	00d2      	lsls	r2, r2, #3
 8002fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fca:	000c      	movs	r4, r1
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2201      	movs	r2, #1
 8002fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <MX_GPIO_Init+0x1ac>)
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	0010      	movs	r0, r2
 8002fe6:	f002 f8c1 	bl	800516c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	22c0      	movs	r2, #192	; 0xc0
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	193a      	adds	r2, r7, r4
 8003000:	2390      	movs	r3, #144	; 0x90
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	0011      	movs	r1, r2
 8003006:	0018      	movs	r0, r3
 8003008:	f002 f8b0 	bl	800516c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800300c:	0021      	movs	r1, r4
 800300e:	187b      	adds	r3, r7, r1
 8003010:	22f0      	movs	r2, #240	; 0xf0
 8003012:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003014:	187b      	adds	r3, r7, r1
 8003016:	2288      	movs	r2, #136	; 0x88
 8003018:	0352      	lsls	r2, r2, #13
 800301a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	187b      	adds	r3, r7, r1
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003022:	187b      	adds	r3, r7, r1
 8003024:	4a09      	ldr	r2, [pc, #36]	; (800304c <MX_GPIO_Init+0x1a8>)
 8003026:	0019      	movs	r1, r3
 8003028:	0010      	movs	r0, r2
 800302a:	f002 f89f 	bl	800516c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	2007      	movs	r0, #7
 8003034:	f001 fe60 	bl	8004cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003038:	2007      	movs	r0, #7
 800303a:	f001 fe72 	bl	8004d22 <HAL_NVIC_EnableIRQ>

}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b009      	add	sp, #36	; 0x24
 8003044:	bd90      	pop	{r4, r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40021000 	.word	0x40021000
 800304c:	48000400 	.word	0x48000400
 8003050:	48000800 	.word	0x48000800

08003054 <HAL_GPIO_EXTI_Callback>:
//===========================================================================
// EXTERNAL INTERRUPT CALLBACK
// Used for navigation buttons and trigger
//===========================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	0002      	movs	r2, r0
 800305c:	1dbb      	adds	r3, r7, #6
 800305e:	801a      	strh	r2, [r3, #0]
	curr = HAL_GetTick();
 8003060:	f001 f9b4 	bl	80043cc <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003068:	601a      	str	r2, [r3, #0]
	UNUSED(GPIO_Pin);
	if((GPIO_Pin == (1<<4)) && (curr - prev > 200)) //Left button
 800306a:	1dbb      	adds	r3, r7, #6
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d10c      	bne.n	800308c <HAL_GPIO_EXTI_Callback+0x38>
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <HAL_GPIO_EXTI_Callback+0xa8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2bc8      	cmp	r3, #200	; 0xc8
 800307e:	d905      	bls.n	800308c <HAL_GPIO_EXTI_Callback+0x38>
	{
		move_left();//move left
 8003080:	f000 fa6a 	bl	8003558 <move_left>
		prev = curr;
 8003084:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_GPIO_EXTI_Callback+0xa8>)
 800308a:	601a      	str	r2, [r3, #0]
	}
	if(((GPIO_Pin == (1<<5)) | (GPIO_Pin == (1<<7))) && (curr - prev > 200)) //select button
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	3b20      	subs	r3, #32
 8003092:	425a      	negs	r2, r3
 8003094:	4153      	adcs	r3, r2
 8003096:	b2da      	uxtb	r2, r3
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	3b80      	subs	r3, #128	; 0x80
 800309e:	4259      	negs	r1, r3
 80030a0:	414b      	adcs	r3, r1
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4313      	orrs	r3, r2
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00f      	beq.n	80030cc <HAL_GPIO_EXTI_Callback+0x78>
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2bc8      	cmp	r3, #200	; 0xc8
 80030b8:	d908      	bls.n	80030cc <HAL_GPIO_EXTI_Callback+0x78>
		{
			display_select(currentSelectIndex); //select option
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_GPIO_EXTI_Callback+0xac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fba4 	bl	800380c <display_select>
			prev = curr;
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80030ca:	601a      	str	r2, [r3, #0]
		}
	if((GPIO_Pin == (1<<6)) && (curr - prev > 200)) // right button
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d10c      	bne.n	80030ee <HAL_GPIO_EXTI_Callback+0x9a>
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2bc8      	cmp	r3, #200	; 0xc8
 80030e0:	d905      	bls.n	80030ee <HAL_GPIO_EXTI_Callback+0x9a>
	{
		move_right();//move right
 80030e2:	f000 fa03 	bl	80034ec <move_right>
		prev = curr;
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80030ec:	601a      	str	r2, [r3, #0]
	}
}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	2000111c 	.word	0x2000111c
 80030fc:	20001118 	.word	0x20001118
 8003100:	20001108 	.word	0x20001108

08003104 <HAL_ADC_ConvHalfCpltCallback>:
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  __NOP();
 800310c:	46c0      	nop			; (mov r8, r8)
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  //dspmain();
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b002      	add	sp, #8
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <battery>:
void battery() {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af04      	add	r7, sp, #16
	LCD_DrawString(60,120,YELLOW, BLUE, "BATTERY", 16, 0);
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <battery+0x30>)
 8003130:	2300      	movs	r3, #0
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	2310      	movs	r3, #16
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <battery+0x34>)
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	231f      	movs	r3, #31
 800313e:	2178      	movs	r1, #120	; 0x78
 8003140:	203c      	movs	r0, #60	; 0x3c
 8003142:	f7ff fbe5 	bl	8002910 <LCD_DrawString>
	HAL_I2C_Master_Receive_IT(&hi2c1, 100, batbuf, I2C_BUF_LEN);
 8003146:	4a06      	ldr	r2, [pc, #24]	; (8003160 <battery+0x38>)
 8003148:	4806      	ldr	r0, [pc, #24]	; (8003164 <battery+0x3c>)
 800314a:	2304      	movs	r3, #4
 800314c:	2164      	movs	r1, #100	; 0x64
 800314e:	f002 fa71 	bl	8005634 <HAL_I2C_Master_Receive_IT>
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	0000ffe0 	.word	0x0000ffe0
 800315c:	0800ae78 	.word	0x0800ae78
 8003160:	20001190 	.word	0x20001190
 8003164:	20001144 	.word	0x20001144

08003168 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af04      	add	r7, sp, #16
 800316e:	6078      	str	r0, [r7, #4]
	//for(int i = 0; i < 4; i++)
		//LCD_Draw4digit(i, 0, i, batbuf);
	char fma[15];
	gcvt(*batbuf, 6, fma);
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_I2C_MasterRxCpltCallback+0x54>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	0018      	movs	r0, r3
 8003176:	2408      	movs	r4, #8
 8003178:	193b      	adds	r3, r7, r4
 800317a:	001a      	movs	r2, r3
 800317c:	2106      	movs	r1, #6
 800317e:	f005 fa3d 	bl	80085fc <gcvt>
	LCD_DrawString(60,120,YELLOW, BLUE, "BATTERY", 16, 0);
 8003182:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <HAL_I2C_MasterRxCpltCallback+0x58>)
 8003184:	2300      	movs	r3, #0
 8003186:	9302      	str	r3, [sp, #8]
 8003188:	2310      	movs	r3, #16
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <HAL_I2C_MasterRxCpltCallback+0x5c>)
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	231f      	movs	r3, #31
 8003192:	2178      	movs	r1, #120	; 0x78
 8003194:	203c      	movs	r0, #60	; 0x3c
 8003196:	f7ff fbbb 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(60,140,YELLOW, BLUE, fma, 16, 0);
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_I2C_MasterRxCpltCallback+0x58>)
 800319c:	2300      	movs	r3, #0
 800319e:	9302      	str	r3, [sp, #8]
 80031a0:	2310      	movs	r3, #16
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	193b      	adds	r3, r7, r4
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	231f      	movs	r3, #31
 80031aa:	218c      	movs	r1, #140	; 0x8c
 80031ac:	203c      	movs	r0, #60	; 0x3c
 80031ae:	f7ff fbaf 	bl	8002910 <LCD_DrawString>
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b007      	add	sp, #28
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20001190 	.word	0x20001190
 80031c0:	0000ffe0 	.word	0x0000ffe0
 80031c4:	0800ae78 	.word	0x0800ae78

080031c8 <auto_tune>:
		renew +=  tmp * fact;
	  }

}
void auto_tune()
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af04      	add	r7, sp, #16
	LCD_DrawString(80 ,80,  YELLOW, BLUE,"Take samples", 16, 0);
 80031ce:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <auto_tune+0x34>)
 80031d0:	2300      	movs	r3, #0
 80031d2:	9302      	str	r3, [sp, #8]
 80031d4:	2310      	movs	r3, #16
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <auto_tune+0x38>)
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	231f      	movs	r3, #31
 80031de:	2150      	movs	r1, #80	; 0x50
 80031e0:	2050      	movs	r0, #80	; 0x50
 80031e2:	f7ff fb95 	bl	8002910 <LCD_DrawString>
	HAL_ADC_Start_DMA(&hadc, adc_buf, ADC_BUF_LEN);
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	011a      	lsls	r2, r3, #4
 80031ea:	4906      	ldr	r1, [pc, #24]	; (8003204 <auto_tune+0x3c>)
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <auto_tune+0x40>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f001 fa36 	bl	8004660 <HAL_ADC_Start_DMA>
	//dspmain();
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	0000ffe0 	.word	0x0000ffe0
 8003200:	0800ae94 	.word	0x0800ae94
 8003204:	20000108 	.word	0x20000108
 8003208:	20001284 	.word	0x20001284

0800320c <startmotor>:
void startmotor()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <startmotor+0x14>)
 8003212:	2100      	movs	r1, #0
 8003214:	0018      	movs	r0, r3
 8003216:	f004 fc9b 	bl	8007b50 <HAL_TIM_PWM_Start>
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20001194 	.word	0x20001194

08003224 <stopmotor>:
void stopmotor()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <stopmotor+0x24>)
 800322a:	2100      	movs	r1, #0
 800322c:	0018      	movs	r0, r3
 800322e:	f004 fd47 	bl	8007cc0 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	4805      	ldr	r0, [pc, #20]	; (800324c <stopmotor+0x28>)
 8003238:	2201      	movs	r2, #1
 800323a:	0019      	movs	r1, r3
 800323c:	f002 f92b 	bl	8005496 <HAL_GPIO_WritePin>
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20001194 	.word	0x20001194
 800324c:	48000400 	.word	0x48000400

08003250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003258:	e7fe      	b.n	8003258 <Error_Handler+0x8>
	...

0800325c <initialize>:
uint8_t pressHistory[3] = {0,0,0};
extern const Picture *image;
struct display *currDisplay;

void initialize()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
	struct display *home = malloc(sizeof(struct display));
 8003262:	2020      	movs	r0, #32
 8003264:	f005 fa1a 	bl	800869c <malloc>
 8003268:	0003      	movs	r3, r0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
	struct display *info = malloc(sizeof(struct display));
 800326c:	2020      	movs	r0, #32
 800326e:	f005 fa15 	bl	800869c <malloc>
 8003272:	0003      	movs	r3, r0
 8003274:	623b      	str	r3, [r7, #32]
	struct display *samp = malloc(sizeof(struct display));
 8003276:	2020      	movs	r0, #32
 8003278:	f005 fa10 	bl	800869c <malloc>
 800327c:	0003      	movs	r3, r0
 800327e:	61fb      	str	r3, [r7, #28]
	struct display *tune = malloc(sizeof(struct display));
 8003280:	2020      	movs	r0, #32
 8003282:	f005 fa0b 	bl	800869c <malloc>
 8003286:	0003      	movs	r3, r0
 8003288:	61bb      	str	r3, [r7, #24]
	struct display *manual = malloc(sizeof(struct display));
 800328a:	2020      	movs	r0, #32
 800328c:	f005 fa06 	bl	800869c <malloc>
 8003290:	0003      	movs	r3, r0
 8003292:	617b      	str	r3, [r7, #20]
	struct display *peg = malloc(sizeof(struct display));
 8003294:	2020      	movs	r0, #32
 8003296:	f005 fa01 	bl	800869c <malloc>
 800329a:	0003      	movs	r3, r0
 800329c:	613b      	str	r3, [r7, #16]
	struct display *rotate = malloc(sizeof(struct display));
 800329e:	2020      	movs	r0, #32
 80032a0:	f005 f9fc 	bl	800869c <malloc>
 80032a4:	0003      	movs	r3, r0
 80032a6:	60fb      	str	r3, [r7, #12]
	struct display *Auto = malloc(sizeof(struct display));
 80032a8:	2020      	movs	r0, #32
 80032aa:	f005 f9f7 	bl	800869c <malloc>
 80032ae:	0003      	movs	r3, r0
 80032b0:	60bb      	str	r3, [r7, #8]
	struct display *bat = malloc(sizeof(struct display));
 80032b2:	2020      	movs	r0, #32
 80032b4:	f005 f9f2 	bl	800869c <malloc>
 80032b8:	0003      	movs	r3, r0
 80032ba:	607b      	str	r3, [r7, #4]

	home->ttl = menu_home;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	4a6a      	ldr	r2, [pc, #424]	; (8003468 <initialize+0x20c>)
 80032c0:	601a      	str	r2, [r3, #0]
	home->scrollmax = 3;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	2203      	movs	r2, #3
 80032c6:	60da      	str	r2, [r3, #12]
	home->selectionmax = 3;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	2203      	movs	r2, #3
 80032cc:	611a      	str	r2, [r3, #16]
	home->backout = NULL;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	2200      	movs	r2, #0
 80032d2:	61da      	str	r2, [r3, #28]
	home->nextsel = NULL;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	2200      	movs	r2, #0
 80032d8:	615a      	str	r2, [r3, #20]
	home->childsel = info;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	619a      	str	r2, [r3, #24]
	home->identity = 'h';
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	2268      	movs	r2, #104	; 0x68
 80032e4:	711a      	strb	r2, [r3, #4]
	home->selection = menu;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	4a60      	ldr	r2, [pc, #384]	; (800346c <initialize+0x210>)
 80032ea:	609a      	str	r2, [r3, #8]
	//info
	info->scrollmax = 2;
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	2202      	movs	r2, #2
 80032f0:	60da      	str	r2, [r3, #12]
	info->selectionmax = 2;
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2202      	movs	r2, #2
 80032f6:	611a      	str	r2, [r3, #16]
	info->ttl = Infomode;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <initialize+0x214>)
 80032fc:	601a      	str	r2, [r3, #0]
	info->backout = home;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	61da      	str	r2, [r3, #28]
	info->nextsel = tune;
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	615a      	str	r2, [r3, #20]
	info->childsel = bat;
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
	info->identity = 'i';
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2269      	movs	r2, #105	; 0x69
 8003314:	711a      	strb	r2, [r3, #4]
	info->selection = Info;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	4a56      	ldr	r2, [pc, #344]	; (8003474 <initialize+0x218>)
 800331a:	609a      	str	r2, [r3, #8]

	//info
	bat->scrollmax = 0;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
	bat->selectionmax = 0;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
	bat->ttl = battery;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a53      	ldr	r2, [pc, #332]	; (8003478 <initialize+0x21c>)
 800332c:	601a      	str	r2, [r3, #0]
	bat->backout = NULL;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	61da      	str	r2, [r3, #28]
	bat->nextsel = NULL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	615a      	str	r2, [r3, #20]
	bat->childsel = NULL;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
	bat->identity = 'b';
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2262      	movs	r2, #98	; 0x62
 8003344:	711a      	strb	r2, [r3, #4]
	bat->selection = Info;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4a      	ldr	r2, [pc, #296]	; (8003474 <initialize+0x218>)
 800334a:	609a      	str	r2, [r3, #8]
	//Tune
	tune->scrollmax = 3;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2203      	movs	r2, #3
 8003350:	60da      	str	r2, [r3, #12]
	tune->selectionmax = 7;
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2207      	movs	r2, #7
 8003356:	611a      	str	r2, [r3, #16]
	tune->ttl = Tunemode;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4a48      	ldr	r2, [pc, #288]	; (800347c <initialize+0x220>)
 800335c:	601a      	str	r2, [r3, #0]
	tune->backout = home;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	61da      	str	r2, [r3, #28]
	tune->childsel = peg;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	619a      	str	r2, [r3, #24]
	tune->nextsel = manual;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	615a      	str	r2, [r3, #20]
	tune->identity = 't';
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2274      	movs	r2, #116	; 0x74
 8003374:	711a      	strb	r2, [r3, #4]
	tune->selection = Tune;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	4a41      	ldr	r2, [pc, #260]	; (8003480 <initialize+0x224>)
 800337a:	609a      	str	r2, [r3, #8]

	//Peg
	peg->scrollmax = 3;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2203      	movs	r2, #3
 8003380:	60da      	str	r2, [r3, #12]
	peg->selectionmax = 3;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2203      	movs	r2, #3
 8003386:	611a      	str	r2, [r3, #16]
	peg->ttl = pegDisplay;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4a3e      	ldr	r2, [pc, #248]	; (8003484 <initialize+0x228>)
 800338c:	601a      	str	r2, [r3, #0]
	peg->backout = tune;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	61da      	str	r2, [r3, #28]
	peg->childsel = Auto;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	619a      	str	r2, [r3, #24]
	peg->nextsel = NULL;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
	peg->identity = 'p';
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2270      	movs	r2, #112	; 0x70
 80033a4:	711a      	strb	r2, [r3, #4]
	peg->selection = Peg;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4a37      	ldr	r2, [pc, #220]	; (8003488 <initialize+0x22c>)
 80033aa:	609a      	str	r2, [r3, #8]

	//Auto
	Auto->scrollmax = 0;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
	Auto->selectionmax = 0;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
	Auto->ttl = autoRotate;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a34      	ldr	r2, [pc, #208]	; (800348c <initialize+0x230>)
 80033bc:	601a      	str	r2, [r3, #0]
	Auto->backout = peg;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	61da      	str	r2, [r3, #28]
	Auto->childsel = NULL;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
	Auto->nextsel = samp;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	615a      	str	r2, [r3, #20]
	Auto->identity = 'a';
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2261      	movs	r2, #97	; 0x61
 80033d4:	711a      	strb	r2, [r3, #4]

	//sample
	samp->scrollmax = 0;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2200      	movs	r2, #0
 80033da:	60da      	str	r2, [r3, #12]
	samp->selectionmax = 0;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
	samp->ttl = auto_tune;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <initialize+0x234>)
 80033e6:	601a      	str	r2, [r3, #0]
	samp->backout = peg;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	61da      	str	r2, [r3, #28]
	samp->childsel = NULL;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
	samp->nextsel = NULL;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2200      	movs	r2, #0
 80033f8:	615a      	str	r2, [r3, #20]
	samp->identity = 'a';
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2261      	movs	r2, #97	; 0x61
 80033fe:	711a      	strb	r2, [r3, #4]

	//Manual
	manual->scrollmax = 3;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2203      	movs	r2, #3
 8003404:	60da      	str	r2, [r3, #12]
	manual->selectionmax = 3;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2203      	movs	r2, #3
 800340a:	611a      	str	r2, [r3, #16]
	manual->ttl = Infomode;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4a18      	ldr	r2, [pc, #96]	; (8003470 <initialize+0x214>)
 8003410:	601a      	str	r2, [r3, #0]
	manual->backout = home;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	61da      	str	r2, [r3, #28]
	manual->childsel = rotate;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	619a      	str	r2, [r3, #24]
	manual->nextsel = info;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	615a      	str	r2, [r3, #20]
	manual->identity = 'm';
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	226d      	movs	r2, #109	; 0x6d
 8003428:	711a      	strb	r2, [r3, #4]
	manual->selection = Manual;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <initialize+0x238>)
 800342e:	609a      	str	r2, [r3, #8]

	//backout
	rotate->ttl = manualRotate;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a19      	ldr	r2, [pc, #100]	; (8003498 <initialize+0x23c>)
 8003434:	601a      	str	r2, [r3, #0]
	rotate->scrollmax = 0;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
	rotate->selectionmax = 0;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
	rotate->backout = NULL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	61da      	str	r2, [r3, #28]
	rotate->nextsel = NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	615a      	str	r2, [r3, #20]
	rotate->childsel = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
	rotate->identity = 'r';
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2272      	movs	r2, #114	; 0x72
 8003458:	711a      	strb	r2, [r3, #4]
	//back->selection = null;

	currDisplay = home;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <initialize+0x240>)
 800345c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b00a      	add	sp, #40	; 0x28
 8003466:	bd80      	pop	{r7, pc}
 8003468:	080034a1 	.word	0x080034a1
 800346c:	20000000 	.word	0x20000000
 8003470:	080039f1 	.word	0x080039f1
 8003474:	20000034 	.word	0x20000034
 8003478:	08003129 	.word	0x08003129
 800347c:	08003b71 	.word	0x08003b71
 8003480:	2000000c 	.word	0x2000000c
 8003484:	08003c3d 	.word	0x08003c3d
 8003488:	2000003c 	.word	0x2000003c
 800348c:	08003a3d 	.word	0x08003a3d
 8003490:	080031c9 	.word	0x080031c9
 8003494:	20000028 	.word	0x20000028
 8003498:	08003a1d 	.word	0x08003a1d
 800349c:	200012c4 	.word	0x200012c4

080034a0 <menu_home>:
struct display *currDisplay;
void menu_home()
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af04      	add	r7, sp, #16
LCD_DrawString(25,200,  YELLOW, BLACK, menu[0], 16, 0);
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <menu_home+0x40>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	490e      	ldr	r1, [pc, #56]	; (80034e4 <menu_home+0x44>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	9202      	str	r2, [sp, #8]
 80034b0:	2210      	movs	r2, #16
 80034b2:	9201      	str	r2, [sp, #4]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	2300      	movs	r3, #0
 80034b8:	000a      	movs	r2, r1
 80034ba:	21c8      	movs	r1, #200	; 0xc8
 80034bc:	2019      	movs	r0, #25
 80034be:	f7ff fa27 	bl	8002910 <LCD_DrawString>
LCD_DrawString(80 ,40,  YELLOW, BLUE,"Home Menu", 16, 0);
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <menu_home+0x44>)
 80034c4:	2300      	movs	r3, #0
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	2310      	movs	r3, #16
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <menu_home+0x48>)
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	231f      	movs	r3, #31
 80034d2:	2128      	movs	r1, #40	; 0x28
 80034d4:	2050      	movs	r0, #80	; 0x50
 80034d6:	f7ff fa1b 	bl	8002910 <LCD_DrawString>
}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000000 	.word	0x20000000
 80034e4:	0000ffe0 	.word	0x0000ffe0
 80034e8:	0800af64 	.word	0x0800af64

080034ec <move_right>:
void move_right()
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
	if (currentScrollIndex == (currDisplay->scrollmax -1)) {
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <move_right+0x58>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <move_right+0x5c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d10a      	bne.n	8003516 <move_right+0x2a>
					//if highlighted choice is very last choice, wrap around to first choice
					display_move(currentScrollIndex +1, currentSelectIndex+1,2);
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <move_right+0x5c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1c58      	adds	r0, r3, #1
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <move_right+0x60>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	2202      	movs	r2, #2
 800350e:	0019      	movs	r1, r3
 8003510:	f000 f852 	bl	80035b8 <display_move>
 8003514:	e009      	b.n	800352a <move_right+0x3e>
				} else {
					//else just highlight selection to previous choice
					display_move(currentScrollIndex +1, currentSelectIndex+1,0);
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <move_right+0x5c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1c58      	adds	r0, r3, #1
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <move_right+0x60>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	2200      	movs	r2, #0
 8003524:	0019      	movs	r1, r3
 8003526:	f000 f847 	bl	80035b8 <display_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4808      	ldr	r0, [pc, #32]	; (8003550 <move_right+0x64>)
 8003530:	2201      	movs	r2, #1
 8003532:	0019      	movs	r1, r3
 8003534:	f001 ffaf 	bl	8005496 <HAL_GPIO_WritePin>
				goright = 0; // reset right indication flag
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <move_right+0x68>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200012c4 	.word	0x200012c4
 8003548:	2000110c 	.word	0x2000110c
 800354c:	20001108 	.word	0x20001108
 8003550:	48000800 	.word	0x48000800
 8003554:	20001114 	.word	0x20001114

08003558 <move_left>:
void move_left()
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
	if (currentScrollIndex == 0) {
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <move_left+0x50>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <move_left+0x22>
					//if highlighted choice is very first choice, wrap around to last choice
					display_move(currentScrollIndex -1, currentSelectIndex-1,1);
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <move_left+0x50>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1e58      	subs	r0, r3, #1
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <move_left+0x54>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3b01      	subs	r3, #1
 8003570:	2201      	movs	r2, #1
 8003572:	0019      	movs	r1, r3
 8003574:	f000 f820 	bl	80035b8 <display_move>
 8003578:	e009      	b.n	800358e <move_left+0x36>

				} else {
					//else just highlight selection left to previous choice
					display_move(currentScrollIndex -1, currentSelectIndex-1,0);
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <move_left+0x50>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <move_left+0x54>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3b01      	subs	r3, #1
 8003586:	2200      	movs	r2, #0
 8003588:	0019      	movs	r1, r3
 800358a:	f000 f815 	bl	80035b8 <display_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4807      	ldr	r0, [pc, #28]	; (80035b0 <move_left+0x58>)
 8003594:	2201      	movs	r2, #1
 8003596:	0019      	movs	r1, r3
 8003598:	f001 ff7d 	bl	8005496 <HAL_GPIO_WritePin>
				goleft = 0; //reset left indication flag
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <move_left+0x5c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	2000110c 	.word	0x2000110c
 80035ac:	20001108 	.word	0x20001108
 80035b0:	48000800 	.word	0x48000800
 80035b4:	20001110 	.word	0x20001110

080035b8 <display_move>:
void display_move(int scrollIndex, int selectIndex, int enable) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af04      	add	r7, sp, #16
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	//just unhighlighting previous choice and highlighting current choice
	if((currDisplay->selectionmax > 3) && (enable > 0))
 80035c4:	4b8d      	ldr	r3, [pc, #564]	; (80037fc <display_move+0x244>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	dc00      	bgt.n	80035d0 <display_move+0x18>
 80035ce:	e0a8      	b.n	8003722 <display_move+0x16a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dc00      	bgt.n	80035d8 <display_move+0x20>
 80035d6:	e0a4      	b.n	8003722 <display_move+0x16a>
	{
		if(enable == 1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d150      	bne.n	8003680 <display_move+0xc8>
		{
			if(selectIndex < 0)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da04      	bge.n	80035ee <display_move+0x36>
				selectIndex = currDisplay->selectionmax-1;
 80035e4:	4b85      	ldr	r3, [pc, #532]	; (80037fc <display_move+0x244>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
			LCD_DrawString(25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 80035ee:	4b83      	ldr	r3, [pc, #524]	; (80037fc <display_move+0x244>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4980      	ldr	r1, [pc, #512]	; (8003800 <display_move+0x248>)
 80035fe:	2200      	movs	r2, #0
 8003600:	9202      	str	r2, [sp, #8]
 8003602:	2210      	movs	r2, #16
 8003604:	9201      	str	r2, [sp, #4]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2300      	movs	r3, #0
 800360a:	000a      	movs	r2, r1
 800360c:	21c8      	movs	r1, #200	; 0xc8
 800360e:	2019      	movs	r0, #25
 8003610:	f7ff f97e 	bl	8002910 <LCD_DrawString>
			int idx = selectIndex;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	61fb      	str	r3, [r7, #28]
			for(int i = 1; i < 3; i++)
 8003618:	2301      	movs	r3, #1
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	e02a      	b.n	8003674 <display_move+0xbc>
				{idx++;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3301      	adds	r3, #1
 8003622:	61fb      	str	r3, [r7, #28]
				if(idx >= currDisplay->selectionmax)
 8003624:	4b75      	ldr	r3, [pc, #468]	; (80037fc <display_move+0x244>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	db01      	blt.n	8003634 <display_move+0x7c>
					idx = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
				LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, currDisplay->selection[idx], 16, 0);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	b29b      	uxth	r3, r3
 8003638:	1c1a      	adds	r2, r3, #0
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	1c1a      	adds	r2, r3, #0
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	3319      	adds	r3, #25
 8003648:	b298      	uxth	r0, r3
 800364a:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <display_move+0x244>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4969      	ldr	r1, [pc, #420]	; (8003800 <display_move+0x248>)
 800365a:	2200      	movs	r2, #0
 800365c:	9202      	str	r2, [sp, #8]
 800365e:	2210      	movs	r2, #16
 8003660:	9201      	str	r2, [sp, #4]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	231f      	movs	r3, #31
 8003666:	000a      	movs	r2, r1
 8003668:	21c8      	movs	r1, #200	; 0xc8
 800366a:	f7ff f951 	bl	8002910 <LCD_DrawString>
			for(int i = 1; i < 3; i++)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3301      	adds	r3, #1
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b02      	cmp	r3, #2
 8003678:	ddd1      	ble.n	800361e <display_move+0x66>
				}
			scrollIndex = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
		if(enable == 1)
 800367e:	e0b2      	b.n	80037e6 <display_move+0x22e>
		}
		else
		{
			if(selectIndex >= currDisplay->selectionmax)
 8003680:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <display_move+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	429a      	cmp	r2, r3
 800368a:	db01      	blt.n	8003690 <display_move+0xd8>
				selectIndex = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
			LCD_DrawString(75*2 +25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 8003690:	4b5a      	ldr	r3, [pc, #360]	; (80037fc <display_move+0x244>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	18d3      	adds	r3, r2, r3
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4958      	ldr	r1, [pc, #352]	; (8003800 <display_move+0x248>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	9202      	str	r2, [sp, #8]
 80036a4:	2210      	movs	r2, #16
 80036a6:	9201      	str	r2, [sp, #4]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	000a      	movs	r2, r1
 80036ae:	21c8      	movs	r1, #200	; 0xc8
 80036b0:	20af      	movs	r0, #175	; 0xaf
 80036b2:	f7ff f92d 	bl	8002910 <LCD_DrawString>
			int idx = selectIndex;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	617b      	str	r3, [r7, #20]
			for(int i = 1; i >= 0; i--)
 80036ba:	2301      	movs	r3, #1
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e02a      	b.n	8003716 <display_move+0x15e>
			{idx--;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
			if(idx < 0)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da04      	bge.n	80036d6 <display_move+0x11e>
				idx = currDisplay->selectionmax-1;
 80036cc:	4b4b      	ldr	r3, [pc, #300]	; (80037fc <display_move+0x244>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
			LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, currDisplay->selection[idx], 16, 0);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	1c1a      	adds	r2, r3, #0
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	18d3      	adds	r3, r2, r3
 80036e0:	1c1a      	adds	r2, r3, #0
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3319      	adds	r3, #25
 80036ea:	b298      	uxth	r0, r3
 80036ec:	4b43      	ldr	r3, [pc, #268]	; (80037fc <display_move+0x244>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4941      	ldr	r1, [pc, #260]	; (8003800 <display_move+0x248>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	2210      	movs	r2, #16
 8003702:	9201      	str	r2, [sp, #4]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	231f      	movs	r3, #31
 8003708:	000a      	movs	r2, r1
 800370a:	21c8      	movs	r1, #200	; 0xc8
 800370c:	f7ff f900 	bl	8002910 <LCD_DrawString>
			for(int i = 1; i >= 0; i--)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3b01      	subs	r3, #1
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	dad1      	bge.n	80036c0 <display_move+0x108>
			}
			scrollIndex = 2;
 800371c:	2302      	movs	r3, #2
 800371e:	60fb      	str	r3, [r7, #12]
		if(enable == 1)
 8003720:	e061      	b.n	80037e6 <display_move+0x22e>
		}
	}
	else
	{
	if(enable == 1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10a      	bne.n	800373e <display_move+0x186>
		{selectIndex = currDisplay->selectionmax-1; scrollIndex = currDisplay->scrollmax-1;}
 8003728:	4b34      	ldr	r3, [pc, #208]	; (80037fc <display_move+0x244>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	3b01      	subs	r3, #1
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b32      	ldr	r3, [pc, #200]	; (80037fc <display_move+0x244>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	3b01      	subs	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e006      	b.n	800374c <display_move+0x194>
	else if(enable == 2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d103      	bne.n	800374c <display_move+0x194>
		{selectIndex = 0; scrollIndex = 0;}
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
	if(selectIndex > currDisplay->selectionmax-1)
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <display_move+0x244>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	db02      	blt.n	800375e <display_move+0x1a6>
		selectIndex = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	e007      	b.n	800376e <display_move+0x1b6>
	else if(selectIndex < 0)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da04      	bge.n	800376e <display_move+0x1b6>
		selectIndex = currDisplay->selectionmax-1;
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <display_move+0x244>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	3b01      	subs	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]

	LCD_DrawString(75*scrollIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	b29b      	uxth	r3, r3
 8003772:	1c1a      	adds	r2, r3, #0
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	1c1a      	adds	r2, r3, #0
 800377a:	0112      	lsls	r2, r2, #4
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	b29b      	uxth	r3, r3
 8003780:	3319      	adds	r3, #25
 8003782:	b298      	uxth	r0, r3
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <display_move+0x244>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	18d3      	adds	r3, r2, r3
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <display_move+0x248>)
 8003794:	2200      	movs	r2, #0
 8003796:	9202      	str	r2, [sp, #8]
 8003798:	2210      	movs	r2, #16
 800379a:	9201      	str	r2, [sp, #4]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	000a      	movs	r2, r1
 80037a2:	21c8      	movs	r1, #200	; 0xc8
 80037a4:	f7ff f8b4 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(75*currentScrollIndex + 25,200,  YELLOW, BLUE, currDisplay->selection[currentSelectIndex], 16, 0);
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <display_move+0x24c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	1c1a      	adds	r2, r3, #0
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	18d3      	adds	r3, r2, r3
 80037b4:	1c1a      	adds	r2, r3, #0
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3319      	adds	r3, #25
 80037be:	b298      	uxth	r0, r3
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <display_move+0x244>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <display_move+0x250>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	18d3      	adds	r3, r2, r3
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	490b      	ldr	r1, [pc, #44]	; (8003800 <display_move+0x248>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	9202      	str	r2, [sp, #8]
 80037d6:	2210      	movs	r2, #16
 80037d8:	9201      	str	r2, [sp, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	231f      	movs	r3, #31
 80037de:	000a      	movs	r2, r1
 80037e0:	21c8      	movs	r1, #200	; 0xc8
 80037e2:	f7ff f895 	bl	8002910 <LCD_DrawString>
	}
	currentSelectIndex = selectIndex;
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <display_move+0x250>)
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	601a      	str	r2, [r3, #0]
	currentScrollIndex = scrollIndex;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <display_move+0x24c>)
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b008      	add	sp, #32
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	200012c4 	.word	0x200012c4
 8003800:	0000ffe0 	.word	0x0000ffe0
 8003804:	2000110c 	.word	0x2000110c
 8003808:	20001108 	.word	0x20001108

0800380c <display_select>:

void display_select(int selectIndex) {
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af04      	add	r7, sp, #16
 8003812:	6078      	str	r0, [r7, #4]
	//selection cases of where to go
	//highlight selected choice in red
    LCD_DrawString(75*currentScrollIndex + 25,200,  YELLOW, RED, currDisplay->selection[currentSelectIndex], 16, 0);
 8003814:	4b4a      	ldr	r3, [pc, #296]	; (8003940 <display_select+0x134>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	1c1a      	adds	r2, r3, #0
 800381c:	0092      	lsls	r2, r2, #2
 800381e:	18d3      	adds	r3, r2, r3
 8003820:	1c1a      	adds	r2, r3, #0
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	3319      	adds	r3, #25
 800382a:	b298      	uxth	r0, r3
 800382c:	4b45      	ldr	r3, [pc, #276]	; (8003944 <display_select+0x138>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	4b45      	ldr	r3, [pc, #276]	; (8003948 <display_select+0x13c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	18d3      	adds	r3, r2, r3
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	22f8      	movs	r2, #248	; 0xf8
 800383e:	0212      	lsls	r2, r2, #8
 8003840:	4c42      	ldr	r4, [pc, #264]	; (800394c <display_select+0x140>)
 8003842:	2100      	movs	r1, #0
 8003844:	9102      	str	r1, [sp, #8]
 8003846:	2110      	movs	r1, #16
 8003848:	9101      	str	r1, [sp, #4]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	0013      	movs	r3, r2
 800384e:	0022      	movs	r2, r4
 8003850:	21c8      	movs	r1, #200	; 0xc8
 8003852:	f7ff f85d 	bl	8002910 <LCD_DrawString>
    lastPressed = selectIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <display_select+0x144>)
 800385c:	701a      	strb	r2, [r3, #0]

    if((currentSelectIndex == 0) && (currDisplay->identity != 'h'))
 800385e:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <display_select+0x13c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d113      	bne.n	800388e <display_select+0x82>
 8003866:	4b37      	ldr	r3, [pc, #220]	; (8003944 <display_select+0x138>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	791b      	ldrb	r3, [r3, #4]
 800386c:	2b68      	cmp	r3, #104	; 0x68
 800386e:	d00e      	beq.n	800388e <display_select+0x82>
    {//Tune mode is selected so go to tune display
    	currDisplay = currDisplay->backout;
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <display_select+0x138>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <display_select+0x138>)
 8003878:	601a      	str	r2, [r3, #0]
    	LCD_Clear(BLUE);
 800387a:	201f      	movs	r0, #31
 800387c:	f7fe fe72 	bl	8002564 <LCD_Clear>
    	resetSel();
 8003880:	f000 f868 	bl	8003954 <resetSel>
    	currDisplay->ttl();
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <display_select+0x138>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4798      	blx	r3
    	{
    		child->ttl();
    		LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
    	}
    }
}
 800388c:	e053      	b.n	8003936 <display_select+0x12a>
    else if(currDisplay->childsel != NULL)
 800388e:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <display_select+0x138>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d04e      	beq.n	8003936 <display_select+0x12a>
    	struct display * child = currDisplay->childsel;
 8003898:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <display_select+0x138>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	60fb      	str	r3, [r7, #12]
    	if(currDisplay->identity == 'h'){i = 0;}
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <display_select+0x138>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	791b      	ldrb	r3, [r3, #4]
 80038a6:	2b68      	cmp	r3, #104	; 0x68
 80038a8:	d102      	bne.n	80038b0 <display_select+0xa4>
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	e008      	b.n	80038c2 <display_select+0xb6>
    		i = 1;
 80038b0:	2301      	movs	r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
    	while((i < currentSelectIndex)&&(child->nextsel != NULL))
 80038b4:	e005      	b.n	80038c2 <display_select+0xb6>
    		child = child->nextsel;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	60fb      	str	r3, [r7, #12]
    		i++;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	3301      	adds	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
    	while((i < currentSelectIndex)&&(child->nextsel != NULL))
 80038c2:	4b21      	ldr	r3, [pc, #132]	; (8003948 <display_select+0x13c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	da03      	bge.n	80038d4 <display_select+0xc8>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <display_select+0xaa>
    	if(child->selectionmax > 0)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	dd0c      	ble.n	80038f6 <display_select+0xea>
    		currDisplay = child;
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <display_select+0x138>)
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]
    		LCD_Clear(BLUE);
 80038e2:	201f      	movs	r0, #31
 80038e4:	f7fe fe3e 	bl	8002564 <LCD_Clear>
    		currDisplay->ttl();
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <display_select+0x138>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4798      	blx	r3
    		resetSel();
 80038f0:	f000 f830 	bl	8003954 <resetSel>
}
 80038f4:	e01f      	b.n	8003936 <display_select+0x12a>
    		child->ttl();
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4798      	blx	r3
    		LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	1c1a      	adds	r2, r3, #0
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	1c1a      	adds	r2, r3, #0
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	b29b      	uxth	r3, r3
 800390e:	3319      	adds	r3, #25
 8003910:	b298      	uxth	r0, r3
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <display_select+0x138>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	18d3      	adds	r3, r2, r3
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	490a      	ldr	r1, [pc, #40]	; (800394c <display_select+0x140>)
 8003922:	2200      	movs	r2, #0
 8003924:	9202      	str	r2, [sp, #8]
 8003926:	2210      	movs	r2, #16
 8003928:	9201      	str	r2, [sp, #4]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	000a      	movs	r2, r1
 8003930:	21c8      	movs	r1, #200	; 0xc8
 8003932:	f7fe ffed 	bl	8002910 <LCD_DrawString>
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b005      	add	sp, #20
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000110c 	.word	0x2000110c
 8003944:	200012c4 	.word	0x200012c4
 8003948:	20001108 	.word	0x20001108
 800394c:	0000ffe0 	.word	0x0000ffe0
 8003950:	20000078 	.word	0x20000078

08003954 <resetSel>:
void resetSel()
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af04      	add	r7, sp, #16
	//LCD_Clear(BLUE);
	LCD_DrawString(25,200,  YELLOW, BLACK, (currDisplay->selection)[0], 16, 0);
 800395a:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <resetSel+0x8c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4920      	ldr	r1, [pc, #128]	; (80039e4 <resetSel+0x90>)
 8003964:	2200      	movs	r2, #0
 8003966:	9202      	str	r2, [sp, #8]
 8003968:	2210      	movs	r2, #16
 800396a:	9201      	str	r2, [sp, #4]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	2300      	movs	r3, #0
 8003970:	000a      	movs	r2, r1
 8003972:	21c8      	movs	r1, #200	; 0xc8
 8003974:	2019      	movs	r0, #25
 8003976:	f7fe ffcb 	bl	8002910 <LCD_DrawString>
	for (int i = 1; i < currDisplay->scrollmax; i++) {
 800397a:	2301      	movs	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	e01f      	b.n	80039c0 <resetSel+0x6c>
			LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, (currDisplay->selection)[i], 16, 0);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	b29b      	uxth	r3, r3
 8003984:	1c1a      	adds	r2, r3, #0
 8003986:	0092      	lsls	r2, r2, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	1c1a      	adds	r2, r3, #0
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	b29b      	uxth	r3, r3
 8003992:	3319      	adds	r3, #25
 8003994:	b298      	uxth	r0, r3
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <resetSel+0x8c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	490f      	ldr	r1, [pc, #60]	; (80039e4 <resetSel+0x90>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	9202      	str	r2, [sp, #8]
 80039aa:	2210      	movs	r2, #16
 80039ac:	9201      	str	r2, [sp, #4]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	231f      	movs	r3, #31
 80039b2:	000a      	movs	r2, r1
 80039b4:	21c8      	movs	r1, #200	; 0xc8
 80039b6:	f7fe ffab 	bl	8002910 <LCD_DrawString>
	for (int i = 1; i < currDisplay->scrollmax; i++) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3301      	adds	r3, #1
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <resetSel+0x8c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	dbd9      	blt.n	8003980 <resetSel+0x2c>
		}
	currentScrollIndex = 0;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <resetSel+0x94>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
	currentSelectIndex = 0;
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <resetSel+0x98>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	200012c4 	.word	0x200012c4
 80039e4:	0000ffe0 	.word	0x0000ffe0
 80039e8:	2000110c 	.word	0x2000110c
 80039ec:	20001108 	.word	0x20001108

080039f0 <Infomode>:
void Infomode()
{//Info mode that displays product usage and info
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af04      	add	r7, sp, #16
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Info will be displayed", 16, 0);
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <Infomode+0x24>)
 80039f8:	2300      	movs	r3, #0
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	2310      	movs	r3, #16
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <Infomode+0x28>)
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	231f      	movs	r3, #31
 8003a06:	2132      	movs	r1, #50	; 0x32
 8003a08:	2019      	movs	r0, #25
 8003a0a:	f7fe ff81 	bl	8002910 <LCD_DrawString>
	//currently nothing is displayed for now
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	0000ffe0 	.word	0x0000ffe0
 8003a18:	0800af70 	.word	0x0800af70

08003a1c <manualRotate>:
	LCD_DrawString(25 ,75,  YELLOW, BLUE,"Re-String Purpose", 16, 0);

}

void manualRotate()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	stepperMotor(currentSelectIndex, 7500, 90, 1);
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <manualRotate+0x18>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <manualRotate+0x1c>)
 8003a26:	2301      	movs	r3, #1
 8003a28:	225a      	movs	r2, #90	; 0x5a
 8003a2a:	f000 f817 	bl	8003a5c <stepperMotor>
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20001108 	.word	0x20001108
 8003a38:	00001d4c 	.word	0x00001d4c

08003a3c <autoRotate>:
void autoRotate()
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	stepperMotor(currentSelectIndex, 7500, 90, 2);
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <autoRotate+0x18>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4904      	ldr	r1, [pc, #16]	; (8003a58 <autoRotate+0x1c>)
 8003a46:	2302      	movs	r3, #2
 8003a48:	225a      	movs	r2, #90	; 0x5a
 8003a4a:	f000 f807 	bl	8003a5c <stepperMotor>
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20001108 	.word	0x20001108
 8003a58:	00001d4c 	.word	0x00001d4c

08003a5c <stepperMotor>:
void stepperMotor(int direction, int per, int angle, int mode)
{// stepper motor control
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
	if(direction == 1) // directional change
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <stepperMotor+0x24>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	01db      	lsls	r3, r3, #7
 8003a74:	4835      	ldr	r0, [pc, #212]	; (8003b4c <stepperMotor+0xf0>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	0019      	movs	r1, r3
 8003a7a:	f001 fd0c 	bl	8005496 <HAL_GPIO_WritePin>
 8003a7e:	e006      	b.n	8003a8e <stepperMotor+0x32>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	01db      	lsls	r3, r3, #7
 8003a84:	4831      	ldr	r0, [pc, #196]	; (8003b4c <stepperMotor+0xf0>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	0019      	movs	r1, r3
 8003a8a:	f001 fd04 	bl	8005496 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //motor Enable
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	482e      	ldr	r0, [pc, #184]	; (8003b4c <stepperMotor+0xf0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	0019      	movs	r1, r3
 8003a98:	f001 fcfd 	bl	8005496 <HAL_GPIO_WritePin>
	//change_pwm(per);// this is to change pwm signal in case we want to speed or low down motore
	// change_pwm might not even be used
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);//seting motor to full drive
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	482b      	ldr	r0, [pc, #172]	; (8003b50 <stepperMotor+0xf4>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	f001 fcf6 	bl	8005496 <HAL_GPIO_WritePin>

	if(mode == 1) //Manual stepper rotation
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d114      	bne.n	8003ada <stepperMotor+0x7e>
	{startmotor();
 8003ab0:	f7ff fbac 	bl	800320c <startmotor>
	while(updateToggleHistory(5) | updateToggleHistory(7))
 8003ab4:	e003      	b.n	8003abe <stepperMotor+0x62>
	{//while trigger button is being pressed, currently mapped to selection button for testing
		nano_wait(5000000);
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <stepperMotor+0xf8>)
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7fe fb21 	bl	8002100 <nano_wait>
	while(updateToggleHistory(5) | updateToggleHistory(7))
 8003abe:	2005      	movs	r0, #5
 8003ac0:	f000 f8fc 	bl	8003cbc <updateToggleHistory>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	001c      	movs	r4, r3
 8003ac8:	2007      	movs	r0, #7
 8003aca:	f000 f8f7 	bl	8003cbc <updateToggleHistory>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	4323      	orrs	r3, r4
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ee      	bne.n	8003ab6 <stepperMotor+0x5a>
 8003ad8:	e032      	b.n	8003b40 <stepperMotor+0xe4>

	}
	}
	else //Angular precise stepper movements
		{
		uint32_t timemotor = per* angle /10000/1.8*3.95; //period * number of steps(angle) / 10000 / 1.8degrees per step * 1.25
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4353      	muls	r3, r2
 8003ae0:	491d      	ldr	r1, [pc, #116]	; (8003b58 <stepperMotor+0xfc>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fc fb98 	bl	8000218 <__divsi3>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	0018      	movs	r0, r3
 8003aec:	f7fe f924 	bl	8001d38 <__aeabi_i2d>
 8003af0:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <stepperMotor+0x100>)
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <stepperMotor+0x104>)
 8003af4:	f7fd f804 	bl	8000b00 <__aeabi_ddiv>
 8003af8:	0002      	movs	r2, r0
 8003afa:	000b      	movs	r3, r1
 8003afc:	0010      	movs	r0, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <stepperMotor+0x108>)
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <stepperMotor+0x10c>)
 8003b04:	f7fd fae4 	bl	80010d0 <__aeabi_dmul>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	000b      	movs	r3, r1
 8003b0c:	0010      	movs	r0, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	f7fc fc6e 	bl	80003f0 <__aeabi_d2uiz>
 8003b14:	0003      	movs	r3, r0
 8003b16:	61bb      	str	r3, [r7, #24]
		startmotor();
 8003b18:	f7ff fb78 	bl	800320c <startmotor>
		uint32_t motorstarttime = HAL_GetTick();
 8003b1c:	f000 fc56 	bl	80043cc <HAL_GetTick>
 8003b20:	0003      	movs	r3, r0
 8003b22:	617b      	str	r3, [r7, #20]
		for(int i =0; i < timemotor; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e006      	b.n	8003b38 <stepperMotor+0xdc>
		{
			nano_wait(1000000);
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <stepperMotor+0x110>)
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7fe fae7 	bl	8002100 <nano_wait>
		for(int i =0; i < timemotor; i++)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3301      	adds	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d8f4      	bhi.n	8003b2a <stepperMotor+0xce>
		//{//while trigger is pressed and angle time is not exceeded, continue running the motor
		//}
		}

	//stop motor
	stopmotor();
 8003b40:	f7ff fb70 	bl	8003224 <stopmotor>
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b009      	add	sp, #36	; 0x24
 8003b4a:	bd90      	pop	{r4, r7, pc}
 8003b4c:	48000400 	.word	0x48000400
 8003b50:	48000800 	.word	0x48000800
 8003b54:	004c4b40 	.word	0x004c4b40
 8003b58:	00002710 	.word	0x00002710
 8003b5c:	cccccccd 	.word	0xcccccccd
 8003b60:	3ffccccc 	.word	0x3ffccccc
 8003b64:	9999999a 	.word	0x9999999a
 8003b68:	400f9999 	.word	0x400f9999
 8003b6c:	000f4240 	.word	0x000f4240

08003b70 <Tunemode>:
void Tunemode() {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af04      	add	r7, sp, #16
	//introduce scroll index which represents the current index in the list of tune
	/*currentSelectIndex is just representing the index respective to which of current three selection
	on the screen is being highlighted */
	//display peg diagram
	LCD_DrawString(95 ,25,  YELLOW, BLUE,"-----", 16, 0);
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <Tunemode+0xb4>)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9302      	str	r3, [sp, #8]
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <Tunemode+0xb8>)
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	231f      	movs	r3, #31
 8003b86:	2119      	movs	r1, #25
 8003b88:	205f      	movs	r0, #95	; 0x5f
 8003b8a:	f7fe fec1 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(60 ,40,  YELLOW, BLUE,"3 - |    | - 4", 16, 0);
 8003b8e:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <Tunemode+0xb4>)
 8003b90:	2300      	movs	r3, #0
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	2310      	movs	r3, #16
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <Tunemode+0xbc>)
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	231f      	movs	r3, #31
 8003b9e:	2128      	movs	r1, #40	; 0x28
 8003ba0:	203c      	movs	r0, #60	; 0x3c
 8003ba2:	f7fe feb5 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"2 - |    | - 5", 16, 0);
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <Tunemode+0xb4>)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	2310      	movs	r3, #16
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	4b1f      	ldr	r3, [pc, #124]	; (8003c30 <Tunemode+0xc0>)
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	231f      	movs	r3, #31
 8003bb6:	213c      	movs	r1, #60	; 0x3c
 8003bb8:	203c      	movs	r0, #60	; 0x3c
 8003bba:	f7fe fea9 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(60 ,80,  YELLOW, BLUE,"1 - |    | - 6", 16, 0);
 8003bbe:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <Tunemode+0xb4>)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <Tunemode+0xc4>)
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	231f      	movs	r3, #31
 8003bce:	2150      	movs	r1, #80	; 0x50
 8003bd0:	203c      	movs	r0, #60	; 0x3c
 8003bd2:	f7fe fe9d 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(95 ,100,  YELLOW, BLUE,"-----", 16, 0);
 8003bd6:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <Tunemode+0xb4>)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9302      	str	r3, [sp, #8]
 8003bdc:	2310      	movs	r3, #16
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <Tunemode+0xb8>)
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	231f      	movs	r3, #31
 8003be6:	2164      	movs	r1, #100	; 0x64
 8003be8:	205f      	movs	r0, #95	; 0x5f
 8003bea:	f7fe fe91 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(100 ,115,  YELLOW, BLUE,"||||", 16, 0);
 8003bee:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <Tunemode+0xb4>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9302      	str	r3, [sp, #8]
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <Tunemode+0xc8>)
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	231f      	movs	r3, #31
 8003bfe:	2173      	movs	r1, #115	; 0x73
 8003c00:	2064      	movs	r0, #100	; 0x64
 8003c02:	f7fe fe85 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(100 ,130,  YELLOW, BLUE,"||||", 16, 0);
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <Tunemode+0xb4>)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9302      	str	r3, [sp, #8]
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <Tunemode+0xc8>)
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	231f      	movs	r3, #31
 8003c16:	2182      	movs	r1, #130	; 0x82
 8003c18:	2064      	movs	r0, #100	; 0x64
 8003c1a:	f7fe fe79 	bl	8002910 <LCD_DrawString>
}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	0000ffe0 	.word	0x0000ffe0
 8003c28:	0800afb4 	.word	0x0800afb4
 8003c2c:	0800afbc 	.word	0x0800afbc
 8003c30:	0800afcc 	.word	0x0800afcc
 8003c34:	0800afdc 	.word	0x0800afdc
 8003c38:	0800afec 	.word	0x0800afec

08003c3c <pegDisplay>:

void pegDisplay()
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af04      	add	r7, sp, #16
	LCD_DrawString(60 ,40,  YELLOW, BLUE,pegsel[currentSelectIndex-1], 16, 0);
 8003c42:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <pegDisplay+0x6c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	1e5a      	subs	r2, r3, #1
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <pegDisplay+0x70>)
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	58d3      	ldr	r3, [r2, r3]
 8003c4e:	4918      	ldr	r1, [pc, #96]	; (8003cb0 <pegDisplay+0x74>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	9202      	str	r2, [sp, #8]
 8003c54:	2210      	movs	r2, #16
 8003c56:	9201      	str	r2, [sp, #4]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	231f      	movs	r3, #31
 8003c5c:	000a      	movs	r2, r1
 8003c5e:	2128      	movs	r1, #40	; 0x28
 8003c60:	203c      	movs	r0, #60	; 0x3c
 8003c62:	f7fe fe55 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"Play Note", 16, 0);
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <pegDisplay+0x74>)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9302      	str	r3, [sp, #8]
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <pegDisplay+0x78>)
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	231f      	movs	r3, #31
 8003c76:	213c      	movs	r1, #60	; 0x3c
 8003c78:	203c      	movs	r0, #60	; 0x3c
 8003c7a:	f7fe fe49 	bl	8002910 <LCD_DrawString>
	LCD_DrawString(140 ,60,  YELLOW, BLUE, note[currentSelectIndex-1], 16, 0);
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <pegDisplay+0x6c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	1e5a      	subs	r2, r3, #1
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <pegDisplay+0x7c>)
 8003c86:	0092      	lsls	r2, r2, #2
 8003c88:	58d3      	ldr	r3, [r2, r3]
 8003c8a:	4909      	ldr	r1, [pc, #36]	; (8003cb0 <pegDisplay+0x74>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	9202      	str	r2, [sp, #8]
 8003c90:	2210      	movs	r2, #16
 8003c92:	9201      	str	r2, [sp, #4]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	231f      	movs	r3, #31
 8003c98:	000a      	movs	r2, r1
 8003c9a:	213c      	movs	r1, #60	; 0x3c
 8003c9c:	208c      	movs	r0, #140	; 0x8c
 8003c9e:	f7fe fe37 	bl	8002910 <LCD_DrawString>
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20001108 	.word	0x20001108
 8003cac:	20000048 	.word	0x20000048
 8003cb0:	0000ffe0 	.word	0x0000ffe0
 8003cb4:	0800aff4 	.word	0x0800aff4
 8003cb8:	20000060 	.word	0x20000060

08003cbc <updateToggleHistory>:


uint8_t updateToggleHistory(uint8_t button) {
 8003cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	701a      	strb	r2, [r3, #0]
	uint8_t prev = pressHistory[button - 2];
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	1e9a      	subs	r2, r3, #2
 8003cce:	260f      	movs	r6, #15
 8003cd0:	19bb      	adds	r3, r7, r6
 8003cd2:	492c      	ldr	r1, [pc, #176]	; (8003d84 <updateToggleHistory+0xc8>)
 8003cd4:	5c8a      	ldrb	r2, [r1, r2]
 8003cd6:	701a      	strb	r2, [r3, #0]
	uint8_t new = HAL_GPIO_ReadPin(GPIOB, 1 << (button));
 8003cd8:	1dfb      	adds	r3, r7, #7
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	250e      	movs	r5, #14
 8003ce6:	197c      	adds	r4, r7, r5
 8003ce8:	4a27      	ldr	r2, [pc, #156]	; (8003d88 <updateToggleHistory+0xcc>)
 8003cea:	0019      	movs	r1, r3
 8003cec:	0010      	movs	r0, r2
 8003cee:	f001 fbb5 	bl	800545c <HAL_GPIO_ReadPin>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	7023      	strb	r3, [r4, #0]
	pressHistory[button - 2] = new;
 8003cf6:	1dfb      	adds	r3, r7, #7
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	3b02      	subs	r3, #2
 8003cfc:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <updateToggleHistory+0xc8>)
 8003cfe:	0028      	movs	r0, r5
 8003d00:	1839      	adds	r1, r7, r0
 8003d02:	7809      	ldrb	r1, [r1, #0]
 8003d04:	54d1      	strb	r1, [r2, r3]
	if (lastButton == button && (prev == 1 || new == 1)) return 0;
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <updateToggleHistory+0xd0>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	1dfa      	adds	r2, r7, #7
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d109      	bne.n	8003d26 <updateToggleHistory+0x6a>
 8003d12:	19bb      	adds	r3, r7, r6
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d003      	beq.n	8003d22 <updateToggleHistory+0x66>
 8003d1a:	183b      	adds	r3, r7, r0
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <updateToggleHistory+0x6a>
 8003d22:	2300      	movs	r3, #0
 8003d24:	e029      	b.n	8003d7a <updateToggleHistory+0xbe>
	else if (prev == 1 && new == 1) {
 8003d26:	230f      	movs	r3, #15
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d109      	bne.n	8003d44 <updateToggleHistory+0x88>
 8003d30:	230e      	movs	r3, #14
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d104      	bne.n	8003d44 <updateToggleHistory+0x88>
		lastButton = button;
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <updateToggleHistory+0xd0>)
 8003d3c:	1dfa      	adds	r2, r7, #7
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e00c      	b.n	8003d5e <updateToggleHistory+0xa2>
	} else if (prev == 0 && new == 0){
 8003d44:	230f      	movs	r3, #15
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <updateToggleHistory+0xa2>
 8003d4e:	230e      	movs	r3, #14
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <updateToggleHistory+0xa2>
		lastButton = -1;
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <updateToggleHistory+0xd0>)
 8003d5a:	22ff      	movs	r2, #255	; 0xff
 8003d5c:	701a      	strb	r2, [r3, #0]
	}

	return prev && new;
 8003d5e:	230f      	movs	r3, #15
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d006      	beq.n	8003d76 <updateToggleHistory+0xba>
 8003d68:	230e      	movs	r3, #14
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <updateToggleHistory+0xba>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <updateToggleHistory+0xbc>
 8003d76:	2300      	movs	r3, #0
 8003d78:	b2db      	uxtb	r3, r3


  /* USER CODE END 3 */
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b005      	add	sp, #20
 8003d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	20001120 	.word	0x20001120
 8003d88:	48000400 	.word	0x48000400
 8003d8c:	20000079 	.word	0x20000079

08003d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <HAL_MspInit+0x44>)
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_MspInit+0x44>)
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	619a      	str	r2, [r3, #24]
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_MspInit+0x44>)
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_MspInit+0x44>)
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_MspInit+0x44>)
 8003db4:	2180      	movs	r1, #128	; 0x80
 8003db6:	0549      	lsls	r1, r1, #21
 8003db8:	430a      	orrs	r2, r1
 8003dba:	61da      	str	r2, [r3, #28]
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_MspInit+0x44>)
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	055b      	lsls	r3, r3, #21
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b08b      	sub	sp, #44	; 0x2c
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	2414      	movs	r4, #20
 8003de2:	193b      	adds	r3, r7, r4
 8003de4:	0018      	movs	r0, r3
 8003de6:	2314      	movs	r3, #20
 8003de8:	001a      	movs	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f004 fc60 	bl	80086b0 <memset>
  if(hadc->Instance==ADC1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <HAL_ADC_MspInit+0xf4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d163      	bne.n	8003ec2 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dfa:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <HAL_ADC_MspInit+0xf8>)
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_ADC_MspInit+0xf8>)
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	0089      	lsls	r1, r1, #2
 8003e04:	430a      	orrs	r2, r1
 8003e06:	619a      	str	r2, [r3, #24]
 8003e08:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <HAL_ADC_MspInit+0xf8>)
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_ADC_MspInit+0xf8>)
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_ADC_MspInit+0xf8>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	0289      	lsls	r1, r1, #10
 8003e20:	430a      	orrs	r2, r1
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_ADC_MspInit+0xf8>)
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e32:	193b      	adds	r3, r7, r4
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e38:	193b      	adds	r3, r7, r4
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e44:	193a      	adds	r2, r7, r4
 8003e46:	2390      	movs	r3, #144	; 0x90
 8003e48:	05db      	lsls	r3, r3, #23
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f001 f98d 	bl	800516c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003e52:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e54:	4a20      	ldr	r2, [pc, #128]	; (8003ed8 <HAL_ADC_MspInit+0x100>)
 8003e56:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	0052      	lsls	r2, r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f000 ff67 	bl	8004d5c <HAL_DMA_Init>
 8003e8e:	1e03      	subs	r3, r0, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003e92:	f7ff f9dd 	bl	8003250 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8003e96:	4a11      	ldr	r2, [pc, #68]	; (8003edc <HAL_ADC_MspInit+0x104>)
 8003e98:	23a8      	movs	r3, #168	; 0xa8
 8003e9a:	58d3      	ldr	r3, [r2, r3]
 8003e9c:	490f      	ldr	r1, [pc, #60]	; (8003edc <HAL_ADC_MspInit+0x104>)
 8003e9e:	220f      	movs	r2, #15
 8003ea0:	4393      	bics	r3, r2
 8003ea2:	22a8      	movs	r2, #168	; 0xa8
 8003ea4:	508b      	str	r3, [r1, r2]
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <HAL_ADC_MspInit+0x104>)
 8003ea8:	23a8      	movs	r3, #168	; 0xa8
 8003eaa:	58d3      	ldr	r3, [r2, r3]
 8003eac:	490b      	ldr	r1, [pc, #44]	; (8003edc <HAL_ADC_MspInit+0x104>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	22a8      	movs	r2, #168	; 0xa8
 8003eb4:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a06      	ldr	r2, [pc, #24]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_ADC_MspInit+0xfc>)
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b00b      	add	sp, #44	; 0x2c
 8003ec8:	bd90      	pop	{r4, r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	40012400 	.word	0x40012400
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	20001240 	.word	0x20001240
 8003ed8:	40020008 	.word	0x40020008
 8003edc:	40020000 	.word	0x40020000

08003ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b08b      	sub	sp, #44	; 0x2c
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	2414      	movs	r4, #20
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	0018      	movs	r0, r3
 8003eee:	2314      	movs	r3, #20
 8003ef0:	001a      	movs	r2, r3
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	f004 fbdc 	bl	80086b0 <memset>
  if(hi2c->Instance==I2C1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_I2C_MspInit+0x90>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d132      	bne.n	8003f68 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_I2C_MspInit+0x94>)
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_I2C_MspInit+0x94>)
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	02c9      	lsls	r1, r1, #11
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	615a      	str	r2, [r3, #20]
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <HAL_I2C_MspInit+0x94>)
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	02db      	lsls	r3, r3, #11
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f1e:	193b      	adds	r3, r7, r4
 8003f20:	22c0      	movs	r2, #192	; 0xc0
 8003f22:	0092      	lsls	r2, r2, #2
 8003f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f26:	0021      	movs	r1, r4
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	2212      	movs	r2, #18
 8003f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2203      	movs	r2, #3
 8003f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_I2C_MspInit+0x98>)
 8003f44:	0019      	movs	r1, r3
 8003f46:	0010      	movs	r0, r2
 8003f48:	f001 f910 	bl	800516c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_I2C_MspInit+0x94>)
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <HAL_I2C_MspInit+0x94>)
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	0389      	lsls	r1, r1, #14
 8003f56:	430a      	orrs	r2, r1
 8003f58:	61da      	str	r2, [r3, #28]
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_I2C_MspInit+0x94>)
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	039b      	lsls	r3, r3, #14
 8003f62:	4013      	ands	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b00b      	add	sp, #44	; 0x2c
 8003f6e:	bd90      	pop	{r4, r7, pc}
 8003f70:	40005400 	.word	0x40005400
 8003f74:	40021000 	.word	0x40021000
 8003f78:	48000400 	.word	0x48000400

08003f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b08b      	sub	sp, #44	; 0x2c
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	2414      	movs	r4, #20
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	0018      	movs	r0, r3
 8003f8a:	2314      	movs	r3, #20
 8003f8c:	001a      	movs	r2, r3
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f004 fb8e 	bl	80086b0 <memset>
  if(hspi->Instance==SPI1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <HAL_SPI_MspInit+0x90>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d132      	bne.n	8004004 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <HAL_SPI_MspInit+0x94>)
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_SPI_MspInit+0x94>)
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	0149      	lsls	r1, r1, #5
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	619a      	str	r2, [r3, #24]
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <HAL_SPI_MspInit+0x94>)
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_SPI_MspInit+0x94>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <HAL_SPI_MspInit+0x94>)
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	0289      	lsls	r1, r1, #10
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	615a      	str	r2, [r3, #20]
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <HAL_SPI_MspInit+0x94>)
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8003fd6:	0021      	movs	r1, r4
 8003fd8:	187b      	adds	r3, r7, r1
 8003fda:	22b0      	movs	r2, #176	; 0xb0
 8003fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	187b      	adds	r3, r7, r1
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	2203      	movs	r2, #3
 8003fee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff6:	187a      	adds	r2, r7, r1
 8003ff8:	2390      	movs	r3, #144	; 0x90
 8003ffa:	05db      	lsls	r3, r3, #23
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f001 f8b4 	bl	800516c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	b00b      	add	sp, #44	; 0x2c
 800400a:	bd90      	pop	{r4, r7, pc}
 800400c:	40013000 	.word	0x40013000
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <HAL_TIM_PWM_MspInit+0x38>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10d      	bne.n	8004042 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <HAL_TIM_PWM_MspInit+0x3c>)
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_TIM_PWM_MspInit+0x3c>)
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	0109      	lsls	r1, r1, #4
 8004030:	430a      	orrs	r2, r1
 8004032:	619a      	str	r2, [r3, #24]
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_TIM_PWM_MspInit+0x3c>)
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40021000 	.word	0x40021000

08004054 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	240c      	movs	r4, #12
 800405e:	193b      	adds	r3, r7, r4
 8004060:	0018      	movs	r0, r3
 8004062:	2314      	movs	r3, #20
 8004064:	001a      	movs	r2, r3
 8004066:	2100      	movs	r1, #0
 8004068:	f004 fb22 	bl	80086b0 <memset>
  if(htim->Instance==TIM1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_TIM_MspPostInit+0x78>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d125      	bne.n	80040c2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_TIM_MspPostInit+0x7c>)
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_TIM_MspPostInit+0x7c>)
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	0289      	lsls	r1, r1, #10
 8004080:	430a      	orrs	r2, r1
 8004082:	615a      	str	r2, [r3, #20]
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_TIM_MspPostInit+0x7c>)
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	4013      	ands	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004092:	193b      	adds	r3, r7, r4
 8004094:	2280      	movs	r2, #128	; 0x80
 8004096:	0052      	lsls	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	0021      	movs	r1, r4
 800409c:	187b      	adds	r3, r7, r1
 800409e:	2202      	movs	r2, #2
 80040a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040ae:	187b      	adds	r3, r7, r1
 80040b0:	2202      	movs	r2, #2
 80040b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b4:	187a      	adds	r2, r7, r1
 80040b6:	2390      	movs	r3, #144	; 0x90
 80040b8:	05db      	lsls	r3, r3, #23
 80040ba:	0011      	movs	r1, r2
 80040bc:	0018      	movs	r0, r3
 80040be:	f001 f855 	bl	800516c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b009      	add	sp, #36	; 0x24
 80040c8:	bd90      	pop	{r4, r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40021000 	.word	0x40021000

080040d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <NMI_Handler+0x4>

080040da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040de:	e7fe      	b.n	80040de <HardFault_Handler+0x4>

080040e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f8:	f000 f956 	bl	80043a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004106:	2010      	movs	r0, #16
 8004108:	f001 f9e2 	bl	80054d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800410c:	2020      	movs	r0, #32
 800410e:	f001 f9df 	bl	80054d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004112:	2040      	movs	r0, #64	; 0x40
 8004114:	f001 f9dc 	bl	80054d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004118:	2080      	movs	r0, #128	; 0x80
 800411a:	f001 f9d9 	bl	80054d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <DMA1_Ch1_IRQHandler+0x14>)
 800412a:	0018      	movs	r0, r3
 800412c:	f000 ff09 	bl	8004f42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	20001240 	.word	0x20001240

0800413c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	return 1;
 8004140:	2301      	movs	r3, #1
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <_kill>:

int _kill(int pid, int sig)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004152:	f004 fa79 	bl	8008648 <__errno>
 8004156:	0003      	movs	r3, r0
 8004158:	2216      	movs	r2, #22
 800415a:	601a      	str	r2, [r3, #0]
	return -1;
 800415c:	2301      	movs	r3, #1
 800415e:	425b      	negs	r3, r3
}
 8004160:	0018      	movs	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}

08004168 <_exit>:

void _exit (int status)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004170:	2301      	movs	r3, #1
 8004172:	425a      	negs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0011      	movs	r1, r2
 8004178:	0018      	movs	r0, r3
 800417a:	f7ff ffe5 	bl	8004148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800417e:	e7fe      	b.n	800417e <_exit+0x16>

08004180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	e00a      	b.n	80041a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004192:	e000      	b.n	8004196 <_read+0x16>
 8004194:	bf00      	nop
 8004196:	0001      	movs	r1, r0
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	60ba      	str	r2, [r7, #8]
 800419e:	b2ca      	uxtb	r2, r1
 80041a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	3301      	adds	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	dbf0      	blt.n	8004192 <_read+0x12>
	}

return len;
 80041b0:	687b      	ldr	r3, [r7, #4]
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b006      	add	sp, #24
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e009      	b.n	80041e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	60ba      	str	r2, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	0018      	movs	r0, r3
 80041d6:	e000      	b.n	80041da <_write+0x20>
 80041d8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3301      	adds	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	dbf1      	blt.n	80041cc <_write+0x12>
	}
	return len;
 80041e8:	687b      	ldr	r3, [r7, #4]
}
 80041ea:	0018      	movs	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b006      	add	sp, #24
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <_close>:

int _close(int file)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
	return -1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	425b      	negs	r3, r3
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b002      	add	sp, #8
 8004204:	bd80      	pop	{r7, pc}

08004206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	0192      	lsls	r2, r2, #6
 8004216:	605a      	str	r2, [r3, #4]
	return 0;
 8004218:	2300      	movs	r3, #0
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b002      	add	sp, #8
 8004220:	bd80      	pop	{r7, pc}

08004222 <_isatty>:

int _isatty(int file)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
	return 1;
 800422a:	2301      	movs	r3, #1
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}

08004234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	return 0;
 8004240:	2300      	movs	r3, #0
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b004      	add	sp, #16
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004254:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <_sbrk+0x5c>)
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <_sbrk+0x60>)
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004260:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <_sbrk+0x64>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <_sbrk+0x64>)
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <_sbrk+0x68>)
 800426c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <_sbrk+0x64>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	18d3      	adds	r3, r2, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	429a      	cmp	r2, r3
 800427a:	d207      	bcs.n	800428c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800427c:	f004 f9e4 	bl	8008648 <__errno>
 8004280:	0003      	movs	r3, r0
 8004282:	220c      	movs	r2, #12
 8004284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004286:	2301      	movs	r3, #1
 8004288:	425b      	negs	r3, r3
 800428a:	e009      	b.n	80042a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <_sbrk+0x64>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <_sbrk+0x64>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	18d2      	adds	r2, r2, r3
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <_sbrk+0x64>)
 800429c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	0018      	movs	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b006      	add	sp, #24
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20008000 	.word	0x20008000
 80042ac:	00000400 	.word	0x00000400
 80042b0:	20001124 	.word	0x20001124
 80042b4:	200012e0 	.word	0x200012e0

080042b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042c4:	480d      	ldr	r0, [pc, #52]	; (80042fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042c8:	480d      	ldr	r0, [pc, #52]	; (8004300 <LoopForever+0x6>)
  ldr r1, =_edata
 80042ca:	490e      	ldr	r1, [pc, #56]	; (8004304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042cc:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <LoopForever+0xe>)
  movs r3, #0
 80042ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042d0:	e002      	b.n	80042d8 <LoopCopyDataInit>

080042d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042d6:	3304      	adds	r3, #4

080042d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042dc:	d3f9      	bcc.n	80042d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042de:	4a0b      	ldr	r2, [pc, #44]	; (800430c <LoopForever+0x12>)
  ldr r4, =_ebss
 80042e0:	4c0b      	ldr	r4, [pc, #44]	; (8004310 <LoopForever+0x16>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e4:	e001      	b.n	80042ea <LoopFillZerobss>

080042e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042e8:	3204      	adds	r2, #4

080042ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042ec:	d3fb      	bcc.n	80042e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042ee:	f7ff ffe3 	bl	80042b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80042f2:	f004 f9af 	bl	8008654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042f6:	f7fe fb65 	bl	80029c4 <main>

080042fa <LoopForever>:

LoopForever:
    b LoopForever
 80042fa:	e7fe      	b.n	80042fa <LoopForever>
  ldr   r0, =_estack
 80042fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004304:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8004308:	0800bde8 	.word	0x0800bde8
  ldr r2, =_sbss
 800430c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8004310:	200012dc 	.word	0x200012dc

08004314 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004314:	e7fe      	b.n	8004314 <ADC1_COMP_IRQHandler>
	...

08004318 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <HAL_Init+0x24>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_Init+0x24>)
 8004322:	2110      	movs	r1, #16
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004328:	2003      	movs	r0, #3
 800432a:	f000 f809 	bl	8004340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800432e:	f7ff fd2f 	bl	8003d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	40022000 	.word	0x40022000

08004340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004348:	4b14      	ldr	r3, [pc, #80]	; (800439c <HAL_InitTick+0x5c>)
 800434a:	681c      	ldr	r4, [r3, #0]
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_InitTick+0x60>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	0019      	movs	r1, r3
 8004352:	23fa      	movs	r3, #250	; 0xfa
 8004354:	0098      	lsls	r0, r3, #2
 8004356:	f7fb fed5 	bl	8000104 <__udivsi3>
 800435a:	0003      	movs	r3, r0
 800435c:	0019      	movs	r1, r3
 800435e:	0020      	movs	r0, r4
 8004360:	f7fb fed0 	bl	8000104 <__udivsi3>
 8004364:	0003      	movs	r3, r0
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fceb 	bl	8004d42 <HAL_SYSTICK_Config>
 800436c:	1e03      	subs	r3, r0, #0
 800436e:	d001      	beq.n	8004374 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e00f      	b.n	8004394 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b03      	cmp	r3, #3
 8004378:	d80b      	bhi.n	8004392 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	2301      	movs	r3, #1
 800437e:	425b      	negs	r3, r3
 8004380:	2200      	movs	r2, #0
 8004382:	0018      	movs	r0, r3
 8004384:	f000 fcb8 	bl	8004cf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_InitTick+0x64>)
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	b003      	add	sp, #12
 800439a:	bd90      	pop	{r4, r7, pc}
 800439c:	2000007c 	.word	0x2000007c
 80043a0:	20000084 	.word	0x20000084
 80043a4:	20000080 	.word	0x20000080

080043a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_IncTick+0x1c>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	001a      	movs	r2, r3
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_IncTick+0x20>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	18d2      	adds	r2, r2, r3
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_IncTick+0x20>)
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	20000084 	.word	0x20000084
 80043c8:	200012c8 	.word	0x200012c8

080043cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  return uwTick;
 80043d0:	4b02      	ldr	r3, [pc, #8]	; (80043dc <HAL_GetTick+0x10>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	200012c8 	.word	0x200012c8

080043e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e8:	230f      	movs	r3, #15
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e125      	b.n	800464a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2234      	movs	r2, #52	; 0x34
 8004410:	2100      	movs	r1, #0
 8004412:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff fcde 	bl	8003dd8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	2210      	movs	r2, #16
 8004422:	4013      	ands	r3, r2
 8004424:	d000      	beq.n	8004428 <HAL_ADC_Init+0x48>
 8004426:	e103      	b.n	8004630 <HAL_ADC_Init+0x250>
 8004428:	230f      	movs	r3, #15
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d000      	beq.n	8004434 <HAL_ADC_Init+0x54>
 8004432:	e0fd      	b.n	8004630 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2204      	movs	r2, #4
 800443c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800443e:	d000      	beq.n	8004442 <HAL_ADC_Init+0x62>
 8004440:	e0f6      	b.n	8004630 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	4a83      	ldr	r2, [pc, #524]	; (8004654 <HAL_ADC_Init+0x274>)
 8004448:	4013      	ands	r3, r2
 800444a:	2202      	movs	r2, #2
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2203      	movs	r2, #3
 800445a:	4013      	ands	r3, r2
 800445c:	2b01      	cmp	r3, #1
 800445e:	d112      	bne.n	8004486 <HAL_ADC_Init+0xa6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	4013      	ands	r3, r2
 800446a:	2b01      	cmp	r3, #1
 800446c:	d009      	beq.n	8004482 <HAL_ADC_Init+0xa2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	401a      	ands	r2, r3
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	429a      	cmp	r2, r3
 8004480:	d101      	bne.n	8004486 <HAL_ADC_Init+0xa6>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_ADC_Init+0xa8>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2218      	movs	r2, #24
 8004494:	4393      	bics	r3, r2
 8004496:	0019      	movs	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	0899      	lsrs	r1, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4964      	ldr	r1, [pc, #400]	; (8004658 <HAL_ADC_Init+0x278>)
 80044c6:	400a      	ands	r2, r1
 80044c8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7e1b      	ldrb	r3, [r3, #24]
 80044ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7e5b      	ldrb	r3, [r3, #25]
 80044d4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7e9b      	ldrb	r3, [r3, #26]
 80044dc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80044de:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d002      	beq.n	80044ee <HAL_ADC_Init+0x10e>
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	015b      	lsls	r3, r3, #5
 80044ec:	e000      	b.n	80044f0 <HAL_ADC_Init+0x110>
 80044ee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044f0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80044f6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d101      	bne.n	8004504 <HAL_ADC_Init+0x124>
 8004500:	2304      	movs	r3, #4
 8004502:	e000      	b.n	8004506 <HAL_ADC_Init+0x126>
 8004504:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004506:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2124      	movs	r1, #36	; 0x24
 800450c:	5c5b      	ldrb	r3, [r3, r1]
 800450e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004510:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4313      	orrs	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	7edb      	ldrb	r3, [r3, #27]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d115      	bne.n	800454c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7e9b      	ldrb	r3, [r3, #26]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	0252      	lsls	r2, r2, #9
 800452e:	4313      	orrs	r3, r2
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	e00b      	b.n	800454c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	2220      	movs	r2, #32
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	2201      	movs	r2, #1
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	23c2      	movs	r3, #194	; 0xc2
 8004552:	33ff      	adds	r3, #255	; 0xff
 8004554:	429a      	cmp	r2, r3
 8004556:	d007      	beq.n	8004568 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004560:	4313      	orrs	r3, r2
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68d9      	ldr	r1, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	430a      	orrs	r2, r1
 8004576:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	055b      	lsls	r3, r3, #21
 8004580:	429a      	cmp	r2, r3
 8004582:	d01b      	beq.n	80045bc <HAL_ADC_Init+0x1dc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d017      	beq.n	80045bc <HAL_ADC_Init+0x1dc>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	2b02      	cmp	r3, #2
 8004592:	d013      	beq.n	80045bc <HAL_ADC_Init+0x1dc>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	2b03      	cmp	r3, #3
 800459a:	d00f      	beq.n	80045bc <HAL_ADC_Init+0x1dc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d00b      	beq.n	80045bc <HAL_ADC_Init+0x1dc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	d007      	beq.n	80045bc <HAL_ADC_Init+0x1dc>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d003      	beq.n	80045bc <HAL_ADC_Init+0x1dc>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	2b07      	cmp	r3, #7
 80045ba:	d112      	bne.n	80045e2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2107      	movs	r1, #7
 80045c8:	438a      	bics	r2, r1
 80045ca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6959      	ldr	r1, [r3, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	2207      	movs	r2, #7
 80045d8:	401a      	ands	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	; (800465c <HAL_ADC_Init+0x27c>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d10b      	bne.n	800460a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	2203      	movs	r2, #3
 80045fe:	4393      	bics	r3, r2
 8004600:	2201      	movs	r2, #1
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004608:	e01c      	b.n	8004644 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	2212      	movs	r2, #18
 8004610:	4393      	bics	r3, r2
 8004612:	2210      	movs	r2, #16
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	2201      	movs	r2, #1
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004626:	230f      	movs	r3, #15
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800462e:	e009      	b.n	8004644 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	2210      	movs	r2, #16
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800463c:	230f      	movs	r3, #15
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004644:	230f      	movs	r3, #15
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b004      	add	sp, #16
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	fffffefd 	.word	0xfffffefd
 8004658:	fffe0219 	.word	0xfffe0219
 800465c:	833fffe7 	.word	0x833fffe7

08004660 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004660:	b590      	push	{r4, r7, lr}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800466c:	2317      	movs	r3, #23
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2204      	movs	r2, #4
 800467c:	4013      	ands	r3, r2
 800467e:	d15e      	bne.n	800473e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2234      	movs	r2, #52	; 0x34
 8004684:	5c9b      	ldrb	r3, [r3, r2]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADC_Start_DMA+0x2e>
 800468a:	2302      	movs	r3, #2
 800468c:	e05e      	b.n	800474c <HAL_ADC_Start_DMA+0xec>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2234      	movs	r2, #52	; 0x34
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	7e5b      	ldrb	r3, [r3, #25]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d007      	beq.n	80046ae <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800469e:	2317      	movs	r3, #23
 80046a0:	18fc      	adds	r4, r7, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 f973 	bl	8004990 <ADC_Enable>
 80046aa:	0003      	movs	r3, r0
 80046ac:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046ae:	2317      	movs	r3, #23
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d146      	bne.n	8004746 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	4a25      	ldr	r2, [pc, #148]	; (8004754 <HAL_ADC_Start_DMA+0xf4>)
 80046be:	4013      	ands	r3, r2
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	0052      	lsls	r2, r2, #1
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2234      	movs	r2, #52	; 0x34
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <HAL_ADC_Start_DMA+0xf8>)
 80046de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_ADC_Start_DMA+0xfc>)
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_ADC_Start_DMA+0x100>)
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	221c      	movs	r2, #28
 80046f6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2110      	movs	r1, #16
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2101      	movs	r1, #1
 8004714:	430a      	orrs	r2, r1
 8004716:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3340      	adds	r3, #64	; 0x40
 8004722:	0019      	movs	r1, r3
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f000 fb60 	bl	8004dec <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2104      	movs	r1, #4
 8004738:	430a      	orrs	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	e003      	b.n	8004746 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800473e:	2317      	movs	r3, #23
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	2202      	movs	r2, #2
 8004744:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004746:	2317      	movs	r3, #23
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	781b      	ldrb	r3, [r3, #0]
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b007      	add	sp, #28
 8004752:	bd90      	pop	{r4, r7, pc}
 8004754:	fffff0fe 	.word	0xfffff0fe
 8004758:	08004a99 	.word	0x08004a99
 800475c:	08004b4d 	.word	0x08004b4d
 8004760:	08004b6b 	.word	0x08004b6b

08004764 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800476c:	46c0      	nop			; (mov r8, r8)
 800476e:	46bd      	mov	sp, r7
 8004770:	b002      	add	sp, #8
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477e:	230f      	movs	r3, #15
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	055b      	lsls	r3, r3, #21
 8004792:	429a      	cmp	r2, r3
 8004794:	d011      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x46>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d00d      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x46>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d009      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x46>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d005      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x46>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d001      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x46>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2234      	movs	r2, #52	; 0x34
 80047be:	5c9b      	ldrb	r3, [r3, r2]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x54>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e0d0      	b.n	800496a <HAL_ADC_ConfigChannel+0x1f6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2234      	movs	r2, #52	; 0x34
 80047cc:	2101      	movs	r1, #1
 80047ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2204      	movs	r2, #4
 80047d8:	4013      	ands	r3, r2
 80047da:	d000      	beq.n	80047de <HAL_ADC_ConfigChannel+0x6a>
 80047dc:	e0b4      	b.n	8004948 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4a64      	ldr	r2, [pc, #400]	; (8004974 <HAL_ADC_ConfigChannel+0x200>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d100      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x76>
 80047e8:	e082      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2201      	movs	r2, #1
 80047f6:	409a      	lsls	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	055b      	lsls	r3, r3, #21
 8004808:	429a      	cmp	r2, r3
 800480a:	d037      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d033      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	2b02      	cmp	r3, #2
 800481a:	d02f      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	2b03      	cmp	r3, #3
 8004822:	d02b      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	2b04      	cmp	r3, #4
 800482a:	d027      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	2b05      	cmp	r3, #5
 8004832:	d023      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	2b06      	cmp	r3, #6
 800483a:	d01f      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	2b07      	cmp	r3, #7
 8004842:	d01b      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	2107      	movs	r1, #7
 8004850:	400b      	ands	r3, r1
 8004852:	429a      	cmp	r2, r3
 8004854:	d012      	beq.n	800487c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2107      	movs	r1, #7
 8004862:	438a      	bics	r2, r1
 8004864:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6959      	ldr	r1, [r3, #20]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2207      	movs	r2, #7
 8004872:	401a      	ands	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b10      	cmp	r3, #16
 8004882:	d007      	beq.n	8004894 <HAL_ADC_ConfigChannel+0x120>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b11      	cmp	r3, #17
 800488a:	d003      	beq.n	8004894 <HAL_ADC_ConfigChannel+0x120>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b12      	cmp	r3, #18
 8004892:	d163      	bne.n	800495c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004894:	4b38      	ldr	r3, [pc, #224]	; (8004978 <HAL_ADC_ConfigChannel+0x204>)
 8004896:	6819      	ldr	r1, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b10      	cmp	r3, #16
 800489e:	d009      	beq.n	80048b4 <HAL_ADC_ConfigChannel+0x140>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b11      	cmp	r3, #17
 80048a6:	d102      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x13a>
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	03db      	lsls	r3, r3, #15
 80048ac:	e004      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x144>
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	045b      	lsls	r3, r3, #17
 80048b2:	e001      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x144>
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	4a2f      	ldr	r2, [pc, #188]	; (8004978 <HAL_ADC_ConfigChannel+0x204>)
 80048ba:	430b      	orrs	r3, r1
 80048bc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d14a      	bne.n	800495c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <HAL_ADC_ConfigChannel+0x208>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	492d      	ldr	r1, [pc, #180]	; (8004980 <HAL_ADC_ConfigChannel+0x20c>)
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7fb fc19 	bl	8000104 <__udivsi3>
 80048d2:	0003      	movs	r3, r0
 80048d4:	001a      	movs	r2, r3
 80048d6:	0013      	movs	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	189b      	adds	r3, r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048e0:	e002      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f9      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x16e>
 80048ee:	e035      	b.n	800495c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2101      	movs	r1, #1
 80048fc:	4099      	lsls	r1, r3
 80048fe:	000b      	movs	r3, r1
 8004900:	43d9      	mvns	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	400a      	ands	r2, r1
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b10      	cmp	r3, #16
 8004910:	d007      	beq.n	8004922 <HAL_ADC_ConfigChannel+0x1ae>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b11      	cmp	r3, #17
 8004918:	d003      	beq.n	8004922 <HAL_ADC_ConfigChannel+0x1ae>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b12      	cmp	r3, #18
 8004920:	d11c      	bne.n	800495c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <HAL_ADC_ConfigChannel+0x204>)
 8004924:	6819      	ldr	r1, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b10      	cmp	r3, #16
 800492c:	d007      	beq.n	800493e <HAL_ADC_ConfigChannel+0x1ca>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b11      	cmp	r3, #17
 8004934:	d101      	bne.n	800493a <HAL_ADC_ConfigChannel+0x1c6>
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <HAL_ADC_ConfigChannel+0x210>)
 8004938:	e002      	b.n	8004940 <HAL_ADC_ConfigChannel+0x1cc>
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_ADC_ConfigChannel+0x214>)
 800493c:	e000      	b.n	8004940 <HAL_ADC_ConfigChannel+0x1cc>
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <HAL_ADC_ConfigChannel+0x218>)
 8004940:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <HAL_ADC_ConfigChannel+0x204>)
 8004942:	400b      	ands	r3, r1
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e009      	b.n	800495c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	2220      	movs	r2, #32
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004954:	230f      	movs	r3, #15
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2234      	movs	r2, #52	; 0x34
 8004960:	2100      	movs	r1, #0
 8004962:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004964:	230f      	movs	r3, #15
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	781b      	ldrb	r3, [r3, #0]
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b004      	add	sp, #16
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	00001001 	.word	0x00001001
 8004978:	40012708 	.word	0x40012708
 800497c:	2000007c 	.word	0x2000007c
 8004980:	000f4240 	.word	0x000f4240
 8004984:	ffbfffff 	.word	0xffbfffff
 8004988:	feffffff 	.word	0xfeffffff
 800498c:	ff7fffff 	.word	0xff7fffff

08004990 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2203      	movs	r2, #3
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d112      	bne.n	80049d4 <ADC_Enable+0x44>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2201      	movs	r2, #1
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d009      	beq.n	80049d0 <ADC_Enable+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	401a      	ands	r2, r3
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d101      	bne.n	80049d4 <ADC_Enable+0x44>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <ADC_Enable+0x46>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d152      	bne.n	8004a80 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <ADC_Enable+0xfc>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	d00d      	beq.n	8004a02 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	2210      	movs	r2, #16
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	2201      	movs	r2, #1
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e03f      	b.n	8004a82 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a12:	4b1f      	ldr	r3, [pc, #124]	; (8004a90 <ADC_Enable+0x100>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	491f      	ldr	r1, [pc, #124]	; (8004a94 <ADC_Enable+0x104>)
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f7fb fb73 	bl	8000104 <__udivsi3>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a22:	e002      	b.n	8004a2a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f9      	bne.n	8004a24 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a30:	f7ff fccc 	bl	80043cc <HAL_GetTick>
 8004a34:	0003      	movs	r3, r0
 8004a36:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a38:	e01b      	b.n	8004a72 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a3a:	f7ff fcc7 	bl	80043cc <HAL_GetTick>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d914      	bls.n	8004a72 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d00d      	beq.n	8004a72 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2201      	movs	r2, #1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e007      	b.n	8004a82 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d1dc      	bne.n	8004a3a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b004      	add	sp, #16
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	80000017 	.word	0x80000017
 8004a90:	2000007c 	.word	0x2000007c
 8004a94:	000f4240 	.word	0x000f4240

08004a98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	2250      	movs	r2, #80	; 0x50
 8004aac:	4013      	ands	r3, r2
 8004aae:	d140      	bne.n	8004b32 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	0092      	lsls	r2, r2, #2
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	23c0      	movs	r3, #192	; 0xc0
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d12d      	bne.n	8004b28 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d129      	bne.n	8004b28 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2208      	movs	r2, #8
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d122      	bne.n	8004b28 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	4013      	ands	r3, r2
 8004aec:	d110      	bne.n	8004b10 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	210c      	movs	r1, #12
 8004afa:	438a      	bics	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <ADC_DMAConvCplt+0xb0>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	2201      	movs	r2, #1
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b0e:	e00b      	b.n	8004b28 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	2220      	movs	r2, #32
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	2201      	movs	r2, #1
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fe faf3 	bl	8003116 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004b30:	e005      	b.n	8004b3e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	0010      	movs	r0, r2
 8004b3c:	4798      	blx	r3
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	fffffefe 	.word	0xfffffefe

08004b4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fe fad1 	bl	8003104 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	2240      	movs	r2, #64	; 0x40
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	2204      	movs	r2, #4
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	0018      	movs	r0, r3
 8004b94:	f7ff fde6 	bl	8004764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b004      	add	sp, #16
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	0002      	movs	r2, r0
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bac:	1dfb      	adds	r3, r7, #7
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb2:	d809      	bhi.n	8004bc8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb4:	1dfb      	adds	r3, r7, #7
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	001a      	movs	r2, r3
 8004bba:	231f      	movs	r3, #31
 8004bbc:	401a      	ands	r2, r3
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <__NVIC_EnableIRQ+0x30>)
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4091      	lsls	r1, r2
 8004bc4:	000a      	movs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
  }
}
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	e000e100 	.word	0xe000e100

08004bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	0002      	movs	r2, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	1dfb      	adds	r3, r7, #7
 8004be0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004be2:	1dfb      	adds	r3, r7, #7
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b7f      	cmp	r3, #127	; 0x7f
 8004be8:	d828      	bhi.n	8004c3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bea:	4a2f      	ldr	r2, [pc, #188]	; (8004ca8 <__NVIC_SetPriority+0xd4>)
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	33c0      	adds	r3, #192	; 0xc0
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	589b      	ldr	r3, [r3, r2]
 8004bfa:	1dfa      	adds	r2, r7, #7
 8004bfc:	7812      	ldrb	r2, [r2, #0]
 8004bfe:	0011      	movs	r1, r2
 8004c00:	2203      	movs	r2, #3
 8004c02:	400a      	ands	r2, r1
 8004c04:	00d2      	lsls	r2, r2, #3
 8004c06:	21ff      	movs	r1, #255	; 0xff
 8004c08:	4091      	lsls	r1, r2
 8004c0a:	000a      	movs	r2, r1
 8004c0c:	43d2      	mvns	r2, r2
 8004c0e:	401a      	ands	r2, r3
 8004c10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	019b      	lsls	r3, r3, #6
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	401a      	ands	r2, r3
 8004c1a:	1dfb      	adds	r3, r7, #7
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	2303      	movs	r3, #3
 8004c22:	4003      	ands	r3, r0
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c28:	481f      	ldr	r0, [pc, #124]	; (8004ca8 <__NVIC_SetPriority+0xd4>)
 8004c2a:	1dfb      	adds	r3, r7, #7
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b25b      	sxtb	r3, r3
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	430a      	orrs	r2, r1
 8004c34:	33c0      	adds	r3, #192	; 0xc0
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c3a:	e031      	b.n	8004ca0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <__NVIC_SetPriority+0xd8>)
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	0019      	movs	r1, r3
 8004c44:	230f      	movs	r3, #15
 8004c46:	400b      	ands	r3, r1
 8004c48:	3b08      	subs	r3, #8
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	3306      	adds	r3, #6
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	18d3      	adds	r3, r2, r3
 8004c52:	3304      	adds	r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	1dfa      	adds	r2, r7, #7
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	400a      	ands	r2, r1
 8004c60:	00d2      	lsls	r2, r2, #3
 8004c62:	21ff      	movs	r1, #255	; 0xff
 8004c64:	4091      	lsls	r1, r2
 8004c66:	000a      	movs	r2, r1
 8004c68:	43d2      	mvns	r2, r2
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	22ff      	movs	r2, #255	; 0xff
 8004c74:	401a      	ands	r2, r3
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	4003      	ands	r3, r0
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c84:	4809      	ldr	r0, [pc, #36]	; (8004cac <__NVIC_SetPriority+0xd8>)
 8004c86:	1dfb      	adds	r3, r7, #7
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	001c      	movs	r4, r3
 8004c8c:	230f      	movs	r3, #15
 8004c8e:	4023      	ands	r3, r4
 8004c90:	3b08      	subs	r3, #8
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	430a      	orrs	r2, r1
 8004c96:	3306      	adds	r3, #6
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	18c3      	adds	r3, r0, r3
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b003      	add	sp, #12
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	e000e100 	.word	0xe000e100
 8004cac:	e000ed00 	.word	0xe000ed00

08004cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	1e5a      	subs	r2, r3, #1
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	045b      	lsls	r3, r3, #17
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d301      	bcc.n	8004cc8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e010      	b.n	8004cea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <SysTick_Config+0x44>)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	2103      	movs	r1, #3
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f7ff ff7c 	bl	8004bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <SysTick_Config+0x44>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <SysTick_Config+0x44>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	210f      	movs	r1, #15
 8004d04:	187b      	adds	r3, r7, r1
 8004d06:	1c02      	adds	r2, r0, #0
 8004d08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b25b      	sxtb	r3, r3
 8004d12:	0011      	movs	r1, r2
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff ff5d 	bl	8004bd4 <__NVIC_SetPriority>
}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b004      	add	sp, #16
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	0002      	movs	r2, r0
 8004d2a:	1dfb      	adds	r3, r7, #7
 8004d2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d2e:	1dfb      	adds	r3, r7, #7
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff ff33 	bl	8004ba0 <__NVIC_EnableIRQ>
}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff ffaf 	bl	8004cb0 <SysTick_Config>
 8004d52:	0003      	movs	r3, r0
}
 8004d54:	0018      	movs	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e036      	b.n	8004de0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2221      	movs	r2, #33	; 0x21
 8004d76:	2102      	movs	r1, #2
 8004d78:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_DMA_Init+0x8c>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f998 	bl	80050f8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	2100      	movs	r1, #0
 8004ddc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}  
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b004      	add	sp, #16
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	ffffc00f 	.word	0xffffc00f

08004dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2317      	movs	r3, #23
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	5c9b      	ldrb	r3, [r3, r2]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_DMA_Start_IT+0x24>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e04f      	b.n	8004eb0 <HAL_DMA_Start_IT+0xc4>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	2101      	movs	r1, #1
 8004e16:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2221      	movs	r2, #33	; 0x21
 8004e1c:	5c9b      	ldrb	r3, [r3, r2]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d13a      	bne.n	8004e9a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2221      	movs	r2, #33	; 0x21
 8004e28:	2102      	movs	r1, #2
 8004e2a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	438a      	bics	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f928 	bl	800509e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	210e      	movs	r1, #14
 8004e62:	430a      	orrs	r2, r1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e00f      	b.n	8004e88 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	210a      	movs	r1, #10
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2104      	movs	r1, #4
 8004e84:	438a      	bics	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2101      	movs	r1, #1
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e007      	b.n	8004eaa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ea2:	2317      	movs	r3, #23
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004eaa:	2317      	movs	r3, #23
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	781b      	ldrb	r3, [r3, #0]
} 
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec0:	210f      	movs	r1, #15
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2221      	movs	r2, #33	; 0x21
 8004ecc:	5c9b      	ldrb	r3, [r3, r2]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d006      	beq.n	8004ee2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	2201      	movs	r2, #1
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	e028      	b.n	8004f34 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	210e      	movs	r1, #14
 8004eee:	438a      	bics	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	438a      	bics	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4091      	lsls	r1, r2
 8004f0e:	000a      	movs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2221      	movs	r2, #33	; 0x21
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	0010      	movs	r0, r2
 8004f32:	4798      	blx	r3
    } 
  }
  return status;
 8004f34:	230f      	movs	r3, #15
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	781b      	ldrb	r3, [r3, #0]
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2204      	movs	r2, #4
 8004f60:	409a      	lsls	r2, r3
 8004f62:	0013      	movs	r3, r2
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4013      	ands	r3, r2
 8004f68:	d024      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x72>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d020      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d107      	bne.n	8004f8e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2104      	movs	r1, #4
 8004f8a:	438a      	bics	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	2104      	movs	r1, #4
 8004f98:	4091      	lsls	r1, r2
 8004f9a:	000a      	movs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d100      	bne.n	8004fa8 <HAL_DMA_IRQHandler+0x66>
 8004fa6:	e06a      	b.n	800507e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	0010      	movs	r0, r2
 8004fb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004fb2:	e064      	b.n	800507e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	2202      	movs	r2, #2
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	0013      	movs	r3, r2
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d02b      	beq.n	800501c <HAL_DMA_IRQHandler+0xda>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d027      	beq.n	800501c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	210a      	movs	r1, #10
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2221      	movs	r2, #33	; 0x21
 8004fec:	2101      	movs	r1, #1
 8004fee:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4091      	lsls	r1, r2
 8004ffc:	000a      	movs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	2100      	movs	r1, #0
 8005006:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	d036      	beq.n	800507e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	0010      	movs	r0, r2
 8005018:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800501a:	e030      	b.n	800507e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2208      	movs	r2, #8
 8005022:	409a      	lsls	r2, r3
 8005024:	0013      	movs	r3, r2
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4013      	ands	r3, r2
 800502a:	d028      	beq.n	800507e <HAL_DMA_IRQHandler+0x13c>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2208      	movs	r2, #8
 8005030:	4013      	ands	r3, r2
 8005032:	d024      	beq.n	800507e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	210e      	movs	r1, #14
 8005040:	438a      	bics	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	2101      	movs	r1, #1
 800504e:	4091      	lsls	r1, r2
 8005050:	000a      	movs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2221      	movs	r2, #33	; 0x21
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	2100      	movs	r1, #0
 8005068:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	0010      	movs	r0, r2
 800507a:	4798      	blx	r3
    }
   }
}  
 800507c:	e7ff      	b.n	800507e <HAL_DMA_IRQHandler+0x13c>
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	b004      	add	sp, #16
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2221      	movs	r2, #33	; 0x21
 8005092:	5c9b      	ldrb	r3, [r3, r2]
 8005094:	b2db      	uxtb	r3, r3
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b002      	add	sp, #8
 800509c:	bd80      	pop	{r7, pc}

0800509e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	2101      	movs	r1, #1
 80050b6:	4091      	lsls	r1, r2
 80050b8:	000a      	movs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d108      	bne.n	80050de <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050dc:	e007      	b.n	80050ee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	60da      	str	r2, [r3, #12]
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b004      	add	sp, #16
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	001a      	movs	r2, r3
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <DMA_CalcBaseAndBitshift+0x60>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d810      	bhi.n	800512e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a12      	ldr	r2, [pc, #72]	; (800515c <DMA_CalcBaseAndBitshift+0x64>)
 8005112:	4694      	mov	ip, r2
 8005114:	4463      	add	r3, ip
 8005116:	2114      	movs	r1, #20
 8005118:	0018      	movs	r0, r3
 800511a:	f7fa fff3 	bl	8000104 <__udivsi3>
 800511e:	0003      	movs	r3, r0
 8005120:	009a      	lsls	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <DMA_CalcBaseAndBitshift+0x68>)
 800512a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800512c:	e00f      	b.n	800514e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <DMA_CalcBaseAndBitshift+0x6c>)
 8005134:	4694      	mov	ip, r2
 8005136:	4463      	add	r3, ip
 8005138:	2114      	movs	r1, #20
 800513a:	0018      	movs	r0, r3
 800513c:	f7fa ffe2 	bl	8000104 <__udivsi3>
 8005140:	0003      	movs	r3, r0
 8005142:	009a      	lsls	r2, r3, #2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a07      	ldr	r2, [pc, #28]	; (8005168 <DMA_CalcBaseAndBitshift+0x70>)
 800514c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	b002      	add	sp, #8
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	40020407 	.word	0x40020407
 800515c:	bffdfff8 	.word	0xbffdfff8
 8005160:	40020000 	.word	0x40020000
 8005164:	bffdfbf8 	.word	0xbffdfbf8
 8005168:	40020400 	.word	0x40020400

0800516c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800517a:	e155      	b.n	8005428 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2101      	movs	r1, #1
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4091      	lsls	r1, r2
 8005186:	000a      	movs	r2, r1
 8005188:	4013      	ands	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d100      	bne.n	8005194 <HAL_GPIO_Init+0x28>
 8005192:	e146      	b.n	8005422 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2203      	movs	r2, #3
 800519a:	4013      	ands	r3, r2
 800519c:	2b01      	cmp	r3, #1
 800519e:	d005      	beq.n	80051ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d130      	bne.n	800520e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2203      	movs	r2, #3
 80051b8:	409a      	lsls	r2, r3
 80051ba:	0013      	movs	r3, r2
 80051bc:	43da      	mvns	r2, r3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4013      	ands	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	409a      	lsls	r2, r3
 80051ce:	0013      	movs	r3, r2
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051e2:	2201      	movs	r2, #1
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	409a      	lsls	r2, r3
 80051e8:	0013      	movs	r3, r2
 80051ea:	43da      	mvns	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	2201      	movs	r2, #1
 80051fa:	401a      	ands	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	409a      	lsls	r2, r3
 8005200:	0013      	movs	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2203      	movs	r2, #3
 8005214:	4013      	ands	r3, r2
 8005216:	2b03      	cmp	r3, #3
 8005218:	d017      	beq.n	800524a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	2203      	movs	r2, #3
 8005226:	409a      	lsls	r2, r3
 8005228:	0013      	movs	r3, r2
 800522a:	43da      	mvns	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4013      	ands	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	409a      	lsls	r2, r3
 800523c:	0013      	movs	r3, r2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2203      	movs	r2, #3
 8005250:	4013      	ands	r3, r2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d123      	bne.n	800529e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	08da      	lsrs	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3208      	adds	r2, #8
 800525e:	0092      	lsls	r2, r2, #2
 8005260:	58d3      	ldr	r3, [r2, r3]
 8005262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2207      	movs	r2, #7
 8005268:	4013      	ands	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	220f      	movs	r2, #15
 800526e:	409a      	lsls	r2, r3
 8005270:	0013      	movs	r3, r2
 8005272:	43da      	mvns	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4013      	ands	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2107      	movs	r1, #7
 8005282:	400b      	ands	r3, r1
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	409a      	lsls	r2, r3
 8005288:	0013      	movs	r3, r2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	08da      	lsrs	r2, r3, #3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3208      	adds	r2, #8
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	6939      	ldr	r1, [r7, #16]
 800529c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	2203      	movs	r2, #3
 80052aa:	409a      	lsls	r2, r3
 80052ac:	0013      	movs	r3, r2
 80052ae:	43da      	mvns	r2, r3
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4013      	ands	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2203      	movs	r2, #3
 80052bc:	401a      	ands	r2, r3
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	409a      	lsls	r2, r3
 80052c4:	0013      	movs	r3, r2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	23c0      	movs	r3, #192	; 0xc0
 80052d8:	029b      	lsls	r3, r3, #10
 80052da:	4013      	ands	r3, r2
 80052dc:	d100      	bne.n	80052e0 <HAL_GPIO_Init+0x174>
 80052de:	e0a0      	b.n	8005422 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <HAL_GPIO_Init+0x2d4>)
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	4b56      	ldr	r3, [pc, #344]	; (8005440 <HAL_GPIO_Init+0x2d4>)
 80052e6:	2101      	movs	r1, #1
 80052e8:	430a      	orrs	r2, r1
 80052ea:	619a      	str	r2, [r3, #24]
 80052ec:	4b54      	ldr	r3, [pc, #336]	; (8005440 <HAL_GPIO_Init+0x2d4>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2201      	movs	r2, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80052f8:	4a52      	ldr	r2, [pc, #328]	; (8005444 <HAL_GPIO_Init+0x2d8>)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	3302      	adds	r3, #2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	589b      	ldr	r3, [r3, r2]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2203      	movs	r2, #3
 800530a:	4013      	ands	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	220f      	movs	r2, #15
 8005310:	409a      	lsls	r2, r3
 8005312:	0013      	movs	r3, r2
 8005314:	43da      	mvns	r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	2390      	movs	r3, #144	; 0x90
 8005320:	05db      	lsls	r3, r3, #23
 8005322:	429a      	cmp	r2, r3
 8005324:	d019      	beq.n	800535a <HAL_GPIO_Init+0x1ee>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a47      	ldr	r2, [pc, #284]	; (8005448 <HAL_GPIO_Init+0x2dc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <HAL_GPIO_Init+0x1ea>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a46      	ldr	r2, [pc, #280]	; (800544c <HAL_GPIO_Init+0x2e0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00d      	beq.n	8005352 <HAL_GPIO_Init+0x1e6>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a45      	ldr	r2, [pc, #276]	; (8005450 <HAL_GPIO_Init+0x2e4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <HAL_GPIO_Init+0x1e2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a44      	ldr	r2, [pc, #272]	; (8005454 <HAL_GPIO_Init+0x2e8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_GPIO_Init+0x1de>
 8005346:	2304      	movs	r3, #4
 8005348:	e008      	b.n	800535c <HAL_GPIO_Init+0x1f0>
 800534a:	2305      	movs	r3, #5
 800534c:	e006      	b.n	800535c <HAL_GPIO_Init+0x1f0>
 800534e:	2303      	movs	r3, #3
 8005350:	e004      	b.n	800535c <HAL_GPIO_Init+0x1f0>
 8005352:	2302      	movs	r3, #2
 8005354:	e002      	b.n	800535c <HAL_GPIO_Init+0x1f0>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_GPIO_Init+0x1f0>
 800535a:	2300      	movs	r3, #0
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	2103      	movs	r1, #3
 8005360:	400a      	ands	r2, r1
 8005362:	0092      	lsls	r2, r2, #2
 8005364:	4093      	lsls	r3, r2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800536c:	4935      	ldr	r1, [pc, #212]	; (8005444 <HAL_GPIO_Init+0x2d8>)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	089b      	lsrs	r3, r3, #2
 8005372:	3302      	adds	r3, #2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	43da      	mvns	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	4013      	ands	r3, r2
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80053a4:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	43da      	mvns	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4013      	ands	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	4013      	ands	r3, r2
 80053be:	d003      	beq.n	80053c8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053c8:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ce:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	43da      	mvns	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4013      	ands	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	035b      	lsls	r3, r3, #13
 80053e6:	4013      	ands	r3, r2
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053f2:	4b19      	ldr	r3, [pc, #100]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	43da      	mvns	r2, r3
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	039b      	lsls	r3, r3, #14
 8005410:	4013      	ands	r3, r2
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <HAL_GPIO_Init+0x2ec>)
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	40da      	lsrs	r2, r3
 8005430:	1e13      	subs	r3, r2, #0
 8005432:	d000      	beq.n	8005436 <HAL_GPIO_Init+0x2ca>
 8005434:	e6a2      	b.n	800517c <HAL_GPIO_Init+0x10>
  } 
}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b006      	add	sp, #24
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000
 8005444:	40010000 	.word	0x40010000
 8005448:	48000400 	.word	0x48000400
 800544c:	48000800 	.word	0x48000800
 8005450:	48000c00 	.word	0x48000c00
 8005454:	48001000 	.word	0x48001000
 8005458:	40010400 	.word	0x40010400

0800545c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	000a      	movs	r2, r1
 8005466:	1cbb      	adds	r3, r7, #2
 8005468:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	1cba      	adds	r2, r7, #2
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	4013      	ands	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005476:	230f      	movs	r3, #15
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e003      	b.n	8005488 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005480:	230f      	movs	r3, #15
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005488:	230f      	movs	r3, #15
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	781b      	ldrb	r3, [r3, #0]
  }
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	0008      	movs	r0, r1
 80054a0:	0011      	movs	r1, r2
 80054a2:	1cbb      	adds	r3, r7, #2
 80054a4:	1c02      	adds	r2, r0, #0
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	1c7b      	adds	r3, r7, #1
 80054aa:	1c0a      	adds	r2, r1, #0
 80054ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054ae:	1c7b      	adds	r3, r7, #1
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054b6:	1cbb      	adds	r3, r7, #2
 80054b8:	881a      	ldrh	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054be:	e003      	b.n	80054c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054c0:	1cbb      	adds	r3, r7, #2
 80054c2:	881a      	ldrh	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	0002      	movs	r2, r0
 80054d8:	1dbb      	adds	r3, r7, #6
 80054da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	1dba      	adds	r2, r7, #6
 80054e2:	8812      	ldrh	r2, [r2, #0]
 80054e4:	4013      	ands	r3, r2
 80054e6:	d008      	beq.n	80054fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054ea:	1dba      	adds	r2, r7, #6
 80054ec:	8812      	ldrh	r2, [r2, #0]
 80054ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054f0:	1dbb      	adds	r3, r7, #6
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7fd fdad 	bl	8003054 <HAL_GPIO_EXTI_Callback>
  }
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b002      	add	sp, #8
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	40010400 	.word	0x40010400

08005508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e082      	b.n	8005620 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2241      	movs	r2, #65	; 0x41
 800551e:	5c9b      	ldrb	r3, [r3, r2]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2240      	movs	r2, #64	; 0x40
 800552a:	2100      	movs	r1, #0
 800552c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0018      	movs	r0, r3
 8005532:	f7fe fcd5 	bl	8003ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2241      	movs	r2, #65	; 0x41
 800553a:	2124      	movs	r1, #36	; 0x24
 800553c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2101      	movs	r1, #1
 800554a:	438a      	bics	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4934      	ldr	r1, [pc, #208]	; (8005628 <HAL_I2C_Init+0x120>)
 8005558:	400a      	ands	r2, r1
 800555a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4931      	ldr	r1, [pc, #196]	; (800562c <HAL_I2C_Init+0x124>)
 8005568:	400a      	ands	r2, r1
 800556a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d108      	bne.n	8005586 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	0209      	lsls	r1, r1, #8
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	e007      	b.n	8005596 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2184      	movs	r1, #132	; 0x84
 8005590:	0209      	lsls	r1, r1, #8
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d104      	bne.n	80055a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2280      	movs	r2, #128	; 0x80
 80055a4:	0112      	lsls	r2, r2, #4
 80055a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	491f      	ldr	r1, [pc, #124]	; (8005630 <HAL_I2C_Init+0x128>)
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	491a      	ldr	r1, [pc, #104]	; (800562c <HAL_I2C_Init+0x124>)
 80055c4:	400a      	ands	r2, r1
 80055c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69d9      	ldr	r1, [r3, #28]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2101      	movs	r1, #1
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2241      	movs	r2, #65	; 0x41
 800560c:	2120      	movs	r1, #32
 800560e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2242      	movs	r2, #66	; 0x42
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	0018      	movs	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	b002      	add	sp, #8
 8005626:	bd80      	pop	{r7, pc}
 8005628:	f0ffffff 	.word	0xf0ffffff
 800562c:	ffff7fff 	.word	0xffff7fff
 8005630:	02008000 	.word	0x02008000

08005634 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	0008      	movs	r0, r1
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	0019      	movs	r1, r3
 8005642:	230a      	movs	r3, #10
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	1c02      	adds	r2, r0, #0
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	2308      	movs	r3, #8
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	1c0a      	adds	r2, r1, #0
 8005650:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2241      	movs	r2, #65	; 0x41
 8005656:	5c9b      	ldrb	r3, [r3, r2]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b20      	cmp	r3, #32
 800565c:	d15b      	bne.n	8005716 <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	401a      	ands	r2, r3
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	429a      	cmp	r2, r3
 8005670:	d101      	bne.n	8005676 <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
 8005674:	e050      	b.n	8005718 <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2240      	movs	r2, #64	; 0x40
 800567a:	5c9b      	ldrb	r3, [r3, r2]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_I2C_Master_Receive_IT+0x50>
 8005680:	2302      	movs	r3, #2
 8005682:	e049      	b.n	8005718 <HAL_I2C_Master_Receive_IT+0xe4>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	2101      	movs	r1, #1
 800568a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2241      	movs	r2, #65	; 0x41
 8005690:	2122      	movs	r1, #34	; 0x22
 8005692:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2242      	movs	r2, #66	; 0x42
 8005698:	2110      	movs	r1, #16
 800569a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2208      	movs	r2, #8
 80056ac:	18ba      	adds	r2, r7, r2
 80056ae:	8812      	ldrh	r2, [r2, #0]
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_I2C_Master_Receive_IT+0xec>)
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <HAL_I2C_Master_Receive_IT+0xf0>)
 80056bc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2bff      	cmp	r3, #255	; 0xff
 80056c6:	d906      	bls.n	80056d6 <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	22ff      	movs	r2, #255	; 0xff
 80056cc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	045b      	lsls	r3, r3, #17
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e007      	b.n	80056e6 <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	049b      	lsls	r3, r3, #18
 80056e4:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	697c      	ldr	r4, [r7, #20]
 80056ee:	230a      	movs	r3, #10
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	8819      	ldrh	r1, [r3, #0]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_I2C_Master_Receive_IT+0xf4>)
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	0023      	movs	r3, r4
 80056fc:	f001 f9a6 	bl	8006a4c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2240      	movs	r2, #64	; 0x40
 8005704:	2100      	movs	r1, #0
 8005706:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2102      	movs	r1, #2
 800570c:	0018      	movs	r0, r3
 800570e:	f001 f9d3 	bl	8006ab8 <I2C_Enable_IRQ>

    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	b007      	add	sp, #28
 800571e:	bd90      	pop	{r4, r7, pc}
 8005720:	ffff0000 	.word	0xffff0000
 8005724:	080057cd 	.word	0x080057cd
 8005728:	80002400 	.word	0x80002400

0800572c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005734:	46c0      	nop			; (mov r8, r8)
 8005736:	46bd      	mov	sp, r7
 8005738:	b002      	add	sp, #8
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005744:	46c0      	nop			; (mov r8, r8)
 8005746:	46bd      	mov	sp, r7
 8005748:	b002      	add	sp, #8
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	0008      	movs	r0, r1
 8005766:	0011      	movs	r1, r2
 8005768:	1cfb      	adds	r3, r7, #3
 800576a:	1c02      	adds	r2, r0, #0
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	003b      	movs	r3, r7
 8005770:	1c0a      	adds	r2, r1, #0
 8005772:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005774:	46c0      	nop			; (mov r8, r8)
 8005776:	46bd      	mov	sp, r7
 8005778:	b002      	add	sp, #8
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b002      	add	sp, #8
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80057a4:	46c0      	nop			; (mov r8, r8)
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b002      	add	sp, #8
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b002      	add	sp, #8
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b002      	add	sp, #8
 80057ca:	bd80      	pop	{r7, pc}

080057cc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b089      	sub	sp, #36	; 0x24
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2240      	movs	r2, #64	; 0x40
 80057e0:	5c9b      	ldrb	r3, [r3, r2]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <I2C_Master_ISR_IT+0x1e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e12b      	b.n	8005a42 <I2C_Master_ISR_IT+0x276>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2240      	movs	r2, #64	; 0x40
 80057ee:	2101      	movs	r1, #1
 80057f0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	001a      	movs	r2, r3
 80057f8:	2301      	movs	r3, #1
 80057fa:	4013      	ands	r3, r2
 80057fc:	d014      	beq.n	8005828 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	001a      	movs	r2, r3
 8005804:	2301      	movs	r3, #1
 8005806:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005808:	d00e      	beq.n	8005828 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2210      	movs	r2, #16
 8005810:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	2204      	movs	r2, #4
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	0018      	movs	r0, r3
 8005822:	f001 f8d2 	bl	80069ca <I2C_Flush_TXDR>
 8005826:	e0f5      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	001a      	movs	r2, r3
 800582e:	2301      	movs	r3, #1
 8005830:	4013      	ands	r3, r2
 8005832:	d023      	beq.n	800587c <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	089b      	lsrs	r3, r3, #2
 8005838:	001a      	movs	r2, r3
 800583a:	2301      	movs	r3, #1
 800583c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800583e:	d01d      	beq.n	800587c <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2204      	movs	r2, #4
 8005844:	4393      	bics	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	855a      	strh	r2, [r3, #42]	; 0x2a
 800587a:	e0cb      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	001a      	movs	r2, r3
 8005882:	2301      	movs	r3, #1
 8005884:	4013      	ands	r3, r2
 8005886:	d01e      	beq.n	80058c6 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	001a      	movs	r2, r3
 800588e:	2301      	movs	r3, #1
 8005890:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005892:	d018      	beq.n	80058c6 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058c4:	e0a6      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	001a      	movs	r2, r3
 80058cc:	2301      	movs	r3, #1
 80058ce:	4013      	ands	r3, r2
 80058d0:	d100      	bne.n	80058d4 <I2C_Master_ISR_IT+0x108>
 80058d2:	e06b      	b.n	80059ac <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	099b      	lsrs	r3, r3, #6
 80058d8:	001a      	movs	r2, r3
 80058da:	2301      	movs	r3, #1
 80058dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80058de:	d065      	beq.n	80059ac <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d04a      	beq.n	8005980 <I2C_Master_ISR_IT+0x1b4>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d146      	bne.n	8005980 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	2112      	movs	r1, #18
 80058fc:	187b      	adds	r3, r7, r1
 80058fe:	0592      	lsls	r2, r2, #22
 8005900:	0d92      	lsrs	r2, r2, #22
 8005902:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2bff      	cmp	r3, #255	; 0xff
 800590c:	d910      	bls.n	8005930 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	22ff      	movs	r2, #255	; 0xff
 8005912:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005918:	b2da      	uxtb	r2, r3
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	045c      	lsls	r4, r3, #17
 800591e:	187b      	adds	r3, r7, r1
 8005920:	8819      	ldrh	r1, [r3, #0]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	0023      	movs	r3, r4
 800592a:	f001 f88f 	bl	8006a4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800592e:	e03c      	b.n	80059aa <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	4a43      	ldr	r2, [pc, #268]	; (8005a4c <I2C_Master_ISR_IT+0x280>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005948:	b2da      	uxtb	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800594e:	2312      	movs	r3, #18
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	8819      	ldrh	r1, [r3, #0]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	2300      	movs	r3, #0
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	0023      	movs	r3, r4
 800595c:	f001 f876 	bl	8006a4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005960:	e023      	b.n	80059aa <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	b2da      	uxtb	r2, r3
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	049c      	lsls	r4, r3, #18
 800596c:	2312      	movs	r3, #18
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	8819      	ldrh	r1, [r3, #0]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	2300      	movs	r3, #0
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	0023      	movs	r3, r4
 800597a:	f001 f867 	bl	8006a4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800597e:	e014      	b.n	80059aa <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	049b      	lsls	r3, r3, #18
 800598a:	401a      	ands	r2, r3
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	049b      	lsls	r3, r3, #18
 8005990:	429a      	cmp	r2, r3
 8005992:	d004      	beq.n	800599e <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	0018      	movs	r0, r3
 8005998:	f000 fc14 	bl	80061c4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800599c:	e03a      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2140      	movs	r1, #64	; 0x40
 80059a2:	0018      	movs	r0, r3
 80059a4:	f000 ff06 	bl	80067b4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059a8:	e034      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
 80059aa:	e033      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	001a      	movs	r2, r3
 80059b2:	2301      	movs	r3, #1
 80059b4:	4013      	ands	r3, r2
 80059b6:	d02d      	beq.n	8005a14 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	099b      	lsrs	r3, r3, #6
 80059bc:	001a      	movs	r2, r3
 80059be:	2301      	movs	r3, #1
 80059c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80059c2:	d027      	beq.n	8005a14 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11d      	bne.n	8005a0a <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	049b      	lsls	r3, r3, #18
 80059d8:	401a      	ands	r2, r3
 80059da:	2380      	movs	r3, #128	; 0x80
 80059dc:	049b      	lsls	r3, r3, #18
 80059de:	429a      	cmp	r2, r3
 80059e0:	d018      	beq.n	8005a14 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <I2C_Master_ISR_IT+0x280>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d109      	bne.n	8005a00 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	01c9      	lsls	r1, r1, #7
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	e009      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 fbde 	bl	80061c4 <I2C_ITMasterSeqCplt>
 8005a08:	e004      	b.n	8005a14 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2140      	movs	r1, #64	; 0x40
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 fed0 	bl	80067b4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	001a      	movs	r2, r3
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	001a      	movs	r2, r3
 8005a26:	2301      	movs	r3, #1
 8005a28:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a2a:	d005      	beq.n	8005a38 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	0011      	movs	r1, r2
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 fc6e 	bl	8006314 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2240      	movs	r2, #64	; 0x40
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b007      	add	sp, #28
 8005a48:	bd90      	pop	{r4, r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	ffff0000 	.word	0xffff0000

08005a50 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2240      	movs	r2, #64	; 0x40
 8005a6a:	5c9b      	ldrb	r3, [r3, r2]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <I2C_Slave_ISR_IT+0x24>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e0fa      	b.n	8005c6a <I2C_Slave_ISR_IT+0x21a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2240      	movs	r2, #64	; 0x40
 8005a78:	2101      	movs	r1, #1
 8005a7a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	001a      	movs	r2, r3
 8005a82:	2301      	movs	r3, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	001a      	movs	r2, r3
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a92:	d005      	beq.n	8005aa0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	0011      	movs	r1, r2
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f000 fd0c 	bl	80064b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	001a      	movs	r2, r3
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d054      	beq.n	8005b56 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	001a      	movs	r2, r3
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ab6:	d04e      	beq.n	8005b56 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d12d      	bne.n	8005b1e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2241      	movs	r2, #65	; 0x41
 8005ac6:	5c9b      	ldrb	r3, [r3, r2]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b28      	cmp	r3, #40	; 0x28
 8005acc:	d10b      	bne.n	8005ae6 <I2C_Slave_ISR_IT+0x96>
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	049b      	lsls	r3, r3, #18
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d106      	bne.n	8005ae6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	0011      	movs	r1, r2
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f000 fe0e 	bl	8006700 <I2C_ITListenCplt>
 8005ae4:	e036      	b.n	8005b54 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2241      	movs	r2, #65	; 0x41
 8005aea:	5c9b      	ldrb	r3, [r3, r2]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b29      	cmp	r3, #41	; 0x29
 8005af0:	d110      	bne.n	8005b14 <I2C_Slave_ISR_IT+0xc4>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4a5f      	ldr	r2, [pc, #380]	; (8005c74 <I2C_Slave_ISR_IT+0x224>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00c      	beq.n	8005b14 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2210      	movs	r2, #16
 8005b00:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 ff60 	bl	80069ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f000 fb9b 	bl	8006248 <I2C_ITSlaveSeqCplt>
 8005b12:	e01f      	b.n	8005b54 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005b1c:	e09d      	b.n	8005c5a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2210      	movs	r2, #16
 8005b24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <I2C_Slave_ISR_IT+0xf4>
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	045b      	lsls	r3, r3, #17
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d000      	beq.n	8005b44 <I2C_Slave_ISR_IT+0xf4>
 8005b42:	e08a      	b.n	8005c5a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	0011      	movs	r1, r2
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f000 fe31 	bl	80067b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b52:	e082      	b.n	8005c5a <I2C_Slave_ISR_IT+0x20a>
 8005b54:	e081      	b.n	8005c5a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	089b      	lsrs	r3, r3, #2
 8005b5a:	001a      	movs	r2, r3
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d031      	beq.n	8005bc6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	001a      	movs	r2, r3
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b6c:	d02b      	beq.n	8005bc6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d018      	beq.n	8005baa <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d154      	bne.n	8005c5e <I2C_Slave_ISR_IT+0x20e>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <I2C_Slave_ISR_IT+0x224>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d050      	beq.n	8005c5e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 fb42 	bl	8006248 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005bc4:	e04b      	b.n	8005c5e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	08db      	lsrs	r3, r3, #3
 8005bca:	001a      	movs	r2, r3
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d00c      	beq.n	8005bec <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	08db      	lsrs	r3, r3, #3
 8005bd6:	001a      	movs	r2, r3
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bdc:	d006      	beq.n	8005bec <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	0011      	movs	r1, r2
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 fa49 	bl	800607c <I2C_ITAddrCplt>
 8005bea:	e039      	b.n	8005c60 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	001a      	movs	r2, r3
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d033      	beq.n	8005c60 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	001a      	movs	r2, r3
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c02:	d02d      	beq.n	8005c60 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d018      	beq.n	8005c40 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005c3e:	e00f      	b.n	8005c60 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	045b      	lsls	r3, r3, #17
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d002      	beq.n	8005c50 <I2C_Slave_ISR_IT+0x200>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 faf8 	bl	8006248 <I2C_ITSlaveSeqCplt>
 8005c58:	e002      	b.n	8005c60 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	e000      	b.n	8005c60 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8005c5e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2240      	movs	r2, #64	; 0x40
 8005c64:	2100      	movs	r1, #0
 8005c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b006      	add	sp, #24
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	ffff0000 	.word	0xffff0000

08005c78 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	5c9b      	ldrb	r3, [r3, r2]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <I2C_Master_ISR_DMA+0x1a>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e0f7      	b.n	8005e82 <I2C_Master_ISR_DMA+0x20a>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2240      	movs	r2, #64	; 0x40
 8005c96:	2101      	movs	r1, #1
 8005c98:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	001a      	movs	r2, r3
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d019      	beq.n	8005cda <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	001a      	movs	r2, r3
 8005cac:	2301      	movs	r3, #1
 8005cae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005cb0:	d013      	beq.n	8005cda <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2210      	movs	r2, #16
 8005cb8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2120      	movs	r1, #32
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 fef4 	bl	8006ab8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 fe79 	bl	80069ca <I2C_Flush_TXDR>
 8005cd8:	e0ce      	b.n	8005e78 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	09db      	lsrs	r3, r3, #7
 8005cde:	001a      	movs	r2, r3
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d100      	bne.n	8005ce8 <I2C_Master_ISR_DMA+0x70>
 8005ce6:	e07e      	b.n	8005de6 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	099b      	lsrs	r3, r3, #6
 8005cec:	001a      	movs	r2, r3
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005cf2:	d100      	bne.n	8005cf6 <I2C_Master_ISR_DMA+0x7e>
 8005cf4:	e077      	b.n	8005de6 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2140      	movs	r1, #64	; 0x40
 8005d02:	438a      	bics	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d055      	beq.n	8005dbc <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	2312      	movs	r3, #18
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	0592      	lsls	r2, r2, #22
 8005d1e:	0d92      	lsrs	r2, r2, #22
 8005d20:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2bff      	cmp	r3, #255	; 0xff
 8005d2a:	d906      	bls.n	8005d3a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	22ff      	movs	r2, #255	; 0xff
 8005d30:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	045b      	lsls	r3, r3, #17
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e010      	b.n	8005d5c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a50      	ldr	r2, [pc, #320]	; (8005e8c <I2C_Master_ISR_DMA+0x214>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e002      	b.n	8005d5c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	049b      	lsls	r3, r3, #18
 8005d5a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	697c      	ldr	r4, [r7, #20]
 8005d64:	2312      	movs	r3, #18
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	8819      	ldrh	r1, [r3, #0]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	0023      	movs	r3, r4
 8005d72:	f000 fe6b 	bl	8006a4c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2241      	movs	r2, #65	; 0x41
 8005d8c:	5c9b      	ldrb	r3, [r3, r2]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b22      	cmp	r3, #34	; 0x22
 8005d92:	d109      	bne.n	8005da8 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	0209      	lsls	r1, r1, #8
 8005da2:	430a      	orrs	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005da6:	e067      	b.n	8005e78 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	01c9      	lsls	r1, r1, #7
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005dba:	e05d      	b.n	8005e78 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	049b      	lsls	r3, r3, #18
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	049b      	lsls	r3, r3, #18
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d004      	beq.n	8005dda <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f000 f9f6 	bl	80061c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005dd8:	e04e      	b.n	8005e78 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2140      	movs	r1, #64	; 0x40
 8005dde:	0018      	movs	r0, r3
 8005de0:	f000 fce8 	bl	80067b4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005de4:	e048      	b.n	8005e78 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	099b      	lsrs	r3, r3, #6
 8005dea:	001a      	movs	r2, r3
 8005dec:	2301      	movs	r3, #1
 8005dee:	4013      	ands	r3, r2
 8005df0:	d02e      	beq.n	8005e50 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	099b      	lsrs	r3, r3, #6
 8005df6:	001a      	movs	r2, r3
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005dfc:	d028      	beq.n	8005e50 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11d      	bne.n	8005e44 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	049b      	lsls	r3, r3, #18
 8005e12:	401a      	ands	r2, r3
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	049b      	lsls	r3, r3, #18
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d02c      	beq.n	8005e76 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	4a1a      	ldr	r2, [pc, #104]	; (8005e8c <I2C_Master_ISR_DMA+0x214>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d109      	bne.n	8005e3a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	01c9      	lsls	r1, r1, #7
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005e38:	e01d      	b.n	8005e76 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 f9c1 	bl	80061c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005e42:	e018      	b.n	8005e76 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2140      	movs	r1, #64	; 0x40
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f000 fcb3 	bl	80067b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005e4e:	e012      	b.n	8005e76 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	001a      	movs	r2, r3
 8005e56:	2301      	movs	r3, #1
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d00d      	beq.n	8005e78 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	001a      	movs	r2, r3
 8005e62:	2301      	movs	r3, #1
 8005e64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e66:	d007      	beq.n	8005e78 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	0011      	movs	r1, r2
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f000 fa50 	bl	8006314 <I2C_ITMasterCplt>
 8005e74:	e000      	b.n	8005e78 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8005e76:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2240      	movs	r2, #64	; 0x40
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b007      	add	sp, #28
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	ffff0000 	.word	0xffff0000

08005e90 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2240      	movs	r2, #64	; 0x40
 8005eaa:	5c9b      	ldrb	r3, [r3, r2]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <I2C_Slave_ISR_DMA+0x24>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e0dd      	b.n	8006070 <I2C_Slave_ISR_DMA+0x1e0>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2240      	movs	r2, #64	; 0x40
 8005eb8:	2101      	movs	r1, #1
 8005eba:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	001a      	movs	r2, r3
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	001a      	movs	r2, r3
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ed2:	d005      	beq.n	8005ee0 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	0011      	movs	r1, r2
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 faec 	bl	80064b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d100      	bne.n	8005eee <I2C_Slave_ISR_DMA+0x5e>
 8005eec:	e0a9      	b.n	8006042 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	001a      	movs	r2, r3
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ef8:	d100      	bne.n	8005efc <I2C_Slave_ISR_DMA+0x6c>
 8005efa:	e0a2      	b.n	8006042 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0b9b      	lsrs	r3, r3, #14
 8005f00:	001a      	movs	r2, r3
 8005f02:	2301      	movs	r3, #1
 8005f04:	4013      	ands	r3, r2
 8005f06:	d106      	bne.n	8005f16 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0bdb      	lsrs	r3, r3, #15
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005f12:	d100      	bne.n	8005f16 <I2C_Slave_ISR_DMA+0x86>
 8005f14:	e08e      	b.n	8006034 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0bdb      	lsrs	r3, r3, #15
 8005f22:	001a      	movs	r2, r3
 8005f24:	2301      	movs	r3, #1
 8005f26:	4013      	ands	r3, r2
 8005f28:	d007      	beq.n	8005f3a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8005f36:	2301      	movs	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	0b9b      	lsrs	r3, r3, #14
 8005f46:	001a      	movs	r2, r3
 8005f48:	2301      	movs	r3, #1
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d12d      	bne.n	8005fc0 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2241      	movs	r2, #65	; 0x41
 8005f68:	5c9b      	ldrb	r3, [r3, r2]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b28      	cmp	r3, #40	; 0x28
 8005f6e:	d10b      	bne.n	8005f88 <I2C_Slave_ISR_DMA+0xf8>
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	049b      	lsls	r3, r3, #18
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d106      	bne.n	8005f88 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	0011      	movs	r1, r2
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 fbbd 	bl	8006700 <I2C_ITListenCplt>
 8005f86:	e054      	b.n	8006032 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2241      	movs	r2, #65	; 0x41
 8005f8c:	5c9b      	ldrb	r3, [r3, r2]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b29      	cmp	r3, #41	; 0x29
 8005f92:	d110      	bne.n	8005fb6 <I2C_Slave_ISR_DMA+0x126>
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	4a38      	ldr	r2, [pc, #224]	; (8006078 <I2C_Slave_ISR_DMA+0x1e8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00c      	beq.n	8005fb6 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 fd0f 	bl	80069ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f000 f94a 	bl	8006248 <I2C_ITSlaveSeqCplt>
 8005fb4:	e03d      	b.n	8006032 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2210      	movs	r2, #16
 8005fbc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005fbe:	e03e      	b.n	800603e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	2204      	movs	r2, #4
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005fd4:	2317      	movs	r3, #23
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	2141      	movs	r1, #65	; 0x41
 8005fdc:	5c52      	ldrb	r2, [r2, r1]
 8005fde:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <I2C_Slave_ISR_DMA+0x160>
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	045b      	lsls	r3, r3, #17
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d126      	bne.n	800603e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ff0:	2217      	movs	r2, #23
 8005ff2:	18bb      	adds	r3, r7, r2
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b21      	cmp	r3, #33	; 0x21
 8005ff8:	d003      	beq.n	8006002 <I2C_Slave_ISR_DMA+0x172>
 8005ffa:	18bb      	adds	r3, r7, r2
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b29      	cmp	r3, #41	; 0x29
 8006000:	d103      	bne.n	800600a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2221      	movs	r2, #33	; 0x21
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
 8006008:	e00b      	b.n	8006022 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800600a:	2217      	movs	r2, #23
 800600c:	18bb      	adds	r3, r7, r2
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b22      	cmp	r3, #34	; 0x22
 8006012:	d003      	beq.n	800601c <I2C_Slave_ISR_DMA+0x18c>
 8006014:	18bb      	adds	r3, r7, r2
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b2a      	cmp	r3, #42	; 0x2a
 800601a:	d102      	bne.n	8006022 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2222      	movs	r2, #34	; 0x22
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	0011      	movs	r1, r2
 800602a:	0018      	movs	r0, r3
 800602c:	f000 fbc2 	bl	80067b4 <I2C_ITError>
      if (treatdmanack == 1U)
 8006030:	e005      	b.n	800603e <I2C_Slave_ISR_DMA+0x1ae>
 8006032:	e004      	b.n	800603e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2210      	movs	r2, #16
 800603a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800603c:	e013      	b.n	8006066 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800603e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006040:	e011      	b.n	8006066 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	001a      	movs	r2, r3
 8006048:	2301      	movs	r3, #1
 800604a:	4013      	ands	r3, r2
 800604c:	d00b      	beq.n	8006066 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	08db      	lsrs	r3, r3, #3
 8006052:	001a      	movs	r2, r3
 8006054:	2301      	movs	r3, #1
 8006056:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006058:	d005      	beq.n	8006066 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	0011      	movs	r1, r2
 8006060:	0018      	movs	r0, r3
 8006062:	f000 f80b 	bl	800607c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2240      	movs	r2, #64	; 0x40
 800606a:	2100      	movs	r1, #0
 800606c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b008      	add	sp, #32
 8006076:	bd80      	pop	{r7, pc}
 8006078:	ffff0000 	.word	0xffff0000

0800607c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800607c:	b5b0      	push	{r4, r5, r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2241      	movs	r2, #65	; 0x41
 800608a:	5c9b      	ldrb	r3, [r3, r2]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	001a      	movs	r2, r3
 8006090:	2328      	movs	r3, #40	; 0x28
 8006092:	4013      	ands	r3, r2
 8006094:	2b28      	cmp	r3, #40	; 0x28
 8006096:	d000      	beq.n	800609a <I2C_ITAddrCplt+0x1e>
 8006098:	e088      	b.n	80061ac <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	250f      	movs	r5, #15
 80060a6:	197b      	adds	r3, r7, r5
 80060a8:	2101      	movs	r1, #1
 80060aa:	400a      	ands	r2, r1
 80060ac:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	0c1b      	lsrs	r3, r3, #16
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	200c      	movs	r0, #12
 80060ba:	183b      	adds	r3, r7, r0
 80060bc:	21fe      	movs	r1, #254	; 0xfe
 80060be:	400a      	ands	r2, r1
 80060c0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	240a      	movs	r4, #10
 80060cc:	193b      	adds	r3, r7, r4
 80060ce:	0592      	lsls	r2, r2, #22
 80060d0:	0d92      	lsrs	r2, r2, #22
 80060d2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	2308      	movs	r3, #8
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	21fe      	movs	r1, #254	; 0xfe
 80060e2:	400a      	ands	r2, r1
 80060e4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d148      	bne.n	8006180 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80060ee:	0021      	movs	r1, r4
 80060f0:	187b      	adds	r3, r7, r1
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	09db      	lsrs	r3, r3, #7
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	183b      	adds	r3, r7, r0
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	4053      	eors	r3, r2
 80060fe:	b29b      	uxth	r3, r3
 8006100:	001a      	movs	r2, r3
 8006102:	2306      	movs	r3, #6
 8006104:	4013      	ands	r3, r2
 8006106:	d120      	bne.n	800614a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006108:	183b      	adds	r3, r7, r0
 800610a:	187a      	adds	r2, r7, r1
 800610c:	8812      	ldrh	r2, [r2, #0]
 800610e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611e:	2b02      	cmp	r3, #2
 8006120:	d14c      	bne.n	80061bc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2240      	movs	r2, #64	; 0x40
 8006134:	2100      	movs	r1, #0
 8006136:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006138:	183b      	adds	r3, r7, r0
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	197b      	adds	r3, r7, r5
 800613e:	7819      	ldrb	r1, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	0018      	movs	r0, r3
 8006144:	f7ff fb0a 	bl	800575c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006148:	e038      	b.n	80061bc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800614a:	240c      	movs	r4, #12
 800614c:	193b      	adds	r3, r7, r4
 800614e:	2208      	movs	r2, #8
 8006150:	18ba      	adds	r2, r7, r2
 8006152:	8812      	ldrh	r2, [r2, #0]
 8006154:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	021a      	lsls	r2, r3, #8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	0011      	movs	r1, r2
 800615e:	0018      	movs	r0, r3
 8006160:	f000 fd12 	bl	8006b88 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	2100      	movs	r1, #0
 800616a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800616c:	193b      	adds	r3, r7, r4
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	230f      	movs	r3, #15
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	7819      	ldrb	r1, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0018      	movs	r0, r3
 800617a:	f7ff faef 	bl	800575c <HAL_I2C_AddrCallback>
}
 800617e:	e01d      	b.n	80061bc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	0011      	movs	r1, r2
 8006188:	0018      	movs	r0, r3
 800618a:	f000 fcfd 	bl	8006b88 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2240      	movs	r2, #64	; 0x40
 8006192:	2100      	movs	r1, #0
 8006194:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006196:	230c      	movs	r3, #12
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	230f      	movs	r3, #15
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	7819      	ldrb	r1, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7ff fad9 	bl	800575c <HAL_I2C_AddrCallback>
}
 80061aa:	e007      	b.n	80061bc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2208      	movs	r2, #8
 80061b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2240      	movs	r2, #64	; 0x40
 80061b8:	2100      	movs	r1, #0
 80061ba:	5499      	strb	r1, [r3, r2]
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b004      	add	sp, #16
 80061c2:	bdb0      	pop	{r4, r5, r7, pc}

080061c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2242      	movs	r2, #66	; 0x42
 80061d0:	2100      	movs	r1, #0
 80061d2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2241      	movs	r2, #65	; 0x41
 80061d8:	5c9b      	ldrb	r3, [r3, r2]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b21      	cmp	r3, #33	; 0x21
 80061de:	d117      	bne.n	8006210 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2241      	movs	r2, #65	; 0x41
 80061e4:	2120      	movs	r1, #32
 80061e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2211      	movs	r2, #17
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2101      	movs	r1, #1
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 fcc5 	bl	8006b88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	2100      	movs	r1, #0
 8006204:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0018      	movs	r0, r3
 800620a:	f7ff fa8f 	bl	800572c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800620e:	e016      	b.n	800623e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2241      	movs	r2, #65	; 0x41
 8006214:	2120      	movs	r1, #32
 8006216:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2212      	movs	r2, #18
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2102      	movs	r1, #2
 8006228:	0018      	movs	r0, r3
 800622a:	f000 fcad 	bl	8006b88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2240      	movs	r2, #64	; 0x40
 8006232:	2100      	movs	r1, #0
 8006234:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	0018      	movs	r0, r3
 800623a:	f7fc ff95 	bl	8003168 <HAL_I2C_MasterRxCpltCallback>
}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	46bd      	mov	sp, r7
 8006242:	b002      	add	sp, #8
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2242      	movs	r2, #66	; 0x42
 800625c:	2100      	movs	r1, #0
 800625e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	0b9b      	lsrs	r3, r3, #14
 8006264:	001a      	movs	r2, r3
 8006266:	2301      	movs	r3, #1
 8006268:	4013      	ands	r3, r2
 800626a:	d008      	beq.n	800627e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4925      	ldr	r1, [pc, #148]	; (800630c <I2C_ITSlaveSeqCplt+0xc4>)
 8006278:	400a      	ands	r2, r1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e00d      	b.n	800629a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	0bdb      	lsrs	r3, r3, #15
 8006282:	001a      	movs	r2, r3
 8006284:	2301      	movs	r3, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d007      	beq.n	800629a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	491e      	ldr	r1, [pc, #120]	; (8006310 <I2C_ITSlaveSeqCplt+0xc8>)
 8006296:	400a      	ands	r2, r1
 8006298:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2241      	movs	r2, #65	; 0x41
 800629e:	5c9b      	ldrb	r3, [r3, r2]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b29      	cmp	r3, #41	; 0x29
 80062a4:	d114      	bne.n	80062d0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2241      	movs	r2, #65	; 0x41
 80062aa:	2128      	movs	r1, #40	; 0x28
 80062ac:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2221      	movs	r2, #33	; 0x21
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2101      	movs	r1, #1
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 fc65 	bl	8006b88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2240      	movs	r2, #64	; 0x40
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7ff fa37 	bl	800573c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062ce:	e019      	b.n	8006304 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2241      	movs	r2, #65	; 0x41
 80062d4:	5c9b      	ldrb	r3, [r3, r2]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b2a      	cmp	r3, #42	; 0x2a
 80062da:	d113      	bne.n	8006304 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2241      	movs	r2, #65	; 0x41
 80062e0:	2128      	movs	r1, #40	; 0x28
 80062e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2222      	movs	r2, #34	; 0x22
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2102      	movs	r1, #2
 80062ee:	0018      	movs	r0, r3
 80062f0:	f000 fc4a 	bl	8006b88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2240      	movs	r2, #64	; 0x40
 80062f8:	2100      	movs	r1, #0
 80062fa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0018      	movs	r0, r3
 8006300:	f7ff fa24 	bl	800574c <HAL_I2C_SlaveRxCpltCallback>
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	b004      	add	sp, #16
 800630a:	bd80      	pop	{r7, pc}
 800630c:	ffffbfff 	.word	0xffffbfff
 8006310:	ffff7fff 	.word	0xffff7fff

08006314 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2220      	movs	r2, #32
 8006328:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2241      	movs	r2, #65	; 0x41
 800632e:	5c9b      	ldrb	r3, [r3, r2]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b21      	cmp	r3, #33	; 0x21
 8006334:	d108      	bne.n	8006348 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2101      	movs	r1, #1
 800633a:	0018      	movs	r0, r3
 800633c:	f000 fc24 	bl	8006b88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2211      	movs	r2, #17
 8006344:	631a      	str	r2, [r3, #48]	; 0x30
 8006346:	e00d      	b.n	8006364 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2241      	movs	r2, #65	; 0x41
 800634c:	5c9b      	ldrb	r3, [r3, r2]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b22      	cmp	r3, #34	; 0x22
 8006352:	d107      	bne.n	8006364 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2102      	movs	r1, #2
 8006358:	0018      	movs	r0, r3
 800635a:	f000 fc15 	bl	8006b88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2212      	movs	r2, #18
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4950      	ldr	r1, [pc, #320]	; (80064b0 <I2C_ITMasterCplt+0x19c>)
 8006370:	400a      	ands	r2, r1
 8006372:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a4d      	ldr	r2, [pc, #308]	; (80064b4 <I2C_ITMasterCplt+0x1a0>)
 800637e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	091b      	lsrs	r3, r3, #4
 8006384:	001a      	movs	r2, r3
 8006386:	2301      	movs	r3, #1
 8006388:	4013      	ands	r3, r2
 800638a:	d009      	beq.n	80063a0 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2210      	movs	r2, #16
 8006392:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006398:	2204      	movs	r2, #4
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2241      	movs	r2, #65	; 0x41
 80063a4:	5c9b      	ldrb	r3, [r3, r2]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b60      	cmp	r3, #96	; 0x60
 80063aa:	d10b      	bne.n	80063c4 <I2C_ITMasterCplt+0xb0>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	001a      	movs	r2, r3
 80063b2:	2301      	movs	r3, #1
 80063b4:	4013      	ands	r3, r2
 80063b6:	d005      	beq.n	80063c4 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80063c2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	0018      	movs	r0, r3
 80063c8:	f000 faff 	bl	80069ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2241      	movs	r2, #65	; 0x41
 80063d6:	5c9b      	ldrb	r3, [r3, r2]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b60      	cmp	r3, #96	; 0x60
 80063dc:	d002      	beq.n	80063e4 <I2C_ITMasterCplt+0xd0>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	0011      	movs	r1, r2
 80063ec:	0018      	movs	r0, r3
 80063ee:	f000 f9e1 	bl	80067b4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063f2:	e058      	b.n	80064a6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2241      	movs	r2, #65	; 0x41
 80063f8:	5c9b      	ldrb	r3, [r3, r2]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b21      	cmp	r3, #33	; 0x21
 80063fe:	d126      	bne.n	800644e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2241      	movs	r2, #65	; 0x41
 8006404:	2120      	movs	r1, #32
 8006406:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2242      	movs	r2, #66	; 0x42
 8006412:	5c9b      	ldrb	r3, [r3, r2]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d10c      	bne.n	8006434 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2242      	movs	r2, #66	; 0x42
 800641e:	2100      	movs	r1, #0
 8006420:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2240      	movs	r2, #64	; 0x40
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	0018      	movs	r0, r3
 800642e:	f7ff f9ad 	bl	800578c <HAL_I2C_MemTxCpltCallback>
}
 8006432:	e038      	b.n	80064a6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2242      	movs	r2, #66	; 0x42
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2240      	movs	r2, #64	; 0x40
 8006440:	2100      	movs	r1, #0
 8006442:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	0018      	movs	r0, r3
 8006448:	f7ff f970 	bl	800572c <HAL_I2C_MasterTxCpltCallback>
}
 800644c:	e02b      	b.n	80064a6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2241      	movs	r2, #65	; 0x41
 8006452:	5c9b      	ldrb	r3, [r3, r2]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b22      	cmp	r3, #34	; 0x22
 8006458:	d125      	bne.n	80064a6 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2241      	movs	r2, #65	; 0x41
 800645e:	2120      	movs	r1, #32
 8006460:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2242      	movs	r2, #66	; 0x42
 800646c:	5c9b      	ldrb	r3, [r3, r2]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d10c      	bne.n	800648e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2242      	movs	r2, #66	; 0x42
 8006478:	2100      	movs	r1, #0
 800647a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	2100      	movs	r1, #0
 8006482:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff f988 	bl	800579c <HAL_I2C_MemRxCpltCallback>
}
 800648c:	e00b      	b.n	80064a6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2242      	movs	r2, #66	; 0x42
 8006492:	2100      	movs	r1, #0
 8006494:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	2100      	movs	r1, #0
 800649c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7fc fe61 	bl	8003168 <HAL_I2C_MasterRxCpltCallback>
}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b006      	add	sp, #24
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	fe00e800 	.word	0xfe00e800
 80064b4:	ffff0000 	.word	0xffff0000

080064b8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80064ce:	200f      	movs	r0, #15
 80064d0:	183b      	adds	r3, r7, r0
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	2141      	movs	r1, #65	; 0x41
 80064d6:	5c52      	ldrb	r2, [r2, r1]
 80064d8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2220      	movs	r2, #32
 80064e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80064e2:	183b      	adds	r3, r7, r0
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b21      	cmp	r3, #33	; 0x21
 80064e8:	d003      	beq.n	80064f2 <I2C_ITSlaveCplt+0x3a>
 80064ea:	183b      	adds	r3, r7, r0
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b29      	cmp	r3, #41	; 0x29
 80064f0:	d109      	bne.n	8006506 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80064f2:	4a7d      	ldr	r2, [pc, #500]	; (80066e8 <I2C_ITSlaveCplt+0x230>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0011      	movs	r1, r2
 80064f8:	0018      	movs	r0, r3
 80064fa:	f000 fb45 	bl	8006b88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2221      	movs	r2, #33	; 0x21
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
 8006504:	e011      	b.n	800652a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006506:	220f      	movs	r2, #15
 8006508:	18bb      	adds	r3, r7, r2
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b22      	cmp	r3, #34	; 0x22
 800650e:	d003      	beq.n	8006518 <I2C_ITSlaveCplt+0x60>
 8006510:	18bb      	adds	r3, r7, r2
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b2a      	cmp	r3, #42	; 0x2a
 8006516:	d108      	bne.n	800652a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006518:	4a74      	ldr	r2, [pc, #464]	; (80066ec <I2C_ITSlaveCplt+0x234>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	0011      	movs	r1, r2
 800651e:	0018      	movs	r0, r3
 8006520:	f000 fb32 	bl	8006b88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2222      	movs	r2, #34	; 0x22
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2180      	movs	r1, #128	; 0x80
 8006536:	0209      	lsls	r1, r1, #8
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	496a      	ldr	r1, [pc, #424]	; (80066f0 <I2C_ITSlaveCplt+0x238>)
 8006548:	400a      	ands	r2, r1
 800654a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0018      	movs	r0, r3
 8006550:	f000 fa3b 	bl	80069ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	0b9b      	lsrs	r3, r3, #14
 8006558:	001a      	movs	r2, r3
 800655a:	2301      	movs	r3, #1
 800655c:	4013      	ands	r3, r2
 800655e:	d013      	beq.n	8006588 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4962      	ldr	r1, [pc, #392]	; (80066f4 <I2C_ITSlaveCplt+0x23c>)
 800656c:	400a      	ands	r2, r1
 800656e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006586:	e018      	b.n	80065ba <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	0bdb      	lsrs	r3, r3, #15
 800658c:	001a      	movs	r2, r3
 800658e:	2301      	movs	r3, #1
 8006590:	4013      	ands	r3, r2
 8006592:	d012      	beq.n	80065ba <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4956      	ldr	r1, [pc, #344]	; (80066f8 <I2C_ITSlaveCplt+0x240>)
 80065a0:	400a      	ands	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	089b      	lsrs	r3, r3, #2
 80065be:	001a      	movs	r2, r3
 80065c0:	2301      	movs	r3, #1
 80065c2:	4013      	ands	r3, r2
 80065c4:	d020      	beq.n	8006608 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2204      	movs	r2, #4
 80065ca:	4393      	bics	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006616:	2204      	movs	r2, #4
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2242      	movs	r2, #66	; 0x42
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f000 f8b9 	bl	80067b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2241      	movs	r2, #65	; 0x41
 8006646:	5c9b      	ldrb	r3, [r3, r2]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b28      	cmp	r3, #40	; 0x28
 800664c:	d147      	bne.n	80066de <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	0011      	movs	r1, r2
 8006654:	0018      	movs	r0, r3
 8006656:	f000 f853 	bl	8006700 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800665a:	e040      	b.n	80066de <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	4a26      	ldr	r2, [pc, #152]	; (80066fc <I2C_ITSlaveCplt+0x244>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d016      	beq.n	8006694 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	0018      	movs	r0, r3
 800666a:	f7ff fded 	bl	8006248 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a22      	ldr	r2, [pc, #136]	; (80066fc <I2C_ITSlaveCplt+0x244>)
 8006672:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2241      	movs	r2, #65	; 0x41
 8006678:	2120      	movs	r1, #32
 800667a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2240      	movs	r2, #64	; 0x40
 8006686:	2100      	movs	r1, #0
 8006688:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	0018      	movs	r0, r3
 800668e:	f7ff f875 	bl	800577c <HAL_I2C_ListenCpltCallback>
}
 8006692:	e024      	b.n	80066de <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2241      	movs	r2, #65	; 0x41
 8006698:	5c9b      	ldrb	r3, [r3, r2]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b22      	cmp	r3, #34	; 0x22
 800669e:	d10f      	bne.n	80066c0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2241      	movs	r2, #65	; 0x41
 80066a4:	2120      	movs	r1, #32
 80066a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2240      	movs	r2, #64	; 0x40
 80066b2:	2100      	movs	r1, #0
 80066b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7ff f847 	bl	800574c <HAL_I2C_SlaveRxCpltCallback>
}
 80066be:	e00e      	b.n	80066de <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2241      	movs	r2, #65	; 0x41
 80066c4:	2120      	movs	r1, #32
 80066c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2240      	movs	r2, #64	; 0x40
 80066d2:	2100      	movs	r1, #0
 80066d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0018      	movs	r0, r3
 80066da:	f7ff f82f 	bl	800573c <HAL_I2C_SlaveTxCpltCallback>
}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b006      	add	sp, #24
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	00008001 	.word	0x00008001
 80066ec:	00008002 	.word	0x00008002
 80066f0:	fe00e800 	.word	0xfe00e800
 80066f4:	ffffbfff 	.word	0xffffbfff
 80066f8:	ffff7fff 	.word	0xffff7fff
 80066fc:	ffff0000 	.word	0xffff0000

08006700 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a27      	ldr	r2, [pc, #156]	; (80067ac <I2C_ITListenCplt+0xac>)
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2241      	movs	r2, #65	; 0x41
 800671a:	2120      	movs	r1, #32
 800671c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2242      	movs	r2, #66	; 0x42
 8006722:	2100      	movs	r1, #0
 8006724:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	001a      	movs	r2, r3
 8006732:	2301      	movs	r3, #1
 8006734:	4013      	ands	r3, r2
 8006736:	d022      	beq.n	800677e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006754:	2b00      	cmp	r3, #0
 8006756:	d012      	beq.n	800677e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	2204      	movs	r2, #4
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800677e:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <I2C_ITListenCplt+0xb0>)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	0011      	movs	r1, r2
 8006784:	0018      	movs	r0, r3
 8006786:	f000 f9ff 	bl	8006b88 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2210      	movs	r2, #16
 8006790:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2240      	movs	r2, #64	; 0x40
 8006796:	2100      	movs	r1, #0
 8006798:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0018      	movs	r0, r3
 800679e:	f7fe ffed 	bl	800577c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b002      	add	sp, #8
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	ffff0000 	.word	0xffff0000
 80067b0:	00008003 	.word	0x00008003

080067b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80067be:	200f      	movs	r0, #15
 80067c0:	183b      	adds	r3, r7, r0
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	2141      	movs	r1, #65	; 0x41
 80067c6:	5c52      	ldrb	r2, [r2, r1]
 80067c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2242      	movs	r2, #66	; 0x42
 80067ce:	2100      	movs	r1, #0
 80067d0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a62      	ldr	r2, [pc, #392]	; (8006960 <I2C_ITError+0x1ac>)
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	431a      	orrs	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80067ea:	183b      	adds	r3, r7, r0
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b28      	cmp	r3, #40	; 0x28
 80067f0:	d007      	beq.n	8006802 <I2C_ITError+0x4e>
 80067f2:	183b      	adds	r3, r7, r0
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b29      	cmp	r3, #41	; 0x29
 80067f8:	d003      	beq.n	8006802 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80067fa:	183b      	adds	r3, r7, r0
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006800:	d10c      	bne.n	800681c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2103      	movs	r1, #3
 8006806:	0018      	movs	r0, r3
 8006808:	f000 f9be 	bl	8006b88 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2241      	movs	r2, #65	; 0x41
 8006810:	2128      	movs	r1, #40	; 0x28
 8006812:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a53      	ldr	r2, [pc, #332]	; (8006964 <I2C_ITError+0x1b0>)
 8006818:	635a      	str	r2, [r3, #52]	; 0x34
 800681a:	e012      	b.n	8006842 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800681c:	4a52      	ldr	r2, [pc, #328]	; (8006968 <I2C_ITError+0x1b4>)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0011      	movs	r1, r2
 8006822:	0018      	movs	r0, r3
 8006824:	f000 f9b0 	bl	8006b88 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2241      	movs	r2, #65	; 0x41
 800682c:	5c9b      	ldrb	r3, [r3, r2]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b60      	cmp	r3, #96	; 0x60
 8006832:	d003      	beq.n	800683c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2241      	movs	r2, #65	; 0x41
 8006838:	2120      	movs	r1, #32
 800683a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d03b      	beq.n	80068c8 <I2C_ITError+0x114>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b11      	cmp	r3, #17
 8006854:	d002      	beq.n	800685c <I2C_ITError+0xa8>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b21      	cmp	r3, #33	; 0x21
 800685a:	d135      	bne.n	80068c8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2380      	movs	r3, #128	; 0x80
 8006864:	01db      	lsls	r3, r3, #7
 8006866:	401a      	ands	r2, r3
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	01db      	lsls	r3, r3, #7
 800686c:	429a      	cmp	r2, r3
 800686e:	d107      	bne.n	8006880 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	493c      	ldr	r1, [pc, #240]	; (800696c <I2C_ITError+0x1b8>)
 800687c:	400a      	ands	r2, r1
 800687e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	0018      	movs	r0, r3
 8006886:	f7fe fbfe 	bl	8005086 <HAL_DMA_GetState>
 800688a:	0003      	movs	r3, r0
 800688c:	2b01      	cmp	r3, #1
 800688e:	d016      	beq.n	80068be <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	4a36      	ldr	r2, [pc, #216]	; (8006970 <I2C_ITError+0x1bc>)
 8006896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2240      	movs	r2, #64	; 0x40
 800689c:	2100      	movs	r1, #0
 800689e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7fe fb07 	bl	8004eb8 <HAL_DMA_Abort_IT>
 80068aa:	1e03      	subs	r3, r0, #0
 80068ac:	d051      	beq.n	8006952 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	0018      	movs	r0, r3
 80068ba:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068bc:	e049      	b.n	8006952 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0018      	movs	r0, r3
 80068c2:	f000 f859 	bl	8006978 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068c6:	e044      	b.n	8006952 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03b      	beq.n	8006948 <I2C_ITError+0x194>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b12      	cmp	r3, #18
 80068d4:	d002      	beq.n	80068dc <I2C_ITError+0x128>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b22      	cmp	r3, #34	; 0x22
 80068da:	d135      	bne.n	8006948 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	401a      	ands	r2, r3
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d107      	bne.n	8006900 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	491e      	ldr	r1, [pc, #120]	; (8006974 <I2C_ITError+0x1c0>)
 80068fc:	400a      	ands	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	0018      	movs	r0, r3
 8006906:	f7fe fbbe 	bl	8005086 <HAL_DMA_GetState>
 800690a:	0003      	movs	r3, r0
 800690c:	2b01      	cmp	r3, #1
 800690e:	d016      	beq.n	800693e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006914:	4a16      	ldr	r2, [pc, #88]	; (8006970 <I2C_ITError+0x1bc>)
 8006916:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	2100      	movs	r1, #0
 800691e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006924:	0018      	movs	r0, r3
 8006926:	f7fe fac7 	bl	8004eb8 <HAL_DMA_Abort_IT>
 800692a:	1e03      	subs	r3, r0, #0
 800692c:	d013      	beq.n	8006956 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	0018      	movs	r0, r3
 800693a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800693c:	e00b      	b.n	8006956 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0018      	movs	r0, r3
 8006942:	f000 f819 	bl	8006978 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006946:	e006      	b.n	8006956 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	0018      	movs	r0, r3
 800694c:	f000 f814 	bl	8006978 <I2C_TreatErrorCallback>
  }
}
 8006950:	e002      	b.n	8006958 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	e000      	b.n	8006958 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006956:	46c0      	nop			; (mov r8, r8)
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b004      	add	sp, #16
 800695e:	bd80      	pop	{r7, pc}
 8006960:	ffff0000 	.word	0xffff0000
 8006964:	08005a51 	.word	0x08005a51
 8006968:	00008003 	.word	0x00008003
 800696c:	ffffbfff 	.word	0xffffbfff
 8006970:	08006a0f 	.word	0x08006a0f
 8006974:	ffff7fff 	.word	0xffff7fff

08006978 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2241      	movs	r2, #65	; 0x41
 8006984:	5c9b      	ldrb	r3, [r3, r2]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b60      	cmp	r3, #96	; 0x60
 800698a:	d10f      	bne.n	80069ac <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2241      	movs	r2, #65	; 0x41
 8006990:	2120      	movs	r1, #32
 8006992:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2240      	movs	r2, #64	; 0x40
 800699e:	2100      	movs	r1, #0
 80069a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7fe ff09 	bl	80057bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069aa:	e00a      	b.n	80069c2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	2100      	movs	r1, #0
 80069b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0018      	movs	r0, r3
 80069be:	f7fe fef5 	bl	80057ac <HAL_I2C_ErrorCallback>
}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b002      	add	sp, #8
 80069c8:	bd80      	pop	{r7, pc}

080069ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	2202      	movs	r2, #2
 80069da:	4013      	ands	r3, r2
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d103      	bne.n	80069e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2200      	movs	r2, #0
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2201      	movs	r2, #1
 80069f0:	4013      	ands	r3, r2
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d007      	beq.n	8006a06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2101      	movs	r1, #1
 8006a02:	430a      	orrs	r2, r1
 8006a04:	619a      	str	r2, [r3, #24]
  }
}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b002      	add	sp, #8
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	2200      	movs	r2, #0
 8006a2a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a38:	2200      	movs	r2, #0
 8006a3a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7ff ff9a 	bl	8006978 <I2C_TreatErrorCallback>
}
 8006a44:	46c0      	nop			; (mov r8, r8)
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b004      	add	sp, #16
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a4c:	b590      	push	{r4, r7, lr}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	0008      	movs	r0, r1
 8006a56:	0011      	movs	r1, r2
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	240a      	movs	r4, #10
 8006a5c:	193b      	adds	r3, r7, r4
 8006a5e:	1c02      	adds	r2, r0, #0
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	2009      	movs	r0, #9
 8006a64:	183b      	adds	r3, r7, r0
 8006a66:	1c0a      	adds	r2, r1, #0
 8006a68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	6a3a      	ldr	r2, [r7, #32]
 8006a72:	0d51      	lsrs	r1, r2, #21
 8006a74:	2280      	movs	r2, #128	; 0x80
 8006a76:	00d2      	lsls	r2, r2, #3
 8006a78:	400a      	ands	r2, r1
 8006a7a:	490e      	ldr	r1, [pc, #56]	; (8006ab4 <I2C_TransferConfig+0x68>)
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	43d2      	mvns	r2, r2
 8006a80:	401a      	ands	r2, r3
 8006a82:	0011      	movs	r1, r2
 8006a84:	193b      	adds	r3, r7, r4
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	059b      	lsls	r3, r3, #22
 8006a8a:	0d9a      	lsrs	r2, r3, #22
 8006a8c:	183b      	adds	r3, r7, r0
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	0418      	lsls	r0, r3, #16
 8006a92:	23ff      	movs	r3, #255	; 0xff
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	4003      	ands	r3, r0
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b005      	add	sp, #20
 8006ab0:	bd90      	pop	{r4, r7, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	03ff63ff 	.word	0x03ff63ff

08006ab8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	000a      	movs	r2, r1
 8006ac2:	1cbb      	adds	r3, r7, #2
 8006ac4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ace:	4b2c      	ldr	r3, [pc, #176]	; (8006b80 <I2C_Enable_IRQ+0xc8>)
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d004      	beq.n	8006ade <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006ad8:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <I2C_Enable_IRQ+0xcc>)
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d121      	bne.n	8006b22 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ade:	1cbb      	adds	r3, r7, #2
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	5e9b      	ldrsh	r3, [r3, r2]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da03      	bge.n	8006af0 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	22b8      	movs	r2, #184	; 0xb8
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006af0:	1cbb      	adds	r3, r7, #2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d103      	bne.n	8006b00 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2290      	movs	r2, #144	; 0x90
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b00:	1cbb      	adds	r3, r7, #2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d103      	bne.n	8006b10 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2260      	movs	r2, #96	; 0x60
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b10:	1cbb      	adds	r3, r7, #2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d127      	bne.n	8006b68 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b20:	e022      	b.n	8006b68 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b22:	1cbb      	adds	r3, r7, #2
 8006b24:	2200      	movs	r2, #0
 8006b26:	5e9b      	ldrsh	r3, [r3, r2]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da03      	bge.n	8006b34 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	22b8      	movs	r2, #184	; 0xb8
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b34:	1cbb      	adds	r3, r7, #2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	22f2      	movs	r2, #242	; 0xf2
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b46:	1cbb      	adds	r3, r7, #2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	22f4      	movs	r2, #244	; 0xf4
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b58:	1cbb      	adds	r3, r7, #2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d103      	bne.n	8006b68 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]
}
 8006b78:	46c0      	nop			; (mov r8, r8)
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b004      	add	sp, #16
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08005c79 	.word	0x08005c79
 8006b84:	08005e91 	.word	0x08005e91

08006b88 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	000a      	movs	r2, r1
 8006b92:	1cbb      	adds	r3, r7, #2
 8006b94:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b9a:	1cbb      	adds	r3, r7, #2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d010      	beq.n	8006bc6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2242      	movs	r2, #66	; 0x42
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2241      	movs	r2, #65	; 0x41
 8006bb0:	5c9b      	ldrb	r3, [r3, r2]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	2328      	movs	r3, #40	; 0x28
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b28      	cmp	r3, #40	; 0x28
 8006bbc:	d003      	beq.n	8006bc6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	22b0      	movs	r2, #176	; 0xb0
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006bc6:	1cbb      	adds	r3, r7, #2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d010      	beq.n	8006bf2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2244      	movs	r2, #68	; 0x44
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2241      	movs	r2, #65	; 0x41
 8006bdc:	5c9b      	ldrb	r3, [r3, r2]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	001a      	movs	r2, r3
 8006be2:	2328      	movs	r3, #40	; 0x28
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b28      	cmp	r3, #40	; 0x28
 8006be8:	d003      	beq.n	8006bf2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	22b0      	movs	r2, #176	; 0xb0
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bf2:	1cbb      	adds	r3, r7, #2
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	5e9b      	ldrsh	r3, [r3, r2]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da03      	bge.n	8006c04 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	22b8      	movs	r2, #184	; 0xb8
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c04:	1cbb      	adds	r3, r7, #2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	d103      	bne.n	8006c14 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2290      	movs	r2, #144	; 0x90
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c14:	1cbb      	adds	r3, r7, #2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d103      	bne.n	8006c24 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c24:	1cbb      	adds	r3, r7, #2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d103      	bne.n	8006c34 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2240      	movs	r2, #64	; 0x40
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	43d9      	mvns	r1, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	400a      	ands	r2, r1
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b004      	add	sp, #16
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2241      	movs	r2, #65	; 0x41
 8006c5e:	5c9b      	ldrb	r3, [r3, r2]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d138      	bne.n	8006cd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2240      	movs	r2, #64	; 0x40
 8006c6a:	5c9b      	ldrb	r3, [r3, r2]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e032      	b.n	8006cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2240      	movs	r2, #64	; 0x40
 8006c78:	2101      	movs	r1, #1
 8006c7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2241      	movs	r2, #65	; 0x41
 8006c80:	2124      	movs	r1, #36	; 0x24
 8006c82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2101      	movs	r1, #1
 8006c90:	438a      	bics	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4911      	ldr	r1, [pc, #68]	; (8006ce4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006ca0:	400a      	ands	r2, r1
 8006ca2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2241      	movs	r2, #65	; 0x41
 8006cc8:	2120      	movs	r1, #32
 8006cca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2240      	movs	r2, #64	; 0x40
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e000      	b.n	8006cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cd8:	2302      	movs	r3, #2
  }
}
 8006cda:	0018      	movs	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b002      	add	sp, #8
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	ffffefff 	.word	0xffffefff

08006ce8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2241      	movs	r2, #65	; 0x41
 8006cf6:	5c9b      	ldrb	r3, [r3, r2]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d139      	bne.n	8006d72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2240      	movs	r2, #64	; 0x40
 8006d02:	5c9b      	ldrb	r3, [r3, r2]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e033      	b.n	8006d74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2240      	movs	r2, #64	; 0x40
 8006d10:	2101      	movs	r1, #1
 8006d12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2241      	movs	r2, #65	; 0x41
 8006d18:	2124      	movs	r1, #36	; 0x24
 8006d1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2101      	movs	r1, #1
 8006d28:	438a      	bics	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a11      	ldr	r2, [pc, #68]	; (8006d7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2101      	movs	r1, #1
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2241      	movs	r2, #65	; 0x41
 8006d62:	2120      	movs	r1, #32
 8006d64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2240      	movs	r2, #64	; 0x40
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e000      	b.n	8006d74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d72:	2302      	movs	r3, #2
  }
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b004      	add	sp, #16
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	fffff0ff 	.word	0xfffff0ff

08006d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f000 fb76 	bl	8007480 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d100      	bne.n	8006da0 <HAL_RCC_OscConfig+0x20>
 8006d9e:	e08e      	b.n	8006ebe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006da0:	4bc5      	ldr	r3, [pc, #788]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	220c      	movs	r2, #12
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d00e      	beq.n	8006dca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006dac:	4bc2      	ldr	r3, [pc, #776]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	220c      	movs	r2, #12
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d117      	bne.n	8006de8 <HAL_RCC_OscConfig+0x68>
 8006db8:	4bbf      	ldr	r3, [pc, #764]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	23c0      	movs	r3, #192	; 0xc0
 8006dbe:	025b      	lsls	r3, r3, #9
 8006dc0:	401a      	ands	r2, r3
 8006dc2:	2380      	movs	r3, #128	; 0x80
 8006dc4:	025b      	lsls	r3, r3, #9
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d10e      	bne.n	8006de8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dca:	4bbb      	ldr	r3, [pc, #748]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	029b      	lsls	r3, r3, #10
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	d100      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x58>
 8006dd6:	e071      	b.n	8006ebc <HAL_RCC_OscConfig+0x13c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d000      	beq.n	8006de2 <HAL_RCC_OscConfig+0x62>
 8006de0:	e06c      	b.n	8006ebc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f000 fb4c 	bl	8007480 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_OscConfig+0x80>
 8006df0:	4bb1      	ldr	r3, [pc, #708]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4bb0      	ldr	r3, [pc, #704]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006df6:	2180      	movs	r1, #128	; 0x80
 8006df8:	0249      	lsls	r1, r1, #9
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e02f      	b.n	8006e60 <HAL_RCC_OscConfig+0xe0>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10c      	bne.n	8006e22 <HAL_RCC_OscConfig+0xa2>
 8006e08:	4bab      	ldr	r3, [pc, #684]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	4baa      	ldr	r3, [pc, #680]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e0e:	49ab      	ldr	r1, [pc, #684]	; (80070bc <HAL_RCC_OscConfig+0x33c>)
 8006e10:	400a      	ands	r2, r1
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	4ba8      	ldr	r3, [pc, #672]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4ba7      	ldr	r3, [pc, #668]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e1a:	49a9      	ldr	r1, [pc, #676]	; (80070c0 <HAL_RCC_OscConfig+0x340>)
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e01e      	b.n	8006e60 <HAL_RCC_OscConfig+0xe0>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d10e      	bne.n	8006e48 <HAL_RCC_OscConfig+0xc8>
 8006e2a:	4ba3      	ldr	r3, [pc, #652]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4ba2      	ldr	r3, [pc, #648]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	02c9      	lsls	r1, r1, #11
 8006e34:	430a      	orrs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	4b9f      	ldr	r3, [pc, #636]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	4b9e      	ldr	r3, [pc, #632]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e3e:	2180      	movs	r1, #128	; 0x80
 8006e40:	0249      	lsls	r1, r1, #9
 8006e42:	430a      	orrs	r2, r1
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	e00b      	b.n	8006e60 <HAL_RCC_OscConfig+0xe0>
 8006e48:	4b9b      	ldr	r3, [pc, #620]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4b9a      	ldr	r3, [pc, #616]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e4e:	499b      	ldr	r1, [pc, #620]	; (80070bc <HAL_RCC_OscConfig+0x33c>)
 8006e50:	400a      	ands	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	4b98      	ldr	r3, [pc, #608]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b97      	ldr	r3, [pc, #604]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e5a:	4999      	ldr	r1, [pc, #612]	; (80070c0 <HAL_RCC_OscConfig+0x340>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d014      	beq.n	8006e92 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e68:	f7fd fab0 	bl	80043cc <HAL_GetTick>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e72:	f7fd faab 	bl	80043cc <HAL_GetTick>
 8006e76:	0002      	movs	r2, r0
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b64      	cmp	r3, #100	; 0x64
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e2fd      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e84:	4b8c      	ldr	r3, [pc, #560]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	029b      	lsls	r3, r3, #10
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d0f0      	beq.n	8006e72 <HAL_RCC_OscConfig+0xf2>
 8006e90:	e015      	b.n	8006ebe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e92:	f7fd fa9b 	bl	80043cc <HAL_GetTick>
 8006e96:	0003      	movs	r3, r0
 8006e98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e9c:	f7fd fa96 	bl	80043cc <HAL_GetTick>
 8006ea0:	0002      	movs	r2, r0
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b64      	cmp	r3, #100	; 0x64
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e2e8      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eae:	4b82      	ldr	r3, [pc, #520]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	2380      	movs	r3, #128	; 0x80
 8006eb4:	029b      	lsls	r3, r3, #10
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x11c>
 8006eba:	e000      	b.n	8006ebe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ebc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	d100      	bne.n	8006eca <HAL_RCC_OscConfig+0x14a>
 8006ec8:	e06c      	b.n	8006fa4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006eca:	4b7b      	ldr	r3, [pc, #492]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	220c      	movs	r2, #12
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006ed4:	4b78      	ldr	r3, [pc, #480]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	220c      	movs	r2, #12
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d11f      	bne.n	8006f20 <HAL_RCC_OscConfig+0x1a0>
 8006ee0:	4b75      	ldr	r3, [pc, #468]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	23c0      	movs	r3, #192	; 0xc0
 8006ee6:	025b      	lsls	r3, r3, #9
 8006ee8:	401a      	ands	r2, r3
 8006eea:	2380      	movs	r3, #128	; 0x80
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d116      	bne.n	8006f20 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef2:	4b71      	ldr	r3, [pc, #452]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_OscConfig+0x188>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d001      	beq.n	8006f08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e2bb      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f08:	4b6b      	ldr	r3, [pc, #428]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	22f8      	movs	r2, #248	; 0xf8
 8006f0e:	4393      	bics	r3, r2
 8006f10:	0019      	movs	r1, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	00da      	lsls	r2, r3, #3
 8006f18:	4b67      	ldr	r3, [pc, #412]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f1e:	e041      	b.n	8006fa4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d024      	beq.n	8006f72 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f28:	4b63      	ldr	r3, [pc, #396]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	4b62      	ldr	r3, [pc, #392]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f2e:	2101      	movs	r1, #1
 8006f30:	430a      	orrs	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f34:	f7fd fa4a 	bl	80043cc <HAL_GetTick>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f3e:	f7fd fa45 	bl	80043cc <HAL_GetTick>
 8006f42:	0002      	movs	r2, r0
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e297      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f50:	4b59      	ldr	r3, [pc, #356]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2202      	movs	r2, #2
 8006f56:	4013      	ands	r3, r2
 8006f58:	d0f1      	beq.n	8006f3e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f5a:	4b57      	ldr	r3, [pc, #348]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	22f8      	movs	r2, #248	; 0xf8
 8006f60:	4393      	bics	r3, r2
 8006f62:	0019      	movs	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	00da      	lsls	r2, r3, #3
 8006f6a:	4b53      	ldr	r3, [pc, #332]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	e018      	b.n	8006fa4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f72:	4b51      	ldr	r3, [pc, #324]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b50      	ldr	r3, [pc, #320]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f78:	2101      	movs	r1, #1
 8006f7a:	438a      	bics	r2, r1
 8006f7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7e:	f7fd fa25 	bl	80043cc <HAL_GetTick>
 8006f82:	0003      	movs	r3, r0
 8006f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f88:	f7fd fa20 	bl	80043cc <HAL_GetTick>
 8006f8c:	0002      	movs	r2, r0
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e272      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f9a:	4b47      	ldr	r3, [pc, #284]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	d1f1      	bne.n	8006f88 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2208      	movs	r2, #8
 8006faa:	4013      	ands	r3, r2
 8006fac:	d036      	beq.n	800701c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d019      	beq.n	8006fea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fb6:	4b40      	ldr	r3, [pc, #256]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fba:	4b3f      	ldr	r3, [pc, #252]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fc2:	f7fd fa03 	bl	80043cc <HAL_GetTick>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fcc:	f7fd f9fe 	bl	80043cc <HAL_GetTick>
 8006fd0:	0002      	movs	r2, r0
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e250      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fde:	4b36      	ldr	r3, [pc, #216]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d0f1      	beq.n	8006fcc <HAL_RCC_OscConfig+0x24c>
 8006fe8:	e018      	b.n	800701c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fea:	4b33      	ldr	r3, [pc, #204]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fee:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	438a      	bics	r2, r1
 8006ff4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff6:	f7fd f9e9 	bl	80043cc <HAL_GetTick>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007000:	f7fd f9e4 	bl	80043cc <HAL_GetTick>
 8007004:	0002      	movs	r2, r0
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e236      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007012:	4b29      	ldr	r3, [pc, #164]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2202      	movs	r2, #2
 8007018:	4013      	ands	r3, r2
 800701a:	d1f1      	bne.n	8007000 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2204      	movs	r2, #4
 8007022:	4013      	ands	r3, r2
 8007024:	d100      	bne.n	8007028 <HAL_RCC_OscConfig+0x2a8>
 8007026:	e0b5      	b.n	8007194 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007028:	201f      	movs	r0, #31
 800702a:	183b      	adds	r3, r7, r0
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007030:	4b21      	ldr	r3, [pc, #132]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	055b      	lsls	r3, r3, #21
 8007038:	4013      	ands	r3, r2
 800703a:	d110      	bne.n	800705e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703c:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 8007042:	2180      	movs	r1, #128	; 0x80
 8007044:	0549      	lsls	r1, r1, #21
 8007046:	430a      	orrs	r2, r1
 8007048:	61da      	str	r2, [r3, #28]
 800704a:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 800704c:	69da      	ldr	r2, [r3, #28]
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	055b      	lsls	r3, r3, #21
 8007052:	4013      	ands	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007058:	183b      	adds	r3, r7, r0
 800705a:	2201      	movs	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800705e:	4b19      	ldr	r3, [pc, #100]	; (80070c4 <HAL_RCC_OscConfig+0x344>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	2380      	movs	r3, #128	; 0x80
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4013      	ands	r3, r2
 8007068:	d11a      	bne.n	80070a0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800706a:	4b16      	ldr	r3, [pc, #88]	; (80070c4 <HAL_RCC_OscConfig+0x344>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <HAL_RCC_OscConfig+0x344>)
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	0049      	lsls	r1, r1, #1
 8007074:	430a      	orrs	r2, r1
 8007076:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007078:	f7fd f9a8 	bl	80043cc <HAL_GetTick>
 800707c:	0003      	movs	r3, r0
 800707e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007080:	e008      	b.n	8007094 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007082:	f7fd f9a3 	bl	80043cc <HAL_GetTick>
 8007086:	0002      	movs	r2, r0
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b64      	cmp	r3, #100	; 0x64
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e1f5      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <HAL_RCC_OscConfig+0x344>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	2380      	movs	r3, #128	; 0x80
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	4013      	ands	r3, r2
 800709e:	d0f0      	beq.n	8007082 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d10f      	bne.n	80070c8 <HAL_RCC_OscConfig+0x348>
 80070a8:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <HAL_RCC_OscConfig+0x338>)
 80070ae:	2101      	movs	r1, #1
 80070b0:	430a      	orrs	r2, r1
 80070b2:	621a      	str	r2, [r3, #32]
 80070b4:	e036      	b.n	8007124 <HAL_RCC_OscConfig+0x3a4>
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	40021000 	.word	0x40021000
 80070bc:	fffeffff 	.word	0xfffeffff
 80070c0:	fffbffff 	.word	0xfffbffff
 80070c4:	40007000 	.word	0x40007000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10c      	bne.n	80070ea <HAL_RCC_OscConfig+0x36a>
 80070d0:	4bca      	ldr	r3, [pc, #808]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80070d2:	6a1a      	ldr	r2, [r3, #32]
 80070d4:	4bc9      	ldr	r3, [pc, #804]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80070d6:	2101      	movs	r1, #1
 80070d8:	438a      	bics	r2, r1
 80070da:	621a      	str	r2, [r3, #32]
 80070dc:	4bc7      	ldr	r3, [pc, #796]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	4bc6      	ldr	r3, [pc, #792]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80070e2:	2104      	movs	r1, #4
 80070e4:	438a      	bics	r2, r1
 80070e6:	621a      	str	r2, [r3, #32]
 80070e8:	e01c      	b.n	8007124 <HAL_RCC_OscConfig+0x3a4>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	d10c      	bne.n	800710c <HAL_RCC_OscConfig+0x38c>
 80070f2:	4bc2      	ldr	r3, [pc, #776]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80070f4:	6a1a      	ldr	r2, [r3, #32]
 80070f6:	4bc1      	ldr	r3, [pc, #772]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80070f8:	2104      	movs	r1, #4
 80070fa:	430a      	orrs	r2, r1
 80070fc:	621a      	str	r2, [r3, #32]
 80070fe:	4bbf      	ldr	r3, [pc, #764]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	4bbe      	ldr	r3, [pc, #760]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007104:	2101      	movs	r1, #1
 8007106:	430a      	orrs	r2, r1
 8007108:	621a      	str	r2, [r3, #32]
 800710a:	e00b      	b.n	8007124 <HAL_RCC_OscConfig+0x3a4>
 800710c:	4bbb      	ldr	r3, [pc, #748]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	4bba      	ldr	r3, [pc, #744]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007112:	2101      	movs	r1, #1
 8007114:	438a      	bics	r2, r1
 8007116:	621a      	str	r2, [r3, #32]
 8007118:	4bb8      	ldr	r3, [pc, #736]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800711a:	6a1a      	ldr	r2, [r3, #32]
 800711c:	4bb7      	ldr	r3, [pc, #732]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800711e:	2104      	movs	r1, #4
 8007120:	438a      	bics	r2, r1
 8007122:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d014      	beq.n	8007156 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712c:	f7fd f94e 	bl	80043cc <HAL_GetTick>
 8007130:	0003      	movs	r3, r0
 8007132:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007134:	e009      	b.n	800714a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fd f949 	bl	80043cc <HAL_GetTick>
 800713a:	0002      	movs	r2, r0
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	4aaf      	ldr	r2, [pc, #700]	; (8007400 <HAL_RCC_OscConfig+0x680>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e19a      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714a:	4bac      	ldr	r3, [pc, #688]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	2202      	movs	r2, #2
 8007150:	4013      	ands	r3, r2
 8007152:	d0f0      	beq.n	8007136 <HAL_RCC_OscConfig+0x3b6>
 8007154:	e013      	b.n	800717e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007156:	f7fd f939 	bl	80043cc <HAL_GetTick>
 800715a:	0003      	movs	r3, r0
 800715c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800715e:	e009      	b.n	8007174 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007160:	f7fd f934 	bl	80043cc <HAL_GetTick>
 8007164:	0002      	movs	r2, r0
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	4aa5      	ldr	r2, [pc, #660]	; (8007400 <HAL_RCC_OscConfig+0x680>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e185      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007174:	4ba1      	ldr	r3, [pc, #644]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	2202      	movs	r2, #2
 800717a:	4013      	ands	r3, r2
 800717c:	d1f0      	bne.n	8007160 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800717e:	231f      	movs	r3, #31
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d105      	bne.n	8007194 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007188:	4b9c      	ldr	r3, [pc, #624]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	4b9b      	ldr	r3, [pc, #620]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800718e:	499d      	ldr	r1, [pc, #628]	; (8007404 <HAL_RCC_OscConfig+0x684>)
 8007190:	400a      	ands	r2, r1
 8007192:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2210      	movs	r2, #16
 800719a:	4013      	ands	r3, r2
 800719c:	d063      	beq.n	8007266 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d12a      	bne.n	80071fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80071a6:	4b95      	ldr	r3, [pc, #596]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80071a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071aa:	4b94      	ldr	r3, [pc, #592]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80071ac:	2104      	movs	r1, #4
 80071ae:	430a      	orrs	r2, r1
 80071b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80071b2:	4b92      	ldr	r3, [pc, #584]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80071b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b6:	4b91      	ldr	r3, [pc, #580]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80071b8:	2101      	movs	r1, #1
 80071ba:	430a      	orrs	r2, r1
 80071bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071be:	f7fd f905 	bl	80043cc <HAL_GetTick>
 80071c2:	0003      	movs	r3, r0
 80071c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80071c8:	f7fd f900 	bl	80043cc <HAL_GetTick>
 80071cc:	0002      	movs	r2, r0
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e152      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80071da:	4b88      	ldr	r3, [pc, #544]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80071dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071de:	2202      	movs	r2, #2
 80071e0:	4013      	ands	r3, r2
 80071e2:	d0f1      	beq.n	80071c8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80071e4:	4b85      	ldr	r3, [pc, #532]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80071e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e8:	22f8      	movs	r2, #248	; 0xf8
 80071ea:	4393      	bics	r3, r2
 80071ec:	0019      	movs	r1, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	00da      	lsls	r2, r3, #3
 80071f4:	4b81      	ldr	r3, [pc, #516]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80071f6:	430a      	orrs	r2, r1
 80071f8:	635a      	str	r2, [r3, #52]	; 0x34
 80071fa:	e034      	b.n	8007266 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	3305      	adds	r3, #5
 8007202:	d111      	bne.n	8007228 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8007204:	4b7d      	ldr	r3, [pc, #500]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007208:	4b7c      	ldr	r3, [pc, #496]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800720a:	2104      	movs	r1, #4
 800720c:	438a      	bics	r2, r1
 800720e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007210:	4b7a      	ldr	r3, [pc, #488]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	22f8      	movs	r2, #248	; 0xf8
 8007216:	4393      	bics	r3, r2
 8007218:	0019      	movs	r1, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	00da      	lsls	r2, r3, #3
 8007220:	4b76      	ldr	r3, [pc, #472]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007222:	430a      	orrs	r2, r1
 8007224:	635a      	str	r2, [r3, #52]	; 0x34
 8007226:	e01e      	b.n	8007266 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007228:	4b74      	ldr	r3, [pc, #464]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800722a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722c:	4b73      	ldr	r3, [pc, #460]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800722e:	2104      	movs	r1, #4
 8007230:	430a      	orrs	r2, r1
 8007232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007234:	4b71      	ldr	r3, [pc, #452]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007238:	4b70      	ldr	r3, [pc, #448]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800723a:	2101      	movs	r1, #1
 800723c:	438a      	bics	r2, r1
 800723e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007240:	f7fd f8c4 	bl	80043cc <HAL_GetTick>
 8007244:	0003      	movs	r3, r0
 8007246:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800724a:	f7fd f8bf 	bl	80043cc <HAL_GetTick>
 800724e:	0002      	movs	r2, r0
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e111      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800725c:	4b67      	ldr	r3, [pc, #412]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2202      	movs	r2, #2
 8007262:	4013      	ands	r3, r2
 8007264:	d1f1      	bne.n	800724a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2220      	movs	r2, #32
 800726c:	4013      	ands	r3, r2
 800726e:	d05c      	beq.n	800732a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007270:	4b62      	ldr	r3, [pc, #392]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	220c      	movs	r2, #12
 8007276:	4013      	ands	r3, r2
 8007278:	2b0c      	cmp	r3, #12
 800727a:	d00e      	beq.n	800729a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800727c:	4b5f      	ldr	r3, [pc, #380]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	220c      	movs	r2, #12
 8007282:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8007284:	2b08      	cmp	r3, #8
 8007286:	d114      	bne.n	80072b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8007288:	4b5c      	ldr	r3, [pc, #368]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	23c0      	movs	r3, #192	; 0xc0
 800728e:	025b      	lsls	r3, r3, #9
 8007290:	401a      	ands	r2, r3
 8007292:	23c0      	movs	r3, #192	; 0xc0
 8007294:	025b      	lsls	r3, r3, #9
 8007296:	429a      	cmp	r2, r3
 8007298:	d10b      	bne.n	80072b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800729a:	4b58      	ldr	r3, [pc, #352]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800729c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800729e:	2380      	movs	r3, #128	; 0x80
 80072a0:	025b      	lsls	r3, r3, #9
 80072a2:	4013      	ands	r3, r2
 80072a4:	d040      	beq.n	8007328 <HAL_RCC_OscConfig+0x5a8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d03c      	beq.n	8007328 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e0e6      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01b      	beq.n	80072f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80072ba:	4b50      	ldr	r3, [pc, #320]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80072bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072be:	4b4f      	ldr	r3, [pc, #316]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80072c0:	2180      	movs	r1, #128	; 0x80
 80072c2:	0249      	lsls	r1, r1, #9
 80072c4:	430a      	orrs	r2, r1
 80072c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c8:	f7fd f880 	bl	80043cc <HAL_GetTick>
 80072cc:	0003      	movs	r3, r0
 80072ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072d2:	f7fd f87b 	bl	80043cc <HAL_GetTick>
 80072d6:	0002      	movs	r2, r0
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e0cd      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80072e4:	4b45      	ldr	r3, [pc, #276]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80072e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e8:	2380      	movs	r3, #128	; 0x80
 80072ea:	025b      	lsls	r3, r3, #9
 80072ec:	4013      	ands	r3, r2
 80072ee:	d0f0      	beq.n	80072d2 <HAL_RCC_OscConfig+0x552>
 80072f0:	e01b      	b.n	800732a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80072f2:	4b42      	ldr	r3, [pc, #264]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80072f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f6:	4b41      	ldr	r3, [pc, #260]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80072f8:	4943      	ldr	r1, [pc, #268]	; (8007408 <HAL_RCC_OscConfig+0x688>)
 80072fa:	400a      	ands	r2, r1
 80072fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072fe:	f7fd f865 	bl	80043cc <HAL_GetTick>
 8007302:	0003      	movs	r3, r0
 8007304:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007308:	f7fd f860 	bl	80043cc <HAL_GetTick>
 800730c:	0002      	movs	r2, r0
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e0b2      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800731a:	4b38      	ldr	r3, [pc, #224]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800731c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800731e:	2380      	movs	r3, #128	; 0x80
 8007320:	025b      	lsls	r3, r3, #9
 8007322:	4013      	ands	r3, r2
 8007324:	d1f0      	bne.n	8007308 <HAL_RCC_OscConfig+0x588>
 8007326:	e000      	b.n	800732a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8007328:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d100      	bne.n	8007334 <HAL_RCC_OscConfig+0x5b4>
 8007332:	e0a4      	b.n	800747e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007334:	4b31      	ldr	r3, [pc, #196]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	220c      	movs	r2, #12
 800733a:	4013      	ands	r3, r2
 800733c:	2b08      	cmp	r3, #8
 800733e:	d100      	bne.n	8007342 <HAL_RCC_OscConfig+0x5c2>
 8007340:	e078      	b.n	8007434 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b02      	cmp	r3, #2
 8007348:	d14c      	bne.n	80073e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800734a:	4b2c      	ldr	r3, [pc, #176]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b2b      	ldr	r3, [pc, #172]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007350:	492e      	ldr	r1, [pc, #184]	; (800740c <HAL_RCC_OscConfig+0x68c>)
 8007352:	400a      	ands	r2, r1
 8007354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007356:	f7fd f839 	bl	80043cc <HAL_GetTick>
 800735a:	0003      	movs	r3, r0
 800735c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007360:	f7fd f834 	bl	80043cc <HAL_GetTick>
 8007364:	0002      	movs	r2, r0
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e086      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007372:	4b22      	ldr	r3, [pc, #136]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	2380      	movs	r3, #128	; 0x80
 8007378:	049b      	lsls	r3, r3, #18
 800737a:	4013      	ands	r3, r2
 800737c:	d1f0      	bne.n	8007360 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800737e:	4b1f      	ldr	r3, [pc, #124]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	220f      	movs	r2, #15
 8007384:	4393      	bics	r3, r2
 8007386:	0019      	movs	r1, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 800738e:	430a      	orrs	r2, r1
 8007390:	62da      	str	r2, [r3, #44]	; 0x2c
 8007392:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <HAL_RCC_OscConfig+0x690>)
 8007398:	4013      	ands	r3, r2
 800739a:	0019      	movs	r1, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a4:	431a      	orrs	r2, r3
 80073a6:	4b15      	ldr	r3, [pc, #84]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80073a8:	430a      	orrs	r2, r1
 80073aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073ac:	4b13      	ldr	r3, [pc, #76]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	0449      	lsls	r1, r1, #17
 80073b6:	430a      	orrs	r2, r1
 80073b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ba:	f7fd f807 	bl	80043cc <HAL_GetTick>
 80073be:	0003      	movs	r3, r0
 80073c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c4:	f7fd f802 	bl	80043cc <HAL_GetTick>
 80073c8:	0002      	movs	r2, r0
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e054      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073d6:	4b09      	ldr	r3, [pc, #36]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	2380      	movs	r3, #128	; 0x80
 80073dc:	049b      	lsls	r3, r3, #18
 80073de:	4013      	ands	r3, r2
 80073e0:	d0f0      	beq.n	80073c4 <HAL_RCC_OscConfig+0x644>
 80073e2:	e04c      	b.n	800747e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <HAL_RCC_OscConfig+0x67c>)
 80073ea:	4908      	ldr	r1, [pc, #32]	; (800740c <HAL_RCC_OscConfig+0x68c>)
 80073ec:	400a      	ands	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f0:	f7fc ffec 	bl	80043cc <HAL_GetTick>
 80073f4:	0003      	movs	r3, r0
 80073f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073f8:	e015      	b.n	8007426 <HAL_RCC_OscConfig+0x6a6>
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	40021000 	.word	0x40021000
 8007400:	00001388 	.word	0x00001388
 8007404:	efffffff 	.word	0xefffffff
 8007408:	fffeffff 	.word	0xfffeffff
 800740c:	feffffff 	.word	0xfeffffff
 8007410:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007414:	f7fc ffda 	bl	80043cc <HAL_GetTick>
 8007418:	0002      	movs	r2, r0
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e02c      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007426:	4b18      	ldr	r3, [pc, #96]	; (8007488 <HAL_RCC_OscConfig+0x708>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	2380      	movs	r3, #128	; 0x80
 800742c:	049b      	lsls	r3, r3, #18
 800742e:	4013      	ands	r3, r2
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0x694>
 8007432:	e024      	b.n	800747e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e01f      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007440:	4b11      	ldr	r3, [pc, #68]	; (8007488 <HAL_RCC_OscConfig+0x708>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <HAL_RCC_OscConfig+0x708>)
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	23c0      	movs	r3, #192	; 0xc0
 8007450:	025b      	lsls	r3, r3, #9
 8007452:	401a      	ands	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	429a      	cmp	r2, r3
 800745a:	d10e      	bne.n	800747a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	220f      	movs	r2, #15
 8007460:	401a      	ands	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007466:	429a      	cmp	r2, r3
 8007468:	d107      	bne.n	800747a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	23f0      	movs	r3, #240	; 0xf0
 800746e:	039b      	lsls	r3, r3, #14
 8007470:	401a      	ands	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d001      	beq.n	800747e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b008      	add	sp, #32
 8007486:	bd80      	pop	{r7, pc}
 8007488:	40021000 	.word	0x40021000

0800748c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0bf      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074a0:	4b61      	ldr	r3, [pc, #388]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2201      	movs	r2, #1
 80074a6:	4013      	ands	r3, r2
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d911      	bls.n	80074d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ae:	4b5e      	ldr	r3, [pc, #376]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2201      	movs	r2, #1
 80074b4:	4393      	bics	r3, r2
 80074b6:	0019      	movs	r1, r3
 80074b8:	4b5b      	ldr	r3, [pc, #364]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c0:	4b59      	ldr	r3, [pc, #356]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2201      	movs	r2, #1
 80074c6:	4013      	ands	r3, r2
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d001      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e0a6      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2202      	movs	r2, #2
 80074d8:	4013      	ands	r3, r2
 80074da:	d015      	beq.n	8007508 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2204      	movs	r2, #4
 80074e2:	4013      	ands	r3, r2
 80074e4:	d006      	beq.n	80074f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80074e6:	4b51      	ldr	r3, [pc, #324]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	4b50      	ldr	r3, [pc, #320]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 80074ec:	21e0      	movs	r1, #224	; 0xe0
 80074ee:	00c9      	lsls	r1, r1, #3
 80074f0:	430a      	orrs	r2, r1
 80074f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074f4:	4b4d      	ldr	r3, [pc, #308]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	22f0      	movs	r2, #240	; 0xf0
 80074fa:	4393      	bics	r3, r2
 80074fc:	0019      	movs	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	4b4a      	ldr	r3, [pc, #296]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 8007504:	430a      	orrs	r2, r1
 8007506:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2201      	movs	r2, #1
 800750e:	4013      	ands	r3, r2
 8007510:	d04c      	beq.n	80075ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d107      	bne.n	800752a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800751a:	4b44      	ldr	r3, [pc, #272]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	029b      	lsls	r3, r3, #10
 8007522:	4013      	ands	r3, r2
 8007524:	d120      	bne.n	8007568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e07a      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d107      	bne.n	8007542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007532:	4b3e      	ldr	r3, [pc, #248]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	049b      	lsls	r3, r3, #18
 800753a:	4013      	ands	r3, r2
 800753c:	d114      	bne.n	8007568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e06e      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d107      	bne.n	800755a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800754a:	4b38      	ldr	r3, [pc, #224]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 800754c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754e:	2380      	movs	r3, #128	; 0x80
 8007550:	025b      	lsls	r3, r3, #9
 8007552:	4013      	ands	r3, r2
 8007554:	d108      	bne.n	8007568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e062      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800755a:	4b34      	ldr	r3, [pc, #208]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2202      	movs	r2, #2
 8007560:	4013      	ands	r3, r2
 8007562:	d101      	bne.n	8007568 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e05b      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007568:	4b30      	ldr	r3, [pc, #192]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2203      	movs	r2, #3
 800756e:	4393      	bics	r3, r2
 8007570:	0019      	movs	r1, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4b2d      	ldr	r3, [pc, #180]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 8007578:	430a      	orrs	r2, r1
 800757a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800757c:	f7fc ff26 	bl	80043cc <HAL_GetTick>
 8007580:	0003      	movs	r3, r0
 8007582:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007584:	e009      	b.n	800759a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007586:	f7fc ff21 	bl	80043cc <HAL_GetTick>
 800758a:	0002      	movs	r2, r0
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	4a27      	ldr	r2, [pc, #156]	; (8007630 <HAL_RCC_ClockConfig+0x1a4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d901      	bls.n	800759a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e042      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800759a:	4b24      	ldr	r3, [pc, #144]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	220c      	movs	r2, #12
 80075a0:	401a      	ands	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d1ec      	bne.n	8007586 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075ac:	4b1e      	ldr	r3, [pc, #120]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	4013      	ands	r3, r2
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d211      	bcs.n	80075de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2201      	movs	r2, #1
 80075c0:	4393      	bics	r3, r2
 80075c2:	0019      	movs	r1, r3
 80075c4:	4b18      	ldr	r3, [pc, #96]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075cc:	4b16      	ldr	r3, [pc, #88]	; (8007628 <HAL_RCC_ClockConfig+0x19c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2201      	movs	r2, #1
 80075d2:	4013      	ands	r3, r2
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d001      	beq.n	80075de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e020      	b.n	8007620 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2204      	movs	r2, #4
 80075e4:	4013      	ands	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80075e8:	4b10      	ldr	r3, [pc, #64]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	4a11      	ldr	r2, [pc, #68]	; (8007634 <HAL_RCC_ClockConfig+0x1a8>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	0019      	movs	r1, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 80075f8:	430a      	orrs	r2, r1
 80075fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80075fc:	f000 f820 	bl	8007640 <HAL_RCC_GetSysClockFreq>
 8007600:	0001      	movs	r1, r0
 8007602:	4b0a      	ldr	r3, [pc, #40]	; (800762c <HAL_RCC_ClockConfig+0x1a0>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	220f      	movs	r2, #15
 800760a:	4013      	ands	r3, r2
 800760c:	4a0a      	ldr	r2, [pc, #40]	; (8007638 <HAL_RCC_ClockConfig+0x1ac>)
 800760e:	5cd3      	ldrb	r3, [r2, r3]
 8007610:	000a      	movs	r2, r1
 8007612:	40da      	lsrs	r2, r3
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <HAL_RCC_ClockConfig+0x1b0>)
 8007616:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007618:	2003      	movs	r0, #3
 800761a:	f7fc fe91 	bl	8004340 <HAL_InitTick>
  
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	0018      	movs	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	b004      	add	sp, #16
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40022000 	.word	0x40022000
 800762c:	40021000 	.word	0x40021000
 8007630:	00001388 	.word	0x00001388
 8007634:	fffff8ff 	.word	0xfffff8ff
 8007638:	0800bb04 	.word	0x0800bb04
 800763c:	2000007c 	.word	0x2000007c

08007640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b08f      	sub	sp, #60	; 0x3c
 8007644:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8007646:	2314      	movs	r3, #20
 8007648:	18fb      	adds	r3, r7, r3
 800764a:	4a38      	ldr	r2, [pc, #224]	; (800772c <HAL_RCC_GetSysClockFreq+0xec>)
 800764c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800764e:	c313      	stmia	r3!, {r0, r1, r4}
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	4a36      	ldr	r2, [pc, #216]	; (8007730 <HAL_RCC_GetSysClockFreq+0xf0>)
 8007658:	ca13      	ldmia	r2!, {r0, r1, r4}
 800765a:	c313      	stmia	r3!, {r0, r1, r4}
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007664:	2300      	movs	r3, #0
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
 8007668:	2300      	movs	r3, #0
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
 800766c:	2300      	movs	r3, #0
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8007674:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <HAL_RCC_GetSysClockFreq+0xf4>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	220c      	movs	r2, #12
 800767e:	4013      	ands	r3, r2
 8007680:	2b0c      	cmp	r3, #12
 8007682:	d047      	beq.n	8007714 <HAL_RCC_GetSysClockFreq+0xd4>
 8007684:	d849      	bhi.n	800771a <HAL_RCC_GetSysClockFreq+0xda>
 8007686:	2b04      	cmp	r3, #4
 8007688:	d002      	beq.n	8007690 <HAL_RCC_GetSysClockFreq+0x50>
 800768a:	2b08      	cmp	r3, #8
 800768c:	d003      	beq.n	8007696 <HAL_RCC_GetSysClockFreq+0x56>
 800768e:	e044      	b.n	800771a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007690:	4b29      	ldr	r3, [pc, #164]	; (8007738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007692:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007694:	e044      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	0c9b      	lsrs	r3, r3, #18
 800769a:	220f      	movs	r2, #15
 800769c:	4013      	ands	r3, r2
 800769e:	2214      	movs	r2, #20
 80076a0:	18ba      	adds	r2, r7, r2
 80076a2:	5cd3      	ldrb	r3, [r2, r3]
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80076a6:	4b23      	ldr	r3, [pc, #140]	; (8007734 <HAL_RCC_GetSysClockFreq+0xf4>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	220f      	movs	r2, #15
 80076ac:	4013      	ands	r3, r2
 80076ae:	1d3a      	adds	r2, r7, #4
 80076b0:	5cd3      	ldrb	r3, [r2, r3]
 80076b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b6:	23c0      	movs	r3, #192	; 0xc0
 80076b8:	025b      	lsls	r3, r3, #9
 80076ba:	401a      	ands	r2, r3
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	025b      	lsls	r3, r3, #9
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d109      	bne.n	80076d8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80076c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076c6:	481c      	ldr	r0, [pc, #112]	; (8007738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80076c8:	f7f8 fd1c 	bl	8000104 <__udivsi3>
 80076cc:	0003      	movs	r3, r0
 80076ce:	001a      	movs	r2, r3
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	4353      	muls	r3, r2
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
 80076d6:	e01a      	b.n	800770e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80076d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076da:	23c0      	movs	r3, #192	; 0xc0
 80076dc:	025b      	lsls	r3, r3, #9
 80076de:	401a      	ands	r2, r3
 80076e0:	23c0      	movs	r3, #192	; 0xc0
 80076e2:	025b      	lsls	r3, r3, #9
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d109      	bne.n	80076fc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80076e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ea:	4814      	ldr	r0, [pc, #80]	; (800773c <HAL_RCC_GetSysClockFreq+0xfc>)
 80076ec:	f7f8 fd0a 	bl	8000104 <__udivsi3>
 80076f0:	0003      	movs	r3, r0
 80076f2:	001a      	movs	r2, r3
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	4353      	muls	r3, r2
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
 80076fa:	e008      	b.n	800770e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80076fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076fe:	480e      	ldr	r0, [pc, #56]	; (8007738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007700:	f7f8 fd00 	bl	8000104 <__udivsi3>
 8007704:	0003      	movs	r3, r0
 8007706:	001a      	movs	r2, r3
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	4353      	muls	r3, r2
 800770c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800770e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007710:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007712:	e005      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007714:	4b09      	ldr	r3, [pc, #36]	; (800773c <HAL_RCC_GetSysClockFreq+0xfc>)
 8007716:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007718:	e002      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <HAL_RCC_GetSysClockFreq+0xf8>)
 800771c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800771e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b00f      	add	sp, #60	; 0x3c
 8007728:	bd90      	pop	{r4, r7, pc}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	0800b000 	.word	0x0800b000
 8007730:	0800b010 	.word	0x0800b010
 8007734:	40021000 	.word	0x40021000
 8007738:	007a1200 	.word	0x007a1200
 800773c:	02dc6c00 	.word	0x02dc6c00

08007740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2380      	movs	r3, #128	; 0x80
 8007756:	025b      	lsls	r3, r3, #9
 8007758:	4013      	ands	r3, r2
 800775a:	d100      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800775c:	e08e      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800775e:	2017      	movs	r0, #23
 8007760:	183b      	adds	r3, r7, r0
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007766:	4b6e      	ldr	r3, [pc, #440]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007768:	69da      	ldr	r2, [r3, #28]
 800776a:	2380      	movs	r3, #128	; 0x80
 800776c:	055b      	lsls	r3, r3, #21
 800776e:	4013      	ands	r3, r2
 8007770:	d110      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007772:	4b6b      	ldr	r3, [pc, #428]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007774:	69da      	ldr	r2, [r3, #28]
 8007776:	4b6a      	ldr	r3, [pc, #424]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007778:	2180      	movs	r1, #128	; 0x80
 800777a:	0549      	lsls	r1, r1, #21
 800777c:	430a      	orrs	r2, r1
 800777e:	61da      	str	r2, [r3, #28]
 8007780:	4b67      	ldr	r3, [pc, #412]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007782:	69da      	ldr	r2, [r3, #28]
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	055b      	lsls	r3, r3, #21
 8007788:	4013      	ands	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800778e:	183b      	adds	r3, r7, r0
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007794:	4b63      	ldr	r3, [pc, #396]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	2380      	movs	r3, #128	; 0x80
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	4013      	ands	r3, r2
 800779e:	d11a      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077a0:	4b60      	ldr	r3, [pc, #384]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	4b5f      	ldr	r3, [pc, #380]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80077a6:	2180      	movs	r1, #128	; 0x80
 80077a8:	0049      	lsls	r1, r1, #1
 80077aa:	430a      	orrs	r2, r1
 80077ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ae:	f7fc fe0d 	bl	80043cc <HAL_GetTick>
 80077b2:	0003      	movs	r3, r0
 80077b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b6:	e008      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077b8:	f7fc fe08 	bl	80043cc <HAL_GetTick>
 80077bc:	0002      	movs	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b64      	cmp	r3, #100	; 0x64
 80077c4:	d901      	bls.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e0a6      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ca:	4b56      	ldr	r3, [pc, #344]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	2380      	movs	r3, #128	; 0x80
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	4013      	ands	r3, r2
 80077d4:	d0f0      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077d6:	4b52      	ldr	r3, [pc, #328]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	23c0      	movs	r3, #192	; 0xc0
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4013      	ands	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d034      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	23c0      	movs	r3, #192	; 0xc0
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4013      	ands	r3, r2
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d02c      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077f8:	4b49      	ldr	r3, [pc, #292]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	4a4a      	ldr	r2, [pc, #296]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80077fe:	4013      	ands	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007802:	4b47      	ldr	r3, [pc, #284]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007804:	6a1a      	ldr	r2, [r3, #32]
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007808:	2180      	movs	r1, #128	; 0x80
 800780a:	0249      	lsls	r1, r1, #9
 800780c:	430a      	orrs	r2, r1
 800780e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007810:	4b43      	ldr	r3, [pc, #268]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007812:	6a1a      	ldr	r2, [r3, #32]
 8007814:	4b42      	ldr	r3, [pc, #264]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007816:	4945      	ldr	r1, [pc, #276]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007818:	400a      	ands	r2, r1
 800781a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800781c:	4b40      	ldr	r3, [pc, #256]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	4013      	ands	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800782a:	f7fc fdcf 	bl	80043cc <HAL_GetTick>
 800782e:	0003      	movs	r3, r0
 8007830:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007832:	e009      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007834:	f7fc fdca 	bl	80043cc <HAL_GetTick>
 8007838:	0002      	movs	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	4a3c      	ldr	r2, [pc, #240]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d901      	bls.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e067      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007848:	4b35      	ldr	r3, [pc, #212]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	2202      	movs	r2, #2
 800784e:	4013      	ands	r3, r2
 8007850:	d0f0      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	4a34      	ldr	r2, [pc, #208]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007858:	4013      	ands	r3, r2
 800785a:	0019      	movs	r1, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	4b2f      	ldr	r3, [pc, #188]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007862:	430a      	orrs	r2, r1
 8007864:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007866:	2317      	movs	r3, #23
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d105      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007870:	4b2b      	ldr	r3, [pc, #172]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007876:	492f      	ldr	r1, [pc, #188]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007878:	400a      	ands	r2, r1
 800787a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2201      	movs	r2, #1
 8007882:	4013      	ands	r3, r2
 8007884:	d009      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007886:	4b26      	ldr	r3, [pc, #152]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	2203      	movs	r2, #3
 800788c:	4393      	bics	r3, r2
 800788e:	0019      	movs	r1, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007896:	430a      	orrs	r2, r1
 8007898:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2202      	movs	r2, #2
 80078a0:	4013      	ands	r3, r2
 80078a2:	d009      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078a4:	4b1e      	ldr	r3, [pc, #120]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	4a23      	ldr	r2, [pc, #140]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	0019      	movs	r1, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80078b4:	430a      	orrs	r2, r1
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	2380      	movs	r3, #128	; 0x80
 80078be:	02db      	lsls	r3, r3, #11
 80078c0:	4013      	ands	r3, r2
 80078c2:	d009      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078c4:	4b16      	ldr	r3, [pc, #88]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	4a1c      	ldr	r2, [pc, #112]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	0019      	movs	r1, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80078d4:	430a      	orrs	r2, r1
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2220      	movs	r2, #32
 80078de:	4013      	ands	r3, r2
 80078e0:	d009      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078e2:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	2210      	movs	r2, #16
 80078e8:	4393      	bics	r3, r2
 80078ea:	0019      	movs	r1, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	695a      	ldr	r2, [r3, #20]
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80078f2:	430a      	orrs	r2, r1
 80078f4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	2380      	movs	r3, #128	; 0x80
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4013      	ands	r3, r2
 8007900:	d009      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007902:	4b07      	ldr	r3, [pc, #28]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	2240      	movs	r2, #64	; 0x40
 8007908:	4393      	bics	r3, r2
 800790a:	0019      	movs	r1, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	4b03      	ldr	r3, [pc, #12]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007912:	430a      	orrs	r2, r1
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	0018      	movs	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	b006      	add	sp, #24
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40021000 	.word	0x40021000
 8007924:	40007000 	.word	0x40007000
 8007928:	fffffcff 	.word	0xfffffcff
 800792c:	fffeffff 	.word	0xfffeffff
 8007930:	00001388 	.word	0x00001388
 8007934:	efffffff 	.word	0xefffffff
 8007938:	fffcffff 	.word	0xfffcffff
 800793c:	fff3ffff 	.word	0xfff3ffff

08007940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e0a8      	b.n	8007aa4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	2382      	movs	r3, #130	; 0x82
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	429a      	cmp	r2, r3
 8007964:	d009      	beq.n	800797a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	61da      	str	r2, [r3, #28]
 800796c:	e005      	b.n	800797a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	225d      	movs	r2, #93	; 0x5d
 8007984:	5c9b      	ldrb	r3, [r3, r2]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	225c      	movs	r2, #92	; 0x5c
 8007990:	2100      	movs	r1, #0
 8007992:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	0018      	movs	r0, r3
 8007998:	f7fc faf0 	bl	8003f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	225d      	movs	r2, #93	; 0x5d
 80079a0:	2102      	movs	r1, #2
 80079a2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2140      	movs	r1, #64	; 0x40
 80079b0:	438a      	bics	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	23e0      	movs	r3, #224	; 0xe0
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	429a      	cmp	r2, r3
 80079be:	d902      	bls.n	80079c6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e002      	b.n	80079cc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079c6:	2380      	movs	r3, #128	; 0x80
 80079c8:	015b      	lsls	r3, r3, #5
 80079ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	23f0      	movs	r3, #240	; 0xf0
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d008      	beq.n	80079ea <HAL_SPI_Init+0xaa>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	23e0      	movs	r3, #224	; 0xe0
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d002      	beq.n	80079ea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	2382      	movs	r3, #130	; 0x82
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	401a      	ands	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6899      	ldr	r1, [r3, #8]
 80079f8:	2384      	movs	r3, #132	; 0x84
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	400b      	ands	r3, r1
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2102      	movs	r1, #2
 8007a06:	400b      	ands	r3, r1
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	2101      	movs	r1, #1
 8007a10:	400b      	ands	r3, r1
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6999      	ldr	r1, [r3, #24]
 8007a18:	2380      	movs	r3, #128	; 0x80
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	400b      	ands	r3, r1
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	2138      	movs	r1, #56	; 0x38
 8007a26:	400b      	ands	r3, r1
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	400b      	ands	r3, r1
 8007a32:	431a      	orrs	r2, r3
 8007a34:	0011      	movs	r1, r2
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a3a:	2380      	movs	r3, #128	; 0x80
 8007a3c:	019b      	lsls	r3, r3, #6
 8007a3e:	401a      	ands	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	0c1b      	lsrs	r3, r3, #16
 8007a4e:	2204      	movs	r2, #4
 8007a50:	401a      	ands	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	2110      	movs	r1, #16
 8007a58:	400b      	ands	r3, r1
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	2108      	movs	r1, #8
 8007a62:	400b      	ands	r3, r1
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68d9      	ldr	r1, [r3, #12]
 8007a6a:	23f0      	movs	r3, #240	; 0xf0
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	400b      	ands	r3, r1
 8007a70:	431a      	orrs	r2, r3
 8007a72:	0011      	movs	r1, r2
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	2380      	movs	r3, #128	; 0x80
 8007a78:	015b      	lsls	r3, r3, #5
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69da      	ldr	r2, [r3, #28]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4907      	ldr	r1, [pc, #28]	; (8007aac <HAL_SPI_Init+0x16c>)
 8007a90:	400a      	ands	r2, r1
 8007a92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	225d      	movs	r2, #93	; 0x5d
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	b004      	add	sp, #16
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	fffff7ff 	.word	0xfffff7ff

08007ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e042      	b.n	8007b48 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	223d      	movs	r2, #61	; 0x3d
 8007ac6:	5c9b      	ldrb	r3, [r3, r2]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d107      	bne.n	8007ade <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	223c      	movs	r2, #60	; 0x3c
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f7fc fa9b 	bl	8004014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	223d      	movs	r2, #61	; 0x3d
 8007ae2:	2102      	movs	r1, #2
 8007ae4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3304      	adds	r3, #4
 8007aee:	0019      	movs	r1, r3
 8007af0:	0010      	movs	r0, r2
 8007af2:	f000 fa27 	bl	8007f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2246      	movs	r2, #70	; 0x46
 8007afa:	2101      	movs	r1, #1
 8007afc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	223e      	movs	r2, #62	; 0x3e
 8007b02:	2101      	movs	r1, #1
 8007b04:	5499      	strb	r1, [r3, r2]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	223f      	movs	r2, #63	; 0x3f
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	5499      	strb	r1, [r3, r2]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2240      	movs	r2, #64	; 0x40
 8007b12:	2101      	movs	r1, #1
 8007b14:	5499      	strb	r1, [r3, r2]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2241      	movs	r2, #65	; 0x41
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2242      	movs	r2, #66	; 0x42
 8007b22:	2101      	movs	r1, #1
 8007b24:	5499      	strb	r1, [r3, r2]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2243      	movs	r2, #67	; 0x43
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	5499      	strb	r1, [r3, r2]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2244      	movs	r2, #68	; 0x44
 8007b32:	2101      	movs	r1, #1
 8007b34:	5499      	strb	r1, [r3, r2]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2245      	movs	r2, #69	; 0x45
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	223d      	movs	r2, #61	; 0x3d
 8007b42:	2101      	movs	r1, #1
 8007b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d108      	bne.n	8007b72 <HAL_TIM_PWM_Start+0x22>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	223e      	movs	r2, #62	; 0x3e
 8007b64:	5c9b      	ldrb	r3, [r3, r2]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	1e5a      	subs	r2, r3, #1
 8007b6c:	4193      	sbcs	r3, r2
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	e01f      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x62>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d108      	bne.n	8007b8a <HAL_TIM_PWM_Start+0x3a>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	223f      	movs	r2, #63	; 0x3f
 8007b7c:	5c9b      	ldrb	r3, [r3, r2]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	3b01      	subs	r3, #1
 8007b82:	1e5a      	subs	r2, r3, #1
 8007b84:	4193      	sbcs	r3, r2
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	e013      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x62>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d108      	bne.n	8007ba2 <HAL_TIM_PWM_Start+0x52>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2240      	movs	r2, #64	; 0x40
 8007b94:	5c9b      	ldrb	r3, [r3, r2]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	1e5a      	subs	r2, r3, #1
 8007b9c:	4193      	sbcs	r3, r2
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	e007      	b.n	8007bb2 <HAL_TIM_PWM_Start+0x62>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2241      	movs	r2, #65	; 0x41
 8007ba6:	5c9b      	ldrb	r3, [r3, r2]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	1e5a      	subs	r2, r3, #1
 8007bae:	4193      	sbcs	r3, r2
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e074      	b.n	8007ca4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_PWM_Start+0x7a>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	223e      	movs	r2, #62	; 0x3e
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	5499      	strb	r1, [r3, r2]
 8007bc8:	e013      	b.n	8007bf2 <HAL_TIM_PWM_Start+0xa2>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_PWM_Start+0x8a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	223f      	movs	r2, #63	; 0x3f
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	5499      	strb	r1, [r3, r2]
 8007bd8:	e00b      	b.n	8007bf2 <HAL_TIM_PWM_Start+0xa2>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_PWM_Start+0x9a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2240      	movs	r2, #64	; 0x40
 8007be4:	2102      	movs	r1, #2
 8007be6:	5499      	strb	r1, [r3, r2]
 8007be8:	e003      	b.n	8007bf2 <HAL_TIM_PWM_Start+0xa2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2241      	movs	r2, #65	; 0x41
 8007bee:	2102      	movs	r1, #2
 8007bf0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f000 fc1e 	bl	800843c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a29      	ldr	r2, [pc, #164]	; (8007cac <HAL_TIM_PWM_Start+0x15c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00e      	beq.n	8007c28 <HAL_TIM_PWM_Start+0xd8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a28      	ldr	r2, [pc, #160]	; (8007cb0 <HAL_TIM_PWM_Start+0x160>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d009      	beq.n	8007c28 <HAL_TIM_PWM_Start+0xd8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a26      	ldr	r2, [pc, #152]	; (8007cb4 <HAL_TIM_PWM_Start+0x164>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <HAL_TIM_PWM_Start+0xd8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a25      	ldr	r2, [pc, #148]	; (8007cb8 <HAL_TIM_PWM_Start+0x168>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d101      	bne.n	8007c2c <HAL_TIM_PWM_Start+0xdc>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e000      	b.n	8007c2e <HAL_TIM_PWM_Start+0xde>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2180      	movs	r1, #128	; 0x80
 8007c3e:	0209      	lsls	r1, r1, #8
 8007c40:	430a      	orrs	r2, r1
 8007c42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a18      	ldr	r2, [pc, #96]	; (8007cac <HAL_TIM_PWM_Start+0x15c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00f      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x11e>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	05db      	lsls	r3, r3, #23
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d009      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x11e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a17      	ldr	r2, [pc, #92]	; (8007cbc <HAL_TIM_PWM_Start+0x16c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x11e>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a11      	ldr	r2, [pc, #68]	; (8007cb0 <HAL_TIM_PWM_Start+0x160>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d111      	bne.n	8007c92 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2207      	movs	r2, #7
 8007c76:	4013      	ands	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	d010      	beq.n	8007ca2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c90:	e007      	b.n	8007ca2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	b004      	add	sp, #16
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	40014000 	.word	0x40014000
 8007cb4:	40014400 	.word	0x40014400
 8007cb8:	40014800 	.word	0x40014800
 8007cbc:	40000400 	.word	0x40000400

08007cc0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f000 fbb2 	bl	800843c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a2f      	ldr	r2, [pc, #188]	; (8007d9c <HAL_TIM_PWM_Stop+0xdc>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00e      	beq.n	8007d00 <HAL_TIM_PWM_Stop+0x40>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2e      	ldr	r2, [pc, #184]	; (8007da0 <HAL_TIM_PWM_Stop+0xe0>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d009      	beq.n	8007d00 <HAL_TIM_PWM_Stop+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a2c      	ldr	r2, [pc, #176]	; (8007da4 <HAL_TIM_PWM_Stop+0xe4>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d004      	beq.n	8007d00 <HAL_TIM_PWM_Stop+0x40>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a2b      	ldr	r2, [pc, #172]	; (8007da8 <HAL_TIM_PWM_Stop+0xe8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d101      	bne.n	8007d04 <HAL_TIM_PWM_Stop+0x44>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e000      	b.n	8007d06 <HAL_TIM_PWM_Stop+0x46>
 8007d04:	2300      	movs	r3, #0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d013      	beq.n	8007d32 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	4a26      	ldr	r2, [pc, #152]	; (8007dac <HAL_TIM_PWM_Stop+0xec>)
 8007d12:	4013      	ands	r3, r2
 8007d14:	d10d      	bne.n	8007d32 <HAL_TIM_PWM_Stop+0x72>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <HAL_TIM_PWM_Stop+0xf0>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	d107      	bne.n	8007d32 <HAL_TIM_PWM_Stop+0x72>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4921      	ldr	r1, [pc, #132]	; (8007db4 <HAL_TIM_PWM_Stop+0xf4>)
 8007d2e:	400a      	ands	r2, r1
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	4a1c      	ldr	r2, [pc, #112]	; (8007dac <HAL_TIM_PWM_Stop+0xec>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	d10d      	bne.n	8007d5a <HAL_TIM_PWM_Stop+0x9a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	4a1a      	ldr	r2, [pc, #104]	; (8007db0 <HAL_TIM_PWM_Stop+0xf0>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	d107      	bne.n	8007d5a <HAL_TIM_PWM_Stop+0x9a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2101      	movs	r1, #1
 8007d56:	438a      	bics	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <HAL_TIM_PWM_Stop+0xaa>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	223e      	movs	r2, #62	; 0x3e
 8007d64:	2101      	movs	r1, #1
 8007d66:	5499      	strb	r1, [r3, r2]
 8007d68:	e013      	b.n	8007d92 <HAL_TIM_PWM_Stop+0xd2>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d104      	bne.n	8007d7a <HAL_TIM_PWM_Stop+0xba>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	223f      	movs	r2, #63	; 0x3f
 8007d74:	2101      	movs	r1, #1
 8007d76:	5499      	strb	r1, [r3, r2]
 8007d78:	e00b      	b.n	8007d92 <HAL_TIM_PWM_Stop+0xd2>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d104      	bne.n	8007d8a <HAL_TIM_PWM_Stop+0xca>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2240      	movs	r2, #64	; 0x40
 8007d84:	2101      	movs	r1, #1
 8007d86:	5499      	strb	r1, [r3, r2]
 8007d88:	e003      	b.n	8007d92 <HAL_TIM_PWM_Stop+0xd2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2241      	movs	r2, #65	; 0x41
 8007d8e:	2101      	movs	r1, #1
 8007d90:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	0018      	movs	r0, r3
 8007d96:	46bd      	mov	sp, r7
 8007d98:	b002      	add	sp, #8
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800
 8007dac:	00001111 	.word	0x00001111
 8007db0:	00000444 	.word	0x00000444
 8007db4:	ffff7fff 	.word	0xffff7fff

08007db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc4:	2317      	movs	r3, #23
 8007dc6:	18fb      	adds	r3, r7, r3
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	223c      	movs	r2, #60	; 0x3c
 8007dd0:	5c9b      	ldrb	r3, [r3, r2]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_PWM_ConfigChannel+0x22>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e0ad      	b.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	223c      	movs	r2, #60	; 0x3c
 8007dde:	2101      	movs	r1, #1
 8007de0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b0c      	cmp	r3, #12
 8007de6:	d100      	bne.n	8007dea <HAL_TIM_PWM_ConfigChannel+0x32>
 8007de8:	e076      	b.n	8007ed8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b0c      	cmp	r3, #12
 8007dee:	d900      	bls.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007df0:	e095      	b.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d04e      	beq.n	8007e96 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	d900      	bls.n	8007e00 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007dfe:	e08e      	b.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_TIM_PWM_ConfigChannel+0x56>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d021      	beq.n	8007e50 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007e0c:	e087      	b.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	0011      	movs	r1, r2
 8007e16:	0018      	movs	r0, r3
 8007e18:	f000 f914 	bl	8008044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2108      	movs	r1, #8
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2104      	movs	r1, #4
 8007e38:	438a      	bics	r2, r1
 8007e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6999      	ldr	r1, [r3, #24]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	691a      	ldr	r2, [r3, #16]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	619a      	str	r2, [r3, #24]
      break;
 8007e4e:	e06b      	b.n	8007f28 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	0011      	movs	r1, r2
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f000 f97b 	bl	8008154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	699a      	ldr	r2, [r3, #24]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	0109      	lsls	r1, r1, #4
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4931      	ldr	r1, [pc, #196]	; (8007f40 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007e7c:	400a      	ands	r2, r1
 8007e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6999      	ldr	r1, [r3, #24]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	021a      	lsls	r2, r3, #8
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	619a      	str	r2, [r3, #24]
      break;
 8007e94:	e048      	b.n	8007f28 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	0011      	movs	r1, r2
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f000 f9dc 	bl	800825c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2108      	movs	r1, #8
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69da      	ldr	r2, [r3, #28]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2104      	movs	r1, #4
 8007ec0:	438a      	bics	r2, r1
 8007ec2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69d9      	ldr	r1, [r3, #28]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	61da      	str	r2, [r3, #28]
      break;
 8007ed6:	e027      	b.n	8007f28 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	0011      	movs	r1, r2
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	f000 fa41 	bl	8008368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69da      	ldr	r2, [r3, #28]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2180      	movs	r1, #128	; 0x80
 8007ef2:	0109      	lsls	r1, r1, #4
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69da      	ldr	r2, [r3, #28]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	490f      	ldr	r1, [pc, #60]	; (8007f40 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007f04:	400a      	ands	r2, r1
 8007f06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69d9      	ldr	r1, [r3, #28]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	021a      	lsls	r2, r3, #8
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	61da      	str	r2, [r3, #28]
      break;
 8007f1c:	e004      	b.n	8007f28 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007f1e:	2317      	movs	r3, #23
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	2201      	movs	r2, #1
 8007f24:	701a      	strb	r2, [r3, #0]
      break;
 8007f26:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	223c      	movs	r2, #60	; 0x3c
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	5499      	strb	r1, [r3, r2]

  return status;
 8007f30:	2317      	movs	r3, #23
 8007f32:	18fb      	adds	r3, r7, r3
 8007f34:	781b      	ldrb	r3, [r3, #0]
}
 8007f36:	0018      	movs	r0, r3
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b006      	add	sp, #24
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	fffffbff 	.word	0xfffffbff

08007f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a34      	ldr	r2, [pc, #208]	; (8008028 <TIM_Base_SetConfig+0xe4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d008      	beq.n	8007f6e <TIM_Base_SetConfig+0x2a>
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	2380      	movs	r3, #128	; 0x80
 8007f60:	05db      	lsls	r3, r3, #23
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d003      	beq.n	8007f6e <TIM_Base_SetConfig+0x2a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a30      	ldr	r2, [pc, #192]	; (800802c <TIM_Base_SetConfig+0xe8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d108      	bne.n	8007f80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2270      	movs	r2, #112	; 0x70
 8007f72:	4393      	bics	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a29      	ldr	r2, [pc, #164]	; (8008028 <TIM_Base_SetConfig+0xe4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d018      	beq.n	8007fba <TIM_Base_SetConfig+0x76>
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	2380      	movs	r3, #128	; 0x80
 8007f8c:	05db      	lsls	r3, r3, #23
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d013      	beq.n	8007fba <TIM_Base_SetConfig+0x76>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a25      	ldr	r2, [pc, #148]	; (800802c <TIM_Base_SetConfig+0xe8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00f      	beq.n	8007fba <TIM_Base_SetConfig+0x76>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a24      	ldr	r2, [pc, #144]	; (8008030 <TIM_Base_SetConfig+0xec>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00b      	beq.n	8007fba <TIM_Base_SetConfig+0x76>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a23      	ldr	r2, [pc, #140]	; (8008034 <TIM_Base_SetConfig+0xf0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d007      	beq.n	8007fba <TIM_Base_SetConfig+0x76>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a22      	ldr	r2, [pc, #136]	; (8008038 <TIM_Base_SetConfig+0xf4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d003      	beq.n	8007fba <TIM_Base_SetConfig+0x76>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a21      	ldr	r2, [pc, #132]	; (800803c <TIM_Base_SetConfig+0xf8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d108      	bne.n	8007fcc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4a20      	ldr	r2, [pc, #128]	; (8008040 <TIM_Base_SetConfig+0xfc>)
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2280      	movs	r2, #128	; 0x80
 8007fd0:	4393      	bics	r3, r2
 8007fd2:	001a      	movs	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a0c      	ldr	r2, [pc, #48]	; (8008028 <TIM_Base_SetConfig+0xe4>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00b      	beq.n	8008012 <TIM_Base_SetConfig+0xce>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a0d      	ldr	r2, [pc, #52]	; (8008034 <TIM_Base_SetConfig+0xf0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d007      	beq.n	8008012 <TIM_Base_SetConfig+0xce>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <TIM_Base_SetConfig+0xf4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d003      	beq.n	8008012 <TIM_Base_SetConfig+0xce>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a0b      	ldr	r2, [pc, #44]	; (800803c <TIM_Base_SetConfig+0xf8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d103      	bne.n	800801a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	615a      	str	r2, [r3, #20]
}
 8008020:	46c0      	nop			; (mov r8, r8)
 8008022:	46bd      	mov	sp, r7
 8008024:	b004      	add	sp, #16
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40012c00 	.word	0x40012c00
 800802c:	40000400 	.word	0x40000400
 8008030:	40002000 	.word	0x40002000
 8008034:	40014000 	.word	0x40014000
 8008038:	40014400 	.word	0x40014400
 800803c:	40014800 	.word	0x40014800
 8008040:	fffffcff 	.word	0xfffffcff

08008044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	2201      	movs	r2, #1
 8008054:	4393      	bics	r3, r2
 8008056:	001a      	movs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2270      	movs	r2, #112	; 0x70
 8008072:	4393      	bics	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2203      	movs	r2, #3
 800807a:	4393      	bics	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2202      	movs	r2, #2
 800808c:	4393      	bics	r3, r2
 800808e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a27      	ldr	r2, [pc, #156]	; (800813c <TIM_OC1_SetConfig+0xf8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00b      	beq.n	80080ba <TIM_OC1_SetConfig+0x76>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a26      	ldr	r2, [pc, #152]	; (8008140 <TIM_OC1_SetConfig+0xfc>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_OC1_SetConfig+0x76>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a25      	ldr	r2, [pc, #148]	; (8008144 <TIM_OC1_SetConfig+0x100>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_OC1_SetConfig+0x76>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a24      	ldr	r2, [pc, #144]	; (8008148 <TIM_OC1_SetConfig+0x104>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d10c      	bne.n	80080d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2208      	movs	r2, #8
 80080be:	4393      	bics	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2204      	movs	r2, #4
 80080d0:	4393      	bics	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a19      	ldr	r2, [pc, #100]	; (800813c <TIM_OC1_SetConfig+0xf8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00b      	beq.n	80080f4 <TIM_OC1_SetConfig+0xb0>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a18      	ldr	r2, [pc, #96]	; (8008140 <TIM_OC1_SetConfig+0xfc>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d007      	beq.n	80080f4 <TIM_OC1_SetConfig+0xb0>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <TIM_OC1_SetConfig+0x100>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d003      	beq.n	80080f4 <TIM_OC1_SetConfig+0xb0>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a16      	ldr	r2, [pc, #88]	; (8008148 <TIM_OC1_SetConfig+0x104>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d111      	bne.n	8008118 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4a15      	ldr	r2, [pc, #84]	; (800814c <TIM_OC1_SetConfig+0x108>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	4a14      	ldr	r2, [pc, #80]	; (8008150 <TIM_OC1_SetConfig+0x10c>)
 8008100:	4013      	ands	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4313      	orrs	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	621a      	str	r2, [r3, #32]
}
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	46bd      	mov	sp, r7
 8008136:	b006      	add	sp, #24
 8008138:	bd80      	pop	{r7, pc}
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	40012c00 	.word	0x40012c00
 8008140:	40014000 	.word	0x40014000
 8008144:	40014400 	.word	0x40014400
 8008148:	40014800 	.word	0x40014800
 800814c:	fffffeff 	.word	0xfffffeff
 8008150:	fffffdff 	.word	0xfffffdff

08008154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	2210      	movs	r2, #16
 8008164:	4393      	bics	r3, r2
 8008166:	001a      	movs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a2e      	ldr	r2, [pc, #184]	; (800823c <TIM_OC2_SetConfig+0xe8>)
 8008182:	4013      	ands	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4a2d      	ldr	r2, [pc, #180]	; (8008240 <TIM_OC2_SetConfig+0xec>)
 800818a:	4013      	ands	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2220      	movs	r2, #32
 800819e:	4393      	bics	r3, r2
 80081a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a24      	ldr	r2, [pc, #144]	; (8008244 <TIM_OC2_SetConfig+0xf0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d10d      	bne.n	80081d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2280      	movs	r2, #128	; 0x80
 80081ba:	4393      	bics	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2240      	movs	r2, #64	; 0x40
 80081ce:	4393      	bics	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a1b      	ldr	r2, [pc, #108]	; (8008244 <TIM_OC2_SetConfig+0xf0>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00b      	beq.n	80081f2 <TIM_OC2_SetConfig+0x9e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1a      	ldr	r2, [pc, #104]	; (8008248 <TIM_OC2_SetConfig+0xf4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <TIM_OC2_SetConfig+0x9e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a19      	ldr	r2, [pc, #100]	; (800824c <TIM_OC2_SetConfig+0xf8>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d003      	beq.n	80081f2 <TIM_OC2_SetConfig+0x9e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a18      	ldr	r2, [pc, #96]	; (8008250 <TIM_OC2_SetConfig+0xfc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d113      	bne.n	800821a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	4a17      	ldr	r2, [pc, #92]	; (8008254 <TIM_OC2_SetConfig+0x100>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4a16      	ldr	r2, [pc, #88]	; (8008258 <TIM_OC2_SetConfig+0x104>)
 80081fe:	4013      	ands	r3, r2
 8008200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	621a      	str	r2, [r3, #32]
}
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	46bd      	mov	sp, r7
 8008238:	b006      	add	sp, #24
 800823a:	bd80      	pop	{r7, pc}
 800823c:	ffff8fff 	.word	0xffff8fff
 8008240:	fffffcff 	.word	0xfffffcff
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40014000 	.word	0x40014000
 800824c:	40014400 	.word	0x40014400
 8008250:	40014800 	.word	0x40014800
 8008254:	fffffbff 	.word	0xfffffbff
 8008258:	fffff7ff 	.word	0xfffff7ff

0800825c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	4a35      	ldr	r2, [pc, #212]	; (8008340 <TIM_OC3_SetConfig+0xe4>)
 800826c:	401a      	ands	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2270      	movs	r2, #112	; 0x70
 8008288:	4393      	bics	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2203      	movs	r2, #3
 8008290:	4393      	bics	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	4a28      	ldr	r2, [pc, #160]	; (8008344 <TIM_OC3_SetConfig+0xe8>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a24      	ldr	r2, [pc, #144]	; (8008348 <TIM_OC3_SetConfig+0xec>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d10d      	bne.n	80082d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	4a23      	ldr	r2, [pc, #140]	; (800834c <TIM_OC3_SetConfig+0xf0>)
 80082be:	4013      	ands	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	4a1f      	ldr	r2, [pc, #124]	; (8008350 <TIM_OC3_SetConfig+0xf4>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a1b      	ldr	r2, [pc, #108]	; (8008348 <TIM_OC3_SetConfig+0xec>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <TIM_OC3_SetConfig+0x9a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <TIM_OC3_SetConfig+0xf8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_OC3_SetConfig+0x9a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <TIM_OC3_SetConfig+0xfc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC3_SetConfig+0x9a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1a      	ldr	r2, [pc, #104]	; (800835c <TIM_OC3_SetConfig+0x100>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d113      	bne.n	800831e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	4a19      	ldr	r2, [pc, #100]	; (8008360 <TIM_OC3_SetConfig+0x104>)
 80082fa:	4013      	ands	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	4a18      	ldr	r2, [pc, #96]	; (8008364 <TIM_OC3_SetConfig+0x108>)
 8008302:	4013      	ands	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b006      	add	sp, #24
 800833e:	bd80      	pop	{r7, pc}
 8008340:	fffffeff 	.word	0xfffffeff
 8008344:	fffffdff 	.word	0xfffffdff
 8008348:	40012c00 	.word	0x40012c00
 800834c:	fffff7ff 	.word	0xfffff7ff
 8008350:	fffffbff 	.word	0xfffffbff
 8008354:	40014000 	.word	0x40014000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800
 8008360:	ffffefff 	.word	0xffffefff
 8008364:	ffffdfff 	.word	0xffffdfff

08008368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	4a28      	ldr	r2, [pc, #160]	; (8008418 <TIM_OC4_SetConfig+0xb0>)
 8008378:	401a      	ands	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4a22      	ldr	r2, [pc, #136]	; (800841c <TIM_OC4_SetConfig+0xb4>)
 8008394:	4013      	ands	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4a21      	ldr	r2, [pc, #132]	; (8008420 <TIM_OC4_SetConfig+0xb8>)
 800839c:	4013      	ands	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <TIM_OC4_SetConfig+0xbc>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	031b      	lsls	r3, r3, #12
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a19      	ldr	r2, [pc, #100]	; (8008428 <TIM_OC4_SetConfig+0xc0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_OC4_SetConfig+0x78>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a18      	ldr	r2, [pc, #96]	; (800842c <TIM_OC4_SetConfig+0xc4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_OC4_SetConfig+0x78>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a17      	ldr	r2, [pc, #92]	; (8008430 <TIM_OC4_SetConfig+0xc8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC4_SetConfig+0x78>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a16      	ldr	r2, [pc, #88]	; (8008434 <TIM_OC4_SetConfig+0xcc>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d109      	bne.n	80083f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	4a15      	ldr	r2, [pc, #84]	; (8008438 <TIM_OC4_SetConfig+0xd0>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	019b      	lsls	r3, r3, #6
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	46bd      	mov	sp, r7
 8008412:	b006      	add	sp, #24
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	ffffefff 	.word	0xffffefff
 800841c:	ffff8fff 	.word	0xffff8fff
 8008420:	fffffcff 	.word	0xfffffcff
 8008424:	ffffdfff 	.word	0xffffdfff
 8008428:	40012c00 	.word	0x40012c00
 800842c:	40014000 	.word	0x40014000
 8008430:	40014400 	.word	0x40014400
 8008434:	40014800 	.word	0x40014800
 8008438:	ffffbfff 	.word	0xffffbfff

0800843c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	221f      	movs	r2, #31
 800844c:	4013      	ands	r3, r2
 800844e:	2201      	movs	r2, #1
 8008450:	409a      	lsls	r2, r3
 8008452:	0013      	movs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	43d2      	mvns	r2, r2
 800845e:	401a      	ands	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	211f      	movs	r1, #31
 800846c:	400b      	ands	r3, r1
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4099      	lsls	r1, r3
 8008472:	000b      	movs	r3, r1
 8008474:	431a      	orrs	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	46c0      	nop			; (mov r8, r8)
 800847c:	46bd      	mov	sp, r7
 800847e:	b006      	add	sp, #24
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	223c      	movs	r2, #60	; 0x3c
 8008492:	5c9b      	ldrb	r3, [r3, r2]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d101      	bne.n	800849c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008498:	2302      	movs	r3, #2
 800849a:	e047      	b.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	223c      	movs	r2, #60	; 0x3c
 80084a0:	2101      	movs	r1, #1
 80084a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	223d      	movs	r2, #61	; 0x3d
 80084a8:	2102      	movs	r1, #2
 80084aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2270      	movs	r2, #112	; 0x70
 80084c0:	4393      	bics	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a16      	ldr	r2, [pc, #88]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00f      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	05db      	lsls	r3, r3, #23
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d009      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a11      	ldr	r2, [pc, #68]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a10      	ldr	r2, [pc, #64]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d10c      	bne.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2280      	movs	r2, #128	; 0x80
 8008504:	4393      	bics	r3, r2
 8008506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	4313      	orrs	r3, r2
 8008510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	223d      	movs	r2, #61	; 0x3d
 800851e:	2101      	movs	r1, #1
 8008520:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	223c      	movs	r2, #60	; 0x3c
 8008526:	2100      	movs	r1, #0
 8008528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	0018      	movs	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	b004      	add	sp, #16
 8008532:	bd80      	pop	{r7, pc}
 8008534:	40012c00 	.word	0x40012c00
 8008538:	40000400 	.word	0x40000400
 800853c:	40014000 	.word	0x40014000

08008540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	223c      	movs	r2, #60	; 0x3c
 8008552:	5c9b      	ldrb	r3, [r3, r2]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008558:	2302      	movs	r3, #2
 800855a:	e03e      	b.n	80085da <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	223c      	movs	r2, #60	; 0x3c
 8008560:	2101      	movs	r1, #1
 8008562:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	22ff      	movs	r2, #255	; 0xff
 8008568:	4393      	bics	r3, r2
 800856a:	001a      	movs	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	4313      	orrs	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4a1b      	ldr	r2, [pc, #108]	; (80085e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008578:	401a      	ands	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008586:	401a      	ands	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a16      	ldr	r2, [pc, #88]	; (80085ec <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008594:	401a      	ands	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4a13      	ldr	r2, [pc, #76]	; (80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80085a2:	401a      	ands	r2, r3
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a11      	ldr	r2, [pc, #68]	; (80085f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80085b0:	401a      	ands	r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a0e      	ldr	r2, [pc, #56]	; (80085f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80085be:	401a      	ands	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	223c      	movs	r2, #60	; 0x3c
 80085d4:	2100      	movs	r1, #0
 80085d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	0018      	movs	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	b004      	add	sp, #16
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	fffffcff 	.word	0xfffffcff
 80085e8:	fffffbff 	.word	0xfffffbff
 80085ec:	fffff7ff 	.word	0xfffff7ff
 80085f0:	ffffefff 	.word	0xffffefff
 80085f4:	ffffdfff 	.word	0xffffdfff
 80085f8:	ffffbfff 	.word	0xffffbfff

080085fc <gcvt>:
 80085fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085fe:	001c      	movs	r4, r3
 8008600:	0015      	movs	r5, r2
 8008602:	2300      	movs	r3, #0
 8008604:	2200      	movs	r2, #0
 8008606:	b085      	sub	sp, #20
 8008608:	0006      	movs	r6, r0
 800860a:	000f      	movs	r7, r1
 800860c:	f7f9 fbda 	bl	8001dc4 <__aeabi_dcmplt>
 8008610:	0023      	movs	r3, r4
 8008612:	2800      	cmp	r0, #0
 8008614:	d003      	beq.n	800861e <gcvt+0x22>
 8008616:	232d      	movs	r3, #45	; 0x2d
 8008618:	3d01      	subs	r5, #1
 800861a:	7023      	strb	r3, [r4, #0]
 800861c:	1c63      	adds	r3, r4, #1
 800861e:	2200      	movs	r2, #0
 8008620:	4908      	ldr	r1, [pc, #32]	; (8008644 <gcvt+0x48>)
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	3267      	adds	r2, #103	; 0x67
 8008626:	9202      	str	r2, [sp, #8]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	9500      	str	r5, [sp, #0]
 800862c:	003b      	movs	r3, r7
 800862e:	0032      	movs	r2, r6
 8008630:	6808      	ldr	r0, [r1, #0]
 8008632:	f000 f99f 	bl	8008974 <_gcvt>
 8008636:	1e43      	subs	r3, r0, #1
 8008638:	4198      	sbcs	r0, r3
 800863a:	4240      	negs	r0, r0
 800863c:	4004      	ands	r4, r0
 800863e:	0020      	movs	r0, r4
 8008640:	b005      	add	sp, #20
 8008642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008644:	20000088 	.word	0x20000088

08008648 <__errno>:
 8008648:	4b01      	ldr	r3, [pc, #4]	; (8008650 <__errno+0x8>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	4770      	bx	lr
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	20000088 	.word	0x20000088

08008654 <__libc_init_array>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	2600      	movs	r6, #0
 8008658:	4d0c      	ldr	r5, [pc, #48]	; (800868c <__libc_init_array+0x38>)
 800865a:	4c0d      	ldr	r4, [pc, #52]	; (8008690 <__libc_init_array+0x3c>)
 800865c:	1b64      	subs	r4, r4, r5
 800865e:	10a4      	asrs	r4, r4, #2
 8008660:	42a6      	cmp	r6, r4
 8008662:	d109      	bne.n	8008678 <__libc_init_array+0x24>
 8008664:	2600      	movs	r6, #0
 8008666:	f002 fbfb 	bl	800ae60 <_init>
 800866a:	4d0a      	ldr	r5, [pc, #40]	; (8008694 <__libc_init_array+0x40>)
 800866c:	4c0a      	ldr	r4, [pc, #40]	; (8008698 <__libc_init_array+0x44>)
 800866e:	1b64      	subs	r4, r4, r5
 8008670:	10a4      	asrs	r4, r4, #2
 8008672:	42a6      	cmp	r6, r4
 8008674:	d105      	bne.n	8008682 <__libc_init_array+0x2e>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	00b3      	lsls	r3, r6, #2
 800867a:	58eb      	ldr	r3, [r5, r3]
 800867c:	4798      	blx	r3
 800867e:	3601      	adds	r6, #1
 8008680:	e7ee      	b.n	8008660 <__libc_init_array+0xc>
 8008682:	00b3      	lsls	r3, r6, #2
 8008684:	58eb      	ldr	r3, [r5, r3]
 8008686:	4798      	blx	r3
 8008688:	3601      	adds	r6, #1
 800868a:	e7f2      	b.n	8008672 <__libc_init_array+0x1e>
 800868c:	0800bde0 	.word	0x0800bde0
 8008690:	0800bde0 	.word	0x0800bde0
 8008694:	0800bde0 	.word	0x0800bde0
 8008698:	0800bde4 	.word	0x0800bde4

0800869c <malloc>:
 800869c:	b510      	push	{r4, lr}
 800869e:	4b03      	ldr	r3, [pc, #12]	; (80086ac <malloc+0x10>)
 80086a0:	0001      	movs	r1, r0
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	f000 f856 	bl	8008754 <_malloc_r>
 80086a8:	bd10      	pop	{r4, pc}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	20000088 	.word	0x20000088

080086b0 <memset>:
 80086b0:	0003      	movs	r3, r0
 80086b2:	1882      	adds	r2, r0, r2
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d100      	bne.n	80086ba <memset+0xa>
 80086b8:	4770      	bx	lr
 80086ba:	7019      	strb	r1, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	e7f9      	b.n	80086b4 <memset+0x4>

080086c0 <_free_r>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	0005      	movs	r5, r0
 80086c4:	2900      	cmp	r1, #0
 80086c6:	d010      	beq.n	80086ea <_free_r+0x2a>
 80086c8:	1f0c      	subs	r4, r1, #4
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da00      	bge.n	80086d2 <_free_r+0x12>
 80086d0:	18e4      	adds	r4, r4, r3
 80086d2:	0028      	movs	r0, r5
 80086d4:	f000 fa2a 	bl	8008b2c <__malloc_lock>
 80086d8:	4a1d      	ldr	r2, [pc, #116]	; (8008750 <_free_r+0x90>)
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d105      	bne.n	80086ec <_free_r+0x2c>
 80086e0:	6063      	str	r3, [r4, #4]
 80086e2:	6014      	str	r4, [r2, #0]
 80086e4:	0028      	movs	r0, r5
 80086e6:	f000 fa29 	bl	8008b3c <__malloc_unlock>
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d908      	bls.n	8008702 <_free_r+0x42>
 80086f0:	6821      	ldr	r1, [r4, #0]
 80086f2:	1860      	adds	r0, r4, r1
 80086f4:	4283      	cmp	r3, r0
 80086f6:	d1f3      	bne.n	80086e0 <_free_r+0x20>
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	1841      	adds	r1, r0, r1
 80086fe:	6021      	str	r1, [r4, #0]
 8008700:	e7ee      	b.n	80086e0 <_free_r+0x20>
 8008702:	001a      	movs	r2, r3
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <_free_r+0x4e>
 800870a:	42a3      	cmp	r3, r4
 800870c:	d9f9      	bls.n	8008702 <_free_r+0x42>
 800870e:	6811      	ldr	r1, [r2, #0]
 8008710:	1850      	adds	r0, r2, r1
 8008712:	42a0      	cmp	r0, r4
 8008714:	d10b      	bne.n	800872e <_free_r+0x6e>
 8008716:	6820      	ldr	r0, [r4, #0]
 8008718:	1809      	adds	r1, r1, r0
 800871a:	1850      	adds	r0, r2, r1
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	4283      	cmp	r3, r0
 8008720:	d1e0      	bne.n	80086e4 <_free_r+0x24>
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	1841      	adds	r1, r0, r1
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	6053      	str	r3, [r2, #4]
 800872c:	e7da      	b.n	80086e4 <_free_r+0x24>
 800872e:	42a0      	cmp	r0, r4
 8008730:	d902      	bls.n	8008738 <_free_r+0x78>
 8008732:	230c      	movs	r3, #12
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	e7d5      	b.n	80086e4 <_free_r+0x24>
 8008738:	6821      	ldr	r1, [r4, #0]
 800873a:	1860      	adds	r0, r4, r1
 800873c:	4283      	cmp	r3, r0
 800873e:	d103      	bne.n	8008748 <_free_r+0x88>
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	1841      	adds	r1, r0, r1
 8008746:	6021      	str	r1, [r4, #0]
 8008748:	6063      	str	r3, [r4, #4]
 800874a:	6054      	str	r4, [r2, #4]
 800874c:	e7ca      	b.n	80086e4 <_free_r+0x24>
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	20001128 	.word	0x20001128

08008754 <_malloc_r>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	2303      	movs	r3, #3
 8008758:	1ccd      	adds	r5, r1, #3
 800875a:	439d      	bics	r5, r3
 800875c:	3508      	adds	r5, #8
 800875e:	0006      	movs	r6, r0
 8008760:	2d0c      	cmp	r5, #12
 8008762:	d21f      	bcs.n	80087a4 <_malloc_r+0x50>
 8008764:	250c      	movs	r5, #12
 8008766:	42a9      	cmp	r1, r5
 8008768:	d81e      	bhi.n	80087a8 <_malloc_r+0x54>
 800876a:	0030      	movs	r0, r6
 800876c:	f000 f9de 	bl	8008b2c <__malloc_lock>
 8008770:	4925      	ldr	r1, [pc, #148]	; (8008808 <_malloc_r+0xb4>)
 8008772:	680a      	ldr	r2, [r1, #0]
 8008774:	0014      	movs	r4, r2
 8008776:	2c00      	cmp	r4, #0
 8008778:	d11a      	bne.n	80087b0 <_malloc_r+0x5c>
 800877a:	4f24      	ldr	r7, [pc, #144]	; (800880c <_malloc_r+0xb8>)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <_malloc_r+0x38>
 8008782:	0021      	movs	r1, r4
 8008784:	0030      	movs	r0, r6
 8008786:	f000 f843 	bl	8008810 <_sbrk_r>
 800878a:	6038      	str	r0, [r7, #0]
 800878c:	0029      	movs	r1, r5
 800878e:	0030      	movs	r0, r6
 8008790:	f000 f83e 	bl	8008810 <_sbrk_r>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d12b      	bne.n	80087f0 <_malloc_r+0x9c>
 8008798:	230c      	movs	r3, #12
 800879a:	0030      	movs	r0, r6
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	f000 f9cd 	bl	8008b3c <__malloc_unlock>
 80087a2:	e003      	b.n	80087ac <_malloc_r+0x58>
 80087a4:	2d00      	cmp	r5, #0
 80087a6:	dade      	bge.n	8008766 <_malloc_r+0x12>
 80087a8:	230c      	movs	r3, #12
 80087aa:	6033      	str	r3, [r6, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	1b5b      	subs	r3, r3, r5
 80087b4:	d419      	bmi.n	80087ea <_malloc_r+0x96>
 80087b6:	2b0b      	cmp	r3, #11
 80087b8:	d903      	bls.n	80087c2 <_malloc_r+0x6e>
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	18e4      	adds	r4, r4, r3
 80087be:	6025      	str	r5, [r4, #0]
 80087c0:	e003      	b.n	80087ca <_malloc_r+0x76>
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	42a2      	cmp	r2, r4
 80087c6:	d10e      	bne.n	80087e6 <_malloc_r+0x92>
 80087c8:	600b      	str	r3, [r1, #0]
 80087ca:	0030      	movs	r0, r6
 80087cc:	f000 f9b6 	bl	8008b3c <__malloc_unlock>
 80087d0:	0020      	movs	r0, r4
 80087d2:	2207      	movs	r2, #7
 80087d4:	300b      	adds	r0, #11
 80087d6:	1d23      	adds	r3, r4, #4
 80087d8:	4390      	bics	r0, r2
 80087da:	1ac2      	subs	r2, r0, r3
 80087dc:	4298      	cmp	r0, r3
 80087de:	d0e6      	beq.n	80087ae <_malloc_r+0x5a>
 80087e0:	1a1b      	subs	r3, r3, r0
 80087e2:	50a3      	str	r3, [r4, r2]
 80087e4:	e7e3      	b.n	80087ae <_malloc_r+0x5a>
 80087e6:	6053      	str	r3, [r2, #4]
 80087e8:	e7ef      	b.n	80087ca <_malloc_r+0x76>
 80087ea:	0022      	movs	r2, r4
 80087ec:	6864      	ldr	r4, [r4, #4]
 80087ee:	e7c2      	b.n	8008776 <_malloc_r+0x22>
 80087f0:	2303      	movs	r3, #3
 80087f2:	1cc4      	adds	r4, r0, #3
 80087f4:	439c      	bics	r4, r3
 80087f6:	42a0      	cmp	r0, r4
 80087f8:	d0e1      	beq.n	80087be <_malloc_r+0x6a>
 80087fa:	1a21      	subs	r1, r4, r0
 80087fc:	0030      	movs	r0, r6
 80087fe:	f000 f807 	bl	8008810 <_sbrk_r>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d1db      	bne.n	80087be <_malloc_r+0x6a>
 8008806:	e7c7      	b.n	8008798 <_malloc_r+0x44>
 8008808:	20001128 	.word	0x20001128
 800880c:	2000112c 	.word	0x2000112c

08008810 <_sbrk_r>:
 8008810:	2300      	movs	r3, #0
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	4d06      	ldr	r5, [pc, #24]	; (8008830 <_sbrk_r+0x20>)
 8008816:	0004      	movs	r4, r0
 8008818:	0008      	movs	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7fb fd16 	bl	800424c <_sbrk>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d103      	bne.n	800882c <_sbrk_r+0x1c>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d000      	beq.n	800882c <_sbrk_r+0x1c>
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	bd70      	pop	{r4, r5, r6, pc}
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	200012cc 	.word	0x200012cc

08008834 <__assert_func>:
 8008834:	b530      	push	{r4, r5, lr}
 8008836:	0014      	movs	r4, r2
 8008838:	001a      	movs	r2, r3
 800883a:	4b09      	ldr	r3, [pc, #36]	; (8008860 <__assert_func+0x2c>)
 800883c:	0005      	movs	r5, r0
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	b085      	sub	sp, #20
 8008842:	68d8      	ldr	r0, [r3, #12]
 8008844:	4b07      	ldr	r3, [pc, #28]	; (8008864 <__assert_func+0x30>)
 8008846:	2c00      	cmp	r4, #0
 8008848:	d101      	bne.n	800884e <__assert_func+0x1a>
 800884a:	4b07      	ldr	r3, [pc, #28]	; (8008868 <__assert_func+0x34>)
 800884c:	001c      	movs	r4, r3
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	9100      	str	r1, [sp, #0]
 8008852:	002b      	movs	r3, r5
 8008854:	4905      	ldr	r1, [pc, #20]	; (800886c <__assert_func+0x38>)
 8008856:	9402      	str	r4, [sp, #8]
 8008858:	f000 f958 	bl	8008b0c <fiprintf>
 800885c:	f001 f8f6 	bl	8009a4c <abort>
 8008860:	20000088 	.word	0x20000088
 8008864:	0800bb18 	.word	0x0800bb18
 8008868:	0800bb53 	.word	0x0800bb53
 800886c:	0800bb25 	.word	0x0800bb25

08008870 <print_e>:
 8008870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008872:	b08b      	sub	sp, #44	; 0x2c
 8008874:	000f      	movs	r7, r1
 8008876:	a910      	add	r1, sp, #64	; 0x40
 8008878:	c920      	ldmia	r1!, {r5}
 800887a:	780e      	ldrb	r6, [r1, #0]
 800887c:	a908      	add	r1, sp, #32
 800887e:	9104      	str	r1, [sp, #16]
 8008880:	a907      	add	r1, sp, #28
 8008882:	9103      	str	r1, [sp, #12]
 8008884:	a909      	add	r1, sp, #36	; 0x24
 8008886:	9102      	str	r1, [sp, #8]
 8008888:	1c69      	adds	r1, r5, #1
 800888a:	9101      	str	r1, [sp, #4]
 800888c:	2102      	movs	r1, #2
 800888e:	9100      	str	r1, [sp, #0]
 8008890:	f001 f96e 	bl	8009b70 <_dtoa_r>
 8008894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008896:	4b36      	ldr	r3, [pc, #216]	; (8008970 <print_e+0x100>)
 8008898:	0001      	movs	r1, r0
 800889a:	429a      	cmp	r2, r3
 800889c:	d104      	bne.n	80088a8 <print_e+0x38>
 800889e:	0038      	movs	r0, r7
 80088a0:	f000 fffe 	bl	80098a0 <strcpy>
 80088a4:	b00b      	add	sp, #44	; 0x2c
 80088a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a8:	7801      	ldrb	r1, [r0, #0]
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	1c7c      	adds	r4, r7, #1
 80088ae:	7039      	strb	r1, [r7, #0]
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	dd01      	ble.n	80088b8 <print_e+0x48>
 80088b4:	2101      	movs	r1, #1
 80088b6:	9112      	str	r1, [sp, #72]	; 0x48
 80088b8:	212e      	movs	r1, #46	; 0x2e
 80088ba:	7818      	ldrb	r0, [r3, #0]
 80088bc:	2800      	cmp	r0, #0
 80088be:	d001      	beq.n	80088c4 <print_e+0x54>
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	dc35      	bgt.n	8008930 <print_e+0xc0>
 80088c4:	2e67      	cmp	r6, #103	; 0x67
 80088c6:	d04b      	beq.n	8008960 <print_e+0xf0>
 80088c8:	2e47      	cmp	r6, #71	; 0x47
 80088ca:	d04b      	beq.n	8008964 <print_e+0xf4>
 80088cc:	232e      	movs	r3, #46	; 0x2e
 80088ce:	2130      	movs	r1, #48	; 0x30
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	dc3a      	bgt.n	800894a <print_e+0xda>
 80088d4:	1e53      	subs	r3, r2, #1
 80088d6:	7026      	strb	r6, [r4, #0]
 80088d8:	9309      	str	r3, [sp, #36]	; 0x24
 80088da:	1ca5      	adds	r5, r4, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	da43      	bge.n	8008968 <print_e+0xf8>
 80088e0:	232d      	movs	r3, #45	; 0x2d
 80088e2:	7063      	strb	r3, [r4, #1]
 80088e4:	3b2c      	subs	r3, #44	; 0x2c
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80088ec:	2e63      	cmp	r6, #99	; 0x63
 80088ee:	dd0d      	ble.n	800890c <print_e+0x9c>
 80088f0:	2164      	movs	r1, #100	; 0x64
 80088f2:	0030      	movs	r0, r6
 80088f4:	f7f7 fc90 	bl	8000218 <__divsi3>
 80088f8:	0003      	movs	r3, r0
 80088fa:	0002      	movs	r2, r0
 80088fc:	2064      	movs	r0, #100	; 0x64
 80088fe:	4240      	negs	r0, r0
 8008900:	4358      	muls	r0, r3
 8008902:	3230      	adds	r2, #48	; 0x30
 8008904:	1980      	adds	r0, r0, r6
 8008906:	1ce5      	adds	r5, r4, #3
 8008908:	70a2      	strb	r2, [r4, #2]
 800890a:	9009      	str	r0, [sp, #36]	; 0x24
 800890c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800890e:	210a      	movs	r1, #10
 8008910:	0020      	movs	r0, r4
 8008912:	f7f7 fc81 	bl	8000218 <__divsi3>
 8008916:	0003      	movs	r3, r0
 8008918:	0002      	movs	r2, r0
 800891a:	200a      	movs	r0, #10
 800891c:	4240      	negs	r0, r0
 800891e:	4358      	muls	r0, r3
 8008920:	2300      	movs	r3, #0
 8008922:	1900      	adds	r0, r0, r4
 8008924:	3230      	adds	r2, #48	; 0x30
 8008926:	3030      	adds	r0, #48	; 0x30
 8008928:	702a      	strb	r2, [r5, #0]
 800892a:	7068      	strb	r0, [r5, #1]
 800892c:	70ab      	strb	r3, [r5, #2]
 800892e:	e7b9      	b.n	80088a4 <print_e+0x34>
 8008930:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008932:	2800      	cmp	r0, #0
 8008934:	d001      	beq.n	800893a <print_e+0xca>
 8008936:	7021      	strb	r1, [r4, #0]
 8008938:	3401      	adds	r4, #1
 800893a:	7818      	ldrb	r0, [r3, #0]
 800893c:	3d01      	subs	r5, #1
 800893e:	7020      	strb	r0, [r4, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	3301      	adds	r3, #1
 8008944:	3401      	adds	r4, #1
 8008946:	9012      	str	r0, [sp, #72]	; 0x48
 8008948:	e7b7      	b.n	80088ba <print_e+0x4a>
 800894a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800894c:	2800      	cmp	r0, #0
 800894e:	d001      	beq.n	8008954 <print_e+0xe4>
 8008950:	7023      	strb	r3, [r4, #0]
 8008952:	3401      	adds	r4, #1
 8008954:	2000      	movs	r0, #0
 8008956:	7021      	strb	r1, [r4, #0]
 8008958:	3d01      	subs	r5, #1
 800895a:	3401      	adds	r4, #1
 800895c:	9012      	str	r0, [sp, #72]	; 0x48
 800895e:	e7b7      	b.n	80088d0 <print_e+0x60>
 8008960:	2665      	movs	r6, #101	; 0x65
 8008962:	e7b7      	b.n	80088d4 <print_e+0x64>
 8008964:	2645      	movs	r6, #69	; 0x45
 8008966:	e7b5      	b.n	80088d4 <print_e+0x64>
 8008968:	232b      	movs	r3, #43	; 0x2b
 800896a:	7063      	strb	r3, [r4, #1]
 800896c:	e7bd      	b.n	80088ea <print_e+0x7a>
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	0000270f 	.word	0x0000270f

08008974 <_gcvt>:
 8008974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008976:	0016      	movs	r6, r2
 8008978:	001d      	movs	r5, r3
 800897a:	b08d      	sub	sp, #52	; 0x34
 800897c:	ab14      	add	r3, sp, #80	; 0x50
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	0007      	movs	r7, r0
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	0030      	movs	r0, r6
 800898a:	0029      	movs	r1, r5
 800898c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800898e:	f7f9 fa19 	bl	8001dc4 <__aeabi_dcmplt>
 8008992:	2800      	cmp	r0, #0
 8008994:	d002      	beq.n	800899c <_gcvt+0x28>
 8008996:	2380      	movs	r3, #128	; 0x80
 8008998:	061b      	lsls	r3, r3, #24
 800899a:	18ed      	adds	r5, r5, r3
 800899c:	2200      	movs	r2, #0
 800899e:	2300      	movs	r3, #0
 80089a0:	0030      	movs	r0, r6
 80089a2:	0029      	movs	r1, r5
 80089a4:	f7f9 fa08 	bl	8001db8 <__aeabi_dcmpeq>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d006      	beq.n	80089ba <_gcvt+0x46>
 80089ac:	2330      	movs	r3, #48	; 0x30
 80089ae:	7023      	strb	r3, [r4, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	7063      	strb	r3, [r4, #1]
 80089b4:	0020      	movs	r0, r4
 80089b6:	b00d      	add	sp, #52	; 0x34
 80089b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ba:	0030      	movs	r0, r6
 80089bc:	0029      	movs	r1, r5
 80089be:	4a50      	ldr	r2, [pc, #320]	; (8008b00 <_gcvt+0x18c>)
 80089c0:	4b50      	ldr	r3, [pc, #320]	; (8008b04 <_gcvt+0x190>)
 80089c2:	f7f9 fa09 	bl	8001dd8 <__aeabi_dcmple>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d00d      	beq.n	80089e6 <_gcvt+0x72>
 80089ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089cc:	0032      	movs	r2, r6
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	0021      	movs	r1, r4
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089d8:	0038      	movs	r0, r7
 80089da:	3b01      	subs	r3, #1
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	002b      	movs	r3, r5
 80089e0:	f7ff ff46 	bl	8008870 <print_e>
 80089e4:	e7e6      	b.n	80089b4 <_gcvt+0x40>
 80089e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089e8:	f000 fc4e 	bl	8009288 <_mprec_log10>
 80089ec:	0032      	movs	r2, r6
 80089ee:	002b      	movs	r3, r5
 80089f0:	f7f9 f9f2 	bl	8001dd8 <__aeabi_dcmple>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d1e8      	bne.n	80089ca <_gcvt+0x56>
 80089f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	ab0a      	add	r3, sp, #40	; 0x28
 80089fe:	9303      	str	r3, [sp, #12]
 8008a00:	ab09      	add	r3, sp, #36	; 0x24
 8008a02:	9302      	str	r3, [sp, #8]
 8008a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a06:	0032      	movs	r2, r6
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	0038      	movs	r0, r7
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	002b      	movs	r3, r5
 8008a12:	f001 f8ad 	bl	8009b70 <_dtoa_r>
 8008a16:	4b3c      	ldr	r3, [pc, #240]	; (8008b08 <_gcvt+0x194>)
 8008a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a1a:	0001      	movs	r1, r0
 8008a1c:	0020      	movs	r0, r4
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d00d      	beq.n	8008a3e <_gcvt+0xca>
 8008a22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a24:	18e2      	adds	r2, r4, r3
 8008a26:	780e      	ldrb	r6, [r1, #0]
 8008a28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a2a:	1a13      	subs	r3, r2, r0
 8008a2c:	2e00      	cmp	r6, #0
 8008a2e:	d002      	beq.n	8008a36 <_gcvt+0xc2>
 8008a30:	2d00      	cmp	r5, #0
 8008a32:	dc07      	bgt.n	8008a44 <_gcvt+0xd0>
 8008a34:	2600      	movs	r6, #0
 8008a36:	2201      	movs	r2, #1
 8008a38:	2730      	movs	r7, #48	; 0x30
 8008a3a:	4694      	mov	ip, r2
 8008a3c:	e00f      	b.n	8008a5e <_gcvt+0xea>
 8008a3e:	f000 ff2f 	bl	80098a0 <strcpy>
 8008a42:	e7b7      	b.n	80089b4 <_gcvt+0x40>
 8008a44:	3d01      	subs	r5, #1
 8008a46:	7006      	strb	r6, [r0, #0]
 8008a48:	3101      	adds	r1, #1
 8008a4a:	9509      	str	r5, [sp, #36]	; 0x24
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	e7ea      	b.n	8008a26 <_gcvt+0xb2>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	dd07      	ble.n	8008a64 <_gcvt+0xf0>
 8008a54:	4666      	mov	r6, ip
 8008a56:	7007      	strb	r7, [r0, #0]
 8008a58:	3d01      	subs	r5, #1
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	0002      	movs	r2, r0
 8008a60:	2d00      	cmp	r5, #0
 8008a62:	dcf5      	bgt.n	8008a50 <_gcvt+0xdc>
 8008a64:	2e00      	cmp	r6, #0
 8008a66:	d000      	beq.n	8008a6a <_gcvt+0xf6>
 8008a68:	9509      	str	r5, [sp, #36]	; 0x24
 8008a6a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	d102      	bne.n	8008a76 <_gcvt+0x102>
 8008a70:	780d      	ldrb	r5, [r1, #0]
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	d029      	beq.n	8008aca <_gcvt+0x156>
 8008a76:	4284      	cmp	r4, r0
 8008a78:	d102      	bne.n	8008a80 <_gcvt+0x10c>
 8008a7a:	2230      	movs	r2, #48	; 0x30
 8008a7c:	7022      	strb	r2, [r4, #0]
 8008a7e:	1c62      	adds	r2, r4, #1
 8008a80:	202e      	movs	r0, #46	; 0x2e
 8008a82:	7010      	strb	r0, [r2, #0]
 8008a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a86:	0015      	movs	r5, r2
 8008a88:	1a87      	subs	r7, r0, r2
 8008a8a:	9707      	str	r7, [sp, #28]
 8008a8c:	2701      	movs	r7, #1
 8008a8e:	2600      	movs	r6, #0
 8008a90:	46bc      	mov	ip, r7
 8008a92:	9f07      	ldr	r7, [sp, #28]
 8008a94:	42ef      	cmn	r7, r5
 8008a96:	d41b      	bmi.n	8008ad0 <_gcvt+0x15c>
 8008a98:	2500      	movs	r5, #0
 8008a9a:	4247      	negs	r7, r0
 8008a9c:	42a8      	cmp	r0, r5
 8008a9e:	dc00      	bgt.n	8008aa2 <_gcvt+0x12e>
 8008aa0:	003d      	movs	r5, r7
 8008aa2:	3501      	adds	r5, #1
 8008aa4:	1952      	adds	r2, r2, r5
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	42a8      	cmp	r0, r5
 8008aaa:	dc00      	bgt.n	8008aae <_gcvt+0x13a>
 8008aac:	003d      	movs	r5, r7
 8008aae:	1945      	adds	r5, r0, r5
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	d000      	beq.n	8008ab6 <_gcvt+0x142>
 8008ab4:	9509      	str	r5, [sp, #36]	; 0x24
 8008ab6:	0010      	movs	r0, r2
 8008ab8:	780d      	ldrb	r5, [r1, #0]
 8008aba:	0002      	movs	r2, r0
 8008abc:	2d00      	cmp	r5, #0
 8008abe:	d001      	beq.n	8008ac4 <_gcvt+0x150>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dc0a      	bgt.n	8008ada <_gcvt+0x166>
 8008ac4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	d116      	bne.n	8008af8 <_gcvt+0x184>
 8008aca:	2300      	movs	r3, #0
 8008acc:	7013      	strb	r3, [r2, #0]
 8008ace:	e771      	b.n	80089b4 <_gcvt+0x40>
 8008ad0:	2630      	movs	r6, #48	; 0x30
 8008ad2:	3501      	adds	r5, #1
 8008ad4:	702e      	strb	r6, [r5, #0]
 8008ad6:	4666      	mov	r6, ip
 8008ad8:	e7db      	b.n	8008a92 <_gcvt+0x11e>
 8008ada:	7005      	strb	r5, [r0, #0]
 8008adc:	3101      	adds	r1, #1
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	e7e9      	b.n	8008ab8 <_gcvt+0x144>
 8008ae4:	7016      	strb	r6, [r2, #0]
 8008ae6:	3201      	adds	r2, #1
 8008ae8:	1aa9      	subs	r1, r5, r2
 8008aea:	2900      	cmp	r1, #0
 8008aec:	dcfa      	bgt.n	8008ae4 <_gcvt+0x170>
 8008aee:	43da      	mvns	r2, r3
 8008af0:	17d2      	asrs	r2, r2, #31
 8008af2:	401a      	ands	r2, r3
 8008af4:	1882      	adds	r2, r0, r2
 8008af6:	e7e8      	b.n	8008aca <_gcvt+0x156>
 8008af8:	0002      	movs	r2, r0
 8008afa:	2630      	movs	r6, #48	; 0x30
 8008afc:	181d      	adds	r5, r3, r0
 8008afe:	e7f3      	b.n	8008ae8 <_gcvt+0x174>
 8008b00:	eb1c432d 	.word	0xeb1c432d
 8008b04:	3f1a36e2 	.word	0x3f1a36e2
 8008b08:	0000270f 	.word	0x0000270f

08008b0c <fiprintf>:
 8008b0c:	b40e      	push	{r1, r2, r3}
 8008b0e:	b503      	push	{r0, r1, lr}
 8008b10:	0001      	movs	r1, r0
 8008b12:	ab03      	add	r3, sp, #12
 8008b14:	4804      	ldr	r0, [pc, #16]	; (8008b28 <fiprintf+0x1c>)
 8008b16:	cb04      	ldmia	r3!, {r2}
 8008b18:	6800      	ldr	r0, [r0, #0]
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	f000 fc04 	bl	8009328 <_vfiprintf_r>
 8008b20:	b002      	add	sp, #8
 8008b22:	bc08      	pop	{r3}
 8008b24:	b003      	add	sp, #12
 8008b26:	4718      	bx	r3
 8008b28:	20000088 	.word	0x20000088

08008b2c <__malloc_lock>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	4802      	ldr	r0, [pc, #8]	; (8008b38 <__malloc_lock+0xc>)
 8008b30:	f002 f80b 	bl	800ab4a <__retarget_lock_acquire_recursive>
 8008b34:	bd10      	pop	{r4, pc}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	200012d4 	.word	0x200012d4

08008b3c <__malloc_unlock>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	4802      	ldr	r0, [pc, #8]	; (8008b48 <__malloc_unlock+0xc>)
 8008b40:	f002 f804 	bl	800ab4c <__retarget_lock_release_recursive>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	200012d4 	.word	0x200012d4

08008b4c <_Balloc>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b50:	0006      	movs	r6, r0
 8008b52:	000c      	movs	r4, r1
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	d10e      	bne.n	8008b76 <_Balloc+0x2a>
 8008b58:	2010      	movs	r0, #16
 8008b5a:	f7ff fd9f 	bl	800869c <malloc>
 8008b5e:	1e02      	subs	r2, r0, #0
 8008b60:	6270      	str	r0, [r6, #36]	; 0x24
 8008b62:	d104      	bne.n	8008b6e <_Balloc+0x22>
 8008b64:	2166      	movs	r1, #102	; 0x66
 8008b66:	4b19      	ldr	r3, [pc, #100]	; (8008bcc <_Balloc+0x80>)
 8008b68:	4819      	ldr	r0, [pc, #100]	; (8008bd0 <_Balloc+0x84>)
 8008b6a:	f7ff fe63 	bl	8008834 <__assert_func>
 8008b6e:	6045      	str	r5, [r0, #4]
 8008b70:	6085      	str	r5, [r0, #8]
 8008b72:	6005      	str	r5, [r0, #0]
 8008b74:	60c5      	str	r5, [r0, #12]
 8008b76:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008b78:	68eb      	ldr	r3, [r5, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d013      	beq.n	8008ba6 <_Balloc+0x5a>
 8008b7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b80:	00a2      	lsls	r2, r4, #2
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	189b      	adds	r3, r3, r2
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d118      	bne.n	8008bbe <_Balloc+0x72>
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	000d      	movs	r5, r1
 8008b90:	40a5      	lsls	r5, r4
 8008b92:	1d6a      	adds	r2, r5, #5
 8008b94:	0030      	movs	r0, r6
 8008b96:	0092      	lsls	r2, r2, #2
 8008b98:	f000 fb90 	bl	80092bc <_calloc_r>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d00c      	beq.n	8008bba <_Balloc+0x6e>
 8008ba0:	6044      	str	r4, [r0, #4]
 8008ba2:	6085      	str	r5, [r0, #8]
 8008ba4:	e00d      	b.n	8008bc2 <_Balloc+0x76>
 8008ba6:	2221      	movs	r2, #33	; 0x21
 8008ba8:	2104      	movs	r1, #4
 8008baa:	0030      	movs	r0, r6
 8008bac:	f000 fb86 	bl	80092bc <_calloc_r>
 8008bb0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bb2:	60e8      	str	r0, [r5, #12]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e1      	bne.n	8008b7e <_Balloc+0x32>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	bd70      	pop	{r4, r5, r6, pc}
 8008bbe:	6802      	ldr	r2, [r0, #0]
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6103      	str	r3, [r0, #16]
 8008bc6:	60c3      	str	r3, [r0, #12]
 8008bc8:	e7f8      	b.n	8008bbc <_Balloc+0x70>
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	0800bb54 	.word	0x0800bb54
 8008bd0:	0800bb6b 	.word	0x0800bb6b

08008bd4 <_Bfree>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bd8:	0005      	movs	r5, r0
 8008bda:	000c      	movs	r4, r1
 8008bdc:	2e00      	cmp	r6, #0
 8008bde:	d10e      	bne.n	8008bfe <_Bfree+0x2a>
 8008be0:	2010      	movs	r0, #16
 8008be2:	f7ff fd5b 	bl	800869c <malloc>
 8008be6:	1e02      	subs	r2, r0, #0
 8008be8:	6268      	str	r0, [r5, #36]	; 0x24
 8008bea:	d104      	bne.n	8008bf6 <_Bfree+0x22>
 8008bec:	218a      	movs	r1, #138	; 0x8a
 8008bee:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <_Bfree+0x40>)
 8008bf0:	4809      	ldr	r0, [pc, #36]	; (8008c18 <_Bfree+0x44>)
 8008bf2:	f7ff fe1f 	bl	8008834 <__assert_func>
 8008bf6:	6046      	str	r6, [r0, #4]
 8008bf8:	6086      	str	r6, [r0, #8]
 8008bfa:	6006      	str	r6, [r0, #0]
 8008bfc:	60c6      	str	r6, [r0, #12]
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d007      	beq.n	8008c12 <_Bfree+0x3e>
 8008c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c04:	6862      	ldr	r2, [r4, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	189b      	adds	r3, r3, r2
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	601c      	str	r4, [r3, #0]
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	0800bb54 	.word	0x0800bb54
 8008c18:	0800bb6b 	.word	0x0800bb6b

08008c1c <__multadd>:
 8008c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c1e:	000e      	movs	r6, r1
 8008c20:	9001      	str	r0, [sp, #4]
 8008c22:	000c      	movs	r4, r1
 8008c24:	001d      	movs	r5, r3
 8008c26:	2000      	movs	r0, #0
 8008c28:	690f      	ldr	r7, [r1, #16]
 8008c2a:	3614      	adds	r6, #20
 8008c2c:	6833      	ldr	r3, [r6, #0]
 8008c2e:	3001      	adds	r0, #1
 8008c30:	b299      	uxth	r1, r3
 8008c32:	4351      	muls	r1, r2
 8008c34:	0c1b      	lsrs	r3, r3, #16
 8008c36:	4353      	muls	r3, r2
 8008c38:	1949      	adds	r1, r1, r5
 8008c3a:	0c0d      	lsrs	r5, r1, #16
 8008c3c:	195b      	adds	r3, r3, r5
 8008c3e:	0c1d      	lsrs	r5, r3, #16
 8008c40:	b289      	uxth	r1, r1
 8008c42:	041b      	lsls	r3, r3, #16
 8008c44:	185b      	adds	r3, r3, r1
 8008c46:	c608      	stmia	r6!, {r3}
 8008c48:	4287      	cmp	r7, r0
 8008c4a:	dcef      	bgt.n	8008c2c <__multadd+0x10>
 8008c4c:	2d00      	cmp	r5, #0
 8008c4e:	d022      	beq.n	8008c96 <__multadd+0x7a>
 8008c50:	68a3      	ldr	r3, [r4, #8]
 8008c52:	42bb      	cmp	r3, r7
 8008c54:	dc19      	bgt.n	8008c8a <__multadd+0x6e>
 8008c56:	6863      	ldr	r3, [r4, #4]
 8008c58:	9801      	ldr	r0, [sp, #4]
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	f7ff ff76 	bl	8008b4c <_Balloc>
 8008c60:	1e06      	subs	r6, r0, #0
 8008c62:	d105      	bne.n	8008c70 <__multadd+0x54>
 8008c64:	0002      	movs	r2, r0
 8008c66:	21b5      	movs	r1, #181	; 0xb5
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <__multadd+0x80>)
 8008c6a:	480d      	ldr	r0, [pc, #52]	; (8008ca0 <__multadd+0x84>)
 8008c6c:	f7ff fde2 	bl	8008834 <__assert_func>
 8008c70:	0021      	movs	r1, r4
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	310c      	adds	r1, #12
 8008c76:	1c9a      	adds	r2, r3, #2
 8008c78:	0092      	lsls	r2, r2, #2
 8008c7a:	300c      	adds	r0, #12
 8008c7c:	f001 ffdf 	bl	800ac3e <memcpy>
 8008c80:	0021      	movs	r1, r4
 8008c82:	9801      	ldr	r0, [sp, #4]
 8008c84:	f7ff ffa6 	bl	8008bd4 <_Bfree>
 8008c88:	0034      	movs	r4, r6
 8008c8a:	1d3b      	adds	r3, r7, #4
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	18e3      	adds	r3, r4, r3
 8008c90:	605d      	str	r5, [r3, #4]
 8008c92:	1c7b      	adds	r3, r7, #1
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	0020      	movs	r0, r4
 8008c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c9a:	46c0      	nop			; (mov r8, r8)
 8008c9c:	0800bbcb 	.word	0x0800bbcb
 8008ca0:	0800bb6b 	.word	0x0800bb6b

08008ca4 <__hi0bits>:
 8008ca4:	0003      	movs	r3, r0
 8008ca6:	0c02      	lsrs	r2, r0, #16
 8008ca8:	2000      	movs	r0, #0
 8008caa:	4282      	cmp	r2, r0
 8008cac:	d101      	bne.n	8008cb2 <__hi0bits+0xe>
 8008cae:	041b      	lsls	r3, r3, #16
 8008cb0:	3010      	adds	r0, #16
 8008cb2:	0e1a      	lsrs	r2, r3, #24
 8008cb4:	d101      	bne.n	8008cba <__hi0bits+0x16>
 8008cb6:	3008      	adds	r0, #8
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	0f1a      	lsrs	r2, r3, #28
 8008cbc:	d101      	bne.n	8008cc2 <__hi0bits+0x1e>
 8008cbe:	3004      	adds	r0, #4
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	0f9a      	lsrs	r2, r3, #30
 8008cc4:	d101      	bne.n	8008cca <__hi0bits+0x26>
 8008cc6:	3002      	adds	r0, #2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	db03      	blt.n	8008cd6 <__hi0bits+0x32>
 8008cce:	3001      	adds	r0, #1
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	d400      	bmi.n	8008cd6 <__hi0bits+0x32>
 8008cd4:	2020      	movs	r0, #32
 8008cd6:	4770      	bx	lr

08008cd8 <__lo0bits>:
 8008cd8:	6803      	ldr	r3, [r0, #0]
 8008cda:	0002      	movs	r2, r0
 8008cdc:	2107      	movs	r1, #7
 8008cde:	0018      	movs	r0, r3
 8008ce0:	4008      	ands	r0, r1
 8008ce2:	420b      	tst	r3, r1
 8008ce4:	d00d      	beq.n	8008d02 <__lo0bits+0x2a>
 8008ce6:	3906      	subs	r1, #6
 8008ce8:	2000      	movs	r0, #0
 8008cea:	420b      	tst	r3, r1
 8008cec:	d105      	bne.n	8008cfa <__lo0bits+0x22>
 8008cee:	3002      	adds	r0, #2
 8008cf0:	4203      	tst	r3, r0
 8008cf2:	d003      	beq.n	8008cfc <__lo0bits+0x24>
 8008cf4:	40cb      	lsrs	r3, r1
 8008cf6:	0008      	movs	r0, r1
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	4770      	bx	lr
 8008cfc:	089b      	lsrs	r3, r3, #2
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	e7fb      	b.n	8008cfa <__lo0bits+0x22>
 8008d02:	b299      	uxth	r1, r3
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d101      	bne.n	8008d0c <__lo0bits+0x34>
 8008d08:	2010      	movs	r0, #16
 8008d0a:	0c1b      	lsrs	r3, r3, #16
 8008d0c:	b2d9      	uxtb	r1, r3
 8008d0e:	2900      	cmp	r1, #0
 8008d10:	d101      	bne.n	8008d16 <__lo0bits+0x3e>
 8008d12:	3008      	adds	r0, #8
 8008d14:	0a1b      	lsrs	r3, r3, #8
 8008d16:	0719      	lsls	r1, r3, #28
 8008d18:	d101      	bne.n	8008d1e <__lo0bits+0x46>
 8008d1a:	3004      	adds	r0, #4
 8008d1c:	091b      	lsrs	r3, r3, #4
 8008d1e:	0799      	lsls	r1, r3, #30
 8008d20:	d101      	bne.n	8008d26 <__lo0bits+0x4e>
 8008d22:	3002      	adds	r0, #2
 8008d24:	089b      	lsrs	r3, r3, #2
 8008d26:	07d9      	lsls	r1, r3, #31
 8008d28:	d4e9      	bmi.n	8008cfe <__lo0bits+0x26>
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	085b      	lsrs	r3, r3, #1
 8008d2e:	d1e6      	bne.n	8008cfe <__lo0bits+0x26>
 8008d30:	2020      	movs	r0, #32
 8008d32:	e7e2      	b.n	8008cfa <__lo0bits+0x22>

08008d34 <__i2b>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	000c      	movs	r4, r1
 8008d38:	2101      	movs	r1, #1
 8008d3a:	f7ff ff07 	bl	8008b4c <_Balloc>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d106      	bne.n	8008d50 <__i2b+0x1c>
 8008d42:	21a0      	movs	r1, #160	; 0xa0
 8008d44:	0002      	movs	r2, r0
 8008d46:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <__i2b+0x24>)
 8008d48:	4804      	ldr	r0, [pc, #16]	; (8008d5c <__i2b+0x28>)
 8008d4a:	0049      	lsls	r1, r1, #1
 8008d4c:	f7ff fd72 	bl	8008834 <__assert_func>
 8008d50:	2301      	movs	r3, #1
 8008d52:	6144      	str	r4, [r0, #20]
 8008d54:	6103      	str	r3, [r0, #16]
 8008d56:	bd10      	pop	{r4, pc}
 8008d58:	0800bbcb 	.word	0x0800bbcb
 8008d5c:	0800bb6b 	.word	0x0800bb6b

08008d60 <__multiply>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	690b      	ldr	r3, [r1, #16]
 8008d64:	0014      	movs	r4, r2
 8008d66:	6912      	ldr	r2, [r2, #16]
 8008d68:	000d      	movs	r5, r1
 8008d6a:	b089      	sub	sp, #36	; 0x24
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	da01      	bge.n	8008d74 <__multiply+0x14>
 8008d70:	0025      	movs	r5, r4
 8008d72:	000c      	movs	r4, r1
 8008d74:	692f      	ldr	r7, [r5, #16]
 8008d76:	6926      	ldr	r6, [r4, #16]
 8008d78:	6869      	ldr	r1, [r5, #4]
 8008d7a:	19bb      	adds	r3, r7, r6
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	68ab      	ldr	r3, [r5, #8]
 8008d80:	19ba      	adds	r2, r7, r6
 8008d82:	4293      	cmp	r3, r2
 8008d84:	da00      	bge.n	8008d88 <__multiply+0x28>
 8008d86:	3101      	adds	r1, #1
 8008d88:	f7ff fee0 	bl	8008b4c <_Balloc>
 8008d8c:	9001      	str	r0, [sp, #4]
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d106      	bne.n	8008da0 <__multiply+0x40>
 8008d92:	215e      	movs	r1, #94	; 0x5e
 8008d94:	0002      	movs	r2, r0
 8008d96:	4b48      	ldr	r3, [pc, #288]	; (8008eb8 <__multiply+0x158>)
 8008d98:	4848      	ldr	r0, [pc, #288]	; (8008ebc <__multiply+0x15c>)
 8008d9a:	31ff      	adds	r1, #255	; 0xff
 8008d9c:	f7ff fd4a 	bl	8008834 <__assert_func>
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	3314      	adds	r3, #20
 8008da6:	469c      	mov	ip, r3
 8008da8:	19bb      	adds	r3, r7, r6
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4463      	add	r3, ip
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	4663      	mov	r3, ip
 8008db2:	9903      	ldr	r1, [sp, #12]
 8008db4:	428b      	cmp	r3, r1
 8008db6:	d32c      	bcc.n	8008e12 <__multiply+0xb2>
 8008db8:	002b      	movs	r3, r5
 8008dba:	0022      	movs	r2, r4
 8008dbc:	3314      	adds	r3, #20
 8008dbe:	00bf      	lsls	r7, r7, #2
 8008dc0:	3214      	adds	r2, #20
 8008dc2:	9306      	str	r3, [sp, #24]
 8008dc4:	00b6      	lsls	r6, r6, #2
 8008dc6:	19db      	adds	r3, r3, r7
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	1993      	adds	r3, r2, r6
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	2304      	movs	r3, #4
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	002b      	movs	r3, r5
 8008dd4:	9904      	ldr	r1, [sp, #16]
 8008dd6:	3315      	adds	r3, #21
 8008dd8:	9200      	str	r2, [sp, #0]
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d305      	bcc.n	8008dea <__multiply+0x8a>
 8008dde:	1b4b      	subs	r3, r1, r5
 8008de0:	3b15      	subs	r3, #21
 8008de2:	089b      	lsrs	r3, r3, #2
 8008de4:	3301      	adds	r3, #1
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	9305      	str	r3, [sp, #20]
 8008dea:	9b07      	ldr	r3, [sp, #28]
 8008dec:	9a00      	ldr	r2, [sp, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d311      	bcc.n	8008e16 <__multiply+0xb6>
 8008df2:	9b02      	ldr	r3, [sp, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd06      	ble.n	8008e06 <__multiply+0xa6>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	3b04      	subs	r3, #4
 8008dfc:	9303      	str	r3, [sp, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d054      	beq.n	8008eb0 <__multiply+0x150>
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	9a02      	ldr	r2, [sp, #8]
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	611a      	str	r2, [r3, #16]
 8008e0e:	b009      	add	sp, #36	; 0x24
 8008e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e12:	c304      	stmia	r3!, {r2}
 8008e14:	e7cd      	b.n	8008db2 <__multiply+0x52>
 8008e16:	9b00      	ldr	r3, [sp, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	b298      	uxth	r0, r3
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d01c      	beq.n	8008e5a <__multiply+0xfa>
 8008e20:	4667      	mov	r7, ip
 8008e22:	2400      	movs	r4, #0
 8008e24:	9e06      	ldr	r6, [sp, #24]
 8008e26:	ce02      	ldmia	r6!, {r1}
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	b28b      	uxth	r3, r1
 8008e2c:	4343      	muls	r3, r0
 8008e2e:	0c09      	lsrs	r1, r1, #16
 8008e30:	4341      	muls	r1, r0
 8008e32:	b292      	uxth	r2, r2
 8008e34:	189b      	adds	r3, r3, r2
 8008e36:	191b      	adds	r3, r3, r4
 8008e38:	000c      	movs	r4, r1
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	0c11      	lsrs	r1, r2, #16
 8008e3e:	1861      	adds	r1, r4, r1
 8008e40:	0c1c      	lsrs	r4, r3, #16
 8008e42:	1909      	adds	r1, r1, r4
 8008e44:	0c0c      	lsrs	r4, r1, #16
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	0409      	lsls	r1, r1, #16
 8008e4a:	430b      	orrs	r3, r1
 8008e4c:	c708      	stmia	r7!, {r3}
 8008e4e:	9b04      	ldr	r3, [sp, #16]
 8008e50:	42b3      	cmp	r3, r6
 8008e52:	d8e8      	bhi.n	8008e26 <__multiply+0xc6>
 8008e54:	4663      	mov	r3, ip
 8008e56:	9a05      	ldr	r2, [sp, #20]
 8008e58:	509c      	str	r4, [r3, r2]
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	0c1e      	lsrs	r6, r3, #16
 8008e60:	d020      	beq.n	8008ea4 <__multiply+0x144>
 8008e62:	4663      	mov	r3, ip
 8008e64:	002c      	movs	r4, r5
 8008e66:	4660      	mov	r0, ip
 8008e68:	2700      	movs	r7, #0
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3414      	adds	r4, #20
 8008e6e:	6822      	ldr	r2, [r4, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	b291      	uxth	r1, r2
 8008e74:	4371      	muls	r1, r6
 8008e76:	6802      	ldr	r2, [r0, #0]
 8008e78:	0c12      	lsrs	r2, r2, #16
 8008e7a:	1889      	adds	r1, r1, r2
 8008e7c:	19cf      	adds	r7, r1, r7
 8008e7e:	0439      	lsls	r1, r7, #16
 8008e80:	430b      	orrs	r3, r1
 8008e82:	6003      	str	r3, [r0, #0]
 8008e84:	cc02      	ldmia	r4!, {r1}
 8008e86:	6843      	ldr	r3, [r0, #4]
 8008e88:	0c09      	lsrs	r1, r1, #16
 8008e8a:	4371      	muls	r1, r6
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	0c3f      	lsrs	r7, r7, #16
 8008e90:	18cb      	adds	r3, r1, r3
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	19db      	adds	r3, r3, r7
 8008e96:	0c1f      	lsrs	r7, r3, #16
 8008e98:	3004      	adds	r0, #4
 8008e9a:	42a2      	cmp	r2, r4
 8008e9c:	d8e7      	bhi.n	8008e6e <__multiply+0x10e>
 8008e9e:	4662      	mov	r2, ip
 8008ea0:	9905      	ldr	r1, [sp, #20]
 8008ea2:	5053      	str	r3, [r2, r1]
 8008ea4:	9b00      	ldr	r3, [sp, #0]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	2304      	movs	r3, #4
 8008eac:	449c      	add	ip, r3
 8008eae:	e79c      	b.n	8008dea <__multiply+0x8a>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	9302      	str	r3, [sp, #8]
 8008eb6:	e79c      	b.n	8008df2 <__multiply+0x92>
 8008eb8:	0800bbcb 	.word	0x0800bbcb
 8008ebc:	0800bb6b 	.word	0x0800bb6b

08008ec0 <__pow5mult>:
 8008ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	0015      	movs	r5, r2
 8008ec6:	0007      	movs	r7, r0
 8008ec8:	000e      	movs	r6, r1
 8008eca:	401a      	ands	r2, r3
 8008ecc:	421d      	tst	r5, r3
 8008ece:	d008      	beq.n	8008ee2 <__pow5mult+0x22>
 8008ed0:	4925      	ldr	r1, [pc, #148]	; (8008f68 <__pow5mult+0xa8>)
 8008ed2:	3a01      	subs	r2, #1
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	5852      	ldr	r2, [r2, r1]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	0031      	movs	r1, r6
 8008edc:	f7ff fe9e 	bl	8008c1c <__multadd>
 8008ee0:	0006      	movs	r6, r0
 8008ee2:	10ad      	asrs	r5, r5, #2
 8008ee4:	d03d      	beq.n	8008f62 <__pow5mult+0xa2>
 8008ee6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008ee8:	2c00      	cmp	r4, #0
 8008eea:	d10f      	bne.n	8008f0c <__pow5mult+0x4c>
 8008eec:	2010      	movs	r0, #16
 8008eee:	f7ff fbd5 	bl	800869c <malloc>
 8008ef2:	1e02      	subs	r2, r0, #0
 8008ef4:	6278      	str	r0, [r7, #36]	; 0x24
 8008ef6:	d105      	bne.n	8008f04 <__pow5mult+0x44>
 8008ef8:	21d7      	movs	r1, #215	; 0xd7
 8008efa:	4b1c      	ldr	r3, [pc, #112]	; (8008f6c <__pow5mult+0xac>)
 8008efc:	481c      	ldr	r0, [pc, #112]	; (8008f70 <__pow5mult+0xb0>)
 8008efe:	0049      	lsls	r1, r1, #1
 8008f00:	f7ff fc98 	bl	8008834 <__assert_func>
 8008f04:	6044      	str	r4, [r0, #4]
 8008f06:	6084      	str	r4, [r0, #8]
 8008f08:	6004      	str	r4, [r0, #0]
 8008f0a:	60c4      	str	r4, [r0, #12]
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	689c      	ldr	r4, [r3, #8]
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	2c00      	cmp	r4, #0
 8008f14:	d108      	bne.n	8008f28 <__pow5mult+0x68>
 8008f16:	0038      	movs	r0, r7
 8008f18:	4916      	ldr	r1, [pc, #88]	; (8008f74 <__pow5mult+0xb4>)
 8008f1a:	f7ff ff0b 	bl	8008d34 <__i2b>
 8008f1e:	9b01      	ldr	r3, [sp, #4]
 8008f20:	0004      	movs	r4, r0
 8008f22:	6098      	str	r0, [r3, #8]
 8008f24:	2300      	movs	r3, #0
 8008f26:	6003      	str	r3, [r0, #0]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	421d      	tst	r5, r3
 8008f2c:	d00a      	beq.n	8008f44 <__pow5mult+0x84>
 8008f2e:	0031      	movs	r1, r6
 8008f30:	0022      	movs	r2, r4
 8008f32:	0038      	movs	r0, r7
 8008f34:	f7ff ff14 	bl	8008d60 <__multiply>
 8008f38:	0031      	movs	r1, r6
 8008f3a:	9001      	str	r0, [sp, #4]
 8008f3c:	0038      	movs	r0, r7
 8008f3e:	f7ff fe49 	bl	8008bd4 <_Bfree>
 8008f42:	9e01      	ldr	r6, [sp, #4]
 8008f44:	106d      	asrs	r5, r5, #1
 8008f46:	d00c      	beq.n	8008f62 <__pow5mult+0xa2>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d107      	bne.n	8008f5e <__pow5mult+0x9e>
 8008f4e:	0022      	movs	r2, r4
 8008f50:	0021      	movs	r1, r4
 8008f52:	0038      	movs	r0, r7
 8008f54:	f7ff ff04 	bl	8008d60 <__multiply>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6020      	str	r0, [r4, #0]
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	0004      	movs	r4, r0
 8008f60:	e7e2      	b.n	8008f28 <__pow5mult+0x68>
 8008f62:	0030      	movs	r0, r6
 8008f64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f66:	46c0      	nop			; (mov r8, r8)
 8008f68:	0800bcd0 	.word	0x0800bcd0
 8008f6c:	0800bb54 	.word	0x0800bb54
 8008f70:	0800bb6b 	.word	0x0800bb6b
 8008f74:	00000271 	.word	0x00000271

08008f78 <__lshift>:
 8008f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f7a:	000c      	movs	r4, r1
 8008f7c:	0017      	movs	r7, r2
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	1155      	asrs	r5, r2, #5
 8008f82:	b087      	sub	sp, #28
 8008f84:	18eb      	adds	r3, r5, r3
 8008f86:	9302      	str	r3, [sp, #8]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	6849      	ldr	r1, [r1, #4]
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	9004      	str	r0, [sp, #16]
 8008f92:	9a01      	ldr	r2, [sp, #4]
 8008f94:	4293      	cmp	r3, r2
 8008f96:	db11      	blt.n	8008fbc <__lshift+0x44>
 8008f98:	9804      	ldr	r0, [sp, #16]
 8008f9a:	f7ff fdd7 	bl	8008b4c <_Balloc>
 8008f9e:	0002      	movs	r2, r0
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	3214      	adds	r2, #20
 8008fa4:	0006      	movs	r6, r0
 8008fa6:	0011      	movs	r1, r2
 8008fa8:	9203      	str	r2, [sp, #12]
 8008faa:	4298      	cmp	r0, r3
 8008fac:	d10d      	bne.n	8008fca <__lshift+0x52>
 8008fae:	21da      	movs	r1, #218	; 0xda
 8008fb0:	0002      	movs	r2, r0
 8008fb2:	4b27      	ldr	r3, [pc, #156]	; (8009050 <__lshift+0xd8>)
 8008fb4:	4827      	ldr	r0, [pc, #156]	; (8009054 <__lshift+0xdc>)
 8008fb6:	31ff      	adds	r1, #255	; 0xff
 8008fb8:	f7ff fc3c 	bl	8008834 <__assert_func>
 8008fbc:	3101      	adds	r1, #1
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	e7e7      	b.n	8008f92 <__lshift+0x1a>
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	0098      	lsls	r0, r3, #2
 8008fc6:	500a      	str	r2, [r1, r0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	42ab      	cmp	r3, r5
 8008fcc:	dbf9      	blt.n	8008fc2 <__lshift+0x4a>
 8008fce:	43eb      	mvns	r3, r5
 8008fd0:	17db      	asrs	r3, r3, #31
 8008fd2:	401d      	ands	r5, r3
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	00ad      	lsls	r5, r5, #2
 8008fd8:	211f      	movs	r1, #31
 8008fda:	0038      	movs	r0, r7
 8008fdc:	195d      	adds	r5, r3, r5
 8008fde:	0023      	movs	r3, r4
 8008fe0:	6922      	ldr	r2, [r4, #16]
 8008fe2:	3314      	adds	r3, #20
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	4008      	ands	r0, r1
 8008fe8:	4684      	mov	ip, r0
 8008fea:	189a      	adds	r2, r3, r2
 8008fec:	420f      	tst	r7, r1
 8008fee:	d02a      	beq.n	8009046 <__lshift+0xce>
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	1a09      	subs	r1, r1, r0
 8008ff4:	9105      	str	r1, [sp, #20]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	9503      	str	r5, [sp, #12]
 8008ffa:	4667      	mov	r7, ip
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	40b8      	lsls	r0, r7
 8009000:	4301      	orrs	r1, r0
 8009002:	9803      	ldr	r0, [sp, #12]
 8009004:	c002      	stmia	r0!, {r1}
 8009006:	cb02      	ldmia	r3!, {r1}
 8009008:	9003      	str	r0, [sp, #12]
 800900a:	9805      	ldr	r0, [sp, #20]
 800900c:	40c1      	lsrs	r1, r0
 800900e:	429a      	cmp	r2, r3
 8009010:	d8f3      	bhi.n	8008ffa <__lshift+0x82>
 8009012:	0020      	movs	r0, r4
 8009014:	3015      	adds	r0, #21
 8009016:	2304      	movs	r3, #4
 8009018:	4282      	cmp	r2, r0
 800901a:	d304      	bcc.n	8009026 <__lshift+0xae>
 800901c:	1b13      	subs	r3, r2, r4
 800901e:	3b15      	subs	r3, #21
 8009020:	089b      	lsrs	r3, r3, #2
 8009022:	3301      	adds	r3, #1
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	50e9      	str	r1, [r5, r3]
 8009028:	2900      	cmp	r1, #0
 800902a:	d002      	beq.n	8009032 <__lshift+0xba>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	3302      	adds	r3, #2
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	9804      	ldr	r0, [sp, #16]
 8009036:	3b01      	subs	r3, #1
 8009038:	0021      	movs	r1, r4
 800903a:	6133      	str	r3, [r6, #16]
 800903c:	f7ff fdca 	bl	8008bd4 <_Bfree>
 8009040:	0030      	movs	r0, r6
 8009042:	b007      	add	sp, #28
 8009044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009046:	cb02      	ldmia	r3!, {r1}
 8009048:	c502      	stmia	r5!, {r1}
 800904a:	429a      	cmp	r2, r3
 800904c:	d8fb      	bhi.n	8009046 <__lshift+0xce>
 800904e:	e7f0      	b.n	8009032 <__lshift+0xba>
 8009050:	0800bbcb 	.word	0x0800bbcb
 8009054:	0800bb6b 	.word	0x0800bb6b

08009058 <__mcmp>:
 8009058:	6902      	ldr	r2, [r0, #16]
 800905a:	690b      	ldr	r3, [r1, #16]
 800905c:	b530      	push	{r4, r5, lr}
 800905e:	0004      	movs	r4, r0
 8009060:	1ad0      	subs	r0, r2, r3
 8009062:	429a      	cmp	r2, r3
 8009064:	d10d      	bne.n	8009082 <__mcmp+0x2a>
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	3414      	adds	r4, #20
 800906a:	3114      	adds	r1, #20
 800906c:	18e2      	adds	r2, r4, r3
 800906e:	18c9      	adds	r1, r1, r3
 8009070:	3a04      	subs	r2, #4
 8009072:	3904      	subs	r1, #4
 8009074:	6815      	ldr	r5, [r2, #0]
 8009076:	680b      	ldr	r3, [r1, #0]
 8009078:	429d      	cmp	r5, r3
 800907a:	d003      	beq.n	8009084 <__mcmp+0x2c>
 800907c:	2001      	movs	r0, #1
 800907e:	429d      	cmp	r5, r3
 8009080:	d303      	bcc.n	800908a <__mcmp+0x32>
 8009082:	bd30      	pop	{r4, r5, pc}
 8009084:	4294      	cmp	r4, r2
 8009086:	d3f3      	bcc.n	8009070 <__mcmp+0x18>
 8009088:	e7fb      	b.n	8009082 <__mcmp+0x2a>
 800908a:	4240      	negs	r0, r0
 800908c:	e7f9      	b.n	8009082 <__mcmp+0x2a>
	...

08009090 <__mdiff>:
 8009090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009092:	000e      	movs	r6, r1
 8009094:	0007      	movs	r7, r0
 8009096:	0011      	movs	r1, r2
 8009098:	0030      	movs	r0, r6
 800909a:	b087      	sub	sp, #28
 800909c:	0014      	movs	r4, r2
 800909e:	f7ff ffdb 	bl	8009058 <__mcmp>
 80090a2:	1e05      	subs	r5, r0, #0
 80090a4:	d110      	bne.n	80090c8 <__mdiff+0x38>
 80090a6:	0001      	movs	r1, r0
 80090a8:	0038      	movs	r0, r7
 80090aa:	f7ff fd4f 	bl	8008b4c <_Balloc>
 80090ae:	1e02      	subs	r2, r0, #0
 80090b0:	d104      	bne.n	80090bc <__mdiff+0x2c>
 80090b2:	4b40      	ldr	r3, [pc, #256]	; (80091b4 <__mdiff+0x124>)
 80090b4:	4940      	ldr	r1, [pc, #256]	; (80091b8 <__mdiff+0x128>)
 80090b6:	4841      	ldr	r0, [pc, #260]	; (80091bc <__mdiff+0x12c>)
 80090b8:	f7ff fbbc 	bl	8008834 <__assert_func>
 80090bc:	2301      	movs	r3, #1
 80090be:	6145      	str	r5, [r0, #20]
 80090c0:	6103      	str	r3, [r0, #16]
 80090c2:	0010      	movs	r0, r2
 80090c4:	b007      	add	sp, #28
 80090c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c8:	2301      	movs	r3, #1
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	2800      	cmp	r0, #0
 80090ce:	db04      	blt.n	80090da <__mdiff+0x4a>
 80090d0:	0023      	movs	r3, r4
 80090d2:	0034      	movs	r4, r6
 80090d4:	001e      	movs	r6, r3
 80090d6:	2300      	movs	r3, #0
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	0038      	movs	r0, r7
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	f7ff fd35 	bl	8008b4c <_Balloc>
 80090e2:	1e02      	subs	r2, r0, #0
 80090e4:	d103      	bne.n	80090ee <__mdiff+0x5e>
 80090e6:	2190      	movs	r1, #144	; 0x90
 80090e8:	4b32      	ldr	r3, [pc, #200]	; (80091b4 <__mdiff+0x124>)
 80090ea:	0089      	lsls	r1, r1, #2
 80090ec:	e7e3      	b.n	80090b6 <__mdiff+0x26>
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	2700      	movs	r7, #0
 80090f2:	60c3      	str	r3, [r0, #12]
 80090f4:	6920      	ldr	r0, [r4, #16]
 80090f6:	3414      	adds	r4, #20
 80090f8:	9401      	str	r4, [sp, #4]
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	0084      	lsls	r4, r0, #2
 80090fe:	191b      	adds	r3, r3, r4
 8009100:	0034      	movs	r4, r6
 8009102:	9302      	str	r3, [sp, #8]
 8009104:	6933      	ldr	r3, [r6, #16]
 8009106:	3414      	adds	r4, #20
 8009108:	0099      	lsls	r1, r3, #2
 800910a:	1863      	adds	r3, r4, r1
 800910c:	9303      	str	r3, [sp, #12]
 800910e:	0013      	movs	r3, r2
 8009110:	3314      	adds	r3, #20
 8009112:	469c      	mov	ip, r3
 8009114:	9305      	str	r3, [sp, #20]
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	cc02      	ldmia	r4!, {r1}
 800911e:	cb20      	ldmia	r3!, {r5}
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	b2ab      	uxth	r3, r5
 8009124:	19df      	adds	r7, r3, r7
 8009126:	b28b      	uxth	r3, r1
 8009128:	1afb      	subs	r3, r7, r3
 800912a:	0c2d      	lsrs	r5, r5, #16
 800912c:	0c09      	lsrs	r1, r1, #16
 800912e:	1a69      	subs	r1, r5, r1
 8009130:	141d      	asrs	r5, r3, #16
 8009132:	1949      	adds	r1, r1, r5
 8009134:	140f      	asrs	r7, r1, #16
 8009136:	b29b      	uxth	r3, r3
 8009138:	0409      	lsls	r1, r1, #16
 800913a:	430b      	orrs	r3, r1
 800913c:	4661      	mov	r1, ip
 800913e:	c108      	stmia	r1!, {r3}
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	468c      	mov	ip, r1
 8009144:	42a3      	cmp	r3, r4
 8009146:	d8e8      	bhi.n	800911a <__mdiff+0x8a>
 8009148:	0031      	movs	r1, r6
 800914a:	9c03      	ldr	r4, [sp, #12]
 800914c:	3115      	adds	r1, #21
 800914e:	2304      	movs	r3, #4
 8009150:	428c      	cmp	r4, r1
 8009152:	d304      	bcc.n	800915e <__mdiff+0xce>
 8009154:	1ba3      	subs	r3, r4, r6
 8009156:	3b15      	subs	r3, #21
 8009158:	089b      	lsrs	r3, r3, #2
 800915a:	3301      	adds	r3, #1
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	9901      	ldr	r1, [sp, #4]
 8009160:	18cc      	adds	r4, r1, r3
 8009162:	9905      	ldr	r1, [sp, #20]
 8009164:	0026      	movs	r6, r4
 8009166:	18cb      	adds	r3, r1, r3
 8009168:	469c      	mov	ip, r3
 800916a:	9902      	ldr	r1, [sp, #8]
 800916c:	428e      	cmp	r6, r1
 800916e:	d310      	bcc.n	8009192 <__mdiff+0x102>
 8009170:	9e02      	ldr	r6, [sp, #8]
 8009172:	1ee5      	subs	r5, r4, #3
 8009174:	2100      	movs	r1, #0
 8009176:	42ae      	cmp	r6, r5
 8009178:	d304      	bcc.n	8009184 <__mdiff+0xf4>
 800917a:	0031      	movs	r1, r6
 800917c:	3103      	adds	r1, #3
 800917e:	1b09      	subs	r1, r1, r4
 8009180:	0889      	lsrs	r1, r1, #2
 8009182:	0089      	lsls	r1, r1, #2
 8009184:	185b      	adds	r3, r3, r1
 8009186:	3b04      	subs	r3, #4
 8009188:	6819      	ldr	r1, [r3, #0]
 800918a:	2900      	cmp	r1, #0
 800918c:	d00f      	beq.n	80091ae <__mdiff+0x11e>
 800918e:	6110      	str	r0, [r2, #16]
 8009190:	e797      	b.n	80090c2 <__mdiff+0x32>
 8009192:	ce02      	ldmia	r6!, {r1}
 8009194:	b28d      	uxth	r5, r1
 8009196:	19ed      	adds	r5, r5, r7
 8009198:	0c0f      	lsrs	r7, r1, #16
 800919a:	1429      	asrs	r1, r5, #16
 800919c:	1879      	adds	r1, r7, r1
 800919e:	140f      	asrs	r7, r1, #16
 80091a0:	b2ad      	uxth	r5, r5
 80091a2:	0409      	lsls	r1, r1, #16
 80091a4:	430d      	orrs	r5, r1
 80091a6:	4661      	mov	r1, ip
 80091a8:	c120      	stmia	r1!, {r5}
 80091aa:	468c      	mov	ip, r1
 80091ac:	e7dd      	b.n	800916a <__mdiff+0xda>
 80091ae:	3801      	subs	r0, #1
 80091b0:	e7e9      	b.n	8009186 <__mdiff+0xf6>
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	0800bbcb 	.word	0x0800bbcb
 80091b8:	00000232 	.word	0x00000232
 80091bc:	0800bb6b 	.word	0x0800bb6b

080091c0 <__d2b>:
 80091c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c2:	2101      	movs	r1, #1
 80091c4:	0014      	movs	r4, r2
 80091c6:	001e      	movs	r6, r3
 80091c8:	9f08      	ldr	r7, [sp, #32]
 80091ca:	f7ff fcbf 	bl	8008b4c <_Balloc>
 80091ce:	1e05      	subs	r5, r0, #0
 80091d0:	d105      	bne.n	80091de <__d2b+0x1e>
 80091d2:	0002      	movs	r2, r0
 80091d4:	4b26      	ldr	r3, [pc, #152]	; (8009270 <__d2b+0xb0>)
 80091d6:	4927      	ldr	r1, [pc, #156]	; (8009274 <__d2b+0xb4>)
 80091d8:	4827      	ldr	r0, [pc, #156]	; (8009278 <__d2b+0xb8>)
 80091da:	f7ff fb2b 	bl	8008834 <__assert_func>
 80091de:	0333      	lsls	r3, r6, #12
 80091e0:	0076      	lsls	r6, r6, #1
 80091e2:	0b1b      	lsrs	r3, r3, #12
 80091e4:	0d76      	lsrs	r6, r6, #21
 80091e6:	d124      	bne.n	8009232 <__d2b+0x72>
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	2c00      	cmp	r4, #0
 80091ec:	d027      	beq.n	800923e <__d2b+0x7e>
 80091ee:	4668      	mov	r0, sp
 80091f0:	9400      	str	r4, [sp, #0]
 80091f2:	f7ff fd71 	bl	8008cd8 <__lo0bits>
 80091f6:	9c00      	ldr	r4, [sp, #0]
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d01e      	beq.n	800923a <__d2b+0x7a>
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	2120      	movs	r1, #32
 8009200:	001a      	movs	r2, r3
 8009202:	1a09      	subs	r1, r1, r0
 8009204:	408a      	lsls	r2, r1
 8009206:	40c3      	lsrs	r3, r0
 8009208:	4322      	orrs	r2, r4
 800920a:	616a      	str	r2, [r5, #20]
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	9c01      	ldr	r4, [sp, #4]
 8009210:	61ac      	str	r4, [r5, #24]
 8009212:	1e63      	subs	r3, r4, #1
 8009214:	419c      	sbcs	r4, r3
 8009216:	3401      	adds	r4, #1
 8009218:	612c      	str	r4, [r5, #16]
 800921a:	2e00      	cmp	r6, #0
 800921c:	d018      	beq.n	8009250 <__d2b+0x90>
 800921e:	4b17      	ldr	r3, [pc, #92]	; (800927c <__d2b+0xbc>)
 8009220:	18f6      	adds	r6, r6, r3
 8009222:	2335      	movs	r3, #53	; 0x35
 8009224:	1836      	adds	r6, r6, r0
 8009226:	1a18      	subs	r0, r3, r0
 8009228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922a:	603e      	str	r6, [r7, #0]
 800922c:	6018      	str	r0, [r3, #0]
 800922e:	0028      	movs	r0, r5
 8009230:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009232:	2280      	movs	r2, #128	; 0x80
 8009234:	0352      	lsls	r2, r2, #13
 8009236:	4313      	orrs	r3, r2
 8009238:	e7d6      	b.n	80091e8 <__d2b+0x28>
 800923a:	616c      	str	r4, [r5, #20]
 800923c:	e7e7      	b.n	800920e <__d2b+0x4e>
 800923e:	a801      	add	r0, sp, #4
 8009240:	f7ff fd4a 	bl	8008cd8 <__lo0bits>
 8009244:	2401      	movs	r4, #1
 8009246:	9b01      	ldr	r3, [sp, #4]
 8009248:	612c      	str	r4, [r5, #16]
 800924a:	616b      	str	r3, [r5, #20]
 800924c:	3020      	adds	r0, #32
 800924e:	e7e4      	b.n	800921a <__d2b+0x5a>
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <__d2b+0xc0>)
 8009252:	18c0      	adds	r0, r0, r3
 8009254:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <__d2b+0xc4>)
 8009256:	6038      	str	r0, [r7, #0]
 8009258:	18e3      	adds	r3, r4, r3
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	18eb      	adds	r3, r5, r3
 800925e:	6958      	ldr	r0, [r3, #20]
 8009260:	f7ff fd20 	bl	8008ca4 <__hi0bits>
 8009264:	0164      	lsls	r4, r4, #5
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	1a24      	subs	r4, r4, r0
 800926a:	601c      	str	r4, [r3, #0]
 800926c:	e7df      	b.n	800922e <__d2b+0x6e>
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	0800bbcb 	.word	0x0800bbcb
 8009274:	0000030a 	.word	0x0000030a
 8009278:	0800bb6b 	.word	0x0800bb6b
 800927c:	fffffbcd 	.word	0xfffffbcd
 8009280:	fffffbce 	.word	0xfffffbce
 8009284:	3fffffff 	.word	0x3fffffff

08009288 <_mprec_log10>:
 8009288:	b510      	push	{r4, lr}
 800928a:	0004      	movs	r4, r0
 800928c:	2817      	cmp	r0, #23
 800928e:	dc05      	bgt.n	800929c <_mprec_log10+0x14>
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <_mprec_log10+0x28>)
 8009292:	00c4      	lsls	r4, r0, #3
 8009294:	191c      	adds	r4, r3, r4
 8009296:	6820      	ldr	r0, [r4, #0]
 8009298:	6861      	ldr	r1, [r4, #4]
 800929a:	bd10      	pop	{r4, pc}
 800929c:	2000      	movs	r0, #0
 800929e:	4905      	ldr	r1, [pc, #20]	; (80092b4 <_mprec_log10+0x2c>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <_mprec_log10+0x30>)
 80092a4:	3c01      	subs	r4, #1
 80092a6:	f7f7 ff13 	bl	80010d0 <__aeabi_dmul>
 80092aa:	2c00      	cmp	r4, #0
 80092ac:	d1f8      	bne.n	80092a0 <_mprec_log10+0x18>
 80092ae:	e7f4      	b.n	800929a <_mprec_log10+0x12>
 80092b0:	0800bc08 	.word	0x0800bc08
 80092b4:	3ff00000 	.word	0x3ff00000
 80092b8:	40240000 	.word	0x40240000

080092bc <_calloc_r>:
 80092bc:	434a      	muls	r2, r1
 80092be:	b570      	push	{r4, r5, r6, lr}
 80092c0:	0011      	movs	r1, r2
 80092c2:	0015      	movs	r5, r2
 80092c4:	f7ff fa46 	bl	8008754 <_malloc_r>
 80092c8:	1e04      	subs	r4, r0, #0
 80092ca:	d003      	beq.n	80092d4 <_calloc_r+0x18>
 80092cc:	002a      	movs	r2, r5
 80092ce:	2100      	movs	r1, #0
 80092d0:	f7ff f9ee 	bl	80086b0 <memset>
 80092d4:	0020      	movs	r0, r4
 80092d6:	bd70      	pop	{r4, r5, r6, pc}

080092d8 <__sfputc_r>:
 80092d8:	6893      	ldr	r3, [r2, #8]
 80092da:	b510      	push	{r4, lr}
 80092dc:	3b01      	subs	r3, #1
 80092de:	6093      	str	r3, [r2, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	da04      	bge.n	80092ee <__sfputc_r+0x16>
 80092e4:	6994      	ldr	r4, [r2, #24]
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	db07      	blt.n	80092fa <__sfputc_r+0x22>
 80092ea:	290a      	cmp	r1, #10
 80092ec:	d005      	beq.n	80092fa <__sfputc_r+0x22>
 80092ee:	6813      	ldr	r3, [r2, #0]
 80092f0:	1c58      	adds	r0, r3, #1
 80092f2:	6010      	str	r0, [r2, #0]
 80092f4:	7019      	strb	r1, [r3, #0]
 80092f6:	0008      	movs	r0, r1
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	f000 fad9 	bl	80098b0 <__swbuf_r>
 80092fe:	0001      	movs	r1, r0
 8009300:	e7f9      	b.n	80092f6 <__sfputc_r+0x1e>

08009302 <__sfputs_r>:
 8009302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009304:	0006      	movs	r6, r0
 8009306:	000f      	movs	r7, r1
 8009308:	0014      	movs	r4, r2
 800930a:	18d5      	adds	r5, r2, r3
 800930c:	42ac      	cmp	r4, r5
 800930e:	d101      	bne.n	8009314 <__sfputs_r+0x12>
 8009310:	2000      	movs	r0, #0
 8009312:	e007      	b.n	8009324 <__sfputs_r+0x22>
 8009314:	7821      	ldrb	r1, [r4, #0]
 8009316:	003a      	movs	r2, r7
 8009318:	0030      	movs	r0, r6
 800931a:	f7ff ffdd 	bl	80092d8 <__sfputc_r>
 800931e:	3401      	adds	r4, #1
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d1f3      	bne.n	800930c <__sfputs_r+0xa>
 8009324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009328 <_vfiprintf_r>:
 8009328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932a:	b0a1      	sub	sp, #132	; 0x84
 800932c:	0006      	movs	r6, r0
 800932e:	000c      	movs	r4, r1
 8009330:	001f      	movs	r7, r3
 8009332:	9203      	str	r2, [sp, #12]
 8009334:	2800      	cmp	r0, #0
 8009336:	d004      	beq.n	8009342 <_vfiprintf_r+0x1a>
 8009338:	6983      	ldr	r3, [r0, #24]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <_vfiprintf_r+0x1a>
 800933e:	f001 fb63 	bl	800aa08 <__sinit>
 8009342:	4b8e      	ldr	r3, [pc, #568]	; (800957c <_vfiprintf_r+0x254>)
 8009344:	429c      	cmp	r4, r3
 8009346:	d11c      	bne.n	8009382 <_vfiprintf_r+0x5a>
 8009348:	6874      	ldr	r4, [r6, #4]
 800934a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800934c:	07db      	lsls	r3, r3, #31
 800934e:	d405      	bmi.n	800935c <_vfiprintf_r+0x34>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	059b      	lsls	r3, r3, #22
 8009354:	d402      	bmi.n	800935c <_vfiprintf_r+0x34>
 8009356:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009358:	f001 fbf7 	bl	800ab4a <__retarget_lock_acquire_recursive>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	071b      	lsls	r3, r3, #28
 8009360:	d502      	bpl.n	8009368 <_vfiprintf_r+0x40>
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d11d      	bne.n	80093a4 <_vfiprintf_r+0x7c>
 8009368:	0021      	movs	r1, r4
 800936a:	0030      	movs	r0, r6
 800936c:	f000 faf6 	bl	800995c <__swsetup_r>
 8009370:	2800      	cmp	r0, #0
 8009372:	d017      	beq.n	80093a4 <_vfiprintf_r+0x7c>
 8009374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009376:	07db      	lsls	r3, r3, #31
 8009378:	d50d      	bpl.n	8009396 <_vfiprintf_r+0x6e>
 800937a:	2001      	movs	r0, #1
 800937c:	4240      	negs	r0, r0
 800937e:	b021      	add	sp, #132	; 0x84
 8009380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009382:	4b7f      	ldr	r3, [pc, #508]	; (8009580 <_vfiprintf_r+0x258>)
 8009384:	429c      	cmp	r4, r3
 8009386:	d101      	bne.n	800938c <_vfiprintf_r+0x64>
 8009388:	68b4      	ldr	r4, [r6, #8]
 800938a:	e7de      	b.n	800934a <_vfiprintf_r+0x22>
 800938c:	4b7d      	ldr	r3, [pc, #500]	; (8009584 <_vfiprintf_r+0x25c>)
 800938e:	429c      	cmp	r4, r3
 8009390:	d1db      	bne.n	800934a <_vfiprintf_r+0x22>
 8009392:	68f4      	ldr	r4, [r6, #12]
 8009394:	e7d9      	b.n	800934a <_vfiprintf_r+0x22>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	059b      	lsls	r3, r3, #22
 800939a:	d4ee      	bmi.n	800937a <_vfiprintf_r+0x52>
 800939c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800939e:	f001 fbd5 	bl	800ab4c <__retarget_lock_release_recursive>
 80093a2:	e7ea      	b.n	800937a <_vfiprintf_r+0x52>
 80093a4:	2300      	movs	r3, #0
 80093a6:	ad08      	add	r5, sp, #32
 80093a8:	616b      	str	r3, [r5, #20]
 80093aa:	3320      	adds	r3, #32
 80093ac:	766b      	strb	r3, [r5, #25]
 80093ae:	3310      	adds	r3, #16
 80093b0:	76ab      	strb	r3, [r5, #26]
 80093b2:	9707      	str	r7, [sp, #28]
 80093b4:	9f03      	ldr	r7, [sp, #12]
 80093b6:	783b      	ldrb	r3, [r7, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <_vfiprintf_r+0x98>
 80093bc:	2b25      	cmp	r3, #37	; 0x25
 80093be:	d14e      	bne.n	800945e <_vfiprintf_r+0x136>
 80093c0:	9b03      	ldr	r3, [sp, #12]
 80093c2:	1afb      	subs	r3, r7, r3
 80093c4:	9305      	str	r3, [sp, #20]
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	429f      	cmp	r7, r3
 80093ca:	d00d      	beq.n	80093e8 <_vfiprintf_r+0xc0>
 80093cc:	9b05      	ldr	r3, [sp, #20]
 80093ce:	0021      	movs	r1, r4
 80093d0:	0030      	movs	r0, r6
 80093d2:	9a03      	ldr	r2, [sp, #12]
 80093d4:	f7ff ff95 	bl	8009302 <__sfputs_r>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d100      	bne.n	80093de <_vfiprintf_r+0xb6>
 80093dc:	e0b5      	b.n	800954a <_vfiprintf_r+0x222>
 80093de:	696a      	ldr	r2, [r5, #20]
 80093e0:	9b05      	ldr	r3, [sp, #20]
 80093e2:	4694      	mov	ip, r2
 80093e4:	4463      	add	r3, ip
 80093e6:	616b      	str	r3, [r5, #20]
 80093e8:	783b      	ldrb	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d100      	bne.n	80093f0 <_vfiprintf_r+0xc8>
 80093ee:	e0ac      	b.n	800954a <_vfiprintf_r+0x222>
 80093f0:	2201      	movs	r2, #1
 80093f2:	1c7b      	adds	r3, r7, #1
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	2300      	movs	r3, #0
 80093f8:	4252      	negs	r2, r2
 80093fa:	606a      	str	r2, [r5, #4]
 80093fc:	a904      	add	r1, sp, #16
 80093fe:	3254      	adds	r2, #84	; 0x54
 8009400:	1852      	adds	r2, r2, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	60eb      	str	r3, [r5, #12]
 8009406:	60ab      	str	r3, [r5, #8]
 8009408:	7013      	strb	r3, [r2, #0]
 800940a:	65ab      	str	r3, [r5, #88]	; 0x58
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	2205      	movs	r2, #5
 8009410:	7819      	ldrb	r1, [r3, #0]
 8009412:	485d      	ldr	r0, [pc, #372]	; (8009588 <_vfiprintf_r+0x260>)
 8009414:	f001 fc08 	bl	800ac28 <memchr>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	1c5f      	adds	r7, r3, #1
 800941c:	2800      	cmp	r0, #0
 800941e:	d120      	bne.n	8009462 <_vfiprintf_r+0x13a>
 8009420:	682a      	ldr	r2, [r5, #0]
 8009422:	06d3      	lsls	r3, r2, #27
 8009424:	d504      	bpl.n	8009430 <_vfiprintf_r+0x108>
 8009426:	2353      	movs	r3, #83	; 0x53
 8009428:	a904      	add	r1, sp, #16
 800942a:	185b      	adds	r3, r3, r1
 800942c:	2120      	movs	r1, #32
 800942e:	7019      	strb	r1, [r3, #0]
 8009430:	0713      	lsls	r3, r2, #28
 8009432:	d504      	bpl.n	800943e <_vfiprintf_r+0x116>
 8009434:	2353      	movs	r3, #83	; 0x53
 8009436:	a904      	add	r1, sp, #16
 8009438:	185b      	adds	r3, r3, r1
 800943a:	212b      	movs	r1, #43	; 0x2b
 800943c:	7019      	strb	r1, [r3, #0]
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b2a      	cmp	r3, #42	; 0x2a
 8009444:	d016      	beq.n	8009474 <_vfiprintf_r+0x14c>
 8009446:	2100      	movs	r1, #0
 8009448:	68eb      	ldr	r3, [r5, #12]
 800944a:	9f03      	ldr	r7, [sp, #12]
 800944c:	783a      	ldrb	r2, [r7, #0]
 800944e:	1c78      	adds	r0, r7, #1
 8009450:	3a30      	subs	r2, #48	; 0x30
 8009452:	4684      	mov	ip, r0
 8009454:	2a09      	cmp	r2, #9
 8009456:	d94f      	bls.n	80094f8 <_vfiprintf_r+0x1d0>
 8009458:	2900      	cmp	r1, #0
 800945a:	d111      	bne.n	8009480 <_vfiprintf_r+0x158>
 800945c:	e017      	b.n	800948e <_vfiprintf_r+0x166>
 800945e:	3701      	adds	r7, #1
 8009460:	e7a9      	b.n	80093b6 <_vfiprintf_r+0x8e>
 8009462:	4b49      	ldr	r3, [pc, #292]	; (8009588 <_vfiprintf_r+0x260>)
 8009464:	682a      	ldr	r2, [r5, #0]
 8009466:	1ac0      	subs	r0, r0, r3
 8009468:	2301      	movs	r3, #1
 800946a:	4083      	lsls	r3, r0
 800946c:	4313      	orrs	r3, r2
 800946e:	602b      	str	r3, [r5, #0]
 8009470:	9703      	str	r7, [sp, #12]
 8009472:	e7cb      	b.n	800940c <_vfiprintf_r+0xe4>
 8009474:	9b07      	ldr	r3, [sp, #28]
 8009476:	1d19      	adds	r1, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	9107      	str	r1, [sp, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	db01      	blt.n	8009484 <_vfiprintf_r+0x15c>
 8009480:	930b      	str	r3, [sp, #44]	; 0x2c
 8009482:	e004      	b.n	800948e <_vfiprintf_r+0x166>
 8009484:	425b      	negs	r3, r3
 8009486:	60eb      	str	r3, [r5, #12]
 8009488:	2302      	movs	r3, #2
 800948a:	4313      	orrs	r3, r2
 800948c:	602b      	str	r3, [r5, #0]
 800948e:	783b      	ldrb	r3, [r7, #0]
 8009490:	2b2e      	cmp	r3, #46	; 0x2e
 8009492:	d10a      	bne.n	80094aa <_vfiprintf_r+0x182>
 8009494:	787b      	ldrb	r3, [r7, #1]
 8009496:	2b2a      	cmp	r3, #42	; 0x2a
 8009498:	d137      	bne.n	800950a <_vfiprintf_r+0x1e2>
 800949a:	9b07      	ldr	r3, [sp, #28]
 800949c:	3702      	adds	r7, #2
 800949e:	1d1a      	adds	r2, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	9207      	str	r2, [sp, #28]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	db2d      	blt.n	8009504 <_vfiprintf_r+0x1dc>
 80094a8:	9309      	str	r3, [sp, #36]	; 0x24
 80094aa:	2203      	movs	r2, #3
 80094ac:	7839      	ldrb	r1, [r7, #0]
 80094ae:	4837      	ldr	r0, [pc, #220]	; (800958c <_vfiprintf_r+0x264>)
 80094b0:	f001 fbba 	bl	800ac28 <memchr>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d007      	beq.n	80094c8 <_vfiprintf_r+0x1a0>
 80094b8:	4b34      	ldr	r3, [pc, #208]	; (800958c <_vfiprintf_r+0x264>)
 80094ba:	682a      	ldr	r2, [r5, #0]
 80094bc:	1ac0      	subs	r0, r0, r3
 80094be:	2340      	movs	r3, #64	; 0x40
 80094c0:	4083      	lsls	r3, r0
 80094c2:	4313      	orrs	r3, r2
 80094c4:	3701      	adds	r7, #1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	7839      	ldrb	r1, [r7, #0]
 80094ca:	1c7b      	adds	r3, r7, #1
 80094cc:	2206      	movs	r2, #6
 80094ce:	4830      	ldr	r0, [pc, #192]	; (8009590 <_vfiprintf_r+0x268>)
 80094d0:	9303      	str	r3, [sp, #12]
 80094d2:	7629      	strb	r1, [r5, #24]
 80094d4:	f001 fba8 	bl	800ac28 <memchr>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d045      	beq.n	8009568 <_vfiprintf_r+0x240>
 80094dc:	4b2d      	ldr	r3, [pc, #180]	; (8009594 <_vfiprintf_r+0x26c>)
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d127      	bne.n	8009532 <_vfiprintf_r+0x20a>
 80094e2:	2207      	movs	r2, #7
 80094e4:	9b07      	ldr	r3, [sp, #28]
 80094e6:	3307      	adds	r3, #7
 80094e8:	4393      	bics	r3, r2
 80094ea:	3308      	adds	r3, #8
 80094ec:	9307      	str	r3, [sp, #28]
 80094ee:	696b      	ldr	r3, [r5, #20]
 80094f0:	9a04      	ldr	r2, [sp, #16]
 80094f2:	189b      	adds	r3, r3, r2
 80094f4:	616b      	str	r3, [r5, #20]
 80094f6:	e75d      	b.n	80093b4 <_vfiprintf_r+0x8c>
 80094f8:	210a      	movs	r1, #10
 80094fa:	434b      	muls	r3, r1
 80094fc:	4667      	mov	r7, ip
 80094fe:	189b      	adds	r3, r3, r2
 8009500:	3909      	subs	r1, #9
 8009502:	e7a3      	b.n	800944c <_vfiprintf_r+0x124>
 8009504:	2301      	movs	r3, #1
 8009506:	425b      	negs	r3, r3
 8009508:	e7ce      	b.n	80094a8 <_vfiprintf_r+0x180>
 800950a:	2300      	movs	r3, #0
 800950c:	001a      	movs	r2, r3
 800950e:	3701      	adds	r7, #1
 8009510:	606b      	str	r3, [r5, #4]
 8009512:	7839      	ldrb	r1, [r7, #0]
 8009514:	1c78      	adds	r0, r7, #1
 8009516:	3930      	subs	r1, #48	; 0x30
 8009518:	4684      	mov	ip, r0
 800951a:	2909      	cmp	r1, #9
 800951c:	d903      	bls.n	8009526 <_vfiprintf_r+0x1fe>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0c3      	beq.n	80094aa <_vfiprintf_r+0x182>
 8009522:	9209      	str	r2, [sp, #36]	; 0x24
 8009524:	e7c1      	b.n	80094aa <_vfiprintf_r+0x182>
 8009526:	230a      	movs	r3, #10
 8009528:	435a      	muls	r2, r3
 800952a:	4667      	mov	r7, ip
 800952c:	1852      	adds	r2, r2, r1
 800952e:	3b09      	subs	r3, #9
 8009530:	e7ef      	b.n	8009512 <_vfiprintf_r+0x1ea>
 8009532:	ab07      	add	r3, sp, #28
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	0022      	movs	r2, r4
 8009538:	0029      	movs	r1, r5
 800953a:	0030      	movs	r0, r6
 800953c:	4b16      	ldr	r3, [pc, #88]	; (8009598 <_vfiprintf_r+0x270>)
 800953e:	e000      	b.n	8009542 <_vfiprintf_r+0x21a>
 8009540:	bf00      	nop
 8009542:	9004      	str	r0, [sp, #16]
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	3301      	adds	r3, #1
 8009548:	d1d1      	bne.n	80094ee <_vfiprintf_r+0x1c6>
 800954a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800954c:	07db      	lsls	r3, r3, #31
 800954e:	d405      	bmi.n	800955c <_vfiprintf_r+0x234>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	059b      	lsls	r3, r3, #22
 8009554:	d402      	bmi.n	800955c <_vfiprintf_r+0x234>
 8009556:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009558:	f001 faf8 	bl	800ab4c <__retarget_lock_release_recursive>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	065b      	lsls	r3, r3, #25
 8009560:	d500      	bpl.n	8009564 <_vfiprintf_r+0x23c>
 8009562:	e70a      	b.n	800937a <_vfiprintf_r+0x52>
 8009564:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009566:	e70a      	b.n	800937e <_vfiprintf_r+0x56>
 8009568:	ab07      	add	r3, sp, #28
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	0022      	movs	r2, r4
 800956e:	0029      	movs	r1, r5
 8009570:	0030      	movs	r0, r6
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <_vfiprintf_r+0x270>)
 8009574:	f000 f882 	bl	800967c <_printf_i>
 8009578:	e7e3      	b.n	8009542 <_vfiprintf_r+0x21a>
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	0800bda0 	.word	0x0800bda0
 8009580:	0800bdc0 	.word	0x0800bdc0
 8009584:	0800bd80 	.word	0x0800bd80
 8009588:	0800bcdc 	.word	0x0800bcdc
 800958c:	0800bce2 	.word	0x0800bce2
 8009590:	0800bce6 	.word	0x0800bce6
 8009594:	00000000 	.word	0x00000000
 8009598:	08009303 	.word	0x08009303

0800959c <_printf_common>:
 800959c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800959e:	0015      	movs	r5, r2
 80095a0:	9301      	str	r3, [sp, #4]
 80095a2:	688a      	ldr	r2, [r1, #8]
 80095a4:	690b      	ldr	r3, [r1, #16]
 80095a6:	000c      	movs	r4, r1
 80095a8:	9000      	str	r0, [sp, #0]
 80095aa:	4293      	cmp	r3, r2
 80095ac:	da00      	bge.n	80095b0 <_printf_common+0x14>
 80095ae:	0013      	movs	r3, r2
 80095b0:	0022      	movs	r2, r4
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	3243      	adds	r2, #67	; 0x43
 80095b6:	7812      	ldrb	r2, [r2, #0]
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	d001      	beq.n	80095c0 <_printf_common+0x24>
 80095bc:	3301      	adds	r3, #1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	069b      	lsls	r3, r3, #26
 80095c4:	d502      	bpl.n	80095cc <_printf_common+0x30>
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	3302      	adds	r3, #2
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	2306      	movs	r3, #6
 80095d0:	0017      	movs	r7, r2
 80095d2:	401f      	ands	r7, r3
 80095d4:	421a      	tst	r2, r3
 80095d6:	d027      	beq.n	8009628 <_printf_common+0x8c>
 80095d8:	0023      	movs	r3, r4
 80095da:	3343      	adds	r3, #67	; 0x43
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	1e5a      	subs	r2, r3, #1
 80095e0:	4193      	sbcs	r3, r2
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	0692      	lsls	r2, r2, #26
 80095e6:	d430      	bmi.n	800964a <_printf_common+0xae>
 80095e8:	0022      	movs	r2, r4
 80095ea:	9901      	ldr	r1, [sp, #4]
 80095ec:	9800      	ldr	r0, [sp, #0]
 80095ee:	9e08      	ldr	r6, [sp, #32]
 80095f0:	3243      	adds	r2, #67	; 0x43
 80095f2:	47b0      	blx	r6
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d025      	beq.n	8009644 <_printf_common+0xa8>
 80095f8:	2306      	movs	r3, #6
 80095fa:	6820      	ldr	r0, [r4, #0]
 80095fc:	682a      	ldr	r2, [r5, #0]
 80095fe:	68e1      	ldr	r1, [r4, #12]
 8009600:	2500      	movs	r5, #0
 8009602:	4003      	ands	r3, r0
 8009604:	2b04      	cmp	r3, #4
 8009606:	d103      	bne.n	8009610 <_printf_common+0x74>
 8009608:	1a8d      	subs	r5, r1, r2
 800960a:	43eb      	mvns	r3, r5
 800960c:	17db      	asrs	r3, r3, #31
 800960e:	401d      	ands	r5, r3
 8009610:	68a3      	ldr	r3, [r4, #8]
 8009612:	6922      	ldr	r2, [r4, #16]
 8009614:	4293      	cmp	r3, r2
 8009616:	dd01      	ble.n	800961c <_printf_common+0x80>
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	18ed      	adds	r5, r5, r3
 800961c:	2700      	movs	r7, #0
 800961e:	42bd      	cmp	r5, r7
 8009620:	d120      	bne.n	8009664 <_printf_common+0xc8>
 8009622:	2000      	movs	r0, #0
 8009624:	e010      	b.n	8009648 <_printf_common+0xac>
 8009626:	3701      	adds	r7, #1
 8009628:	68e3      	ldr	r3, [r4, #12]
 800962a:	682a      	ldr	r2, [r5, #0]
 800962c:	1a9b      	subs	r3, r3, r2
 800962e:	42bb      	cmp	r3, r7
 8009630:	ddd2      	ble.n	80095d8 <_printf_common+0x3c>
 8009632:	0022      	movs	r2, r4
 8009634:	2301      	movs	r3, #1
 8009636:	9901      	ldr	r1, [sp, #4]
 8009638:	9800      	ldr	r0, [sp, #0]
 800963a:	9e08      	ldr	r6, [sp, #32]
 800963c:	3219      	adds	r2, #25
 800963e:	47b0      	blx	r6
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d1f0      	bne.n	8009626 <_printf_common+0x8a>
 8009644:	2001      	movs	r0, #1
 8009646:	4240      	negs	r0, r0
 8009648:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800964a:	2030      	movs	r0, #48	; 0x30
 800964c:	18e1      	adds	r1, r4, r3
 800964e:	3143      	adds	r1, #67	; 0x43
 8009650:	7008      	strb	r0, [r1, #0]
 8009652:	0021      	movs	r1, r4
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	3145      	adds	r1, #69	; 0x45
 8009658:	7809      	ldrb	r1, [r1, #0]
 800965a:	18a2      	adds	r2, r4, r2
 800965c:	3243      	adds	r2, #67	; 0x43
 800965e:	3302      	adds	r3, #2
 8009660:	7011      	strb	r1, [r2, #0]
 8009662:	e7c1      	b.n	80095e8 <_printf_common+0x4c>
 8009664:	0022      	movs	r2, r4
 8009666:	2301      	movs	r3, #1
 8009668:	9901      	ldr	r1, [sp, #4]
 800966a:	9800      	ldr	r0, [sp, #0]
 800966c:	9e08      	ldr	r6, [sp, #32]
 800966e:	321a      	adds	r2, #26
 8009670:	47b0      	blx	r6
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	d0e6      	beq.n	8009644 <_printf_common+0xa8>
 8009676:	3701      	adds	r7, #1
 8009678:	e7d1      	b.n	800961e <_printf_common+0x82>
	...

0800967c <_printf_i>:
 800967c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967e:	b08b      	sub	sp, #44	; 0x2c
 8009680:	9206      	str	r2, [sp, #24]
 8009682:	000a      	movs	r2, r1
 8009684:	3243      	adds	r2, #67	; 0x43
 8009686:	9307      	str	r3, [sp, #28]
 8009688:	9005      	str	r0, [sp, #20]
 800968a:	9204      	str	r2, [sp, #16]
 800968c:	7e0a      	ldrb	r2, [r1, #24]
 800968e:	000c      	movs	r4, r1
 8009690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009692:	2a78      	cmp	r2, #120	; 0x78
 8009694:	d806      	bhi.n	80096a4 <_printf_i+0x28>
 8009696:	2a62      	cmp	r2, #98	; 0x62
 8009698:	d808      	bhi.n	80096ac <_printf_i+0x30>
 800969a:	2a00      	cmp	r2, #0
 800969c:	d100      	bne.n	80096a0 <_printf_i+0x24>
 800969e:	e0c0      	b.n	8009822 <_printf_i+0x1a6>
 80096a0:	2a58      	cmp	r2, #88	; 0x58
 80096a2:	d052      	beq.n	800974a <_printf_i+0xce>
 80096a4:	0026      	movs	r6, r4
 80096a6:	3642      	adds	r6, #66	; 0x42
 80096a8:	7032      	strb	r2, [r6, #0]
 80096aa:	e022      	b.n	80096f2 <_printf_i+0x76>
 80096ac:	0010      	movs	r0, r2
 80096ae:	3863      	subs	r0, #99	; 0x63
 80096b0:	2815      	cmp	r0, #21
 80096b2:	d8f7      	bhi.n	80096a4 <_printf_i+0x28>
 80096b4:	f7f8 fcf4 	bl	80020a0 <__gnu_thumb1_case_shi>
 80096b8:	001f0016 	.word	0x001f0016
 80096bc:	fff6fff6 	.word	0xfff6fff6
 80096c0:	fff6fff6 	.word	0xfff6fff6
 80096c4:	fff6001f 	.word	0xfff6001f
 80096c8:	fff6fff6 	.word	0xfff6fff6
 80096cc:	00a8fff6 	.word	0x00a8fff6
 80096d0:	009a0036 	.word	0x009a0036
 80096d4:	fff6fff6 	.word	0xfff6fff6
 80096d8:	fff600b9 	.word	0xfff600b9
 80096dc:	fff60036 	.word	0xfff60036
 80096e0:	009efff6 	.word	0x009efff6
 80096e4:	0026      	movs	r6, r4
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	3642      	adds	r6, #66	; 0x42
 80096ea:	1d11      	adds	r1, r2, #4
 80096ec:	6019      	str	r1, [r3, #0]
 80096ee:	6813      	ldr	r3, [r2, #0]
 80096f0:	7033      	strb	r3, [r6, #0]
 80096f2:	2301      	movs	r3, #1
 80096f4:	e0a7      	b.n	8009846 <_printf_i+0x1ca>
 80096f6:	6808      	ldr	r0, [r1, #0]
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	1d0a      	adds	r2, r1, #4
 80096fc:	0605      	lsls	r5, r0, #24
 80096fe:	d50b      	bpl.n	8009718 <_printf_i+0x9c>
 8009700:	680d      	ldr	r5, [r1, #0]
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	2d00      	cmp	r5, #0
 8009706:	da03      	bge.n	8009710 <_printf_i+0x94>
 8009708:	232d      	movs	r3, #45	; 0x2d
 800970a:	9a04      	ldr	r2, [sp, #16]
 800970c:	426d      	negs	r5, r5
 800970e:	7013      	strb	r3, [r2, #0]
 8009710:	4b61      	ldr	r3, [pc, #388]	; (8009898 <_printf_i+0x21c>)
 8009712:	270a      	movs	r7, #10
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	e032      	b.n	800977e <_printf_i+0x102>
 8009718:	680d      	ldr	r5, [r1, #0]
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	0641      	lsls	r1, r0, #25
 800971e:	d5f1      	bpl.n	8009704 <_printf_i+0x88>
 8009720:	b22d      	sxth	r5, r5
 8009722:	e7ef      	b.n	8009704 <_printf_i+0x88>
 8009724:	680d      	ldr	r5, [r1, #0]
 8009726:	6819      	ldr	r1, [r3, #0]
 8009728:	1d08      	adds	r0, r1, #4
 800972a:	6018      	str	r0, [r3, #0]
 800972c:	062e      	lsls	r6, r5, #24
 800972e:	d501      	bpl.n	8009734 <_printf_i+0xb8>
 8009730:	680d      	ldr	r5, [r1, #0]
 8009732:	e003      	b.n	800973c <_printf_i+0xc0>
 8009734:	066d      	lsls	r5, r5, #25
 8009736:	d5fb      	bpl.n	8009730 <_printf_i+0xb4>
 8009738:	680d      	ldr	r5, [r1, #0]
 800973a:	b2ad      	uxth	r5, r5
 800973c:	4b56      	ldr	r3, [pc, #344]	; (8009898 <_printf_i+0x21c>)
 800973e:	270a      	movs	r7, #10
 8009740:	9303      	str	r3, [sp, #12]
 8009742:	2a6f      	cmp	r2, #111	; 0x6f
 8009744:	d117      	bne.n	8009776 <_printf_i+0xfa>
 8009746:	2708      	movs	r7, #8
 8009748:	e015      	b.n	8009776 <_printf_i+0xfa>
 800974a:	3145      	adds	r1, #69	; 0x45
 800974c:	700a      	strb	r2, [r1, #0]
 800974e:	4a52      	ldr	r2, [pc, #328]	; (8009898 <_printf_i+0x21c>)
 8009750:	9203      	str	r2, [sp, #12]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	6821      	ldr	r1, [r4, #0]
 8009756:	ca20      	ldmia	r2!, {r5}
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	0608      	lsls	r0, r1, #24
 800975c:	d550      	bpl.n	8009800 <_printf_i+0x184>
 800975e:	07cb      	lsls	r3, r1, #31
 8009760:	d502      	bpl.n	8009768 <_printf_i+0xec>
 8009762:	2320      	movs	r3, #32
 8009764:	4319      	orrs	r1, r3
 8009766:	6021      	str	r1, [r4, #0]
 8009768:	2710      	movs	r7, #16
 800976a:	2d00      	cmp	r5, #0
 800976c:	d103      	bne.n	8009776 <_printf_i+0xfa>
 800976e:	2320      	movs	r3, #32
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	439a      	bics	r2, r3
 8009774:	6022      	str	r2, [r4, #0]
 8009776:	0023      	movs	r3, r4
 8009778:	2200      	movs	r2, #0
 800977a:	3343      	adds	r3, #67	; 0x43
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	6863      	ldr	r3, [r4, #4]
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	db03      	blt.n	800978e <_printf_i+0x112>
 8009786:	2204      	movs	r2, #4
 8009788:	6821      	ldr	r1, [r4, #0]
 800978a:	4391      	bics	r1, r2
 800978c:	6021      	str	r1, [r4, #0]
 800978e:	2d00      	cmp	r5, #0
 8009790:	d102      	bne.n	8009798 <_printf_i+0x11c>
 8009792:	9e04      	ldr	r6, [sp, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00c      	beq.n	80097b2 <_printf_i+0x136>
 8009798:	9e04      	ldr	r6, [sp, #16]
 800979a:	0028      	movs	r0, r5
 800979c:	0039      	movs	r1, r7
 800979e:	f7f6 fd37 	bl	8000210 <__aeabi_uidivmod>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	3e01      	subs	r6, #1
 80097a6:	5c5b      	ldrb	r3, [r3, r1]
 80097a8:	7033      	strb	r3, [r6, #0]
 80097aa:	002b      	movs	r3, r5
 80097ac:	0005      	movs	r5, r0
 80097ae:	429f      	cmp	r7, r3
 80097b0:	d9f3      	bls.n	800979a <_printf_i+0x11e>
 80097b2:	2f08      	cmp	r7, #8
 80097b4:	d109      	bne.n	80097ca <_printf_i+0x14e>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	07db      	lsls	r3, r3, #31
 80097ba:	d506      	bpl.n	80097ca <_printf_i+0x14e>
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	6922      	ldr	r2, [r4, #16]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	dc02      	bgt.n	80097ca <_printf_i+0x14e>
 80097c4:	2330      	movs	r3, #48	; 0x30
 80097c6:	3e01      	subs	r6, #1
 80097c8:	7033      	strb	r3, [r6, #0]
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	1b9b      	subs	r3, r3, r6
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	9b07      	ldr	r3, [sp, #28]
 80097d2:	0021      	movs	r1, r4
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	9805      	ldr	r0, [sp, #20]
 80097d8:	9b06      	ldr	r3, [sp, #24]
 80097da:	aa09      	add	r2, sp, #36	; 0x24
 80097dc:	f7ff fede 	bl	800959c <_printf_common>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d135      	bne.n	8009850 <_printf_i+0x1d4>
 80097e4:	2001      	movs	r0, #1
 80097e6:	4240      	negs	r0, r0
 80097e8:	b00b      	add	sp, #44	; 0x2c
 80097ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ec:	2220      	movs	r2, #32
 80097ee:	6809      	ldr	r1, [r1, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	0022      	movs	r2, r4
 80097f6:	2178      	movs	r1, #120	; 0x78
 80097f8:	3245      	adds	r2, #69	; 0x45
 80097fa:	7011      	strb	r1, [r2, #0]
 80097fc:	4a27      	ldr	r2, [pc, #156]	; (800989c <_printf_i+0x220>)
 80097fe:	e7a7      	b.n	8009750 <_printf_i+0xd4>
 8009800:	0648      	lsls	r0, r1, #25
 8009802:	d5ac      	bpl.n	800975e <_printf_i+0xe2>
 8009804:	b2ad      	uxth	r5, r5
 8009806:	e7aa      	b.n	800975e <_printf_i+0xe2>
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	680d      	ldr	r5, [r1, #0]
 800980c:	1d10      	adds	r0, r2, #4
 800980e:	6949      	ldr	r1, [r1, #20]
 8009810:	6018      	str	r0, [r3, #0]
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	062e      	lsls	r6, r5, #24
 8009816:	d501      	bpl.n	800981c <_printf_i+0x1a0>
 8009818:	6019      	str	r1, [r3, #0]
 800981a:	e002      	b.n	8009822 <_printf_i+0x1a6>
 800981c:	066d      	lsls	r5, r5, #25
 800981e:	d5fb      	bpl.n	8009818 <_printf_i+0x19c>
 8009820:	8019      	strh	r1, [r3, #0]
 8009822:	2300      	movs	r3, #0
 8009824:	9e04      	ldr	r6, [sp, #16]
 8009826:	6123      	str	r3, [r4, #16]
 8009828:	e7d2      	b.n	80097d0 <_printf_i+0x154>
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	1d11      	adds	r1, r2, #4
 800982e:	6019      	str	r1, [r3, #0]
 8009830:	6816      	ldr	r6, [r2, #0]
 8009832:	2100      	movs	r1, #0
 8009834:	0030      	movs	r0, r6
 8009836:	6862      	ldr	r2, [r4, #4]
 8009838:	f001 f9f6 	bl	800ac28 <memchr>
 800983c:	2800      	cmp	r0, #0
 800983e:	d001      	beq.n	8009844 <_printf_i+0x1c8>
 8009840:	1b80      	subs	r0, r0, r6
 8009842:	6060      	str	r0, [r4, #4]
 8009844:	6863      	ldr	r3, [r4, #4]
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	2300      	movs	r3, #0
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	7013      	strb	r3, [r2, #0]
 800984e:	e7bf      	b.n	80097d0 <_printf_i+0x154>
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	0032      	movs	r2, r6
 8009854:	9906      	ldr	r1, [sp, #24]
 8009856:	9805      	ldr	r0, [sp, #20]
 8009858:	9d07      	ldr	r5, [sp, #28]
 800985a:	47a8      	blx	r5
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d0c1      	beq.n	80097e4 <_printf_i+0x168>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	079b      	lsls	r3, r3, #30
 8009864:	d415      	bmi.n	8009892 <_printf_i+0x216>
 8009866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009868:	68e0      	ldr	r0, [r4, #12]
 800986a:	4298      	cmp	r0, r3
 800986c:	dabc      	bge.n	80097e8 <_printf_i+0x16c>
 800986e:	0018      	movs	r0, r3
 8009870:	e7ba      	b.n	80097e8 <_printf_i+0x16c>
 8009872:	0022      	movs	r2, r4
 8009874:	2301      	movs	r3, #1
 8009876:	9906      	ldr	r1, [sp, #24]
 8009878:	9805      	ldr	r0, [sp, #20]
 800987a:	9e07      	ldr	r6, [sp, #28]
 800987c:	3219      	adds	r2, #25
 800987e:	47b0      	blx	r6
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d0af      	beq.n	80097e4 <_printf_i+0x168>
 8009884:	3501      	adds	r5, #1
 8009886:	68e3      	ldr	r3, [r4, #12]
 8009888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800988a:	1a9b      	subs	r3, r3, r2
 800988c:	42ab      	cmp	r3, r5
 800988e:	dcf0      	bgt.n	8009872 <_printf_i+0x1f6>
 8009890:	e7e9      	b.n	8009866 <_printf_i+0x1ea>
 8009892:	2500      	movs	r5, #0
 8009894:	e7f7      	b.n	8009886 <_printf_i+0x20a>
 8009896:	46c0      	nop			; (mov r8, r8)
 8009898:	0800bced 	.word	0x0800bced
 800989c:	0800bcfe 	.word	0x0800bcfe

080098a0 <strcpy>:
 80098a0:	0003      	movs	r3, r0
 80098a2:	780a      	ldrb	r2, [r1, #0]
 80098a4:	3101      	adds	r1, #1
 80098a6:	701a      	strb	r2, [r3, #0]
 80098a8:	3301      	adds	r3, #1
 80098aa:	2a00      	cmp	r2, #0
 80098ac:	d1f9      	bne.n	80098a2 <strcpy+0x2>
 80098ae:	4770      	bx	lr

080098b0 <__swbuf_r>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	0005      	movs	r5, r0
 80098b4:	000e      	movs	r6, r1
 80098b6:	0014      	movs	r4, r2
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d004      	beq.n	80098c6 <__swbuf_r+0x16>
 80098bc:	6983      	ldr	r3, [r0, #24]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <__swbuf_r+0x16>
 80098c2:	f001 f8a1 	bl	800aa08 <__sinit>
 80098c6:	4b22      	ldr	r3, [pc, #136]	; (8009950 <__swbuf_r+0xa0>)
 80098c8:	429c      	cmp	r4, r3
 80098ca:	d12e      	bne.n	800992a <__swbuf_r+0x7a>
 80098cc:	686c      	ldr	r4, [r5, #4]
 80098ce:	69a3      	ldr	r3, [r4, #24]
 80098d0:	60a3      	str	r3, [r4, #8]
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	071b      	lsls	r3, r3, #28
 80098d6:	d532      	bpl.n	800993e <__swbuf_r+0x8e>
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d02f      	beq.n	800993e <__swbuf_r+0x8e>
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	6922      	ldr	r2, [r4, #16]
 80098e2:	b2f7      	uxtb	r7, r6
 80098e4:	1a98      	subs	r0, r3, r2
 80098e6:	6963      	ldr	r3, [r4, #20]
 80098e8:	b2f6      	uxtb	r6, r6
 80098ea:	4283      	cmp	r3, r0
 80098ec:	dc05      	bgt.n	80098fa <__swbuf_r+0x4a>
 80098ee:	0021      	movs	r1, r4
 80098f0:	0028      	movs	r0, r5
 80098f2:	f000 ffe7 	bl	800a8c4 <_fflush_r>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d127      	bne.n	800994a <__swbuf_r+0x9a>
 80098fa:	68a3      	ldr	r3, [r4, #8]
 80098fc:	3001      	adds	r0, #1
 80098fe:	3b01      	subs	r3, #1
 8009900:	60a3      	str	r3, [r4, #8]
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	6022      	str	r2, [r4, #0]
 8009908:	701f      	strb	r7, [r3, #0]
 800990a:	6963      	ldr	r3, [r4, #20]
 800990c:	4283      	cmp	r3, r0
 800990e:	d004      	beq.n	800991a <__swbuf_r+0x6a>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	07db      	lsls	r3, r3, #31
 8009914:	d507      	bpl.n	8009926 <__swbuf_r+0x76>
 8009916:	2e0a      	cmp	r6, #10
 8009918:	d105      	bne.n	8009926 <__swbuf_r+0x76>
 800991a:	0021      	movs	r1, r4
 800991c:	0028      	movs	r0, r5
 800991e:	f000 ffd1 	bl	800a8c4 <_fflush_r>
 8009922:	2800      	cmp	r0, #0
 8009924:	d111      	bne.n	800994a <__swbuf_r+0x9a>
 8009926:	0030      	movs	r0, r6
 8009928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <__swbuf_r+0xa4>)
 800992c:	429c      	cmp	r4, r3
 800992e:	d101      	bne.n	8009934 <__swbuf_r+0x84>
 8009930:	68ac      	ldr	r4, [r5, #8]
 8009932:	e7cc      	b.n	80098ce <__swbuf_r+0x1e>
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <__swbuf_r+0xa8>)
 8009936:	429c      	cmp	r4, r3
 8009938:	d1c9      	bne.n	80098ce <__swbuf_r+0x1e>
 800993a:	68ec      	ldr	r4, [r5, #12]
 800993c:	e7c7      	b.n	80098ce <__swbuf_r+0x1e>
 800993e:	0021      	movs	r1, r4
 8009940:	0028      	movs	r0, r5
 8009942:	f000 f80b 	bl	800995c <__swsetup_r>
 8009946:	2800      	cmp	r0, #0
 8009948:	d0c9      	beq.n	80098de <__swbuf_r+0x2e>
 800994a:	2601      	movs	r6, #1
 800994c:	4276      	negs	r6, r6
 800994e:	e7ea      	b.n	8009926 <__swbuf_r+0x76>
 8009950:	0800bda0 	.word	0x0800bda0
 8009954:	0800bdc0 	.word	0x0800bdc0
 8009958:	0800bd80 	.word	0x0800bd80

0800995c <__swsetup_r>:
 800995c:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <__swsetup_r+0xe0>)
 800995e:	b570      	push	{r4, r5, r6, lr}
 8009960:	681d      	ldr	r5, [r3, #0]
 8009962:	0006      	movs	r6, r0
 8009964:	000c      	movs	r4, r1
 8009966:	2d00      	cmp	r5, #0
 8009968:	d005      	beq.n	8009976 <__swsetup_r+0x1a>
 800996a:	69ab      	ldr	r3, [r5, #24]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <__swsetup_r+0x1a>
 8009970:	0028      	movs	r0, r5
 8009972:	f001 f849 	bl	800aa08 <__sinit>
 8009976:	4b32      	ldr	r3, [pc, #200]	; (8009a40 <__swsetup_r+0xe4>)
 8009978:	429c      	cmp	r4, r3
 800997a:	d10f      	bne.n	800999c <__swsetup_r+0x40>
 800997c:	686c      	ldr	r4, [r5, #4]
 800997e:	230c      	movs	r3, #12
 8009980:	5ee2      	ldrsh	r2, [r4, r3]
 8009982:	b293      	uxth	r3, r2
 8009984:	0711      	lsls	r1, r2, #28
 8009986:	d42d      	bmi.n	80099e4 <__swsetup_r+0x88>
 8009988:	06d9      	lsls	r1, r3, #27
 800998a:	d411      	bmi.n	80099b0 <__swsetup_r+0x54>
 800998c:	2309      	movs	r3, #9
 800998e:	2001      	movs	r0, #1
 8009990:	6033      	str	r3, [r6, #0]
 8009992:	3337      	adds	r3, #55	; 0x37
 8009994:	4313      	orrs	r3, r2
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	4240      	negs	r0, r0
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <__swsetup_r+0xe8>)
 800999e:	429c      	cmp	r4, r3
 80099a0:	d101      	bne.n	80099a6 <__swsetup_r+0x4a>
 80099a2:	68ac      	ldr	r4, [r5, #8]
 80099a4:	e7eb      	b.n	800997e <__swsetup_r+0x22>
 80099a6:	4b28      	ldr	r3, [pc, #160]	; (8009a48 <__swsetup_r+0xec>)
 80099a8:	429c      	cmp	r4, r3
 80099aa:	d1e8      	bne.n	800997e <__swsetup_r+0x22>
 80099ac:	68ec      	ldr	r4, [r5, #12]
 80099ae:	e7e6      	b.n	800997e <__swsetup_r+0x22>
 80099b0:	075b      	lsls	r3, r3, #29
 80099b2:	d513      	bpl.n	80099dc <__swsetup_r+0x80>
 80099b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099b6:	2900      	cmp	r1, #0
 80099b8:	d008      	beq.n	80099cc <__swsetup_r+0x70>
 80099ba:	0023      	movs	r3, r4
 80099bc:	3344      	adds	r3, #68	; 0x44
 80099be:	4299      	cmp	r1, r3
 80099c0:	d002      	beq.n	80099c8 <__swsetup_r+0x6c>
 80099c2:	0030      	movs	r0, r6
 80099c4:	f7fe fe7c 	bl	80086c0 <_free_r>
 80099c8:	2300      	movs	r3, #0
 80099ca:	6363      	str	r3, [r4, #52]	; 0x34
 80099cc:	2224      	movs	r2, #36	; 0x24
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	4393      	bics	r3, r2
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	2300      	movs	r3, #0
 80099d6:	6063      	str	r3, [r4, #4]
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	2308      	movs	r3, #8
 80099de:	89a2      	ldrh	r2, [r4, #12]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10b      	bne.n	8009a02 <__swsetup_r+0xa6>
 80099ea:	21a0      	movs	r1, #160	; 0xa0
 80099ec:	2280      	movs	r2, #128	; 0x80
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	0089      	lsls	r1, r1, #2
 80099f2:	0092      	lsls	r2, r2, #2
 80099f4:	400b      	ands	r3, r1
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d003      	beq.n	8009a02 <__swsetup_r+0xa6>
 80099fa:	0021      	movs	r1, r4
 80099fc:	0030      	movs	r0, r6
 80099fe:	f001 f8cf 	bl	800aba0 <__smakebuf_r>
 8009a02:	220c      	movs	r2, #12
 8009a04:	5ea3      	ldrsh	r3, [r4, r2]
 8009a06:	2001      	movs	r0, #1
 8009a08:	001a      	movs	r2, r3
 8009a0a:	b299      	uxth	r1, r3
 8009a0c:	4002      	ands	r2, r0
 8009a0e:	4203      	tst	r3, r0
 8009a10:	d00f      	beq.n	8009a32 <__swsetup_r+0xd6>
 8009a12:	2200      	movs	r2, #0
 8009a14:	60a2      	str	r2, [r4, #8]
 8009a16:	6962      	ldr	r2, [r4, #20]
 8009a18:	4252      	negs	r2, r2
 8009a1a:	61a2      	str	r2, [r4, #24]
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	6922      	ldr	r2, [r4, #16]
 8009a20:	4282      	cmp	r2, r0
 8009a22:	d1ba      	bne.n	800999a <__swsetup_r+0x3e>
 8009a24:	060a      	lsls	r2, r1, #24
 8009a26:	d5b8      	bpl.n	800999a <__swsetup_r+0x3e>
 8009a28:	2240      	movs	r2, #64	; 0x40
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	3801      	subs	r0, #1
 8009a30:	e7b3      	b.n	800999a <__swsetup_r+0x3e>
 8009a32:	0788      	lsls	r0, r1, #30
 8009a34:	d400      	bmi.n	8009a38 <__swsetup_r+0xdc>
 8009a36:	6962      	ldr	r2, [r4, #20]
 8009a38:	60a2      	str	r2, [r4, #8]
 8009a3a:	e7ef      	b.n	8009a1c <__swsetup_r+0xc0>
 8009a3c:	20000088 	.word	0x20000088
 8009a40:	0800bda0 	.word	0x0800bda0
 8009a44:	0800bdc0 	.word	0x0800bdc0
 8009a48:	0800bd80 	.word	0x0800bd80

08009a4c <abort>:
 8009a4c:	2006      	movs	r0, #6
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	f001 f928 	bl	800aca4 <raise>
 8009a54:	2001      	movs	r0, #1
 8009a56:	f7fa fb87 	bl	8004168 <_exit>

08009a5a <quorem>:
 8009a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a5c:	0006      	movs	r6, r0
 8009a5e:	690d      	ldr	r5, [r1, #16]
 8009a60:	6933      	ldr	r3, [r6, #16]
 8009a62:	b087      	sub	sp, #28
 8009a64:	2000      	movs	r0, #0
 8009a66:	9102      	str	r1, [sp, #8]
 8009a68:	42ab      	cmp	r3, r5
 8009a6a:	db6b      	blt.n	8009b44 <quorem+0xea>
 8009a6c:	000b      	movs	r3, r1
 8009a6e:	3d01      	subs	r5, #1
 8009a70:	00ac      	lsls	r4, r5, #2
 8009a72:	3314      	adds	r3, #20
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	191b      	adds	r3, r3, r4
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	0033      	movs	r3, r6
 8009a7c:	3314      	adds	r3, #20
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	191c      	adds	r4, r3, r4
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	6827      	ldr	r7, [r4, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	0038      	movs	r0, r7
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	0019      	movs	r1, r3
 8009a90:	9304      	str	r3, [sp, #16]
 8009a92:	f7f6 fb37 	bl	8000104 <__udivsi3>
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	9000      	str	r0, [sp, #0]
 8009a9a:	429f      	cmp	r7, r3
 8009a9c:	d329      	bcc.n	8009af2 <quorem+0x98>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	469c      	mov	ip, r3
 8009aa2:	9801      	ldr	r0, [sp, #4]
 8009aa4:	9f05      	ldr	r7, [sp, #20]
 8009aa6:	9304      	str	r3, [sp, #16]
 8009aa8:	cf08      	ldmia	r7!, {r3}
 8009aaa:	9a00      	ldr	r2, [sp, #0]
 8009aac:	b299      	uxth	r1, r3
 8009aae:	4351      	muls	r1, r2
 8009ab0:	0c1b      	lsrs	r3, r3, #16
 8009ab2:	4353      	muls	r3, r2
 8009ab4:	4461      	add	r1, ip
 8009ab6:	0c0a      	lsrs	r2, r1, #16
 8009ab8:	189b      	adds	r3, r3, r2
 8009aba:	0c1a      	lsrs	r2, r3, #16
 8009abc:	9305      	str	r3, [sp, #20]
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	4694      	mov	ip, r2
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	9b04      	ldr	r3, [sp, #16]
 8009ac6:	b289      	uxth	r1, r1
 8009ac8:	18d2      	adds	r2, r2, r3
 8009aca:	6803      	ldr	r3, [r0, #0]
 8009acc:	1a52      	subs	r2, r2, r1
 8009ace:	0c19      	lsrs	r1, r3, #16
 8009ad0:	466b      	mov	r3, sp
 8009ad2:	8a9b      	ldrh	r3, [r3, #20]
 8009ad4:	1acb      	subs	r3, r1, r3
 8009ad6:	1411      	asrs	r1, r2, #16
 8009ad8:	185b      	adds	r3, r3, r1
 8009ada:	1419      	asrs	r1, r3, #16
 8009adc:	b292      	uxth	r2, r2
 8009ade:	041b      	lsls	r3, r3, #16
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	9104      	str	r1, [sp, #16]
 8009ae6:	c004      	stmia	r0!, {r2}
 8009ae8:	42bb      	cmp	r3, r7
 8009aea:	d2dd      	bcs.n	8009aa8 <quorem+0x4e>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d02e      	beq.n	8009b50 <quorem+0xf6>
 8009af2:	0030      	movs	r0, r6
 8009af4:	9902      	ldr	r1, [sp, #8]
 8009af6:	f7ff faaf 	bl	8009058 <__mcmp>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	db21      	blt.n	8009b42 <quorem+0xe8>
 8009afe:	0030      	movs	r0, r6
 8009b00:	2400      	movs	r4, #0
 8009b02:	9b00      	ldr	r3, [sp, #0]
 8009b04:	9902      	ldr	r1, [sp, #8]
 8009b06:	3301      	adds	r3, #1
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	3014      	adds	r0, #20
 8009b0c:	3114      	adds	r1, #20
 8009b0e:	6802      	ldr	r2, [r0, #0]
 8009b10:	c908      	ldmia	r1!, {r3}
 8009b12:	b292      	uxth	r2, r2
 8009b14:	1914      	adds	r4, r2, r4
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	1aa2      	subs	r2, r4, r2
 8009b1a:	6804      	ldr	r4, [r0, #0]
 8009b1c:	0c1b      	lsrs	r3, r3, #16
 8009b1e:	0c24      	lsrs	r4, r4, #16
 8009b20:	1ae3      	subs	r3, r4, r3
 8009b22:	1414      	asrs	r4, r2, #16
 8009b24:	191b      	adds	r3, r3, r4
 8009b26:	141c      	asrs	r4, r3, #16
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	041b      	lsls	r3, r3, #16
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	c008      	stmia	r0!, {r3}
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	428b      	cmp	r3, r1
 8009b34:	d2eb      	bcs.n	8009b0e <quorem+0xb4>
 8009b36:	9a01      	ldr	r2, [sp, #4]
 8009b38:	00ab      	lsls	r3, r5, #2
 8009b3a:	18d3      	adds	r3, r2, r3
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	d010      	beq.n	8009b64 <quorem+0x10a>
 8009b42:	9800      	ldr	r0, [sp, #0]
 8009b44:	b007      	add	sp, #28
 8009b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d104      	bne.n	8009b58 <quorem+0xfe>
 8009b4e:	3d01      	subs	r5, #1
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	3c04      	subs	r4, #4
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	d3f7      	bcc.n	8009b48 <quorem+0xee>
 8009b58:	6135      	str	r5, [r6, #16]
 8009b5a:	e7ca      	b.n	8009af2 <quorem+0x98>
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	d104      	bne.n	8009b6c <quorem+0x112>
 8009b62:	3d01      	subs	r5, #1
 8009b64:	9a01      	ldr	r2, [sp, #4]
 8009b66:	3b04      	subs	r3, #4
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d3f7      	bcc.n	8009b5c <quorem+0x102>
 8009b6c:	6135      	str	r5, [r6, #16]
 8009b6e:	e7e8      	b.n	8009b42 <quorem+0xe8>

08009b70 <_dtoa_r>:
 8009b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b72:	b09d      	sub	sp, #116	; 0x74
 8009b74:	9202      	str	r2, [sp, #8]
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	9b02      	ldr	r3, [sp, #8]
 8009b7a:	9c03      	ldr	r4, [sp, #12]
 8009b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b7e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009b80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b82:	0007      	movs	r7, r0
 8009b84:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009b86:	2c00      	cmp	r4, #0
 8009b88:	d10e      	bne.n	8009ba8 <_dtoa_r+0x38>
 8009b8a:	2010      	movs	r0, #16
 8009b8c:	f7fe fd86 	bl	800869c <malloc>
 8009b90:	1e02      	subs	r2, r0, #0
 8009b92:	6278      	str	r0, [r7, #36]	; 0x24
 8009b94:	d104      	bne.n	8009ba0 <_dtoa_r+0x30>
 8009b96:	21ea      	movs	r1, #234	; 0xea
 8009b98:	4bc0      	ldr	r3, [pc, #768]	; (8009e9c <_dtoa_r+0x32c>)
 8009b9a:	48c1      	ldr	r0, [pc, #772]	; (8009ea0 <_dtoa_r+0x330>)
 8009b9c:	f7fe fe4a 	bl	8008834 <__assert_func>
 8009ba0:	6044      	str	r4, [r0, #4]
 8009ba2:	6084      	str	r4, [r0, #8]
 8009ba4:	6004      	str	r4, [r0, #0]
 8009ba6:	60c4      	str	r4, [r0, #12]
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	6819      	ldr	r1, [r3, #0]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d00a      	beq.n	8009bc6 <_dtoa_r+0x56>
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4093      	lsls	r3, r2
 8009bb6:	604a      	str	r2, [r1, #4]
 8009bb8:	608b      	str	r3, [r1, #8]
 8009bba:	0038      	movs	r0, r7
 8009bbc:	f7ff f80a 	bl	8008bd4 <_Bfree>
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	601a      	str	r2, [r3, #0]
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	da21      	bge.n	8009c10 <_dtoa_r+0xa0>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	085b      	lsrs	r3, r3, #1
 8009bd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009bda:	4bb2      	ldr	r3, [pc, #712]	; (8009ea4 <_dtoa_r+0x334>)
 8009bdc:	002a      	movs	r2, r5
 8009bde:	9318      	str	r3, [sp, #96]	; 0x60
 8009be0:	401a      	ands	r2, r3
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d117      	bne.n	8009c16 <_dtoa_r+0xa6>
 8009be6:	4bb0      	ldr	r3, [pc, #704]	; (8009ea8 <_dtoa_r+0x338>)
 8009be8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bea:	0328      	lsls	r0, r5, #12
 8009bec:	6013      	str	r3, [r2, #0]
 8009bee:	9b02      	ldr	r3, [sp, #8]
 8009bf0:	0b00      	lsrs	r0, r0, #12
 8009bf2:	4318      	orrs	r0, r3
 8009bf4:	d101      	bne.n	8009bfa <_dtoa_r+0x8a>
 8009bf6:	f000 fdc3 	bl	800a780 <_dtoa_r+0xc10>
 8009bfa:	48ac      	ldr	r0, [pc, #688]	; (8009eac <_dtoa_r+0x33c>)
 8009bfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009bfe:	9005      	str	r0, [sp, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <_dtoa_r+0x9a>
 8009c04:	4baa      	ldr	r3, [pc, #680]	; (8009eb0 <_dtoa_r+0x340>)
 8009c06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	9805      	ldr	r0, [sp, #20]
 8009c0c:	b01d      	add	sp, #116	; 0x74
 8009c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c10:	2300      	movs	r3, #0
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	e7e0      	b.n	8009bd8 <_dtoa_r+0x68>
 8009c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c1c:	9413      	str	r4, [sp, #76]	; 0x4c
 8009c1e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c20:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c22:	2200      	movs	r2, #0
 8009c24:	2300      	movs	r3, #0
 8009c26:	f7f8 f8c7 	bl	8001db8 <__aeabi_dcmpeq>
 8009c2a:	1e04      	subs	r4, r0, #0
 8009c2c:	d00b      	beq.n	8009c46 <_dtoa_r+0xd6>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	4b9f      	ldr	r3, [pc, #636]	; (8009eb4 <_dtoa_r+0x344>)
 8009c36:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	d0e5      	beq.n	8009c0a <_dtoa_r+0x9a>
 8009c3e:	4a9e      	ldr	r2, [pc, #632]	; (8009eb8 <_dtoa_r+0x348>)
 8009c40:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009c42:	600a      	str	r2, [r1, #0]
 8009c44:	e7e1      	b.n	8009c0a <_dtoa_r+0x9a>
 8009c46:	ab1a      	add	r3, sp, #104	; 0x68
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	ab1b      	add	r3, sp, #108	; 0x6c
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	0038      	movs	r0, r7
 8009c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c54:	f7ff fab4 	bl	80091c0 <__d2b>
 8009c58:	006e      	lsls	r6, r5, #1
 8009c5a:	9004      	str	r0, [sp, #16]
 8009c5c:	0d76      	lsrs	r6, r6, #21
 8009c5e:	d100      	bne.n	8009c62 <_dtoa_r+0xf2>
 8009c60:	e07c      	b.n	8009d5c <_dtoa_r+0x1ec>
 8009c62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c64:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c68:	4a94      	ldr	r2, [pc, #592]	; (8009ebc <_dtoa_r+0x34c>)
 8009c6a:	031b      	lsls	r3, r3, #12
 8009c6c:	0b1b      	lsrs	r3, r3, #12
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	0011      	movs	r1, r2
 8009c72:	4b93      	ldr	r3, [pc, #588]	; (8009ec0 <_dtoa_r+0x350>)
 8009c74:	9416      	str	r4, [sp, #88]	; 0x58
 8009c76:	18f6      	adds	r6, r6, r3
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4b92      	ldr	r3, [pc, #584]	; (8009ec4 <_dtoa_r+0x354>)
 8009c7c:	f7f7 fc94 	bl	80015a8 <__aeabi_dsub>
 8009c80:	4a91      	ldr	r2, [pc, #580]	; (8009ec8 <_dtoa_r+0x358>)
 8009c82:	4b92      	ldr	r3, [pc, #584]	; (8009ecc <_dtoa_r+0x35c>)
 8009c84:	f7f7 fa24 	bl	80010d0 <__aeabi_dmul>
 8009c88:	4a91      	ldr	r2, [pc, #580]	; (8009ed0 <_dtoa_r+0x360>)
 8009c8a:	4b92      	ldr	r3, [pc, #584]	; (8009ed4 <_dtoa_r+0x364>)
 8009c8c:	f7f6 fbce 	bl	800042c <__aeabi_dadd>
 8009c90:	0004      	movs	r4, r0
 8009c92:	0030      	movs	r0, r6
 8009c94:	000d      	movs	r5, r1
 8009c96:	f7f8 f84f 	bl	8001d38 <__aeabi_i2d>
 8009c9a:	4a8f      	ldr	r2, [pc, #572]	; (8009ed8 <_dtoa_r+0x368>)
 8009c9c:	4b8f      	ldr	r3, [pc, #572]	; (8009edc <_dtoa_r+0x36c>)
 8009c9e:	f7f7 fa17 	bl	80010d0 <__aeabi_dmul>
 8009ca2:	0002      	movs	r2, r0
 8009ca4:	000b      	movs	r3, r1
 8009ca6:	0020      	movs	r0, r4
 8009ca8:	0029      	movs	r1, r5
 8009caa:	f7f6 fbbf 	bl	800042c <__aeabi_dadd>
 8009cae:	0004      	movs	r4, r0
 8009cb0:	000d      	movs	r5, r1
 8009cb2:	f7f8 f80b 	bl	8001ccc <__aeabi_d2iz>
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	9002      	str	r0, [sp, #8]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	0020      	movs	r0, r4
 8009cbe:	0029      	movs	r1, r5
 8009cc0:	f7f8 f880 	bl	8001dc4 <__aeabi_dcmplt>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d00b      	beq.n	8009ce0 <_dtoa_r+0x170>
 8009cc8:	9802      	ldr	r0, [sp, #8]
 8009cca:	f7f8 f835 	bl	8001d38 <__aeabi_i2d>
 8009cce:	002b      	movs	r3, r5
 8009cd0:	0022      	movs	r2, r4
 8009cd2:	f7f8 f871 	bl	8001db8 <__aeabi_dcmpeq>
 8009cd6:	4243      	negs	r3, r0
 8009cd8:	4158      	adcs	r0, r3
 8009cda:	9b02      	ldr	r3, [sp, #8]
 8009cdc:	1a1b      	subs	r3, r3, r0
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8009ce4:	9b02      	ldr	r3, [sp, #8]
 8009ce6:	2b16      	cmp	r3, #22
 8009ce8:	d80f      	bhi.n	8009d0a <_dtoa_r+0x19a>
 8009cea:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009cec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009cee:	00da      	lsls	r2, r3, #3
 8009cf0:	4b7b      	ldr	r3, [pc, #492]	; (8009ee0 <_dtoa_r+0x370>)
 8009cf2:	189b      	adds	r3, r3, r2
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f7f8 f864 	bl	8001dc4 <__aeabi_dcmplt>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d049      	beq.n	8009d94 <_dtoa_r+0x224>
 8009d00:	9b02      	ldr	r3, [sp, #8]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	9302      	str	r3, [sp, #8]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9315      	str	r3, [sp, #84]	; 0x54
 8009d0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d0c:	1b9e      	subs	r6, r3, r6
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9308      	str	r3, [sp, #32]
 8009d12:	0033      	movs	r3, r6
 8009d14:	3b01      	subs	r3, #1
 8009d16:	930d      	str	r3, [sp, #52]	; 0x34
 8009d18:	d504      	bpl.n	8009d24 <_dtoa_r+0x1b4>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	1b9b      	subs	r3, r3, r6
 8009d1e:	9308      	str	r3, [sp, #32]
 8009d20:	2300      	movs	r3, #0
 8009d22:	930d      	str	r3, [sp, #52]	; 0x34
 8009d24:	9b02      	ldr	r3, [sp, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	db36      	blt.n	8009d98 <_dtoa_r+0x228>
 8009d2a:	9a02      	ldr	r2, [sp, #8]
 8009d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d2e:	4694      	mov	ip, r2
 8009d30:	4463      	add	r3, ip
 8009d32:	930d      	str	r3, [sp, #52]	; 0x34
 8009d34:	2300      	movs	r3, #0
 8009d36:	9214      	str	r2, [sp, #80]	; 0x50
 8009d38:	930e      	str	r3, [sp, #56]	; 0x38
 8009d3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d3c:	2401      	movs	r4, #1
 8009d3e:	2b09      	cmp	r3, #9
 8009d40:	d862      	bhi.n	8009e08 <_dtoa_r+0x298>
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	dd02      	ble.n	8009d4c <_dtoa_r+0x1dc>
 8009d46:	2400      	movs	r4, #0
 8009d48:	3b04      	subs	r3, #4
 8009d4a:	9322      	str	r3, [sp, #136]	; 0x88
 8009d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d4e:	1e98      	subs	r0, r3, #2
 8009d50:	2803      	cmp	r0, #3
 8009d52:	d862      	bhi.n	8009e1a <_dtoa_r+0x2aa>
 8009d54:	f7f8 f99a 	bl	800208c <__gnu_thumb1_case_uqi>
 8009d58:	56343629 	.word	0x56343629
 8009d5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009d5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d60:	189e      	adds	r6, r3, r2
 8009d62:	4b60      	ldr	r3, [pc, #384]	; (8009ee4 <_dtoa_r+0x374>)
 8009d64:	18f2      	adds	r2, r6, r3
 8009d66:	2a20      	cmp	r2, #32
 8009d68:	dd0f      	ble.n	8009d8a <_dtoa_r+0x21a>
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	1a9b      	subs	r3, r3, r2
 8009d6e:	409d      	lsls	r5, r3
 8009d70:	4b5d      	ldr	r3, [pc, #372]	; (8009ee8 <_dtoa_r+0x378>)
 8009d72:	9802      	ldr	r0, [sp, #8]
 8009d74:	18f3      	adds	r3, r6, r3
 8009d76:	40d8      	lsrs	r0, r3
 8009d78:	4328      	orrs	r0, r5
 8009d7a:	f7f8 f99b 	bl	80020b4 <__aeabi_ui2d>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4c5a      	ldr	r4, [pc, #360]	; (8009eec <_dtoa_r+0x37c>)
 8009d82:	3e01      	subs	r6, #1
 8009d84:	1909      	adds	r1, r1, r4
 8009d86:	9316      	str	r3, [sp, #88]	; 0x58
 8009d88:	e776      	b.n	8009c78 <_dtoa_r+0x108>
 8009d8a:	2320      	movs	r3, #32
 8009d8c:	9802      	ldr	r0, [sp, #8]
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	4098      	lsls	r0, r3
 8009d92:	e7f2      	b.n	8009d7a <_dtoa_r+0x20a>
 8009d94:	9015      	str	r0, [sp, #84]	; 0x54
 8009d96:	e7b8      	b.n	8009d0a <_dtoa_r+0x19a>
 8009d98:	9b08      	ldr	r3, [sp, #32]
 8009d9a:	9a02      	ldr	r2, [sp, #8]
 8009d9c:	1a9b      	subs	r3, r3, r2
 8009d9e:	9308      	str	r3, [sp, #32]
 8009da0:	4253      	negs	r3, r2
 8009da2:	930e      	str	r3, [sp, #56]	; 0x38
 8009da4:	2300      	movs	r3, #0
 8009da6:	9314      	str	r3, [sp, #80]	; 0x50
 8009da8:	e7c7      	b.n	8009d3a <_dtoa_r+0x1ca>
 8009daa:	2300      	movs	r3, #0
 8009dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dc36      	bgt.n	8009e22 <_dtoa_r+0x2b2>
 8009db4:	2301      	movs	r3, #1
 8009db6:	001a      	movs	r2, r3
 8009db8:	930c      	str	r3, [sp, #48]	; 0x30
 8009dba:	9306      	str	r3, [sp, #24]
 8009dbc:	9223      	str	r2, [sp, #140]	; 0x8c
 8009dbe:	e00d      	b.n	8009ddc <_dtoa_r+0x26c>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e7f3      	b.n	8009dac <_dtoa_r+0x23c>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dca:	4694      	mov	ip, r2
 8009dcc:	9b02      	ldr	r3, [sp, #8]
 8009dce:	4463      	add	r3, ip
 8009dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	9306      	str	r3, [sp, #24]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dc00      	bgt.n	8009ddc <_dtoa_r+0x26c>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	2200      	movs	r2, #0
 8009dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009de0:	6042      	str	r2, [r0, #4]
 8009de2:	3204      	adds	r2, #4
 8009de4:	0015      	movs	r5, r2
 8009de6:	3514      	adds	r5, #20
 8009de8:	6841      	ldr	r1, [r0, #4]
 8009dea:	429d      	cmp	r5, r3
 8009dec:	d91d      	bls.n	8009e2a <_dtoa_r+0x2ba>
 8009dee:	0038      	movs	r0, r7
 8009df0:	f7fe feac 	bl	8008b4c <_Balloc>
 8009df4:	9005      	str	r0, [sp, #20]
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d11b      	bne.n	8009e32 <_dtoa_r+0x2c2>
 8009dfa:	21d5      	movs	r1, #213	; 0xd5
 8009dfc:	0002      	movs	r2, r0
 8009dfe:	4b3c      	ldr	r3, [pc, #240]	; (8009ef0 <_dtoa_r+0x380>)
 8009e00:	0049      	lsls	r1, r1, #1
 8009e02:	e6ca      	b.n	8009b9a <_dtoa_r+0x2a>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e7de      	b.n	8009dc6 <_dtoa_r+0x256>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	940f      	str	r4, [sp, #60]	; 0x3c
 8009e0c:	9322      	str	r3, [sp, #136]	; 0x88
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	930c      	str	r3, [sp, #48]	; 0x30
 8009e12:	9306      	str	r3, [sp, #24]
 8009e14:	2200      	movs	r2, #0
 8009e16:	3313      	adds	r3, #19
 8009e18:	e7d0      	b.n	8009dbc <_dtoa_r+0x24c>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e1e:	3b02      	subs	r3, #2
 8009e20:	e7f6      	b.n	8009e10 <_dtoa_r+0x2a0>
 8009e22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e24:	930c      	str	r3, [sp, #48]	; 0x30
 8009e26:	9306      	str	r3, [sp, #24]
 8009e28:	e7d8      	b.n	8009ddc <_dtoa_r+0x26c>
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	6041      	str	r1, [r0, #4]
 8009e2e:	0052      	lsls	r2, r2, #1
 8009e30:	e7d8      	b.n	8009de4 <_dtoa_r+0x274>
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	9a05      	ldr	r2, [sp, #20]
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	2b0e      	cmp	r3, #14
 8009e3c:	d900      	bls.n	8009e40 <_dtoa_r+0x2d0>
 8009e3e:	e0eb      	b.n	800a018 <_dtoa_r+0x4a8>
 8009e40:	2c00      	cmp	r4, #0
 8009e42:	d100      	bne.n	8009e46 <_dtoa_r+0x2d6>
 8009e44:	e0e8      	b.n	800a018 <_dtoa_r+0x4a8>
 8009e46:	9b02      	ldr	r3, [sp, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dd68      	ble.n	8009f1e <_dtoa_r+0x3ae>
 8009e4c:	001a      	movs	r2, r3
 8009e4e:	210f      	movs	r1, #15
 8009e50:	4b23      	ldr	r3, [pc, #140]	; (8009ee0 <_dtoa_r+0x370>)
 8009e52:	400a      	ands	r2, r1
 8009e54:	00d2      	lsls	r2, r2, #3
 8009e56:	189b      	adds	r3, r3, r2
 8009e58:	681d      	ldr	r5, [r3, #0]
 8009e5a:	685e      	ldr	r6, [r3, #4]
 8009e5c:	9b02      	ldr	r3, [sp, #8]
 8009e5e:	111c      	asrs	r4, r3, #4
 8009e60:	2302      	movs	r3, #2
 8009e62:	9310      	str	r3, [sp, #64]	; 0x40
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	05db      	lsls	r3, r3, #23
 8009e68:	d50b      	bpl.n	8009e82 <_dtoa_r+0x312>
 8009e6a:	4b22      	ldr	r3, [pc, #136]	; (8009ef4 <_dtoa_r+0x384>)
 8009e6c:	400c      	ands	r4, r1
 8009e6e:	6a1a      	ldr	r2, [r3, #32]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e74:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e76:	f7f6 fe43 	bl	8000b00 <__aeabi_ddiv>
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	900a      	str	r0, [sp, #40]	; 0x28
 8009e7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e80:	9310      	str	r3, [sp, #64]	; 0x40
 8009e82:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <_dtoa_r+0x384>)
 8009e84:	9307      	str	r3, [sp, #28]
 8009e86:	2c00      	cmp	r4, #0
 8009e88:	d136      	bne.n	8009ef8 <_dtoa_r+0x388>
 8009e8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e8e:	002a      	movs	r2, r5
 8009e90:	0033      	movs	r3, r6
 8009e92:	f7f6 fe35 	bl	8000b00 <__aeabi_ddiv>
 8009e96:	900a      	str	r0, [sp, #40]	; 0x28
 8009e98:	910b      	str	r1, [sp, #44]	; 0x2c
 8009e9a:	e05c      	b.n	8009f56 <_dtoa_r+0x3e6>
 8009e9c:	0800bb54 	.word	0x0800bb54
 8009ea0:	0800bd1e 	.word	0x0800bd1e
 8009ea4:	7ff00000 	.word	0x7ff00000
 8009ea8:	0000270f 	.word	0x0000270f
 8009eac:	0800bd18 	.word	0x0800bd18
 8009eb0:	0800bd1b 	.word	0x0800bd1b
 8009eb4:	0800bd1c 	.word	0x0800bd1c
 8009eb8:	0800bd1d 	.word	0x0800bd1d
 8009ebc:	3ff00000 	.word	0x3ff00000
 8009ec0:	fffffc01 	.word	0xfffffc01
 8009ec4:	3ff80000 	.word	0x3ff80000
 8009ec8:	636f4361 	.word	0x636f4361
 8009ecc:	3fd287a7 	.word	0x3fd287a7
 8009ed0:	8b60c8b3 	.word	0x8b60c8b3
 8009ed4:	3fc68a28 	.word	0x3fc68a28
 8009ed8:	509f79fb 	.word	0x509f79fb
 8009edc:	3fd34413 	.word	0x3fd34413
 8009ee0:	0800bc08 	.word	0x0800bc08
 8009ee4:	00000432 	.word	0x00000432
 8009ee8:	00000412 	.word	0x00000412
 8009eec:	fe100000 	.word	0xfe100000
 8009ef0:	0800bbcb 	.word	0x0800bbcb
 8009ef4:	0800bbe0 	.word	0x0800bbe0
 8009ef8:	2301      	movs	r3, #1
 8009efa:	421c      	tst	r4, r3
 8009efc:	d00b      	beq.n	8009f16 <_dtoa_r+0x3a6>
 8009efe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f00:	0028      	movs	r0, r5
 8009f02:	3301      	adds	r3, #1
 8009f04:	9310      	str	r3, [sp, #64]	; 0x40
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	0031      	movs	r1, r6
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f7f7 f8df 	bl	80010d0 <__aeabi_dmul>
 8009f12:	0005      	movs	r5, r0
 8009f14:	000e      	movs	r6, r1
 8009f16:	9b07      	ldr	r3, [sp, #28]
 8009f18:	1064      	asrs	r4, r4, #1
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	e7b2      	b.n	8009e84 <_dtoa_r+0x314>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	9310      	str	r3, [sp, #64]	; 0x40
 8009f22:	9b02      	ldr	r3, [sp, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d016      	beq.n	8009f56 <_dtoa_r+0x3e6>
 8009f28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f2c:	425c      	negs	r4, r3
 8009f2e:	230f      	movs	r3, #15
 8009f30:	4ab5      	ldr	r2, [pc, #724]	; (800a208 <_dtoa_r+0x698>)
 8009f32:	4023      	ands	r3, r4
 8009f34:	00db      	lsls	r3, r3, #3
 8009f36:	18d3      	adds	r3, r2, r3
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	f7f7 f8c8 	bl	80010d0 <__aeabi_dmul>
 8009f40:	2601      	movs	r6, #1
 8009f42:	2300      	movs	r3, #0
 8009f44:	900a      	str	r0, [sp, #40]	; 0x28
 8009f46:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f48:	4db0      	ldr	r5, [pc, #704]	; (800a20c <_dtoa_r+0x69c>)
 8009f4a:	1124      	asrs	r4, r4, #4
 8009f4c:	2c00      	cmp	r4, #0
 8009f4e:	d000      	beq.n	8009f52 <_dtoa_r+0x3e2>
 8009f50:	e094      	b.n	800a07c <_dtoa_r+0x50c>
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d19f      	bne.n	8009e96 <_dtoa_r+0x326>
 8009f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d100      	bne.n	8009f5e <_dtoa_r+0x3ee>
 8009f5c:	e09b      	b.n	800a096 <_dtoa_r+0x526>
 8009f5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009f62:	2200      	movs	r2, #0
 8009f64:	0020      	movs	r0, r4
 8009f66:	0029      	movs	r1, r5
 8009f68:	4ba9      	ldr	r3, [pc, #676]	; (800a210 <_dtoa_r+0x6a0>)
 8009f6a:	f7f7 ff2b 	bl	8001dc4 <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d100      	bne.n	8009f74 <_dtoa_r+0x404>
 8009f72:	e090      	b.n	800a096 <_dtoa_r+0x526>
 8009f74:	9b06      	ldr	r3, [sp, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d100      	bne.n	8009f7c <_dtoa_r+0x40c>
 8009f7a:	e08c      	b.n	800a096 <_dtoa_r+0x526>
 8009f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dd46      	ble.n	800a010 <_dtoa_r+0x4a0>
 8009f82:	9b02      	ldr	r3, [sp, #8]
 8009f84:	2200      	movs	r2, #0
 8009f86:	0020      	movs	r0, r4
 8009f88:	0029      	movs	r1, r5
 8009f8a:	1e5e      	subs	r6, r3, #1
 8009f8c:	4ba1      	ldr	r3, [pc, #644]	; (800a214 <_dtoa_r+0x6a4>)
 8009f8e:	f7f7 f89f 	bl	80010d0 <__aeabi_dmul>
 8009f92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f94:	900a      	str	r0, [sp, #40]	; 0x28
 8009f96:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f98:	3301      	adds	r3, #1
 8009f9a:	9310      	str	r3, [sp, #64]	; 0x40
 8009f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009fa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009fa2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009fa4:	9307      	str	r3, [sp, #28]
 8009fa6:	f7f7 fec7 	bl	8001d38 <__aeabi_i2d>
 8009faa:	0022      	movs	r2, r4
 8009fac:	002b      	movs	r3, r5
 8009fae:	f7f7 f88f 	bl	80010d0 <__aeabi_dmul>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4b98      	ldr	r3, [pc, #608]	; (800a218 <_dtoa_r+0x6a8>)
 8009fb6:	f7f6 fa39 	bl	800042c <__aeabi_dadd>
 8009fba:	9010      	str	r0, [sp, #64]	; 0x40
 8009fbc:	9111      	str	r1, [sp, #68]	; 0x44
 8009fbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fc2:	920a      	str	r2, [sp, #40]	; 0x28
 8009fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fc6:	4a95      	ldr	r2, [pc, #596]	; (800a21c <_dtoa_r+0x6ac>)
 8009fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fca:	4694      	mov	ip, r2
 8009fcc:	4463      	add	r3, ip
 8009fce:	9317      	str	r3, [sp, #92]	; 0x5c
 8009fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fd2:	9b07      	ldr	r3, [sp, #28]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d161      	bne.n	800a09c <_dtoa_r+0x52c>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	0020      	movs	r0, r4
 8009fdc:	0029      	movs	r1, r5
 8009fde:	4b90      	ldr	r3, [pc, #576]	; (800a220 <_dtoa_r+0x6b0>)
 8009fe0:	f7f7 fae2 	bl	80015a8 <__aeabi_dsub>
 8009fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fe8:	0004      	movs	r4, r0
 8009fea:	000d      	movs	r5, r1
 8009fec:	f7f7 fefe 	bl	8001dec <__aeabi_dcmpgt>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d000      	beq.n	8009ff6 <_dtoa_r+0x486>
 8009ff4:	e2b5      	b.n	800a562 <_dtoa_r+0x9f2>
 8009ff6:	488b      	ldr	r0, [pc, #556]	; (800a224 <_dtoa_r+0x6b4>)
 8009ff8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ffa:	4684      	mov	ip, r0
 8009ffc:	4461      	add	r1, ip
 8009ffe:	000b      	movs	r3, r1
 800a000:	0020      	movs	r0, r4
 800a002:	0029      	movs	r1, r5
 800a004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a006:	f7f7 fedd 	bl	8001dc4 <__aeabi_dcmplt>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d000      	beq.n	800a010 <_dtoa_r+0x4a0>
 800a00e:	e2a5      	b.n	800a55c <_dtoa_r+0x9ec>
 800a010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a012:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a014:	930a      	str	r3, [sp, #40]	; 0x28
 800a016:	940b      	str	r4, [sp, #44]	; 0x2c
 800a018:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	da00      	bge.n	800a020 <_dtoa_r+0x4b0>
 800a01e:	e171      	b.n	800a304 <_dtoa_r+0x794>
 800a020:	9a02      	ldr	r2, [sp, #8]
 800a022:	2a0e      	cmp	r2, #14
 800a024:	dd00      	ble.n	800a028 <_dtoa_r+0x4b8>
 800a026:	e16d      	b.n	800a304 <_dtoa_r+0x794>
 800a028:	4b77      	ldr	r3, [pc, #476]	; (800a208 <_dtoa_r+0x698>)
 800a02a:	00d2      	lsls	r2, r2, #3
 800a02c:	189b      	adds	r3, r3, r2
 800a02e:	685c      	ldr	r4, [r3, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	9308      	str	r3, [sp, #32]
 800a034:	9409      	str	r4, [sp, #36]	; 0x24
 800a036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	db00      	blt.n	800a03e <_dtoa_r+0x4ce>
 800a03c:	e0f6      	b.n	800a22c <_dtoa_r+0x6bc>
 800a03e:	9b06      	ldr	r3, [sp, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	dd00      	ble.n	800a046 <_dtoa_r+0x4d6>
 800a044:	e0f2      	b.n	800a22c <_dtoa_r+0x6bc>
 800a046:	d000      	beq.n	800a04a <_dtoa_r+0x4da>
 800a048:	e288      	b.n	800a55c <_dtoa_r+0x9ec>
 800a04a:	9808      	ldr	r0, [sp, #32]
 800a04c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a04e:	2200      	movs	r2, #0
 800a050:	4b73      	ldr	r3, [pc, #460]	; (800a220 <_dtoa_r+0x6b0>)
 800a052:	f7f7 f83d 	bl	80010d0 <__aeabi_dmul>
 800a056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a05a:	f7f7 fed1 	bl	8001e00 <__aeabi_dcmpge>
 800a05e:	9e06      	ldr	r6, [sp, #24]
 800a060:	0035      	movs	r5, r6
 800a062:	2800      	cmp	r0, #0
 800a064:	d000      	beq.n	800a068 <_dtoa_r+0x4f8>
 800a066:	e25f      	b.n	800a528 <_dtoa_r+0x9b8>
 800a068:	9b05      	ldr	r3, [sp, #20]
 800a06a:	9a05      	ldr	r2, [sp, #20]
 800a06c:	3301      	adds	r3, #1
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	2331      	movs	r3, #49	; 0x31
 800a072:	7013      	strb	r3, [r2, #0]
 800a074:	9b02      	ldr	r3, [sp, #8]
 800a076:	3301      	adds	r3, #1
 800a078:	9302      	str	r3, [sp, #8]
 800a07a:	e25a      	b.n	800a532 <_dtoa_r+0x9c2>
 800a07c:	4234      	tst	r4, r6
 800a07e:	d007      	beq.n	800a090 <_dtoa_r+0x520>
 800a080:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a082:	3301      	adds	r3, #1
 800a084:	9310      	str	r3, [sp, #64]	; 0x40
 800a086:	682a      	ldr	r2, [r5, #0]
 800a088:	686b      	ldr	r3, [r5, #4]
 800a08a:	f7f7 f821 	bl	80010d0 <__aeabi_dmul>
 800a08e:	0033      	movs	r3, r6
 800a090:	1064      	asrs	r4, r4, #1
 800a092:	3508      	adds	r5, #8
 800a094:	e75a      	b.n	8009f4c <_dtoa_r+0x3dc>
 800a096:	9e02      	ldr	r6, [sp, #8]
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	e780      	b.n	8009f9e <_dtoa_r+0x42e>
 800a09c:	9b07      	ldr	r3, [sp, #28]
 800a09e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0a0:	1e5a      	subs	r2, r3, #1
 800a0a2:	4b59      	ldr	r3, [pc, #356]	; (800a208 <_dtoa_r+0x698>)
 800a0a4:	00d2      	lsls	r2, r2, #3
 800a0a6:	189b      	adds	r3, r3, r2
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	d051      	beq.n	800a154 <_dtoa_r+0x5e4>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	495d      	ldr	r1, [pc, #372]	; (800a228 <_dtoa_r+0x6b8>)
 800a0b4:	f7f6 fd24 	bl	8000b00 <__aeabi_ddiv>
 800a0b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0bc:	f7f7 fa74 	bl	80015a8 <__aeabi_dsub>
 800a0c0:	9a05      	ldr	r2, [sp, #20]
 800a0c2:	9b05      	ldr	r3, [sp, #20]
 800a0c4:	4694      	mov	ip, r2
 800a0c6:	9310      	str	r3, [sp, #64]	; 0x40
 800a0c8:	9b07      	ldr	r3, [sp, #28]
 800a0ca:	900a      	str	r0, [sp, #40]	; 0x28
 800a0cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800a0ce:	4463      	add	r3, ip
 800a0d0:	9319      	str	r3, [sp, #100]	; 0x64
 800a0d2:	0029      	movs	r1, r5
 800a0d4:	0020      	movs	r0, r4
 800a0d6:	f7f7 fdf9 	bl	8001ccc <__aeabi_d2iz>
 800a0da:	9017      	str	r0, [sp, #92]	; 0x5c
 800a0dc:	f7f7 fe2c 	bl	8001d38 <__aeabi_i2d>
 800a0e0:	0002      	movs	r2, r0
 800a0e2:	000b      	movs	r3, r1
 800a0e4:	0020      	movs	r0, r4
 800a0e6:	0029      	movs	r1, r5
 800a0e8:	f7f7 fa5e 	bl	80015a8 <__aeabi_dsub>
 800a0ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	9307      	str	r3, [sp, #28]
 800a0f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0f6:	0004      	movs	r4, r0
 800a0f8:	3330      	adds	r3, #48	; 0x30
 800a0fa:	7013      	strb	r3, [r2, #0]
 800a0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a100:	000d      	movs	r5, r1
 800a102:	f7f7 fe5f 	bl	8001dc4 <__aeabi_dcmplt>
 800a106:	2800      	cmp	r0, #0
 800a108:	d175      	bne.n	800a1f6 <_dtoa_r+0x686>
 800a10a:	0022      	movs	r2, r4
 800a10c:	002b      	movs	r3, r5
 800a10e:	2000      	movs	r0, #0
 800a110:	493f      	ldr	r1, [pc, #252]	; (800a210 <_dtoa_r+0x6a0>)
 800a112:	f7f7 fa49 	bl	80015a8 <__aeabi_dsub>
 800a116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a11a:	f7f7 fe53 	bl	8001dc4 <__aeabi_dcmplt>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d000      	beq.n	800a124 <_dtoa_r+0x5b4>
 800a122:	e0d1      	b.n	800a2c8 <_dtoa_r+0x758>
 800a124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a126:	9a07      	ldr	r2, [sp, #28]
 800a128:	4293      	cmp	r3, r2
 800a12a:	d100      	bne.n	800a12e <_dtoa_r+0x5be>
 800a12c:	e770      	b.n	800a010 <_dtoa_r+0x4a0>
 800a12e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a132:	2200      	movs	r2, #0
 800a134:	4b37      	ldr	r3, [pc, #220]	; (800a214 <_dtoa_r+0x6a4>)
 800a136:	f7f6 ffcb 	bl	80010d0 <__aeabi_dmul>
 800a13a:	4b36      	ldr	r3, [pc, #216]	; (800a214 <_dtoa_r+0x6a4>)
 800a13c:	900a      	str	r0, [sp, #40]	; 0x28
 800a13e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a140:	2200      	movs	r2, #0
 800a142:	0020      	movs	r0, r4
 800a144:	0029      	movs	r1, r5
 800a146:	f7f6 ffc3 	bl	80010d0 <__aeabi_dmul>
 800a14a:	9b07      	ldr	r3, [sp, #28]
 800a14c:	0004      	movs	r4, r0
 800a14e:	000d      	movs	r5, r1
 800a150:	9310      	str	r3, [sp, #64]	; 0x40
 800a152:	e7be      	b.n	800a0d2 <_dtoa_r+0x562>
 800a154:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a156:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a158:	f7f6 ffba 	bl	80010d0 <__aeabi_dmul>
 800a15c:	9a05      	ldr	r2, [sp, #20]
 800a15e:	9b05      	ldr	r3, [sp, #20]
 800a160:	4694      	mov	ip, r2
 800a162:	930a      	str	r3, [sp, #40]	; 0x28
 800a164:	9b07      	ldr	r3, [sp, #28]
 800a166:	9010      	str	r0, [sp, #64]	; 0x40
 800a168:	9111      	str	r1, [sp, #68]	; 0x44
 800a16a:	4463      	add	r3, ip
 800a16c:	9319      	str	r3, [sp, #100]	; 0x64
 800a16e:	0029      	movs	r1, r5
 800a170:	0020      	movs	r0, r4
 800a172:	f7f7 fdab 	bl	8001ccc <__aeabi_d2iz>
 800a176:	9017      	str	r0, [sp, #92]	; 0x5c
 800a178:	f7f7 fdde 	bl	8001d38 <__aeabi_i2d>
 800a17c:	0002      	movs	r2, r0
 800a17e:	000b      	movs	r3, r1
 800a180:	0020      	movs	r0, r4
 800a182:	0029      	movs	r1, r5
 800a184:	f7f7 fa10 	bl	80015a8 <__aeabi_dsub>
 800a188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a18c:	3330      	adds	r3, #48	; 0x30
 800a18e:	7013      	strb	r3, [r2, #0]
 800a190:	0013      	movs	r3, r2
 800a192:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a194:	3301      	adds	r3, #1
 800a196:	0004      	movs	r4, r0
 800a198:	000d      	movs	r5, r1
 800a19a:	930a      	str	r3, [sp, #40]	; 0x28
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d12c      	bne.n	800a1fa <_dtoa_r+0x68a>
 800a1a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a1a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1a4:	9a05      	ldr	r2, [sp, #20]
 800a1a6:	9b07      	ldr	r3, [sp, #28]
 800a1a8:	4694      	mov	ip, r2
 800a1aa:	4463      	add	r3, ip
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	9307      	str	r3, [sp, #28]
 800a1b0:	4b1d      	ldr	r3, [pc, #116]	; (800a228 <_dtoa_r+0x6b8>)
 800a1b2:	f7f6 f93b 	bl	800042c <__aeabi_dadd>
 800a1b6:	0002      	movs	r2, r0
 800a1b8:	000b      	movs	r3, r1
 800a1ba:	0020      	movs	r0, r4
 800a1bc:	0029      	movs	r1, r5
 800a1be:	f7f7 fe15 	bl	8001dec <__aeabi_dcmpgt>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d000      	beq.n	800a1c8 <_dtoa_r+0x658>
 800a1c6:	e07f      	b.n	800a2c8 <_dtoa_r+0x758>
 800a1c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	4916      	ldr	r1, [pc, #88]	; (800a228 <_dtoa_r+0x6b8>)
 800a1d0:	f7f7 f9ea 	bl	80015a8 <__aeabi_dsub>
 800a1d4:	0002      	movs	r2, r0
 800a1d6:	000b      	movs	r3, r1
 800a1d8:	0020      	movs	r0, r4
 800a1da:	0029      	movs	r1, r5
 800a1dc:	f7f7 fdf2 	bl	8001dc4 <__aeabi_dcmplt>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d100      	bne.n	800a1e6 <_dtoa_r+0x676>
 800a1e4:	e714      	b.n	800a010 <_dtoa_r+0x4a0>
 800a1e6:	9b07      	ldr	r3, [sp, #28]
 800a1e8:	001a      	movs	r2, r3
 800a1ea:	3a01      	subs	r2, #1
 800a1ec:	9207      	str	r2, [sp, #28]
 800a1ee:	7812      	ldrb	r2, [r2, #0]
 800a1f0:	2a30      	cmp	r2, #48	; 0x30
 800a1f2:	d0f8      	beq.n	800a1e6 <_dtoa_r+0x676>
 800a1f4:	9307      	str	r3, [sp, #28]
 800a1f6:	9602      	str	r6, [sp, #8]
 800a1f8:	e054      	b.n	800a2a4 <_dtoa_r+0x734>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <_dtoa_r+0x6a4>)
 800a1fe:	f7f6 ff67 	bl	80010d0 <__aeabi_dmul>
 800a202:	0004      	movs	r4, r0
 800a204:	000d      	movs	r5, r1
 800a206:	e7b2      	b.n	800a16e <_dtoa_r+0x5fe>
 800a208:	0800bc08 	.word	0x0800bc08
 800a20c:	0800bbe0 	.word	0x0800bbe0
 800a210:	3ff00000 	.word	0x3ff00000
 800a214:	40240000 	.word	0x40240000
 800a218:	401c0000 	.word	0x401c0000
 800a21c:	fcc00000 	.word	0xfcc00000
 800a220:	40140000 	.word	0x40140000
 800a224:	7cc00000 	.word	0x7cc00000
 800a228:	3fe00000 	.word	0x3fe00000
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	9e05      	ldr	r6, [sp, #20]
 800a230:	3b01      	subs	r3, #1
 800a232:	199b      	adds	r3, r3, r6
 800a234:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a236:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a238:	930a      	str	r3, [sp, #40]	; 0x28
 800a23a:	9a08      	ldr	r2, [sp, #32]
 800a23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23e:	0020      	movs	r0, r4
 800a240:	0029      	movs	r1, r5
 800a242:	f7f6 fc5d 	bl	8000b00 <__aeabi_ddiv>
 800a246:	f7f7 fd41 	bl	8001ccc <__aeabi_d2iz>
 800a24a:	9006      	str	r0, [sp, #24]
 800a24c:	f7f7 fd74 	bl	8001d38 <__aeabi_i2d>
 800a250:	9a08      	ldr	r2, [sp, #32]
 800a252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a254:	f7f6 ff3c 	bl	80010d0 <__aeabi_dmul>
 800a258:	0002      	movs	r2, r0
 800a25a:	000b      	movs	r3, r1
 800a25c:	0020      	movs	r0, r4
 800a25e:	0029      	movs	r1, r5
 800a260:	f7f7 f9a2 	bl	80015a8 <__aeabi_dsub>
 800a264:	0033      	movs	r3, r6
 800a266:	9a06      	ldr	r2, [sp, #24]
 800a268:	3601      	adds	r6, #1
 800a26a:	3230      	adds	r2, #48	; 0x30
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a270:	9607      	str	r6, [sp, #28]
 800a272:	429a      	cmp	r2, r3
 800a274:	d139      	bne.n	800a2ea <_dtoa_r+0x77a>
 800a276:	0002      	movs	r2, r0
 800a278:	000b      	movs	r3, r1
 800a27a:	f7f6 f8d7 	bl	800042c <__aeabi_dadd>
 800a27e:	9a08      	ldr	r2, [sp, #32]
 800a280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a282:	0004      	movs	r4, r0
 800a284:	000d      	movs	r5, r1
 800a286:	f7f7 fdb1 	bl	8001dec <__aeabi_dcmpgt>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d11b      	bne.n	800a2c6 <_dtoa_r+0x756>
 800a28e:	9a08      	ldr	r2, [sp, #32]
 800a290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a292:	0020      	movs	r0, r4
 800a294:	0029      	movs	r1, r5
 800a296:	f7f7 fd8f 	bl	8001db8 <__aeabi_dcmpeq>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d002      	beq.n	800a2a4 <_dtoa_r+0x734>
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	07db      	lsls	r3, r3, #31
 800a2a2:	d410      	bmi.n	800a2c6 <_dtoa_r+0x756>
 800a2a4:	0038      	movs	r0, r7
 800a2a6:	9904      	ldr	r1, [sp, #16]
 800a2a8:	f7fe fc94 	bl	8008bd4 <_Bfree>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9a07      	ldr	r2, [sp, #28]
 800a2b0:	9802      	ldr	r0, [sp, #8]
 800a2b2:	7013      	strb	r3, [r2, #0]
 800a2b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	6018      	str	r0, [r3, #0]
 800a2ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d100      	bne.n	800a2c2 <_dtoa_r+0x752>
 800a2c0:	e4a3      	b.n	8009c0a <_dtoa_r+0x9a>
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e4a1      	b.n	8009c0a <_dtoa_r+0x9a>
 800a2c6:	9e02      	ldr	r6, [sp, #8]
 800a2c8:	9b07      	ldr	r3, [sp, #28]
 800a2ca:	9307      	str	r3, [sp, #28]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	2a39      	cmp	r2, #57	; 0x39
 800a2d2:	d106      	bne.n	800a2e2 <_dtoa_r+0x772>
 800a2d4:	9a05      	ldr	r2, [sp, #20]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d1f7      	bne.n	800a2ca <_dtoa_r+0x75a>
 800a2da:	2230      	movs	r2, #48	; 0x30
 800a2dc:	9905      	ldr	r1, [sp, #20]
 800a2de:	3601      	adds	r6, #1
 800a2e0:	700a      	strb	r2, [r1, #0]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
 800a2e4:	3201      	adds	r2, #1
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	e785      	b.n	800a1f6 <_dtoa_r+0x686>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4bad      	ldr	r3, [pc, #692]	; (800a5a4 <_dtoa_r+0xa34>)
 800a2ee:	f7f6 feef 	bl	80010d0 <__aeabi_dmul>
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	0004      	movs	r4, r0
 800a2f8:	000d      	movs	r5, r1
 800a2fa:	f7f7 fd5d 	bl	8001db8 <__aeabi_dcmpeq>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d09b      	beq.n	800a23a <_dtoa_r+0x6ca>
 800a302:	e7cf      	b.n	800a2a4 <_dtoa_r+0x734>
 800a304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a306:	2a00      	cmp	r2, #0
 800a308:	d100      	bne.n	800a30c <_dtoa_r+0x79c>
 800a30a:	e082      	b.n	800a412 <_dtoa_r+0x8a2>
 800a30c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a30e:	2a01      	cmp	r2, #1
 800a310:	dc66      	bgt.n	800a3e0 <_dtoa_r+0x870>
 800a312:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a314:	2a00      	cmp	r2, #0
 800a316:	d05f      	beq.n	800a3d8 <_dtoa_r+0x868>
 800a318:	4aa3      	ldr	r2, [pc, #652]	; (800a5a8 <_dtoa_r+0xa38>)
 800a31a:	189b      	adds	r3, r3, r2
 800a31c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a31e:	9c08      	ldr	r4, [sp, #32]
 800a320:	9a08      	ldr	r2, [sp, #32]
 800a322:	2101      	movs	r1, #1
 800a324:	18d2      	adds	r2, r2, r3
 800a326:	9208      	str	r2, [sp, #32]
 800a328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a32a:	0038      	movs	r0, r7
 800a32c:	18d3      	adds	r3, r2, r3
 800a32e:	930d      	str	r3, [sp, #52]	; 0x34
 800a330:	f7fe fd00 	bl	8008d34 <__i2b>
 800a334:	0005      	movs	r5, r0
 800a336:	2c00      	cmp	r4, #0
 800a338:	dd0e      	ble.n	800a358 <_dtoa_r+0x7e8>
 800a33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dd0b      	ble.n	800a358 <_dtoa_r+0x7e8>
 800a340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a342:	0023      	movs	r3, r4
 800a344:	4294      	cmp	r4, r2
 800a346:	dd00      	ble.n	800a34a <_dtoa_r+0x7da>
 800a348:	0013      	movs	r3, r2
 800a34a:	9a08      	ldr	r2, [sp, #32]
 800a34c:	1ae4      	subs	r4, r4, r3
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	9208      	str	r2, [sp, #32]
 800a352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	930d      	str	r3, [sp, #52]	; 0x34
 800a358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d01f      	beq.n	800a39e <_dtoa_r+0x82e>
 800a35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a360:	2b00      	cmp	r3, #0
 800a362:	d05a      	beq.n	800a41a <_dtoa_r+0x8aa>
 800a364:	2e00      	cmp	r6, #0
 800a366:	dd11      	ble.n	800a38c <_dtoa_r+0x81c>
 800a368:	0029      	movs	r1, r5
 800a36a:	0032      	movs	r2, r6
 800a36c:	0038      	movs	r0, r7
 800a36e:	f7fe fda7 	bl	8008ec0 <__pow5mult>
 800a372:	9a04      	ldr	r2, [sp, #16]
 800a374:	0001      	movs	r1, r0
 800a376:	0005      	movs	r5, r0
 800a378:	0038      	movs	r0, r7
 800a37a:	f7fe fcf1 	bl	8008d60 <__multiply>
 800a37e:	9904      	ldr	r1, [sp, #16]
 800a380:	9007      	str	r0, [sp, #28]
 800a382:	0038      	movs	r0, r7
 800a384:	f7fe fc26 	bl	8008bd4 <_Bfree>
 800a388:	9b07      	ldr	r3, [sp, #28]
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a38e:	1b9a      	subs	r2, r3, r6
 800a390:	42b3      	cmp	r3, r6
 800a392:	d004      	beq.n	800a39e <_dtoa_r+0x82e>
 800a394:	0038      	movs	r0, r7
 800a396:	9904      	ldr	r1, [sp, #16]
 800a398:	f7fe fd92 	bl	8008ec0 <__pow5mult>
 800a39c:	9004      	str	r0, [sp, #16]
 800a39e:	2101      	movs	r1, #1
 800a3a0:	0038      	movs	r0, r7
 800a3a2:	f7fe fcc7 	bl	8008d34 <__i2b>
 800a3a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3a8:	0006      	movs	r6, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dd37      	ble.n	800a41e <_dtoa_r+0x8ae>
 800a3ae:	001a      	movs	r2, r3
 800a3b0:	0001      	movs	r1, r0
 800a3b2:	0038      	movs	r0, r7
 800a3b4:	f7fe fd84 	bl	8008ec0 <__pow5mult>
 800a3b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3ba:	0006      	movs	r6, r0
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	dd33      	ble.n	800a428 <_dtoa_r+0x8b8>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	9307      	str	r3, [sp, #28]
 800a3c4:	6933      	ldr	r3, [r6, #16]
 800a3c6:	3303      	adds	r3, #3
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	18f3      	adds	r3, r6, r3
 800a3cc:	6858      	ldr	r0, [r3, #4]
 800a3ce:	f7fe fc69 	bl	8008ca4 <__hi0bits>
 800a3d2:	2320      	movs	r3, #32
 800a3d4:	1a18      	subs	r0, r3, r0
 800a3d6:	e03f      	b.n	800a458 <_dtoa_r+0x8e8>
 800a3d8:	2336      	movs	r3, #54	; 0x36
 800a3da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3dc:	1a9b      	subs	r3, r3, r2
 800a3de:	e79d      	b.n	800a31c <_dtoa_r+0x7ac>
 800a3e0:	9b06      	ldr	r3, [sp, #24]
 800a3e2:	1e5e      	subs	r6, r3, #1
 800a3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e6:	42b3      	cmp	r3, r6
 800a3e8:	db08      	blt.n	800a3fc <_dtoa_r+0x88c>
 800a3ea:	1b9e      	subs	r6, r3, r6
 800a3ec:	9b06      	ldr	r3, [sp, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	da0c      	bge.n	800a40c <_dtoa_r+0x89c>
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	9a06      	ldr	r2, [sp, #24]
 800a3f6:	1a9c      	subs	r4, r3, r2
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e791      	b.n	800a320 <_dtoa_r+0x7b0>
 800a3fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a400:	1af3      	subs	r3, r6, r3
 800a402:	18d3      	adds	r3, r2, r3
 800a404:	960e      	str	r6, [sp, #56]	; 0x38
 800a406:	9314      	str	r3, [sp, #80]	; 0x50
 800a408:	2600      	movs	r6, #0
 800a40a:	e7ef      	b.n	800a3ec <_dtoa_r+0x87c>
 800a40c:	9c08      	ldr	r4, [sp, #32]
 800a40e:	9b06      	ldr	r3, [sp, #24]
 800a410:	e786      	b.n	800a320 <_dtoa_r+0x7b0>
 800a412:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a414:	9c08      	ldr	r4, [sp, #32]
 800a416:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a418:	e78d      	b.n	800a336 <_dtoa_r+0x7c6>
 800a41a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a41c:	e7ba      	b.n	800a394 <_dtoa_r+0x824>
 800a41e:	2300      	movs	r3, #0
 800a420:	9307      	str	r3, [sp, #28]
 800a422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a424:	2b01      	cmp	r3, #1
 800a426:	dc13      	bgt.n	800a450 <_dtoa_r+0x8e0>
 800a428:	2300      	movs	r3, #0
 800a42a:	9307      	str	r3, [sp, #28]
 800a42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10e      	bne.n	800a450 <_dtoa_r+0x8e0>
 800a432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a434:	031b      	lsls	r3, r3, #12
 800a436:	d10b      	bne.n	800a450 <_dtoa_r+0x8e0>
 800a438:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a43a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a43c:	4213      	tst	r3, r2
 800a43e:	d007      	beq.n	800a450 <_dtoa_r+0x8e0>
 800a440:	9b08      	ldr	r3, [sp, #32]
 800a442:	3301      	adds	r3, #1
 800a444:	9308      	str	r3, [sp, #32]
 800a446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a448:	3301      	adds	r3, #1
 800a44a:	930d      	str	r3, [sp, #52]	; 0x34
 800a44c:	2301      	movs	r3, #1
 800a44e:	9307      	str	r3, [sp, #28]
 800a450:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a452:	2001      	movs	r0, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1b5      	bne.n	800a3c4 <_dtoa_r+0x854>
 800a458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a45a:	221f      	movs	r2, #31
 800a45c:	1818      	adds	r0, r3, r0
 800a45e:	0003      	movs	r3, r0
 800a460:	4013      	ands	r3, r2
 800a462:	4210      	tst	r0, r2
 800a464:	d046      	beq.n	800a4f4 <_dtoa_r+0x984>
 800a466:	3201      	adds	r2, #1
 800a468:	1ad2      	subs	r2, r2, r3
 800a46a:	2a04      	cmp	r2, #4
 800a46c:	dd3f      	ble.n	800a4ee <_dtoa_r+0x97e>
 800a46e:	221c      	movs	r2, #28
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	9a08      	ldr	r2, [sp, #32]
 800a474:	18e4      	adds	r4, r4, r3
 800a476:	18d2      	adds	r2, r2, r3
 800a478:	9208      	str	r2, [sp, #32]
 800a47a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a47c:	18d3      	adds	r3, r2, r3
 800a47e:	930d      	str	r3, [sp, #52]	; 0x34
 800a480:	9b08      	ldr	r3, [sp, #32]
 800a482:	2b00      	cmp	r3, #0
 800a484:	dd05      	ble.n	800a492 <_dtoa_r+0x922>
 800a486:	001a      	movs	r2, r3
 800a488:	0038      	movs	r0, r7
 800a48a:	9904      	ldr	r1, [sp, #16]
 800a48c:	f7fe fd74 	bl	8008f78 <__lshift>
 800a490:	9004      	str	r0, [sp, #16]
 800a492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	dd05      	ble.n	800a4a4 <_dtoa_r+0x934>
 800a498:	0031      	movs	r1, r6
 800a49a:	001a      	movs	r2, r3
 800a49c:	0038      	movs	r0, r7
 800a49e:	f7fe fd6b 	bl	8008f78 <__lshift>
 800a4a2:	0006      	movs	r6, r0
 800a4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d026      	beq.n	800a4f8 <_dtoa_r+0x988>
 800a4aa:	0031      	movs	r1, r6
 800a4ac:	9804      	ldr	r0, [sp, #16]
 800a4ae:	f7fe fdd3 	bl	8009058 <__mcmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	da20      	bge.n	800a4f8 <_dtoa_r+0x988>
 800a4b6:	9b02      	ldr	r3, [sp, #8]
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	9302      	str	r3, [sp, #8]
 800a4be:	0038      	movs	r0, r7
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9904      	ldr	r1, [sp, #16]
 800a4c4:	f7fe fbaa 	bl	8008c1c <__multadd>
 800a4c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4ca:	9004      	str	r0, [sp, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d100      	bne.n	800a4d2 <_dtoa_r+0x962>
 800a4d0:	e160      	b.n	800a794 <_dtoa_r+0xc24>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	0029      	movs	r1, r5
 800a4d6:	220a      	movs	r2, #10
 800a4d8:	0038      	movs	r0, r7
 800a4da:	f7fe fb9f 	bl	8008c1c <__multadd>
 800a4de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4e0:	0005      	movs	r5, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dc47      	bgt.n	800a576 <_dtoa_r+0xa06>
 800a4e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	dc0d      	bgt.n	800a508 <_dtoa_r+0x998>
 800a4ec:	e043      	b.n	800a576 <_dtoa_r+0xa06>
 800a4ee:	2a04      	cmp	r2, #4
 800a4f0:	d0c6      	beq.n	800a480 <_dtoa_r+0x910>
 800a4f2:	0013      	movs	r3, r2
 800a4f4:	331c      	adds	r3, #28
 800a4f6:	e7bc      	b.n	800a472 <_dtoa_r+0x902>
 800a4f8:	9b06      	ldr	r3, [sp, #24]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dc35      	bgt.n	800a56a <_dtoa_r+0x9fa>
 800a4fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a500:	2b02      	cmp	r3, #2
 800a502:	dd32      	ble.n	800a56a <_dtoa_r+0x9fa>
 800a504:	9b06      	ldr	r3, [sp, #24]
 800a506:	930c      	str	r3, [sp, #48]	; 0x30
 800a508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10c      	bne.n	800a528 <_dtoa_r+0x9b8>
 800a50e:	0031      	movs	r1, r6
 800a510:	2205      	movs	r2, #5
 800a512:	0038      	movs	r0, r7
 800a514:	f7fe fb82 	bl	8008c1c <__multadd>
 800a518:	0006      	movs	r6, r0
 800a51a:	0001      	movs	r1, r0
 800a51c:	9804      	ldr	r0, [sp, #16]
 800a51e:	f7fe fd9b 	bl	8009058 <__mcmp>
 800a522:	2800      	cmp	r0, #0
 800a524:	dd00      	ble.n	800a528 <_dtoa_r+0x9b8>
 800a526:	e59f      	b.n	800a068 <_dtoa_r+0x4f8>
 800a528:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a52a:	43db      	mvns	r3, r3
 800a52c:	9302      	str	r3, [sp, #8]
 800a52e:	9b05      	ldr	r3, [sp, #20]
 800a530:	9307      	str	r3, [sp, #28]
 800a532:	2400      	movs	r4, #0
 800a534:	0031      	movs	r1, r6
 800a536:	0038      	movs	r0, r7
 800a538:	f7fe fb4c 	bl	8008bd4 <_Bfree>
 800a53c:	2d00      	cmp	r5, #0
 800a53e:	d100      	bne.n	800a542 <_dtoa_r+0x9d2>
 800a540:	e6b0      	b.n	800a2a4 <_dtoa_r+0x734>
 800a542:	2c00      	cmp	r4, #0
 800a544:	d005      	beq.n	800a552 <_dtoa_r+0x9e2>
 800a546:	42ac      	cmp	r4, r5
 800a548:	d003      	beq.n	800a552 <_dtoa_r+0x9e2>
 800a54a:	0021      	movs	r1, r4
 800a54c:	0038      	movs	r0, r7
 800a54e:	f7fe fb41 	bl	8008bd4 <_Bfree>
 800a552:	0029      	movs	r1, r5
 800a554:	0038      	movs	r0, r7
 800a556:	f7fe fb3d 	bl	8008bd4 <_Bfree>
 800a55a:	e6a3      	b.n	800a2a4 <_dtoa_r+0x734>
 800a55c:	2600      	movs	r6, #0
 800a55e:	0035      	movs	r5, r6
 800a560:	e7e2      	b.n	800a528 <_dtoa_r+0x9b8>
 800a562:	9602      	str	r6, [sp, #8]
 800a564:	9e07      	ldr	r6, [sp, #28]
 800a566:	0035      	movs	r5, r6
 800a568:	e57e      	b.n	800a068 <_dtoa_r+0x4f8>
 800a56a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d100      	bne.n	800a572 <_dtoa_r+0xa02>
 800a570:	e0c8      	b.n	800a704 <_dtoa_r+0xb94>
 800a572:	9b06      	ldr	r3, [sp, #24]
 800a574:	930c      	str	r3, [sp, #48]	; 0x30
 800a576:	2c00      	cmp	r4, #0
 800a578:	dd05      	ble.n	800a586 <_dtoa_r+0xa16>
 800a57a:	0029      	movs	r1, r5
 800a57c:	0022      	movs	r2, r4
 800a57e:	0038      	movs	r0, r7
 800a580:	f7fe fcfa 	bl	8008f78 <__lshift>
 800a584:	0005      	movs	r5, r0
 800a586:	9b07      	ldr	r3, [sp, #28]
 800a588:	0028      	movs	r0, r5
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d01f      	beq.n	800a5ce <_dtoa_r+0xa5e>
 800a58e:	0038      	movs	r0, r7
 800a590:	6869      	ldr	r1, [r5, #4]
 800a592:	f7fe fadb 	bl	8008b4c <_Balloc>
 800a596:	1e04      	subs	r4, r0, #0
 800a598:	d10c      	bne.n	800a5b4 <_dtoa_r+0xa44>
 800a59a:	0002      	movs	r2, r0
 800a59c:	4b03      	ldr	r3, [pc, #12]	; (800a5ac <_dtoa_r+0xa3c>)
 800a59e:	4904      	ldr	r1, [pc, #16]	; (800a5b0 <_dtoa_r+0xa40>)
 800a5a0:	f7ff fafb 	bl	8009b9a <_dtoa_r+0x2a>
 800a5a4:	40240000 	.word	0x40240000
 800a5a8:	00000433 	.word	0x00000433
 800a5ac:	0800bbcb 	.word	0x0800bbcb
 800a5b0:	000002ea 	.word	0x000002ea
 800a5b4:	0029      	movs	r1, r5
 800a5b6:	692b      	ldr	r3, [r5, #16]
 800a5b8:	310c      	adds	r1, #12
 800a5ba:	1c9a      	adds	r2, r3, #2
 800a5bc:	0092      	lsls	r2, r2, #2
 800a5be:	300c      	adds	r0, #12
 800a5c0:	f000 fb3d 	bl	800ac3e <memcpy>
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	0021      	movs	r1, r4
 800a5c8:	0038      	movs	r0, r7
 800a5ca:	f7fe fcd5 	bl	8008f78 <__lshift>
 800a5ce:	002c      	movs	r4, r5
 800a5d0:	0005      	movs	r5, r0
 800a5d2:	9b05      	ldr	r3, [sp, #20]
 800a5d4:	9308      	str	r3, [sp, #32]
 800a5d6:	0031      	movs	r1, r6
 800a5d8:	9804      	ldr	r0, [sp, #16]
 800a5da:	f7ff fa3e 	bl	8009a5a <quorem>
 800a5de:	0003      	movs	r3, r0
 800a5e0:	0021      	movs	r1, r4
 800a5e2:	3330      	adds	r3, #48	; 0x30
 800a5e4:	900e      	str	r0, [sp, #56]	; 0x38
 800a5e6:	9804      	ldr	r0, [sp, #16]
 800a5e8:	9306      	str	r3, [sp, #24]
 800a5ea:	f7fe fd35 	bl	8009058 <__mcmp>
 800a5ee:	002a      	movs	r2, r5
 800a5f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a5f2:	0031      	movs	r1, r6
 800a5f4:	0038      	movs	r0, r7
 800a5f6:	f7fe fd4b 	bl	8009090 <__mdiff>
 800a5fa:	68c3      	ldr	r3, [r0, #12]
 800a5fc:	9007      	str	r0, [sp, #28]
 800a5fe:	9310      	str	r3, [sp, #64]	; 0x40
 800a600:	2301      	movs	r3, #1
 800a602:	930d      	str	r3, [sp, #52]	; 0x34
 800a604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <_dtoa_r+0xaa4>
 800a60a:	0001      	movs	r1, r0
 800a60c:	9804      	ldr	r0, [sp, #16]
 800a60e:	f7fe fd23 	bl	8009058 <__mcmp>
 800a612:	900d      	str	r0, [sp, #52]	; 0x34
 800a614:	0038      	movs	r0, r7
 800a616:	9907      	ldr	r1, [sp, #28]
 800a618:	f7fe fadc 	bl	8008bd4 <_Bfree>
 800a61c:	2301      	movs	r3, #1
 800a61e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a622:	4018      	ands	r0, r3
 800a624:	9b08      	ldr	r3, [sp, #32]
 800a626:	3301      	adds	r3, #1
 800a628:	9307      	str	r3, [sp, #28]
 800a62a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a62c:	4313      	orrs	r3, r2
 800a62e:	4303      	orrs	r3, r0
 800a630:	d10c      	bne.n	800a64c <_dtoa_r+0xadc>
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	2b39      	cmp	r3, #57	; 0x39
 800a636:	d025      	beq.n	800a684 <_dtoa_r+0xb14>
 800a638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	dd02      	ble.n	800a644 <_dtoa_r+0xad4>
 800a63e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a640:	3331      	adds	r3, #49	; 0x31
 800a642:	9306      	str	r3, [sp, #24]
 800a644:	9b08      	ldr	r3, [sp, #32]
 800a646:	9a06      	ldr	r2, [sp, #24]
 800a648:	701a      	strb	r2, [r3, #0]
 800a64a:	e773      	b.n	800a534 <_dtoa_r+0x9c4>
 800a64c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	db03      	blt.n	800a65a <_dtoa_r+0xaea>
 800a652:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a654:	4313      	orrs	r3, r2
 800a656:	4303      	orrs	r3, r0
 800a658:	d11f      	bne.n	800a69a <_dtoa_r+0xb2a>
 800a65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	ddf1      	ble.n	800a644 <_dtoa_r+0xad4>
 800a660:	9904      	ldr	r1, [sp, #16]
 800a662:	2201      	movs	r2, #1
 800a664:	0038      	movs	r0, r7
 800a666:	f7fe fc87 	bl	8008f78 <__lshift>
 800a66a:	0031      	movs	r1, r6
 800a66c:	9004      	str	r0, [sp, #16]
 800a66e:	f7fe fcf3 	bl	8009058 <__mcmp>
 800a672:	2800      	cmp	r0, #0
 800a674:	dc03      	bgt.n	800a67e <_dtoa_r+0xb0e>
 800a676:	d1e5      	bne.n	800a644 <_dtoa_r+0xad4>
 800a678:	9b06      	ldr	r3, [sp, #24]
 800a67a:	07db      	lsls	r3, r3, #31
 800a67c:	d5e2      	bpl.n	800a644 <_dtoa_r+0xad4>
 800a67e:	9b06      	ldr	r3, [sp, #24]
 800a680:	2b39      	cmp	r3, #57	; 0x39
 800a682:	d1dc      	bne.n	800a63e <_dtoa_r+0xace>
 800a684:	2339      	movs	r3, #57	; 0x39
 800a686:	9a08      	ldr	r2, [sp, #32]
 800a688:	7013      	strb	r3, [r2, #0]
 800a68a:	9b07      	ldr	r3, [sp, #28]
 800a68c:	9307      	str	r3, [sp, #28]
 800a68e:	3b01      	subs	r3, #1
 800a690:	781a      	ldrb	r2, [r3, #0]
 800a692:	2a39      	cmp	r2, #57	; 0x39
 800a694:	d06c      	beq.n	800a770 <_dtoa_r+0xc00>
 800a696:	3201      	adds	r2, #1
 800a698:	e7d6      	b.n	800a648 <_dtoa_r+0xad8>
 800a69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd07      	ble.n	800a6b0 <_dtoa_r+0xb40>
 800a6a0:	9b06      	ldr	r3, [sp, #24]
 800a6a2:	2b39      	cmp	r3, #57	; 0x39
 800a6a4:	d0ee      	beq.n	800a684 <_dtoa_r+0xb14>
 800a6a6:	9b06      	ldr	r3, [sp, #24]
 800a6a8:	9a08      	ldr	r2, [sp, #32]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	7013      	strb	r3, [r2, #0]
 800a6ae:	e741      	b.n	800a534 <_dtoa_r+0x9c4>
 800a6b0:	9b08      	ldr	r3, [sp, #32]
 800a6b2:	9a06      	ldr	r2, [sp, #24]
 800a6b4:	701a      	strb	r2, [r3, #0]
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	9a05      	ldr	r2, [sp, #20]
 800a6ba:	1a9b      	subs	r3, r3, r2
 800a6bc:	9a08      	ldr	r2, [sp, #32]
 800a6be:	189b      	adds	r3, r3, r2
 800a6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d03e      	beq.n	800a744 <_dtoa_r+0xbd4>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	220a      	movs	r2, #10
 800a6ca:	9904      	ldr	r1, [sp, #16]
 800a6cc:	0038      	movs	r0, r7
 800a6ce:	f7fe faa5 	bl	8008c1c <__multadd>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9004      	str	r0, [sp, #16]
 800a6d6:	220a      	movs	r2, #10
 800a6d8:	0021      	movs	r1, r4
 800a6da:	0038      	movs	r0, r7
 800a6dc:	42ac      	cmp	r4, r5
 800a6de:	d106      	bne.n	800a6ee <_dtoa_r+0xb7e>
 800a6e0:	f7fe fa9c 	bl	8008c1c <__multadd>
 800a6e4:	0004      	movs	r4, r0
 800a6e6:	0005      	movs	r5, r0
 800a6e8:	9b07      	ldr	r3, [sp, #28]
 800a6ea:	9308      	str	r3, [sp, #32]
 800a6ec:	e773      	b.n	800a5d6 <_dtoa_r+0xa66>
 800a6ee:	f7fe fa95 	bl	8008c1c <__multadd>
 800a6f2:	0029      	movs	r1, r5
 800a6f4:	0004      	movs	r4, r0
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	220a      	movs	r2, #10
 800a6fa:	0038      	movs	r0, r7
 800a6fc:	f7fe fa8e 	bl	8008c1c <__multadd>
 800a700:	0005      	movs	r5, r0
 800a702:	e7f1      	b.n	800a6e8 <_dtoa_r+0xb78>
 800a704:	9b06      	ldr	r3, [sp, #24]
 800a706:	930c      	str	r3, [sp, #48]	; 0x30
 800a708:	2400      	movs	r4, #0
 800a70a:	0031      	movs	r1, r6
 800a70c:	9804      	ldr	r0, [sp, #16]
 800a70e:	f7ff f9a4 	bl	8009a5a <quorem>
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	3030      	adds	r0, #48	; 0x30
 800a716:	5518      	strb	r0, [r3, r4]
 800a718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a71a:	3401      	adds	r4, #1
 800a71c:	9006      	str	r0, [sp, #24]
 800a71e:	42a3      	cmp	r3, r4
 800a720:	dd07      	ble.n	800a732 <_dtoa_r+0xbc2>
 800a722:	2300      	movs	r3, #0
 800a724:	220a      	movs	r2, #10
 800a726:	0038      	movs	r0, r7
 800a728:	9904      	ldr	r1, [sp, #16]
 800a72a:	f7fe fa77 	bl	8008c1c <__multadd>
 800a72e:	9004      	str	r0, [sp, #16]
 800a730:	e7eb      	b.n	800a70a <_dtoa_r+0xb9a>
 800a732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a734:	2001      	movs	r0, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	dd00      	ble.n	800a73c <_dtoa_r+0xbcc>
 800a73a:	0018      	movs	r0, r3
 800a73c:	2400      	movs	r4, #0
 800a73e:	9b05      	ldr	r3, [sp, #20]
 800a740:	181b      	adds	r3, r3, r0
 800a742:	9307      	str	r3, [sp, #28]
 800a744:	9904      	ldr	r1, [sp, #16]
 800a746:	2201      	movs	r2, #1
 800a748:	0038      	movs	r0, r7
 800a74a:	f7fe fc15 	bl	8008f78 <__lshift>
 800a74e:	0031      	movs	r1, r6
 800a750:	9004      	str	r0, [sp, #16]
 800a752:	f7fe fc81 	bl	8009058 <__mcmp>
 800a756:	2800      	cmp	r0, #0
 800a758:	dc97      	bgt.n	800a68a <_dtoa_r+0xb1a>
 800a75a:	d102      	bne.n	800a762 <_dtoa_r+0xbf2>
 800a75c:	9b06      	ldr	r3, [sp, #24]
 800a75e:	07db      	lsls	r3, r3, #31
 800a760:	d493      	bmi.n	800a68a <_dtoa_r+0xb1a>
 800a762:	9b07      	ldr	r3, [sp, #28]
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	3b01      	subs	r3, #1
 800a768:	781a      	ldrb	r2, [r3, #0]
 800a76a:	2a30      	cmp	r2, #48	; 0x30
 800a76c:	d0fa      	beq.n	800a764 <_dtoa_r+0xbf4>
 800a76e:	e6e1      	b.n	800a534 <_dtoa_r+0x9c4>
 800a770:	9a05      	ldr	r2, [sp, #20]
 800a772:	429a      	cmp	r2, r3
 800a774:	d18a      	bne.n	800a68c <_dtoa_r+0xb1c>
 800a776:	9b02      	ldr	r3, [sp, #8]
 800a778:	3301      	adds	r3, #1
 800a77a:	9302      	str	r3, [sp, #8]
 800a77c:	2331      	movs	r3, #49	; 0x31
 800a77e:	e795      	b.n	800a6ac <_dtoa_r+0xb3c>
 800a780:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <_dtoa_r+0xc34>)
 800a782:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a784:	9305      	str	r3, [sp, #20]
 800a786:	4b08      	ldr	r3, [pc, #32]	; (800a7a8 <_dtoa_r+0xc38>)
 800a788:	2a00      	cmp	r2, #0
 800a78a:	d001      	beq.n	800a790 <_dtoa_r+0xc20>
 800a78c:	f7ff fa3b 	bl	8009c06 <_dtoa_r+0x96>
 800a790:	f7ff fa3b 	bl	8009c0a <_dtoa_r+0x9a>
 800a794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a796:	2b00      	cmp	r3, #0
 800a798:	dcb6      	bgt.n	800a708 <_dtoa_r+0xb98>
 800a79a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	dd00      	ble.n	800a7a2 <_dtoa_r+0xc32>
 800a7a0:	e6b2      	b.n	800a508 <_dtoa_r+0x998>
 800a7a2:	e7b1      	b.n	800a708 <_dtoa_r+0xb98>
 800a7a4:	0800bd0f 	.word	0x0800bd0f
 800a7a8:	0800bd17 	.word	0x0800bd17

0800a7ac <__sflush_r>:
 800a7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ae:	898b      	ldrh	r3, [r1, #12]
 800a7b0:	0005      	movs	r5, r0
 800a7b2:	000c      	movs	r4, r1
 800a7b4:	071a      	lsls	r2, r3, #28
 800a7b6:	d45f      	bmi.n	800a878 <__sflush_r+0xcc>
 800a7b8:	684a      	ldr	r2, [r1, #4]
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	dc04      	bgt.n	800a7c8 <__sflush_r+0x1c>
 800a7be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	dc01      	bgt.n	800a7c8 <__sflush_r+0x1c>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a7ca:	2f00      	cmp	r7, #0
 800a7cc:	d0fa      	beq.n	800a7c4 <__sflush_r+0x18>
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2180      	movs	r1, #128	; 0x80
 800a7d2:	682e      	ldr	r6, [r5, #0]
 800a7d4:	602a      	str	r2, [r5, #0]
 800a7d6:	001a      	movs	r2, r3
 800a7d8:	0149      	lsls	r1, r1, #5
 800a7da:	400a      	ands	r2, r1
 800a7dc:	420b      	tst	r3, r1
 800a7de:	d034      	beq.n	800a84a <__sflush_r+0x9e>
 800a7e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7e2:	89a3      	ldrh	r3, [r4, #12]
 800a7e4:	075b      	lsls	r3, r3, #29
 800a7e6:	d506      	bpl.n	800a7f6 <__sflush_r+0x4a>
 800a7e8:	6863      	ldr	r3, [r4, #4]
 800a7ea:	1ac0      	subs	r0, r0, r3
 800a7ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <__sflush_r+0x4a>
 800a7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7f4:	1ac0      	subs	r0, r0, r3
 800a7f6:	0002      	movs	r2, r0
 800a7f8:	6a21      	ldr	r1, [r4, #32]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	0028      	movs	r0, r5
 800a7fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a800:	47b8      	blx	r7
 800a802:	89a1      	ldrh	r1, [r4, #12]
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d106      	bne.n	800a816 <__sflush_r+0x6a>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	2b1d      	cmp	r3, #29
 800a80c:	d831      	bhi.n	800a872 <__sflush_r+0xc6>
 800a80e:	4a2c      	ldr	r2, [pc, #176]	; (800a8c0 <__sflush_r+0x114>)
 800a810:	40da      	lsrs	r2, r3
 800a812:	07d3      	lsls	r3, r2, #31
 800a814:	d52d      	bpl.n	800a872 <__sflush_r+0xc6>
 800a816:	2300      	movs	r3, #0
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	04cb      	lsls	r3, r1, #19
 800a820:	d505      	bpl.n	800a82e <__sflush_r+0x82>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	d102      	bne.n	800a82c <__sflush_r+0x80>
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d100      	bne.n	800a82e <__sflush_r+0x82>
 800a82c:	6560      	str	r0, [r4, #84]	; 0x54
 800a82e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a830:	602e      	str	r6, [r5, #0]
 800a832:	2900      	cmp	r1, #0
 800a834:	d0c6      	beq.n	800a7c4 <__sflush_r+0x18>
 800a836:	0023      	movs	r3, r4
 800a838:	3344      	adds	r3, #68	; 0x44
 800a83a:	4299      	cmp	r1, r3
 800a83c:	d002      	beq.n	800a844 <__sflush_r+0x98>
 800a83e:	0028      	movs	r0, r5
 800a840:	f7fd ff3e 	bl	80086c0 <_free_r>
 800a844:	2000      	movs	r0, #0
 800a846:	6360      	str	r0, [r4, #52]	; 0x34
 800a848:	e7bd      	b.n	800a7c6 <__sflush_r+0x1a>
 800a84a:	2301      	movs	r3, #1
 800a84c:	0028      	movs	r0, r5
 800a84e:	6a21      	ldr	r1, [r4, #32]
 800a850:	47b8      	blx	r7
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	d1c5      	bne.n	800a7e2 <__sflush_r+0x36>
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0c2      	beq.n	800a7e2 <__sflush_r+0x36>
 800a85c:	2b1d      	cmp	r3, #29
 800a85e:	d001      	beq.n	800a864 <__sflush_r+0xb8>
 800a860:	2b16      	cmp	r3, #22
 800a862:	d101      	bne.n	800a868 <__sflush_r+0xbc>
 800a864:	602e      	str	r6, [r5, #0]
 800a866:	e7ad      	b.n	800a7c4 <__sflush_r+0x18>
 800a868:	2340      	movs	r3, #64	; 0x40
 800a86a:	89a2      	ldrh	r2, [r4, #12]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	e7a9      	b.n	800a7c6 <__sflush_r+0x1a>
 800a872:	2340      	movs	r3, #64	; 0x40
 800a874:	430b      	orrs	r3, r1
 800a876:	e7fa      	b.n	800a86e <__sflush_r+0xc2>
 800a878:	690f      	ldr	r7, [r1, #16]
 800a87a:	2f00      	cmp	r7, #0
 800a87c:	d0a2      	beq.n	800a7c4 <__sflush_r+0x18>
 800a87e:	680a      	ldr	r2, [r1, #0]
 800a880:	600f      	str	r7, [r1, #0]
 800a882:	1bd2      	subs	r2, r2, r7
 800a884:	9201      	str	r2, [sp, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	079b      	lsls	r3, r3, #30
 800a88a:	d100      	bne.n	800a88e <__sflush_r+0xe2>
 800a88c:	694a      	ldr	r2, [r1, #20]
 800a88e:	60a2      	str	r2, [r4, #8]
 800a890:	9b01      	ldr	r3, [sp, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	dc00      	bgt.n	800a898 <__sflush_r+0xec>
 800a896:	e795      	b.n	800a7c4 <__sflush_r+0x18>
 800a898:	003a      	movs	r2, r7
 800a89a:	0028      	movs	r0, r5
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	6a21      	ldr	r1, [r4, #32]
 800a8a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8a2:	47b0      	blx	r6
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	dc06      	bgt.n	800a8b6 <__sflush_r+0x10a>
 800a8a8:	2340      	movs	r3, #64	; 0x40
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	89a2      	ldrh	r2, [r4, #12]
 800a8ae:	4240      	negs	r0, r0
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	81a3      	strh	r3, [r4, #12]
 800a8b4:	e787      	b.n	800a7c6 <__sflush_r+0x1a>
 800a8b6:	9b01      	ldr	r3, [sp, #4]
 800a8b8:	183f      	adds	r7, r7, r0
 800a8ba:	1a1b      	subs	r3, r3, r0
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	e7e7      	b.n	800a890 <__sflush_r+0xe4>
 800a8c0:	20400001 	.word	0x20400001

0800a8c4 <_fflush_r>:
 800a8c4:	690b      	ldr	r3, [r1, #16]
 800a8c6:	b570      	push	{r4, r5, r6, lr}
 800a8c8:	0005      	movs	r5, r0
 800a8ca:	000c      	movs	r4, r1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <_fflush_r+0x12>
 800a8d0:	2500      	movs	r5, #0
 800a8d2:	0028      	movs	r0, r5
 800a8d4:	bd70      	pop	{r4, r5, r6, pc}
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d004      	beq.n	800a8e4 <_fflush_r+0x20>
 800a8da:	6983      	ldr	r3, [r0, #24]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <_fflush_r+0x20>
 800a8e0:	f000 f892 	bl	800aa08 <__sinit>
 800a8e4:	4b14      	ldr	r3, [pc, #80]	; (800a938 <_fflush_r+0x74>)
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d11b      	bne.n	800a922 <_fflush_r+0x5e>
 800a8ea:	686c      	ldr	r4, [r5, #4]
 800a8ec:	220c      	movs	r2, #12
 800a8ee:	5ea3      	ldrsh	r3, [r4, r2]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0ed      	beq.n	800a8d0 <_fflush_r+0xc>
 800a8f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8f6:	07d2      	lsls	r2, r2, #31
 800a8f8:	d404      	bmi.n	800a904 <_fflush_r+0x40>
 800a8fa:	059b      	lsls	r3, r3, #22
 800a8fc:	d402      	bmi.n	800a904 <_fflush_r+0x40>
 800a8fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a900:	f000 f923 	bl	800ab4a <__retarget_lock_acquire_recursive>
 800a904:	0028      	movs	r0, r5
 800a906:	0021      	movs	r1, r4
 800a908:	f7ff ff50 	bl	800a7ac <__sflush_r>
 800a90c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a90e:	0005      	movs	r5, r0
 800a910:	07db      	lsls	r3, r3, #31
 800a912:	d4de      	bmi.n	800a8d2 <_fflush_r+0xe>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	059b      	lsls	r3, r3, #22
 800a918:	d4db      	bmi.n	800a8d2 <_fflush_r+0xe>
 800a91a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91c:	f000 f916 	bl	800ab4c <__retarget_lock_release_recursive>
 800a920:	e7d7      	b.n	800a8d2 <_fflush_r+0xe>
 800a922:	4b06      	ldr	r3, [pc, #24]	; (800a93c <_fflush_r+0x78>)
 800a924:	429c      	cmp	r4, r3
 800a926:	d101      	bne.n	800a92c <_fflush_r+0x68>
 800a928:	68ac      	ldr	r4, [r5, #8]
 800a92a:	e7df      	b.n	800a8ec <_fflush_r+0x28>
 800a92c:	4b04      	ldr	r3, [pc, #16]	; (800a940 <_fflush_r+0x7c>)
 800a92e:	429c      	cmp	r4, r3
 800a930:	d1dc      	bne.n	800a8ec <_fflush_r+0x28>
 800a932:	68ec      	ldr	r4, [r5, #12]
 800a934:	e7da      	b.n	800a8ec <_fflush_r+0x28>
 800a936:	46c0      	nop			; (mov r8, r8)
 800a938:	0800bda0 	.word	0x0800bda0
 800a93c:	0800bdc0 	.word	0x0800bdc0
 800a940:	0800bd80 	.word	0x0800bd80

0800a944 <std>:
 800a944:	2300      	movs	r3, #0
 800a946:	b510      	push	{r4, lr}
 800a948:	0004      	movs	r4, r0
 800a94a:	6003      	str	r3, [r0, #0]
 800a94c:	6043      	str	r3, [r0, #4]
 800a94e:	6083      	str	r3, [r0, #8]
 800a950:	8181      	strh	r1, [r0, #12]
 800a952:	6643      	str	r3, [r0, #100]	; 0x64
 800a954:	0019      	movs	r1, r3
 800a956:	81c2      	strh	r2, [r0, #14]
 800a958:	6103      	str	r3, [r0, #16]
 800a95a:	6143      	str	r3, [r0, #20]
 800a95c:	6183      	str	r3, [r0, #24]
 800a95e:	2208      	movs	r2, #8
 800a960:	305c      	adds	r0, #92	; 0x5c
 800a962:	f7fd fea5 	bl	80086b0 <memset>
 800a966:	4b05      	ldr	r3, [pc, #20]	; (800a97c <std+0x38>)
 800a968:	6263      	str	r3, [r4, #36]	; 0x24
 800a96a:	4b05      	ldr	r3, [pc, #20]	; (800a980 <std+0x3c>)
 800a96c:	6224      	str	r4, [r4, #32]
 800a96e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a970:	4b04      	ldr	r3, [pc, #16]	; (800a984 <std+0x40>)
 800a972:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a974:	4b04      	ldr	r3, [pc, #16]	; (800a988 <std+0x44>)
 800a976:	6323      	str	r3, [r4, #48]	; 0x30
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	46c0      	nop			; (mov r8, r8)
 800a97c:	0800ace5 	.word	0x0800ace5
 800a980:	0800ad0d 	.word	0x0800ad0d
 800a984:	0800ad45 	.word	0x0800ad45
 800a988:	0800ad71 	.word	0x0800ad71

0800a98c <_cleanup_r>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	4902      	ldr	r1, [pc, #8]	; (800a998 <_cleanup_r+0xc>)
 800a990:	f000 f8ba 	bl	800ab08 <_fwalk_reent>
 800a994:	bd10      	pop	{r4, pc}
 800a996:	46c0      	nop			; (mov r8, r8)
 800a998:	0800a8c5 	.word	0x0800a8c5

0800a99c <__sfmoreglue>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	2568      	movs	r5, #104	; 0x68
 800a9a0:	1e4a      	subs	r2, r1, #1
 800a9a2:	4355      	muls	r5, r2
 800a9a4:	000e      	movs	r6, r1
 800a9a6:	0029      	movs	r1, r5
 800a9a8:	3174      	adds	r1, #116	; 0x74
 800a9aa:	f7fd fed3 	bl	8008754 <_malloc_r>
 800a9ae:	1e04      	subs	r4, r0, #0
 800a9b0:	d008      	beq.n	800a9c4 <__sfmoreglue+0x28>
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	002a      	movs	r2, r5
 800a9b6:	6001      	str	r1, [r0, #0]
 800a9b8:	6046      	str	r6, [r0, #4]
 800a9ba:	300c      	adds	r0, #12
 800a9bc:	60a0      	str	r0, [r4, #8]
 800a9be:	3268      	adds	r2, #104	; 0x68
 800a9c0:	f7fd fe76 	bl	80086b0 <memset>
 800a9c4:	0020      	movs	r0, r4
 800a9c6:	bd70      	pop	{r4, r5, r6, pc}

0800a9c8 <__sfp_lock_acquire>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	4802      	ldr	r0, [pc, #8]	; (800a9d4 <__sfp_lock_acquire+0xc>)
 800a9cc:	f000 f8bd 	bl	800ab4a <__retarget_lock_acquire_recursive>
 800a9d0:	bd10      	pop	{r4, pc}
 800a9d2:	46c0      	nop			; (mov r8, r8)
 800a9d4:	200012d8 	.word	0x200012d8

0800a9d8 <__sfp_lock_release>:
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	4802      	ldr	r0, [pc, #8]	; (800a9e4 <__sfp_lock_release+0xc>)
 800a9dc:	f000 f8b6 	bl	800ab4c <__retarget_lock_release_recursive>
 800a9e0:	bd10      	pop	{r4, pc}
 800a9e2:	46c0      	nop			; (mov r8, r8)
 800a9e4:	200012d8 	.word	0x200012d8

0800a9e8 <__sinit_lock_acquire>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	4802      	ldr	r0, [pc, #8]	; (800a9f4 <__sinit_lock_acquire+0xc>)
 800a9ec:	f000 f8ad 	bl	800ab4a <__retarget_lock_acquire_recursive>
 800a9f0:	bd10      	pop	{r4, pc}
 800a9f2:	46c0      	nop			; (mov r8, r8)
 800a9f4:	200012d3 	.word	0x200012d3

0800a9f8 <__sinit_lock_release>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	4802      	ldr	r0, [pc, #8]	; (800aa04 <__sinit_lock_release+0xc>)
 800a9fc:	f000 f8a6 	bl	800ab4c <__retarget_lock_release_recursive>
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	46c0      	nop			; (mov r8, r8)
 800aa04:	200012d3 	.word	0x200012d3

0800aa08 <__sinit>:
 800aa08:	b513      	push	{r0, r1, r4, lr}
 800aa0a:	0004      	movs	r4, r0
 800aa0c:	f7ff ffec 	bl	800a9e8 <__sinit_lock_acquire>
 800aa10:	69a3      	ldr	r3, [r4, #24]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <__sinit+0x14>
 800aa16:	f7ff ffef 	bl	800a9f8 <__sinit_lock_release>
 800aa1a:	bd13      	pop	{r0, r1, r4, pc}
 800aa1c:	64a3      	str	r3, [r4, #72]	; 0x48
 800aa1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aa20:	6523      	str	r3, [r4, #80]	; 0x50
 800aa22:	4b13      	ldr	r3, [pc, #76]	; (800aa70 <__sinit+0x68>)
 800aa24:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <__sinit+0x6c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	d101      	bne.n	800aa34 <__sinit+0x2c>
 800aa30:	2301      	movs	r3, #1
 800aa32:	61a3      	str	r3, [r4, #24]
 800aa34:	0020      	movs	r0, r4
 800aa36:	f000 f81f 	bl	800aa78 <__sfp>
 800aa3a:	6060      	str	r0, [r4, #4]
 800aa3c:	0020      	movs	r0, r4
 800aa3e:	f000 f81b 	bl	800aa78 <__sfp>
 800aa42:	60a0      	str	r0, [r4, #8]
 800aa44:	0020      	movs	r0, r4
 800aa46:	f000 f817 	bl	800aa78 <__sfp>
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2104      	movs	r1, #4
 800aa4e:	60e0      	str	r0, [r4, #12]
 800aa50:	6860      	ldr	r0, [r4, #4]
 800aa52:	f7ff ff77 	bl	800a944 <std>
 800aa56:	2201      	movs	r2, #1
 800aa58:	2109      	movs	r1, #9
 800aa5a:	68a0      	ldr	r0, [r4, #8]
 800aa5c:	f7ff ff72 	bl	800a944 <std>
 800aa60:	2202      	movs	r2, #2
 800aa62:	2112      	movs	r1, #18
 800aa64:	68e0      	ldr	r0, [r4, #12]
 800aa66:	f7ff ff6d 	bl	800a944 <std>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	61a3      	str	r3, [r4, #24]
 800aa6e:	e7d2      	b.n	800aa16 <__sinit+0xe>
 800aa70:	0800bb14 	.word	0x0800bb14
 800aa74:	0800a98d 	.word	0x0800a98d

0800aa78 <__sfp>:
 800aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7a:	0007      	movs	r7, r0
 800aa7c:	f7ff ffa4 	bl	800a9c8 <__sfp_lock_acquire>
 800aa80:	4b1f      	ldr	r3, [pc, #124]	; (800ab00 <__sfp+0x88>)
 800aa82:	681e      	ldr	r6, [r3, #0]
 800aa84:	69b3      	ldr	r3, [r6, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d102      	bne.n	800aa90 <__sfp+0x18>
 800aa8a:	0030      	movs	r0, r6
 800aa8c:	f7ff ffbc 	bl	800aa08 <__sinit>
 800aa90:	3648      	adds	r6, #72	; 0x48
 800aa92:	68b4      	ldr	r4, [r6, #8]
 800aa94:	6873      	ldr	r3, [r6, #4]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	d504      	bpl.n	800aaa4 <__sfp+0x2c>
 800aa9a:	6833      	ldr	r3, [r6, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d022      	beq.n	800aae6 <__sfp+0x6e>
 800aaa0:	6836      	ldr	r6, [r6, #0]
 800aaa2:	e7f6      	b.n	800aa92 <__sfp+0x1a>
 800aaa4:	220c      	movs	r2, #12
 800aaa6:	5ea5      	ldrsh	r5, [r4, r2]
 800aaa8:	2d00      	cmp	r5, #0
 800aaaa:	d11a      	bne.n	800aae2 <__sfp+0x6a>
 800aaac:	0020      	movs	r0, r4
 800aaae:	4b15      	ldr	r3, [pc, #84]	; (800ab04 <__sfp+0x8c>)
 800aab0:	3058      	adds	r0, #88	; 0x58
 800aab2:	60e3      	str	r3, [r4, #12]
 800aab4:	6665      	str	r5, [r4, #100]	; 0x64
 800aab6:	f000 f847 	bl	800ab48 <__retarget_lock_init_recursive>
 800aaba:	f7ff ff8d 	bl	800a9d8 <__sfp_lock_release>
 800aabe:	0020      	movs	r0, r4
 800aac0:	2208      	movs	r2, #8
 800aac2:	0029      	movs	r1, r5
 800aac4:	6025      	str	r5, [r4, #0]
 800aac6:	60a5      	str	r5, [r4, #8]
 800aac8:	6065      	str	r5, [r4, #4]
 800aaca:	6125      	str	r5, [r4, #16]
 800aacc:	6165      	str	r5, [r4, #20]
 800aace:	61a5      	str	r5, [r4, #24]
 800aad0:	305c      	adds	r0, #92	; 0x5c
 800aad2:	f7fd fded 	bl	80086b0 <memset>
 800aad6:	6365      	str	r5, [r4, #52]	; 0x34
 800aad8:	63a5      	str	r5, [r4, #56]	; 0x38
 800aada:	64a5      	str	r5, [r4, #72]	; 0x48
 800aadc:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aade:	0020      	movs	r0, r4
 800aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae2:	3468      	adds	r4, #104	; 0x68
 800aae4:	e7d7      	b.n	800aa96 <__sfp+0x1e>
 800aae6:	2104      	movs	r1, #4
 800aae8:	0038      	movs	r0, r7
 800aaea:	f7ff ff57 	bl	800a99c <__sfmoreglue>
 800aaee:	1e04      	subs	r4, r0, #0
 800aaf0:	6030      	str	r0, [r6, #0]
 800aaf2:	d1d5      	bne.n	800aaa0 <__sfp+0x28>
 800aaf4:	f7ff ff70 	bl	800a9d8 <__sfp_lock_release>
 800aaf8:	230c      	movs	r3, #12
 800aafa:	603b      	str	r3, [r7, #0]
 800aafc:	e7ef      	b.n	800aade <__sfp+0x66>
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	0800bb14 	.word	0x0800bb14
 800ab04:	ffff0001 	.word	0xffff0001

0800ab08 <_fwalk_reent>:
 800ab08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab0a:	0004      	movs	r4, r0
 800ab0c:	0006      	movs	r6, r0
 800ab0e:	2700      	movs	r7, #0
 800ab10:	9101      	str	r1, [sp, #4]
 800ab12:	3448      	adds	r4, #72	; 0x48
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	68a5      	ldr	r5, [r4, #8]
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	9b00      	ldr	r3, [sp, #0]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	d504      	bpl.n	800ab2c <_fwalk_reent+0x24>
 800ab22:	6824      	ldr	r4, [r4, #0]
 800ab24:	2c00      	cmp	r4, #0
 800ab26:	d1f5      	bne.n	800ab14 <_fwalk_reent+0xc>
 800ab28:	0038      	movs	r0, r7
 800ab2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab2c:	89ab      	ldrh	r3, [r5, #12]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d908      	bls.n	800ab44 <_fwalk_reent+0x3c>
 800ab32:	220e      	movs	r2, #14
 800ab34:	5eab      	ldrsh	r3, [r5, r2]
 800ab36:	3301      	adds	r3, #1
 800ab38:	d004      	beq.n	800ab44 <_fwalk_reent+0x3c>
 800ab3a:	0029      	movs	r1, r5
 800ab3c:	0030      	movs	r0, r6
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	4798      	blx	r3
 800ab42:	4307      	orrs	r7, r0
 800ab44:	3568      	adds	r5, #104	; 0x68
 800ab46:	e7e8      	b.n	800ab1a <_fwalk_reent+0x12>

0800ab48 <__retarget_lock_init_recursive>:
 800ab48:	4770      	bx	lr

0800ab4a <__retarget_lock_acquire_recursive>:
 800ab4a:	4770      	bx	lr

0800ab4c <__retarget_lock_release_recursive>:
 800ab4c:	4770      	bx	lr
	...

0800ab50 <__swhatbuf_r>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	000e      	movs	r6, r1
 800ab54:	001d      	movs	r5, r3
 800ab56:	230e      	movs	r3, #14
 800ab58:	5ec9      	ldrsh	r1, [r1, r3]
 800ab5a:	0014      	movs	r4, r2
 800ab5c:	b096      	sub	sp, #88	; 0x58
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	da07      	bge.n	800ab72 <__swhatbuf_r+0x22>
 800ab62:	2300      	movs	r3, #0
 800ab64:	602b      	str	r3, [r5, #0]
 800ab66:	89b3      	ldrh	r3, [r6, #12]
 800ab68:	061b      	lsls	r3, r3, #24
 800ab6a:	d411      	bmi.n	800ab90 <__swhatbuf_r+0x40>
 800ab6c:	2380      	movs	r3, #128	; 0x80
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	e00f      	b.n	800ab92 <__swhatbuf_r+0x42>
 800ab72:	466a      	mov	r2, sp
 800ab74:	f000 f928 	bl	800adc8 <_fstat_r>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	dbf2      	blt.n	800ab62 <__swhatbuf_r+0x12>
 800ab7c:	23f0      	movs	r3, #240	; 0xf0
 800ab7e:	9901      	ldr	r1, [sp, #4]
 800ab80:	021b      	lsls	r3, r3, #8
 800ab82:	4019      	ands	r1, r3
 800ab84:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <__swhatbuf_r+0x4c>)
 800ab86:	18c9      	adds	r1, r1, r3
 800ab88:	424b      	negs	r3, r1
 800ab8a:	4159      	adcs	r1, r3
 800ab8c:	6029      	str	r1, [r5, #0]
 800ab8e:	e7ed      	b.n	800ab6c <__swhatbuf_r+0x1c>
 800ab90:	2340      	movs	r3, #64	; 0x40
 800ab92:	2000      	movs	r0, #0
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	b016      	add	sp, #88	; 0x58
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	ffffe000 	.word	0xffffe000

0800aba0 <__smakebuf_r>:
 800aba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba2:	2602      	movs	r6, #2
 800aba4:	898b      	ldrh	r3, [r1, #12]
 800aba6:	0005      	movs	r5, r0
 800aba8:	000c      	movs	r4, r1
 800abaa:	4233      	tst	r3, r6
 800abac:	d006      	beq.n	800abbc <__smakebuf_r+0x1c>
 800abae:	0023      	movs	r3, r4
 800abb0:	3347      	adds	r3, #71	; 0x47
 800abb2:	6023      	str	r3, [r4, #0]
 800abb4:	6123      	str	r3, [r4, #16]
 800abb6:	2301      	movs	r3, #1
 800abb8:	6163      	str	r3, [r4, #20]
 800abba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800abbc:	466a      	mov	r2, sp
 800abbe:	ab01      	add	r3, sp, #4
 800abc0:	f7ff ffc6 	bl	800ab50 <__swhatbuf_r>
 800abc4:	9900      	ldr	r1, [sp, #0]
 800abc6:	0007      	movs	r7, r0
 800abc8:	0028      	movs	r0, r5
 800abca:	f7fd fdc3 	bl	8008754 <_malloc_r>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d108      	bne.n	800abe4 <__smakebuf_r+0x44>
 800abd2:	220c      	movs	r2, #12
 800abd4:	5ea3      	ldrsh	r3, [r4, r2]
 800abd6:	059a      	lsls	r2, r3, #22
 800abd8:	d4ef      	bmi.n	800abba <__smakebuf_r+0x1a>
 800abda:	2203      	movs	r2, #3
 800abdc:	4393      	bics	r3, r2
 800abde:	431e      	orrs	r6, r3
 800abe0:	81a6      	strh	r6, [r4, #12]
 800abe2:	e7e4      	b.n	800abae <__smakebuf_r+0xe>
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <__smakebuf_r+0x84>)
 800abe6:	62ab      	str	r3, [r5, #40]	; 0x28
 800abe8:	2380      	movs	r3, #128	; 0x80
 800abea:	89a2      	ldrh	r2, [r4, #12]
 800abec:	6020      	str	r0, [r4, #0]
 800abee:	4313      	orrs	r3, r2
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	6120      	str	r0, [r4, #16]
 800abf6:	6163      	str	r3, [r4, #20]
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00d      	beq.n	800ac1a <__smakebuf_r+0x7a>
 800abfe:	0028      	movs	r0, r5
 800ac00:	230e      	movs	r3, #14
 800ac02:	5ee1      	ldrsh	r1, [r4, r3]
 800ac04:	f000 f8f2 	bl	800adec <_isatty_r>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d006      	beq.n	800ac1a <__smakebuf_r+0x7a>
 800ac0c:	2203      	movs	r2, #3
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	4393      	bics	r3, r2
 800ac12:	001a      	movs	r2, r3
 800ac14:	2301      	movs	r3, #1
 800ac16:	4313      	orrs	r3, r2
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	89a0      	ldrh	r0, [r4, #12]
 800ac1c:	4307      	orrs	r7, r0
 800ac1e:	81a7      	strh	r7, [r4, #12]
 800ac20:	e7cb      	b.n	800abba <__smakebuf_r+0x1a>
 800ac22:	46c0      	nop			; (mov r8, r8)
 800ac24:	0800a98d 	.word	0x0800a98d

0800ac28 <memchr>:
 800ac28:	b2c9      	uxtb	r1, r1
 800ac2a:	1882      	adds	r2, r0, r2
 800ac2c:	4290      	cmp	r0, r2
 800ac2e:	d101      	bne.n	800ac34 <memchr+0xc>
 800ac30:	2000      	movs	r0, #0
 800ac32:	4770      	bx	lr
 800ac34:	7803      	ldrb	r3, [r0, #0]
 800ac36:	428b      	cmp	r3, r1
 800ac38:	d0fb      	beq.n	800ac32 <memchr+0xa>
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	e7f6      	b.n	800ac2c <memchr+0x4>

0800ac3e <memcpy>:
 800ac3e:	2300      	movs	r3, #0
 800ac40:	b510      	push	{r4, lr}
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d100      	bne.n	800ac48 <memcpy+0xa>
 800ac46:	bd10      	pop	{r4, pc}
 800ac48:	5ccc      	ldrb	r4, [r1, r3]
 800ac4a:	54c4      	strb	r4, [r0, r3]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	e7f8      	b.n	800ac42 <memcpy+0x4>

0800ac50 <_raise_r>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	0004      	movs	r4, r0
 800ac54:	000d      	movs	r5, r1
 800ac56:	291f      	cmp	r1, #31
 800ac58:	d904      	bls.n	800ac64 <_raise_r+0x14>
 800ac5a:	2316      	movs	r3, #22
 800ac5c:	6003      	str	r3, [r0, #0]
 800ac5e:	2001      	movs	r0, #1
 800ac60:	4240      	negs	r0, r0
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d004      	beq.n	800ac74 <_raise_r+0x24>
 800ac6a:	008a      	lsls	r2, r1, #2
 800ac6c:	189b      	adds	r3, r3, r2
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	2a00      	cmp	r2, #0
 800ac72:	d108      	bne.n	800ac86 <_raise_r+0x36>
 800ac74:	0020      	movs	r0, r4
 800ac76:	f000 f831 	bl	800acdc <_getpid_r>
 800ac7a:	002a      	movs	r2, r5
 800ac7c:	0001      	movs	r1, r0
 800ac7e:	0020      	movs	r0, r4
 800ac80:	f000 f81a 	bl	800acb8 <_kill_r>
 800ac84:	e7ed      	b.n	800ac62 <_raise_r+0x12>
 800ac86:	2000      	movs	r0, #0
 800ac88:	2a01      	cmp	r2, #1
 800ac8a:	d0ea      	beq.n	800ac62 <_raise_r+0x12>
 800ac8c:	1c51      	adds	r1, r2, #1
 800ac8e:	d103      	bne.n	800ac98 <_raise_r+0x48>
 800ac90:	2316      	movs	r3, #22
 800ac92:	3001      	adds	r0, #1
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	e7e4      	b.n	800ac62 <_raise_r+0x12>
 800ac98:	2400      	movs	r4, #0
 800ac9a:	0028      	movs	r0, r5
 800ac9c:	601c      	str	r4, [r3, #0]
 800ac9e:	4790      	blx	r2
 800aca0:	0020      	movs	r0, r4
 800aca2:	e7de      	b.n	800ac62 <_raise_r+0x12>

0800aca4 <raise>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	4b03      	ldr	r3, [pc, #12]	; (800acb4 <raise+0x10>)
 800aca8:	0001      	movs	r1, r0
 800acaa:	6818      	ldr	r0, [r3, #0]
 800acac:	f7ff ffd0 	bl	800ac50 <_raise_r>
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	46c0      	nop			; (mov r8, r8)
 800acb4:	20000088 	.word	0x20000088

0800acb8 <_kill_r>:
 800acb8:	2300      	movs	r3, #0
 800acba:	b570      	push	{r4, r5, r6, lr}
 800acbc:	4d06      	ldr	r5, [pc, #24]	; (800acd8 <_kill_r+0x20>)
 800acbe:	0004      	movs	r4, r0
 800acc0:	0008      	movs	r0, r1
 800acc2:	0011      	movs	r1, r2
 800acc4:	602b      	str	r3, [r5, #0]
 800acc6:	f7f9 fa3f 	bl	8004148 <_kill>
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	d103      	bne.n	800acd6 <_kill_r+0x1e>
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d000      	beq.n	800acd6 <_kill_r+0x1e>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	200012cc 	.word	0x200012cc

0800acdc <_getpid_r>:
 800acdc:	b510      	push	{r4, lr}
 800acde:	f7f9 fa2d 	bl	800413c <_getpid>
 800ace2:	bd10      	pop	{r4, pc}

0800ace4 <__sread>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	000c      	movs	r4, r1
 800ace8:	250e      	movs	r5, #14
 800acea:	5f49      	ldrsh	r1, [r1, r5]
 800acec:	f000 f8a4 	bl	800ae38 <_read_r>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	db03      	blt.n	800acfc <__sread+0x18>
 800acf4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800acf6:	181b      	adds	r3, r3, r0
 800acf8:	6563      	str	r3, [r4, #84]	; 0x54
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	4a02      	ldr	r2, [pc, #8]	; (800ad08 <__sread+0x24>)
 800ad00:	4013      	ands	r3, r2
 800ad02:	81a3      	strh	r3, [r4, #12]
 800ad04:	e7f9      	b.n	800acfa <__sread+0x16>
 800ad06:	46c0      	nop			; (mov r8, r8)
 800ad08:	ffffefff 	.word	0xffffefff

0800ad0c <__swrite>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	001f      	movs	r7, r3
 800ad10:	898b      	ldrh	r3, [r1, #12]
 800ad12:	0005      	movs	r5, r0
 800ad14:	000c      	movs	r4, r1
 800ad16:	0016      	movs	r6, r2
 800ad18:	05db      	lsls	r3, r3, #23
 800ad1a:	d505      	bpl.n	800ad28 <__swrite+0x1c>
 800ad1c:	230e      	movs	r3, #14
 800ad1e:	5ec9      	ldrsh	r1, [r1, r3]
 800ad20:	2200      	movs	r2, #0
 800ad22:	2302      	movs	r3, #2
 800ad24:	f000 f874 	bl	800ae10 <_lseek_r>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	4a05      	ldr	r2, [pc, #20]	; (800ad40 <__swrite+0x34>)
 800ad2c:	0028      	movs	r0, r5
 800ad2e:	4013      	ands	r3, r2
 800ad30:	81a3      	strh	r3, [r4, #12]
 800ad32:	0032      	movs	r2, r6
 800ad34:	230e      	movs	r3, #14
 800ad36:	5ee1      	ldrsh	r1, [r4, r3]
 800ad38:	003b      	movs	r3, r7
 800ad3a:	f000 f81f 	bl	800ad7c <_write_r>
 800ad3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad40:	ffffefff 	.word	0xffffefff

0800ad44 <__sseek>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	000c      	movs	r4, r1
 800ad48:	250e      	movs	r5, #14
 800ad4a:	5f49      	ldrsh	r1, [r1, r5]
 800ad4c:	f000 f860 	bl	800ae10 <_lseek_r>
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	1c42      	adds	r2, r0, #1
 800ad54:	d103      	bne.n	800ad5e <__sseek+0x1a>
 800ad56:	4a05      	ldr	r2, [pc, #20]	; (800ad6c <__sseek+0x28>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	2280      	movs	r2, #128	; 0x80
 800ad60:	0152      	lsls	r2, r2, #5
 800ad62:	4313      	orrs	r3, r2
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	6560      	str	r0, [r4, #84]	; 0x54
 800ad68:	e7f8      	b.n	800ad5c <__sseek+0x18>
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	ffffefff 	.word	0xffffefff

0800ad70 <__sclose>:
 800ad70:	b510      	push	{r4, lr}
 800ad72:	230e      	movs	r3, #14
 800ad74:	5ec9      	ldrsh	r1, [r1, r3]
 800ad76:	f000 f815 	bl	800ada4 <_close_r>
 800ad7a:	bd10      	pop	{r4, pc}

0800ad7c <_write_r>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	0004      	movs	r4, r0
 800ad80:	0008      	movs	r0, r1
 800ad82:	0011      	movs	r1, r2
 800ad84:	001a      	movs	r2, r3
 800ad86:	2300      	movs	r3, #0
 800ad88:	4d05      	ldr	r5, [pc, #20]	; (800ada0 <_write_r+0x24>)
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f9 fa15 	bl	80041ba <_write>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d103      	bne.n	800ad9c <_write_r+0x20>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d000      	beq.n	800ad9c <_write_r+0x20>
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
 800ad9e:	46c0      	nop			; (mov r8, r8)
 800ada0:	200012cc 	.word	0x200012cc

0800ada4 <_close_r>:
 800ada4:	2300      	movs	r3, #0
 800ada6:	b570      	push	{r4, r5, r6, lr}
 800ada8:	4d06      	ldr	r5, [pc, #24]	; (800adc4 <_close_r+0x20>)
 800adaa:	0004      	movs	r4, r0
 800adac:	0008      	movs	r0, r1
 800adae:	602b      	str	r3, [r5, #0]
 800adb0:	f7f9 fa1f 	bl	80041f2 <_close>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d103      	bne.n	800adc0 <_close_r+0x1c>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d000      	beq.n	800adc0 <_close_r+0x1c>
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	bd70      	pop	{r4, r5, r6, pc}
 800adc2:	46c0      	nop			; (mov r8, r8)
 800adc4:	200012cc 	.word	0x200012cc

0800adc8 <_fstat_r>:
 800adc8:	2300      	movs	r3, #0
 800adca:	b570      	push	{r4, r5, r6, lr}
 800adcc:	4d06      	ldr	r5, [pc, #24]	; (800ade8 <_fstat_r+0x20>)
 800adce:	0004      	movs	r4, r0
 800add0:	0008      	movs	r0, r1
 800add2:	0011      	movs	r1, r2
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	f7f9 fa16 	bl	8004206 <_fstat>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	d103      	bne.n	800ade6 <_fstat_r+0x1e>
 800adde:	682b      	ldr	r3, [r5, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d000      	beq.n	800ade6 <_fstat_r+0x1e>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	200012cc 	.word	0x200012cc

0800adec <_isatty_r>:
 800adec:	2300      	movs	r3, #0
 800adee:	b570      	push	{r4, r5, r6, lr}
 800adf0:	4d06      	ldr	r5, [pc, #24]	; (800ae0c <_isatty_r+0x20>)
 800adf2:	0004      	movs	r4, r0
 800adf4:	0008      	movs	r0, r1
 800adf6:	602b      	str	r3, [r5, #0]
 800adf8:	f7f9 fa13 	bl	8004222 <_isatty>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d103      	bne.n	800ae08 <_isatty_r+0x1c>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d000      	beq.n	800ae08 <_isatty_r+0x1c>
 800ae06:	6023      	str	r3, [r4, #0]
 800ae08:	bd70      	pop	{r4, r5, r6, pc}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	200012cc 	.word	0x200012cc

0800ae10 <_lseek_r>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	0004      	movs	r4, r0
 800ae14:	0008      	movs	r0, r1
 800ae16:	0011      	movs	r1, r2
 800ae18:	001a      	movs	r2, r3
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4d05      	ldr	r5, [pc, #20]	; (800ae34 <_lseek_r+0x24>)
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	f7f9 fa08 	bl	8004234 <_lseek>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d103      	bne.n	800ae30 <_lseek_r+0x20>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d000      	beq.n	800ae30 <_lseek_r+0x20>
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	46c0      	nop			; (mov r8, r8)
 800ae34:	200012cc 	.word	0x200012cc

0800ae38 <_read_r>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	0004      	movs	r4, r0
 800ae3c:	0008      	movs	r0, r1
 800ae3e:	0011      	movs	r1, r2
 800ae40:	001a      	movs	r2, r3
 800ae42:	2300      	movs	r3, #0
 800ae44:	4d05      	ldr	r5, [pc, #20]	; (800ae5c <_read_r+0x24>)
 800ae46:	602b      	str	r3, [r5, #0]
 800ae48:	f7f9 f99a 	bl	8004180 <_read>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d103      	bne.n	800ae58 <_read_r+0x20>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d000      	beq.n	800ae58 <_read_r+0x20>
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	bd70      	pop	{r4, r5, r6, pc}
 800ae5a:	46c0      	nop			; (mov r8, r8)
 800ae5c:	200012cc 	.word	0x200012cc

0800ae60 <_init>:
 800ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae62:	46c0      	nop			; (mov r8, r8)
 800ae64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae66:	bc08      	pop	{r3}
 800ae68:	469e      	mov	lr, r3
 800ae6a:	4770      	bx	lr

0800ae6c <_fini>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	46c0      	nop			; (mov r8, r8)
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr
