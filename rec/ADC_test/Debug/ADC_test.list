
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d0  0800e1a8  0800e1a8  0001e1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f478  0800f478  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  0800f478  0800f478  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f478  0800f478  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f478  0800f478  0001f478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f47c  0800f47c  0001f47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800f480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f4  20000120  0800f5a0  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  0800f5a0  00021314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154f1  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003112  00000000  00000000  00035639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00038750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000399f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010e54  00000000  00000000  0003ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000537d  00000000  00000000  0004b9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00050d31  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000057a4  00000000  00000000  00050d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000120 	.word	0x20000120
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e190 	.word	0x0800e190

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000124 	.word	0x20000124
 8000100:	0800e190 	.word	0x0800e190

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fb85 	bl	8000b08 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fb09 	bl	8000a20 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fb77 	bl	8000b08 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fb6d 	bl	8000b08 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb17 	bl	8000a70 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb0d 	bl	8000a70 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_f2uiz>:
 8000464:	219e      	movs	r1, #158	; 0x9e
 8000466:	b510      	push	{r4, lr}
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	1c04      	adds	r4, r0, #0
 800046c:	f7ff fff0 	bl	8000450 <__aeabi_fcmpge>
 8000470:	2800      	cmp	r0, #0
 8000472:	d103      	bne.n	800047c <__aeabi_f2uiz+0x18>
 8000474:	1c20      	adds	r0, r4, #0
 8000476:	f000 fe73 	bl	8001160 <__aeabi_f2iz>
 800047a:	bd10      	pop	{r4, pc}
 800047c:	219e      	movs	r1, #158	; 0x9e
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	f000 fca5 	bl	8000dd0 <__aeabi_fsub>
 8000486:	f000 fe6b 	bl	8001160 <__aeabi_f2iz>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	061b      	lsls	r3, r3, #24
 800048e:	469c      	mov	ip, r3
 8000490:	4460      	add	r0, ip
 8000492:	e7f2      	b.n	800047a <__aeabi_f2uiz+0x16>

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f002 fcbb 	bl	8002e18 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f002 fb4b 	bl	8002b44 <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 ffb2 	bl	8002420 <__aeabi_dsub>
 80004bc:	f002 fb42 	bl	8002b44 <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_fadd>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	4646      	mov	r6, r8
 80004d4:	46d6      	mov	lr, sl
 80004d6:	464f      	mov	r7, r9
 80004d8:	024d      	lsls	r5, r1, #9
 80004da:	0242      	lsls	r2, r0, #9
 80004dc:	b5c0      	push	{r6, r7, lr}
 80004de:	0a52      	lsrs	r2, r2, #9
 80004e0:	0a6e      	lsrs	r6, r5, #9
 80004e2:	0047      	lsls	r7, r0, #1
 80004e4:	46b0      	mov	r8, r6
 80004e6:	0e3f      	lsrs	r7, r7, #24
 80004e8:	004e      	lsls	r6, r1, #1
 80004ea:	0fc4      	lsrs	r4, r0, #31
 80004ec:	00d0      	lsls	r0, r2, #3
 80004ee:	4694      	mov	ip, r2
 80004f0:	003b      	movs	r3, r7
 80004f2:	4682      	mov	sl, r0
 80004f4:	0e36      	lsrs	r6, r6, #24
 80004f6:	0fc9      	lsrs	r1, r1, #31
 80004f8:	09ad      	lsrs	r5, r5, #6
 80004fa:	428c      	cmp	r4, r1
 80004fc:	d06d      	beq.n	80005da <__aeabi_fadd+0x10a>
 80004fe:	1bb8      	subs	r0, r7, r6
 8000500:	4681      	mov	r9, r0
 8000502:	2800      	cmp	r0, #0
 8000504:	dd4d      	ble.n	80005a2 <__aeabi_fadd+0xd2>
 8000506:	2e00      	cmp	r6, #0
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x3c>
 800050a:	e088      	b.n	800061e <__aeabi_fadd+0x14e>
 800050c:	2fff      	cmp	r7, #255	; 0xff
 800050e:	d05a      	beq.n	80005c6 <__aeabi_fadd+0xf6>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	04db      	lsls	r3, r3, #19
 8000514:	431d      	orrs	r5, r3
 8000516:	464b      	mov	r3, r9
 8000518:	2201      	movs	r2, #1
 800051a:	2b1b      	cmp	r3, #27
 800051c:	dc0a      	bgt.n	8000534 <__aeabi_fadd+0x64>
 800051e:	002b      	movs	r3, r5
 8000520:	464a      	mov	r2, r9
 8000522:	4649      	mov	r1, r9
 8000524:	40d3      	lsrs	r3, r2
 8000526:	2220      	movs	r2, #32
 8000528:	1a52      	subs	r2, r2, r1
 800052a:	4095      	lsls	r5, r2
 800052c:	002a      	movs	r2, r5
 800052e:	1e55      	subs	r5, r2, #1
 8000530:	41aa      	sbcs	r2, r5
 8000532:	431a      	orrs	r2, r3
 8000534:	4653      	mov	r3, sl
 8000536:	1a9a      	subs	r2, r3, r2
 8000538:	0153      	lsls	r3, r2, #5
 800053a:	d400      	bmi.n	800053e <__aeabi_fadd+0x6e>
 800053c:	e0b9      	b.n	80006b2 <__aeabi_fadd+0x1e2>
 800053e:	0192      	lsls	r2, r2, #6
 8000540:	0996      	lsrs	r6, r2, #6
 8000542:	0030      	movs	r0, r6
 8000544:	f002 fc72 	bl	8002e2c <__clzsi2>
 8000548:	3805      	subs	r0, #5
 800054a:	4086      	lsls	r6, r0
 800054c:	4287      	cmp	r7, r0
 800054e:	dd00      	ble.n	8000552 <__aeabi_fadd+0x82>
 8000550:	e0d4      	b.n	80006fc <__aeabi_fadd+0x22c>
 8000552:	0033      	movs	r3, r6
 8000554:	1bc7      	subs	r7, r0, r7
 8000556:	2020      	movs	r0, #32
 8000558:	3701      	adds	r7, #1
 800055a:	40fb      	lsrs	r3, r7
 800055c:	1bc7      	subs	r7, r0, r7
 800055e:	40be      	lsls	r6, r7
 8000560:	0032      	movs	r2, r6
 8000562:	1e56      	subs	r6, r2, #1
 8000564:	41b2      	sbcs	r2, r6
 8000566:	2700      	movs	r7, #0
 8000568:	431a      	orrs	r2, r3
 800056a:	0753      	lsls	r3, r2, #29
 800056c:	d004      	beq.n	8000578 <__aeabi_fadd+0xa8>
 800056e:	230f      	movs	r3, #15
 8000570:	4013      	ands	r3, r2
 8000572:	2b04      	cmp	r3, #4
 8000574:	d000      	beq.n	8000578 <__aeabi_fadd+0xa8>
 8000576:	3204      	adds	r2, #4
 8000578:	0153      	lsls	r3, r2, #5
 800057a:	d400      	bmi.n	800057e <__aeabi_fadd+0xae>
 800057c:	e09c      	b.n	80006b8 <__aeabi_fadd+0x1e8>
 800057e:	1c7b      	adds	r3, r7, #1
 8000580:	2ffe      	cmp	r7, #254	; 0xfe
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xb6>
 8000584:	e09a      	b.n	80006bc <__aeabi_fadd+0x1ec>
 8000586:	0192      	lsls	r2, r2, #6
 8000588:	0a52      	lsrs	r2, r2, #9
 800058a:	4694      	mov	ip, r2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	05d8      	lsls	r0, r3, #23
 8000590:	4663      	mov	r3, ip
 8000592:	07e4      	lsls	r4, r4, #31
 8000594:	4318      	orrs	r0, r3
 8000596:	4320      	orrs	r0, r4
 8000598:	bce0      	pop	{r5, r6, r7}
 800059a:	46ba      	mov	sl, r7
 800059c:	46b1      	mov	r9, r6
 800059e:	46a8      	mov	r8, r5
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	2800      	cmp	r0, #0
 80005a4:	d049      	beq.n	800063a <__aeabi_fadd+0x16a>
 80005a6:	1bf3      	subs	r3, r6, r7
 80005a8:	2f00      	cmp	r7, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0xde>
 80005ac:	e0b6      	b.n	800071c <__aeabi_fadd+0x24c>
 80005ae:	4652      	mov	r2, sl
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d060      	beq.n	8000676 <__aeabi_fadd+0x1a6>
 80005b4:	3b01      	subs	r3, #1
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0xec>
 80005ba:	e0fc      	b.n	80007b6 <__aeabi_fadd+0x2e6>
 80005bc:	2eff      	cmp	r6, #255	; 0xff
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0xf2>
 80005c0:	e0b4      	b.n	800072c <__aeabi_fadd+0x25c>
 80005c2:	000c      	movs	r4, r1
 80005c4:	4642      	mov	r2, r8
 80005c6:	2a00      	cmp	r2, #0
 80005c8:	d078      	beq.n	80006bc <__aeabi_fadd+0x1ec>
 80005ca:	2080      	movs	r0, #128	; 0x80
 80005cc:	03c0      	lsls	r0, r0, #15
 80005ce:	4310      	orrs	r0, r2
 80005d0:	0242      	lsls	r2, r0, #9
 80005d2:	0a53      	lsrs	r3, r2, #9
 80005d4:	469c      	mov	ip, r3
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	e7d9      	b.n	800058e <__aeabi_fadd+0xbe>
 80005da:	1bb9      	subs	r1, r7, r6
 80005dc:	2900      	cmp	r1, #0
 80005de:	dd71      	ble.n	80006c4 <__aeabi_fadd+0x1f4>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d03f      	beq.n	8000664 <__aeabi_fadd+0x194>
 80005e4:	2fff      	cmp	r7, #255	; 0xff
 80005e6:	d0ee      	beq.n	80005c6 <__aeabi_fadd+0xf6>
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	04db      	lsls	r3, r3, #19
 80005ec:	431d      	orrs	r5, r3
 80005ee:	2201      	movs	r2, #1
 80005f0:	291b      	cmp	r1, #27
 80005f2:	dc07      	bgt.n	8000604 <__aeabi_fadd+0x134>
 80005f4:	002a      	movs	r2, r5
 80005f6:	2320      	movs	r3, #32
 80005f8:	40ca      	lsrs	r2, r1
 80005fa:	1a59      	subs	r1, r3, r1
 80005fc:	408d      	lsls	r5, r1
 80005fe:	1e6b      	subs	r3, r5, #1
 8000600:	419d      	sbcs	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	4452      	add	r2, sl
 8000606:	0153      	lsls	r3, r2, #5
 8000608:	d553      	bpl.n	80006b2 <__aeabi_fadd+0x1e2>
 800060a:	3701      	adds	r7, #1
 800060c:	2fff      	cmp	r7, #255	; 0xff
 800060e:	d055      	beq.n	80006bc <__aeabi_fadd+0x1ec>
 8000610:	2301      	movs	r3, #1
 8000612:	497b      	ldr	r1, [pc, #492]	; (8000800 <__aeabi_fadd+0x330>)
 8000614:	4013      	ands	r3, r2
 8000616:	0852      	lsrs	r2, r2, #1
 8000618:	400a      	ands	r2, r1
 800061a:	431a      	orrs	r2, r3
 800061c:	e7a5      	b.n	800056a <__aeabi_fadd+0x9a>
 800061e:	2d00      	cmp	r5, #0
 8000620:	d02c      	beq.n	800067c <__aeabi_fadd+0x1ac>
 8000622:	2301      	movs	r3, #1
 8000624:	425b      	negs	r3, r3
 8000626:	469c      	mov	ip, r3
 8000628:	44e1      	add	r9, ip
 800062a:	464b      	mov	r3, r9
 800062c:	2b00      	cmp	r3, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_fadd+0x162>
 8000630:	e0ad      	b.n	800078e <__aeabi_fadd+0x2be>
 8000632:	2fff      	cmp	r7, #255	; 0xff
 8000634:	d000      	beq.n	8000638 <__aeabi_fadd+0x168>
 8000636:	e76e      	b.n	8000516 <__aeabi_fadd+0x46>
 8000638:	e7c5      	b.n	80005c6 <__aeabi_fadd+0xf6>
 800063a:	20fe      	movs	r0, #254	; 0xfe
 800063c:	1c7e      	adds	r6, r7, #1
 800063e:	4230      	tst	r0, r6
 8000640:	d160      	bne.n	8000704 <__aeabi_fadd+0x234>
 8000642:	2f00      	cmp	r7, #0
 8000644:	d000      	beq.n	8000648 <__aeabi_fadd+0x178>
 8000646:	e093      	b.n	8000770 <__aeabi_fadd+0x2a0>
 8000648:	4652      	mov	r2, sl
 800064a:	2a00      	cmp	r2, #0
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x180>
 800064e:	e0b6      	b.n	80007be <__aeabi_fadd+0x2ee>
 8000650:	2d00      	cmp	r5, #0
 8000652:	d09c      	beq.n	800058e <__aeabi_fadd+0xbe>
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	0150      	lsls	r0, r2, #5
 8000658:	d400      	bmi.n	800065c <__aeabi_fadd+0x18c>
 800065a:	e0c3      	b.n	80007e4 <__aeabi_fadd+0x314>
 800065c:	4653      	mov	r3, sl
 800065e:	000c      	movs	r4, r1
 8000660:	1aea      	subs	r2, r5, r3
 8000662:	e782      	b.n	800056a <__aeabi_fadd+0x9a>
 8000664:	2d00      	cmp	r5, #0
 8000666:	d009      	beq.n	800067c <__aeabi_fadd+0x1ac>
 8000668:	3901      	subs	r1, #1
 800066a:	2900      	cmp	r1, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x1a0>
 800066e:	e08b      	b.n	8000788 <__aeabi_fadd+0x2b8>
 8000670:	2fff      	cmp	r7, #255	; 0xff
 8000672:	d1bc      	bne.n	80005ee <__aeabi_fadd+0x11e>
 8000674:	e7a7      	b.n	80005c6 <__aeabi_fadd+0xf6>
 8000676:	000c      	movs	r4, r1
 8000678:	4642      	mov	r2, r8
 800067a:	0037      	movs	r7, r6
 800067c:	2fff      	cmp	r7, #255	; 0xff
 800067e:	d0a2      	beq.n	80005c6 <__aeabi_fadd+0xf6>
 8000680:	0252      	lsls	r2, r2, #9
 8000682:	0a53      	lsrs	r3, r2, #9
 8000684:	469c      	mov	ip, r3
 8000686:	b2fb      	uxtb	r3, r7
 8000688:	e781      	b.n	800058e <__aeabi_fadd+0xbe>
 800068a:	21fe      	movs	r1, #254	; 0xfe
 800068c:	3701      	adds	r7, #1
 800068e:	4239      	tst	r1, r7
 8000690:	d165      	bne.n	800075e <__aeabi_fadd+0x28e>
 8000692:	2b00      	cmp	r3, #0
 8000694:	d17e      	bne.n	8000794 <__aeabi_fadd+0x2c4>
 8000696:	2800      	cmp	r0, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fadd+0x1cc>
 800069a:	e0aa      	b.n	80007f2 <__aeabi_fadd+0x322>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_fadd+0x1d2>
 80006a0:	e775      	b.n	800058e <__aeabi_fadd+0xbe>
 80006a2:	002a      	movs	r2, r5
 80006a4:	4452      	add	r2, sl
 80006a6:	2700      	movs	r7, #0
 80006a8:	0153      	lsls	r3, r2, #5
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_fadd+0x1e2>
 80006ac:	4b55      	ldr	r3, [pc, #340]	; (8000804 <__aeabi_fadd+0x334>)
 80006ae:	3701      	adds	r7, #1
 80006b0:	401a      	ands	r2, r3
 80006b2:	0753      	lsls	r3, r2, #29
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fadd+0x1e8>
 80006b6:	e75a      	b.n	800056e <__aeabi_fadd+0x9e>
 80006b8:	08d2      	lsrs	r2, r2, #3
 80006ba:	e7df      	b.n	800067c <__aeabi_fadd+0x1ac>
 80006bc:	2200      	movs	r2, #0
 80006be:	23ff      	movs	r3, #255	; 0xff
 80006c0:	4694      	mov	ip, r2
 80006c2:	e764      	b.n	800058e <__aeabi_fadd+0xbe>
 80006c4:	2900      	cmp	r1, #0
 80006c6:	d0e0      	beq.n	800068a <__aeabi_fadd+0x1ba>
 80006c8:	1bf3      	subs	r3, r6, r7
 80006ca:	2f00      	cmp	r7, #0
 80006cc:	d03e      	beq.n	800074c <__aeabi_fadd+0x27c>
 80006ce:	2eff      	cmp	r6, #255	; 0xff
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fadd+0x204>
 80006d2:	e777      	b.n	80005c4 <__aeabi_fadd+0xf4>
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0001      	movs	r1, r0
 80006d8:	04d2      	lsls	r2, r2, #19
 80006da:	4311      	orrs	r1, r2
 80006dc:	468a      	mov	sl, r1
 80006de:	2201      	movs	r2, #1
 80006e0:	2b1b      	cmp	r3, #27
 80006e2:	dc08      	bgt.n	80006f6 <__aeabi_fadd+0x226>
 80006e4:	4652      	mov	r2, sl
 80006e6:	2120      	movs	r1, #32
 80006e8:	4650      	mov	r0, sl
 80006ea:	40da      	lsrs	r2, r3
 80006ec:	1acb      	subs	r3, r1, r3
 80006ee:	4098      	lsls	r0, r3
 80006f0:	1e43      	subs	r3, r0, #1
 80006f2:	4198      	sbcs	r0, r3
 80006f4:	4302      	orrs	r2, r0
 80006f6:	0037      	movs	r7, r6
 80006f8:	1952      	adds	r2, r2, r5
 80006fa:	e784      	b.n	8000606 <__aeabi_fadd+0x136>
 80006fc:	4a41      	ldr	r2, [pc, #260]	; (8000804 <__aeabi_fadd+0x334>)
 80006fe:	1a3f      	subs	r7, r7, r0
 8000700:	4032      	ands	r2, r6
 8000702:	e732      	b.n	800056a <__aeabi_fadd+0x9a>
 8000704:	4653      	mov	r3, sl
 8000706:	1b5e      	subs	r6, r3, r5
 8000708:	0173      	lsls	r3, r6, #5
 800070a:	d42d      	bmi.n	8000768 <__aeabi_fadd+0x298>
 800070c:	2e00      	cmp	r6, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_fadd+0x242>
 8000710:	e717      	b.n	8000542 <__aeabi_fadd+0x72>
 8000712:	2200      	movs	r2, #0
 8000714:	2400      	movs	r4, #0
 8000716:	2300      	movs	r3, #0
 8000718:	4694      	mov	ip, r2
 800071a:	e738      	b.n	800058e <__aeabi_fadd+0xbe>
 800071c:	2eff      	cmp	r6, #255	; 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x252>
 8000720:	e74f      	b.n	80005c2 <__aeabi_fadd+0xf2>
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	4650      	mov	r0, sl
 8000726:	04d2      	lsls	r2, r2, #19
 8000728:	4310      	orrs	r0, r2
 800072a:	4682      	mov	sl, r0
 800072c:	2201      	movs	r2, #1
 800072e:	2b1b      	cmp	r3, #27
 8000730:	dc08      	bgt.n	8000744 <__aeabi_fadd+0x274>
 8000732:	4652      	mov	r2, sl
 8000734:	2420      	movs	r4, #32
 8000736:	4650      	mov	r0, sl
 8000738:	40da      	lsrs	r2, r3
 800073a:	1ae3      	subs	r3, r4, r3
 800073c:	4098      	lsls	r0, r3
 800073e:	1e43      	subs	r3, r0, #1
 8000740:	4198      	sbcs	r0, r3
 8000742:	4302      	orrs	r2, r0
 8000744:	000c      	movs	r4, r1
 8000746:	0037      	movs	r7, r6
 8000748:	1aaa      	subs	r2, r5, r2
 800074a:	e6f5      	b.n	8000538 <__aeabi_fadd+0x68>
 800074c:	2800      	cmp	r0, #0
 800074e:	d093      	beq.n	8000678 <__aeabi_fadd+0x1a8>
 8000750:	3b01      	subs	r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d04f      	beq.n	80007f6 <__aeabi_fadd+0x326>
 8000756:	2eff      	cmp	r6, #255	; 0xff
 8000758:	d1c1      	bne.n	80006de <__aeabi_fadd+0x20e>
 800075a:	4642      	mov	r2, r8
 800075c:	e733      	b.n	80005c6 <__aeabi_fadd+0xf6>
 800075e:	2fff      	cmp	r7, #255	; 0xff
 8000760:	d0ac      	beq.n	80006bc <__aeabi_fadd+0x1ec>
 8000762:	4455      	add	r5, sl
 8000764:	086a      	lsrs	r2, r5, #1
 8000766:	e7a4      	b.n	80006b2 <__aeabi_fadd+0x1e2>
 8000768:	4653      	mov	r3, sl
 800076a:	000c      	movs	r4, r1
 800076c:	1aee      	subs	r6, r5, r3
 800076e:	e6e8      	b.n	8000542 <__aeabi_fadd+0x72>
 8000770:	4653      	mov	r3, sl
 8000772:	2b00      	cmp	r3, #0
 8000774:	d128      	bne.n	80007c8 <__aeabi_fadd+0x2f8>
 8000776:	2d00      	cmp	r5, #0
 8000778:	d000      	beq.n	800077c <__aeabi_fadd+0x2ac>
 800077a:	e722      	b.n	80005c2 <__aeabi_fadd+0xf2>
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	03db      	lsls	r3, r3, #15
 8000780:	469c      	mov	ip, r3
 8000782:	2400      	movs	r4, #0
 8000784:	23ff      	movs	r3, #255	; 0xff
 8000786:	e702      	b.n	800058e <__aeabi_fadd+0xbe>
 8000788:	002a      	movs	r2, r5
 800078a:	4452      	add	r2, sl
 800078c:	e73b      	b.n	8000606 <__aeabi_fadd+0x136>
 800078e:	4653      	mov	r3, sl
 8000790:	1b5a      	subs	r2, r3, r5
 8000792:	e6d1      	b.n	8000538 <__aeabi_fadd+0x68>
 8000794:	2800      	cmp	r0, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x2ca>
 8000798:	e714      	b.n	80005c4 <__aeabi_fadd+0xf4>
 800079a:	2d00      	cmp	r5, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x2d0>
 800079e:	e712      	b.n	80005c6 <__aeabi_fadd+0xf6>
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	03db      	lsls	r3, r3, #15
 80007a4:	421a      	tst	r2, r3
 80007a6:	d100      	bne.n	80007aa <__aeabi_fadd+0x2da>
 80007a8:	e70d      	b.n	80005c6 <__aeabi_fadd+0xf6>
 80007aa:	4641      	mov	r1, r8
 80007ac:	4219      	tst	r1, r3
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0x2e2>
 80007b0:	e709      	b.n	80005c6 <__aeabi_fadd+0xf6>
 80007b2:	4642      	mov	r2, r8
 80007b4:	e707      	b.n	80005c6 <__aeabi_fadd+0xf6>
 80007b6:	000c      	movs	r4, r1
 80007b8:	0037      	movs	r7, r6
 80007ba:	1aaa      	subs	r2, r5, r2
 80007bc:	e6bc      	b.n	8000538 <__aeabi_fadd+0x68>
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d013      	beq.n	80007ea <__aeabi_fadd+0x31a>
 80007c2:	000c      	movs	r4, r1
 80007c4:	46c4      	mov	ip, r8
 80007c6:	e6e2      	b.n	800058e <__aeabi_fadd+0xbe>
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x2fe>
 80007cc:	e6fb      	b.n	80005c6 <__aeabi_fadd+0xf6>
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	03db      	lsls	r3, r3, #15
 80007d2:	421a      	tst	r2, r3
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x308>
 80007d6:	e6f6      	b.n	80005c6 <__aeabi_fadd+0xf6>
 80007d8:	4640      	mov	r0, r8
 80007da:	4218      	tst	r0, r3
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x310>
 80007de:	e6f2      	b.n	80005c6 <__aeabi_fadd+0xf6>
 80007e0:	000c      	movs	r4, r1
 80007e2:	e6ef      	b.n	80005c4 <__aeabi_fadd+0xf4>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d000      	beq.n	80007ea <__aeabi_fadd+0x31a>
 80007e8:	e763      	b.n	80006b2 <__aeabi_fadd+0x1e2>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2400      	movs	r4, #0
 80007ee:	4694      	mov	ip, r2
 80007f0:	e6cd      	b.n	800058e <__aeabi_fadd+0xbe>
 80007f2:	46c4      	mov	ip, r8
 80007f4:	e6cb      	b.n	800058e <__aeabi_fadd+0xbe>
 80007f6:	002a      	movs	r2, r5
 80007f8:	0037      	movs	r7, r6
 80007fa:	4452      	add	r2, sl
 80007fc:	e703      	b.n	8000606 <__aeabi_fadd+0x136>
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	7dffffff 	.word	0x7dffffff
 8000804:	fbffffff 	.word	0xfbffffff

08000808 <__aeabi_fdiv>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	464f      	mov	r7, r9
 800080c:	4646      	mov	r6, r8
 800080e:	46d6      	mov	lr, sl
 8000810:	0245      	lsls	r5, r0, #9
 8000812:	b5c0      	push	{r6, r7, lr}
 8000814:	0047      	lsls	r7, r0, #1
 8000816:	1c0c      	adds	r4, r1, #0
 8000818:	0a6d      	lsrs	r5, r5, #9
 800081a:	0e3f      	lsrs	r7, r7, #24
 800081c:	0fc6      	lsrs	r6, r0, #31
 800081e:	2f00      	cmp	r7, #0
 8000820:	d066      	beq.n	80008f0 <__aeabi_fdiv+0xe8>
 8000822:	2fff      	cmp	r7, #255	; 0xff
 8000824:	d06c      	beq.n	8000900 <__aeabi_fdiv+0xf8>
 8000826:	2300      	movs	r3, #0
 8000828:	00ea      	lsls	r2, r5, #3
 800082a:	2580      	movs	r5, #128	; 0x80
 800082c:	4699      	mov	r9, r3
 800082e:	469a      	mov	sl, r3
 8000830:	04ed      	lsls	r5, r5, #19
 8000832:	4315      	orrs	r5, r2
 8000834:	3f7f      	subs	r7, #127	; 0x7f
 8000836:	0260      	lsls	r0, r4, #9
 8000838:	0061      	lsls	r1, r4, #1
 800083a:	0a43      	lsrs	r3, r0, #9
 800083c:	4698      	mov	r8, r3
 800083e:	0e09      	lsrs	r1, r1, #24
 8000840:	0fe4      	lsrs	r4, r4, #31
 8000842:	2900      	cmp	r1, #0
 8000844:	d048      	beq.n	80008d8 <__aeabi_fdiv+0xd0>
 8000846:	29ff      	cmp	r1, #255	; 0xff
 8000848:	d010      	beq.n	800086c <__aeabi_fdiv+0x64>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	00d8      	lsls	r0, r3, #3
 800084e:	04d2      	lsls	r2, r2, #19
 8000850:	4302      	orrs	r2, r0
 8000852:	4690      	mov	r8, r2
 8000854:	2000      	movs	r0, #0
 8000856:	397f      	subs	r1, #127	; 0x7f
 8000858:	464a      	mov	r2, r9
 800085a:	0033      	movs	r3, r6
 800085c:	1a7f      	subs	r7, r7, r1
 800085e:	4302      	orrs	r2, r0
 8000860:	496c      	ldr	r1, [pc, #432]	; (8000a14 <__aeabi_fdiv+0x20c>)
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	588a      	ldr	r2, [r1, r2]
 8000866:	4063      	eors	r3, r4
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4697      	mov	pc, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d16d      	bne.n	800094c <__aeabi_fdiv+0x144>
 8000870:	2002      	movs	r0, #2
 8000872:	3fff      	subs	r7, #255	; 0xff
 8000874:	e033      	b.n	80008de <__aeabi_fdiv+0xd6>
 8000876:	2300      	movs	r3, #0
 8000878:	4698      	mov	r8, r3
 800087a:	0026      	movs	r6, r4
 800087c:	4645      	mov	r5, r8
 800087e:	4682      	mov	sl, r0
 8000880:	4653      	mov	r3, sl
 8000882:	2b02      	cmp	r3, #2
 8000884:	d100      	bne.n	8000888 <__aeabi_fdiv+0x80>
 8000886:	e07f      	b.n	8000988 <__aeabi_fdiv+0x180>
 8000888:	2b03      	cmp	r3, #3
 800088a:	d100      	bne.n	800088e <__aeabi_fdiv+0x86>
 800088c:	e094      	b.n	80009b8 <__aeabi_fdiv+0x1b0>
 800088e:	2b01      	cmp	r3, #1
 8000890:	d017      	beq.n	80008c2 <__aeabi_fdiv+0xba>
 8000892:	0038      	movs	r0, r7
 8000894:	307f      	adds	r0, #127	; 0x7f
 8000896:	2800      	cmp	r0, #0
 8000898:	dd5f      	ble.n	800095a <__aeabi_fdiv+0x152>
 800089a:	076b      	lsls	r3, r5, #29
 800089c:	d004      	beq.n	80008a8 <__aeabi_fdiv+0xa0>
 800089e:	230f      	movs	r3, #15
 80008a0:	402b      	ands	r3, r5
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fdiv+0xa0>
 80008a6:	3504      	adds	r5, #4
 80008a8:	012b      	lsls	r3, r5, #4
 80008aa:	d503      	bpl.n	80008b4 <__aeabi_fdiv+0xac>
 80008ac:	0038      	movs	r0, r7
 80008ae:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <__aeabi_fdiv+0x210>)
 80008b0:	3080      	adds	r0, #128	; 0x80
 80008b2:	401d      	ands	r5, r3
 80008b4:	28fe      	cmp	r0, #254	; 0xfe
 80008b6:	dc67      	bgt.n	8000988 <__aeabi_fdiv+0x180>
 80008b8:	01ad      	lsls	r5, r5, #6
 80008ba:	0a6d      	lsrs	r5, r5, #9
 80008bc:	b2c0      	uxtb	r0, r0
 80008be:	e002      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 80008c0:	001e      	movs	r6, r3
 80008c2:	2000      	movs	r0, #0
 80008c4:	2500      	movs	r5, #0
 80008c6:	05c0      	lsls	r0, r0, #23
 80008c8:	4328      	orrs	r0, r5
 80008ca:	07f6      	lsls	r6, r6, #31
 80008cc:	4330      	orrs	r0, r6
 80008ce:	bce0      	pop	{r5, r6, r7}
 80008d0:	46ba      	mov	sl, r7
 80008d2:	46b1      	mov	r9, r6
 80008d4:	46a8      	mov	r8, r5
 80008d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d12b      	bne.n	8000934 <__aeabi_fdiv+0x12c>
 80008dc:	2001      	movs	r0, #1
 80008de:	464a      	mov	r2, r9
 80008e0:	0033      	movs	r3, r6
 80008e2:	494e      	ldr	r1, [pc, #312]	; (8000a1c <__aeabi_fdiv+0x214>)
 80008e4:	4302      	orrs	r2, r0
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	588a      	ldr	r2, [r1, r2]
 80008ea:	4063      	eors	r3, r4
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4697      	mov	pc, r2
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d113      	bne.n	800091c <__aeabi_fdiv+0x114>
 80008f4:	2304      	movs	r3, #4
 80008f6:	4699      	mov	r9, r3
 80008f8:	3b03      	subs	r3, #3
 80008fa:	2700      	movs	r7, #0
 80008fc:	469a      	mov	sl, r3
 80008fe:	e79a      	b.n	8000836 <__aeabi_fdiv+0x2e>
 8000900:	2d00      	cmp	r5, #0
 8000902:	d105      	bne.n	8000910 <__aeabi_fdiv+0x108>
 8000904:	2308      	movs	r3, #8
 8000906:	4699      	mov	r9, r3
 8000908:	3b06      	subs	r3, #6
 800090a:	27ff      	movs	r7, #255	; 0xff
 800090c:	469a      	mov	sl, r3
 800090e:	e792      	b.n	8000836 <__aeabi_fdiv+0x2e>
 8000910:	230c      	movs	r3, #12
 8000912:	4699      	mov	r9, r3
 8000914:	3b09      	subs	r3, #9
 8000916:	27ff      	movs	r7, #255	; 0xff
 8000918:	469a      	mov	sl, r3
 800091a:	e78c      	b.n	8000836 <__aeabi_fdiv+0x2e>
 800091c:	0028      	movs	r0, r5
 800091e:	f002 fa85 	bl	8002e2c <__clzsi2>
 8000922:	2776      	movs	r7, #118	; 0x76
 8000924:	1f43      	subs	r3, r0, #5
 8000926:	409d      	lsls	r5, r3
 8000928:	2300      	movs	r3, #0
 800092a:	427f      	negs	r7, r7
 800092c:	4699      	mov	r9, r3
 800092e:	469a      	mov	sl, r3
 8000930:	1a3f      	subs	r7, r7, r0
 8000932:	e780      	b.n	8000836 <__aeabi_fdiv+0x2e>
 8000934:	0018      	movs	r0, r3
 8000936:	f002 fa79 	bl	8002e2c <__clzsi2>
 800093a:	4642      	mov	r2, r8
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	2176      	movs	r1, #118	; 0x76
 8000940:	409a      	lsls	r2, r3
 8000942:	4249      	negs	r1, r1
 8000944:	1a09      	subs	r1, r1, r0
 8000946:	4690      	mov	r8, r2
 8000948:	2000      	movs	r0, #0
 800094a:	e785      	b.n	8000858 <__aeabi_fdiv+0x50>
 800094c:	21ff      	movs	r1, #255	; 0xff
 800094e:	2003      	movs	r0, #3
 8000950:	e782      	b.n	8000858 <__aeabi_fdiv+0x50>
 8000952:	001e      	movs	r6, r3
 8000954:	20ff      	movs	r0, #255	; 0xff
 8000956:	2500      	movs	r5, #0
 8000958:	e7b5      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 800095a:	2301      	movs	r3, #1
 800095c:	1a1b      	subs	r3, r3, r0
 800095e:	2b1b      	cmp	r3, #27
 8000960:	dcaf      	bgt.n	80008c2 <__aeabi_fdiv+0xba>
 8000962:	379e      	adds	r7, #158	; 0x9e
 8000964:	0029      	movs	r1, r5
 8000966:	40bd      	lsls	r5, r7
 8000968:	40d9      	lsrs	r1, r3
 800096a:	1e6a      	subs	r2, r5, #1
 800096c:	4195      	sbcs	r5, r2
 800096e:	430d      	orrs	r5, r1
 8000970:	076b      	lsls	r3, r5, #29
 8000972:	d004      	beq.n	800097e <__aeabi_fdiv+0x176>
 8000974:	230f      	movs	r3, #15
 8000976:	402b      	ands	r3, r5
 8000978:	2b04      	cmp	r3, #4
 800097a:	d000      	beq.n	800097e <__aeabi_fdiv+0x176>
 800097c:	3504      	adds	r5, #4
 800097e:	016b      	lsls	r3, r5, #5
 8000980:	d544      	bpl.n	8000a0c <__aeabi_fdiv+0x204>
 8000982:	2001      	movs	r0, #1
 8000984:	2500      	movs	r5, #0
 8000986:	e79e      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 8000988:	20ff      	movs	r0, #255	; 0xff
 800098a:	2500      	movs	r5, #0
 800098c:	e79b      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 800098e:	2580      	movs	r5, #128	; 0x80
 8000990:	2600      	movs	r6, #0
 8000992:	20ff      	movs	r0, #255	; 0xff
 8000994:	03ed      	lsls	r5, r5, #15
 8000996:	e796      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 8000998:	2300      	movs	r3, #0
 800099a:	4698      	mov	r8, r3
 800099c:	2080      	movs	r0, #128	; 0x80
 800099e:	03c0      	lsls	r0, r0, #15
 80009a0:	4205      	tst	r5, r0
 80009a2:	d009      	beq.n	80009b8 <__aeabi_fdiv+0x1b0>
 80009a4:	4643      	mov	r3, r8
 80009a6:	4203      	tst	r3, r0
 80009a8:	d106      	bne.n	80009b8 <__aeabi_fdiv+0x1b0>
 80009aa:	4645      	mov	r5, r8
 80009ac:	4305      	orrs	r5, r0
 80009ae:	026d      	lsls	r5, r5, #9
 80009b0:	0026      	movs	r6, r4
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	e786      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 80009b8:	2080      	movs	r0, #128	; 0x80
 80009ba:	03c0      	lsls	r0, r0, #15
 80009bc:	4305      	orrs	r5, r0
 80009be:	026d      	lsls	r5, r5, #9
 80009c0:	20ff      	movs	r0, #255	; 0xff
 80009c2:	0a6d      	lsrs	r5, r5, #9
 80009c4:	e77f      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 80009c6:	4641      	mov	r1, r8
 80009c8:	016a      	lsls	r2, r5, #5
 80009ca:	0148      	lsls	r0, r1, #5
 80009cc:	4282      	cmp	r2, r0
 80009ce:	d219      	bcs.n	8000a04 <__aeabi_fdiv+0x1fc>
 80009d0:	211b      	movs	r1, #27
 80009d2:	2500      	movs	r5, #0
 80009d4:	3f01      	subs	r7, #1
 80009d6:	2601      	movs	r6, #1
 80009d8:	0014      	movs	r4, r2
 80009da:	006d      	lsls	r5, r5, #1
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	2c00      	cmp	r4, #0
 80009e0:	db01      	blt.n	80009e6 <__aeabi_fdiv+0x1de>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	d801      	bhi.n	80009ea <__aeabi_fdiv+0x1e2>
 80009e6:	1a12      	subs	r2, r2, r0
 80009e8:	4335      	orrs	r5, r6
 80009ea:	3901      	subs	r1, #1
 80009ec:	2900      	cmp	r1, #0
 80009ee:	d1f3      	bne.n	80009d8 <__aeabi_fdiv+0x1d0>
 80009f0:	1e50      	subs	r0, r2, #1
 80009f2:	4182      	sbcs	r2, r0
 80009f4:	0038      	movs	r0, r7
 80009f6:	307f      	adds	r0, #127	; 0x7f
 80009f8:	001e      	movs	r6, r3
 80009fa:	4315      	orrs	r5, r2
 80009fc:	2800      	cmp	r0, #0
 80009fe:	dd00      	ble.n	8000a02 <__aeabi_fdiv+0x1fa>
 8000a00:	e74b      	b.n	800089a <__aeabi_fdiv+0x92>
 8000a02:	e7aa      	b.n	800095a <__aeabi_fdiv+0x152>
 8000a04:	211a      	movs	r1, #26
 8000a06:	2501      	movs	r5, #1
 8000a08:	1a12      	subs	r2, r2, r0
 8000a0a:	e7e4      	b.n	80009d6 <__aeabi_fdiv+0x1ce>
 8000a0c:	01ad      	lsls	r5, r5, #6
 8000a0e:	2000      	movs	r0, #0
 8000a10:	0a6d      	lsrs	r5, r5, #9
 8000a12:	e758      	b.n	80008c6 <__aeabi_fdiv+0xbe>
 8000a14:	0800e3e0 	.word	0x0800e3e0
 8000a18:	f7ffffff 	.word	0xf7ffffff
 8000a1c:	0800e420 	.word	0x0800e420

08000a20 <__eqsf2>:
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	0042      	lsls	r2, r0, #1
 8000a24:	024e      	lsls	r6, r1, #9
 8000a26:	004c      	lsls	r4, r1, #1
 8000a28:	0245      	lsls	r5, r0, #9
 8000a2a:	0a6d      	lsrs	r5, r5, #9
 8000a2c:	0e12      	lsrs	r2, r2, #24
 8000a2e:	0fc3      	lsrs	r3, r0, #31
 8000a30:	0a76      	lsrs	r6, r6, #9
 8000a32:	0e24      	lsrs	r4, r4, #24
 8000a34:	0fc9      	lsrs	r1, r1, #31
 8000a36:	2aff      	cmp	r2, #255	; 0xff
 8000a38:	d00f      	beq.n	8000a5a <__eqsf2+0x3a>
 8000a3a:	2cff      	cmp	r4, #255	; 0xff
 8000a3c:	d011      	beq.n	8000a62 <__eqsf2+0x42>
 8000a3e:	2001      	movs	r0, #1
 8000a40:	42a2      	cmp	r2, r4
 8000a42:	d000      	beq.n	8000a46 <__eqsf2+0x26>
 8000a44:	bd70      	pop	{r4, r5, r6, pc}
 8000a46:	42b5      	cmp	r5, r6
 8000a48:	d1fc      	bne.n	8000a44 <__eqsf2+0x24>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d00d      	beq.n	8000a6a <__eqsf2+0x4a>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d1f8      	bne.n	8000a44 <__eqsf2+0x24>
 8000a52:	0028      	movs	r0, r5
 8000a54:	1e45      	subs	r5, r0, #1
 8000a56:	41a8      	sbcs	r0, r5
 8000a58:	e7f4      	b.n	8000a44 <__eqsf2+0x24>
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d1f1      	bne.n	8000a44 <__eqsf2+0x24>
 8000a60:	e7eb      	b.n	8000a3a <__eqsf2+0x1a>
 8000a62:	2001      	movs	r0, #1
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d1ed      	bne.n	8000a44 <__eqsf2+0x24>
 8000a68:	e7e9      	b.n	8000a3e <__eqsf2+0x1e>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	e7ea      	b.n	8000a44 <__eqsf2+0x24>
 8000a6e:	46c0      	nop			; (mov r8, r8)

08000a70 <__gesf2>:
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	0042      	lsls	r2, r0, #1
 8000a74:	0246      	lsls	r6, r0, #9
 8000a76:	024d      	lsls	r5, r1, #9
 8000a78:	004c      	lsls	r4, r1, #1
 8000a7a:	0fc3      	lsrs	r3, r0, #31
 8000a7c:	0a76      	lsrs	r6, r6, #9
 8000a7e:	0e12      	lsrs	r2, r2, #24
 8000a80:	0a6d      	lsrs	r5, r5, #9
 8000a82:	0e24      	lsrs	r4, r4, #24
 8000a84:	0fc8      	lsrs	r0, r1, #31
 8000a86:	2aff      	cmp	r2, #255	; 0xff
 8000a88:	d01f      	beq.n	8000aca <__gesf2+0x5a>
 8000a8a:	2cff      	cmp	r4, #255	; 0xff
 8000a8c:	d010      	beq.n	8000ab0 <__gesf2+0x40>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d11f      	bne.n	8000ad2 <__gesf2+0x62>
 8000a92:	4271      	negs	r1, r6
 8000a94:	4171      	adcs	r1, r6
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d101      	bne.n	8000a9e <__gesf2+0x2e>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d01e      	beq.n	8000adc <__gesf2+0x6c>
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d10e      	bne.n	8000ac0 <__gesf2+0x50>
 8000aa2:	4283      	cmp	r3, r0
 8000aa4:	d01e      	beq.n	8000ae4 <__gesf2+0x74>
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	1e58      	subs	r0, r3, #1
 8000aaa:	4008      	ands	r0, r1
 8000aac:	3801      	subs	r0, #1
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	d126      	bne.n	8000b02 <__gesf2+0x92>
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d1f4      	bne.n	8000aa2 <__gesf2+0x32>
 8000ab8:	4271      	negs	r1, r6
 8000aba:	4171      	adcs	r1, r6
 8000abc:	2900      	cmp	r1, #0
 8000abe:	d0f0      	beq.n	8000aa2 <__gesf2+0x32>
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d1f4      	bne.n	8000aae <__gesf2+0x3e>
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	4240      	negs	r0, r0
 8000ac8:	e7f1      	b.n	8000aae <__gesf2+0x3e>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d119      	bne.n	8000b02 <__gesf2+0x92>
 8000ace:	2cff      	cmp	r4, #255	; 0xff
 8000ad0:	d0ee      	beq.n	8000ab0 <__gesf2+0x40>
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d1e5      	bne.n	8000aa2 <__gesf2+0x32>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d1e3      	bne.n	8000aa2 <__gesf2+0x32>
 8000ada:	e7e4      	b.n	8000aa6 <__gesf2+0x36>
 8000adc:	2000      	movs	r0, #0
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	d0e5      	beq.n	8000aae <__gesf2+0x3e>
 8000ae2:	e7e0      	b.n	8000aa6 <__gesf2+0x36>
 8000ae4:	42a2      	cmp	r2, r4
 8000ae6:	dc05      	bgt.n	8000af4 <__gesf2+0x84>
 8000ae8:	dbea      	blt.n	8000ac0 <__gesf2+0x50>
 8000aea:	42ae      	cmp	r6, r5
 8000aec:	d802      	bhi.n	8000af4 <__gesf2+0x84>
 8000aee:	d3e7      	bcc.n	8000ac0 <__gesf2+0x50>
 8000af0:	2000      	movs	r0, #0
 8000af2:	e7dc      	b.n	8000aae <__gesf2+0x3e>
 8000af4:	4241      	negs	r1, r0
 8000af6:	4141      	adcs	r1, r0
 8000af8:	4248      	negs	r0, r1
 8000afa:	2102      	movs	r1, #2
 8000afc:	4008      	ands	r0, r1
 8000afe:	3801      	subs	r0, #1
 8000b00:	e7d5      	b.n	8000aae <__gesf2+0x3e>
 8000b02:	2002      	movs	r0, #2
 8000b04:	4240      	negs	r0, r0
 8000b06:	e7d2      	b.n	8000aae <__gesf2+0x3e>

08000b08 <__lesf2>:
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	0042      	lsls	r2, r0, #1
 8000b0c:	0246      	lsls	r6, r0, #9
 8000b0e:	024d      	lsls	r5, r1, #9
 8000b10:	004c      	lsls	r4, r1, #1
 8000b12:	0fc3      	lsrs	r3, r0, #31
 8000b14:	0a76      	lsrs	r6, r6, #9
 8000b16:	0e12      	lsrs	r2, r2, #24
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e24      	lsrs	r4, r4, #24
 8000b1c:	0fc8      	lsrs	r0, r1, #31
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d00d      	beq.n	8000b3e <__lesf2+0x36>
 8000b22:	2cff      	cmp	r4, #255	; 0xff
 8000b24:	d00f      	beq.n	8000b46 <__lesf2+0x3e>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d123      	bne.n	8000b72 <__lesf2+0x6a>
 8000b2a:	4271      	negs	r1, r6
 8000b2c:	4171      	adcs	r1, r6
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d10f      	bne.n	8000b52 <__lesf2+0x4a>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d10d      	bne.n	8000b52 <__lesf2+0x4a>
 8000b36:	2000      	movs	r0, #0
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d014      	beq.n	8000b66 <__lesf2+0x5e>
 8000b3c:	e00d      	b.n	8000b5a <__lesf2+0x52>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	d110      	bne.n	8000b64 <__lesf2+0x5c>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d115      	bne.n	8000b72 <__lesf2+0x6a>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d10c      	bne.n	8000b64 <__lesf2+0x5c>
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d103      	bne.n	8000b56 <__lesf2+0x4e>
 8000b4e:	4271      	negs	r1, r6
 8000b50:	4171      	adcs	r1, r6
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d108      	bne.n	8000b68 <__lesf2+0x60>
 8000b56:	4283      	cmp	r3, r0
 8000b58:	d010      	beq.n	8000b7c <__lesf2+0x74>
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	1e58      	subs	r0, r3, #1
 8000b5e:	4008      	ands	r0, r1
 8000b60:	3801      	subs	r0, #1
 8000b62:	e000      	b.n	8000b66 <__lesf2+0x5e>
 8000b64:	2002      	movs	r0, #2
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d1fc      	bne.n	8000b66 <__lesf2+0x5e>
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	4240      	negs	r0, r0
 8000b70:	e7f9      	b.n	8000b66 <__lesf2+0x5e>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d1ef      	bne.n	8000b56 <__lesf2+0x4e>
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d1ed      	bne.n	8000b56 <__lesf2+0x4e>
 8000b7a:	e7ee      	b.n	8000b5a <__lesf2+0x52>
 8000b7c:	42a2      	cmp	r2, r4
 8000b7e:	dc05      	bgt.n	8000b8c <__lesf2+0x84>
 8000b80:	dbf2      	blt.n	8000b68 <__lesf2+0x60>
 8000b82:	42ae      	cmp	r6, r5
 8000b84:	d802      	bhi.n	8000b8c <__lesf2+0x84>
 8000b86:	d3ef      	bcc.n	8000b68 <__lesf2+0x60>
 8000b88:	2000      	movs	r0, #0
 8000b8a:	e7ec      	b.n	8000b66 <__lesf2+0x5e>
 8000b8c:	4241      	negs	r1, r0
 8000b8e:	4141      	adcs	r1, r0
 8000b90:	4248      	negs	r0, r1
 8000b92:	2102      	movs	r1, #2
 8000b94:	4008      	ands	r0, r1
 8000b96:	3801      	subs	r0, #1
 8000b98:	e7e5      	b.n	8000b66 <__lesf2+0x5e>
 8000b9a:	46c0      	nop			; (mov r8, r8)

08000b9c <__aeabi_fmul>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	4657      	mov	r7, sl
 8000ba0:	464e      	mov	r6, r9
 8000ba2:	4645      	mov	r5, r8
 8000ba4:	46de      	mov	lr, fp
 8000ba6:	0244      	lsls	r4, r0, #9
 8000ba8:	b5e0      	push	{r5, r6, r7, lr}
 8000baa:	0045      	lsls	r5, r0, #1
 8000bac:	1c0f      	adds	r7, r1, #0
 8000bae:	0a64      	lsrs	r4, r4, #9
 8000bb0:	0e2d      	lsrs	r5, r5, #24
 8000bb2:	0fc6      	lsrs	r6, r0, #31
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d047      	beq.n	8000c48 <__aeabi_fmul+0xac>
 8000bb8:	2dff      	cmp	r5, #255	; 0xff
 8000bba:	d04d      	beq.n	8000c58 <__aeabi_fmul+0xbc>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2080      	movs	r0, #128	; 0x80
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	469b      	mov	fp, r3
 8000bc4:	00e4      	lsls	r4, r4, #3
 8000bc6:	04c0      	lsls	r0, r0, #19
 8000bc8:	4304      	orrs	r4, r0
 8000bca:	3d7f      	subs	r5, #127	; 0x7f
 8000bcc:	0278      	lsls	r0, r7, #9
 8000bce:	0a43      	lsrs	r3, r0, #9
 8000bd0:	4699      	mov	r9, r3
 8000bd2:	007a      	lsls	r2, r7, #1
 8000bd4:	0ffb      	lsrs	r3, r7, #31
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	0e12      	lsrs	r2, r2, #24
 8000bda:	464b      	mov	r3, r9
 8000bdc:	d044      	beq.n	8000c68 <__aeabi_fmul+0xcc>
 8000bde:	2aff      	cmp	r2, #255	; 0xff
 8000be0:	d011      	beq.n	8000c06 <__aeabi_fmul+0x6a>
 8000be2:	00d8      	lsls	r0, r3, #3
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	04db      	lsls	r3, r3, #19
 8000be8:	4303      	orrs	r3, r0
 8000bea:	4699      	mov	r9, r3
 8000bec:	2000      	movs	r0, #0
 8000bee:	3a7f      	subs	r2, #127	; 0x7f
 8000bf0:	18ad      	adds	r5, r5, r2
 8000bf2:	4647      	mov	r7, r8
 8000bf4:	4653      	mov	r3, sl
 8000bf6:	4077      	eors	r7, r6
 8000bf8:	1c69      	adds	r1, r5, #1
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d83f      	bhi.n	8000c7e <__aeabi_fmul+0xe2>
 8000bfe:	4a72      	ldr	r2, [pc, #456]	; (8000dc8 <__aeabi_fmul+0x22c>)
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	58d3      	ldr	r3, [r2, r3]
 8000c04:	469f      	mov	pc, r3
 8000c06:	35ff      	adds	r5, #255	; 0xff
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fmul+0x72>
 8000c0c:	e079      	b.n	8000d02 <__aeabi_fmul+0x166>
 8000c0e:	4652      	mov	r2, sl
 8000c10:	2302      	movs	r3, #2
 8000c12:	431a      	orrs	r2, r3
 8000c14:	4692      	mov	sl, r2
 8000c16:	2002      	movs	r0, #2
 8000c18:	e7eb      	b.n	8000bf2 <__aeabi_fmul+0x56>
 8000c1a:	4647      	mov	r7, r8
 8000c1c:	464c      	mov	r4, r9
 8000c1e:	4683      	mov	fp, r0
 8000c20:	465b      	mov	r3, fp
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d028      	beq.n	8000c78 <__aeabi_fmul+0xdc>
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x90>
 8000c2a:	e0c6      	b.n	8000dba <__aeabi_fmul+0x21e>
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d14f      	bne.n	8000cd0 <__aeabi_fmul+0x134>
 8000c30:	2000      	movs	r0, #0
 8000c32:	2400      	movs	r4, #0
 8000c34:	05c0      	lsls	r0, r0, #23
 8000c36:	07ff      	lsls	r7, r7, #31
 8000c38:	4320      	orrs	r0, r4
 8000c3a:	4338      	orrs	r0, r7
 8000c3c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c3e:	46bb      	mov	fp, r7
 8000c40:	46b2      	mov	sl, r6
 8000c42:	46a9      	mov	r9, r5
 8000c44:	46a0      	mov	r8, r4
 8000c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c48:	2c00      	cmp	r4, #0
 8000c4a:	d171      	bne.n	8000d30 <__aeabi_fmul+0x194>
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	469a      	mov	sl, r3
 8000c50:	3b03      	subs	r3, #3
 8000c52:	2500      	movs	r5, #0
 8000c54:	469b      	mov	fp, r3
 8000c56:	e7b9      	b.n	8000bcc <__aeabi_fmul+0x30>
 8000c58:	2c00      	cmp	r4, #0
 8000c5a:	d163      	bne.n	8000d24 <__aeabi_fmul+0x188>
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	469a      	mov	sl, r3
 8000c60:	3b06      	subs	r3, #6
 8000c62:	25ff      	movs	r5, #255	; 0xff
 8000c64:	469b      	mov	fp, r3
 8000c66:	e7b1      	b.n	8000bcc <__aeabi_fmul+0x30>
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d150      	bne.n	8000d0e <__aeabi_fmul+0x172>
 8000c6c:	4652      	mov	r2, sl
 8000c6e:	3301      	adds	r3, #1
 8000c70:	431a      	orrs	r2, r3
 8000c72:	4692      	mov	sl, r2
 8000c74:	2001      	movs	r0, #1
 8000c76:	e7bc      	b.n	8000bf2 <__aeabi_fmul+0x56>
 8000c78:	20ff      	movs	r0, #255	; 0xff
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	e7da      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000c7e:	4648      	mov	r0, r9
 8000c80:	0c26      	lsrs	r6, r4, #16
 8000c82:	0424      	lsls	r4, r4, #16
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	0404      	lsls	r4, r0, #16
 8000c88:	0c24      	lsrs	r4, r4, #16
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	0c1b      	lsrs	r3, r3, #16
 8000c90:	4350      	muls	r0, r2
 8000c92:	4374      	muls	r4, r6
 8000c94:	435a      	muls	r2, r3
 8000c96:	435e      	muls	r6, r3
 8000c98:	1912      	adds	r2, r2, r4
 8000c9a:	0c03      	lsrs	r3, r0, #16
 8000c9c:	189b      	adds	r3, r3, r2
 8000c9e:	429c      	cmp	r4, r3
 8000ca0:	d903      	bls.n	8000caa <__aeabi_fmul+0x10e>
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	0252      	lsls	r2, r2, #9
 8000ca6:	4694      	mov	ip, r2
 8000ca8:	4466      	add	r6, ip
 8000caa:	0400      	lsls	r0, r0, #16
 8000cac:	041a      	lsls	r2, r3, #16
 8000cae:	0c00      	lsrs	r0, r0, #16
 8000cb0:	1812      	adds	r2, r2, r0
 8000cb2:	0194      	lsls	r4, r2, #6
 8000cb4:	1e60      	subs	r0, r4, #1
 8000cb6:	4184      	sbcs	r4, r0
 8000cb8:	0c1b      	lsrs	r3, r3, #16
 8000cba:	0e92      	lsrs	r2, r2, #26
 8000cbc:	199b      	adds	r3, r3, r6
 8000cbe:	4314      	orrs	r4, r2
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	d572      	bpl.n	8000dae <__aeabi_fmul+0x212>
 8000cc8:	2001      	movs	r0, #1
 8000cca:	0863      	lsrs	r3, r4, #1
 8000ccc:	4004      	ands	r4, r0
 8000cce:	431c      	orrs	r4, r3
 8000cd0:	0008      	movs	r0, r1
 8000cd2:	307f      	adds	r0, #127	; 0x7f
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	dd3c      	ble.n	8000d52 <__aeabi_fmul+0x1b6>
 8000cd8:	0763      	lsls	r3, r4, #29
 8000cda:	d004      	beq.n	8000ce6 <__aeabi_fmul+0x14a>
 8000cdc:	230f      	movs	r3, #15
 8000cde:	4023      	ands	r3, r4
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_fmul+0x14a>
 8000ce4:	3404      	adds	r4, #4
 8000ce6:	0123      	lsls	r3, r4, #4
 8000ce8:	d503      	bpl.n	8000cf2 <__aeabi_fmul+0x156>
 8000cea:	3180      	adds	r1, #128	; 0x80
 8000cec:	0008      	movs	r0, r1
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <__aeabi_fmul+0x230>)
 8000cf0:	401c      	ands	r4, r3
 8000cf2:	28fe      	cmp	r0, #254	; 0xfe
 8000cf4:	dcc0      	bgt.n	8000c78 <__aeabi_fmul+0xdc>
 8000cf6:	01a4      	lsls	r4, r4, #6
 8000cf8:	0a64      	lsrs	r4, r4, #9
 8000cfa:	b2c0      	uxtb	r0, r0
 8000cfc:	e79a      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000cfe:	0037      	movs	r7, r6
 8000d00:	e78e      	b.n	8000c20 <__aeabi_fmul+0x84>
 8000d02:	4652      	mov	r2, sl
 8000d04:	2303      	movs	r3, #3
 8000d06:	431a      	orrs	r2, r3
 8000d08:	4692      	mov	sl, r2
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	e771      	b.n	8000bf2 <__aeabi_fmul+0x56>
 8000d0e:	4648      	mov	r0, r9
 8000d10:	f002 f88c 	bl	8002e2c <__clzsi2>
 8000d14:	464a      	mov	r2, r9
 8000d16:	1f43      	subs	r3, r0, #5
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	1a2d      	subs	r5, r5, r0
 8000d1c:	4691      	mov	r9, r2
 8000d1e:	2000      	movs	r0, #0
 8000d20:	3d76      	subs	r5, #118	; 0x76
 8000d22:	e766      	b.n	8000bf2 <__aeabi_fmul+0x56>
 8000d24:	230c      	movs	r3, #12
 8000d26:	469a      	mov	sl, r3
 8000d28:	3b09      	subs	r3, #9
 8000d2a:	25ff      	movs	r5, #255	; 0xff
 8000d2c:	469b      	mov	fp, r3
 8000d2e:	e74d      	b.n	8000bcc <__aeabi_fmul+0x30>
 8000d30:	0020      	movs	r0, r4
 8000d32:	f002 f87b 	bl	8002e2c <__clzsi2>
 8000d36:	2576      	movs	r5, #118	; 0x76
 8000d38:	1f43      	subs	r3, r0, #5
 8000d3a:	409c      	lsls	r4, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	426d      	negs	r5, r5
 8000d40:	469a      	mov	sl, r3
 8000d42:	469b      	mov	fp, r3
 8000d44:	1a2d      	subs	r5, r5, r0
 8000d46:	e741      	b.n	8000bcc <__aeabi_fmul+0x30>
 8000d48:	2480      	movs	r4, #128	; 0x80
 8000d4a:	2700      	movs	r7, #0
 8000d4c:	20ff      	movs	r0, #255	; 0xff
 8000d4e:	03e4      	lsls	r4, r4, #15
 8000d50:	e770      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000d52:	2301      	movs	r3, #1
 8000d54:	1a1b      	subs	r3, r3, r0
 8000d56:	2b1b      	cmp	r3, #27
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x1c0>
 8000d5a:	e769      	b.n	8000c30 <__aeabi_fmul+0x94>
 8000d5c:	319e      	adds	r1, #158	; 0x9e
 8000d5e:	0020      	movs	r0, r4
 8000d60:	408c      	lsls	r4, r1
 8000d62:	40d8      	lsrs	r0, r3
 8000d64:	1e63      	subs	r3, r4, #1
 8000d66:	419c      	sbcs	r4, r3
 8000d68:	4304      	orrs	r4, r0
 8000d6a:	0763      	lsls	r3, r4, #29
 8000d6c:	d004      	beq.n	8000d78 <__aeabi_fmul+0x1dc>
 8000d6e:	230f      	movs	r3, #15
 8000d70:	4023      	ands	r3, r4
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d000      	beq.n	8000d78 <__aeabi_fmul+0x1dc>
 8000d76:	3404      	adds	r4, #4
 8000d78:	0163      	lsls	r3, r4, #5
 8000d7a:	d51a      	bpl.n	8000db2 <__aeabi_fmul+0x216>
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	2400      	movs	r4, #0
 8000d80:	e758      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000d82:	2080      	movs	r0, #128	; 0x80
 8000d84:	03c0      	lsls	r0, r0, #15
 8000d86:	4204      	tst	r4, r0
 8000d88:	d009      	beq.n	8000d9e <__aeabi_fmul+0x202>
 8000d8a:	464b      	mov	r3, r9
 8000d8c:	4203      	tst	r3, r0
 8000d8e:	d106      	bne.n	8000d9e <__aeabi_fmul+0x202>
 8000d90:	464c      	mov	r4, r9
 8000d92:	4304      	orrs	r4, r0
 8000d94:	0264      	lsls	r4, r4, #9
 8000d96:	4647      	mov	r7, r8
 8000d98:	20ff      	movs	r0, #255	; 0xff
 8000d9a:	0a64      	lsrs	r4, r4, #9
 8000d9c:	e74a      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000d9e:	2080      	movs	r0, #128	; 0x80
 8000da0:	03c0      	lsls	r0, r0, #15
 8000da2:	4304      	orrs	r4, r0
 8000da4:	0264      	lsls	r4, r4, #9
 8000da6:	0037      	movs	r7, r6
 8000da8:	20ff      	movs	r0, #255	; 0xff
 8000daa:	0a64      	lsrs	r4, r4, #9
 8000dac:	e742      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000dae:	0029      	movs	r1, r5
 8000db0:	e78e      	b.n	8000cd0 <__aeabi_fmul+0x134>
 8000db2:	01a4      	lsls	r4, r4, #6
 8000db4:	2000      	movs	r0, #0
 8000db6:	0a64      	lsrs	r4, r4, #9
 8000db8:	e73c      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	03c0      	lsls	r0, r0, #15
 8000dbe:	4304      	orrs	r4, r0
 8000dc0:	0264      	lsls	r4, r4, #9
 8000dc2:	20ff      	movs	r0, #255	; 0xff
 8000dc4:	0a64      	lsrs	r4, r4, #9
 8000dc6:	e735      	b.n	8000c34 <__aeabi_fmul+0x98>
 8000dc8:	0800e460 	.word	0x0800e460
 8000dcc:	f7ffffff 	.word	0xf7ffffff

08000dd0 <__aeabi_fsub>:
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	4646      	mov	r6, r8
 8000dd4:	46d6      	mov	lr, sl
 8000dd6:	464f      	mov	r7, r9
 8000dd8:	0243      	lsls	r3, r0, #9
 8000dda:	0a5b      	lsrs	r3, r3, #9
 8000ddc:	00da      	lsls	r2, r3, #3
 8000dde:	4694      	mov	ip, r2
 8000de0:	024a      	lsls	r2, r1, #9
 8000de2:	b5c0      	push	{r6, r7, lr}
 8000de4:	0044      	lsls	r4, r0, #1
 8000de6:	0a56      	lsrs	r6, r2, #9
 8000de8:	1c05      	adds	r5, r0, #0
 8000dea:	46b0      	mov	r8, r6
 8000dec:	0e24      	lsrs	r4, r4, #24
 8000dee:	004e      	lsls	r6, r1, #1
 8000df0:	0992      	lsrs	r2, r2, #6
 8000df2:	001f      	movs	r7, r3
 8000df4:	0020      	movs	r0, r4
 8000df6:	4692      	mov	sl, r2
 8000df8:	0fed      	lsrs	r5, r5, #31
 8000dfa:	0e36      	lsrs	r6, r6, #24
 8000dfc:	0fc9      	lsrs	r1, r1, #31
 8000dfe:	2eff      	cmp	r6, #255	; 0xff
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0x34>
 8000e02:	e07f      	b.n	8000f04 <__aeabi_fsub+0x134>
 8000e04:	2201      	movs	r2, #1
 8000e06:	4051      	eors	r1, r2
 8000e08:	428d      	cmp	r5, r1
 8000e0a:	d051      	beq.n	8000eb0 <__aeabi_fsub+0xe0>
 8000e0c:	1ba2      	subs	r2, r4, r6
 8000e0e:	4691      	mov	r9, r2
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_fsub+0x46>
 8000e14:	e07e      	b.n	8000f14 <__aeabi_fsub+0x144>
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_fsub+0x4c>
 8000e1a:	e099      	b.n	8000f50 <__aeabi_fsub+0x180>
 8000e1c:	2cff      	cmp	r4, #255	; 0xff
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x52>
 8000e20:	e08c      	b.n	8000f3c <__aeabi_fsub+0x16c>
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	4652      	mov	r2, sl
 8000e26:	04db      	lsls	r3, r3, #19
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	4692      	mov	sl, r2
 8000e2c:	464a      	mov	r2, r9
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2a1b      	cmp	r2, #27
 8000e32:	dc08      	bgt.n	8000e46 <__aeabi_fsub+0x76>
 8000e34:	4653      	mov	r3, sl
 8000e36:	2120      	movs	r1, #32
 8000e38:	40d3      	lsrs	r3, r2
 8000e3a:	1a89      	subs	r1, r1, r2
 8000e3c:	4652      	mov	r2, sl
 8000e3e:	408a      	lsls	r2, r1
 8000e40:	1e51      	subs	r1, r2, #1
 8000e42:	418a      	sbcs	r2, r1
 8000e44:	4313      	orrs	r3, r2
 8000e46:	4662      	mov	r2, ip
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	015a      	lsls	r2, r3, #5
 8000e4c:	d400      	bmi.n	8000e50 <__aeabi_fsub+0x80>
 8000e4e:	e0f3      	b.n	8001038 <__aeabi_fsub+0x268>
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	099e      	lsrs	r6, r3, #6
 8000e54:	0030      	movs	r0, r6
 8000e56:	f001 ffe9 	bl	8002e2c <__clzsi2>
 8000e5a:	3805      	subs	r0, #5
 8000e5c:	4086      	lsls	r6, r0
 8000e5e:	4284      	cmp	r4, r0
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_fsub+0x94>
 8000e62:	e0f7      	b.n	8001054 <__aeabi_fsub+0x284>
 8000e64:	0032      	movs	r2, r6
 8000e66:	1b04      	subs	r4, r0, r4
 8000e68:	2020      	movs	r0, #32
 8000e6a:	3401      	adds	r4, #1
 8000e6c:	40e2      	lsrs	r2, r4
 8000e6e:	1b04      	subs	r4, r0, r4
 8000e70:	40a6      	lsls	r6, r4
 8000e72:	0033      	movs	r3, r6
 8000e74:	1e5e      	subs	r6, r3, #1
 8000e76:	41b3      	sbcs	r3, r6
 8000e78:	2400      	movs	r4, #0
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	075a      	lsls	r2, r3, #29
 8000e7e:	d004      	beq.n	8000e8a <__aeabi_fsub+0xba>
 8000e80:	220f      	movs	r2, #15
 8000e82:	401a      	ands	r2, r3
 8000e84:	2a04      	cmp	r2, #4
 8000e86:	d000      	beq.n	8000e8a <__aeabi_fsub+0xba>
 8000e88:	3304      	adds	r3, #4
 8000e8a:	015a      	lsls	r2, r3, #5
 8000e8c:	d400      	bmi.n	8000e90 <__aeabi_fsub+0xc0>
 8000e8e:	e0d6      	b.n	800103e <__aeabi_fsub+0x26e>
 8000e90:	1c62      	adds	r2, r4, #1
 8000e92:	2cfe      	cmp	r4, #254	; 0xfe
 8000e94:	d100      	bne.n	8000e98 <__aeabi_fsub+0xc8>
 8000e96:	e0da      	b.n	800104e <__aeabi_fsub+0x27e>
 8000e98:	019b      	lsls	r3, r3, #6
 8000e9a:	0a5f      	lsrs	r7, r3, #9
 8000e9c:	b2d0      	uxtb	r0, r2
 8000e9e:	05c0      	lsls	r0, r0, #23
 8000ea0:	4338      	orrs	r0, r7
 8000ea2:	07ed      	lsls	r5, r5, #31
 8000ea4:	4328      	orrs	r0, r5
 8000ea6:	bce0      	pop	{r5, r6, r7}
 8000ea8:	46ba      	mov	sl, r7
 8000eaa:	46b1      	mov	r9, r6
 8000eac:	46a8      	mov	r8, r5
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	1ba2      	subs	r2, r4, r6
 8000eb2:	4691      	mov	r9, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	dd63      	ble.n	8000f80 <__aeabi_fsub+0x1b0>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0xee>
 8000ebc:	e099      	b.n	8000ff2 <__aeabi_fsub+0x222>
 8000ebe:	2cff      	cmp	r4, #255	; 0xff
 8000ec0:	d03c      	beq.n	8000f3c <__aeabi_fsub+0x16c>
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	4652      	mov	r2, sl
 8000ec6:	04db      	lsls	r3, r3, #19
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	4692      	mov	sl, r2
 8000ecc:	464a      	mov	r2, r9
 8000ece:	2301      	movs	r3, #1
 8000ed0:	2a1b      	cmp	r2, #27
 8000ed2:	dc08      	bgt.n	8000ee6 <__aeabi_fsub+0x116>
 8000ed4:	4653      	mov	r3, sl
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	40d3      	lsrs	r3, r2
 8000eda:	1a89      	subs	r1, r1, r2
 8000edc:	4652      	mov	r2, sl
 8000ede:	408a      	lsls	r2, r1
 8000ee0:	1e51      	subs	r1, r2, #1
 8000ee2:	418a      	sbcs	r2, r1
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	015a      	lsls	r2, r3, #5
 8000eea:	d400      	bmi.n	8000eee <__aeabi_fsub+0x11e>
 8000eec:	e0a4      	b.n	8001038 <__aeabi_fsub+0x268>
 8000eee:	3401      	adds	r4, #1
 8000ef0:	2cff      	cmp	r4, #255	; 0xff
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_fsub+0x126>
 8000ef4:	e0ab      	b.n	800104e <__aeabi_fsub+0x27e>
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4997      	ldr	r1, [pc, #604]	; (8001158 <__aeabi_fsub+0x388>)
 8000efa:	401a      	ands	r2, r3
 8000efc:	085b      	lsrs	r3, r3, #1
 8000efe:	400b      	ands	r3, r1
 8000f00:	4313      	orrs	r3, r2
 8000f02:	e7bb      	b.n	8000e7c <__aeabi_fsub+0xac>
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d032      	beq.n	8000f6e <__aeabi_fsub+0x19e>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d035      	beq.n	8000f78 <__aeabi_fsub+0x1a8>
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	4252      	negs	r2, r2
 8000f10:	4691      	mov	r9, r2
 8000f12:	44a1      	add	r9, r4
 8000f14:	464a      	mov	r2, r9
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d051      	beq.n	8000fbe <__aeabi_fsub+0x1ee>
 8000f1a:	1b30      	subs	r0, r6, r4
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x152>
 8000f20:	e09c      	b.n	800105c <__aeabi_fsub+0x28c>
 8000f22:	4663      	mov	r3, ip
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fsub+0x15a>
 8000f28:	e0df      	b.n	80010ea <__aeabi_fsub+0x31a>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x162>
 8000f30:	e0f7      	b.n	8001122 <__aeabi_fsub+0x352>
 8000f32:	2eff      	cmp	r6, #255	; 0xff
 8000f34:	d000      	beq.n	8000f38 <__aeabi_fsub+0x168>
 8000f36:	e099      	b.n	800106c <__aeabi_fsub+0x29c>
 8000f38:	000d      	movs	r5, r1
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x172>
 8000f40:	e085      	b.n	800104e <__aeabi_fsub+0x27e>
 8000f42:	2780      	movs	r7, #128	; 0x80
 8000f44:	03ff      	lsls	r7, r7, #15
 8000f46:	431f      	orrs	r7, r3
 8000f48:	027f      	lsls	r7, r7, #9
 8000f4a:	20ff      	movs	r0, #255	; 0xff
 8000f4c:	0a7f      	lsrs	r7, r7, #9
 8000f4e:	e7a6      	b.n	8000e9e <__aeabi_fsub+0xce>
 8000f50:	4652      	mov	r2, sl
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	d074      	beq.n	8001040 <__aeabi_fsub+0x270>
 8000f56:	2201      	movs	r2, #1
 8000f58:	4252      	negs	r2, r2
 8000f5a:	4690      	mov	r8, r2
 8000f5c:	44c1      	add	r9, r8
 8000f5e:	464a      	mov	r2, r9
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x196>
 8000f64:	e0c8      	b.n	80010f8 <__aeabi_fsub+0x328>
 8000f66:	2cff      	cmp	r4, #255	; 0xff
 8000f68:	d000      	beq.n	8000f6c <__aeabi_fsub+0x19c>
 8000f6a:	e75f      	b.n	8000e2c <__aeabi_fsub+0x5c>
 8000f6c:	e7e6      	b.n	8000f3c <__aeabi_fsub+0x16c>
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4051      	eors	r1, r2
 8000f72:	42a9      	cmp	r1, r5
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0x1a8>
 8000f76:	e749      	b.n	8000e0c <__aeabi_fsub+0x3c>
 8000f78:	22ff      	movs	r2, #255	; 0xff
 8000f7a:	4252      	negs	r2, r2
 8000f7c:	4691      	mov	r9, r2
 8000f7e:	44a1      	add	r9, r4
 8000f80:	464a      	mov	r2, r9
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d043      	beq.n	800100e <__aeabi_fsub+0x23e>
 8000f86:	1b31      	subs	r1, r6, r4
 8000f88:	2c00      	cmp	r4, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x1be>
 8000f8c:	e08c      	b.n	80010a8 <__aeabi_fsub+0x2d8>
 8000f8e:	2eff      	cmp	r6, #255	; 0xff
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0x1c4>
 8000f92:	e092      	b.n	80010ba <__aeabi_fsub+0x2ea>
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	4662      	mov	r2, ip
 8000f98:	04db      	lsls	r3, r3, #19
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	291b      	cmp	r1, #27
 8000fa2:	dc09      	bgt.n	8000fb8 <__aeabi_fsub+0x1e8>
 8000fa4:	2020      	movs	r0, #32
 8000fa6:	4663      	mov	r3, ip
 8000fa8:	4662      	mov	r2, ip
 8000faa:	40cb      	lsrs	r3, r1
 8000fac:	1a41      	subs	r1, r0, r1
 8000fae:	408a      	lsls	r2, r1
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	1e48      	subs	r0, r1, #1
 8000fb4:	4181      	sbcs	r1, r0
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	0034      	movs	r4, r6
 8000fba:	4453      	add	r3, sl
 8000fbc:	e794      	b.n	8000ee8 <__aeabi_fsub+0x118>
 8000fbe:	22fe      	movs	r2, #254	; 0xfe
 8000fc0:	1c66      	adds	r6, r4, #1
 8000fc2:	4232      	tst	r2, r6
 8000fc4:	d164      	bne.n	8001090 <__aeabi_fsub+0x2c0>
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_fsub+0x1fc>
 8000fca:	e082      	b.n	80010d2 <__aeabi_fsub+0x302>
 8000fcc:	4663      	mov	r3, ip
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fsub+0x204>
 8000fd2:	e0ab      	b.n	800112c <__aeabi_fsub+0x35c>
 8000fd4:	4653      	mov	r3, sl
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x20c>
 8000fda:	e760      	b.n	8000e9e <__aeabi_fsub+0xce>
 8000fdc:	4663      	mov	r3, ip
 8000fde:	4652      	mov	r2, sl
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	015a      	lsls	r2, r3, #5
 8000fe4:	d400      	bmi.n	8000fe8 <__aeabi_fsub+0x218>
 8000fe6:	e0aa      	b.n	800113e <__aeabi_fsub+0x36e>
 8000fe8:	4663      	mov	r3, ip
 8000fea:	4652      	mov	r2, sl
 8000fec:	000d      	movs	r5, r1
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	e744      	b.n	8000e7c <__aeabi_fsub+0xac>
 8000ff2:	4652      	mov	r2, sl
 8000ff4:	2a00      	cmp	r2, #0
 8000ff6:	d023      	beq.n	8001040 <__aeabi_fsub+0x270>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	4690      	mov	r8, r2
 8000ffe:	44c1      	add	r9, r8
 8001000:	464a      	mov	r2, r9
 8001002:	2a00      	cmp	r2, #0
 8001004:	d075      	beq.n	80010f2 <__aeabi_fsub+0x322>
 8001006:	2cff      	cmp	r4, #255	; 0xff
 8001008:	d000      	beq.n	800100c <__aeabi_fsub+0x23c>
 800100a:	e75f      	b.n	8000ecc <__aeabi_fsub+0xfc>
 800100c:	e796      	b.n	8000f3c <__aeabi_fsub+0x16c>
 800100e:	26fe      	movs	r6, #254	; 0xfe
 8001010:	3401      	adds	r4, #1
 8001012:	4226      	tst	r6, r4
 8001014:	d153      	bne.n	80010be <__aeabi_fsub+0x2ee>
 8001016:	2800      	cmp	r0, #0
 8001018:	d172      	bne.n	8001100 <__aeabi_fsub+0x330>
 800101a:	4663      	mov	r3, ip
 800101c:	2b00      	cmp	r3, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x252>
 8001020:	e093      	b.n	800114a <__aeabi_fsub+0x37a>
 8001022:	4653      	mov	r3, sl
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_fsub+0x25a>
 8001028:	e739      	b.n	8000e9e <__aeabi_fsub+0xce>
 800102a:	4463      	add	r3, ip
 800102c:	2400      	movs	r4, #0
 800102e:	015a      	lsls	r2, r3, #5
 8001030:	d502      	bpl.n	8001038 <__aeabi_fsub+0x268>
 8001032:	4a4a      	ldr	r2, [pc, #296]	; (800115c <__aeabi_fsub+0x38c>)
 8001034:	3401      	adds	r4, #1
 8001036:	4013      	ands	r3, r2
 8001038:	075a      	lsls	r2, r3, #29
 800103a:	d000      	beq.n	800103e <__aeabi_fsub+0x26e>
 800103c:	e720      	b.n	8000e80 <__aeabi_fsub+0xb0>
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	2cff      	cmp	r4, #255	; 0xff
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x276>
 8001044:	e77a      	b.n	8000f3c <__aeabi_fsub+0x16c>
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	0a5f      	lsrs	r7, r3, #9
 800104a:	b2e0      	uxtb	r0, r4
 800104c:	e727      	b.n	8000e9e <__aeabi_fsub+0xce>
 800104e:	20ff      	movs	r0, #255	; 0xff
 8001050:	2700      	movs	r7, #0
 8001052:	e724      	b.n	8000e9e <__aeabi_fsub+0xce>
 8001054:	4b41      	ldr	r3, [pc, #260]	; (800115c <__aeabi_fsub+0x38c>)
 8001056:	1a24      	subs	r4, r4, r0
 8001058:	4033      	ands	r3, r6
 800105a:	e70f      	b.n	8000e7c <__aeabi_fsub+0xac>
 800105c:	2eff      	cmp	r6, #255	; 0xff
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x292>
 8001060:	e76a      	b.n	8000f38 <__aeabi_fsub+0x168>
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	4662      	mov	r2, ip
 8001066:	04db      	lsls	r3, r3, #19
 8001068:	431a      	orrs	r2, r3
 800106a:	4694      	mov	ip, r2
 800106c:	2301      	movs	r3, #1
 800106e:	281b      	cmp	r0, #27
 8001070:	dc09      	bgt.n	8001086 <__aeabi_fsub+0x2b6>
 8001072:	2420      	movs	r4, #32
 8001074:	4663      	mov	r3, ip
 8001076:	4662      	mov	r2, ip
 8001078:	40c3      	lsrs	r3, r0
 800107a:	1a20      	subs	r0, r4, r0
 800107c:	4082      	lsls	r2, r0
 800107e:	0010      	movs	r0, r2
 8001080:	1e44      	subs	r4, r0, #1
 8001082:	41a0      	sbcs	r0, r4
 8001084:	4303      	orrs	r3, r0
 8001086:	4652      	mov	r2, sl
 8001088:	000d      	movs	r5, r1
 800108a:	0034      	movs	r4, r6
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	e6dc      	b.n	8000e4a <__aeabi_fsub+0x7a>
 8001090:	4663      	mov	r3, ip
 8001092:	4652      	mov	r2, sl
 8001094:	1a9e      	subs	r6, r3, r2
 8001096:	0173      	lsls	r3, r6, #5
 8001098:	d417      	bmi.n	80010ca <__aeabi_fsub+0x2fa>
 800109a:	2e00      	cmp	r6, #0
 800109c:	d000      	beq.n	80010a0 <__aeabi_fsub+0x2d0>
 800109e:	e6d9      	b.n	8000e54 <__aeabi_fsub+0x84>
 80010a0:	2500      	movs	r5, #0
 80010a2:	2000      	movs	r0, #0
 80010a4:	2700      	movs	r7, #0
 80010a6:	e6fa      	b.n	8000e9e <__aeabi_fsub+0xce>
 80010a8:	4663      	mov	r3, ip
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d044      	beq.n	8001138 <__aeabi_fsub+0x368>
 80010ae:	3901      	subs	r1, #1
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d04c      	beq.n	800114e <__aeabi_fsub+0x37e>
 80010b4:	2eff      	cmp	r6, #255	; 0xff
 80010b6:	d000      	beq.n	80010ba <__aeabi_fsub+0x2ea>
 80010b8:	e771      	b.n	8000f9e <__aeabi_fsub+0x1ce>
 80010ba:	4643      	mov	r3, r8
 80010bc:	e73e      	b.n	8000f3c <__aeabi_fsub+0x16c>
 80010be:	2cff      	cmp	r4, #255	; 0xff
 80010c0:	d0c5      	beq.n	800104e <__aeabi_fsub+0x27e>
 80010c2:	4652      	mov	r2, sl
 80010c4:	4462      	add	r2, ip
 80010c6:	0853      	lsrs	r3, r2, #1
 80010c8:	e7b6      	b.n	8001038 <__aeabi_fsub+0x268>
 80010ca:	4663      	mov	r3, ip
 80010cc:	000d      	movs	r5, r1
 80010ce:	1ad6      	subs	r6, r2, r3
 80010d0:	e6c0      	b.n	8000e54 <__aeabi_fsub+0x84>
 80010d2:	4662      	mov	r2, ip
 80010d4:	2a00      	cmp	r2, #0
 80010d6:	d116      	bne.n	8001106 <__aeabi_fsub+0x336>
 80010d8:	4653      	mov	r3, sl
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d000      	beq.n	80010e0 <__aeabi_fsub+0x310>
 80010de:	e72b      	b.n	8000f38 <__aeabi_fsub+0x168>
 80010e0:	2780      	movs	r7, #128	; 0x80
 80010e2:	2500      	movs	r5, #0
 80010e4:	20ff      	movs	r0, #255	; 0xff
 80010e6:	03ff      	lsls	r7, r7, #15
 80010e8:	e6d9      	b.n	8000e9e <__aeabi_fsub+0xce>
 80010ea:	000d      	movs	r5, r1
 80010ec:	4643      	mov	r3, r8
 80010ee:	0034      	movs	r4, r6
 80010f0:	e7a6      	b.n	8001040 <__aeabi_fsub+0x270>
 80010f2:	4653      	mov	r3, sl
 80010f4:	4463      	add	r3, ip
 80010f6:	e6f7      	b.n	8000ee8 <__aeabi_fsub+0x118>
 80010f8:	4663      	mov	r3, ip
 80010fa:	4652      	mov	r2, sl
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	e6a4      	b.n	8000e4a <__aeabi_fsub+0x7a>
 8001100:	4662      	mov	r2, ip
 8001102:	2a00      	cmp	r2, #0
 8001104:	d0d9      	beq.n	80010ba <__aeabi_fsub+0x2ea>
 8001106:	4652      	mov	r2, sl
 8001108:	2a00      	cmp	r2, #0
 800110a:	d100      	bne.n	800110e <__aeabi_fsub+0x33e>
 800110c:	e716      	b.n	8000f3c <__aeabi_fsub+0x16c>
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	03d2      	lsls	r2, r2, #15
 8001112:	4213      	tst	r3, r2
 8001114:	d100      	bne.n	8001118 <__aeabi_fsub+0x348>
 8001116:	e711      	b.n	8000f3c <__aeabi_fsub+0x16c>
 8001118:	4640      	mov	r0, r8
 800111a:	4210      	tst	r0, r2
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x350>
 800111e:	e70d      	b.n	8000f3c <__aeabi_fsub+0x16c>
 8001120:	e70a      	b.n	8000f38 <__aeabi_fsub+0x168>
 8001122:	4652      	mov	r2, sl
 8001124:	000d      	movs	r5, r1
 8001126:	0034      	movs	r4, r6
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	e68e      	b.n	8000e4a <__aeabi_fsub+0x7a>
 800112c:	4653      	mov	r3, sl
 800112e:	2b00      	cmp	r3, #0
 8001130:	d008      	beq.n	8001144 <__aeabi_fsub+0x374>
 8001132:	000d      	movs	r5, r1
 8001134:	4647      	mov	r7, r8
 8001136:	e6b2      	b.n	8000e9e <__aeabi_fsub+0xce>
 8001138:	4643      	mov	r3, r8
 800113a:	0034      	movs	r4, r6
 800113c:	e780      	b.n	8001040 <__aeabi_fsub+0x270>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x374>
 8001142:	e779      	b.n	8001038 <__aeabi_fsub+0x268>
 8001144:	2500      	movs	r5, #0
 8001146:	2700      	movs	r7, #0
 8001148:	e6a9      	b.n	8000e9e <__aeabi_fsub+0xce>
 800114a:	4647      	mov	r7, r8
 800114c:	e6a7      	b.n	8000e9e <__aeabi_fsub+0xce>
 800114e:	4653      	mov	r3, sl
 8001150:	0034      	movs	r4, r6
 8001152:	4463      	add	r3, ip
 8001154:	e6c8      	b.n	8000ee8 <__aeabi_fsub+0x118>
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	7dffffff 	.word	0x7dffffff
 800115c:	fbffffff 	.word	0xfbffffff

08001160 <__aeabi_f2iz>:
 8001160:	0241      	lsls	r1, r0, #9
 8001162:	0042      	lsls	r2, r0, #1
 8001164:	0fc3      	lsrs	r3, r0, #31
 8001166:	0a49      	lsrs	r1, r1, #9
 8001168:	2000      	movs	r0, #0
 800116a:	0e12      	lsrs	r2, r2, #24
 800116c:	2a7e      	cmp	r2, #126	; 0x7e
 800116e:	d903      	bls.n	8001178 <__aeabi_f2iz+0x18>
 8001170:	2a9d      	cmp	r2, #157	; 0x9d
 8001172:	d902      	bls.n	800117a <__aeabi_f2iz+0x1a>
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <__aeabi_f2iz+0x3c>)
 8001176:	1898      	adds	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	2080      	movs	r0, #128	; 0x80
 800117c:	0400      	lsls	r0, r0, #16
 800117e:	4301      	orrs	r1, r0
 8001180:	2a95      	cmp	r2, #149	; 0x95
 8001182:	dc07      	bgt.n	8001194 <__aeabi_f2iz+0x34>
 8001184:	2096      	movs	r0, #150	; 0x96
 8001186:	1a82      	subs	r2, r0, r2
 8001188:	40d1      	lsrs	r1, r2
 800118a:	4248      	negs	r0, r1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1f3      	bne.n	8001178 <__aeabi_f2iz+0x18>
 8001190:	0008      	movs	r0, r1
 8001192:	e7f1      	b.n	8001178 <__aeabi_f2iz+0x18>
 8001194:	3a96      	subs	r2, #150	; 0x96
 8001196:	4091      	lsls	r1, r2
 8001198:	e7f7      	b.n	800118a <__aeabi_f2iz+0x2a>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	7fffffff 	.word	0x7fffffff

080011a0 <__aeabi_i2f>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	2800      	cmp	r0, #0
 80011a4:	d013      	beq.n	80011ce <__aeabi_i2f+0x2e>
 80011a6:	17c3      	asrs	r3, r0, #31
 80011a8:	18c5      	adds	r5, r0, r3
 80011aa:	405d      	eors	r5, r3
 80011ac:	0fc4      	lsrs	r4, r0, #31
 80011ae:	0028      	movs	r0, r5
 80011b0:	f001 fe3c 	bl	8002e2c <__clzsi2>
 80011b4:	239e      	movs	r3, #158	; 0x9e
 80011b6:	0001      	movs	r1, r0
 80011b8:	1a1b      	subs	r3, r3, r0
 80011ba:	2b96      	cmp	r3, #150	; 0x96
 80011bc:	dc0f      	bgt.n	80011de <__aeabi_i2f+0x3e>
 80011be:	2808      	cmp	r0, #8
 80011c0:	dd01      	ble.n	80011c6 <__aeabi_i2f+0x26>
 80011c2:	3908      	subs	r1, #8
 80011c4:	408d      	lsls	r5, r1
 80011c6:	026d      	lsls	r5, r5, #9
 80011c8:	0a6d      	lsrs	r5, r5, #9
 80011ca:	b2d8      	uxtb	r0, r3
 80011cc:	e002      	b.n	80011d4 <__aeabi_i2f+0x34>
 80011ce:	2400      	movs	r4, #0
 80011d0:	2000      	movs	r0, #0
 80011d2:	2500      	movs	r5, #0
 80011d4:	05c0      	lsls	r0, r0, #23
 80011d6:	4328      	orrs	r0, r5
 80011d8:	07e4      	lsls	r4, r4, #31
 80011da:	4320      	orrs	r0, r4
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	2b99      	cmp	r3, #153	; 0x99
 80011e0:	dd0b      	ble.n	80011fa <__aeabi_i2f+0x5a>
 80011e2:	2205      	movs	r2, #5
 80011e4:	002e      	movs	r6, r5
 80011e6:	1a12      	subs	r2, r2, r0
 80011e8:	40d6      	lsrs	r6, r2
 80011ea:	0002      	movs	r2, r0
 80011ec:	321b      	adds	r2, #27
 80011ee:	4095      	lsls	r5, r2
 80011f0:	0028      	movs	r0, r5
 80011f2:	1e45      	subs	r5, r0, #1
 80011f4:	41a8      	sbcs	r0, r5
 80011f6:	0035      	movs	r5, r6
 80011f8:	4305      	orrs	r5, r0
 80011fa:	2905      	cmp	r1, #5
 80011fc:	dd01      	ble.n	8001202 <__aeabi_i2f+0x62>
 80011fe:	1f4a      	subs	r2, r1, #5
 8001200:	4095      	lsls	r5, r2
 8001202:	002a      	movs	r2, r5
 8001204:	4e08      	ldr	r6, [pc, #32]	; (8001228 <__aeabi_i2f+0x88>)
 8001206:	4032      	ands	r2, r6
 8001208:	0768      	lsls	r0, r5, #29
 800120a:	d009      	beq.n	8001220 <__aeabi_i2f+0x80>
 800120c:	200f      	movs	r0, #15
 800120e:	4028      	ands	r0, r5
 8001210:	2804      	cmp	r0, #4
 8001212:	d005      	beq.n	8001220 <__aeabi_i2f+0x80>
 8001214:	3204      	adds	r2, #4
 8001216:	0150      	lsls	r0, r2, #5
 8001218:	d502      	bpl.n	8001220 <__aeabi_i2f+0x80>
 800121a:	239f      	movs	r3, #159	; 0x9f
 800121c:	4032      	ands	r2, r6
 800121e:	1a5b      	subs	r3, r3, r1
 8001220:	0192      	lsls	r2, r2, #6
 8001222:	0a55      	lsrs	r5, r2, #9
 8001224:	b2d8      	uxtb	r0, r3
 8001226:	e7d5      	b.n	80011d4 <__aeabi_i2f+0x34>
 8001228:	fbffffff 	.word	0xfbffffff

0800122c <__aeabi_ui2f>:
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	1e05      	subs	r5, r0, #0
 8001230:	d00e      	beq.n	8001250 <__aeabi_ui2f+0x24>
 8001232:	f001 fdfb 	bl	8002e2c <__clzsi2>
 8001236:	239e      	movs	r3, #158	; 0x9e
 8001238:	0004      	movs	r4, r0
 800123a:	1a1b      	subs	r3, r3, r0
 800123c:	2b96      	cmp	r3, #150	; 0x96
 800123e:	dc0c      	bgt.n	800125a <__aeabi_ui2f+0x2e>
 8001240:	2808      	cmp	r0, #8
 8001242:	dd01      	ble.n	8001248 <__aeabi_ui2f+0x1c>
 8001244:	3c08      	subs	r4, #8
 8001246:	40a5      	lsls	r5, r4
 8001248:	026d      	lsls	r5, r5, #9
 800124a:	0a6d      	lsrs	r5, r5, #9
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	e001      	b.n	8001254 <__aeabi_ui2f+0x28>
 8001250:	2000      	movs	r0, #0
 8001252:	2500      	movs	r5, #0
 8001254:	05c0      	lsls	r0, r0, #23
 8001256:	4328      	orrs	r0, r5
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	2b99      	cmp	r3, #153	; 0x99
 800125c:	dd09      	ble.n	8001272 <__aeabi_ui2f+0x46>
 800125e:	0002      	movs	r2, r0
 8001260:	0029      	movs	r1, r5
 8001262:	321b      	adds	r2, #27
 8001264:	4091      	lsls	r1, r2
 8001266:	1e4a      	subs	r2, r1, #1
 8001268:	4191      	sbcs	r1, r2
 800126a:	2205      	movs	r2, #5
 800126c:	1a12      	subs	r2, r2, r0
 800126e:	40d5      	lsrs	r5, r2
 8001270:	430d      	orrs	r5, r1
 8001272:	2c05      	cmp	r4, #5
 8001274:	dd01      	ble.n	800127a <__aeabi_ui2f+0x4e>
 8001276:	1f62      	subs	r2, r4, #5
 8001278:	4095      	lsls	r5, r2
 800127a:	0029      	movs	r1, r5
 800127c:	4e08      	ldr	r6, [pc, #32]	; (80012a0 <__aeabi_ui2f+0x74>)
 800127e:	4031      	ands	r1, r6
 8001280:	076a      	lsls	r2, r5, #29
 8001282:	d009      	beq.n	8001298 <__aeabi_ui2f+0x6c>
 8001284:	200f      	movs	r0, #15
 8001286:	4028      	ands	r0, r5
 8001288:	2804      	cmp	r0, #4
 800128a:	d005      	beq.n	8001298 <__aeabi_ui2f+0x6c>
 800128c:	3104      	adds	r1, #4
 800128e:	014a      	lsls	r2, r1, #5
 8001290:	d502      	bpl.n	8001298 <__aeabi_ui2f+0x6c>
 8001292:	239f      	movs	r3, #159	; 0x9f
 8001294:	4031      	ands	r1, r6
 8001296:	1b1b      	subs	r3, r3, r4
 8001298:	0189      	lsls	r1, r1, #6
 800129a:	0a4d      	lsrs	r5, r1, #9
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	e7d9      	b.n	8001254 <__aeabi_ui2f+0x28>
 80012a0:	fbffffff 	.word	0xfbffffff

080012a4 <__aeabi_dadd>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	464f      	mov	r7, r9
 80012a8:	46d6      	mov	lr, sl
 80012aa:	4646      	mov	r6, r8
 80012ac:	000d      	movs	r5, r1
 80012ae:	0001      	movs	r1, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	b5c0      	push	{r6, r7, lr}
 80012b4:	0017      	movs	r7, r2
 80012b6:	032b      	lsls	r3, r5, #12
 80012b8:	0a5a      	lsrs	r2, r3, #9
 80012ba:	0f4b      	lsrs	r3, r1, #29
 80012bc:	4313      	orrs	r3, r2
 80012be:	00ca      	lsls	r2, r1, #3
 80012c0:	4691      	mov	r9, r2
 80012c2:	0302      	lsls	r2, r0, #12
 80012c4:	006e      	lsls	r6, r5, #1
 80012c6:	0041      	lsls	r1, r0, #1
 80012c8:	0a52      	lsrs	r2, r2, #9
 80012ca:	0fec      	lsrs	r4, r5, #31
 80012cc:	0f7d      	lsrs	r5, r7, #29
 80012ce:	4315      	orrs	r5, r2
 80012d0:	0d76      	lsrs	r6, r6, #21
 80012d2:	0d49      	lsrs	r1, r1, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	4682      	mov	sl, r0
 80012d8:	46ac      	mov	ip, r5
 80012da:	00ff      	lsls	r7, r7, #3
 80012dc:	1a72      	subs	r2, r6, r1
 80012de:	4284      	cmp	r4, r0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dadd+0x40>
 80012e2:	e098      	b.n	8001416 <__aeabi_dadd+0x172>
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_dadd+0x46>
 80012e8:	e081      	b.n	80013ee <__aeabi_dadd+0x14a>
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dadd+0x4c>
 80012ee:	e0b6      	b.n	800145e <__aeabi_dadd+0x1ba>
 80012f0:	49c9      	ldr	r1, [pc, #804]	; (8001618 <__aeabi_dadd+0x374>)
 80012f2:	428e      	cmp	r6, r1
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dadd+0x54>
 80012f6:	e172      	b.n	80015de <__aeabi_dadd+0x33a>
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	0028      	movs	r0, r5
 80012fc:	0409      	lsls	r1, r1, #16
 80012fe:	4308      	orrs	r0, r1
 8001300:	4684      	mov	ip, r0
 8001302:	2a38      	cmp	r2, #56	; 0x38
 8001304:	dd00      	ble.n	8001308 <__aeabi_dadd+0x64>
 8001306:	e15e      	b.n	80015c6 <__aeabi_dadd+0x322>
 8001308:	2a1f      	cmp	r2, #31
 800130a:	dd00      	ble.n	800130e <__aeabi_dadd+0x6a>
 800130c:	e1ee      	b.n	80016ec <__aeabi_dadd+0x448>
 800130e:	2020      	movs	r0, #32
 8001310:	0039      	movs	r1, r7
 8001312:	4665      	mov	r5, ip
 8001314:	1a80      	subs	r0, r0, r2
 8001316:	4087      	lsls	r7, r0
 8001318:	40d1      	lsrs	r1, r2
 800131a:	4085      	lsls	r5, r0
 800131c:	430d      	orrs	r5, r1
 800131e:	0039      	movs	r1, r7
 8001320:	1e4f      	subs	r7, r1, #1
 8001322:	41b9      	sbcs	r1, r7
 8001324:	4667      	mov	r7, ip
 8001326:	40d7      	lsrs	r7, r2
 8001328:	4329      	orrs	r1, r5
 800132a:	1bdb      	subs	r3, r3, r7
 800132c:	464a      	mov	r2, r9
 800132e:	1a55      	subs	r5, r2, r1
 8001330:	45a9      	cmp	r9, r5
 8001332:	4189      	sbcs	r1, r1
 8001334:	4249      	negs	r1, r1
 8001336:	1a5b      	subs	r3, r3, r1
 8001338:	4698      	mov	r8, r3
 800133a:	4643      	mov	r3, r8
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	d400      	bmi.n	8001342 <__aeabi_dadd+0x9e>
 8001340:	e0cc      	b.n	80014dc <__aeabi_dadd+0x238>
 8001342:	4643      	mov	r3, r8
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	0a5b      	lsrs	r3, r3, #9
 8001348:	4698      	mov	r8, r3
 800134a:	4643      	mov	r3, r8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0xae>
 8001350:	e12c      	b.n	80015ac <__aeabi_dadd+0x308>
 8001352:	4640      	mov	r0, r8
 8001354:	f001 fd6a 	bl	8002e2c <__clzsi2>
 8001358:	0001      	movs	r1, r0
 800135a:	3908      	subs	r1, #8
 800135c:	2220      	movs	r2, #32
 800135e:	0028      	movs	r0, r5
 8001360:	4643      	mov	r3, r8
 8001362:	1a52      	subs	r2, r2, r1
 8001364:	408b      	lsls	r3, r1
 8001366:	40d0      	lsrs	r0, r2
 8001368:	408d      	lsls	r5, r1
 800136a:	4303      	orrs	r3, r0
 800136c:	428e      	cmp	r6, r1
 800136e:	dd00      	ble.n	8001372 <__aeabi_dadd+0xce>
 8001370:	e117      	b.n	80015a2 <__aeabi_dadd+0x2fe>
 8001372:	1b8e      	subs	r6, r1, r6
 8001374:	1c72      	adds	r2, r6, #1
 8001376:	2a1f      	cmp	r2, #31
 8001378:	dd00      	ble.n	800137c <__aeabi_dadd+0xd8>
 800137a:	e1a7      	b.n	80016cc <__aeabi_dadd+0x428>
 800137c:	2120      	movs	r1, #32
 800137e:	0018      	movs	r0, r3
 8001380:	002e      	movs	r6, r5
 8001382:	1a89      	subs	r1, r1, r2
 8001384:	408d      	lsls	r5, r1
 8001386:	4088      	lsls	r0, r1
 8001388:	40d6      	lsrs	r6, r2
 800138a:	40d3      	lsrs	r3, r2
 800138c:	1e69      	subs	r1, r5, #1
 800138e:	418d      	sbcs	r5, r1
 8001390:	4330      	orrs	r0, r6
 8001392:	4698      	mov	r8, r3
 8001394:	2600      	movs	r6, #0
 8001396:	4305      	orrs	r5, r0
 8001398:	076b      	lsls	r3, r5, #29
 800139a:	d009      	beq.n	80013b0 <__aeabi_dadd+0x10c>
 800139c:	230f      	movs	r3, #15
 800139e:	402b      	ands	r3, r5
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d005      	beq.n	80013b0 <__aeabi_dadd+0x10c>
 80013a4:	1d2b      	adds	r3, r5, #4
 80013a6:	42ab      	cmp	r3, r5
 80013a8:	41ad      	sbcs	r5, r5
 80013aa:	426d      	negs	r5, r5
 80013ac:	44a8      	add	r8, r5
 80013ae:	001d      	movs	r5, r3
 80013b0:	4643      	mov	r3, r8
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	d400      	bmi.n	80013b8 <__aeabi_dadd+0x114>
 80013b6:	e094      	b.n	80014e2 <__aeabi_dadd+0x23e>
 80013b8:	4b97      	ldr	r3, [pc, #604]	; (8001618 <__aeabi_dadd+0x374>)
 80013ba:	1c72      	adds	r2, r6, #1
 80013bc:	429a      	cmp	r2, r3
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x11e>
 80013c0:	e09d      	b.n	80014fe <__aeabi_dadd+0x25a>
 80013c2:	4641      	mov	r1, r8
 80013c4:	4b95      	ldr	r3, [pc, #596]	; (800161c <__aeabi_dadd+0x378>)
 80013c6:	08ed      	lsrs	r5, r5, #3
 80013c8:	4019      	ands	r1, r3
 80013ca:	000b      	movs	r3, r1
 80013cc:	0552      	lsls	r2, r2, #21
 80013ce:	0749      	lsls	r1, r1, #29
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	4329      	orrs	r1, r5
 80013d4:	0b1b      	lsrs	r3, r3, #12
 80013d6:	0d52      	lsrs	r2, r2, #21
 80013d8:	0512      	lsls	r2, r2, #20
 80013da:	4313      	orrs	r3, r2
 80013dc:	07e4      	lsls	r4, r4, #31
 80013de:	4323      	orrs	r3, r4
 80013e0:	0008      	movs	r0, r1
 80013e2:	0019      	movs	r1, r3
 80013e4:	bce0      	pop	{r5, r6, r7}
 80013e6:	46ba      	mov	sl, r7
 80013e8:	46b1      	mov	r9, r6
 80013ea:	46a8      	mov	r8, r5
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d043      	beq.n	800147a <__aeabi_dadd+0x1d6>
 80013f2:	1b8a      	subs	r2, r1, r6
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	d000      	beq.n	80013fa <__aeabi_dadd+0x156>
 80013f8:	e12a      	b.n	8001650 <__aeabi_dadd+0x3ac>
 80013fa:	464c      	mov	r4, r9
 80013fc:	431c      	orrs	r4, r3
 80013fe:	d100      	bne.n	8001402 <__aeabi_dadd+0x15e>
 8001400:	e1d1      	b.n	80017a6 <__aeabi_dadd+0x502>
 8001402:	1e54      	subs	r4, r2, #1
 8001404:	2a01      	cmp	r2, #1
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x166>
 8001408:	e21f      	b.n	800184a <__aeabi_dadd+0x5a6>
 800140a:	4d83      	ldr	r5, [pc, #524]	; (8001618 <__aeabi_dadd+0x374>)
 800140c:	42aa      	cmp	r2, r5
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x16e>
 8001410:	e272      	b.n	80018f8 <__aeabi_dadd+0x654>
 8001412:	0022      	movs	r2, r4
 8001414:	e123      	b.n	800165e <__aeabi_dadd+0x3ba>
 8001416:	2a00      	cmp	r2, #0
 8001418:	dc00      	bgt.n	800141c <__aeabi_dadd+0x178>
 800141a:	e098      	b.n	800154e <__aeabi_dadd+0x2aa>
 800141c:	2900      	cmp	r1, #0
 800141e:	d042      	beq.n	80014a6 <__aeabi_dadd+0x202>
 8001420:	497d      	ldr	r1, [pc, #500]	; (8001618 <__aeabi_dadd+0x374>)
 8001422:	428e      	cmp	r6, r1
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x184>
 8001426:	e0da      	b.n	80015de <__aeabi_dadd+0x33a>
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	0028      	movs	r0, r5
 800142c:	0409      	lsls	r1, r1, #16
 800142e:	4308      	orrs	r0, r1
 8001430:	4684      	mov	ip, r0
 8001432:	2a38      	cmp	r2, #56	; 0x38
 8001434:	dd00      	ble.n	8001438 <__aeabi_dadd+0x194>
 8001436:	e129      	b.n	800168c <__aeabi_dadd+0x3e8>
 8001438:	2a1f      	cmp	r2, #31
 800143a:	dc00      	bgt.n	800143e <__aeabi_dadd+0x19a>
 800143c:	e187      	b.n	800174e <__aeabi_dadd+0x4aa>
 800143e:	0011      	movs	r1, r2
 8001440:	4665      	mov	r5, ip
 8001442:	3920      	subs	r1, #32
 8001444:	40cd      	lsrs	r5, r1
 8001446:	2a20      	cmp	r2, #32
 8001448:	d004      	beq.n	8001454 <__aeabi_dadd+0x1b0>
 800144a:	2040      	movs	r0, #64	; 0x40
 800144c:	4661      	mov	r1, ip
 800144e:	1a82      	subs	r2, r0, r2
 8001450:	4091      	lsls	r1, r2
 8001452:	430f      	orrs	r7, r1
 8001454:	0039      	movs	r1, r7
 8001456:	1e4f      	subs	r7, r1, #1
 8001458:	41b9      	sbcs	r1, r7
 800145a:	430d      	orrs	r5, r1
 800145c:	e11b      	b.n	8001696 <__aeabi_dadd+0x3f2>
 800145e:	0029      	movs	r1, r5
 8001460:	4339      	orrs	r1, r7
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0x1c2>
 8001464:	e0b5      	b.n	80015d2 <__aeabi_dadd+0x32e>
 8001466:	1e51      	subs	r1, r2, #1
 8001468:	2a01      	cmp	r2, #1
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x1ca>
 800146c:	e1ab      	b.n	80017c6 <__aeabi_dadd+0x522>
 800146e:	486a      	ldr	r0, [pc, #424]	; (8001618 <__aeabi_dadd+0x374>)
 8001470:	4282      	cmp	r2, r0
 8001472:	d100      	bne.n	8001476 <__aeabi_dadd+0x1d2>
 8001474:	e1b2      	b.n	80017dc <__aeabi_dadd+0x538>
 8001476:	000a      	movs	r2, r1
 8001478:	e743      	b.n	8001302 <__aeabi_dadd+0x5e>
 800147a:	4969      	ldr	r1, [pc, #420]	; (8001620 <__aeabi_dadd+0x37c>)
 800147c:	1c75      	adds	r5, r6, #1
 800147e:	420d      	tst	r5, r1
 8001480:	d000      	beq.n	8001484 <__aeabi_dadd+0x1e0>
 8001482:	e0cf      	b.n	8001624 <__aeabi_dadd+0x380>
 8001484:	2e00      	cmp	r6, #0
 8001486:	d000      	beq.n	800148a <__aeabi_dadd+0x1e6>
 8001488:	e193      	b.n	80017b2 <__aeabi_dadd+0x50e>
 800148a:	4649      	mov	r1, r9
 800148c:	4319      	orrs	r1, r3
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x1ee>
 8001490:	e1d1      	b.n	8001836 <__aeabi_dadd+0x592>
 8001492:	4661      	mov	r1, ip
 8001494:	4339      	orrs	r1, r7
 8001496:	d000      	beq.n	800149a <__aeabi_dadd+0x1f6>
 8001498:	e1e3      	b.n	8001862 <__aeabi_dadd+0x5be>
 800149a:	4649      	mov	r1, r9
 800149c:	0758      	lsls	r0, r3, #29
 800149e:	08c9      	lsrs	r1, r1, #3
 80014a0:	4301      	orrs	r1, r0
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	e026      	b.n	80014f4 <__aeabi_dadd+0x250>
 80014a6:	0029      	movs	r1, r5
 80014a8:	4339      	orrs	r1, r7
 80014aa:	d100      	bne.n	80014ae <__aeabi_dadd+0x20a>
 80014ac:	e091      	b.n	80015d2 <__aeabi_dadd+0x32e>
 80014ae:	1e51      	subs	r1, r2, #1
 80014b0:	2a01      	cmp	r2, #1
 80014b2:	d005      	beq.n	80014c0 <__aeabi_dadd+0x21c>
 80014b4:	4858      	ldr	r0, [pc, #352]	; (8001618 <__aeabi_dadd+0x374>)
 80014b6:	4282      	cmp	r2, r0
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x218>
 80014ba:	e18f      	b.n	80017dc <__aeabi_dadd+0x538>
 80014bc:	000a      	movs	r2, r1
 80014be:	e7b8      	b.n	8001432 <__aeabi_dadd+0x18e>
 80014c0:	003d      	movs	r5, r7
 80014c2:	444d      	add	r5, r9
 80014c4:	454d      	cmp	r5, r9
 80014c6:	4189      	sbcs	r1, r1
 80014c8:	4463      	add	r3, ip
 80014ca:	4698      	mov	r8, r3
 80014cc:	4249      	negs	r1, r1
 80014ce:	4488      	add	r8, r1
 80014d0:	4643      	mov	r3, r8
 80014d2:	2602      	movs	r6, #2
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	d500      	bpl.n	80014da <__aeabi_dadd+0x236>
 80014d8:	e0eb      	b.n	80016b2 <__aeabi_dadd+0x40e>
 80014da:	3e01      	subs	r6, #1
 80014dc:	076b      	lsls	r3, r5, #29
 80014de:	d000      	beq.n	80014e2 <__aeabi_dadd+0x23e>
 80014e0:	e75c      	b.n	800139c <__aeabi_dadd+0xf8>
 80014e2:	4643      	mov	r3, r8
 80014e4:	08e9      	lsrs	r1, r5, #3
 80014e6:	075a      	lsls	r2, r3, #29
 80014e8:	4311      	orrs	r1, r2
 80014ea:	0032      	movs	r2, r6
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	484a      	ldr	r0, [pc, #296]	; (8001618 <__aeabi_dadd+0x374>)
 80014f0:	4282      	cmp	r2, r0
 80014f2:	d021      	beq.n	8001538 <__aeabi_dadd+0x294>
 80014f4:	031b      	lsls	r3, r3, #12
 80014f6:	0552      	lsls	r2, r2, #21
 80014f8:	0b1b      	lsrs	r3, r3, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	e76c      	b.n	80013d8 <__aeabi_dadd+0x134>
 80014fe:	2300      	movs	r3, #0
 8001500:	2100      	movs	r1, #0
 8001502:	e769      	b.n	80013d8 <__aeabi_dadd+0x134>
 8001504:	002a      	movs	r2, r5
 8001506:	433a      	orrs	r2, r7
 8001508:	d069      	beq.n	80015de <__aeabi_dadd+0x33a>
 800150a:	464a      	mov	r2, r9
 800150c:	0758      	lsls	r0, r3, #29
 800150e:	08d1      	lsrs	r1, r2, #3
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	031b      	lsls	r3, r3, #12
 8001516:	4308      	orrs	r0, r1
 8001518:	421a      	tst	r2, r3
 800151a:	d007      	beq.n	800152c <__aeabi_dadd+0x288>
 800151c:	0029      	movs	r1, r5
 800151e:	08ed      	lsrs	r5, r5, #3
 8001520:	421d      	tst	r5, r3
 8001522:	d103      	bne.n	800152c <__aeabi_dadd+0x288>
 8001524:	002a      	movs	r2, r5
 8001526:	08ff      	lsrs	r7, r7, #3
 8001528:	0748      	lsls	r0, r1, #29
 800152a:	4338      	orrs	r0, r7
 800152c:	0f43      	lsrs	r3, r0, #29
 800152e:	00c1      	lsls	r1, r0, #3
 8001530:	075b      	lsls	r3, r3, #29
 8001532:	08c9      	lsrs	r1, r1, #3
 8001534:	4319      	orrs	r1, r3
 8001536:	0013      	movs	r3, r2
 8001538:	000a      	movs	r2, r1
 800153a:	431a      	orrs	r2, r3
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x29c>
 800153e:	e213      	b.n	8001968 <__aeabi_dadd+0x6c4>
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	0312      	lsls	r2, r2, #12
 8001544:	4313      	orrs	r3, r2
 8001546:	031b      	lsls	r3, r3, #12
 8001548:	4a33      	ldr	r2, [pc, #204]	; (8001618 <__aeabi_dadd+0x374>)
 800154a:	0b1b      	lsrs	r3, r3, #12
 800154c:	e744      	b.n	80013d8 <__aeabi_dadd+0x134>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d04b      	beq.n	80015ea <__aeabi_dadd+0x346>
 8001552:	1b8a      	subs	r2, r1, r6
 8001554:	2e00      	cmp	r6, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x2b6>
 8001558:	e0e7      	b.n	800172a <__aeabi_dadd+0x486>
 800155a:	482f      	ldr	r0, [pc, #188]	; (8001618 <__aeabi_dadd+0x374>)
 800155c:	4281      	cmp	r1, r0
 800155e:	d100      	bne.n	8001562 <__aeabi_dadd+0x2be>
 8001560:	e195      	b.n	800188e <__aeabi_dadd+0x5ea>
 8001562:	2080      	movs	r0, #128	; 0x80
 8001564:	0400      	lsls	r0, r0, #16
 8001566:	4303      	orrs	r3, r0
 8001568:	2a38      	cmp	r2, #56	; 0x38
 800156a:	dd00      	ble.n	800156e <__aeabi_dadd+0x2ca>
 800156c:	e143      	b.n	80017f6 <__aeabi_dadd+0x552>
 800156e:	2a1f      	cmp	r2, #31
 8001570:	dd00      	ble.n	8001574 <__aeabi_dadd+0x2d0>
 8001572:	e1db      	b.n	800192c <__aeabi_dadd+0x688>
 8001574:	2020      	movs	r0, #32
 8001576:	001d      	movs	r5, r3
 8001578:	464e      	mov	r6, r9
 800157a:	1a80      	subs	r0, r0, r2
 800157c:	4085      	lsls	r5, r0
 800157e:	40d6      	lsrs	r6, r2
 8001580:	4335      	orrs	r5, r6
 8001582:	464e      	mov	r6, r9
 8001584:	4086      	lsls	r6, r0
 8001586:	0030      	movs	r0, r6
 8001588:	40d3      	lsrs	r3, r2
 800158a:	1e46      	subs	r6, r0, #1
 800158c:	41b0      	sbcs	r0, r6
 800158e:	449c      	add	ip, r3
 8001590:	4305      	orrs	r5, r0
 8001592:	19ed      	adds	r5, r5, r7
 8001594:	42bd      	cmp	r5, r7
 8001596:	419b      	sbcs	r3, r3
 8001598:	425b      	negs	r3, r3
 800159a:	4463      	add	r3, ip
 800159c:	4698      	mov	r8, r3
 800159e:	000e      	movs	r6, r1
 80015a0:	e07f      	b.n	80016a2 <__aeabi_dadd+0x3fe>
 80015a2:	4a1e      	ldr	r2, [pc, #120]	; (800161c <__aeabi_dadd+0x378>)
 80015a4:	1a76      	subs	r6, r6, r1
 80015a6:	4013      	ands	r3, r2
 80015a8:	4698      	mov	r8, r3
 80015aa:	e6f5      	b.n	8001398 <__aeabi_dadd+0xf4>
 80015ac:	0028      	movs	r0, r5
 80015ae:	f001 fc3d 	bl	8002e2c <__clzsi2>
 80015b2:	0001      	movs	r1, r0
 80015b4:	3118      	adds	r1, #24
 80015b6:	291f      	cmp	r1, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x318>
 80015ba:	e6cf      	b.n	800135c <__aeabi_dadd+0xb8>
 80015bc:	002b      	movs	r3, r5
 80015be:	3808      	subs	r0, #8
 80015c0:	4083      	lsls	r3, r0
 80015c2:	2500      	movs	r5, #0
 80015c4:	e6d2      	b.n	800136c <__aeabi_dadd+0xc8>
 80015c6:	4662      	mov	r2, ip
 80015c8:	433a      	orrs	r2, r7
 80015ca:	0011      	movs	r1, r2
 80015cc:	1e4f      	subs	r7, r1, #1
 80015ce:	41b9      	sbcs	r1, r7
 80015d0:	e6ac      	b.n	800132c <__aeabi_dadd+0x88>
 80015d2:	4649      	mov	r1, r9
 80015d4:	0758      	lsls	r0, r3, #29
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	4301      	orrs	r1, r0
 80015da:	08db      	lsrs	r3, r3, #3
 80015dc:	e787      	b.n	80014ee <__aeabi_dadd+0x24a>
 80015de:	4649      	mov	r1, r9
 80015e0:	075a      	lsls	r2, r3, #29
 80015e2:	08c9      	lsrs	r1, r1, #3
 80015e4:	4311      	orrs	r1, r2
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	e7a6      	b.n	8001538 <__aeabi_dadd+0x294>
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <__aeabi_dadd+0x37c>)
 80015ec:	1c70      	adds	r0, r6, #1
 80015ee:	4208      	tst	r0, r1
 80015f0:	d000      	beq.n	80015f4 <__aeabi_dadd+0x350>
 80015f2:	e0bb      	b.n	800176c <__aeabi_dadd+0x4c8>
 80015f4:	2e00      	cmp	r6, #0
 80015f6:	d000      	beq.n	80015fa <__aeabi_dadd+0x356>
 80015f8:	e114      	b.n	8001824 <__aeabi_dadd+0x580>
 80015fa:	4649      	mov	r1, r9
 80015fc:	4319      	orrs	r1, r3
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x35e>
 8001600:	e175      	b.n	80018ee <__aeabi_dadd+0x64a>
 8001602:	0029      	movs	r1, r5
 8001604:	4339      	orrs	r1, r7
 8001606:	d000      	beq.n	800160a <__aeabi_dadd+0x366>
 8001608:	e17e      	b.n	8001908 <__aeabi_dadd+0x664>
 800160a:	4649      	mov	r1, r9
 800160c:	0758      	lsls	r0, r3, #29
 800160e:	08c9      	lsrs	r1, r1, #3
 8001610:	4301      	orrs	r1, r0
 8001612:	08db      	lsrs	r3, r3, #3
 8001614:	e76e      	b.n	80014f4 <__aeabi_dadd+0x250>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff
 8001620:	000007fe 	.word	0x000007fe
 8001624:	4649      	mov	r1, r9
 8001626:	1bcd      	subs	r5, r1, r7
 8001628:	4661      	mov	r1, ip
 800162a:	1a58      	subs	r0, r3, r1
 800162c:	45a9      	cmp	r9, r5
 800162e:	4189      	sbcs	r1, r1
 8001630:	4249      	negs	r1, r1
 8001632:	4688      	mov	r8, r1
 8001634:	0001      	movs	r1, r0
 8001636:	4640      	mov	r0, r8
 8001638:	1a09      	subs	r1, r1, r0
 800163a:	4688      	mov	r8, r1
 800163c:	0209      	lsls	r1, r1, #8
 800163e:	d500      	bpl.n	8001642 <__aeabi_dadd+0x39e>
 8001640:	e0a6      	b.n	8001790 <__aeabi_dadd+0x4ec>
 8001642:	4641      	mov	r1, r8
 8001644:	4329      	orrs	r1, r5
 8001646:	d000      	beq.n	800164a <__aeabi_dadd+0x3a6>
 8001648:	e67f      	b.n	800134a <__aeabi_dadd+0xa6>
 800164a:	2300      	movs	r3, #0
 800164c:	2400      	movs	r4, #0
 800164e:	e751      	b.n	80014f4 <__aeabi_dadd+0x250>
 8001650:	4cc7      	ldr	r4, [pc, #796]	; (8001970 <__aeabi_dadd+0x6cc>)
 8001652:	42a1      	cmp	r1, r4
 8001654:	d100      	bne.n	8001658 <__aeabi_dadd+0x3b4>
 8001656:	e0c7      	b.n	80017e8 <__aeabi_dadd+0x544>
 8001658:	2480      	movs	r4, #128	; 0x80
 800165a:	0424      	lsls	r4, r4, #16
 800165c:	4323      	orrs	r3, r4
 800165e:	2a38      	cmp	r2, #56	; 0x38
 8001660:	dc54      	bgt.n	800170c <__aeabi_dadd+0x468>
 8001662:	2a1f      	cmp	r2, #31
 8001664:	dd00      	ble.n	8001668 <__aeabi_dadd+0x3c4>
 8001666:	e0cc      	b.n	8001802 <__aeabi_dadd+0x55e>
 8001668:	2420      	movs	r4, #32
 800166a:	4648      	mov	r0, r9
 800166c:	1aa4      	subs	r4, r4, r2
 800166e:	001d      	movs	r5, r3
 8001670:	464e      	mov	r6, r9
 8001672:	40a0      	lsls	r0, r4
 8001674:	40d6      	lsrs	r6, r2
 8001676:	40a5      	lsls	r5, r4
 8001678:	0004      	movs	r4, r0
 800167a:	40d3      	lsrs	r3, r2
 800167c:	4662      	mov	r2, ip
 800167e:	4335      	orrs	r5, r6
 8001680:	1e66      	subs	r6, r4, #1
 8001682:	41b4      	sbcs	r4, r6
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	469c      	mov	ip, r3
 8001688:	4325      	orrs	r5, r4
 800168a:	e044      	b.n	8001716 <__aeabi_dadd+0x472>
 800168c:	4662      	mov	r2, ip
 800168e:	433a      	orrs	r2, r7
 8001690:	0015      	movs	r5, r2
 8001692:	1e6f      	subs	r7, r5, #1
 8001694:	41bd      	sbcs	r5, r7
 8001696:	444d      	add	r5, r9
 8001698:	454d      	cmp	r5, r9
 800169a:	4189      	sbcs	r1, r1
 800169c:	4249      	negs	r1, r1
 800169e:	4688      	mov	r8, r1
 80016a0:	4498      	add	r8, r3
 80016a2:	4643      	mov	r3, r8
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	d400      	bmi.n	80016aa <__aeabi_dadd+0x406>
 80016a8:	e718      	b.n	80014dc <__aeabi_dadd+0x238>
 80016aa:	4bb1      	ldr	r3, [pc, #708]	; (8001970 <__aeabi_dadd+0x6cc>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d049      	beq.n	8001746 <__aeabi_dadd+0x4a2>
 80016b2:	4642      	mov	r2, r8
 80016b4:	4baf      	ldr	r3, [pc, #700]	; (8001974 <__aeabi_dadd+0x6d0>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	401a      	ands	r2, r3
 80016ba:	0013      	movs	r3, r2
 80016bc:	086a      	lsrs	r2, r5, #1
 80016be:	400d      	ands	r5, r1
 80016c0:	4315      	orrs	r5, r2
 80016c2:	07d9      	lsls	r1, r3, #31
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	4698      	mov	r8, r3
 80016c8:	430d      	orrs	r5, r1
 80016ca:	e665      	b.n	8001398 <__aeabi_dadd+0xf4>
 80016cc:	0018      	movs	r0, r3
 80016ce:	3e1f      	subs	r6, #31
 80016d0:	40f0      	lsrs	r0, r6
 80016d2:	2a20      	cmp	r2, #32
 80016d4:	d003      	beq.n	80016de <__aeabi_dadd+0x43a>
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	1a8a      	subs	r2, r1, r2
 80016da:	4093      	lsls	r3, r2
 80016dc:	431d      	orrs	r5, r3
 80016de:	1e69      	subs	r1, r5, #1
 80016e0:	418d      	sbcs	r5, r1
 80016e2:	2300      	movs	r3, #0
 80016e4:	2600      	movs	r6, #0
 80016e6:	4698      	mov	r8, r3
 80016e8:	4305      	orrs	r5, r0
 80016ea:	e6f7      	b.n	80014dc <__aeabi_dadd+0x238>
 80016ec:	0011      	movs	r1, r2
 80016ee:	4665      	mov	r5, ip
 80016f0:	3920      	subs	r1, #32
 80016f2:	40cd      	lsrs	r5, r1
 80016f4:	2a20      	cmp	r2, #32
 80016f6:	d004      	beq.n	8001702 <__aeabi_dadd+0x45e>
 80016f8:	2040      	movs	r0, #64	; 0x40
 80016fa:	4661      	mov	r1, ip
 80016fc:	1a82      	subs	r2, r0, r2
 80016fe:	4091      	lsls	r1, r2
 8001700:	430f      	orrs	r7, r1
 8001702:	0039      	movs	r1, r7
 8001704:	1e4f      	subs	r7, r1, #1
 8001706:	41b9      	sbcs	r1, r7
 8001708:	4329      	orrs	r1, r5
 800170a:	e60f      	b.n	800132c <__aeabi_dadd+0x88>
 800170c:	464a      	mov	r2, r9
 800170e:	4313      	orrs	r3, r2
 8001710:	001d      	movs	r5, r3
 8001712:	1e6b      	subs	r3, r5, #1
 8001714:	419d      	sbcs	r5, r3
 8001716:	1b7d      	subs	r5, r7, r5
 8001718:	42af      	cmp	r7, r5
 800171a:	419b      	sbcs	r3, r3
 800171c:	4662      	mov	r2, ip
 800171e:	425b      	negs	r3, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4698      	mov	r8, r3
 8001724:	4654      	mov	r4, sl
 8001726:	000e      	movs	r6, r1
 8001728:	e607      	b.n	800133a <__aeabi_dadd+0x96>
 800172a:	4648      	mov	r0, r9
 800172c:	4318      	orrs	r0, r3
 800172e:	d100      	bne.n	8001732 <__aeabi_dadd+0x48e>
 8001730:	e0b3      	b.n	800189a <__aeabi_dadd+0x5f6>
 8001732:	1e50      	subs	r0, r2, #1
 8001734:	2a01      	cmp	r2, #1
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x496>
 8001738:	e10d      	b.n	8001956 <__aeabi_dadd+0x6b2>
 800173a:	4d8d      	ldr	r5, [pc, #564]	; (8001970 <__aeabi_dadd+0x6cc>)
 800173c:	42aa      	cmp	r2, r5
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x49e>
 8001740:	e0a5      	b.n	800188e <__aeabi_dadd+0x5ea>
 8001742:	0002      	movs	r2, r0
 8001744:	e710      	b.n	8001568 <__aeabi_dadd+0x2c4>
 8001746:	0032      	movs	r2, r6
 8001748:	2300      	movs	r3, #0
 800174a:	2100      	movs	r1, #0
 800174c:	e644      	b.n	80013d8 <__aeabi_dadd+0x134>
 800174e:	2120      	movs	r1, #32
 8001750:	0038      	movs	r0, r7
 8001752:	1a89      	subs	r1, r1, r2
 8001754:	4665      	mov	r5, ip
 8001756:	408f      	lsls	r7, r1
 8001758:	408d      	lsls	r5, r1
 800175a:	40d0      	lsrs	r0, r2
 800175c:	1e79      	subs	r1, r7, #1
 800175e:	418f      	sbcs	r7, r1
 8001760:	4305      	orrs	r5, r0
 8001762:	433d      	orrs	r5, r7
 8001764:	4667      	mov	r7, ip
 8001766:	40d7      	lsrs	r7, r2
 8001768:	19db      	adds	r3, r3, r7
 800176a:	e794      	b.n	8001696 <__aeabi_dadd+0x3f2>
 800176c:	4a80      	ldr	r2, [pc, #512]	; (8001970 <__aeabi_dadd+0x6cc>)
 800176e:	4290      	cmp	r0, r2
 8001770:	d100      	bne.n	8001774 <__aeabi_dadd+0x4d0>
 8001772:	e0ec      	b.n	800194e <__aeabi_dadd+0x6aa>
 8001774:	0039      	movs	r1, r7
 8001776:	4449      	add	r1, r9
 8001778:	4549      	cmp	r1, r9
 800177a:	4192      	sbcs	r2, r2
 800177c:	4463      	add	r3, ip
 800177e:	4252      	negs	r2, r2
 8001780:	189b      	adds	r3, r3, r2
 8001782:	07dd      	lsls	r5, r3, #31
 8001784:	0849      	lsrs	r1, r1, #1
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	4698      	mov	r8, r3
 800178a:	0006      	movs	r6, r0
 800178c:	430d      	orrs	r5, r1
 800178e:	e6a5      	b.n	80014dc <__aeabi_dadd+0x238>
 8001790:	464a      	mov	r2, r9
 8001792:	1abd      	subs	r5, r7, r2
 8001794:	42af      	cmp	r7, r5
 8001796:	4189      	sbcs	r1, r1
 8001798:	4662      	mov	r2, ip
 800179a:	4249      	negs	r1, r1
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	1a5b      	subs	r3, r3, r1
 80017a0:	4698      	mov	r8, r3
 80017a2:	4654      	mov	r4, sl
 80017a4:	e5d1      	b.n	800134a <__aeabi_dadd+0xa6>
 80017a6:	076c      	lsls	r4, r5, #29
 80017a8:	08f9      	lsrs	r1, r7, #3
 80017aa:	4321      	orrs	r1, r4
 80017ac:	08eb      	lsrs	r3, r5, #3
 80017ae:	0004      	movs	r4, r0
 80017b0:	e69d      	b.n	80014ee <__aeabi_dadd+0x24a>
 80017b2:	464a      	mov	r2, r9
 80017b4:	431a      	orrs	r2, r3
 80017b6:	d175      	bne.n	80018a4 <__aeabi_dadd+0x600>
 80017b8:	4661      	mov	r1, ip
 80017ba:	4339      	orrs	r1, r7
 80017bc:	d114      	bne.n	80017e8 <__aeabi_dadd+0x544>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	2400      	movs	r4, #0
 80017c2:	031b      	lsls	r3, r3, #12
 80017c4:	e6bc      	b.n	8001540 <__aeabi_dadd+0x29c>
 80017c6:	464a      	mov	r2, r9
 80017c8:	1bd5      	subs	r5, r2, r7
 80017ca:	45a9      	cmp	r9, r5
 80017cc:	4189      	sbcs	r1, r1
 80017ce:	4662      	mov	r2, ip
 80017d0:	4249      	negs	r1, r1
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	1a5b      	subs	r3, r3, r1
 80017d6:	4698      	mov	r8, r3
 80017d8:	2601      	movs	r6, #1
 80017da:	e5ae      	b.n	800133a <__aeabi_dadd+0x96>
 80017dc:	464a      	mov	r2, r9
 80017de:	08d1      	lsrs	r1, r2, #3
 80017e0:	075a      	lsls	r2, r3, #29
 80017e2:	4311      	orrs	r1, r2
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	e6a7      	b.n	8001538 <__aeabi_dadd+0x294>
 80017e8:	4663      	mov	r3, ip
 80017ea:	08f9      	lsrs	r1, r7, #3
 80017ec:	075a      	lsls	r2, r3, #29
 80017ee:	4654      	mov	r4, sl
 80017f0:	4311      	orrs	r1, r2
 80017f2:	08db      	lsrs	r3, r3, #3
 80017f4:	e6a0      	b.n	8001538 <__aeabi_dadd+0x294>
 80017f6:	464a      	mov	r2, r9
 80017f8:	4313      	orrs	r3, r2
 80017fa:	001d      	movs	r5, r3
 80017fc:	1e6b      	subs	r3, r5, #1
 80017fe:	419d      	sbcs	r5, r3
 8001800:	e6c7      	b.n	8001592 <__aeabi_dadd+0x2ee>
 8001802:	0014      	movs	r4, r2
 8001804:	001e      	movs	r6, r3
 8001806:	3c20      	subs	r4, #32
 8001808:	40e6      	lsrs	r6, r4
 800180a:	2a20      	cmp	r2, #32
 800180c:	d005      	beq.n	800181a <__aeabi_dadd+0x576>
 800180e:	2440      	movs	r4, #64	; 0x40
 8001810:	1aa2      	subs	r2, r4, r2
 8001812:	4093      	lsls	r3, r2
 8001814:	464a      	mov	r2, r9
 8001816:	431a      	orrs	r2, r3
 8001818:	4691      	mov	r9, r2
 800181a:	464d      	mov	r5, r9
 800181c:	1e6b      	subs	r3, r5, #1
 800181e:	419d      	sbcs	r5, r3
 8001820:	4335      	orrs	r5, r6
 8001822:	e778      	b.n	8001716 <__aeabi_dadd+0x472>
 8001824:	464a      	mov	r2, r9
 8001826:	431a      	orrs	r2, r3
 8001828:	d000      	beq.n	800182c <__aeabi_dadd+0x588>
 800182a:	e66b      	b.n	8001504 <__aeabi_dadd+0x260>
 800182c:	076b      	lsls	r3, r5, #29
 800182e:	08f9      	lsrs	r1, r7, #3
 8001830:	4319      	orrs	r1, r3
 8001832:	08eb      	lsrs	r3, r5, #3
 8001834:	e680      	b.n	8001538 <__aeabi_dadd+0x294>
 8001836:	4661      	mov	r1, ip
 8001838:	4339      	orrs	r1, r7
 800183a:	d054      	beq.n	80018e6 <__aeabi_dadd+0x642>
 800183c:	4663      	mov	r3, ip
 800183e:	08f9      	lsrs	r1, r7, #3
 8001840:	075c      	lsls	r4, r3, #29
 8001842:	4321      	orrs	r1, r4
 8001844:	08db      	lsrs	r3, r3, #3
 8001846:	0004      	movs	r4, r0
 8001848:	e654      	b.n	80014f4 <__aeabi_dadd+0x250>
 800184a:	464a      	mov	r2, r9
 800184c:	1abd      	subs	r5, r7, r2
 800184e:	42af      	cmp	r7, r5
 8001850:	4189      	sbcs	r1, r1
 8001852:	4662      	mov	r2, ip
 8001854:	4249      	negs	r1, r1
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	1a5b      	subs	r3, r3, r1
 800185a:	4698      	mov	r8, r3
 800185c:	0004      	movs	r4, r0
 800185e:	2601      	movs	r6, #1
 8001860:	e56b      	b.n	800133a <__aeabi_dadd+0x96>
 8001862:	464a      	mov	r2, r9
 8001864:	1bd5      	subs	r5, r2, r7
 8001866:	45a9      	cmp	r9, r5
 8001868:	4189      	sbcs	r1, r1
 800186a:	4662      	mov	r2, ip
 800186c:	4249      	negs	r1, r1
 800186e:	1a9a      	subs	r2, r3, r2
 8001870:	1a52      	subs	r2, r2, r1
 8001872:	4690      	mov	r8, r2
 8001874:	0212      	lsls	r2, r2, #8
 8001876:	d532      	bpl.n	80018de <__aeabi_dadd+0x63a>
 8001878:	464a      	mov	r2, r9
 800187a:	1abd      	subs	r5, r7, r2
 800187c:	42af      	cmp	r7, r5
 800187e:	4189      	sbcs	r1, r1
 8001880:	4662      	mov	r2, ip
 8001882:	4249      	negs	r1, r1
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	1a5b      	subs	r3, r3, r1
 8001888:	4698      	mov	r8, r3
 800188a:	0004      	movs	r4, r0
 800188c:	e584      	b.n	8001398 <__aeabi_dadd+0xf4>
 800188e:	4663      	mov	r3, ip
 8001890:	08f9      	lsrs	r1, r7, #3
 8001892:	075a      	lsls	r2, r3, #29
 8001894:	4311      	orrs	r1, r2
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	e64e      	b.n	8001538 <__aeabi_dadd+0x294>
 800189a:	08f9      	lsrs	r1, r7, #3
 800189c:	0768      	lsls	r0, r5, #29
 800189e:	4301      	orrs	r1, r0
 80018a0:	08eb      	lsrs	r3, r5, #3
 80018a2:	e624      	b.n	80014ee <__aeabi_dadd+0x24a>
 80018a4:	4662      	mov	r2, ip
 80018a6:	433a      	orrs	r2, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x608>
 80018aa:	e698      	b.n	80015de <__aeabi_dadd+0x33a>
 80018ac:	464a      	mov	r2, r9
 80018ae:	08d1      	lsrs	r1, r2, #3
 80018b0:	075a      	lsls	r2, r3, #29
 80018b2:	4311      	orrs	r1, r2
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	031b      	lsls	r3, r3, #12
 80018ba:	421a      	tst	r2, r3
 80018bc:	d008      	beq.n	80018d0 <__aeabi_dadd+0x62c>
 80018be:	4660      	mov	r0, ip
 80018c0:	08c5      	lsrs	r5, r0, #3
 80018c2:	421d      	tst	r5, r3
 80018c4:	d104      	bne.n	80018d0 <__aeabi_dadd+0x62c>
 80018c6:	4654      	mov	r4, sl
 80018c8:	002a      	movs	r2, r5
 80018ca:	08f9      	lsrs	r1, r7, #3
 80018cc:	0743      	lsls	r3, r0, #29
 80018ce:	4319      	orrs	r1, r3
 80018d0:	0f4b      	lsrs	r3, r1, #29
 80018d2:	00c9      	lsls	r1, r1, #3
 80018d4:	075b      	lsls	r3, r3, #29
 80018d6:	08c9      	lsrs	r1, r1, #3
 80018d8:	4319      	orrs	r1, r3
 80018da:	0013      	movs	r3, r2
 80018dc:	e62c      	b.n	8001538 <__aeabi_dadd+0x294>
 80018de:	4641      	mov	r1, r8
 80018e0:	4329      	orrs	r1, r5
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dadd+0x642>
 80018e4:	e5fa      	b.n	80014dc <__aeabi_dadd+0x238>
 80018e6:	2300      	movs	r3, #0
 80018e8:	000a      	movs	r2, r1
 80018ea:	2400      	movs	r4, #0
 80018ec:	e602      	b.n	80014f4 <__aeabi_dadd+0x250>
 80018ee:	076b      	lsls	r3, r5, #29
 80018f0:	08f9      	lsrs	r1, r7, #3
 80018f2:	4319      	orrs	r1, r3
 80018f4:	08eb      	lsrs	r3, r5, #3
 80018f6:	e5fd      	b.n	80014f4 <__aeabi_dadd+0x250>
 80018f8:	4663      	mov	r3, ip
 80018fa:	08f9      	lsrs	r1, r7, #3
 80018fc:	075b      	lsls	r3, r3, #29
 80018fe:	4319      	orrs	r1, r3
 8001900:	4663      	mov	r3, ip
 8001902:	0004      	movs	r4, r0
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	e617      	b.n	8001538 <__aeabi_dadd+0x294>
 8001908:	003d      	movs	r5, r7
 800190a:	444d      	add	r5, r9
 800190c:	4463      	add	r3, ip
 800190e:	454d      	cmp	r5, r9
 8001910:	4189      	sbcs	r1, r1
 8001912:	4698      	mov	r8, r3
 8001914:	4249      	negs	r1, r1
 8001916:	4488      	add	r8, r1
 8001918:	4643      	mov	r3, r8
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dadd+0x67c>
 800191e:	e5dd      	b.n	80014dc <__aeabi_dadd+0x238>
 8001920:	4642      	mov	r2, r8
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <__aeabi_dadd+0x6d0>)
 8001924:	2601      	movs	r6, #1
 8001926:	401a      	ands	r2, r3
 8001928:	4690      	mov	r8, r2
 800192a:	e5d7      	b.n	80014dc <__aeabi_dadd+0x238>
 800192c:	0010      	movs	r0, r2
 800192e:	001e      	movs	r6, r3
 8001930:	3820      	subs	r0, #32
 8001932:	40c6      	lsrs	r6, r0
 8001934:	2a20      	cmp	r2, #32
 8001936:	d005      	beq.n	8001944 <__aeabi_dadd+0x6a0>
 8001938:	2040      	movs	r0, #64	; 0x40
 800193a:	1a82      	subs	r2, r0, r2
 800193c:	4093      	lsls	r3, r2
 800193e:	464a      	mov	r2, r9
 8001940:	431a      	orrs	r2, r3
 8001942:	4691      	mov	r9, r2
 8001944:	464d      	mov	r5, r9
 8001946:	1e6b      	subs	r3, r5, #1
 8001948:	419d      	sbcs	r5, r3
 800194a:	4335      	orrs	r5, r6
 800194c:	e621      	b.n	8001592 <__aeabi_dadd+0x2ee>
 800194e:	0002      	movs	r2, r0
 8001950:	2300      	movs	r3, #0
 8001952:	2100      	movs	r1, #0
 8001954:	e540      	b.n	80013d8 <__aeabi_dadd+0x134>
 8001956:	464a      	mov	r2, r9
 8001958:	19d5      	adds	r5, r2, r7
 800195a:	42bd      	cmp	r5, r7
 800195c:	4189      	sbcs	r1, r1
 800195e:	4463      	add	r3, ip
 8001960:	4698      	mov	r8, r3
 8001962:	4249      	negs	r1, r1
 8001964:	4488      	add	r8, r1
 8001966:	e5b3      	b.n	80014d0 <__aeabi_dadd+0x22c>
 8001968:	2100      	movs	r1, #0
 800196a:	4a01      	ldr	r2, [pc, #4]	; (8001970 <__aeabi_dadd+0x6cc>)
 800196c:	000b      	movs	r3, r1
 800196e:	e533      	b.n	80013d8 <__aeabi_dadd+0x134>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff

08001978 <__aeabi_ddiv>:
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	4657      	mov	r7, sl
 800197c:	464e      	mov	r6, r9
 800197e:	4645      	mov	r5, r8
 8001980:	46de      	mov	lr, fp
 8001982:	b5e0      	push	{r5, r6, r7, lr}
 8001984:	4681      	mov	r9, r0
 8001986:	0005      	movs	r5, r0
 8001988:	030c      	lsls	r4, r1, #12
 800198a:	0048      	lsls	r0, r1, #1
 800198c:	4692      	mov	sl, r2
 800198e:	001f      	movs	r7, r3
 8001990:	b085      	sub	sp, #20
 8001992:	0b24      	lsrs	r4, r4, #12
 8001994:	0d40      	lsrs	r0, r0, #21
 8001996:	0fce      	lsrs	r6, r1, #31
 8001998:	2800      	cmp	r0, #0
 800199a:	d059      	beq.n	8001a50 <__aeabi_ddiv+0xd8>
 800199c:	4b87      	ldr	r3, [pc, #540]	; (8001bbc <__aeabi_ddiv+0x244>)
 800199e:	4298      	cmp	r0, r3
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x2c>
 80019a2:	e098      	b.n	8001ad6 <__aeabi_ddiv+0x15e>
 80019a4:	0f6b      	lsrs	r3, r5, #29
 80019a6:	00e4      	lsls	r4, r4, #3
 80019a8:	431c      	orrs	r4, r3
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	4323      	orrs	r3, r4
 80019b0:	4698      	mov	r8, r3
 80019b2:	4b83      	ldr	r3, [pc, #524]	; (8001bc0 <__aeabi_ddiv+0x248>)
 80019b4:	00ed      	lsls	r5, r5, #3
 80019b6:	469b      	mov	fp, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	4699      	mov	r9, r3
 80019bc:	4483      	add	fp, r0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	033c      	lsls	r4, r7, #12
 80019c2:	007b      	lsls	r3, r7, #1
 80019c4:	4650      	mov	r0, sl
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	0fff      	lsrs	r7, r7, #31
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d067      	beq.n	8001aa0 <__aeabi_ddiv+0x128>
 80019d0:	4a7a      	ldr	r2, [pc, #488]	; (8001bbc <__aeabi_ddiv+0x244>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d018      	beq.n	8001a08 <__aeabi_ddiv+0x90>
 80019d6:	497a      	ldr	r1, [pc, #488]	; (8001bc0 <__aeabi_ddiv+0x248>)
 80019d8:	0f42      	lsrs	r2, r0, #29
 80019da:	468c      	mov	ip, r1
 80019dc:	00e4      	lsls	r4, r4, #3
 80019de:	4659      	mov	r1, fp
 80019e0:	4314      	orrs	r4, r2
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	4463      	add	r3, ip
 80019e6:	0412      	lsls	r2, r2, #16
 80019e8:	1acb      	subs	r3, r1, r3
 80019ea:	4314      	orrs	r4, r2
 80019ec:	469b      	mov	fp, r3
 80019ee:	00c2      	lsls	r2, r0, #3
 80019f0:	2000      	movs	r0, #0
 80019f2:	0033      	movs	r3, r6
 80019f4:	407b      	eors	r3, r7
 80019f6:	469a      	mov	sl, r3
 80019f8:	464b      	mov	r3, r9
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	d900      	bls.n	8001a00 <__aeabi_ddiv+0x88>
 80019fe:	e0ef      	b.n	8001be0 <__aeabi_ddiv+0x268>
 8001a00:	4970      	ldr	r1, [pc, #448]	; (8001bc4 <__aeabi_ddiv+0x24c>)
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	58cb      	ldr	r3, [r1, r3]
 8001a06:	469f      	mov	pc, r3
 8001a08:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <__aeabi_ddiv+0x250>)
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	4322      	orrs	r2, r4
 8001a10:	44e3      	add	fp, ip
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	d000      	beq.n	8001a18 <__aeabi_ddiv+0xa0>
 8001a16:	e095      	b.n	8001b44 <__aeabi_ddiv+0x1cc>
 8001a18:	4649      	mov	r1, r9
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	4319      	orrs	r1, r3
 8001a1e:	4689      	mov	r9, r1
 8001a20:	2400      	movs	r4, #0
 8001a22:	2002      	movs	r0, #2
 8001a24:	e7e5      	b.n	80019f2 <__aeabi_ddiv+0x7a>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2400      	movs	r4, #0
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	4652      	mov	r2, sl
 8001a2e:	051b      	lsls	r3, r3, #20
 8001a30:	4323      	orrs	r3, r4
 8001a32:	07d2      	lsls	r2, r2, #31
 8001a34:	4313      	orrs	r3, r2
 8001a36:	0028      	movs	r0, r5
 8001a38:	0019      	movs	r1, r3
 8001a3a:	b005      	add	sp, #20
 8001a3c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a3e:	46bb      	mov	fp, r7
 8001a40:	46b2      	mov	sl, r6
 8001a42:	46a9      	mov	r9, r5
 8001a44:	46a0      	mov	r8, r4
 8001a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a48:	2400      	movs	r4, #0
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <__aeabi_ddiv+0x244>)
 8001a4e:	e7ed      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001a50:	464b      	mov	r3, r9
 8001a52:	4323      	orrs	r3, r4
 8001a54:	4698      	mov	r8, r3
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0xe2>
 8001a58:	e089      	b.n	8001b6e <__aeabi_ddiv+0x1f6>
 8001a5a:	2c00      	cmp	r4, #0
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_ddiv+0xe8>
 8001a5e:	e1e0      	b.n	8001e22 <__aeabi_ddiv+0x4aa>
 8001a60:	0020      	movs	r0, r4
 8001a62:	f001 f9e3 	bl	8002e2c <__clzsi2>
 8001a66:	0001      	movs	r1, r0
 8001a68:	0002      	movs	r2, r0
 8001a6a:	390b      	subs	r1, #11
 8001a6c:	231d      	movs	r3, #29
 8001a6e:	1a5b      	subs	r3, r3, r1
 8001a70:	4649      	mov	r1, r9
 8001a72:	0010      	movs	r0, r2
 8001a74:	40d9      	lsrs	r1, r3
 8001a76:	3808      	subs	r0, #8
 8001a78:	4084      	lsls	r4, r0
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	464d      	mov	r5, r9
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	4698      	mov	r8, r3
 8001a82:	4085      	lsls	r5, r0
 8001a84:	4851      	ldr	r0, [pc, #324]	; (8001bcc <__aeabi_ddiv+0x254>)
 8001a86:	033c      	lsls	r4, r7, #12
 8001a88:	1a83      	subs	r3, r0, r2
 8001a8a:	469b      	mov	fp, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4699      	mov	r9, r3
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	007b      	lsls	r3, r7, #1
 8001a94:	4650      	mov	r0, sl
 8001a96:	0b24      	lsrs	r4, r4, #12
 8001a98:	0d5b      	lsrs	r3, r3, #21
 8001a9a:	0fff      	lsrs	r7, r7, #31
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d197      	bne.n	80019d0 <__aeabi_ddiv+0x58>
 8001aa0:	4652      	mov	r2, sl
 8001aa2:	4322      	orrs	r2, r4
 8001aa4:	d055      	beq.n	8001b52 <__aeabi_ddiv+0x1da>
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_ddiv+0x134>
 8001aaa:	e1ca      	b.n	8001e42 <__aeabi_ddiv+0x4ca>
 8001aac:	0020      	movs	r0, r4
 8001aae:	f001 f9bd 	bl	8002e2c <__clzsi2>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	3a0b      	subs	r2, #11
 8001ab6:	231d      	movs	r3, #29
 8001ab8:	0001      	movs	r1, r0
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	4652      	mov	r2, sl
 8001abe:	3908      	subs	r1, #8
 8001ac0:	40da      	lsrs	r2, r3
 8001ac2:	408c      	lsls	r4, r1
 8001ac4:	4314      	orrs	r4, r2
 8001ac6:	4652      	mov	r2, sl
 8001ac8:	408a      	lsls	r2, r1
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <__aeabi_ddiv+0x258>)
 8001acc:	4458      	add	r0, fp
 8001ace:	469b      	mov	fp, r3
 8001ad0:	4483      	add	fp, r0
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	e78d      	b.n	80019f2 <__aeabi_ddiv+0x7a>
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	4323      	orrs	r3, r4
 8001ada:	4698      	mov	r8, r3
 8001adc:	d140      	bne.n	8001b60 <__aeabi_ddiv+0x1e8>
 8001ade:	2308      	movs	r3, #8
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	3b06      	subs	r3, #6
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	4683      	mov	fp, r0
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	e769      	b.n	80019c0 <__aeabi_ddiv+0x48>
 8001aec:	46b2      	mov	sl, r6
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d0a9      	beq.n	8001a48 <__aeabi_ddiv+0xd0>
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d100      	bne.n	8001afa <__aeabi_ddiv+0x182>
 8001af8:	e211      	b.n	8001f1e <__aeabi_ddiv+0x5a6>
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d093      	beq.n	8001a26 <__aeabi_ddiv+0xae>
 8001afe:	4a35      	ldr	r2, [pc, #212]	; (8001bd4 <__aeabi_ddiv+0x25c>)
 8001b00:	445a      	add	r2, fp
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	dc00      	bgt.n	8001b08 <__aeabi_ddiv+0x190>
 8001b06:	e13c      	b.n	8001d82 <__aeabi_ddiv+0x40a>
 8001b08:	076b      	lsls	r3, r5, #29
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_ddiv+0x196>
 8001b0c:	e1a7      	b.n	8001e5e <__aeabi_ddiv+0x4e6>
 8001b0e:	08ed      	lsrs	r5, r5, #3
 8001b10:	4643      	mov	r3, r8
 8001b12:	01db      	lsls	r3, r3, #7
 8001b14:	d506      	bpl.n	8001b24 <__aeabi_ddiv+0x1ac>
 8001b16:	4642      	mov	r2, r8
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <__aeabi_ddiv+0x260>)
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	4690      	mov	r8, r2
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	00d2      	lsls	r2, r2, #3
 8001b22:	445a      	add	r2, fp
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <__aeabi_ddiv+0x264>)
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dc8e      	bgt.n	8001a48 <__aeabi_ddiv+0xd0>
 8001b2a:	4643      	mov	r3, r8
 8001b2c:	0552      	lsls	r2, r2, #21
 8001b2e:	0758      	lsls	r0, r3, #29
 8001b30:	025c      	lsls	r4, r3, #9
 8001b32:	4305      	orrs	r5, r0
 8001b34:	0b24      	lsrs	r4, r4, #12
 8001b36:	0d53      	lsrs	r3, r2, #21
 8001b38:	e778      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001b3a:	46ba      	mov	sl, r7
 8001b3c:	46a0      	mov	r8, r4
 8001b3e:	0015      	movs	r5, r2
 8001b40:	9000      	str	r0, [sp, #0]
 8001b42:	e7d4      	b.n	8001aee <__aeabi_ddiv+0x176>
 8001b44:	464a      	mov	r2, r9
 8001b46:	2303      	movs	r3, #3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	4691      	mov	r9, r2
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	4652      	mov	r2, sl
 8001b50:	e74f      	b.n	80019f2 <__aeabi_ddiv+0x7a>
 8001b52:	4649      	mov	r1, r9
 8001b54:	2301      	movs	r3, #1
 8001b56:	4319      	orrs	r1, r3
 8001b58:	4689      	mov	r9, r1
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	e748      	b.n	80019f2 <__aeabi_ddiv+0x7a>
 8001b60:	230c      	movs	r3, #12
 8001b62:	4699      	mov	r9, r3
 8001b64:	3b09      	subs	r3, #9
 8001b66:	46a0      	mov	r8, r4
 8001b68:	4683      	mov	fp, r0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	e728      	b.n	80019c0 <__aeabi_ddiv+0x48>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	4699      	mov	r9, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	469b      	mov	fp, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	2500      	movs	r5, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	e720      	b.n	80019c0 <__aeabi_ddiv+0x48>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2480      	movs	r4, #128	; 0x80
 8001b82:	469a      	mov	sl, r3
 8001b84:	2500      	movs	r5, #0
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <__aeabi_ddiv+0x244>)
 8001b88:	0324      	lsls	r4, r4, #12
 8001b8a:	e74f      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	4641      	mov	r1, r8
 8001b90:	031b      	lsls	r3, r3, #12
 8001b92:	4219      	tst	r1, r3
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_ddiv+0x230>
 8001b96:	421c      	tst	r4, r3
 8001b98:	d106      	bne.n	8001ba8 <__aeabi_ddiv+0x230>
 8001b9a:	431c      	orrs	r4, r3
 8001b9c:	0324      	lsls	r4, r4, #12
 8001b9e:	46ba      	mov	sl, r7
 8001ba0:	0015      	movs	r5, r2
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <__aeabi_ddiv+0x244>)
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	e741      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001ba8:	2480      	movs	r4, #128	; 0x80
 8001baa:	4643      	mov	r3, r8
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	431c      	orrs	r4, r3
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	46b2      	mov	sl, r6
 8001bb4:	4b01      	ldr	r3, [pc, #4]	; (8001bbc <__aeabi_ddiv+0x244>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e738      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	000007ff 	.word	0x000007ff
 8001bc0:	fffffc01 	.word	0xfffffc01
 8001bc4:	0800e4a0 	.word	0x0800e4a0
 8001bc8:	fffff801 	.word	0xfffff801
 8001bcc:	fffffc0d 	.word	0xfffffc0d
 8001bd0:	000003f3 	.word	0x000003f3
 8001bd4:	000003ff 	.word	0x000003ff
 8001bd8:	feffffff 	.word	0xfeffffff
 8001bdc:	000007fe 	.word	0x000007fe
 8001be0:	4544      	cmp	r4, r8
 8001be2:	d200      	bcs.n	8001be6 <__aeabi_ddiv+0x26e>
 8001be4:	e116      	b.n	8001e14 <__aeabi_ddiv+0x49c>
 8001be6:	d100      	bne.n	8001bea <__aeabi_ddiv+0x272>
 8001be8:	e111      	b.n	8001e0e <__aeabi_ddiv+0x496>
 8001bea:	2301      	movs	r3, #1
 8001bec:	425b      	negs	r3, r3
 8001bee:	469c      	mov	ip, r3
 8001bf0:	002e      	movs	r6, r5
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	44e3      	add	fp, ip
 8001bf8:	0223      	lsls	r3, r4, #8
 8001bfa:	0e14      	lsrs	r4, r2, #24
 8001bfc:	431c      	orrs	r4, r3
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	4699      	mov	r9, r3
 8001c02:	0423      	lsls	r3, r4, #16
 8001c04:	0c1f      	lsrs	r7, r3, #16
 8001c06:	0212      	lsls	r2, r2, #8
 8001c08:	4649      	mov	r1, r9
 8001c0a:	9200      	str	r2, [sp, #0]
 8001c0c:	9701      	str	r7, [sp, #4]
 8001c0e:	f7fe faff 	bl	8000210 <__aeabi_uidivmod>
 8001c12:	0002      	movs	r2, r0
 8001c14:	437a      	muls	r2, r7
 8001c16:	040b      	lsls	r3, r1, #16
 8001c18:	0c31      	lsrs	r1, r6, #16
 8001c1a:	4680      	mov	r8, r0
 8001c1c:	4319      	orrs	r1, r3
 8001c1e:	428a      	cmp	r2, r1
 8001c20:	d90b      	bls.n	8001c3a <__aeabi_ddiv+0x2c2>
 8001c22:	2301      	movs	r3, #1
 8001c24:	425b      	negs	r3, r3
 8001c26:	469c      	mov	ip, r3
 8001c28:	1909      	adds	r1, r1, r4
 8001c2a:	44e0      	add	r8, ip
 8001c2c:	428c      	cmp	r4, r1
 8001c2e:	d804      	bhi.n	8001c3a <__aeabi_ddiv+0x2c2>
 8001c30:	428a      	cmp	r2, r1
 8001c32:	d902      	bls.n	8001c3a <__aeabi_ddiv+0x2c2>
 8001c34:	1e83      	subs	r3, r0, #2
 8001c36:	4698      	mov	r8, r3
 8001c38:	1909      	adds	r1, r1, r4
 8001c3a:	1a88      	subs	r0, r1, r2
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	f7fe fae7 	bl	8000210 <__aeabi_uidivmod>
 8001c42:	0409      	lsls	r1, r1, #16
 8001c44:	468c      	mov	ip, r1
 8001c46:	0431      	lsls	r1, r6, #16
 8001c48:	4666      	mov	r6, ip
 8001c4a:	9a01      	ldr	r2, [sp, #4]
 8001c4c:	0c09      	lsrs	r1, r1, #16
 8001c4e:	4342      	muls	r2, r0
 8001c50:	0003      	movs	r3, r0
 8001c52:	4331      	orrs	r1, r6
 8001c54:	428a      	cmp	r2, r1
 8001c56:	d904      	bls.n	8001c62 <__aeabi_ddiv+0x2ea>
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	428c      	cmp	r4, r1
 8001c5e:	d800      	bhi.n	8001c62 <__aeabi_ddiv+0x2ea>
 8001c60:	e111      	b.n	8001e86 <__aeabi_ddiv+0x50e>
 8001c62:	1a89      	subs	r1, r1, r2
 8001c64:	4642      	mov	r2, r8
 8001c66:	9e00      	ldr	r6, [sp, #0]
 8001c68:	0412      	lsls	r2, r2, #16
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	0c33      	lsrs	r3, r6, #16
 8001c6e:	001f      	movs	r7, r3
 8001c70:	0c10      	lsrs	r0, r2, #16
 8001c72:	4690      	mov	r8, r2
 8001c74:	9302      	str	r3, [sp, #8]
 8001c76:	0413      	lsls	r3, r2, #16
 8001c78:	0432      	lsls	r2, r6, #16
 8001c7a:	0c16      	lsrs	r6, r2, #16
 8001c7c:	0032      	movs	r2, r6
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	435a      	muls	r2, r3
 8001c82:	9603      	str	r6, [sp, #12]
 8001c84:	437b      	muls	r3, r7
 8001c86:	4346      	muls	r6, r0
 8001c88:	4378      	muls	r0, r7
 8001c8a:	0c17      	lsrs	r7, r2, #16
 8001c8c:	46bc      	mov	ip, r7
 8001c8e:	199b      	adds	r3, r3, r6
 8001c90:	4463      	add	r3, ip
 8001c92:	429e      	cmp	r6, r3
 8001c94:	d903      	bls.n	8001c9e <__aeabi_ddiv+0x326>
 8001c96:	2680      	movs	r6, #128	; 0x80
 8001c98:	0276      	lsls	r6, r6, #9
 8001c9a:	46b4      	mov	ip, r6
 8001c9c:	4460      	add	r0, ip
 8001c9e:	0c1e      	lsrs	r6, r3, #16
 8001ca0:	1830      	adds	r0, r6, r0
 8001ca2:	0416      	lsls	r6, r2, #16
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	0c36      	lsrs	r6, r6, #16
 8001ca8:	199e      	adds	r6, r3, r6
 8001caa:	4281      	cmp	r1, r0
 8001cac:	d200      	bcs.n	8001cb0 <__aeabi_ddiv+0x338>
 8001cae:	e09c      	b.n	8001dea <__aeabi_ddiv+0x472>
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x33c>
 8001cb2:	e097      	b.n	8001de4 <__aeabi_ddiv+0x46c>
 8001cb4:	1bae      	subs	r6, r5, r6
 8001cb6:	1a09      	subs	r1, r1, r0
 8001cb8:	42b5      	cmp	r5, r6
 8001cba:	4180      	sbcs	r0, r0
 8001cbc:	4240      	negs	r0, r0
 8001cbe:	1a08      	subs	r0, r1, r0
 8001cc0:	4284      	cmp	r4, r0
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_ddiv+0x34e>
 8001cc4:	e111      	b.n	8001eea <__aeabi_ddiv+0x572>
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	f7fe faa2 	bl	8000210 <__aeabi_uidivmod>
 8001ccc:	9a01      	ldr	r2, [sp, #4]
 8001cce:	040b      	lsls	r3, r1, #16
 8001cd0:	4342      	muls	r2, r0
 8001cd2:	0c31      	lsrs	r1, r6, #16
 8001cd4:	0005      	movs	r5, r0
 8001cd6:	4319      	orrs	r1, r3
 8001cd8:	428a      	cmp	r2, r1
 8001cda:	d907      	bls.n	8001cec <__aeabi_ddiv+0x374>
 8001cdc:	1909      	adds	r1, r1, r4
 8001cde:	3d01      	subs	r5, #1
 8001ce0:	428c      	cmp	r4, r1
 8001ce2:	d803      	bhi.n	8001cec <__aeabi_ddiv+0x374>
 8001ce4:	428a      	cmp	r2, r1
 8001ce6:	d901      	bls.n	8001cec <__aeabi_ddiv+0x374>
 8001ce8:	1e85      	subs	r5, r0, #2
 8001cea:	1909      	adds	r1, r1, r4
 8001cec:	1a88      	subs	r0, r1, r2
 8001cee:	4649      	mov	r1, r9
 8001cf0:	f7fe fa8e 	bl	8000210 <__aeabi_uidivmod>
 8001cf4:	0409      	lsls	r1, r1, #16
 8001cf6:	468c      	mov	ip, r1
 8001cf8:	0431      	lsls	r1, r6, #16
 8001cfa:	4666      	mov	r6, ip
 8001cfc:	9a01      	ldr	r2, [sp, #4]
 8001cfe:	0c09      	lsrs	r1, r1, #16
 8001d00:	4342      	muls	r2, r0
 8001d02:	0003      	movs	r3, r0
 8001d04:	4331      	orrs	r1, r6
 8001d06:	428a      	cmp	r2, r1
 8001d08:	d907      	bls.n	8001d1a <__aeabi_ddiv+0x3a2>
 8001d0a:	1909      	adds	r1, r1, r4
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	428c      	cmp	r4, r1
 8001d10:	d803      	bhi.n	8001d1a <__aeabi_ddiv+0x3a2>
 8001d12:	428a      	cmp	r2, r1
 8001d14:	d901      	bls.n	8001d1a <__aeabi_ddiv+0x3a2>
 8001d16:	1e83      	subs	r3, r0, #2
 8001d18:	1909      	adds	r1, r1, r4
 8001d1a:	9e03      	ldr	r6, [sp, #12]
 8001d1c:	1a89      	subs	r1, r1, r2
 8001d1e:	0032      	movs	r2, r6
 8001d20:	042d      	lsls	r5, r5, #16
 8001d22:	431d      	orrs	r5, r3
 8001d24:	9f02      	ldr	r7, [sp, #8]
 8001d26:	042b      	lsls	r3, r5, #16
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	435a      	muls	r2, r3
 8001d2c:	437b      	muls	r3, r7
 8001d2e:	469c      	mov	ip, r3
 8001d30:	0c28      	lsrs	r0, r5, #16
 8001d32:	4346      	muls	r6, r0
 8001d34:	0c13      	lsrs	r3, r2, #16
 8001d36:	44b4      	add	ip, r6
 8001d38:	4463      	add	r3, ip
 8001d3a:	4378      	muls	r0, r7
 8001d3c:	429e      	cmp	r6, r3
 8001d3e:	d903      	bls.n	8001d48 <__aeabi_ddiv+0x3d0>
 8001d40:	2680      	movs	r6, #128	; 0x80
 8001d42:	0276      	lsls	r6, r6, #9
 8001d44:	46b4      	mov	ip, r6
 8001d46:	4460      	add	r0, ip
 8001d48:	0c1e      	lsrs	r6, r3, #16
 8001d4a:	0412      	lsls	r2, r2, #16
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	0c12      	lsrs	r2, r2, #16
 8001d50:	1830      	adds	r0, r6, r0
 8001d52:	189b      	adds	r3, r3, r2
 8001d54:	4281      	cmp	r1, r0
 8001d56:	d306      	bcc.n	8001d66 <__aeabi_ddiv+0x3ee>
 8001d58:	d002      	beq.n	8001d60 <__aeabi_ddiv+0x3e8>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	431d      	orrs	r5, r3
 8001d5e:	e6ce      	b.n	8001afe <__aeabi_ddiv+0x186>
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_ddiv+0x3ee>
 8001d64:	e6cb      	b.n	8001afe <__aeabi_ddiv+0x186>
 8001d66:	1861      	adds	r1, r4, r1
 8001d68:	1e6e      	subs	r6, r5, #1
 8001d6a:	42a1      	cmp	r1, r4
 8001d6c:	d200      	bcs.n	8001d70 <__aeabi_ddiv+0x3f8>
 8001d6e:	e0a4      	b.n	8001eba <__aeabi_ddiv+0x542>
 8001d70:	4281      	cmp	r1, r0
 8001d72:	d200      	bcs.n	8001d76 <__aeabi_ddiv+0x3fe>
 8001d74:	e0c9      	b.n	8001f0a <__aeabi_ddiv+0x592>
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x402>
 8001d78:	e0d9      	b.n	8001f2e <__aeabi_ddiv+0x5b6>
 8001d7a:	0035      	movs	r5, r6
 8001d7c:	e7ed      	b.n	8001d5a <__aeabi_ddiv+0x3e2>
 8001d7e:	2501      	movs	r5, #1
 8001d80:	426d      	negs	r5, r5
 8001d82:	2101      	movs	r1, #1
 8001d84:	1a89      	subs	r1, r1, r2
 8001d86:	2938      	cmp	r1, #56	; 0x38
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_ddiv+0x414>
 8001d8a:	e64c      	b.n	8001a26 <__aeabi_ddiv+0xae>
 8001d8c:	291f      	cmp	r1, #31
 8001d8e:	dc00      	bgt.n	8001d92 <__aeabi_ddiv+0x41a>
 8001d90:	e07f      	b.n	8001e92 <__aeabi_ddiv+0x51a>
 8001d92:	231f      	movs	r3, #31
 8001d94:	425b      	negs	r3, r3
 8001d96:	1a9a      	subs	r2, r3, r2
 8001d98:	4643      	mov	r3, r8
 8001d9a:	40d3      	lsrs	r3, r2
 8001d9c:	2920      	cmp	r1, #32
 8001d9e:	d004      	beq.n	8001daa <__aeabi_ddiv+0x432>
 8001da0:	4644      	mov	r4, r8
 8001da2:	4a65      	ldr	r2, [pc, #404]	; (8001f38 <__aeabi_ddiv+0x5c0>)
 8001da4:	445a      	add	r2, fp
 8001da6:	4094      	lsls	r4, r2
 8001da8:	4325      	orrs	r5, r4
 8001daa:	1e6a      	subs	r2, r5, #1
 8001dac:	4195      	sbcs	r5, r2
 8001dae:	2207      	movs	r2, #7
 8001db0:	432b      	orrs	r3, r5
 8001db2:	0015      	movs	r5, r2
 8001db4:	2400      	movs	r4, #0
 8001db6:	401d      	ands	r5, r3
 8001db8:	421a      	tst	r2, r3
 8001dba:	d100      	bne.n	8001dbe <__aeabi_ddiv+0x446>
 8001dbc:	e0a1      	b.n	8001f02 <__aeabi_ddiv+0x58a>
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	2a04      	cmp	r2, #4
 8001dc6:	d100      	bne.n	8001dca <__aeabi_ddiv+0x452>
 8001dc8:	e098      	b.n	8001efc <__aeabi_ddiv+0x584>
 8001dca:	1d1a      	adds	r2, r3, #4
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	419b      	sbcs	r3, r3
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	18e4      	adds	r4, r4, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	0222      	lsls	r2, r4, #8
 8001dd8:	d400      	bmi.n	8001ddc <__aeabi_ddiv+0x464>
 8001dda:	e08f      	b.n	8001efc <__aeabi_ddiv+0x584>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	2400      	movs	r4, #0
 8001de0:	2500      	movs	r5, #0
 8001de2:	e623      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001de4:	42b5      	cmp	r5, r6
 8001de6:	d300      	bcc.n	8001dea <__aeabi_ddiv+0x472>
 8001de8:	e764      	b.n	8001cb4 <__aeabi_ddiv+0x33c>
 8001dea:	4643      	mov	r3, r8
 8001dec:	1e5a      	subs	r2, r3, #1
 8001dee:	9b00      	ldr	r3, [sp, #0]
 8001df0:	469c      	mov	ip, r3
 8001df2:	4465      	add	r5, ip
 8001df4:	001f      	movs	r7, r3
 8001df6:	429d      	cmp	r5, r3
 8001df8:	419b      	sbcs	r3, r3
 8001dfa:	425b      	negs	r3, r3
 8001dfc:	191b      	adds	r3, r3, r4
 8001dfe:	18c9      	adds	r1, r1, r3
 8001e00:	428c      	cmp	r4, r1
 8001e02:	d23a      	bcs.n	8001e7a <__aeabi_ddiv+0x502>
 8001e04:	4288      	cmp	r0, r1
 8001e06:	d863      	bhi.n	8001ed0 <__aeabi_ddiv+0x558>
 8001e08:	d060      	beq.n	8001ecc <__aeabi_ddiv+0x554>
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	e752      	b.n	8001cb4 <__aeabi_ddiv+0x33c>
 8001e0e:	42aa      	cmp	r2, r5
 8001e10:	d900      	bls.n	8001e14 <__aeabi_ddiv+0x49c>
 8001e12:	e6ea      	b.n	8001bea <__aeabi_ddiv+0x272>
 8001e14:	4643      	mov	r3, r8
 8001e16:	07de      	lsls	r6, r3, #31
 8001e18:	0858      	lsrs	r0, r3, #1
 8001e1a:	086b      	lsrs	r3, r5, #1
 8001e1c:	431e      	orrs	r6, r3
 8001e1e:	07ed      	lsls	r5, r5, #31
 8001e20:	e6ea      	b.n	8001bf8 <__aeabi_ddiv+0x280>
 8001e22:	4648      	mov	r0, r9
 8001e24:	f001 f802 	bl	8002e2c <__clzsi2>
 8001e28:	0001      	movs	r1, r0
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	3115      	adds	r1, #21
 8001e2e:	3220      	adds	r2, #32
 8001e30:	291c      	cmp	r1, #28
 8001e32:	dc00      	bgt.n	8001e36 <__aeabi_ddiv+0x4be>
 8001e34:	e61a      	b.n	8001a6c <__aeabi_ddiv+0xf4>
 8001e36:	464b      	mov	r3, r9
 8001e38:	3808      	subs	r0, #8
 8001e3a:	4083      	lsls	r3, r0
 8001e3c:	2500      	movs	r5, #0
 8001e3e:	4698      	mov	r8, r3
 8001e40:	e620      	b.n	8001a84 <__aeabi_ddiv+0x10c>
 8001e42:	f000 fff3 	bl	8002e2c <__clzsi2>
 8001e46:	0003      	movs	r3, r0
 8001e48:	001a      	movs	r2, r3
 8001e4a:	3215      	adds	r2, #21
 8001e4c:	3020      	adds	r0, #32
 8001e4e:	2a1c      	cmp	r2, #28
 8001e50:	dc00      	bgt.n	8001e54 <__aeabi_ddiv+0x4dc>
 8001e52:	e630      	b.n	8001ab6 <__aeabi_ddiv+0x13e>
 8001e54:	4654      	mov	r4, sl
 8001e56:	3b08      	subs	r3, #8
 8001e58:	2200      	movs	r2, #0
 8001e5a:	409c      	lsls	r4, r3
 8001e5c:	e635      	b.n	8001aca <__aeabi_ddiv+0x152>
 8001e5e:	230f      	movs	r3, #15
 8001e60:	402b      	ands	r3, r5
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d100      	bne.n	8001e68 <__aeabi_ddiv+0x4f0>
 8001e66:	e652      	b.n	8001b0e <__aeabi_ddiv+0x196>
 8001e68:	2305      	movs	r3, #5
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	42ab      	cmp	r3, r5
 8001e6e:	419b      	sbcs	r3, r3
 8001e70:	3504      	adds	r5, #4
 8001e72:	425b      	negs	r3, r3
 8001e74:	08ed      	lsrs	r5, r5, #3
 8001e76:	4498      	add	r8, r3
 8001e78:	e64a      	b.n	8001b10 <__aeabi_ddiv+0x198>
 8001e7a:	428c      	cmp	r4, r1
 8001e7c:	d1c5      	bne.n	8001e0a <__aeabi_ddiv+0x492>
 8001e7e:	42af      	cmp	r7, r5
 8001e80:	d9c0      	bls.n	8001e04 <__aeabi_ddiv+0x48c>
 8001e82:	4690      	mov	r8, r2
 8001e84:	e716      	b.n	8001cb4 <__aeabi_ddiv+0x33c>
 8001e86:	428a      	cmp	r2, r1
 8001e88:	d800      	bhi.n	8001e8c <__aeabi_ddiv+0x514>
 8001e8a:	e6ea      	b.n	8001c62 <__aeabi_ddiv+0x2ea>
 8001e8c:	1e83      	subs	r3, r0, #2
 8001e8e:	1909      	adds	r1, r1, r4
 8001e90:	e6e7      	b.n	8001c62 <__aeabi_ddiv+0x2ea>
 8001e92:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <__aeabi_ddiv+0x5c4>)
 8001e94:	0028      	movs	r0, r5
 8001e96:	445a      	add	r2, fp
 8001e98:	4643      	mov	r3, r8
 8001e9a:	4095      	lsls	r5, r2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	40c8      	lsrs	r0, r1
 8001ea0:	1e6a      	subs	r2, r5, #1
 8001ea2:	4195      	sbcs	r5, r2
 8001ea4:	4644      	mov	r4, r8
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	432b      	orrs	r3, r5
 8001eaa:	40cc      	lsrs	r4, r1
 8001eac:	075a      	lsls	r2, r3, #29
 8001eae:	d092      	beq.n	8001dd6 <__aeabi_ddiv+0x45e>
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	2a04      	cmp	r2, #4
 8001eb6:	d188      	bne.n	8001dca <__aeabi_ddiv+0x452>
 8001eb8:	e78d      	b.n	8001dd6 <__aeabi_ddiv+0x45e>
 8001eba:	0035      	movs	r5, r6
 8001ebc:	4281      	cmp	r1, r0
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_ddiv+0x54a>
 8001ec0:	e74b      	b.n	8001d5a <__aeabi_ddiv+0x3e2>
 8001ec2:	9a00      	ldr	r2, [sp, #0]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d000      	beq.n	8001eca <__aeabi_ddiv+0x552>
 8001ec8:	e747      	b.n	8001d5a <__aeabi_ddiv+0x3e2>
 8001eca:	e618      	b.n	8001afe <__aeabi_ddiv+0x186>
 8001ecc:	42ae      	cmp	r6, r5
 8001ece:	d99c      	bls.n	8001e0a <__aeabi_ddiv+0x492>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	469c      	mov	ip, r3
 8001ed6:	9b00      	ldr	r3, [sp, #0]
 8001ed8:	44e0      	add	r8, ip
 8001eda:	469c      	mov	ip, r3
 8001edc:	4465      	add	r5, ip
 8001ede:	429d      	cmp	r5, r3
 8001ee0:	419b      	sbcs	r3, r3
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	191b      	adds	r3, r3, r4
 8001ee6:	18c9      	adds	r1, r1, r3
 8001ee8:	e6e4      	b.n	8001cb4 <__aeabi_ddiv+0x33c>
 8001eea:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <__aeabi_ddiv+0x5c8>)
 8001eec:	445a      	add	r2, fp
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	dc00      	bgt.n	8001ef4 <__aeabi_ddiv+0x57c>
 8001ef2:	e744      	b.n	8001d7e <__aeabi_ddiv+0x406>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	4498      	add	r8, r3
 8001efa:	e609      	b.n	8001b10 <__aeabi_ddiv+0x198>
 8001efc:	0765      	lsls	r5, r4, #29
 8001efe:	0264      	lsls	r4, r4, #9
 8001f00:	0b24      	lsrs	r4, r4, #12
 8001f02:	08db      	lsrs	r3, r3, #3
 8001f04:	431d      	orrs	r5, r3
 8001f06:	2300      	movs	r3, #0
 8001f08:	e590      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001f0a:	9e00      	ldr	r6, [sp, #0]
 8001f0c:	3d02      	subs	r5, #2
 8001f0e:	0072      	lsls	r2, r6, #1
 8001f10:	42b2      	cmp	r2, r6
 8001f12:	41bf      	sbcs	r7, r7
 8001f14:	427f      	negs	r7, r7
 8001f16:	193c      	adds	r4, r7, r4
 8001f18:	1909      	adds	r1, r1, r4
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	e7ce      	b.n	8001ebc <__aeabi_ddiv+0x544>
 8001f1e:	2480      	movs	r4, #128	; 0x80
 8001f20:	4643      	mov	r3, r8
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	431c      	orrs	r4, r3
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <__aeabi_ddiv+0x5cc>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e57e      	b.n	8001a2c <__aeabi_ddiv+0xb4>
 8001f2e:	9a00      	ldr	r2, [sp, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3ea      	bcc.n	8001f0a <__aeabi_ddiv+0x592>
 8001f34:	0035      	movs	r5, r6
 8001f36:	e7c4      	b.n	8001ec2 <__aeabi_ddiv+0x54a>
 8001f38:	0000043e 	.word	0x0000043e
 8001f3c:	0000041e 	.word	0x0000041e
 8001f40:	000003ff 	.word	0x000003ff
 8001f44:	000007ff 	.word	0x000007ff

08001f48 <__aeabi_dmul>:
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	4657      	mov	r7, sl
 8001f4c:	464e      	mov	r6, r9
 8001f4e:	4645      	mov	r5, r8
 8001f50:	46de      	mov	lr, fp
 8001f52:	b5e0      	push	{r5, r6, r7, lr}
 8001f54:	4698      	mov	r8, r3
 8001f56:	030c      	lsls	r4, r1, #12
 8001f58:	004b      	lsls	r3, r1, #1
 8001f5a:	0006      	movs	r6, r0
 8001f5c:	4692      	mov	sl, r2
 8001f5e:	b087      	sub	sp, #28
 8001f60:	0b24      	lsrs	r4, r4, #12
 8001f62:	0d5b      	lsrs	r3, r3, #21
 8001f64:	0fcf      	lsrs	r7, r1, #31
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d06c      	beq.n	8002044 <__aeabi_dmul+0xfc>
 8001f6a:	4add      	ldr	r2, [pc, #884]	; (80022e0 <__aeabi_dmul+0x398>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dmul+0x2a>
 8001f70:	e086      	b.n	8002080 <__aeabi_dmul+0x138>
 8001f72:	0f42      	lsrs	r2, r0, #29
 8001f74:	00e4      	lsls	r4, r4, #3
 8001f76:	4314      	orrs	r4, r2
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	0412      	lsls	r2, r2, #16
 8001f7c:	4314      	orrs	r4, r2
 8001f7e:	4ad9      	ldr	r2, [pc, #868]	; (80022e4 <__aeabi_dmul+0x39c>)
 8001f80:	00c5      	lsls	r5, r0, #3
 8001f82:	4694      	mov	ip, r2
 8001f84:	4463      	add	r3, ip
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4699      	mov	r9, r3
 8001f8c:	469b      	mov	fp, r3
 8001f8e:	4643      	mov	r3, r8
 8001f90:	4642      	mov	r2, r8
 8001f92:	031e      	lsls	r6, r3, #12
 8001f94:	0fd2      	lsrs	r2, r2, #31
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4650      	mov	r0, sl
 8001f9a:	4690      	mov	r8, r2
 8001f9c:	0b36      	lsrs	r6, r6, #12
 8001f9e:	0d5b      	lsrs	r3, r3, #21
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dmul+0x5c>
 8001fa2:	e078      	b.n	8002096 <__aeabi_dmul+0x14e>
 8001fa4:	4ace      	ldr	r2, [pc, #824]	; (80022e0 <__aeabi_dmul+0x398>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01d      	beq.n	8001fe6 <__aeabi_dmul+0x9e>
 8001faa:	49ce      	ldr	r1, [pc, #824]	; (80022e4 <__aeabi_dmul+0x39c>)
 8001fac:	0f42      	lsrs	r2, r0, #29
 8001fae:	468c      	mov	ip, r1
 8001fb0:	9900      	ldr	r1, [sp, #0]
 8001fb2:	4463      	add	r3, ip
 8001fb4:	00f6      	lsls	r6, r6, #3
 8001fb6:	468c      	mov	ip, r1
 8001fb8:	4316      	orrs	r6, r2
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	449c      	add	ip, r3
 8001fbe:	0412      	lsls	r2, r2, #16
 8001fc0:	4663      	mov	r3, ip
 8001fc2:	4316      	orrs	r6, r2
 8001fc4:	00c2      	lsls	r2, r0, #3
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	9900      	ldr	r1, [sp, #0]
 8001fcc:	4643      	mov	r3, r8
 8001fce:	3101      	adds	r1, #1
 8001fd0:	468c      	mov	ip, r1
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	407b      	eors	r3, r7
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	290f      	cmp	r1, #15
 8001fda:	d900      	bls.n	8001fde <__aeabi_dmul+0x96>
 8001fdc:	e07e      	b.n	80020dc <__aeabi_dmul+0x194>
 8001fde:	4bc2      	ldr	r3, [pc, #776]	; (80022e8 <__aeabi_dmul+0x3a0>)
 8001fe0:	0089      	lsls	r1, r1, #2
 8001fe2:	5859      	ldr	r1, [r3, r1]
 8001fe4:	468f      	mov	pc, r1
 8001fe6:	4652      	mov	r2, sl
 8001fe8:	9b00      	ldr	r3, [sp, #0]
 8001fea:	4332      	orrs	r2, r6
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_dmul+0xa8>
 8001fee:	e156      	b.n	800229e <__aeabi_dmul+0x356>
 8001ff0:	49bb      	ldr	r1, [pc, #748]	; (80022e0 <__aeabi_dmul+0x398>)
 8001ff2:	2600      	movs	r6, #0
 8001ff4:	468c      	mov	ip, r1
 8001ff6:	4463      	add	r3, ip
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	4319      	orrs	r1, r3
 8002000:	4689      	mov	r9, r1
 8002002:	2002      	movs	r0, #2
 8002004:	e7e1      	b.n	8001fca <__aeabi_dmul+0x82>
 8002006:	4643      	mov	r3, r8
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	0034      	movs	r4, r6
 800200c:	0015      	movs	r5, r2
 800200e:	4683      	mov	fp, r0
 8002010:	465b      	mov	r3, fp
 8002012:	2b02      	cmp	r3, #2
 8002014:	d05e      	beq.n	80020d4 <__aeabi_dmul+0x18c>
 8002016:	2b03      	cmp	r3, #3
 8002018:	d100      	bne.n	800201c <__aeabi_dmul+0xd4>
 800201a:	e1f3      	b.n	8002404 <__aeabi_dmul+0x4bc>
 800201c:	2b01      	cmp	r3, #1
 800201e:	d000      	beq.n	8002022 <__aeabi_dmul+0xda>
 8002020:	e118      	b.n	8002254 <__aeabi_dmul+0x30c>
 8002022:	2200      	movs	r2, #0
 8002024:	2400      	movs	r4, #0
 8002026:	2500      	movs	r5, #0
 8002028:	9b01      	ldr	r3, [sp, #4]
 800202a:	0512      	lsls	r2, r2, #20
 800202c:	4322      	orrs	r2, r4
 800202e:	07db      	lsls	r3, r3, #31
 8002030:	431a      	orrs	r2, r3
 8002032:	0028      	movs	r0, r5
 8002034:	0011      	movs	r1, r2
 8002036:	b007      	add	sp, #28
 8002038:	bcf0      	pop	{r4, r5, r6, r7}
 800203a:	46bb      	mov	fp, r7
 800203c:	46b2      	mov	sl, r6
 800203e:	46a9      	mov	r9, r5
 8002040:	46a0      	mov	r8, r4
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002044:	0025      	movs	r5, r4
 8002046:	4305      	orrs	r5, r0
 8002048:	d100      	bne.n	800204c <__aeabi_dmul+0x104>
 800204a:	e141      	b.n	80022d0 <__aeabi_dmul+0x388>
 800204c:	2c00      	cmp	r4, #0
 800204e:	d100      	bne.n	8002052 <__aeabi_dmul+0x10a>
 8002050:	e1ad      	b.n	80023ae <__aeabi_dmul+0x466>
 8002052:	0020      	movs	r0, r4
 8002054:	f000 feea 	bl	8002e2c <__clzsi2>
 8002058:	0001      	movs	r1, r0
 800205a:	0002      	movs	r2, r0
 800205c:	390b      	subs	r1, #11
 800205e:	231d      	movs	r3, #29
 8002060:	0010      	movs	r0, r2
 8002062:	1a5b      	subs	r3, r3, r1
 8002064:	0031      	movs	r1, r6
 8002066:	0035      	movs	r5, r6
 8002068:	3808      	subs	r0, #8
 800206a:	4084      	lsls	r4, r0
 800206c:	40d9      	lsrs	r1, r3
 800206e:	4085      	lsls	r5, r0
 8002070:	430c      	orrs	r4, r1
 8002072:	489e      	ldr	r0, [pc, #632]	; (80022ec <__aeabi_dmul+0x3a4>)
 8002074:	1a83      	subs	r3, r0, r2
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2300      	movs	r3, #0
 800207a:	4699      	mov	r9, r3
 800207c:	469b      	mov	fp, r3
 800207e:	e786      	b.n	8001f8e <__aeabi_dmul+0x46>
 8002080:	0005      	movs	r5, r0
 8002082:	4325      	orrs	r5, r4
 8002084:	d000      	beq.n	8002088 <__aeabi_dmul+0x140>
 8002086:	e11c      	b.n	80022c2 <__aeabi_dmul+0x37a>
 8002088:	2208      	movs	r2, #8
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2302      	movs	r3, #2
 800208e:	2400      	movs	r4, #0
 8002090:	4691      	mov	r9, r2
 8002092:	469b      	mov	fp, r3
 8002094:	e77b      	b.n	8001f8e <__aeabi_dmul+0x46>
 8002096:	4652      	mov	r2, sl
 8002098:	4332      	orrs	r2, r6
 800209a:	d100      	bne.n	800209e <__aeabi_dmul+0x156>
 800209c:	e10a      	b.n	80022b4 <__aeabi_dmul+0x36c>
 800209e:	2e00      	cmp	r6, #0
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dmul+0x15c>
 80020a2:	e176      	b.n	8002392 <__aeabi_dmul+0x44a>
 80020a4:	0030      	movs	r0, r6
 80020a6:	f000 fec1 	bl	8002e2c <__clzsi2>
 80020aa:	0002      	movs	r2, r0
 80020ac:	3a0b      	subs	r2, #11
 80020ae:	231d      	movs	r3, #29
 80020b0:	0001      	movs	r1, r0
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	4652      	mov	r2, sl
 80020b6:	3908      	subs	r1, #8
 80020b8:	40da      	lsrs	r2, r3
 80020ba:	408e      	lsls	r6, r1
 80020bc:	4316      	orrs	r6, r2
 80020be:	4652      	mov	r2, sl
 80020c0:	408a      	lsls	r2, r1
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	4989      	ldr	r1, [pc, #548]	; (80022ec <__aeabi_dmul+0x3a4>)
 80020c6:	1a18      	subs	r0, r3, r0
 80020c8:	0003      	movs	r3, r0
 80020ca:	468c      	mov	ip, r1
 80020cc:	4463      	add	r3, ip
 80020ce:	2000      	movs	r0, #0
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	e77a      	b.n	8001fca <__aeabi_dmul+0x82>
 80020d4:	2400      	movs	r4, #0
 80020d6:	2500      	movs	r5, #0
 80020d8:	4a81      	ldr	r2, [pc, #516]	; (80022e0 <__aeabi_dmul+0x398>)
 80020da:	e7a5      	b.n	8002028 <__aeabi_dmul+0xe0>
 80020dc:	0c2f      	lsrs	r7, r5, #16
 80020de:	042d      	lsls	r5, r5, #16
 80020e0:	0c2d      	lsrs	r5, r5, #16
 80020e2:	002b      	movs	r3, r5
 80020e4:	0c11      	lsrs	r1, r2, #16
 80020e6:	0412      	lsls	r2, r2, #16
 80020e8:	0c12      	lsrs	r2, r2, #16
 80020ea:	4353      	muls	r3, r2
 80020ec:	4698      	mov	r8, r3
 80020ee:	0013      	movs	r3, r2
 80020f0:	0028      	movs	r0, r5
 80020f2:	437b      	muls	r3, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	4348      	muls	r0, r1
 80020f8:	4448      	add	r0, r9
 80020fa:	4683      	mov	fp, r0
 80020fc:	4640      	mov	r0, r8
 80020fe:	000b      	movs	r3, r1
 8002100:	0c00      	lsrs	r0, r0, #16
 8002102:	4682      	mov	sl, r0
 8002104:	4658      	mov	r0, fp
 8002106:	437b      	muls	r3, r7
 8002108:	4450      	add	r0, sl
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	4581      	cmp	r9, r0
 800210e:	d906      	bls.n	800211e <__aeabi_dmul+0x1d6>
 8002110:	469a      	mov	sl, r3
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	025b      	lsls	r3, r3, #9
 8002116:	4699      	mov	r9, r3
 8002118:	44ca      	add	sl, r9
 800211a:	4653      	mov	r3, sl
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	0c03      	lsrs	r3, r0, #16
 8002120:	469b      	mov	fp, r3
 8002122:	4643      	mov	r3, r8
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	0400      	lsls	r0, r0, #16
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	4698      	mov	r8, r3
 800212c:	0003      	movs	r3, r0
 800212e:	4443      	add	r3, r8
 8002130:	9304      	str	r3, [sp, #16]
 8002132:	0c33      	lsrs	r3, r6, #16
 8002134:	4699      	mov	r9, r3
 8002136:	002b      	movs	r3, r5
 8002138:	0436      	lsls	r6, r6, #16
 800213a:	0c36      	lsrs	r6, r6, #16
 800213c:	4373      	muls	r3, r6
 800213e:	4698      	mov	r8, r3
 8002140:	0033      	movs	r3, r6
 8002142:	437b      	muls	r3, r7
 8002144:	469a      	mov	sl, r3
 8002146:	464b      	mov	r3, r9
 8002148:	435d      	muls	r5, r3
 800214a:	435f      	muls	r7, r3
 800214c:	4643      	mov	r3, r8
 800214e:	4455      	add	r5, sl
 8002150:	0c18      	lsrs	r0, r3, #16
 8002152:	1940      	adds	r0, r0, r5
 8002154:	4582      	cmp	sl, r0
 8002156:	d903      	bls.n	8002160 <__aeabi_dmul+0x218>
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	469a      	mov	sl, r3
 800215e:	4457      	add	r7, sl
 8002160:	0c05      	lsrs	r5, r0, #16
 8002162:	19eb      	adds	r3, r5, r7
 8002164:	9305      	str	r3, [sp, #20]
 8002166:	4643      	mov	r3, r8
 8002168:	041d      	lsls	r5, r3, #16
 800216a:	0c2d      	lsrs	r5, r5, #16
 800216c:	0400      	lsls	r0, r0, #16
 800216e:	1940      	adds	r0, r0, r5
 8002170:	0c25      	lsrs	r5, r4, #16
 8002172:	0424      	lsls	r4, r4, #16
 8002174:	0c24      	lsrs	r4, r4, #16
 8002176:	0027      	movs	r7, r4
 8002178:	4357      	muls	r7, r2
 800217a:	436a      	muls	r2, r5
 800217c:	4690      	mov	r8, r2
 800217e:	002a      	movs	r2, r5
 8002180:	0c3b      	lsrs	r3, r7, #16
 8002182:	469a      	mov	sl, r3
 8002184:	434a      	muls	r2, r1
 8002186:	4361      	muls	r1, r4
 8002188:	4441      	add	r1, r8
 800218a:	4451      	add	r1, sl
 800218c:	4483      	add	fp, r0
 800218e:	4588      	cmp	r8, r1
 8002190:	d903      	bls.n	800219a <__aeabi_dmul+0x252>
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	4698      	mov	r8, r3
 8002198:	4442      	add	r2, r8
 800219a:	043f      	lsls	r7, r7, #16
 800219c:	0c0b      	lsrs	r3, r1, #16
 800219e:	0c3f      	lsrs	r7, r7, #16
 80021a0:	0409      	lsls	r1, r1, #16
 80021a2:	19c9      	adds	r1, r1, r7
 80021a4:	0027      	movs	r7, r4
 80021a6:	4698      	mov	r8, r3
 80021a8:	464b      	mov	r3, r9
 80021aa:	4377      	muls	r7, r6
 80021ac:	435c      	muls	r4, r3
 80021ae:	436e      	muls	r6, r5
 80021b0:	435d      	muls	r5, r3
 80021b2:	0c3b      	lsrs	r3, r7, #16
 80021b4:	4699      	mov	r9, r3
 80021b6:	19a4      	adds	r4, r4, r6
 80021b8:	444c      	add	r4, r9
 80021ba:	4442      	add	r2, r8
 80021bc:	9503      	str	r5, [sp, #12]
 80021be:	42a6      	cmp	r6, r4
 80021c0:	d904      	bls.n	80021cc <__aeabi_dmul+0x284>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	4698      	mov	r8, r3
 80021c8:	4445      	add	r5, r8
 80021ca:	9503      	str	r5, [sp, #12]
 80021cc:	9b02      	ldr	r3, [sp, #8]
 80021ce:	043f      	lsls	r7, r7, #16
 80021d0:	445b      	add	r3, fp
 80021d2:	001e      	movs	r6, r3
 80021d4:	4283      	cmp	r3, r0
 80021d6:	4180      	sbcs	r0, r0
 80021d8:	0423      	lsls	r3, r4, #16
 80021da:	4698      	mov	r8, r3
 80021dc:	9b05      	ldr	r3, [sp, #20]
 80021de:	0c3f      	lsrs	r7, r7, #16
 80021e0:	4447      	add	r7, r8
 80021e2:	4698      	mov	r8, r3
 80021e4:	1876      	adds	r6, r6, r1
 80021e6:	428e      	cmp	r6, r1
 80021e8:	4189      	sbcs	r1, r1
 80021ea:	4447      	add	r7, r8
 80021ec:	4240      	negs	r0, r0
 80021ee:	183d      	adds	r5, r7, r0
 80021f0:	46a8      	mov	r8, r5
 80021f2:	4693      	mov	fp, r2
 80021f4:	4249      	negs	r1, r1
 80021f6:	468a      	mov	sl, r1
 80021f8:	44c3      	add	fp, r8
 80021fa:	429f      	cmp	r7, r3
 80021fc:	41bf      	sbcs	r7, r7
 80021fe:	4580      	cmp	r8, r0
 8002200:	4180      	sbcs	r0, r0
 8002202:	9b03      	ldr	r3, [sp, #12]
 8002204:	44da      	add	sl, fp
 8002206:	4698      	mov	r8, r3
 8002208:	4653      	mov	r3, sl
 800220a:	4240      	negs	r0, r0
 800220c:	427f      	negs	r7, r7
 800220e:	4307      	orrs	r7, r0
 8002210:	0c24      	lsrs	r4, r4, #16
 8002212:	4593      	cmp	fp, r2
 8002214:	4192      	sbcs	r2, r2
 8002216:	458a      	cmp	sl, r1
 8002218:	4189      	sbcs	r1, r1
 800221a:	193f      	adds	r7, r7, r4
 800221c:	0ddc      	lsrs	r4, r3, #23
 800221e:	9b04      	ldr	r3, [sp, #16]
 8002220:	0275      	lsls	r5, r6, #9
 8002222:	431d      	orrs	r5, r3
 8002224:	1e68      	subs	r0, r5, #1
 8002226:	4185      	sbcs	r5, r0
 8002228:	4653      	mov	r3, sl
 800222a:	4252      	negs	r2, r2
 800222c:	4249      	negs	r1, r1
 800222e:	430a      	orrs	r2, r1
 8002230:	18bf      	adds	r7, r7, r2
 8002232:	4447      	add	r7, r8
 8002234:	0df6      	lsrs	r6, r6, #23
 8002236:	027f      	lsls	r7, r7, #9
 8002238:	4335      	orrs	r5, r6
 800223a:	025a      	lsls	r2, r3, #9
 800223c:	433c      	orrs	r4, r7
 800223e:	4315      	orrs	r5, r2
 8002240:	01fb      	lsls	r3, r7, #7
 8002242:	d400      	bmi.n	8002246 <__aeabi_dmul+0x2fe>
 8002244:	e0c1      	b.n	80023ca <__aeabi_dmul+0x482>
 8002246:	2101      	movs	r1, #1
 8002248:	086a      	lsrs	r2, r5, #1
 800224a:	400d      	ands	r5, r1
 800224c:	4315      	orrs	r5, r2
 800224e:	07e2      	lsls	r2, r4, #31
 8002250:	4315      	orrs	r5, r2
 8002252:	0864      	lsrs	r4, r4, #1
 8002254:	4926      	ldr	r1, [pc, #152]	; (80022f0 <__aeabi_dmul+0x3a8>)
 8002256:	4461      	add	r1, ip
 8002258:	2900      	cmp	r1, #0
 800225a:	dd56      	ble.n	800230a <__aeabi_dmul+0x3c2>
 800225c:	076b      	lsls	r3, r5, #29
 800225e:	d009      	beq.n	8002274 <__aeabi_dmul+0x32c>
 8002260:	220f      	movs	r2, #15
 8002262:	402a      	ands	r2, r5
 8002264:	2a04      	cmp	r2, #4
 8002266:	d005      	beq.n	8002274 <__aeabi_dmul+0x32c>
 8002268:	1d2a      	adds	r2, r5, #4
 800226a:	42aa      	cmp	r2, r5
 800226c:	41ad      	sbcs	r5, r5
 800226e:	426d      	negs	r5, r5
 8002270:	1964      	adds	r4, r4, r5
 8002272:	0015      	movs	r5, r2
 8002274:	01e3      	lsls	r3, r4, #7
 8002276:	d504      	bpl.n	8002282 <__aeabi_dmul+0x33a>
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <__aeabi_dmul+0x3ac>)
 800227c:	00c9      	lsls	r1, r1, #3
 800227e:	4014      	ands	r4, r2
 8002280:	4461      	add	r1, ip
 8002282:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <__aeabi_dmul+0x3b0>)
 8002284:	4291      	cmp	r1, r2
 8002286:	dd00      	ble.n	800228a <__aeabi_dmul+0x342>
 8002288:	e724      	b.n	80020d4 <__aeabi_dmul+0x18c>
 800228a:	0762      	lsls	r2, r4, #29
 800228c:	08ed      	lsrs	r5, r5, #3
 800228e:	0264      	lsls	r4, r4, #9
 8002290:	0549      	lsls	r1, r1, #21
 8002292:	4315      	orrs	r5, r2
 8002294:	0b24      	lsrs	r4, r4, #12
 8002296:	0d4a      	lsrs	r2, r1, #21
 8002298:	e6c6      	b.n	8002028 <__aeabi_dmul+0xe0>
 800229a:	9701      	str	r7, [sp, #4]
 800229c:	e6b8      	b.n	8002010 <__aeabi_dmul+0xc8>
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <__aeabi_dmul+0x398>)
 80022a0:	2003      	movs	r0, #3
 80022a2:	4694      	mov	ip, r2
 80022a4:	4463      	add	r3, ip
 80022a6:	464a      	mov	r2, r9
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2303      	movs	r3, #3
 80022ac:	431a      	orrs	r2, r3
 80022ae:	4691      	mov	r9, r2
 80022b0:	4652      	mov	r2, sl
 80022b2:	e68a      	b.n	8001fca <__aeabi_dmul+0x82>
 80022b4:	4649      	mov	r1, r9
 80022b6:	2301      	movs	r3, #1
 80022b8:	4319      	orrs	r1, r3
 80022ba:	4689      	mov	r9, r1
 80022bc:	2600      	movs	r6, #0
 80022be:	2001      	movs	r0, #1
 80022c0:	e683      	b.n	8001fca <__aeabi_dmul+0x82>
 80022c2:	220c      	movs	r2, #12
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2303      	movs	r3, #3
 80022c8:	0005      	movs	r5, r0
 80022ca:	4691      	mov	r9, r2
 80022cc:	469b      	mov	fp, r3
 80022ce:	e65e      	b.n	8001f8e <__aeabi_dmul+0x46>
 80022d0:	2304      	movs	r3, #4
 80022d2:	4699      	mov	r9, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	2400      	movs	r4, #0
 80022dc:	469b      	mov	fp, r3
 80022de:	e656      	b.n	8001f8e <__aeabi_dmul+0x46>
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	fffffc01 	.word	0xfffffc01
 80022e8:	0800e4e0 	.word	0x0800e4e0
 80022ec:	fffffc0d 	.word	0xfffffc0d
 80022f0:	000003ff 	.word	0x000003ff
 80022f4:	feffffff 	.word	0xfeffffff
 80022f8:	000007fe 	.word	0x000007fe
 80022fc:	2300      	movs	r3, #0
 80022fe:	2480      	movs	r4, #128	; 0x80
 8002300:	2500      	movs	r5, #0
 8002302:	4a44      	ldr	r2, [pc, #272]	; (8002414 <__aeabi_dmul+0x4cc>)
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	0324      	lsls	r4, r4, #12
 8002308:	e68e      	b.n	8002028 <__aeabi_dmul+0xe0>
 800230a:	2001      	movs	r0, #1
 800230c:	1a40      	subs	r0, r0, r1
 800230e:	2838      	cmp	r0, #56	; 0x38
 8002310:	dd00      	ble.n	8002314 <__aeabi_dmul+0x3cc>
 8002312:	e686      	b.n	8002022 <__aeabi_dmul+0xda>
 8002314:	281f      	cmp	r0, #31
 8002316:	dd5b      	ble.n	80023d0 <__aeabi_dmul+0x488>
 8002318:	221f      	movs	r2, #31
 800231a:	0023      	movs	r3, r4
 800231c:	4252      	negs	r2, r2
 800231e:	1a51      	subs	r1, r2, r1
 8002320:	40cb      	lsrs	r3, r1
 8002322:	0019      	movs	r1, r3
 8002324:	2820      	cmp	r0, #32
 8002326:	d003      	beq.n	8002330 <__aeabi_dmul+0x3e8>
 8002328:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <__aeabi_dmul+0x4d0>)
 800232a:	4462      	add	r2, ip
 800232c:	4094      	lsls	r4, r2
 800232e:	4325      	orrs	r5, r4
 8002330:	1e6a      	subs	r2, r5, #1
 8002332:	4195      	sbcs	r5, r2
 8002334:	002a      	movs	r2, r5
 8002336:	430a      	orrs	r2, r1
 8002338:	2107      	movs	r1, #7
 800233a:	000d      	movs	r5, r1
 800233c:	2400      	movs	r4, #0
 800233e:	4015      	ands	r5, r2
 8002340:	4211      	tst	r1, r2
 8002342:	d05b      	beq.n	80023fc <__aeabi_dmul+0x4b4>
 8002344:	210f      	movs	r1, #15
 8002346:	2400      	movs	r4, #0
 8002348:	4011      	ands	r1, r2
 800234a:	2904      	cmp	r1, #4
 800234c:	d053      	beq.n	80023f6 <__aeabi_dmul+0x4ae>
 800234e:	1d11      	adds	r1, r2, #4
 8002350:	4291      	cmp	r1, r2
 8002352:	4192      	sbcs	r2, r2
 8002354:	4252      	negs	r2, r2
 8002356:	18a4      	adds	r4, r4, r2
 8002358:	000a      	movs	r2, r1
 800235a:	0223      	lsls	r3, r4, #8
 800235c:	d54b      	bpl.n	80023f6 <__aeabi_dmul+0x4ae>
 800235e:	2201      	movs	r2, #1
 8002360:	2400      	movs	r4, #0
 8002362:	2500      	movs	r5, #0
 8002364:	e660      	b.n	8002028 <__aeabi_dmul+0xe0>
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	031b      	lsls	r3, r3, #12
 800236a:	421c      	tst	r4, r3
 800236c:	d009      	beq.n	8002382 <__aeabi_dmul+0x43a>
 800236e:	421e      	tst	r6, r3
 8002370:	d107      	bne.n	8002382 <__aeabi_dmul+0x43a>
 8002372:	4333      	orrs	r3, r6
 8002374:	031c      	lsls	r4, r3, #12
 8002376:	4643      	mov	r3, r8
 8002378:	0015      	movs	r5, r2
 800237a:	0b24      	lsrs	r4, r4, #12
 800237c:	4a25      	ldr	r2, [pc, #148]	; (8002414 <__aeabi_dmul+0x4cc>)
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	e652      	b.n	8002028 <__aeabi_dmul+0xe0>
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	0312      	lsls	r2, r2, #12
 8002386:	4314      	orrs	r4, r2
 8002388:	0324      	lsls	r4, r4, #12
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <__aeabi_dmul+0x4cc>)
 800238c:	0b24      	lsrs	r4, r4, #12
 800238e:	9701      	str	r7, [sp, #4]
 8002390:	e64a      	b.n	8002028 <__aeabi_dmul+0xe0>
 8002392:	f000 fd4b 	bl	8002e2c <__clzsi2>
 8002396:	0003      	movs	r3, r0
 8002398:	001a      	movs	r2, r3
 800239a:	3215      	adds	r2, #21
 800239c:	3020      	adds	r0, #32
 800239e:	2a1c      	cmp	r2, #28
 80023a0:	dc00      	bgt.n	80023a4 <__aeabi_dmul+0x45c>
 80023a2:	e684      	b.n	80020ae <__aeabi_dmul+0x166>
 80023a4:	4656      	mov	r6, sl
 80023a6:	3b08      	subs	r3, #8
 80023a8:	2200      	movs	r2, #0
 80023aa:	409e      	lsls	r6, r3
 80023ac:	e689      	b.n	80020c2 <__aeabi_dmul+0x17a>
 80023ae:	f000 fd3d 	bl	8002e2c <__clzsi2>
 80023b2:	0001      	movs	r1, r0
 80023b4:	0002      	movs	r2, r0
 80023b6:	3115      	adds	r1, #21
 80023b8:	3220      	adds	r2, #32
 80023ba:	291c      	cmp	r1, #28
 80023bc:	dc00      	bgt.n	80023c0 <__aeabi_dmul+0x478>
 80023be:	e64e      	b.n	800205e <__aeabi_dmul+0x116>
 80023c0:	0034      	movs	r4, r6
 80023c2:	3808      	subs	r0, #8
 80023c4:	2500      	movs	r5, #0
 80023c6:	4084      	lsls	r4, r0
 80023c8:	e653      	b.n	8002072 <__aeabi_dmul+0x12a>
 80023ca:	9b00      	ldr	r3, [sp, #0]
 80023cc:	469c      	mov	ip, r3
 80023ce:	e741      	b.n	8002254 <__aeabi_dmul+0x30c>
 80023d0:	4912      	ldr	r1, [pc, #72]	; (800241c <__aeabi_dmul+0x4d4>)
 80023d2:	0022      	movs	r2, r4
 80023d4:	4461      	add	r1, ip
 80023d6:	002e      	movs	r6, r5
 80023d8:	408d      	lsls	r5, r1
 80023da:	408a      	lsls	r2, r1
 80023dc:	40c6      	lsrs	r6, r0
 80023de:	1e69      	subs	r1, r5, #1
 80023e0:	418d      	sbcs	r5, r1
 80023e2:	4332      	orrs	r2, r6
 80023e4:	432a      	orrs	r2, r5
 80023e6:	40c4      	lsrs	r4, r0
 80023e8:	0753      	lsls	r3, r2, #29
 80023ea:	d0b6      	beq.n	800235a <__aeabi_dmul+0x412>
 80023ec:	210f      	movs	r1, #15
 80023ee:	4011      	ands	r1, r2
 80023f0:	2904      	cmp	r1, #4
 80023f2:	d1ac      	bne.n	800234e <__aeabi_dmul+0x406>
 80023f4:	e7b1      	b.n	800235a <__aeabi_dmul+0x412>
 80023f6:	0765      	lsls	r5, r4, #29
 80023f8:	0264      	lsls	r4, r4, #9
 80023fa:	0b24      	lsrs	r4, r4, #12
 80023fc:	08d2      	lsrs	r2, r2, #3
 80023fe:	4315      	orrs	r5, r2
 8002400:	2200      	movs	r2, #0
 8002402:	e611      	b.n	8002028 <__aeabi_dmul+0xe0>
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	0312      	lsls	r2, r2, #12
 8002408:	4314      	orrs	r4, r2
 800240a:	0324      	lsls	r4, r4, #12
 800240c:	4a01      	ldr	r2, [pc, #4]	; (8002414 <__aeabi_dmul+0x4cc>)
 800240e:	0b24      	lsrs	r4, r4, #12
 8002410:	e60a      	b.n	8002028 <__aeabi_dmul+0xe0>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	000007ff 	.word	0x000007ff
 8002418:	0000043e 	.word	0x0000043e
 800241c:	0000041e 	.word	0x0000041e

08002420 <__aeabi_dsub>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	4657      	mov	r7, sl
 8002424:	464e      	mov	r6, r9
 8002426:	4645      	mov	r5, r8
 8002428:	46de      	mov	lr, fp
 800242a:	0004      	movs	r4, r0
 800242c:	b5e0      	push	{r5, r6, r7, lr}
 800242e:	001f      	movs	r7, r3
 8002430:	0010      	movs	r0, r2
 8002432:	030b      	lsls	r3, r1, #12
 8002434:	0f62      	lsrs	r2, r4, #29
 8002436:	004e      	lsls	r6, r1, #1
 8002438:	0fcd      	lsrs	r5, r1, #31
 800243a:	0a5b      	lsrs	r3, r3, #9
 800243c:	0339      	lsls	r1, r7, #12
 800243e:	4313      	orrs	r3, r2
 8002440:	0a49      	lsrs	r1, r1, #9
 8002442:	00e2      	lsls	r2, r4, #3
 8002444:	0f44      	lsrs	r4, r0, #29
 8002446:	4321      	orrs	r1, r4
 8002448:	4cc2      	ldr	r4, [pc, #776]	; (8002754 <__aeabi_dsub+0x334>)
 800244a:	4691      	mov	r9, r2
 800244c:	4692      	mov	sl, r2
 800244e:	00c0      	lsls	r0, r0, #3
 8002450:	007a      	lsls	r2, r7, #1
 8002452:	4680      	mov	r8, r0
 8002454:	0d76      	lsrs	r6, r6, #21
 8002456:	0d52      	lsrs	r2, r2, #21
 8002458:	0fff      	lsrs	r7, r7, #31
 800245a:	42a2      	cmp	r2, r4
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x40>
 800245e:	e0b4      	b.n	80025ca <__aeabi_dsub+0x1aa>
 8002460:	2401      	movs	r4, #1
 8002462:	4067      	eors	r7, r4
 8002464:	46bb      	mov	fp, r7
 8002466:	42bd      	cmp	r5, r7
 8002468:	d100      	bne.n	800246c <__aeabi_dsub+0x4c>
 800246a:	e088      	b.n	800257e <__aeabi_dsub+0x15e>
 800246c:	1ab4      	subs	r4, r6, r2
 800246e:	46a4      	mov	ip, r4
 8002470:	2c00      	cmp	r4, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x56>
 8002474:	e0b2      	b.n	80025dc <__aeabi_dsub+0x1bc>
 8002476:	2a00      	cmp	r2, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x5c>
 800247a:	e0c5      	b.n	8002608 <__aeabi_dsub+0x1e8>
 800247c:	4ab5      	ldr	r2, [pc, #724]	; (8002754 <__aeabi_dsub+0x334>)
 800247e:	4296      	cmp	r6, r2
 8002480:	d100      	bne.n	8002484 <__aeabi_dsub+0x64>
 8002482:	e28b      	b.n	800299c <__aeabi_dsub+0x57c>
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	0412      	lsls	r2, r2, #16
 8002488:	4311      	orrs	r1, r2
 800248a:	4662      	mov	r2, ip
 800248c:	2a38      	cmp	r2, #56	; 0x38
 800248e:	dd00      	ble.n	8002492 <__aeabi_dsub+0x72>
 8002490:	e1a1      	b.n	80027d6 <__aeabi_dsub+0x3b6>
 8002492:	2a1f      	cmp	r2, #31
 8002494:	dd00      	ble.n	8002498 <__aeabi_dsub+0x78>
 8002496:	e216      	b.n	80028c6 <__aeabi_dsub+0x4a6>
 8002498:	2720      	movs	r7, #32
 800249a:	000c      	movs	r4, r1
 800249c:	1abf      	subs	r7, r7, r2
 800249e:	40bc      	lsls	r4, r7
 80024a0:	0002      	movs	r2, r0
 80024a2:	46a0      	mov	r8, r4
 80024a4:	4664      	mov	r4, ip
 80024a6:	40b8      	lsls	r0, r7
 80024a8:	40e2      	lsrs	r2, r4
 80024aa:	4644      	mov	r4, r8
 80024ac:	4314      	orrs	r4, r2
 80024ae:	0002      	movs	r2, r0
 80024b0:	1e50      	subs	r0, r2, #1
 80024b2:	4182      	sbcs	r2, r0
 80024b4:	4660      	mov	r0, ip
 80024b6:	40c1      	lsrs	r1, r0
 80024b8:	4322      	orrs	r2, r4
 80024ba:	1a5b      	subs	r3, r3, r1
 80024bc:	4649      	mov	r1, r9
 80024be:	1a8c      	subs	r4, r1, r2
 80024c0:	45a1      	cmp	r9, r4
 80024c2:	4192      	sbcs	r2, r2
 80024c4:	4252      	negs	r2, r2
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	4698      	mov	r8, r3
 80024ca:	4643      	mov	r3, r8
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	d400      	bmi.n	80024d2 <__aeabi_dsub+0xb2>
 80024d0:	e117      	b.n	8002702 <__aeabi_dsub+0x2e2>
 80024d2:	4643      	mov	r3, r8
 80024d4:	025b      	lsls	r3, r3, #9
 80024d6:	0a5b      	lsrs	r3, r3, #9
 80024d8:	4698      	mov	r8, r3
 80024da:	4643      	mov	r3, r8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d100      	bne.n	80024e2 <__aeabi_dsub+0xc2>
 80024e0:	e16c      	b.n	80027bc <__aeabi_dsub+0x39c>
 80024e2:	4640      	mov	r0, r8
 80024e4:	f000 fca2 	bl	8002e2c <__clzsi2>
 80024e8:	0002      	movs	r2, r0
 80024ea:	3a08      	subs	r2, #8
 80024ec:	2120      	movs	r1, #32
 80024ee:	0020      	movs	r0, r4
 80024f0:	4643      	mov	r3, r8
 80024f2:	1a89      	subs	r1, r1, r2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	40c8      	lsrs	r0, r1
 80024f8:	4094      	lsls	r4, r2
 80024fa:	4303      	orrs	r3, r0
 80024fc:	4296      	cmp	r6, r2
 80024fe:	dd00      	ble.n	8002502 <__aeabi_dsub+0xe2>
 8002500:	e157      	b.n	80027b2 <__aeabi_dsub+0x392>
 8002502:	1b96      	subs	r6, r2, r6
 8002504:	1c71      	adds	r1, r6, #1
 8002506:	291f      	cmp	r1, #31
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0xec>
 800250a:	e1cb      	b.n	80028a4 <__aeabi_dsub+0x484>
 800250c:	2220      	movs	r2, #32
 800250e:	0018      	movs	r0, r3
 8002510:	0026      	movs	r6, r4
 8002512:	1a52      	subs	r2, r2, r1
 8002514:	4094      	lsls	r4, r2
 8002516:	4090      	lsls	r0, r2
 8002518:	40ce      	lsrs	r6, r1
 800251a:	40cb      	lsrs	r3, r1
 800251c:	1e62      	subs	r2, r4, #1
 800251e:	4194      	sbcs	r4, r2
 8002520:	4330      	orrs	r0, r6
 8002522:	4698      	mov	r8, r3
 8002524:	2600      	movs	r6, #0
 8002526:	4304      	orrs	r4, r0
 8002528:	0763      	lsls	r3, r4, #29
 800252a:	d009      	beq.n	8002540 <__aeabi_dsub+0x120>
 800252c:	230f      	movs	r3, #15
 800252e:	4023      	ands	r3, r4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d005      	beq.n	8002540 <__aeabi_dsub+0x120>
 8002534:	1d23      	adds	r3, r4, #4
 8002536:	42a3      	cmp	r3, r4
 8002538:	41a4      	sbcs	r4, r4
 800253a:	4264      	negs	r4, r4
 800253c:	44a0      	add	r8, r4
 800253e:	001c      	movs	r4, r3
 8002540:	4643      	mov	r3, r8
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	d400      	bmi.n	8002548 <__aeabi_dsub+0x128>
 8002546:	e0df      	b.n	8002708 <__aeabi_dsub+0x2e8>
 8002548:	4b82      	ldr	r3, [pc, #520]	; (8002754 <__aeabi_dsub+0x334>)
 800254a:	3601      	adds	r6, #1
 800254c:	429e      	cmp	r6, r3
 800254e:	d100      	bne.n	8002552 <__aeabi_dsub+0x132>
 8002550:	e0fb      	b.n	800274a <__aeabi_dsub+0x32a>
 8002552:	4642      	mov	r2, r8
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <__aeabi_dsub+0x338>)
 8002556:	08e4      	lsrs	r4, r4, #3
 8002558:	401a      	ands	r2, r3
 800255a:	0013      	movs	r3, r2
 800255c:	0571      	lsls	r1, r6, #21
 800255e:	0752      	lsls	r2, r2, #29
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4322      	orrs	r2, r4
 8002564:	0b1b      	lsrs	r3, r3, #12
 8002566:	0d49      	lsrs	r1, r1, #21
 8002568:	0509      	lsls	r1, r1, #20
 800256a:	07ed      	lsls	r5, r5, #31
 800256c:	4319      	orrs	r1, r3
 800256e:	4329      	orrs	r1, r5
 8002570:	0010      	movs	r0, r2
 8002572:	bcf0      	pop	{r4, r5, r6, r7}
 8002574:	46bb      	mov	fp, r7
 8002576:	46b2      	mov	sl, r6
 8002578:	46a9      	mov	r9, r5
 800257a:	46a0      	mov	r8, r4
 800257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800257e:	1ab4      	subs	r4, r6, r2
 8002580:	46a4      	mov	ip, r4
 8002582:	2c00      	cmp	r4, #0
 8002584:	dd58      	ble.n	8002638 <__aeabi_dsub+0x218>
 8002586:	2a00      	cmp	r2, #0
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x16c>
 800258a:	e09e      	b.n	80026ca <__aeabi_dsub+0x2aa>
 800258c:	4a71      	ldr	r2, [pc, #452]	; (8002754 <__aeabi_dsub+0x334>)
 800258e:	4296      	cmp	r6, r2
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x174>
 8002592:	e13b      	b.n	800280c <__aeabi_dsub+0x3ec>
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0412      	lsls	r2, r2, #16
 8002598:	4311      	orrs	r1, r2
 800259a:	4662      	mov	r2, ip
 800259c:	2a38      	cmp	r2, #56	; 0x38
 800259e:	dd00      	ble.n	80025a2 <__aeabi_dsub+0x182>
 80025a0:	e0c1      	b.n	8002726 <__aeabi_dsub+0x306>
 80025a2:	2a1f      	cmp	r2, #31
 80025a4:	dc00      	bgt.n	80025a8 <__aeabi_dsub+0x188>
 80025a6:	e1bb      	b.n	8002920 <__aeabi_dsub+0x500>
 80025a8:	000c      	movs	r4, r1
 80025aa:	3a20      	subs	r2, #32
 80025ac:	40d4      	lsrs	r4, r2
 80025ae:	0022      	movs	r2, r4
 80025b0:	4664      	mov	r4, ip
 80025b2:	2c20      	cmp	r4, #32
 80025b4:	d004      	beq.n	80025c0 <__aeabi_dsub+0x1a0>
 80025b6:	2740      	movs	r7, #64	; 0x40
 80025b8:	1b3f      	subs	r7, r7, r4
 80025ba:	40b9      	lsls	r1, r7
 80025bc:	4308      	orrs	r0, r1
 80025be:	4680      	mov	r8, r0
 80025c0:	4644      	mov	r4, r8
 80025c2:	1e61      	subs	r1, r4, #1
 80025c4:	418c      	sbcs	r4, r1
 80025c6:	4314      	orrs	r4, r2
 80025c8:	e0b1      	b.n	800272e <__aeabi_dsub+0x30e>
 80025ca:	000c      	movs	r4, r1
 80025cc:	4304      	orrs	r4, r0
 80025ce:	d02a      	beq.n	8002626 <__aeabi_dsub+0x206>
 80025d0:	46bb      	mov	fp, r7
 80025d2:	42bd      	cmp	r5, r7
 80025d4:	d02d      	beq.n	8002632 <__aeabi_dsub+0x212>
 80025d6:	4c61      	ldr	r4, [pc, #388]	; (800275c <__aeabi_dsub+0x33c>)
 80025d8:	46a4      	mov	ip, r4
 80025da:	44b4      	add	ip, r6
 80025dc:	4664      	mov	r4, ip
 80025de:	2c00      	cmp	r4, #0
 80025e0:	d05c      	beq.n	800269c <__aeabi_dsub+0x27c>
 80025e2:	1b94      	subs	r4, r2, r6
 80025e4:	46a4      	mov	ip, r4
 80025e6:	2e00      	cmp	r6, #0
 80025e8:	d000      	beq.n	80025ec <__aeabi_dsub+0x1cc>
 80025ea:	e115      	b.n	8002818 <__aeabi_dsub+0x3f8>
 80025ec:	464d      	mov	r5, r9
 80025ee:	431d      	orrs	r5, r3
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x1d4>
 80025f2:	e1c3      	b.n	800297c <__aeabi_dsub+0x55c>
 80025f4:	1e65      	subs	r5, r4, #1
 80025f6:	2c01      	cmp	r4, #1
 80025f8:	d100      	bne.n	80025fc <__aeabi_dsub+0x1dc>
 80025fa:	e20c      	b.n	8002a16 <__aeabi_dsub+0x5f6>
 80025fc:	4e55      	ldr	r6, [pc, #340]	; (8002754 <__aeabi_dsub+0x334>)
 80025fe:	42b4      	cmp	r4, r6
 8002600:	d100      	bne.n	8002604 <__aeabi_dsub+0x1e4>
 8002602:	e1f8      	b.n	80029f6 <__aeabi_dsub+0x5d6>
 8002604:	46ac      	mov	ip, r5
 8002606:	e10e      	b.n	8002826 <__aeabi_dsub+0x406>
 8002608:	000a      	movs	r2, r1
 800260a:	4302      	orrs	r2, r0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x1f0>
 800260e:	e136      	b.n	800287e <__aeabi_dsub+0x45e>
 8002610:	0022      	movs	r2, r4
 8002612:	3a01      	subs	r2, #1
 8002614:	2c01      	cmp	r4, #1
 8002616:	d100      	bne.n	800261a <__aeabi_dsub+0x1fa>
 8002618:	e1c6      	b.n	80029a8 <__aeabi_dsub+0x588>
 800261a:	4c4e      	ldr	r4, [pc, #312]	; (8002754 <__aeabi_dsub+0x334>)
 800261c:	45a4      	cmp	ip, r4
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x202>
 8002620:	e0f4      	b.n	800280c <__aeabi_dsub+0x3ec>
 8002622:	4694      	mov	ip, r2
 8002624:	e731      	b.n	800248a <__aeabi_dsub+0x6a>
 8002626:	2401      	movs	r4, #1
 8002628:	4067      	eors	r7, r4
 800262a:	46bb      	mov	fp, r7
 800262c:	42bd      	cmp	r5, r7
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x212>
 8002630:	e71c      	b.n	800246c <__aeabi_dsub+0x4c>
 8002632:	4c4a      	ldr	r4, [pc, #296]	; (800275c <__aeabi_dsub+0x33c>)
 8002634:	46a4      	mov	ip, r4
 8002636:	44b4      	add	ip, r6
 8002638:	4664      	mov	r4, ip
 800263a:	2c00      	cmp	r4, #0
 800263c:	d100      	bne.n	8002640 <__aeabi_dsub+0x220>
 800263e:	e0cf      	b.n	80027e0 <__aeabi_dsub+0x3c0>
 8002640:	1b94      	subs	r4, r2, r6
 8002642:	46a4      	mov	ip, r4
 8002644:	2e00      	cmp	r6, #0
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x22a>
 8002648:	e15c      	b.n	8002904 <__aeabi_dsub+0x4e4>
 800264a:	4e42      	ldr	r6, [pc, #264]	; (8002754 <__aeabi_dsub+0x334>)
 800264c:	42b2      	cmp	r2, r6
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x232>
 8002650:	e1ec      	b.n	8002a2c <__aeabi_dsub+0x60c>
 8002652:	2680      	movs	r6, #128	; 0x80
 8002654:	0436      	lsls	r6, r6, #16
 8002656:	4333      	orrs	r3, r6
 8002658:	4664      	mov	r4, ip
 800265a:	2c38      	cmp	r4, #56	; 0x38
 800265c:	dd00      	ble.n	8002660 <__aeabi_dsub+0x240>
 800265e:	e1b3      	b.n	80029c8 <__aeabi_dsub+0x5a8>
 8002660:	2c1f      	cmp	r4, #31
 8002662:	dd00      	ble.n	8002666 <__aeabi_dsub+0x246>
 8002664:	e238      	b.n	8002ad8 <__aeabi_dsub+0x6b8>
 8002666:	2620      	movs	r6, #32
 8002668:	1b36      	subs	r6, r6, r4
 800266a:	001c      	movs	r4, r3
 800266c:	40b4      	lsls	r4, r6
 800266e:	464f      	mov	r7, r9
 8002670:	46a0      	mov	r8, r4
 8002672:	4664      	mov	r4, ip
 8002674:	40e7      	lsrs	r7, r4
 8002676:	4644      	mov	r4, r8
 8002678:	433c      	orrs	r4, r7
 800267a:	464f      	mov	r7, r9
 800267c:	40b7      	lsls	r7, r6
 800267e:	003e      	movs	r6, r7
 8002680:	1e77      	subs	r7, r6, #1
 8002682:	41be      	sbcs	r6, r7
 8002684:	4334      	orrs	r4, r6
 8002686:	4666      	mov	r6, ip
 8002688:	40f3      	lsrs	r3, r6
 800268a:	18c9      	adds	r1, r1, r3
 800268c:	1824      	adds	r4, r4, r0
 800268e:	4284      	cmp	r4, r0
 8002690:	419b      	sbcs	r3, r3
 8002692:	425b      	negs	r3, r3
 8002694:	4698      	mov	r8, r3
 8002696:	0016      	movs	r6, r2
 8002698:	4488      	add	r8, r1
 800269a:	e04e      	b.n	800273a <__aeabi_dsub+0x31a>
 800269c:	4a30      	ldr	r2, [pc, #192]	; (8002760 <__aeabi_dsub+0x340>)
 800269e:	1c74      	adds	r4, r6, #1
 80026a0:	4214      	tst	r4, r2
 80026a2:	d000      	beq.n	80026a6 <__aeabi_dsub+0x286>
 80026a4:	e0d6      	b.n	8002854 <__aeabi_dsub+0x434>
 80026a6:	464a      	mov	r2, r9
 80026a8:	431a      	orrs	r2, r3
 80026aa:	2e00      	cmp	r6, #0
 80026ac:	d000      	beq.n	80026b0 <__aeabi_dsub+0x290>
 80026ae:	e15b      	b.n	8002968 <__aeabi_dsub+0x548>
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0x296>
 80026b4:	e1a5      	b.n	8002a02 <__aeabi_dsub+0x5e2>
 80026b6:	000a      	movs	r2, r1
 80026b8:	4302      	orrs	r2, r0
 80026ba:	d000      	beq.n	80026be <__aeabi_dsub+0x29e>
 80026bc:	e1bb      	b.n	8002a36 <__aeabi_dsub+0x616>
 80026be:	464a      	mov	r2, r9
 80026c0:	0759      	lsls	r1, r3, #29
 80026c2:	08d2      	lsrs	r2, r2, #3
 80026c4:	430a      	orrs	r2, r1
 80026c6:	08db      	lsrs	r3, r3, #3
 80026c8:	e027      	b.n	800271a <__aeabi_dsub+0x2fa>
 80026ca:	000a      	movs	r2, r1
 80026cc:	4302      	orrs	r2, r0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x2b2>
 80026d0:	e174      	b.n	80029bc <__aeabi_dsub+0x59c>
 80026d2:	0022      	movs	r2, r4
 80026d4:	3a01      	subs	r2, #1
 80026d6:	2c01      	cmp	r4, #1
 80026d8:	d005      	beq.n	80026e6 <__aeabi_dsub+0x2c6>
 80026da:	4c1e      	ldr	r4, [pc, #120]	; (8002754 <__aeabi_dsub+0x334>)
 80026dc:	45a4      	cmp	ip, r4
 80026de:	d100      	bne.n	80026e2 <__aeabi_dsub+0x2c2>
 80026e0:	e094      	b.n	800280c <__aeabi_dsub+0x3ec>
 80026e2:	4694      	mov	ip, r2
 80026e4:	e759      	b.n	800259a <__aeabi_dsub+0x17a>
 80026e6:	4448      	add	r0, r9
 80026e8:	4548      	cmp	r0, r9
 80026ea:	4192      	sbcs	r2, r2
 80026ec:	185b      	adds	r3, r3, r1
 80026ee:	4698      	mov	r8, r3
 80026f0:	0004      	movs	r4, r0
 80026f2:	4252      	negs	r2, r2
 80026f4:	4490      	add	r8, r2
 80026f6:	4643      	mov	r3, r8
 80026f8:	2602      	movs	r6, #2
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	d500      	bpl.n	8002700 <__aeabi_dsub+0x2e0>
 80026fe:	e0c4      	b.n	800288a <__aeabi_dsub+0x46a>
 8002700:	3e01      	subs	r6, #1
 8002702:	0763      	lsls	r3, r4, #29
 8002704:	d000      	beq.n	8002708 <__aeabi_dsub+0x2e8>
 8002706:	e711      	b.n	800252c <__aeabi_dsub+0x10c>
 8002708:	4643      	mov	r3, r8
 800270a:	46b4      	mov	ip, r6
 800270c:	0759      	lsls	r1, r3, #29
 800270e:	08e2      	lsrs	r2, r4, #3
 8002710:	430a      	orrs	r2, r1
 8002712:	08db      	lsrs	r3, r3, #3
 8002714:	490f      	ldr	r1, [pc, #60]	; (8002754 <__aeabi_dsub+0x334>)
 8002716:	458c      	cmp	ip, r1
 8002718:	d040      	beq.n	800279c <__aeabi_dsub+0x37c>
 800271a:	4661      	mov	r1, ip
 800271c:	031b      	lsls	r3, r3, #12
 800271e:	0549      	lsls	r1, r1, #21
 8002720:	0b1b      	lsrs	r3, r3, #12
 8002722:	0d49      	lsrs	r1, r1, #21
 8002724:	e720      	b.n	8002568 <__aeabi_dsub+0x148>
 8002726:	4301      	orrs	r1, r0
 8002728:	000c      	movs	r4, r1
 800272a:	1e61      	subs	r1, r4, #1
 800272c:	418c      	sbcs	r4, r1
 800272e:	444c      	add	r4, r9
 8002730:	454c      	cmp	r4, r9
 8002732:	4192      	sbcs	r2, r2
 8002734:	4252      	negs	r2, r2
 8002736:	4690      	mov	r8, r2
 8002738:	4498      	add	r8, r3
 800273a:	4643      	mov	r3, r8
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	d5e0      	bpl.n	8002702 <__aeabi_dsub+0x2e2>
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <__aeabi_dsub+0x334>)
 8002742:	3601      	adds	r6, #1
 8002744:	429e      	cmp	r6, r3
 8002746:	d000      	beq.n	800274a <__aeabi_dsub+0x32a>
 8002748:	e09f      	b.n	800288a <__aeabi_dsub+0x46a>
 800274a:	0031      	movs	r1, r6
 800274c:	2300      	movs	r3, #0
 800274e:	2200      	movs	r2, #0
 8002750:	e70a      	b.n	8002568 <__aeabi_dsub+0x148>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	000007ff 	.word	0x000007ff
 8002758:	ff7fffff 	.word	0xff7fffff
 800275c:	fffff801 	.word	0xfffff801
 8002760:	000007fe 	.word	0x000007fe
 8002764:	2a00      	cmp	r2, #0
 8002766:	d100      	bne.n	800276a <__aeabi_dsub+0x34a>
 8002768:	e160      	b.n	8002a2c <__aeabi_dsub+0x60c>
 800276a:	000a      	movs	r2, r1
 800276c:	4302      	orrs	r2, r0
 800276e:	d04d      	beq.n	800280c <__aeabi_dsub+0x3ec>
 8002770:	464a      	mov	r2, r9
 8002772:	075c      	lsls	r4, r3, #29
 8002774:	08d2      	lsrs	r2, r2, #3
 8002776:	4322      	orrs	r2, r4
 8002778:	2480      	movs	r4, #128	; 0x80
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	0324      	lsls	r4, r4, #12
 800277e:	4223      	tst	r3, r4
 8002780:	d007      	beq.n	8002792 <__aeabi_dsub+0x372>
 8002782:	08ce      	lsrs	r6, r1, #3
 8002784:	4226      	tst	r6, r4
 8002786:	d104      	bne.n	8002792 <__aeabi_dsub+0x372>
 8002788:	465d      	mov	r5, fp
 800278a:	0033      	movs	r3, r6
 800278c:	08c2      	lsrs	r2, r0, #3
 800278e:	0749      	lsls	r1, r1, #29
 8002790:	430a      	orrs	r2, r1
 8002792:	0f51      	lsrs	r1, r2, #29
 8002794:	00d2      	lsls	r2, r2, #3
 8002796:	08d2      	lsrs	r2, r2, #3
 8002798:	0749      	lsls	r1, r1, #29
 800279a:	430a      	orrs	r2, r1
 800279c:	0011      	movs	r1, r2
 800279e:	4319      	orrs	r1, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x384>
 80027a2:	e1c8      	b.n	8002b36 <__aeabi_dsub+0x716>
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	0309      	lsls	r1, r1, #12
 80027a8:	430b      	orrs	r3, r1
 80027aa:	031b      	lsls	r3, r3, #12
 80027ac:	49d5      	ldr	r1, [pc, #852]	; (8002b04 <__aeabi_dsub+0x6e4>)
 80027ae:	0b1b      	lsrs	r3, r3, #12
 80027b0:	e6da      	b.n	8002568 <__aeabi_dsub+0x148>
 80027b2:	49d5      	ldr	r1, [pc, #852]	; (8002b08 <__aeabi_dsub+0x6e8>)
 80027b4:	1ab6      	subs	r6, r6, r2
 80027b6:	400b      	ands	r3, r1
 80027b8:	4698      	mov	r8, r3
 80027ba:	e6b5      	b.n	8002528 <__aeabi_dsub+0x108>
 80027bc:	0020      	movs	r0, r4
 80027be:	f000 fb35 	bl	8002e2c <__clzsi2>
 80027c2:	0002      	movs	r2, r0
 80027c4:	3218      	adds	r2, #24
 80027c6:	2a1f      	cmp	r2, #31
 80027c8:	dc00      	bgt.n	80027cc <__aeabi_dsub+0x3ac>
 80027ca:	e68f      	b.n	80024ec <__aeabi_dsub+0xcc>
 80027cc:	0023      	movs	r3, r4
 80027ce:	3808      	subs	r0, #8
 80027d0:	4083      	lsls	r3, r0
 80027d2:	2400      	movs	r4, #0
 80027d4:	e692      	b.n	80024fc <__aeabi_dsub+0xdc>
 80027d6:	4308      	orrs	r0, r1
 80027d8:	0002      	movs	r2, r0
 80027da:	1e50      	subs	r0, r2, #1
 80027dc:	4182      	sbcs	r2, r0
 80027de:	e66d      	b.n	80024bc <__aeabi_dsub+0x9c>
 80027e0:	4cca      	ldr	r4, [pc, #808]	; (8002b0c <__aeabi_dsub+0x6ec>)
 80027e2:	1c72      	adds	r2, r6, #1
 80027e4:	4222      	tst	r2, r4
 80027e6:	d000      	beq.n	80027ea <__aeabi_dsub+0x3ca>
 80027e8:	e0ad      	b.n	8002946 <__aeabi_dsub+0x526>
 80027ea:	464a      	mov	r2, r9
 80027ec:	431a      	orrs	r2, r3
 80027ee:	2e00      	cmp	r6, #0
 80027f0:	d1b8      	bne.n	8002764 <__aeabi_dsub+0x344>
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x3d8>
 80027f6:	e158      	b.n	8002aaa <__aeabi_dsub+0x68a>
 80027f8:	000a      	movs	r2, r1
 80027fa:	4302      	orrs	r2, r0
 80027fc:	d000      	beq.n	8002800 <__aeabi_dsub+0x3e0>
 80027fe:	e159      	b.n	8002ab4 <__aeabi_dsub+0x694>
 8002800:	464a      	mov	r2, r9
 8002802:	0759      	lsls	r1, r3, #29
 8002804:	08d2      	lsrs	r2, r2, #3
 8002806:	430a      	orrs	r2, r1
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	e786      	b.n	800271a <__aeabi_dsub+0x2fa>
 800280c:	464a      	mov	r2, r9
 800280e:	0759      	lsls	r1, r3, #29
 8002810:	08d2      	lsrs	r2, r2, #3
 8002812:	430a      	orrs	r2, r1
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	e7c1      	b.n	800279c <__aeabi_dsub+0x37c>
 8002818:	4dba      	ldr	r5, [pc, #744]	; (8002b04 <__aeabi_dsub+0x6e4>)
 800281a:	42aa      	cmp	r2, r5
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x400>
 800281e:	e11e      	b.n	8002a5e <__aeabi_dsub+0x63e>
 8002820:	2580      	movs	r5, #128	; 0x80
 8002822:	042d      	lsls	r5, r5, #16
 8002824:	432b      	orrs	r3, r5
 8002826:	4664      	mov	r4, ip
 8002828:	2c38      	cmp	r4, #56	; 0x38
 800282a:	dc5d      	bgt.n	80028e8 <__aeabi_dsub+0x4c8>
 800282c:	2c1f      	cmp	r4, #31
 800282e:	dd00      	ble.n	8002832 <__aeabi_dsub+0x412>
 8002830:	e0d0      	b.n	80029d4 <__aeabi_dsub+0x5b4>
 8002832:	2520      	movs	r5, #32
 8002834:	4667      	mov	r7, ip
 8002836:	1b2d      	subs	r5, r5, r4
 8002838:	464e      	mov	r6, r9
 800283a:	001c      	movs	r4, r3
 800283c:	40fe      	lsrs	r6, r7
 800283e:	40ac      	lsls	r4, r5
 8002840:	4334      	orrs	r4, r6
 8002842:	464e      	mov	r6, r9
 8002844:	40ae      	lsls	r6, r5
 8002846:	0035      	movs	r5, r6
 8002848:	40fb      	lsrs	r3, r7
 800284a:	1e6e      	subs	r6, r5, #1
 800284c:	41b5      	sbcs	r5, r6
 800284e:	1ac9      	subs	r1, r1, r3
 8002850:	432c      	orrs	r4, r5
 8002852:	e04e      	b.n	80028f2 <__aeabi_dsub+0x4d2>
 8002854:	464a      	mov	r2, r9
 8002856:	1a14      	subs	r4, r2, r0
 8002858:	45a1      	cmp	r9, r4
 800285a:	4192      	sbcs	r2, r2
 800285c:	4252      	negs	r2, r2
 800285e:	4690      	mov	r8, r2
 8002860:	1a5f      	subs	r7, r3, r1
 8002862:	003a      	movs	r2, r7
 8002864:	4647      	mov	r7, r8
 8002866:	1bd2      	subs	r2, r2, r7
 8002868:	4690      	mov	r8, r2
 800286a:	0212      	lsls	r2, r2, #8
 800286c:	d500      	bpl.n	8002870 <__aeabi_dsub+0x450>
 800286e:	e08b      	b.n	8002988 <__aeabi_dsub+0x568>
 8002870:	4642      	mov	r2, r8
 8002872:	4322      	orrs	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x458>
 8002876:	e630      	b.n	80024da <__aeabi_dsub+0xba>
 8002878:	2300      	movs	r3, #0
 800287a:	2500      	movs	r5, #0
 800287c:	e74d      	b.n	800271a <__aeabi_dsub+0x2fa>
 800287e:	464a      	mov	r2, r9
 8002880:	0759      	lsls	r1, r3, #29
 8002882:	08d2      	lsrs	r2, r2, #3
 8002884:	430a      	orrs	r2, r1
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	e744      	b.n	8002714 <__aeabi_dsub+0x2f4>
 800288a:	4642      	mov	r2, r8
 800288c:	4b9e      	ldr	r3, [pc, #632]	; (8002b08 <__aeabi_dsub+0x6e8>)
 800288e:	0861      	lsrs	r1, r4, #1
 8002890:	401a      	ands	r2, r3
 8002892:	0013      	movs	r3, r2
 8002894:	2201      	movs	r2, #1
 8002896:	4014      	ands	r4, r2
 8002898:	430c      	orrs	r4, r1
 800289a:	07da      	lsls	r2, r3, #31
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	4698      	mov	r8, r3
 80028a0:	4314      	orrs	r4, r2
 80028a2:	e641      	b.n	8002528 <__aeabi_dsub+0x108>
 80028a4:	001a      	movs	r2, r3
 80028a6:	3e1f      	subs	r6, #31
 80028a8:	40f2      	lsrs	r2, r6
 80028aa:	0016      	movs	r6, r2
 80028ac:	2920      	cmp	r1, #32
 80028ae:	d003      	beq.n	80028b8 <__aeabi_dsub+0x498>
 80028b0:	2240      	movs	r2, #64	; 0x40
 80028b2:	1a51      	subs	r1, r2, r1
 80028b4:	408b      	lsls	r3, r1
 80028b6:	431c      	orrs	r4, r3
 80028b8:	1e62      	subs	r2, r4, #1
 80028ba:	4194      	sbcs	r4, r2
 80028bc:	2300      	movs	r3, #0
 80028be:	4334      	orrs	r4, r6
 80028c0:	4698      	mov	r8, r3
 80028c2:	2600      	movs	r6, #0
 80028c4:	e71d      	b.n	8002702 <__aeabi_dsub+0x2e2>
 80028c6:	000c      	movs	r4, r1
 80028c8:	3a20      	subs	r2, #32
 80028ca:	40d4      	lsrs	r4, r2
 80028cc:	0022      	movs	r2, r4
 80028ce:	4664      	mov	r4, ip
 80028d0:	2c20      	cmp	r4, #32
 80028d2:	d004      	beq.n	80028de <__aeabi_dsub+0x4be>
 80028d4:	2740      	movs	r7, #64	; 0x40
 80028d6:	1b3f      	subs	r7, r7, r4
 80028d8:	40b9      	lsls	r1, r7
 80028da:	4308      	orrs	r0, r1
 80028dc:	4680      	mov	r8, r0
 80028de:	4644      	mov	r4, r8
 80028e0:	1e61      	subs	r1, r4, #1
 80028e2:	418c      	sbcs	r4, r1
 80028e4:	4322      	orrs	r2, r4
 80028e6:	e5e9      	b.n	80024bc <__aeabi_dsub+0x9c>
 80028e8:	464c      	mov	r4, r9
 80028ea:	4323      	orrs	r3, r4
 80028ec:	001c      	movs	r4, r3
 80028ee:	1e63      	subs	r3, r4, #1
 80028f0:	419c      	sbcs	r4, r3
 80028f2:	1b04      	subs	r4, r0, r4
 80028f4:	42a0      	cmp	r0, r4
 80028f6:	419b      	sbcs	r3, r3
 80028f8:	425b      	negs	r3, r3
 80028fa:	1acb      	subs	r3, r1, r3
 80028fc:	4698      	mov	r8, r3
 80028fe:	465d      	mov	r5, fp
 8002900:	0016      	movs	r6, r2
 8002902:	e5e2      	b.n	80024ca <__aeabi_dsub+0xaa>
 8002904:	464e      	mov	r6, r9
 8002906:	431e      	orrs	r6, r3
 8002908:	d100      	bne.n	800290c <__aeabi_dsub+0x4ec>
 800290a:	e0ae      	b.n	8002a6a <__aeabi_dsub+0x64a>
 800290c:	1e66      	subs	r6, r4, #1
 800290e:	2c01      	cmp	r4, #1
 8002910:	d100      	bne.n	8002914 <__aeabi_dsub+0x4f4>
 8002912:	e0fd      	b.n	8002b10 <__aeabi_dsub+0x6f0>
 8002914:	4f7b      	ldr	r7, [pc, #492]	; (8002b04 <__aeabi_dsub+0x6e4>)
 8002916:	42bc      	cmp	r4, r7
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x4fc>
 800291a:	e107      	b.n	8002b2c <__aeabi_dsub+0x70c>
 800291c:	46b4      	mov	ip, r6
 800291e:	e69b      	b.n	8002658 <__aeabi_dsub+0x238>
 8002920:	4664      	mov	r4, ip
 8002922:	2220      	movs	r2, #32
 8002924:	1b12      	subs	r2, r2, r4
 8002926:	000c      	movs	r4, r1
 8002928:	4094      	lsls	r4, r2
 800292a:	0007      	movs	r7, r0
 800292c:	4090      	lsls	r0, r2
 800292e:	46a0      	mov	r8, r4
 8002930:	4664      	mov	r4, ip
 8002932:	1e42      	subs	r2, r0, #1
 8002934:	4190      	sbcs	r0, r2
 8002936:	4662      	mov	r2, ip
 8002938:	40e7      	lsrs	r7, r4
 800293a:	4644      	mov	r4, r8
 800293c:	40d1      	lsrs	r1, r2
 800293e:	433c      	orrs	r4, r7
 8002940:	4304      	orrs	r4, r0
 8002942:	185b      	adds	r3, r3, r1
 8002944:	e6f3      	b.n	800272e <__aeabi_dsub+0x30e>
 8002946:	4c6f      	ldr	r4, [pc, #444]	; (8002b04 <__aeabi_dsub+0x6e4>)
 8002948:	42a2      	cmp	r2, r4
 800294a:	d100      	bne.n	800294e <__aeabi_dsub+0x52e>
 800294c:	e0d5      	b.n	8002afa <__aeabi_dsub+0x6da>
 800294e:	4448      	add	r0, r9
 8002950:	185b      	adds	r3, r3, r1
 8002952:	4548      	cmp	r0, r9
 8002954:	4189      	sbcs	r1, r1
 8002956:	4249      	negs	r1, r1
 8002958:	185b      	adds	r3, r3, r1
 800295a:	07dc      	lsls	r4, r3, #31
 800295c:	0840      	lsrs	r0, r0, #1
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	4698      	mov	r8, r3
 8002962:	0016      	movs	r6, r2
 8002964:	4304      	orrs	r4, r0
 8002966:	e6cc      	b.n	8002702 <__aeabi_dsub+0x2e2>
 8002968:	2a00      	cmp	r2, #0
 800296a:	d000      	beq.n	800296e <__aeabi_dsub+0x54e>
 800296c:	e082      	b.n	8002a74 <__aeabi_dsub+0x654>
 800296e:	000a      	movs	r2, r1
 8002970:	4302      	orrs	r2, r0
 8002972:	d140      	bne.n	80029f6 <__aeabi_dsub+0x5d6>
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	2500      	movs	r5, #0
 8002978:	031b      	lsls	r3, r3, #12
 800297a:	e713      	b.n	80027a4 <__aeabi_dsub+0x384>
 800297c:	074b      	lsls	r3, r1, #29
 800297e:	08c2      	lsrs	r2, r0, #3
 8002980:	431a      	orrs	r2, r3
 8002982:	465d      	mov	r5, fp
 8002984:	08cb      	lsrs	r3, r1, #3
 8002986:	e6c5      	b.n	8002714 <__aeabi_dsub+0x2f4>
 8002988:	464a      	mov	r2, r9
 800298a:	1a84      	subs	r4, r0, r2
 800298c:	42a0      	cmp	r0, r4
 800298e:	4192      	sbcs	r2, r2
 8002990:	1acb      	subs	r3, r1, r3
 8002992:	4252      	negs	r2, r2
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	4698      	mov	r8, r3
 8002998:	465d      	mov	r5, fp
 800299a:	e59e      	b.n	80024da <__aeabi_dsub+0xba>
 800299c:	464a      	mov	r2, r9
 800299e:	0759      	lsls	r1, r3, #29
 80029a0:	08d2      	lsrs	r2, r2, #3
 80029a2:	430a      	orrs	r2, r1
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	e6f9      	b.n	800279c <__aeabi_dsub+0x37c>
 80029a8:	464a      	mov	r2, r9
 80029aa:	1a14      	subs	r4, r2, r0
 80029ac:	45a1      	cmp	r9, r4
 80029ae:	4192      	sbcs	r2, r2
 80029b0:	1a5b      	subs	r3, r3, r1
 80029b2:	4252      	negs	r2, r2
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	4698      	mov	r8, r3
 80029b8:	2601      	movs	r6, #1
 80029ba:	e586      	b.n	80024ca <__aeabi_dsub+0xaa>
 80029bc:	464a      	mov	r2, r9
 80029be:	0759      	lsls	r1, r3, #29
 80029c0:	08d2      	lsrs	r2, r2, #3
 80029c2:	430a      	orrs	r2, r1
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	e6a5      	b.n	8002714 <__aeabi_dsub+0x2f4>
 80029c8:	464c      	mov	r4, r9
 80029ca:	4323      	orrs	r3, r4
 80029cc:	001c      	movs	r4, r3
 80029ce:	1e63      	subs	r3, r4, #1
 80029d0:	419c      	sbcs	r4, r3
 80029d2:	e65b      	b.n	800268c <__aeabi_dsub+0x26c>
 80029d4:	4665      	mov	r5, ip
 80029d6:	001e      	movs	r6, r3
 80029d8:	3d20      	subs	r5, #32
 80029da:	40ee      	lsrs	r6, r5
 80029dc:	2c20      	cmp	r4, #32
 80029de:	d005      	beq.n	80029ec <__aeabi_dsub+0x5cc>
 80029e0:	2540      	movs	r5, #64	; 0x40
 80029e2:	1b2d      	subs	r5, r5, r4
 80029e4:	40ab      	lsls	r3, r5
 80029e6:	464c      	mov	r4, r9
 80029e8:	431c      	orrs	r4, r3
 80029ea:	46a2      	mov	sl, r4
 80029ec:	4654      	mov	r4, sl
 80029ee:	1e63      	subs	r3, r4, #1
 80029f0:	419c      	sbcs	r4, r3
 80029f2:	4334      	orrs	r4, r6
 80029f4:	e77d      	b.n	80028f2 <__aeabi_dsub+0x4d2>
 80029f6:	074b      	lsls	r3, r1, #29
 80029f8:	08c2      	lsrs	r2, r0, #3
 80029fa:	431a      	orrs	r2, r3
 80029fc:	465d      	mov	r5, fp
 80029fe:	08cb      	lsrs	r3, r1, #3
 8002a00:	e6cc      	b.n	800279c <__aeabi_dsub+0x37c>
 8002a02:	000a      	movs	r2, r1
 8002a04:	4302      	orrs	r2, r0
 8002a06:	d100      	bne.n	8002a0a <__aeabi_dsub+0x5ea>
 8002a08:	e736      	b.n	8002878 <__aeabi_dsub+0x458>
 8002a0a:	074b      	lsls	r3, r1, #29
 8002a0c:	08c2      	lsrs	r2, r0, #3
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	465d      	mov	r5, fp
 8002a12:	08cb      	lsrs	r3, r1, #3
 8002a14:	e681      	b.n	800271a <__aeabi_dsub+0x2fa>
 8002a16:	464a      	mov	r2, r9
 8002a18:	1a84      	subs	r4, r0, r2
 8002a1a:	42a0      	cmp	r0, r4
 8002a1c:	4192      	sbcs	r2, r2
 8002a1e:	1acb      	subs	r3, r1, r3
 8002a20:	4252      	negs	r2, r2
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	4698      	mov	r8, r3
 8002a26:	465d      	mov	r5, fp
 8002a28:	2601      	movs	r6, #1
 8002a2a:	e54e      	b.n	80024ca <__aeabi_dsub+0xaa>
 8002a2c:	074b      	lsls	r3, r1, #29
 8002a2e:	08c2      	lsrs	r2, r0, #3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	08cb      	lsrs	r3, r1, #3
 8002a34:	e6b2      	b.n	800279c <__aeabi_dsub+0x37c>
 8002a36:	464a      	mov	r2, r9
 8002a38:	1a14      	subs	r4, r2, r0
 8002a3a:	45a1      	cmp	r9, r4
 8002a3c:	4192      	sbcs	r2, r2
 8002a3e:	1a5f      	subs	r7, r3, r1
 8002a40:	4252      	negs	r2, r2
 8002a42:	1aba      	subs	r2, r7, r2
 8002a44:	4690      	mov	r8, r2
 8002a46:	0212      	lsls	r2, r2, #8
 8002a48:	d56b      	bpl.n	8002b22 <__aeabi_dsub+0x702>
 8002a4a:	464a      	mov	r2, r9
 8002a4c:	1a84      	subs	r4, r0, r2
 8002a4e:	42a0      	cmp	r0, r4
 8002a50:	4192      	sbcs	r2, r2
 8002a52:	1acb      	subs	r3, r1, r3
 8002a54:	4252      	negs	r2, r2
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	4698      	mov	r8, r3
 8002a5a:	465d      	mov	r5, fp
 8002a5c:	e564      	b.n	8002528 <__aeabi_dsub+0x108>
 8002a5e:	074b      	lsls	r3, r1, #29
 8002a60:	08c2      	lsrs	r2, r0, #3
 8002a62:	431a      	orrs	r2, r3
 8002a64:	465d      	mov	r5, fp
 8002a66:	08cb      	lsrs	r3, r1, #3
 8002a68:	e698      	b.n	800279c <__aeabi_dsub+0x37c>
 8002a6a:	074b      	lsls	r3, r1, #29
 8002a6c:	08c2      	lsrs	r2, r0, #3
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	08cb      	lsrs	r3, r1, #3
 8002a72:	e64f      	b.n	8002714 <__aeabi_dsub+0x2f4>
 8002a74:	000a      	movs	r2, r1
 8002a76:	4302      	orrs	r2, r0
 8002a78:	d090      	beq.n	800299c <__aeabi_dsub+0x57c>
 8002a7a:	464a      	mov	r2, r9
 8002a7c:	075c      	lsls	r4, r3, #29
 8002a7e:	08d2      	lsrs	r2, r2, #3
 8002a80:	4314      	orrs	r4, r2
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	0312      	lsls	r2, r2, #12
 8002a88:	4213      	tst	r3, r2
 8002a8a:	d008      	beq.n	8002a9e <__aeabi_dsub+0x67e>
 8002a8c:	08ce      	lsrs	r6, r1, #3
 8002a8e:	4216      	tst	r6, r2
 8002a90:	d105      	bne.n	8002a9e <__aeabi_dsub+0x67e>
 8002a92:	08c0      	lsrs	r0, r0, #3
 8002a94:	0749      	lsls	r1, r1, #29
 8002a96:	4308      	orrs	r0, r1
 8002a98:	0004      	movs	r4, r0
 8002a9a:	465d      	mov	r5, fp
 8002a9c:	0033      	movs	r3, r6
 8002a9e:	0f61      	lsrs	r1, r4, #29
 8002aa0:	00e2      	lsls	r2, r4, #3
 8002aa2:	0749      	lsls	r1, r1, #29
 8002aa4:	08d2      	lsrs	r2, r2, #3
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	e678      	b.n	800279c <__aeabi_dsub+0x37c>
 8002aaa:	074b      	lsls	r3, r1, #29
 8002aac:	08c2      	lsrs	r2, r0, #3
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	08cb      	lsrs	r3, r1, #3
 8002ab2:	e632      	b.n	800271a <__aeabi_dsub+0x2fa>
 8002ab4:	4448      	add	r0, r9
 8002ab6:	185b      	adds	r3, r3, r1
 8002ab8:	4548      	cmp	r0, r9
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	4698      	mov	r8, r3
 8002abe:	4252      	negs	r2, r2
 8002ac0:	4490      	add	r8, r2
 8002ac2:	4643      	mov	r3, r8
 8002ac4:	0004      	movs	r4, r0
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	d400      	bmi.n	8002acc <__aeabi_dsub+0x6ac>
 8002aca:	e61a      	b.n	8002702 <__aeabi_dsub+0x2e2>
 8002acc:	4642      	mov	r2, r8
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <__aeabi_dsub+0x6e8>)
 8002ad0:	2601      	movs	r6, #1
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	4690      	mov	r8, r2
 8002ad6:	e614      	b.n	8002702 <__aeabi_dsub+0x2e2>
 8002ad8:	4666      	mov	r6, ip
 8002ada:	001f      	movs	r7, r3
 8002adc:	3e20      	subs	r6, #32
 8002ade:	40f7      	lsrs	r7, r6
 8002ae0:	2c20      	cmp	r4, #32
 8002ae2:	d005      	beq.n	8002af0 <__aeabi_dsub+0x6d0>
 8002ae4:	2640      	movs	r6, #64	; 0x40
 8002ae6:	1b36      	subs	r6, r6, r4
 8002ae8:	40b3      	lsls	r3, r6
 8002aea:	464c      	mov	r4, r9
 8002aec:	431c      	orrs	r4, r3
 8002aee:	46a2      	mov	sl, r4
 8002af0:	4654      	mov	r4, sl
 8002af2:	1e63      	subs	r3, r4, #1
 8002af4:	419c      	sbcs	r4, r3
 8002af6:	433c      	orrs	r4, r7
 8002af8:	e5c8      	b.n	800268c <__aeabi_dsub+0x26c>
 8002afa:	0011      	movs	r1, r2
 8002afc:	2300      	movs	r3, #0
 8002afe:	2200      	movs	r2, #0
 8002b00:	e532      	b.n	8002568 <__aeabi_dsub+0x148>
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	000007ff 	.word	0x000007ff
 8002b08:	ff7fffff 	.word	0xff7fffff
 8002b0c:	000007fe 	.word	0x000007fe
 8002b10:	464a      	mov	r2, r9
 8002b12:	1814      	adds	r4, r2, r0
 8002b14:	4284      	cmp	r4, r0
 8002b16:	4192      	sbcs	r2, r2
 8002b18:	185b      	adds	r3, r3, r1
 8002b1a:	4698      	mov	r8, r3
 8002b1c:	4252      	negs	r2, r2
 8002b1e:	4490      	add	r8, r2
 8002b20:	e5e9      	b.n	80026f6 <__aeabi_dsub+0x2d6>
 8002b22:	4642      	mov	r2, r8
 8002b24:	4322      	orrs	r2, r4
 8002b26:	d100      	bne.n	8002b2a <__aeabi_dsub+0x70a>
 8002b28:	e6a6      	b.n	8002878 <__aeabi_dsub+0x458>
 8002b2a:	e5ea      	b.n	8002702 <__aeabi_dsub+0x2e2>
 8002b2c:	074b      	lsls	r3, r1, #29
 8002b2e:	08c2      	lsrs	r2, r0, #3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	08cb      	lsrs	r3, r1, #3
 8002b34:	e632      	b.n	800279c <__aeabi_dsub+0x37c>
 8002b36:	2200      	movs	r2, #0
 8002b38:	4901      	ldr	r1, [pc, #4]	; (8002b40 <__aeabi_dsub+0x720>)
 8002b3a:	0013      	movs	r3, r2
 8002b3c:	e514      	b.n	8002568 <__aeabi_dsub+0x148>
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	000007ff 	.word	0x000007ff

08002b44 <__aeabi_d2iz>:
 8002b44:	000a      	movs	r2, r1
 8002b46:	b530      	push	{r4, r5, lr}
 8002b48:	4c13      	ldr	r4, [pc, #76]	; (8002b98 <__aeabi_d2iz+0x54>)
 8002b4a:	0053      	lsls	r3, r2, #1
 8002b4c:	0309      	lsls	r1, r1, #12
 8002b4e:	0005      	movs	r5, r0
 8002b50:	0b09      	lsrs	r1, r1, #12
 8002b52:	2000      	movs	r0, #0
 8002b54:	0d5b      	lsrs	r3, r3, #21
 8002b56:	0fd2      	lsrs	r2, r2, #31
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	dd04      	ble.n	8002b66 <__aeabi_d2iz+0x22>
 8002b5c:	480f      	ldr	r0, [pc, #60]	; (8002b9c <__aeabi_d2iz+0x58>)
 8002b5e:	4283      	cmp	r3, r0
 8002b60:	dd02      	ble.n	8002b68 <__aeabi_d2iz+0x24>
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <__aeabi_d2iz+0x5c>)
 8002b64:	18d0      	adds	r0, r2, r3
 8002b66:	bd30      	pop	{r4, r5, pc}
 8002b68:	2080      	movs	r0, #128	; 0x80
 8002b6a:	0340      	lsls	r0, r0, #13
 8002b6c:	4301      	orrs	r1, r0
 8002b6e:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <__aeabi_d2iz+0x60>)
 8002b70:	1ac0      	subs	r0, r0, r3
 8002b72:	281f      	cmp	r0, #31
 8002b74:	dd08      	ble.n	8002b88 <__aeabi_d2iz+0x44>
 8002b76:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <__aeabi_d2iz+0x64>)
 8002b78:	1ac3      	subs	r3, r0, r3
 8002b7a:	40d9      	lsrs	r1, r3
 8002b7c:	000b      	movs	r3, r1
 8002b7e:	4258      	negs	r0, r3
 8002b80:	2a00      	cmp	r2, #0
 8002b82:	d1f0      	bne.n	8002b66 <__aeabi_d2iz+0x22>
 8002b84:	0018      	movs	r0, r3
 8002b86:	e7ee      	b.n	8002b66 <__aeabi_d2iz+0x22>
 8002b88:	4c08      	ldr	r4, [pc, #32]	; (8002bac <__aeabi_d2iz+0x68>)
 8002b8a:	40c5      	lsrs	r5, r0
 8002b8c:	46a4      	mov	ip, r4
 8002b8e:	4463      	add	r3, ip
 8002b90:	4099      	lsls	r1, r3
 8002b92:	000b      	movs	r3, r1
 8002b94:	432b      	orrs	r3, r5
 8002b96:	e7f2      	b.n	8002b7e <__aeabi_d2iz+0x3a>
 8002b98:	000003fe 	.word	0x000003fe
 8002b9c:	0000041d 	.word	0x0000041d
 8002ba0:	7fffffff 	.word	0x7fffffff
 8002ba4:	00000433 	.word	0x00000433
 8002ba8:	00000413 	.word	0x00000413
 8002bac:	fffffbed 	.word	0xfffffbed

08002bb0 <__aeabi_i2d>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d016      	beq.n	8002be4 <__aeabi_i2d+0x34>
 8002bb6:	17c3      	asrs	r3, r0, #31
 8002bb8:	18c5      	adds	r5, r0, r3
 8002bba:	405d      	eors	r5, r3
 8002bbc:	0fc4      	lsrs	r4, r0, #31
 8002bbe:	0028      	movs	r0, r5
 8002bc0:	f000 f934 	bl	8002e2c <__clzsi2>
 8002bc4:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <__aeabi_i2d+0x5c>)
 8002bc6:	1a12      	subs	r2, r2, r0
 8002bc8:	280a      	cmp	r0, #10
 8002bca:	dc16      	bgt.n	8002bfa <__aeabi_i2d+0x4a>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	002e      	movs	r6, r5
 8002bd0:	3315      	adds	r3, #21
 8002bd2:	409e      	lsls	r6, r3
 8002bd4:	230b      	movs	r3, #11
 8002bd6:	1a18      	subs	r0, r3, r0
 8002bd8:	40c5      	lsrs	r5, r0
 8002bda:	0553      	lsls	r3, r2, #21
 8002bdc:	032d      	lsls	r5, r5, #12
 8002bde:	0b2d      	lsrs	r5, r5, #12
 8002be0:	0d5b      	lsrs	r3, r3, #21
 8002be2:	e003      	b.n	8002bec <__aeabi_i2d+0x3c>
 8002be4:	2400      	movs	r4, #0
 8002be6:	2300      	movs	r3, #0
 8002be8:	2500      	movs	r5, #0
 8002bea:	2600      	movs	r6, #0
 8002bec:	051b      	lsls	r3, r3, #20
 8002bee:	432b      	orrs	r3, r5
 8002bf0:	07e4      	lsls	r4, r4, #31
 8002bf2:	4323      	orrs	r3, r4
 8002bf4:	0030      	movs	r0, r6
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	380b      	subs	r0, #11
 8002bfc:	4085      	lsls	r5, r0
 8002bfe:	0553      	lsls	r3, r2, #21
 8002c00:	032d      	lsls	r5, r5, #12
 8002c02:	2600      	movs	r6, #0
 8002c04:	0b2d      	lsrs	r5, r5, #12
 8002c06:	0d5b      	lsrs	r3, r3, #21
 8002c08:	e7f0      	b.n	8002bec <__aeabi_i2d+0x3c>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	0000041e 	.word	0x0000041e

08002c10 <__aeabi_f2d>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	0043      	lsls	r3, r0, #1
 8002c14:	0246      	lsls	r6, r0, #9
 8002c16:	0fc4      	lsrs	r4, r0, #31
 8002c18:	20fe      	movs	r0, #254	; 0xfe
 8002c1a:	0e1b      	lsrs	r3, r3, #24
 8002c1c:	1c59      	adds	r1, r3, #1
 8002c1e:	0a75      	lsrs	r5, r6, #9
 8002c20:	4208      	tst	r0, r1
 8002c22:	d00c      	beq.n	8002c3e <__aeabi_f2d+0x2e>
 8002c24:	22e0      	movs	r2, #224	; 0xe0
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4694      	mov	ip, r2
 8002c2a:	076d      	lsls	r5, r5, #29
 8002c2c:	0b36      	lsrs	r6, r6, #12
 8002c2e:	4463      	add	r3, ip
 8002c30:	051b      	lsls	r3, r3, #20
 8002c32:	4333      	orrs	r3, r6
 8002c34:	07e4      	lsls	r4, r4, #31
 8002c36:	4323      	orrs	r3, r4
 8002c38:	0028      	movs	r0, r5
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d114      	bne.n	8002c6c <__aeabi_f2d+0x5c>
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d01b      	beq.n	8002c7e <__aeabi_f2d+0x6e>
 8002c46:	0028      	movs	r0, r5
 8002c48:	f000 f8f0 	bl	8002e2c <__clzsi2>
 8002c4c:	280a      	cmp	r0, #10
 8002c4e:	dc1c      	bgt.n	8002c8a <__aeabi_f2d+0x7a>
 8002c50:	230b      	movs	r3, #11
 8002c52:	002a      	movs	r2, r5
 8002c54:	1a1b      	subs	r3, r3, r0
 8002c56:	40da      	lsrs	r2, r3
 8002c58:	0003      	movs	r3, r0
 8002c5a:	3315      	adds	r3, #21
 8002c5c:	409d      	lsls	r5, r3
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <__aeabi_f2d+0x88>)
 8002c60:	0312      	lsls	r2, r2, #12
 8002c62:	1a1b      	subs	r3, r3, r0
 8002c64:	055b      	lsls	r3, r3, #21
 8002c66:	0b16      	lsrs	r6, r2, #12
 8002c68:	0d5b      	lsrs	r3, r3, #21
 8002c6a:	e7e1      	b.n	8002c30 <__aeabi_f2d+0x20>
 8002c6c:	2d00      	cmp	r5, #0
 8002c6e:	d009      	beq.n	8002c84 <__aeabi_f2d+0x74>
 8002c70:	0b32      	lsrs	r2, r6, #12
 8002c72:	2680      	movs	r6, #128	; 0x80
 8002c74:	0336      	lsls	r6, r6, #12
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <__aeabi_f2d+0x8c>)
 8002c78:	076d      	lsls	r5, r5, #29
 8002c7a:	4316      	orrs	r6, r2
 8002c7c:	e7d8      	b.n	8002c30 <__aeabi_f2d+0x20>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2600      	movs	r6, #0
 8002c82:	e7d5      	b.n	8002c30 <__aeabi_f2d+0x20>
 8002c84:	2600      	movs	r6, #0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <__aeabi_f2d+0x8c>)
 8002c88:	e7d2      	b.n	8002c30 <__aeabi_f2d+0x20>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	002a      	movs	r2, r5
 8002c8e:	3b0b      	subs	r3, #11
 8002c90:	409a      	lsls	r2, r3
 8002c92:	2500      	movs	r5, #0
 8002c94:	e7e3      	b.n	8002c5e <__aeabi_f2d+0x4e>
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	00000389 	.word	0x00000389
 8002c9c:	000007ff 	.word	0x000007ff

08002ca0 <__aeabi_d2f>:
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	004b      	lsls	r3, r1, #1
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca6:	0308      	lsls	r0, r1, #12
 8002ca8:	0d5b      	lsrs	r3, r3, #21
 8002caa:	4e3d      	ldr	r6, [pc, #244]	; (8002da0 <__aeabi_d2f+0x100>)
 8002cac:	0fcc      	lsrs	r4, r1, #31
 8002cae:	0a40      	lsrs	r0, r0, #9
 8002cb0:	0f51      	lsrs	r1, r2, #29
 8002cb2:	1c5f      	adds	r7, r3, #1
 8002cb4:	4308      	orrs	r0, r1
 8002cb6:	00d5      	lsls	r5, r2, #3
 8002cb8:	4237      	tst	r7, r6
 8002cba:	d00a      	beq.n	8002cd2 <__aeabi_d2f+0x32>
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <__aeabi_d2f+0x104>)
 8002cbe:	185e      	adds	r6, r3, r1
 8002cc0:	2efe      	cmp	r6, #254	; 0xfe
 8002cc2:	dd16      	ble.n	8002cf2 <__aeabi_d2f+0x52>
 8002cc4:	23ff      	movs	r3, #255	; 0xff
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	07e0      	lsls	r0, r4, #31
 8002cce:	4318      	orrs	r0, r3
 8002cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <__aeabi_d2f+0x44>
 8002cd6:	4328      	orrs	r0, r5
 8002cd8:	d027      	beq.n	8002d2a <__aeabi_d2f+0x8a>
 8002cda:	2105      	movs	r1, #5
 8002cdc:	0189      	lsls	r1, r1, #6
 8002cde:	0a49      	lsrs	r1, r1, #9
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e7f1      	b.n	8002cc8 <__aeabi_d2f+0x28>
 8002ce4:	4305      	orrs	r5, r0
 8002ce6:	d0ed      	beq.n	8002cc4 <__aeabi_d2f+0x24>
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	03c9      	lsls	r1, r1, #15
 8002cec:	23ff      	movs	r3, #255	; 0xff
 8002cee:	4301      	orrs	r1, r0
 8002cf0:	e7ea      	b.n	8002cc8 <__aeabi_d2f+0x28>
 8002cf2:	2e00      	cmp	r6, #0
 8002cf4:	dd1c      	ble.n	8002d30 <__aeabi_d2f+0x90>
 8002cf6:	0192      	lsls	r2, r2, #6
 8002cf8:	0011      	movs	r1, r2
 8002cfa:	1e4a      	subs	r2, r1, #1
 8002cfc:	4191      	sbcs	r1, r2
 8002cfe:	00c0      	lsls	r0, r0, #3
 8002d00:	0f6d      	lsrs	r5, r5, #29
 8002d02:	4301      	orrs	r1, r0
 8002d04:	4329      	orrs	r1, r5
 8002d06:	074b      	lsls	r3, r1, #29
 8002d08:	d048      	beq.n	8002d9c <__aeabi_d2f+0xfc>
 8002d0a:	230f      	movs	r3, #15
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d000      	beq.n	8002d14 <__aeabi_d2f+0x74>
 8002d12:	3104      	adds	r1, #4
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	04db      	lsls	r3, r3, #19
 8002d18:	400b      	ands	r3, r1
 8002d1a:	d03f      	beq.n	8002d9c <__aeabi_d2f+0xfc>
 8002d1c:	1c72      	adds	r2, r6, #1
 8002d1e:	2efe      	cmp	r6, #254	; 0xfe
 8002d20:	d0d0      	beq.n	8002cc4 <__aeabi_d2f+0x24>
 8002d22:	0189      	lsls	r1, r1, #6
 8002d24:	0a49      	lsrs	r1, r1, #9
 8002d26:	b2d3      	uxtb	r3, r2
 8002d28:	e7ce      	b.n	8002cc8 <__aeabi_d2f+0x28>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	e7cb      	b.n	8002cc8 <__aeabi_d2f+0x28>
 8002d30:	0032      	movs	r2, r6
 8002d32:	3217      	adds	r2, #23
 8002d34:	db22      	blt.n	8002d7c <__aeabi_d2f+0xdc>
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	221e      	movs	r2, #30
 8002d3a:	0409      	lsls	r1, r1, #16
 8002d3c:	4308      	orrs	r0, r1
 8002d3e:	1b92      	subs	r2, r2, r6
 8002d40:	2a1f      	cmp	r2, #31
 8002d42:	dd1d      	ble.n	8002d80 <__aeabi_d2f+0xe0>
 8002d44:	2102      	movs	r1, #2
 8002d46:	4249      	negs	r1, r1
 8002d48:	1b8e      	subs	r6, r1, r6
 8002d4a:	0001      	movs	r1, r0
 8002d4c:	40f1      	lsrs	r1, r6
 8002d4e:	000e      	movs	r6, r1
 8002d50:	2a20      	cmp	r2, #32
 8002d52:	d004      	beq.n	8002d5e <__aeabi_d2f+0xbe>
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <__aeabi_d2f+0x108>)
 8002d56:	4694      	mov	ip, r2
 8002d58:	4463      	add	r3, ip
 8002d5a:	4098      	lsls	r0, r3
 8002d5c:	4305      	orrs	r5, r0
 8002d5e:	0029      	movs	r1, r5
 8002d60:	1e4d      	subs	r5, r1, #1
 8002d62:	41a9      	sbcs	r1, r5
 8002d64:	4331      	orrs	r1, r6
 8002d66:	2600      	movs	r6, #0
 8002d68:	074b      	lsls	r3, r1, #29
 8002d6a:	d1ce      	bne.n	8002d0a <__aeabi_d2f+0x6a>
 8002d6c:	2080      	movs	r0, #128	; 0x80
 8002d6e:	000b      	movs	r3, r1
 8002d70:	04c0      	lsls	r0, r0, #19
 8002d72:	2201      	movs	r2, #1
 8002d74:	4003      	ands	r3, r0
 8002d76:	4201      	tst	r1, r0
 8002d78:	d1d3      	bne.n	8002d22 <__aeabi_d2f+0x82>
 8002d7a:	e7af      	b.n	8002cdc <__aeabi_d2f+0x3c>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e7ac      	b.n	8002cda <__aeabi_d2f+0x3a>
 8002d80:	490a      	ldr	r1, [pc, #40]	; (8002dac <__aeabi_d2f+0x10c>)
 8002d82:	468c      	mov	ip, r1
 8002d84:	0029      	movs	r1, r5
 8002d86:	4463      	add	r3, ip
 8002d88:	40d1      	lsrs	r1, r2
 8002d8a:	409d      	lsls	r5, r3
 8002d8c:	000a      	movs	r2, r1
 8002d8e:	0029      	movs	r1, r5
 8002d90:	4098      	lsls	r0, r3
 8002d92:	1e4d      	subs	r5, r1, #1
 8002d94:	41a9      	sbcs	r1, r5
 8002d96:	4301      	orrs	r1, r0
 8002d98:	4311      	orrs	r1, r2
 8002d9a:	e7e4      	b.n	8002d66 <__aeabi_d2f+0xc6>
 8002d9c:	0033      	movs	r3, r6
 8002d9e:	e79d      	b.n	8002cdc <__aeabi_d2f+0x3c>
 8002da0:	000007fe 	.word	0x000007fe
 8002da4:	fffffc80 	.word	0xfffffc80
 8002da8:	fffffca2 	.word	0xfffffca2
 8002dac:	fffffc82 	.word	0xfffffc82

08002db0 <__aeabi_cdrcmple>:
 8002db0:	4684      	mov	ip, r0
 8002db2:	1c10      	adds	r0, r2, #0
 8002db4:	4662      	mov	r2, ip
 8002db6:	468c      	mov	ip, r1
 8002db8:	1c19      	adds	r1, r3, #0
 8002dba:	4663      	mov	r3, ip
 8002dbc:	e000      	b.n	8002dc0 <__aeabi_cdcmpeq>
 8002dbe:	46c0      	nop			; (mov r8, r8)

08002dc0 <__aeabi_cdcmpeq>:
 8002dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002dc2:	f000 f8ff 	bl	8002fc4 <__ledf2>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d401      	bmi.n	8002dce <__aeabi_cdcmpeq+0xe>
 8002dca:	2100      	movs	r1, #0
 8002dcc:	42c8      	cmn	r0, r1
 8002dce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002dd0 <__aeabi_dcmpeq>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	f000 f849 	bl	8002e68 <__eqdf2>
 8002dd6:	4240      	negs	r0, r0
 8002dd8:	3001      	adds	r0, #1
 8002dda:	bd10      	pop	{r4, pc}

08002ddc <__aeabi_dcmplt>:
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	f000 f8f1 	bl	8002fc4 <__ledf2>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	db01      	blt.n	8002dea <__aeabi_dcmplt+0xe>
 8002de6:	2000      	movs	r0, #0
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	2001      	movs	r0, #1
 8002dec:	bd10      	pop	{r4, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)

08002df0 <__aeabi_dcmple>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	f000 f8e7 	bl	8002fc4 <__ledf2>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	dd01      	ble.n	8002dfe <__aeabi_dcmple+0xe>
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	2001      	movs	r0, #1
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)

08002e04 <__aeabi_dcmpgt>:
 8002e04:	b510      	push	{r4, lr}
 8002e06:	f000 f86b 	bl	8002ee0 <__gedf2>
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	dc01      	bgt.n	8002e12 <__aeabi_dcmpgt+0xe>
 8002e0e:	2000      	movs	r0, #0
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	2001      	movs	r0, #1
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)

08002e18 <__aeabi_dcmpge>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	f000 f861 	bl	8002ee0 <__gedf2>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	da01      	bge.n	8002e26 <__aeabi_dcmpge+0xe>
 8002e22:	2000      	movs	r0, #0
 8002e24:	bd10      	pop	{r4, pc}
 8002e26:	2001      	movs	r0, #1
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)

08002e2c <__clzsi2>:
 8002e2c:	211c      	movs	r1, #28
 8002e2e:	2301      	movs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d301      	bcc.n	8002e3a <__clzsi2+0xe>
 8002e36:	0c00      	lsrs	r0, r0, #16
 8002e38:	3910      	subs	r1, #16
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	d301      	bcc.n	8002e44 <__clzsi2+0x18>
 8002e40:	0a00      	lsrs	r0, r0, #8
 8002e42:	3908      	subs	r1, #8
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	4298      	cmp	r0, r3
 8002e48:	d301      	bcc.n	8002e4e <__clzsi2+0x22>
 8002e4a:	0900      	lsrs	r0, r0, #4
 8002e4c:	3904      	subs	r1, #4
 8002e4e:	a202      	add	r2, pc, #8	; (adr r2, 8002e58 <__clzsi2+0x2c>)
 8002e50:	5c10      	ldrb	r0, [r2, r0]
 8002e52:	1840      	adds	r0, r0, r1
 8002e54:	4770      	bx	lr
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	02020304 	.word	0x02020304
 8002e5c:	01010101 	.word	0x01010101
	...

08002e68 <__eqdf2>:
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	464f      	mov	r7, r9
 8002e6c:	4646      	mov	r6, r8
 8002e6e:	46d6      	mov	lr, sl
 8002e70:	4694      	mov	ip, r2
 8002e72:	4691      	mov	r9, r2
 8002e74:	031a      	lsls	r2, r3, #12
 8002e76:	0b12      	lsrs	r2, r2, #12
 8002e78:	4d18      	ldr	r5, [pc, #96]	; (8002edc <__eqdf2+0x74>)
 8002e7a:	b5c0      	push	{r6, r7, lr}
 8002e7c:	004c      	lsls	r4, r1, #1
 8002e7e:	030f      	lsls	r7, r1, #12
 8002e80:	4692      	mov	sl, r2
 8002e82:	005a      	lsls	r2, r3, #1
 8002e84:	0006      	movs	r6, r0
 8002e86:	4680      	mov	r8, r0
 8002e88:	0b3f      	lsrs	r7, r7, #12
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	0d64      	lsrs	r4, r4, #21
 8002e8e:	0fc9      	lsrs	r1, r1, #31
 8002e90:	0d52      	lsrs	r2, r2, #21
 8002e92:	0fdb      	lsrs	r3, r3, #31
 8002e94:	42ac      	cmp	r4, r5
 8002e96:	d00a      	beq.n	8002eae <__eqdf2+0x46>
 8002e98:	42aa      	cmp	r2, r5
 8002e9a:	d003      	beq.n	8002ea4 <__eqdf2+0x3c>
 8002e9c:	4294      	cmp	r4, r2
 8002e9e:	d101      	bne.n	8002ea4 <__eqdf2+0x3c>
 8002ea0:	4557      	cmp	r7, sl
 8002ea2:	d00d      	beq.n	8002ec0 <__eqdf2+0x58>
 8002ea4:	bce0      	pop	{r5, r6, r7}
 8002ea6:	46ba      	mov	sl, r7
 8002ea8:	46b1      	mov	r9, r6
 8002eaa:	46a8      	mov	r8, r5
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eae:	003d      	movs	r5, r7
 8002eb0:	4335      	orrs	r5, r6
 8002eb2:	d1f7      	bne.n	8002ea4 <__eqdf2+0x3c>
 8002eb4:	42a2      	cmp	r2, r4
 8002eb6:	d1f5      	bne.n	8002ea4 <__eqdf2+0x3c>
 8002eb8:	4652      	mov	r2, sl
 8002eba:	4665      	mov	r5, ip
 8002ebc:	432a      	orrs	r2, r5
 8002ebe:	d1f1      	bne.n	8002ea4 <__eqdf2+0x3c>
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	45c8      	cmp	r8, r9
 8002ec4:	d1ee      	bne.n	8002ea4 <__eqdf2+0x3c>
 8002ec6:	4299      	cmp	r1, r3
 8002ec8:	d006      	beq.n	8002ed8 <__eqdf2+0x70>
 8002eca:	2c00      	cmp	r4, #0
 8002ecc:	d1ea      	bne.n	8002ea4 <__eqdf2+0x3c>
 8002ece:	433e      	orrs	r6, r7
 8002ed0:	0030      	movs	r0, r6
 8002ed2:	1e46      	subs	r6, r0, #1
 8002ed4:	41b0      	sbcs	r0, r6
 8002ed6:	e7e5      	b.n	8002ea4 <__eqdf2+0x3c>
 8002ed8:	2000      	movs	r0, #0
 8002eda:	e7e3      	b.n	8002ea4 <__eqdf2+0x3c>
 8002edc:	000007ff 	.word	0x000007ff

08002ee0 <__gedf2>:
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	464e      	mov	r6, r9
 8002ee4:	4645      	mov	r5, r8
 8002ee6:	4657      	mov	r7, sl
 8002ee8:	46de      	mov	lr, fp
 8002eea:	0004      	movs	r4, r0
 8002eec:	0018      	movs	r0, r3
 8002eee:	b5e0      	push	{r5, r6, r7, lr}
 8002ef0:	0016      	movs	r6, r2
 8002ef2:	031b      	lsls	r3, r3, #12
 8002ef4:	0b1b      	lsrs	r3, r3, #12
 8002ef6:	4d32      	ldr	r5, [pc, #200]	; (8002fc0 <__gedf2+0xe0>)
 8002ef8:	030f      	lsls	r7, r1, #12
 8002efa:	004a      	lsls	r2, r1, #1
 8002efc:	4699      	mov	r9, r3
 8002efe:	0043      	lsls	r3, r0, #1
 8002f00:	46a4      	mov	ip, r4
 8002f02:	46b0      	mov	r8, r6
 8002f04:	0b3f      	lsrs	r7, r7, #12
 8002f06:	0d52      	lsrs	r2, r2, #21
 8002f08:	0fc9      	lsrs	r1, r1, #31
 8002f0a:	0d5b      	lsrs	r3, r3, #21
 8002f0c:	0fc0      	lsrs	r0, r0, #31
 8002f0e:	42aa      	cmp	r2, r5
 8002f10:	d029      	beq.n	8002f66 <__gedf2+0x86>
 8002f12:	42ab      	cmp	r3, r5
 8002f14:	d018      	beq.n	8002f48 <__gedf2+0x68>
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	d12a      	bne.n	8002f70 <__gedf2+0x90>
 8002f1a:	433c      	orrs	r4, r7
 8002f1c:	46a3      	mov	fp, r4
 8002f1e:	4265      	negs	r5, r4
 8002f20:	4165      	adcs	r5, r4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <__gedf2+0x4c>
 8002f26:	464c      	mov	r4, r9
 8002f28:	4326      	orrs	r6, r4
 8002f2a:	d027      	beq.n	8002f7c <__gedf2+0x9c>
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	d115      	bne.n	8002f5c <__gedf2+0x7c>
 8002f30:	4281      	cmp	r1, r0
 8002f32:	d028      	beq.n	8002f86 <__gedf2+0xa6>
 8002f34:	2002      	movs	r0, #2
 8002f36:	3901      	subs	r1, #1
 8002f38:	4008      	ands	r0, r1
 8002f3a:	3801      	subs	r0, #1
 8002f3c:	bcf0      	pop	{r4, r5, r6, r7}
 8002f3e:	46bb      	mov	fp, r7
 8002f40:	46b2      	mov	sl, r6
 8002f42:	46a9      	mov	r9, r5
 8002f44:	46a0      	mov	r8, r4
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f48:	464d      	mov	r5, r9
 8002f4a:	432e      	orrs	r6, r5
 8002f4c:	d12f      	bne.n	8002fae <__gedf2+0xce>
 8002f4e:	2a00      	cmp	r2, #0
 8002f50:	d1ee      	bne.n	8002f30 <__gedf2+0x50>
 8002f52:	433c      	orrs	r4, r7
 8002f54:	4265      	negs	r5, r4
 8002f56:	4165      	adcs	r5, r4
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	d0e9      	beq.n	8002f30 <__gedf2+0x50>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d1ed      	bne.n	8002f3c <__gedf2+0x5c>
 8002f60:	2001      	movs	r0, #1
 8002f62:	4240      	negs	r0, r0
 8002f64:	e7ea      	b.n	8002f3c <__gedf2+0x5c>
 8002f66:	003d      	movs	r5, r7
 8002f68:	4325      	orrs	r5, r4
 8002f6a:	d120      	bne.n	8002fae <__gedf2+0xce>
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d0eb      	beq.n	8002f48 <__gedf2+0x68>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1dd      	bne.n	8002f30 <__gedf2+0x50>
 8002f74:	464c      	mov	r4, r9
 8002f76:	4326      	orrs	r6, r4
 8002f78:	d1da      	bne.n	8002f30 <__gedf2+0x50>
 8002f7a:	e7db      	b.n	8002f34 <__gedf2+0x54>
 8002f7c:	465b      	mov	r3, fp
 8002f7e:	2000      	movs	r0, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0db      	beq.n	8002f3c <__gedf2+0x5c>
 8002f84:	e7d6      	b.n	8002f34 <__gedf2+0x54>
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dc0a      	bgt.n	8002fa0 <__gedf2+0xc0>
 8002f8a:	dbe7      	blt.n	8002f5c <__gedf2+0x7c>
 8002f8c:	454f      	cmp	r7, r9
 8002f8e:	d8d1      	bhi.n	8002f34 <__gedf2+0x54>
 8002f90:	d010      	beq.n	8002fb4 <__gedf2+0xd4>
 8002f92:	2000      	movs	r0, #0
 8002f94:	454f      	cmp	r7, r9
 8002f96:	d2d1      	bcs.n	8002f3c <__gedf2+0x5c>
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	d0e1      	beq.n	8002f60 <__gedf2+0x80>
 8002f9c:	0008      	movs	r0, r1
 8002f9e:	e7cd      	b.n	8002f3c <__gedf2+0x5c>
 8002fa0:	4243      	negs	r3, r0
 8002fa2:	4158      	adcs	r0, r3
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	4240      	negs	r0, r0
 8002fa8:	4018      	ands	r0, r3
 8002faa:	3801      	subs	r0, #1
 8002fac:	e7c6      	b.n	8002f3c <__gedf2+0x5c>
 8002fae:	2002      	movs	r0, #2
 8002fb0:	4240      	negs	r0, r0
 8002fb2:	e7c3      	b.n	8002f3c <__gedf2+0x5c>
 8002fb4:	45c4      	cmp	ip, r8
 8002fb6:	d8bd      	bhi.n	8002f34 <__gedf2+0x54>
 8002fb8:	2000      	movs	r0, #0
 8002fba:	45c4      	cmp	ip, r8
 8002fbc:	d2be      	bcs.n	8002f3c <__gedf2+0x5c>
 8002fbe:	e7eb      	b.n	8002f98 <__gedf2+0xb8>
 8002fc0:	000007ff 	.word	0x000007ff

08002fc4 <__ledf2>:
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc6:	464e      	mov	r6, r9
 8002fc8:	4645      	mov	r5, r8
 8002fca:	4657      	mov	r7, sl
 8002fcc:	46de      	mov	lr, fp
 8002fce:	0004      	movs	r4, r0
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	b5e0      	push	{r5, r6, r7, lr}
 8002fd4:	0016      	movs	r6, r2
 8002fd6:	031b      	lsls	r3, r3, #12
 8002fd8:	0b1b      	lsrs	r3, r3, #12
 8002fda:	4d31      	ldr	r5, [pc, #196]	; (80030a0 <__ledf2+0xdc>)
 8002fdc:	030f      	lsls	r7, r1, #12
 8002fde:	004a      	lsls	r2, r1, #1
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	0043      	lsls	r3, r0, #1
 8002fe4:	46a4      	mov	ip, r4
 8002fe6:	46b0      	mov	r8, r6
 8002fe8:	0b3f      	lsrs	r7, r7, #12
 8002fea:	0d52      	lsrs	r2, r2, #21
 8002fec:	0fc9      	lsrs	r1, r1, #31
 8002fee:	0d5b      	lsrs	r3, r3, #21
 8002ff0:	0fc0      	lsrs	r0, r0, #31
 8002ff2:	42aa      	cmp	r2, r5
 8002ff4:	d011      	beq.n	800301a <__ledf2+0x56>
 8002ff6:	42ab      	cmp	r3, r5
 8002ff8:	d014      	beq.n	8003024 <__ledf2+0x60>
 8002ffa:	2a00      	cmp	r2, #0
 8002ffc:	d12f      	bne.n	800305e <__ledf2+0x9a>
 8002ffe:	433c      	orrs	r4, r7
 8003000:	46a3      	mov	fp, r4
 8003002:	4265      	negs	r5, r4
 8003004:	4165      	adcs	r5, r4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d114      	bne.n	8003034 <__ledf2+0x70>
 800300a:	464c      	mov	r4, r9
 800300c:	4326      	orrs	r6, r4
 800300e:	d111      	bne.n	8003034 <__ledf2+0x70>
 8003010:	465b      	mov	r3, fp
 8003012:	2000      	movs	r0, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <__ledf2+0x84>
 8003018:	e010      	b.n	800303c <__ledf2+0x78>
 800301a:	003d      	movs	r5, r7
 800301c:	4325      	orrs	r5, r4
 800301e:	d112      	bne.n	8003046 <__ledf2+0x82>
 8003020:	4293      	cmp	r3, r2
 8003022:	d11c      	bne.n	800305e <__ledf2+0x9a>
 8003024:	464d      	mov	r5, r9
 8003026:	432e      	orrs	r6, r5
 8003028:	d10d      	bne.n	8003046 <__ledf2+0x82>
 800302a:	2a00      	cmp	r2, #0
 800302c:	d104      	bne.n	8003038 <__ledf2+0x74>
 800302e:	433c      	orrs	r4, r7
 8003030:	4265      	negs	r5, r4
 8003032:	4165      	adcs	r5, r4
 8003034:	2d00      	cmp	r5, #0
 8003036:	d10d      	bne.n	8003054 <__ledf2+0x90>
 8003038:	4281      	cmp	r1, r0
 800303a:	d016      	beq.n	800306a <__ledf2+0xa6>
 800303c:	2002      	movs	r0, #2
 800303e:	3901      	subs	r1, #1
 8003040:	4008      	ands	r0, r1
 8003042:	3801      	subs	r0, #1
 8003044:	e000      	b.n	8003048 <__ledf2+0x84>
 8003046:	2002      	movs	r0, #2
 8003048:	bcf0      	pop	{r4, r5, r6, r7}
 800304a:	46bb      	mov	fp, r7
 800304c:	46b2      	mov	sl, r6
 800304e:	46a9      	mov	r9, r5
 8003050:	46a0      	mov	r8, r4
 8003052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003054:	2800      	cmp	r0, #0
 8003056:	d1f7      	bne.n	8003048 <__ledf2+0x84>
 8003058:	2001      	movs	r0, #1
 800305a:	4240      	negs	r0, r0
 800305c:	e7f4      	b.n	8003048 <__ledf2+0x84>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ea      	bne.n	8003038 <__ledf2+0x74>
 8003062:	464c      	mov	r4, r9
 8003064:	4326      	orrs	r6, r4
 8003066:	d1e7      	bne.n	8003038 <__ledf2+0x74>
 8003068:	e7e8      	b.n	800303c <__ledf2+0x78>
 800306a:	429a      	cmp	r2, r3
 800306c:	dd06      	ble.n	800307c <__ledf2+0xb8>
 800306e:	4243      	negs	r3, r0
 8003070:	4158      	adcs	r0, r3
 8003072:	2302      	movs	r3, #2
 8003074:	4240      	negs	r0, r0
 8003076:	4018      	ands	r0, r3
 8003078:	3801      	subs	r0, #1
 800307a:	e7e5      	b.n	8003048 <__ledf2+0x84>
 800307c:	429a      	cmp	r2, r3
 800307e:	dbe9      	blt.n	8003054 <__ledf2+0x90>
 8003080:	454f      	cmp	r7, r9
 8003082:	d8db      	bhi.n	800303c <__ledf2+0x78>
 8003084:	d006      	beq.n	8003094 <__ledf2+0xd0>
 8003086:	2000      	movs	r0, #0
 8003088:	454f      	cmp	r7, r9
 800308a:	d2dd      	bcs.n	8003048 <__ledf2+0x84>
 800308c:	2900      	cmp	r1, #0
 800308e:	d0e3      	beq.n	8003058 <__ledf2+0x94>
 8003090:	0008      	movs	r0, r1
 8003092:	e7d9      	b.n	8003048 <__ledf2+0x84>
 8003094:	45c4      	cmp	ip, r8
 8003096:	d8d1      	bhi.n	800303c <__ledf2+0x78>
 8003098:	2000      	movs	r0, #0
 800309a:	45c4      	cmp	ip, r8
 800309c:	d2d4      	bcs.n	8003048 <__ledf2+0x84>
 800309e:	e7f5      	b.n	800308c <__ledf2+0xc8>
 80030a0:	000007ff 	.word	0x000007ff

080030a4 <__gnu_thumb1_case_uqi>:
 80030a4:	b402      	push	{r1}
 80030a6:	4671      	mov	r1, lr
 80030a8:	0849      	lsrs	r1, r1, #1
 80030aa:	0049      	lsls	r1, r1, #1
 80030ac:	5c09      	ldrb	r1, [r1, r0]
 80030ae:	0049      	lsls	r1, r1, #1
 80030b0:	448e      	add	lr, r1
 80030b2:	bc02      	pop	{r1}
 80030b4:	4770      	bx	lr
 80030b6:	46c0      	nop			; (mov r8, r8)

080030b8 <__gnu_thumb1_case_shi>:
 80030b8:	b403      	push	{r0, r1}
 80030ba:	4671      	mov	r1, lr
 80030bc:	0849      	lsrs	r1, r1, #1
 80030be:	0040      	lsls	r0, r0, #1
 80030c0:	0049      	lsls	r1, r1, #1
 80030c2:	5e09      	ldrsh	r1, [r1, r0]
 80030c4:	0049      	lsls	r1, r1, #1
 80030c6:	448e      	add	lr, r1
 80030c8:	bc03      	pop	{r0, r1}
 80030ca:	4770      	bx	lr

080030cc <__aeabi_ui2d>:
 80030cc:	b510      	push	{r4, lr}
 80030ce:	1e04      	subs	r4, r0, #0
 80030d0:	d010      	beq.n	80030f4 <__aeabi_ui2d+0x28>
 80030d2:	f7ff feab 	bl	8002e2c <__clzsi2>
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <__aeabi_ui2d+0x48>)
 80030d8:	1a1b      	subs	r3, r3, r0
 80030da:	280a      	cmp	r0, #10
 80030dc:	dc11      	bgt.n	8003102 <__aeabi_ui2d+0x36>
 80030de:	220b      	movs	r2, #11
 80030e0:	0021      	movs	r1, r4
 80030e2:	1a12      	subs	r2, r2, r0
 80030e4:	40d1      	lsrs	r1, r2
 80030e6:	3015      	adds	r0, #21
 80030e8:	030a      	lsls	r2, r1, #12
 80030ea:	055b      	lsls	r3, r3, #21
 80030ec:	4084      	lsls	r4, r0
 80030ee:	0b12      	lsrs	r2, r2, #12
 80030f0:	0d5b      	lsrs	r3, r3, #21
 80030f2:	e001      	b.n	80030f8 <__aeabi_ui2d+0x2c>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2200      	movs	r2, #0
 80030f8:	051b      	lsls	r3, r3, #20
 80030fa:	4313      	orrs	r3, r2
 80030fc:	0020      	movs	r0, r4
 80030fe:	0019      	movs	r1, r3
 8003100:	bd10      	pop	{r4, pc}
 8003102:	0022      	movs	r2, r4
 8003104:	380b      	subs	r0, #11
 8003106:	4082      	lsls	r2, r0
 8003108:	055b      	lsls	r3, r3, #21
 800310a:	0312      	lsls	r2, r2, #12
 800310c:	2400      	movs	r4, #0
 800310e:	0b12      	lsrs	r2, r2, #12
 8003110:	0d5b      	lsrs	r3, r3, #21
 8003112:	e7f1      	b.n	80030f8 <__aeabi_ui2d+0x2c>
 8003114:	0000041e 	.word	0x0000041e

08003118 <__aeabi_dcmpun>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	0005      	movs	r5, r0
 800311c:	480c      	ldr	r0, [pc, #48]	; (8003150 <__aeabi_dcmpun+0x38>)
 800311e:	030c      	lsls	r4, r1, #12
 8003120:	0016      	movs	r6, r2
 8003122:	0049      	lsls	r1, r1, #1
 8003124:	031a      	lsls	r2, r3, #12
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	0b24      	lsrs	r4, r4, #12
 800312a:	0d49      	lsrs	r1, r1, #21
 800312c:	0b12      	lsrs	r2, r2, #12
 800312e:	0d5b      	lsrs	r3, r3, #21
 8003130:	4281      	cmp	r1, r0
 8003132:	d008      	beq.n	8003146 <__aeabi_dcmpun+0x2e>
 8003134:	4906      	ldr	r1, [pc, #24]	; (8003150 <__aeabi_dcmpun+0x38>)
 8003136:	2000      	movs	r0, #0
 8003138:	428b      	cmp	r3, r1
 800313a:	d103      	bne.n	8003144 <__aeabi_dcmpun+0x2c>
 800313c:	4332      	orrs	r2, r6
 800313e:	0010      	movs	r0, r2
 8003140:	1e42      	subs	r2, r0, #1
 8003142:	4190      	sbcs	r0, r2
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	2001      	movs	r0, #1
 8003148:	432c      	orrs	r4, r5
 800314a:	d1fb      	bne.n	8003144 <__aeabi_dcmpun+0x2c>
 800314c:	e7f2      	b.n	8003134 <__aeabi_dcmpun+0x1c>
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	000007ff 	.word	0x000007ff

08003154 <dspmain>:
//float Mag(float, float);
float ArgMax(float*, float*, const unsigned int, const float, bool);
//void PrintData(float*, float*, const unsigned int, const float, bool, bool);
void LCD_DrawFmax(int size, int side, int row, float * num, float *num2);*/
int dspmain()
{
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	4cc0      	ldr	r4, [pc, #768]	; (8003458 <dspmain+0x304>)
 8003158:	44a5      	add	sp, r4
 800315a:	af04      	add	r7, sp, #16
	//printf("--------program start--------\n");
	
	// define standard mapping
	TuneMap standard;
	standard.E1 = 329.63;
 800315c:	49bf      	ldr	r1, [pc, #764]	; (800345c <dspmain+0x308>)
 800315e:	187b      	adds	r3, r7, r1
 8003160:	4abf      	ldr	r2, [pc, #764]	; (8003460 <dspmain+0x30c>)
 8003162:	601a      	str	r2, [r3, #0]
	standard.B = 246.94;
 8003164:	187b      	adds	r3, r7, r1
 8003166:	4abf      	ldr	r2, [pc, #764]	; (8003464 <dspmain+0x310>)
 8003168:	605a      	str	r2, [r3, #4]
	standard.G = 196.00;
 800316a:	187b      	adds	r3, r7, r1
 800316c:	4abe      	ldr	r2, [pc, #760]	; (8003468 <dspmain+0x314>)
 800316e:	609a      	str	r2, [r3, #8]
	standard.D = 146.83;
 8003170:	187b      	adds	r3, r7, r1
 8003172:	4abe      	ldr	r2, [pc, #760]	; (800346c <dspmain+0x318>)
 8003174:	60da      	str	r2, [r3, #12]
	standard.A = 110.00;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	4abd      	ldr	r2, [pc, #756]	; (8003470 <dspmain+0x31c>)
 800317a:	611a      	str	r2, [r3, #16]
	standard.E2 = 82.41;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	4abd      	ldr	r2, [pc, #756]	; (8003474 <dspmain+0x320>)
 8003180:	615a      	str	r2, [r3, #20]
	//printf("fmax = %f\n", fmax);

	//printf("---------program end---------\n");
	LCD_DrawFmax(3, 0, 1, &freq, &fmax);
*/
	bool center = true;
 8003182:	4bbd      	ldr	r3, [pc, #756]	; (8003478 <dspmain+0x324>)
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
	float data_re[BUF_LEN] = {0};
 800318a:	4bbc      	ldr	r3, [pc, #752]	; (800347c <dspmain+0x328>)
 800318c:	4abc      	ldr	r2, [pc, #752]	; (8003480 <dspmain+0x32c>)
 800318e:	4694      	mov	ip, r2
 8003190:	44bc      	add	ip, r7
 8003192:	4463      	add	r3, ip
 8003194:	0018      	movs	r0, r3
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	001a      	movs	r2, r3
 800319c:	2100      	movs	r1, #0
 800319e:	f006 fad3 	bl	8009748 <memset>
	float sum =0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	4ab7      	ldr	r2, [pc, #732]	; (8003484 <dspmain+0x330>)
 80031a6:	18ba      	adds	r2, r7, r2
 80031a8:	6013      	str	r3, [r2, #0]
	for(int i =0; i < BUF_LEN; i++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	4ab6      	ldr	r2, [pc, #728]	; (8003488 <dspmain+0x334>)
 80031ae:	18ba      	adds	r2, r7, r2
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e029      	b.n	8003208 <dspmain+0xb4>
	{
		//data_re[i] =(center)? ((float) adc_buf[i]) * (pow(-1,i)): (float) adc_buf[i];
		data_re[i] = (float) adc_buf[i];
 80031b4:	4bb5      	ldr	r3, [pc, #724]	; (800348c <dspmain+0x338>)
 80031b6:	4cb4      	ldr	r4, [pc, #720]	; (8003488 <dspmain+0x334>)
 80031b8:	193a      	adds	r2, r7, r4
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	0052      	lsls	r2, r2, #1
 80031be:	5ad3      	ldrh	r3, [r2, r3]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7fe f833 	bl	800122c <__aeabi_ui2f>
 80031c6:	1c01      	adds	r1, r0, #0
 80031c8:	4bac      	ldr	r3, [pc, #688]	; (800347c <dspmain+0x328>)
 80031ca:	4aad      	ldr	r2, [pc, #692]	; (8003480 <dspmain+0x32c>)
 80031cc:	4694      	mov	ip, r2
 80031ce:	44bc      	add	ip, r7
 80031d0:	4463      	add	r3, ip
 80031d2:	193a      	adds	r2, r7, r4
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	50d1      	str	r1, [r2, r3]
		sum += adc_buf[i];
 80031da:	4bac      	ldr	r3, [pc, #688]	; (800348c <dspmain+0x338>)
 80031dc:	193a      	adds	r2, r7, r4
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	0052      	lsls	r2, r2, #1
 80031e2:	5ad3      	ldrh	r3, [r2, r3]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7fd ffdb 	bl	80011a0 <__aeabi_i2f>
 80031ea:	1c03      	adds	r3, r0, #0
 80031ec:	1c19      	adds	r1, r3, #0
 80031ee:	4da5      	ldr	r5, [pc, #660]	; (8003484 <dspmain+0x330>)
 80031f0:	197b      	adds	r3, r7, r5
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	f7fd f96c 	bl	80004d0 <__aeabi_fadd>
 80031f8:	1c03      	adds	r3, r0, #0
 80031fa:	197a      	adds	r2, r7, r5
 80031fc:	6013      	str	r3, [r2, #0]
	for(int i =0; i < BUF_LEN; i++)
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	193a      	adds	r2, r7, r4
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b9f      	ldr	r3, [pc, #636]	; (8003488 <dspmain+0x334>)
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	429a      	cmp	r2, r3
 8003214:	dbce      	blt.n	80031b4 <dspmain+0x60>
	}
	float data_im[BUF_LEN] = {0};
 8003216:	4b9e      	ldr	r3, [pc, #632]	; (8003490 <dspmain+0x33c>)
 8003218:	4a99      	ldr	r2, [pc, #612]	; (8003480 <dspmain+0x32c>)
 800321a:	4694      	mov	ip, r2
 800321c:	44bc      	add	ip, r7
 800321e:	4463      	add	r3, ip
 8003220:	0018      	movs	r0, r3
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	001a      	movs	r2, r3
 8003228:	2100      	movs	r1, #0
 800322a:	f006 fa8d 	bl	8009748 <memset>
	float avg = sum/BUF_LEN;
 800322e:	218a      	movs	r1, #138	; 0x8a
 8003230:	05c9      	lsls	r1, r1, #23
 8003232:	4b94      	ldr	r3, [pc, #592]	; (8003484 <dspmain+0x330>)
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	f7fd fae6 	bl	8000808 <__aeabi_fdiv>
 800323c:	1c03      	adds	r3, r0, #0
 800323e:	4a95      	ldr	r2, [pc, #596]	; (8003494 <dspmain+0x340>)
 8003240:	18ba      	adds	r2, r7, r2
 8003242:	6013      	str	r3, [r2, #0]
	for(int i =0; i < BUF_LEN; i++)
 8003244:	2300      	movs	r3, #0
 8003246:	4a94      	ldr	r2, [pc, #592]	; (8003498 <dspmain+0x344>)
 8003248:	18ba      	adds	r2, r7, r2
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	e054      	b.n	80032f8 <dspmain+0x1a4>
		{
			data_re[i] =(center) ? (data_re[i] - avg) * (pow(-1,i)) : data_re[i] -avg;
 800324e:	4b8a      	ldr	r3, [pc, #552]	; (8003478 <dspmain+0x324>)
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02d      	beq.n	80032b4 <dspmain+0x160>
 8003258:	4b88      	ldr	r3, [pc, #544]	; (800347c <dspmain+0x328>)
 800325a:	4a89      	ldr	r2, [pc, #548]	; (8003480 <dspmain+0x32c>)
 800325c:	4694      	mov	ip, r2
 800325e:	44bc      	add	ip, r7
 8003260:	4463      	add	r3, ip
 8003262:	4e8d      	ldr	r6, [pc, #564]	; (8003498 <dspmain+0x344>)
 8003264:	19ba      	adds	r2, r7, r6
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	0092      	lsls	r2, r2, #2
 800326a:	58d3      	ldr	r3, [r2, r3]
 800326c:	4a89      	ldr	r2, [pc, #548]	; (8003494 <dspmain+0x340>)
 800326e:	18ba      	adds	r2, r7, r2
 8003270:	6811      	ldr	r1, [r2, #0]
 8003272:	1c18      	adds	r0, r3, #0
 8003274:	f7fd fdac 	bl	8000dd0 <__aeabi_fsub>
 8003278:	1c03      	adds	r3, r0, #0
 800327a:	1c18      	adds	r0, r3, #0
 800327c:	f7ff fcc8 	bl	8002c10 <__aeabi_f2d>
 8003280:	0004      	movs	r4, r0
 8003282:	000d      	movs	r5, r1
 8003284:	19bb      	adds	r3, r7, r6
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	f7ff fc92 	bl	8002bb0 <__aeabi_i2d>
 800328c:	0002      	movs	r2, r0
 800328e:	000b      	movs	r3, r1
 8003290:	2000      	movs	r0, #0
 8003292:	4982      	ldr	r1, [pc, #520]	; (800349c <dspmain+0x348>)
 8003294:	f009 f87c 	bl	800c390 <pow>
 8003298:	0002      	movs	r2, r0
 800329a:	000b      	movs	r3, r1
 800329c:	0020      	movs	r0, r4
 800329e:	0029      	movs	r1, r5
 80032a0:	f7fe fe52 	bl	8001f48 <__aeabi_dmul>
 80032a4:	0002      	movs	r2, r0
 80032a6:	000b      	movs	r3, r1
 80032a8:	0010      	movs	r0, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	f7ff fcf8 	bl	8002ca0 <__aeabi_d2f>
 80032b0:	1c01      	adds	r1, r0, #0
 80032b2:	e011      	b.n	80032d8 <dspmain+0x184>
 80032b4:	4b71      	ldr	r3, [pc, #452]	; (800347c <dspmain+0x328>)
 80032b6:	4a72      	ldr	r2, [pc, #456]	; (8003480 <dspmain+0x32c>)
 80032b8:	4694      	mov	ip, r2
 80032ba:	44bc      	add	ip, r7
 80032bc:	4463      	add	r3, ip
 80032be:	4a76      	ldr	r2, [pc, #472]	; (8003498 <dspmain+0x344>)
 80032c0:	18ba      	adds	r2, r7, r2
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	0092      	lsls	r2, r2, #2
 80032c6:	58d3      	ldr	r3, [r2, r3]
 80032c8:	4a72      	ldr	r2, [pc, #456]	; (8003494 <dspmain+0x340>)
 80032ca:	18ba      	adds	r2, r7, r2
 80032cc:	6811      	ldr	r1, [r2, #0]
 80032ce:	1c18      	adds	r0, r3, #0
 80032d0:	f7fd fd7e 	bl	8000dd0 <__aeabi_fsub>
 80032d4:	1c03      	adds	r3, r0, #0
 80032d6:	1c19      	adds	r1, r3, #0
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <dspmain+0x328>)
 80032da:	4a69      	ldr	r2, [pc, #420]	; (8003480 <dspmain+0x32c>)
 80032dc:	4694      	mov	ip, r2
 80032de:	44bc      	add	ip, r7
 80032e0:	4463      	add	r3, ip
 80032e2:	486d      	ldr	r0, [pc, #436]	; (8003498 <dspmain+0x344>)
 80032e4:	183a      	adds	r2, r7, r0
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	50d1      	str	r1, [r2, r3]
	for(int i =0; i < BUF_LEN; i++)
 80032ec:	0002      	movs	r2, r0
 80032ee:	18bb      	adds	r3, r7, r2
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	18ba      	adds	r2, r7, r2
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b67      	ldr	r3, [pc, #412]	; (8003498 <dspmain+0x344>)
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	429a      	cmp	r2, r3
 8003304:	dba3      	blt.n	800324e <dspmain+0xfa>
		}
	//LCD_DrawFmax(3, 0, 1, 0, &avg);
	RearrangeFFT(data_re, data_im, BUF_LEN);
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	011a      	lsls	r2, r3, #4
 800330a:	2514      	movs	r5, #20
 800330c:	1979      	adds	r1, r7, r5
 800330e:	4e64      	ldr	r6, [pc, #400]	; (80034a0 <dspmain+0x34c>)
 8003310:	19bb      	adds	r3, r7, r6
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f93e 	bl	8003594 <RearrangeFFT>
	ComputeFFT(data_re, data_im, BUF_LEN);
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	011a      	lsls	r2, r3, #4
 800331c:	1979      	adds	r1, r7, r5
 800331e:	19bb      	adds	r3, r7, r6
 8003320:	0018      	movs	r0, r3
 8003322:	f000 f991 	bl	8003648 <ComputeFFT>
	float fmax = ArgMax(data_re, data_im, BUF_LEN, fs, center);
 8003326:	4c5f      	ldr	r4, [pc, #380]	; (80034a4 <dspmain+0x350>)
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	011a      	lsls	r2, r3, #4
 800332c:	1979      	adds	r1, r7, r5
 800332e:	19b8      	adds	r0, r7, r6
 8003330:	4b51      	ldr	r3, [pc, #324]	; (8003478 <dspmain+0x324>)
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	1c23      	adds	r3, r4, #0
 800333a:	f000 fab4 	bl	80038a6 <ArgMax>
 800333e:	1c03      	adds	r3, r0, #0
 8003340:	613b      	str	r3, [r7, #16]
	float freq = 100.0;
 8003342:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <dspmain+0x354>)
 8003344:	60fb      	str	r3, [r7, #12]
	fmax = (fmax< 0)? (fmax * -1) : fmax;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2100      	movs	r1, #0
 800334a:	1c18      	adds	r0, r3, #0
 800334c:	f7fd f862 	bl	8000414 <__aeabi_fcmplt>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d004      	beq.n	800335e <dspmain+0x20a>
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	0612      	lsls	r2, r2, #24
 800335a:	4053      	eors	r3, r2
 800335c:	e000      	b.n	8003360 <dspmain+0x20c>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	613b      	str	r3, [r7, #16]
	LCD_DrawFmax(3, 0, 1, &freq, &fmax);
 8003362:	230c      	movs	r3, #12
 8003364:	18fa      	adds	r2, r7, r3
 8003366:	2310      	movs	r3, #16
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	0013      	movs	r3, r2
 800336e:	2201      	movs	r2, #1
 8003370:	2100      	movs	r1, #0
 8003372:	2003      	movs	r0, #3
 8003374:	f000 f8b2 	bl	80034dc <LCD_DrawFmax>
	//Jacobs algorithm (AKA the J algo)
	int angle = (notefreq[currentPeg] - fmax) / (AveDiff[currentPeg]/180.0);
 8003378:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <dspmain+0x358>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <dspmain+0x35c>)
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	58d3      	ldr	r3, [r2, r3]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	1c11      	adds	r1, r2, #0
 8003386:	1c18      	adds	r0, r3, #0
 8003388:	f7fd fd22 	bl	8000dd0 <__aeabi_fsub>
 800338c:	1c03      	adds	r3, r0, #0
 800338e:	1c18      	adds	r0, r3, #0
 8003390:	f7ff fc3e 	bl	8002c10 <__aeabi_f2d>
 8003394:	0004      	movs	r4, r0
 8003396:	000d      	movs	r5, r1
 8003398:	4b44      	ldr	r3, [pc, #272]	; (80034ac <dspmain+0x358>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <dspmain+0x360>)
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	58d3      	ldr	r3, [r2, r3]
 80033a2:	1c18      	adds	r0, r3, #0
 80033a4:	f7ff fc34 	bl	8002c10 <__aeabi_f2d>
 80033a8:	2200      	movs	r2, #0
 80033aa:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <dspmain+0x364>)
 80033ac:	f7fe fae4 	bl	8001978 <__aeabi_ddiv>
 80033b0:	0002      	movs	r2, r0
 80033b2:	000b      	movs	r3, r1
 80033b4:	0020      	movs	r0, r4
 80033b6:	0029      	movs	r1, r5
 80033b8:	f7fe fade 	bl	8001978 <__aeabi_ddiv>
 80033bc:	0002      	movs	r2, r0
 80033be:	000b      	movs	r3, r1
 80033c0:	0010      	movs	r0, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	f7ff fbbe 	bl	8002b44 <__aeabi_d2iz>
 80033c8:	0003      	movs	r3, r0
 80033ca:	4c3c      	ldr	r4, [pc, #240]	; (80034bc <dspmain+0x368>)
 80033cc:	193a      	adds	r2, r7, r4
 80033ce:	6013      	str	r3, [r2, #0]
	char text[6];
	sprintf(text, "%d", angle);
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	493a      	ldr	r1, [pc, #232]	; (80034c0 <dspmain+0x36c>)
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	0018      	movs	r0, r3
 80033da:	f006 fa77 	bl	80098cc <siprintf>
	LCD_DrawString(60,180,YELLOW, BLUE, "ANGLE", 16, 0);
 80033de:	4a39      	ldr	r2, [pc, #228]	; (80034c4 <dspmain+0x370>)
 80033e0:	2300      	movs	r3, #0
 80033e2:	9302      	str	r3, [sp, #8]
 80033e4:	2310      	movs	r3, #16
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <dspmain+0x374>)
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	231f      	movs	r3, #31
 80033ee:	21b4      	movs	r1, #180	; 0xb4
 80033f0:	203c      	movs	r0, #60	; 0x3c
 80033f2:	f000 fee5 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(120,180,YELLOW, BLUE, text, 16, 0);
 80033f6:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <dspmain+0x370>)
 80033f8:	2300      	movs	r3, #0
 80033fa:	9302      	str	r3, [sp, #8]
 80033fc:	2310      	movs	r3, #16
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	231f      	movs	r3, #31
 8003406:	21b4      	movs	r1, #180	; 0xb4
 8003408:	2078      	movs	r0, #120	; 0x78
 800340a:	f000 fed9 	bl	80041c0 <LCD_DrawString>
	int dir = (angle < 0)? 2: 1;
 800340e:	193b      	adds	r3, r7, r4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	da01      	bge.n	800341a <dspmain+0x2c6>
 8003416:	2302      	movs	r3, #2
 8003418:	e000      	b.n	800341c <dspmain+0x2c8>
 800341a:	2301      	movs	r3, #1
 800341c:	482b      	ldr	r0, [pc, #172]	; (80034cc <dspmain+0x378>)
 800341e:	183a      	adds	r2, r7, r0
 8003420:	6013      	str	r3, [r2, #0]
	if(abs(angle) < 500 ){stepperMotor(dir, 7500, angle, 2);}
 8003422:	4926      	ldr	r1, [pc, #152]	; (80034bc <dspmain+0x368>)
 8003424:	187b      	adds	r3, r7, r1
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <dspmain+0x37c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	db0d      	blt.n	800344a <dspmain+0x2f6>
 800342e:	187b      	adds	r3, r7, r1
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	23fa      	movs	r3, #250	; 0xfa
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	429a      	cmp	r2, r3
 8003438:	da07      	bge.n	800344a <dspmain+0x2f6>
 800343a:	187b      	adds	r3, r7, r1
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4925      	ldr	r1, [pc, #148]	; (80034d4 <dspmain+0x380>)
 8003440:	183b      	adds	r3, r7, r0
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	2302      	movs	r3, #2
 8003446:	f002 f933 	bl	80056b0 <stepperMotor>
	//
	return 0;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <dspmain+0x384>)
 8003452:	449d      	add	sp, r3
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	ffffbfa4 	.word	0xffffbfa4
 800345c:	00004014 	.word	0x00004014
 8003460:	43a4d0a4 	.word	0x43a4d0a4
 8003464:	4376f0a4 	.word	0x4376f0a4
 8003468:	43440000 	.word	0x43440000
 800346c:	4312d47b 	.word	0x4312d47b
 8003470:	42dc0000 	.word	0x42dc0000
 8003474:	42a4d1ec 	.word	0x42a4d1ec
 8003478:	0000403b 	.word	0x0000403b
 800347c:	ffffdfcc 	.word	0xffffdfcc
 8003480:	00004048 	.word	0x00004048
 8003484:	00004044 	.word	0x00004044
 8003488:	00004040 	.word	0x00004040
 800348c:	20000168 	.word	0x20000168
 8003490:	ffffbfcc 	.word	0xffffbfcc
 8003494:	00004034 	.word	0x00004034
 8003498:	0000403c 	.word	0x0000403c
 800349c:	bff00000 	.word	0xbff00000
 80034a0:	00002014 	.word	0x00002014
 80034a4:	4759038f 	.word	0x4759038f
 80034a8:	42c80000 	.word	0x42c80000
 80034ac:	20000144 	.word	0x20000144
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000018 	.word	0x20000018
 80034b8:	40668000 	.word	0x40668000
 80034bc:	00004030 	.word	0x00004030
 80034c0:	0800e1a8 	.word	0x0800e1a8
 80034c4:	0000ffe0 	.word	0x0000ffe0
 80034c8:	0800e1ac 	.word	0x0800e1ac
 80034cc:	0000402c 	.word	0x0000402c
 80034d0:	fffffe0d 	.word	0xfffffe0d
 80034d4:	00001d4c 	.word	0x00001d4c
 80034d8:	0000404c 	.word	0x0000404c

080034dc <LCD_DrawFmax>:
void LCD_DrawFmax(int size, int side, int row, float *num, float *num2)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b08d      	sub	sp, #52	; 0x34
 80034e0:	af04      	add	r7, sp, #16
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
	char fma[15];
	gcvt(notefreq[currentPeg], 6, fma);
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <LCD_DrawFmax+0xa4>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <LCD_DrawFmax+0xa8>)
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	58d3      	ldr	r3, [r2, r3]
 80034f4:	1c18      	adds	r0, r3, #0
 80034f6:	f7ff fb8b 	bl	8002c10 <__aeabi_f2d>
 80034fa:	2410      	movs	r4, #16
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	2206      	movs	r2, #6
 8003500:	f006 f8c8 	bl	8009694 <gcvt>
	LCD_DrawString(60,100,YELLOW, BLUE, "Target FMAX", 16, 0);
 8003504:	4a20      	ldr	r2, [pc, #128]	; (8003588 <LCD_DrawFmax+0xac>)
 8003506:	2300      	movs	r3, #0
 8003508:	9302      	str	r3, [sp, #8]
 800350a:	2310      	movs	r3, #16
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	4b1f      	ldr	r3, [pc, #124]	; (800358c <LCD_DrawFmax+0xb0>)
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	231f      	movs	r3, #31
 8003514:	2164      	movs	r1, #100	; 0x64
 8003516:	203c      	movs	r0, #60	; 0x3c
 8003518:	f000 fe52 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(60,120,YELLOW, BLUE, fma, 16, 0);
 800351c:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <LCD_DrawFmax+0xac>)
 800351e:	2300      	movs	r3, #0
 8003520:	9302      	str	r3, [sp, #8]
 8003522:	2310      	movs	r3, #16
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	193b      	adds	r3, r7, r4
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	231f      	movs	r3, #31
 800352c:	2178      	movs	r1, #120	; 0x78
 800352e:	203c      	movs	r0, #60	; 0x3c
 8003530:	f000 fe46 	bl	80041c0 <LCD_DrawString>
	gcvt(*num2, 6, fma);
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	1c18      	adds	r0, r3, #0
 800353a:	f7ff fb69 	bl	8002c10 <__aeabi_f2d>
 800353e:	193b      	adds	r3, r7, r4
 8003540:	2206      	movs	r2, #6
 8003542:	f006 f8a7 	bl	8009694 <gcvt>
	LCD_DrawString(60,140,YELLOW, BLUE, "FMAX", 16, 0);
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <LCD_DrawFmax+0xac>)
 8003548:	2300      	movs	r3, #0
 800354a:	9302      	str	r3, [sp, #8]
 800354c:	2310      	movs	r3, #16
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <LCD_DrawFmax+0xb4>)
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	231f      	movs	r3, #31
 8003556:	218c      	movs	r1, #140	; 0x8c
 8003558:	203c      	movs	r0, #60	; 0x3c
 800355a:	f000 fe31 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(60,160,YELLOW, BLUE, fma, 16, 0);
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <LCD_DrawFmax+0xac>)
 8003560:	2300      	movs	r3, #0
 8003562:	9302      	str	r3, [sp, #8]
 8003564:	2310      	movs	r3, #16
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	193b      	adds	r3, r7, r4
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	231f      	movs	r3, #31
 800356e:	21a0      	movs	r1, #160	; 0xa0
 8003570:	203c      	movs	r0, #60	; 0x3c
 8003572:	f000 fe25 	bl	80041c0 <LCD_DrawString>

}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b009      	add	sp, #36	; 0x24
 800357c:	bd90      	pop	{r4, r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	20000144 	.word	0x20000144
 8003584:	20000000 	.word	0x20000000
 8003588:	0000ffe0 	.word	0x0000ffe0
 800358c:	0800e1b4 	.word	0x0800e1b4
 8003590:	0800e1c0 	.word	0x0800e1c0

08003594 <RearrangeFFT>:
	
	return;
}

void RearrangeFFT(float* data_re, float* data_im, const unsigned int N)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
	unsigned int target = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
	for (int n = 0; n < N; n++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	e045      	b.n	8003636 <RearrangeFFT+0xa2>
	{
		if (target > n)
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d92b      	bls.n	800360a <RearrangeFFT+0x76>
		{
			SWAP(data_re[target], data_re[n]);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	18d3      	adds	r3, r2, r3
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	18d2      	adds	r2, r2, r3
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	18cb      	adds	r3, r1, r3
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	18d3      	adds	r3, r2, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	601a      	str	r2, [r3, #0]
			SWAP(data_im[target], data_im[n]);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	18d2      	adds	r2, r2, r3
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	18cb      	adds	r3, r1, r3
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	601a      	str	r2, [r3, #0]
		}
		unsigned int mask = N;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	61fb      	str	r3, [r7, #28]
		while (target & (mask >>= 1))
 800360e:	e004      	b.n	800361a <RearrangeFFT+0x86>
			target &= ~mask;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	43da      	mvns	r2, r3
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	4013      	ands	r3, r2
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
		while (target & (mask >>= 1))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4013      	ands	r3, r2
 8003626:	d1f3      	bne.n	8003610 <RearrangeFFT+0x7c>
		target |= mask;
 8003628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
	for (int n = 0; n < N; n++)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	3301      	adds	r3, #1
 8003634:	623b      	str	r3, [r7, #32]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d8b5      	bhi.n	80035aa <RearrangeFFT+0x16>
	}
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b00a      	add	sp, #40	; 0x28
 8003646:	bd80      	pop	{r7, pc}

08003648 <ComputeFFT>:

void ComputeFFT(float* data_re, float* data_im, const unsigned int N)
{
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b090      	sub	sp, #64	; 0x40
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
	for (int step = 1; step < N; step <<= 1)
 8003654:	2301      	movs	r3, #1
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003658:	e0e6      	b.n	8003828 <ComputeFFT+0x1e0>
	{
		const unsigned int jump = step << 1;
 800365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
		const float step_d = (float) step;
 8003660:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003662:	f7fd fd9d 	bl	80011a0 <__aeabi_i2f>
 8003666:	1c03      	adds	r3, r0, #0
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
		float twiddle_re = 1.0;
 800366a:	23fe      	movs	r3, #254	; 0xfe
 800366c:	059b      	lsls	r3, r3, #22
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
		float twiddle_im = 0.0;
 8003670:	2300      	movs	r3, #0
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
		for (int group = 0; group < step; group++)
 8003674:	2300      	movs	r3, #0
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
 8003678:	e0ce      	b.n	8003818 <ComputeFFT+0x1d0>
		{
			for (int pair = group; pair < N; pair += jump)
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800367e:	e075      	b.n	800376c <ComputeFFT+0x124>
			{
				const unsigned int match = pair + step;
 8003680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	61fb      	str	r3, [r7, #28]
				const float product_re = twiddle_re * data_re[match] - twiddle_im * data_im[match];
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	18d3      	adds	r3, r2, r3
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003694:	1c18      	adds	r0, r3, #0
 8003696:	f7fd fa81 	bl	8000b9c <__aeabi_fmul>
 800369a:	1c03      	adds	r3, r0, #0
 800369c:	1c1c      	adds	r4, r3, #0
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	18d3      	adds	r3, r2, r3
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036aa:	1c18      	adds	r0, r3, #0
 80036ac:	f7fd fa76 	bl	8000b9c <__aeabi_fmul>
 80036b0:	1c03      	adds	r3, r0, #0
 80036b2:	1c19      	adds	r1, r3, #0
 80036b4:	1c20      	adds	r0, r4, #0
 80036b6:	f7fd fb8b 	bl	8000dd0 <__aeabi_fsub>
 80036ba:	1c03      	adds	r3, r0, #0
 80036bc:	61bb      	str	r3, [r7, #24]
				const float product_im = twiddle_im * data_re[match] + twiddle_re * data_im[match];
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	18d3      	adds	r3, r2, r3
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036ca:	1c18      	adds	r0, r3, #0
 80036cc:	f7fd fa66 	bl	8000b9c <__aeabi_fmul>
 80036d0:	1c03      	adds	r3, r0, #0
 80036d2:	1c1c      	adds	r4, r3, #0
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036e0:	1c18      	adds	r0, r3, #0
 80036e2:	f7fd fa5b 	bl	8000b9c <__aeabi_fmul>
 80036e6:	1c03      	adds	r3, r0, #0
 80036e8:	1c19      	adds	r1, r3, #0
 80036ea:	1c20      	adds	r0, r4, #0
 80036ec:	f7fc fef0 	bl	80004d0 <__aeabi_fadd>
 80036f0:	1c03      	adds	r3, r0, #0
 80036f2:	617b      	str	r3, [r7, #20]
				data_re[match] = data_re[pair] - product_re;
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	18d3      	adds	r3, r2, r3
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	18d4      	adds	r4, r2, r3
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	f7fd fb62 	bl	8000dd0 <__aeabi_fsub>
 800370c:	1c03      	adds	r3, r0, #0
 800370e:	6023      	str	r3, [r4, #0]
				data_im[match] = data_im[pair] - product_im;
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	18d3      	adds	r3, r2, r3
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	18d4      	adds	r4, r2, r3
 8003722:	6979      	ldr	r1, [r7, #20]
 8003724:	f7fd fb54 	bl	8000dd0 <__aeabi_fsub>
 8003728:	1c03      	adds	r3, r0, #0
 800372a:	6023      	str	r3, [r4, #0]
				data_re[pair] += product_re;
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	18d3      	adds	r3, r2, r3
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	18d4      	adds	r4, r2, r3
 800373e:	69b9      	ldr	r1, [r7, #24]
 8003740:	f7fc fec6 	bl	80004d0 <__aeabi_fadd>
 8003744:	1c03      	adds	r3, r0, #0
 8003746:	6023      	str	r3, [r4, #0]
				data_im[pair] += product_im;
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	18d3      	adds	r3, r2, r3
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	18d4      	adds	r4, r2, r3
 800375a:	6979      	ldr	r1, [r7, #20]
 800375c:	f7fc feb8 	bl	80004d0 <__aeabi_fadd>
 8003760:	1c03      	adds	r3, r0, #0
 8003762:	6023      	str	r3, [r4, #0]
			for (int pair = group; pair < N; pair += jump)
 8003764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d885      	bhi.n	8003680 <ComputeFFT+0x38>
			}
			if ((group + 1) == step)
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	3301      	adds	r3, #1
 8003778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800377a:	429a      	cmp	r2, r3
 800377c:	d048      	beq.n	8003810 <ComputeFFT+0x1c8>
				continue;
			float angle = -PI * ((float) group + 1) / step_d;
 800377e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003780:	f7fd fd0e 	bl	80011a0 <__aeabi_i2f>
 8003784:	1c03      	adds	r3, r0, #0
 8003786:	21fe      	movs	r1, #254	; 0xfe
 8003788:	0589      	lsls	r1, r1, #22
 800378a:	1c18      	adds	r0, r3, #0
 800378c:	f7fc fea0 	bl	80004d0 <__aeabi_fadd>
 8003790:	1c03      	adds	r3, r0, #0
 8003792:	1c18      	adds	r0, r3, #0
 8003794:	f7ff fa3c 	bl	8002c10 <__aeabi_f2d>
 8003798:	4a28      	ldr	r2, [pc, #160]	; (800383c <ComputeFFT+0x1f4>)
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <ComputeFFT+0x1f8>)
 800379c:	f7fe fbd4 	bl	8001f48 <__aeabi_dmul>
 80037a0:	0002      	movs	r2, r0
 80037a2:	000b      	movs	r3, r1
 80037a4:	0014      	movs	r4, r2
 80037a6:	001d      	movs	r5, r3
 80037a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037aa:	f7ff fa31 	bl	8002c10 <__aeabi_f2d>
 80037ae:	0002      	movs	r2, r0
 80037b0:	000b      	movs	r3, r1
 80037b2:	0020      	movs	r0, r4
 80037b4:	0029      	movs	r1, r5
 80037b6:	f7fe f8df 	bl	8001978 <__aeabi_ddiv>
 80037ba:	0002      	movs	r2, r0
 80037bc:	000b      	movs	r3, r1
 80037be:	0010      	movs	r0, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	f7ff fa6d 	bl	8002ca0 <__aeabi_d2f>
 80037c6:	1c03      	adds	r3, r0, #0
 80037c8:	623b      	str	r3, [r7, #32]
			twiddle_re = cos(angle);
 80037ca:	6a38      	ldr	r0, [r7, #32]
 80037cc:	f7ff fa20 	bl	8002c10 <__aeabi_f2d>
 80037d0:	0002      	movs	r2, r0
 80037d2:	000b      	movs	r3, r1
 80037d4:	0010      	movs	r0, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	f008 fd52 	bl	800c280 <cos>
 80037dc:	0002      	movs	r2, r0
 80037de:	000b      	movs	r3, r1
 80037e0:	0010      	movs	r0, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	f7ff fa5c 	bl	8002ca0 <__aeabi_d2f>
 80037e8:	1c03      	adds	r3, r0, #0
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
			twiddle_im = sin(angle);
 80037ec:	6a38      	ldr	r0, [r7, #32]
 80037ee:	f7ff fa0f 	bl	8002c10 <__aeabi_f2d>
 80037f2:	0002      	movs	r2, r0
 80037f4:	000b      	movs	r3, r1
 80037f6:	0010      	movs	r0, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	f008 fd83 	bl	800c304 <sin>
 80037fe:	0002      	movs	r2, r0
 8003800:	000b      	movs	r3, r1
 8003802:	0010      	movs	r0, r2
 8003804:	0019      	movs	r1, r3
 8003806:	f7ff fa4b 	bl	8002ca0 <__aeabi_d2f>
 800380a:	1c03      	adds	r3, r0, #0
 800380c:	637b      	str	r3, [r7, #52]	; 0x34
 800380e:	e000      	b.n	8003812 <ComputeFFT+0x1ca>
				continue;
 8003810:	46c0      	nop			; (mov r8, r8)
		for (int group = 0; group < step; group++)
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	3301      	adds	r3, #1
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
 8003818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381c:	429a      	cmp	r2, r3
 800381e:	da00      	bge.n	8003822 <ComputeFFT+0x1da>
 8003820:	e72b      	b.n	800367a <ComputeFFT+0x32>
	for (int step = 1; step < N; step <<= 1)
 8003822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d900      	bls.n	8003832 <ComputeFFT+0x1ea>
 8003830:	e713      	b.n	800365a <ComputeFFT+0x12>
		}
	}
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b010      	add	sp, #64	; 0x40
 800383a:	bdb0      	pop	{r4, r5, r7, pc}
 800383c:	53c8d4f1 	.word	0x53c8d4f1
 8003840:	c00921fb 	.word	0xc00921fb

08003844 <Mag>:

void Mag(float x1, float x2, float * result)
{
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
	*result  = sqrt(pow(x1, 2) + pow(x2, 2));
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff f9dd 	bl	8002c10 <__aeabi_f2d>
 8003856:	2200      	movs	r2, #0
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	05db      	lsls	r3, r3, #23
 800385c:	f008 fd98 	bl	800c390 <pow>
 8003860:	0004      	movs	r4, r0
 8003862:	000d      	movs	r5, r1
 8003864:	68b8      	ldr	r0, [r7, #8]
 8003866:	f7ff f9d3 	bl	8002c10 <__aeabi_f2d>
 800386a:	2200      	movs	r2, #0
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	05db      	lsls	r3, r3, #23
 8003870:	f008 fd8e 	bl	800c390 <pow>
 8003874:	0002      	movs	r2, r0
 8003876:	000b      	movs	r3, r1
 8003878:	0020      	movs	r0, r4
 800387a:	0029      	movs	r1, r5
 800387c:	f7fd fd12 	bl	80012a4 <__aeabi_dadd>
 8003880:	0002      	movs	r2, r0
 8003882:	000b      	movs	r3, r1
 8003884:	0010      	movs	r0, r2
 8003886:	0019      	movs	r1, r3
 8003888:	f008 fe3a 	bl	800c500 <sqrt>
 800388c:	0002      	movs	r2, r0
 800388e:	000b      	movs	r3, r1
 8003890:	0010      	movs	r0, r2
 8003892:	0019      	movs	r1, r3
 8003894:	f7ff fa04 	bl	8002ca0 <__aeabi_d2f>
 8003898:	1c02      	adds	r2, r0, #0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b004      	add	sp, #16
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}

080038a6 <ArgMax>:

float ArgMax(float* data_re, float* data_im, const unsigned int N, const float samp_freq, bool center)
{
 80038a6:	b5b0      	push	{r4, r5, r7, lr}
 80038a8:	b08a      	sub	sp, #40	; 0x28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
	float df = samp_freq / N;
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fd fcb9 	bl	800122c <__aeabi_ui2f>
 80038ba:	1c03      	adds	r3, r0, #0
 80038bc:	1c19      	adds	r1, r3, #0
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	f7fc ffa2 	bl	8000808 <__aeabi_fdiv>
 80038c4:	1c03      	adds	r3, r0, #0
 80038c6:	617b      	str	r3, [r7, #20]
	float vmax = 0.0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
	float fmax = 0.0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	623b      	str	r3, [r7, #32]
	for (int n = 0; n < N; n++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	e063      	b.n	800399e <ArgMax+0xf8>
	{
		const float val = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
		Mag(data_re[n], data_im[n], &val);
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	18d3      	adds	r3, r2, r3
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	18d3      	adds	r3, r2, r3
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2210      	movs	r2, #16
 80038f0:	18ba      	adds	r2, r7, r2
 80038f2:	1c19      	adds	r1, r3, #0
 80038f4:	f7ff ffa6 	bl	8003844 <Mag>
		if (val > vmax)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1c19      	adds	r1, r3, #0
 80038fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038fe:	f7fc fd89 	bl	8000414 <__aeabi_fcmplt>
 8003902:	1e03      	subs	r3, r0, #0
 8003904:	d048      	beq.n	8003998 <ArgMax+0xf2>
		{
			vmax = val;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
			float f = 0.0;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
			if (center)
 800390e:	2338      	movs	r3, #56	; 0x38
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d033      	beq.n	8003980 <ArgMax+0xda>
				f = (-samp_freq / 2 + n * df) + (df / 2) * (N % 2);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	0612      	lsls	r2, r2, #24
 800391e:	4053      	eors	r3, r2
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	05c9      	lsls	r1, r1, #23
 8003924:	1c18      	adds	r0, r3, #0
 8003926:	f7fc ff6f 	bl	8000808 <__aeabi_fdiv>
 800392a:	1c03      	adds	r3, r0, #0
 800392c:	1c1c      	adds	r4, r3, #0
 800392e:	69f8      	ldr	r0, [r7, #28]
 8003930:	f7fd fc36 	bl	80011a0 <__aeabi_i2f>
 8003934:	1c03      	adds	r3, r0, #0
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	1c18      	adds	r0, r3, #0
 800393a:	f7fd f92f 	bl	8000b9c <__aeabi_fmul>
 800393e:	1c03      	adds	r3, r0, #0
 8003940:	1c19      	adds	r1, r3, #0
 8003942:	1c20      	adds	r0, r4, #0
 8003944:	f7fc fdc4 	bl	80004d0 <__aeabi_fadd>
 8003948:	1c03      	adds	r3, r0, #0
 800394a:	1c1c      	adds	r4, r3, #0
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	05c9      	lsls	r1, r1, #23
 8003950:	6978      	ldr	r0, [r7, #20]
 8003952:	f7fc ff59 	bl	8000808 <__aeabi_fdiv>
 8003956:	1c03      	adds	r3, r0, #0
 8003958:	1c1d      	adds	r5, r3, #0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f7fd fc63 	bl	800122c <__aeabi_ui2f>
 8003966:	1c03      	adds	r3, r0, #0
 8003968:	1c19      	adds	r1, r3, #0
 800396a:	1c28      	adds	r0, r5, #0
 800396c:	f7fd f916 	bl	8000b9c <__aeabi_fmul>
 8003970:	1c03      	adds	r3, r0, #0
 8003972:	1c19      	adds	r1, r3, #0
 8003974:	1c20      	adds	r0, r4, #0
 8003976:	f7fc fdab 	bl	80004d0 <__aeabi_fadd>
 800397a:	1c03      	adds	r3, r0, #0
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e009      	b.n	8003994 <ArgMax+0xee>
			else
				f = n * df;
 8003980:	69f8      	ldr	r0, [r7, #28]
 8003982:	f7fd fc0d 	bl	80011a0 <__aeabi_i2f>
 8003986:	1c03      	adds	r3, r0, #0
 8003988:	1c19      	adds	r1, r3, #0
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7fd f906 	bl	8000b9c <__aeabi_fmul>
 8003990:	1c03      	adds	r3, r0, #0
 8003992:	61bb      	str	r3, [r7, #24]
			fmax = f;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	623b      	str	r3, [r7, #32]
	for (int n = 0; n < N; n++)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3301      	adds	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d897      	bhi.n	80038d6 <ArgMax+0x30>
		}
	}
	return fmax;
 80039a6:	6a3b      	ldr	r3, [r7, #32]
}
 80039a8:	1c18      	adds	r0, r3, #0
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b00a      	add	sp, #40	; 0x28
 80039ae:	bdb0      	pop	{r4, r5, r7, pc}

080039b0 <nano_wait>:
#define LCD_RESET_CLR GPIO_TYPE->BRR=1<<LCD_RESET

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	1c18      	adds	r0, r3, #0

080039bc <repeat>:
 80039bc:	3853      	subs	r0, #83	; 0x53
 80039be:	dcfd      	bgt.n	80039bc <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <LCD_Reset>:

void LCD_Reset(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
    // Assert reset
    GPIOA->BRR = 1<<LCD_RESET;
 80039cc:	2390      	movs	r3, #144	; 0x90
 80039ce:	05db      	lsls	r3, r3, #23
 80039d0:	2204      	movs	r2, #4
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(100000000);
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <LCD_Reset+0x2c>)
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7ff ffea 	bl	80039b0 <nano_wait>
    GPIOA->BSRR = 1<<LCD_RESET;
 80039dc:	2390      	movs	r3, #144	; 0x90
 80039de:	05db      	lsls	r3, r3, #23
 80039e0:	2204      	movs	r2, #4
 80039e2:	619a      	str	r2, [r3, #24]
    nano_wait(50000000);
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <LCD_Reset+0x30>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7ff ffe2 	bl	80039b0 <nano_wait>
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	05f5e100 	.word	0x05f5e100
 80039f8:	02faf080 	.word	0x02faf080

080039fc <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	0002      	movs	r2, r0
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <LCD_WR_REG+0x30>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	4013      	ands	r3, r2
 8003a12:	d1fa      	bne.n	8003a0a <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    LCD_RS_CLR;
 8003a14:	2390      	movs	r3, #144	; 0x90
 8003a16:	05db      	lsls	r3, r3, #23
 8003a18:	2208      	movs	r2, #8
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
    *((uint8_t*)&SPI->DR) = data;
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <LCD_WR_REG+0x34>)
 8003a1e:	1dfb      	adds	r3, r7, #7
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	7013      	strb	r3, [r2, #0]
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40013000 	.word	0x40013000
 8003a30:	4001300c 	.word	0x4001300c

08003a34 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	1dfb      	adds	r3, r7, #7
 8003a3e:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <LCD_WR_DATA+0x30>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d1fa      	bne.n	8003a42 <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    LCD_RS_SET;
 8003a4c:	2390      	movs	r3, #144	; 0x90
 8003a4e:	05db      	lsls	r3, r3, #23
 8003a50:	2208      	movs	r2, #8
 8003a52:	619a      	str	r2, [r3, #24]
    *((uint8_t*)&SPI->DR) = data;
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <LCD_WR_DATA+0x34>)
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	7013      	strb	r3, [r2, #0]
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40013000 	.word	0x40013000
 8003a68:	4001300c 	.word	0x4001300c

08003a6c <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
    LCD_RS_SET;
 8003a70:	2390      	movs	r3, #144	; 0x90
 8003a72:	05db      	lsls	r3, r3, #23
 8003a74:	2208      	movs	r2, #8
 8003a76:	619a      	str	r2, [r3, #24]
    SPI->CR2 |= SPI_CR2_DS;
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <LCD_WriteData16_Prepare+0x20>)
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <LCD_WriteData16_Prepare+0x20>)
 8003a7e:	21f0      	movs	r1, #240	; 0xf0
 8003a80:	0109      	lsls	r1, r1, #4
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40013000 	.word	0x40013000

08003a90 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	0002      	movs	r2, r0
 8003a98:	1dbb      	adds	r3, r7, #6
 8003a9a:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <LCD_WriteData16+0x28>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d0fa      	beq.n	8003a9e <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <LCD_WriteData16+0x28>)
 8003aaa:	1dba      	adds	r2, r7, #6
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	60da      	str	r2, [r3, #12]
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40013000 	.word	0x40013000

08003abc <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <LCD_WriteData16_End+0x18>)
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <LCD_WriteData16_End+0x18>)
 8003ac6:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <LCD_WriteData16_End+0x1c>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	40013000 	.word	0x40013000
 8003ad8:	fffff0ff 	.word	0xfffff0ff

08003adc <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	1dfb      	adds	r3, r7, #7
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	1c0a      	adds	r2, r1, #0
 8003aec:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff ff82 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7ff ff98 	bl	8003a34 <LCD_WR_DATA>
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <LCD_WriteRAM_Prepare+0x18>)
 8003b12:	891b      	ldrh	r3, [r3, #8]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7ff ff70 	bl	80039fc <LCD_WR_REG>
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	20001168 	.word	0x20001168

08003b28 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	0002      	movs	r2, r0
 8003b30:	1dfb      	adds	r3, r7, #7
 8003b32:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <LCD_direction+0xa4>)
 8003b36:	222a      	movs	r2, #42	; 0x2a
 8003b38:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <LCD_direction+0xa4>)
 8003b3c:	222b      	movs	r2, #43	; 0x2b
 8003b3e:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8003b40:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <LCD_direction+0xa4>)
 8003b42:	222c      	movs	r2, #44	; 0x2c
 8003b44:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d02c      	beq.n	8003ba8 <LCD_direction+0x80>
 8003b4e:	dc37      	bgt.n	8003bc0 <LCD_direction+0x98>
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d01d      	beq.n	8003b90 <LCD_direction+0x68>
 8003b54:	dc34      	bgt.n	8003bc0 <LCD_direction+0x98>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <LCD_direction+0x38>
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d00c      	beq.n	8003b78 <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 8003b5e:	e02f      	b.n	8003bc0 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <LCD_direction+0xa4>)
 8003b62:	22f0      	movs	r2, #240	; 0xf0
 8003b64:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <LCD_direction+0xa4>)
 8003b68:	22a0      	movs	r2, #160	; 0xa0
 8003b6a:	0052      	lsls	r2, r2, #1
 8003b6c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8003b6e:	2108      	movs	r1, #8
 8003b70:	2036      	movs	r0, #54	; 0x36
 8003b72:	f7ff ffb3 	bl	8003adc <LCD_WriteReg>
        break;
 8003b76:	e024      	b.n	8003bc2 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <LCD_direction+0xa4>)
 8003b7a:	22a0      	movs	r2, #160	; 0xa0
 8003b7c:	0052      	lsls	r2, r2, #1
 8003b7e:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <LCD_direction+0xa4>)
 8003b82:	22f0      	movs	r2, #240	; 0xf0
 8003b84:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003b86:	2168      	movs	r1, #104	; 0x68
 8003b88:	2036      	movs	r0, #54	; 0x36
 8003b8a:	f7ff ffa7 	bl	8003adc <LCD_WriteReg>
        break;
 8003b8e:	e018      	b.n	8003bc2 <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <LCD_direction+0xa4>)
 8003b92:	22f0      	movs	r2, #240	; 0xf0
 8003b94:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <LCD_direction+0xa4>)
 8003b98:	22a0      	movs	r2, #160	; 0xa0
 8003b9a:	0052      	lsls	r2, r2, #1
 8003b9c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8003b9e:	21c8      	movs	r1, #200	; 0xc8
 8003ba0:	2036      	movs	r0, #54	; 0x36
 8003ba2:	f7ff ff9b 	bl	8003adc <LCD_WriteReg>
        break;
 8003ba6:	e00c      	b.n	8003bc2 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <LCD_direction+0xa4>)
 8003baa:	22a0      	movs	r2, #160	; 0xa0
 8003bac:	0052      	lsls	r2, r2, #1
 8003bae:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <LCD_direction+0xa4>)
 8003bb2:	22f0      	movs	r2, #240	; 0xf0
 8003bb4:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8003bb6:	21a8      	movs	r1, #168	; 0xa8
 8003bb8:	2036      	movs	r0, #54	; 0x36
 8003bba:	f7ff ff8f 	bl	8003adc <LCD_WriteReg>
        break;
 8003bbe:	e000      	b.n	8003bc2 <LCD_direction+0x9a>
    default:break;
 8003bc0:	46c0      	nop			; (mov r8, r8)
    }
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	20001168 	.word	0x20001168

08003bd0 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init()
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
    LCD_Reset();
 8003bd4:	f7ff fef8 	bl	80039c8 <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8003bd8:	20cf      	movs	r0, #207	; 0xcf
 8003bda:	f7ff ff0f 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7ff ff28 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8003be4:	20d9      	movs	r0, #217	; 0xd9
 8003be6:	f7ff ff25 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8003bea:	2030      	movs	r0, #48	; 0x30
 8003bec:	f7ff ff22 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8003bf0:	20ed      	movs	r0, #237	; 0xed
 8003bf2:	f7ff ff03 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8003bf6:	2064      	movs	r0, #100	; 0x64
 8003bf8:	f7ff ff1c 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	f7ff ff19 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8003c02:	2012      	movs	r0, #18
 8003c04:	f7ff ff16 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8003c08:	2081      	movs	r0, #129	; 0x81
 8003c0a:	f7ff ff13 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8003c0e:	20e8      	movs	r0, #232	; 0xe8
 8003c10:	f7ff fef4 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8003c14:	2085      	movs	r0, #133	; 0x85
 8003c16:	f7ff ff0d 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8003c1a:	2010      	movs	r0, #16
 8003c1c:	f7ff ff0a 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8003c20:	207a      	movs	r0, #122	; 0x7a
 8003c22:	f7ff ff07 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8003c26:	20cb      	movs	r0, #203	; 0xcb
 8003c28:	f7ff fee8 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8003c2c:	2039      	movs	r0, #57	; 0x39
 8003c2e:	f7ff ff01 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8003c32:	202c      	movs	r0, #44	; 0x2c
 8003c34:	f7ff fefe 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f7ff fefb 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8003c3e:	2034      	movs	r0, #52	; 0x34
 8003c40:	f7ff fef8 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8003c44:	2002      	movs	r0, #2
 8003c46:	f7ff fef5 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8003c4a:	20f7      	movs	r0, #247	; 0xf7
 8003c4c:	f7ff fed6 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 8003c50:	2020      	movs	r0, #32
 8003c52:	f7ff feef 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8003c56:	20ea      	movs	r0, #234	; 0xea
 8003c58:	f7ff fed0 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f7ff fee9 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7ff fee6 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 8003c68:	20c0      	movs	r0, #192	; 0xc0
 8003c6a:	f7ff fec7 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 8003c6e:	2021      	movs	r0, #33	; 0x21
 8003c70:	f7ff fee0 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 8003c74:	20c1      	movs	r0, #193	; 0xc1
 8003c76:	f7ff fec1 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 8003c7a:	2012      	movs	r0, #18
 8003c7c:	f7ff feda 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 8003c80:	20c5      	movs	r0, #197	; 0xc5
 8003c82:	f7ff febb 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 8003c86:	2039      	movs	r0, #57	; 0x39
 8003c88:	f7ff fed4 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 8003c8c:	2037      	movs	r0, #55	; 0x37
 8003c8e:	f7ff fed1 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 8003c92:	20c7      	movs	r0, #199	; 0xc7
 8003c94:	f7ff feb2 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8003c98:	20ab      	movs	r0, #171	; 0xab
 8003c9a:	f7ff fecb 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 8003c9e:	2036      	movs	r0, #54	; 0x36
 8003ca0:	f7ff feac 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 8003ca4:	2048      	movs	r0, #72	; 0x48
 8003ca6:	f7ff fec5 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8003caa:	203a      	movs	r0, #58	; 0x3a
 8003cac:	f7ff fea6 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 8003cb0:	2055      	movs	r0, #85	; 0x55
 8003cb2:	f7ff febf 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8003cb6:	20b1      	movs	r0, #177	; 0xb1
 8003cb8:	f7ff fea0 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f7ff feb9 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8003cc2:	201b      	movs	r0, #27
 8003cc4:	f7ff feb6 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8003cc8:	20b6      	movs	r0, #182	; 0xb6
 8003cca:	f7ff fe97 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8003cce:	200a      	movs	r0, #10
 8003cd0:	f7ff feb0 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8003cd4:	20a2      	movs	r0, #162	; 0xa2
 8003cd6:	f7ff fead 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8003cda:	20f2      	movs	r0, #242	; 0xf2
 8003cdc:	f7ff fe8e 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7ff fea7 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8003ce6:	2026      	movs	r0, #38	; 0x26
 8003ce8:	f7ff fe88 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8003cec:	2001      	movs	r0, #1
 8003cee:	f7ff fea1 	bl	8003a34 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8003cf2:	20e0      	movs	r0, #224	; 0xe0
 8003cf4:	f7ff fe82 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8003cf8:	200f      	movs	r0, #15
 8003cfa:	f7ff fe9b 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8003cfe:	2023      	movs	r0, #35	; 0x23
 8003d00:	f7ff fe98 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8003d04:	201f      	movs	r0, #31
 8003d06:	f7ff fe95 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8003d0a:	200b      	movs	r0, #11
 8003d0c:	f7ff fe92 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8003d10:	200e      	movs	r0, #14
 8003d12:	f7ff fe8f 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8003d16:	2008      	movs	r0, #8
 8003d18:	f7ff fe8c 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8003d1c:	204b      	movs	r0, #75	; 0x4b
 8003d1e:	f7ff fe89 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8003d22:	20a8      	movs	r0, #168	; 0xa8
 8003d24:	f7ff fe86 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8003d28:	203b      	movs	r0, #59	; 0x3b
 8003d2a:	f7ff fe83 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8003d2e:	200a      	movs	r0, #10
 8003d30:	f7ff fe80 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8003d34:	2014      	movs	r0, #20
 8003d36:	f7ff fe7d 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8003d3a:	2006      	movs	r0, #6
 8003d3c:	f7ff fe7a 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8003d40:	2010      	movs	r0, #16
 8003d42:	f7ff fe77 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8003d46:	2009      	movs	r0, #9
 8003d48:	f7ff fe74 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7ff fe71 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8003d52:	20e1      	movs	r0, #225	; 0xe1
 8003d54:	f7ff fe52 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7ff fe6b 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 8003d5e:	201c      	movs	r0, #28
 8003d60:	f7ff fe68 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 8003d64:	2020      	movs	r0, #32
 8003d66:	f7ff fe65 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 8003d6a:	2004      	movs	r0, #4
 8003d6c:	f7ff fe62 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8003d70:	2010      	movs	r0, #16
 8003d72:	f7ff fe5f 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8003d76:	2008      	movs	r0, #8
 8003d78:	f7ff fe5c 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8003d7c:	2034      	movs	r0, #52	; 0x34
 8003d7e:	f7ff fe59 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 8003d82:	2047      	movs	r0, #71	; 0x47
 8003d84:	f7ff fe56 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8003d88:	2044      	movs	r0, #68	; 0x44
 8003d8a:	f7ff fe53 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8003d8e:	2005      	movs	r0, #5
 8003d90:	f7ff fe50 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8003d94:	200b      	movs	r0, #11
 8003d96:	f7ff fe4d 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8003d9a:	2009      	movs	r0, #9
 8003d9c:	f7ff fe4a 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8003da0:	202f      	movs	r0, #47	; 0x2f
 8003da2:	f7ff fe47 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8003da6:	2036      	movs	r0, #54	; 0x36
 8003da8:	f7ff fe44 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8003dac:	200f      	movs	r0, #15
 8003dae:	f7ff fe41 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8003db2:	202b      	movs	r0, #43	; 0x2b
 8003db4:	f7ff fe22 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7ff fe3b 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7ff fe38 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f7ff fe35 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8003dca:	203f      	movs	r0, #63	; 0x3f
 8003dcc:	f7ff fe32 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8003dd0:	202a      	movs	r0, #42	; 0x2a
 8003dd2:	f7ff fe13 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f7ff fe2c 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7ff fe29 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8003de2:	2000      	movs	r0, #0
 8003de4:	f7ff fe26 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8003de8:	20ef      	movs	r0, #239	; 0xef
 8003dea:	f7ff fe23 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8003dee:	2011      	movs	r0, #17
 8003df0:	f7ff fe04 	bl	80039fc <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <LCD_Init+0x240>)
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff fdda 	bl	80039b0 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 8003dfc:	2029      	movs	r0, #41	; 0x29
 8003dfe:	f7ff fdfd 	bl	80039fc <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8003e02:	2000      	movs	r0, #0
 8003e04:	f7ff fe90 	bl	8003b28 <LCD_direction>
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	07270e00 	.word	0x07270e00

08003e14 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	1dbb      	adds	r3, r7, #6
 8003e1e:	801a      	strh	r2, [r3, #0]
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <LCD_Clear+0x6c>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <LCD_Clear+0x6c>)
 8003e28:	885b      	ldrh	r3, [r3, #2]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f000 f828 	bl	8003e84 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8003e34:	f7ff fe1a 	bl	8003a6c <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e013      	b.n	8003e66 <LCD_Clear+0x52>
    {
        for(m=0;m<lcddev.width;m++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	e007      	b.n	8003e54 <LCD_Clear+0x40>
        {
            LCD_WriteData16(Color);
 8003e44:	1dbb      	adds	r3, r7, #6
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7ff fe21 	bl	8003a90 <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <LCD_Clear+0x6c>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	001a      	movs	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d3f1      	bcc.n	8003e44 <LCD_Clear+0x30>
    for(i=0;i<lcddev.height;i++)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <LCD_Clear+0x6c>)
 8003e68:	885b      	ldrh	r3, [r3, #2]
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d3e5      	bcc.n	8003e3e <LCD_Clear+0x2a>
        }
    }
    LCD_WriteData16_End();
 8003e72:	f7ff fe23 	bl	8003abc <LCD_WriteData16_End>
}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	20001168 	.word	0x20001168

08003e84 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8003e84:	b5b0      	push	{r4, r5, r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	0005      	movs	r5, r0
 8003e8c:	000c      	movs	r4, r1
 8003e8e:	0010      	movs	r0, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	1dbb      	adds	r3, r7, #6
 8003e94:	1c2a      	adds	r2, r5, #0
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	1c22      	adds	r2, r4, #0
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	1cbb      	adds	r3, r7, #2
 8003ea0:	1c02      	adds	r2, r0, #0
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	003b      	movs	r3, r7
 8003ea6:	1c0a      	adds	r2, r1, #0
 8003ea8:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8003eaa:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <LCD_SetWindow+0xbc>)
 8003eac:	895b      	ldrh	r3, [r3, #10]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fda3 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8003eb6:	1dbb      	adds	r3, r7, #6
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff fdb7 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8003ec6:	1dbb      	adds	r3, r7, #6
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7ff fdb1 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8003ed2:	1cbb      	adds	r3, r7, #2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff fda9 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8003ee2:	1cbb      	adds	r3, r7, #2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7ff fda3 	bl	8003a34 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <LCD_SetWindow+0xbc>)
 8003ef0:	899b      	ldrh	r3, [r3, #12]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7ff fd81 	bl	80039fc <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7ff fd95 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff fd8f 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8003f16:	003b      	movs	r3, r7
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fd87 	bl	8003a34 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8003f26:	003b      	movs	r3, r7
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff fd81 	bl	8003a34 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8003f32:	f7ff fdeb 	bl	8003b0c <LCD_WriteRAM_Prepare>
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	20001168 	.word	0x20001168

08003f44 <LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
void LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	0004      	movs	r4, r0
 8003f4c:	0008      	movs	r0, r1
 8003f4e:	0011      	movs	r1, r2
 8003f50:	1dbb      	adds	r3, r7, #6
 8003f52:	1c22      	adds	r2, r4, #0
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	1c02      	adds	r2, r0, #0
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	1cbb      	adds	r3, r7, #2
 8003f5e:	1c0a      	adds	r2, r1, #0
 8003f60:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	881c      	ldrh	r4, [r3, #0]
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	8819      	ldrh	r1, [r3, #0]
 8003f6e:	1dbb      	adds	r3, r7, #6
 8003f70:	8818      	ldrh	r0, [r3, #0]
 8003f72:	0023      	movs	r3, r4
 8003f74:	f7ff ff86 	bl	8003e84 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8003f78:	f7ff fd78 	bl	8003a6c <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 8003f7c:	1cbb      	adds	r3, r7, #2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff fd85 	bl	8003a90 <LCD_WriteData16>
    LCD_WriteData16_End();
 8003f86:	f7ff fd99 	bl	8003abc <LCD_WriteData16_End>
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b003      	add	sp, #12
 8003f90:	bd90      	pop	{r4, r7, pc}
	...

08003f94 <LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8003f94:	b5b0      	push	{r4, r5, r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	0005      	movs	r5, r0
 8003f9c:	000c      	movs	r4, r1
 8003f9e:	0010      	movs	r0, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	1dbb      	adds	r3, r7, #6
 8003fa4:	1c2a      	adds	r2, r5, #0
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	1c22      	adds	r2, r4, #0
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	1cbb      	adds	r3, r7, #2
 8003fb0:	1c02      	adds	r2, r0, #0
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	003b      	movs	r3, r7
 8003fb6:	1c0a      	adds	r2, r1, #0
 8003fb8:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 8003fba:	2220      	movs	r2, #32
 8003fbc:	18bb      	adds	r3, r7, r2
 8003fbe:	18ba      	adds	r2, r7, r2
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	3a20      	subs	r2, #32
 8003fc4:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8003fc6:	2124      	movs	r1, #36	; 0x24
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	1dbb      	adds	r3, r7, #6
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	18d3      	adds	r3, r2, r3
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29c      	uxth	r4, r3
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	18d3      	adds	r3, r2, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	8819      	ldrh	r1, [r3, #0]
 8003ff4:	1dbb      	adds	r3, r7, #6
 8003ff6:	8818      	ldrh	r0, [r3, #0]
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	0022      	movs	r2, r4
 8003ffc:	f7ff ff42 	bl	8003e84 <LCD_SetWindow>
    if (!mode) {
 8004000:	2328      	movs	r3, #40	; 0x28
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d166      	bne.n	80040d8 <LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 800400a:	f7ff fd2f 	bl	8003a6c <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 800400e:	230e      	movs	r3, #14
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e054      	b.n	80040c2 <LCD_DrawChar+0x12e>
            if (size==12)
 8004018:	2324      	movs	r3, #36	; 0x24
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d110      	bne.n	8004044 <LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 8004022:	2320      	movs	r3, #32
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	230e      	movs	r3, #14
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	7818      	ldrb	r0, [r3, #0]
 800402e:	230f      	movs	r3, #15
 8004030:	18f9      	adds	r1, r7, r3
 8004032:	4c61      	ldr	r4, [pc, #388]	; (80041b8 <LCD_DrawChar+0x224>)
 8004034:	0013      	movs	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	189b      	adds	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	18e3      	adds	r3, r4, r3
 800403e:	5c1b      	ldrb	r3, [r3, r0]
 8004040:	700b      	strb	r3, [r1, #0]
 8004042:	e00c      	b.n	800405e <LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 8004044:	2320      	movs	r3, #32
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	7819      	ldrb	r1, [r3, #0]
 800404a:	230e      	movs	r3, #14
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	230f      	movs	r3, #15
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	4859      	ldr	r0, [pc, #356]	; (80041bc <LCD_DrawChar+0x228>)
 8004056:	0109      	lsls	r1, r1, #4
 8004058:	1841      	adds	r1, r0, r1
 800405a:	5c8a      	ldrb	r2, [r1, r2]
 800405c:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 800405e:	230d      	movs	r3, #13
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e01c      	b.n	80040a2 <LCD_DrawChar+0x10e>
                if (temp&0x01)
 8004068:	230f      	movs	r3, #15
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2201      	movs	r2, #1
 8004070:	4013      	ands	r3, r2
 8004072:	d005      	beq.n	8004080 <LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 8004074:	1cbb      	adds	r3, r7, #2
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff fd09 	bl	8003a90 <LCD_WriteData16>
 800407e:	e004      	b.n	800408a <LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 8004080:	003b      	movs	r3, r7
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	0018      	movs	r0, r3
 8004086:	f7ff fd03 	bl	8003a90 <LCD_WriteData16>
                temp>>=1;
 800408a:	220f      	movs	r2, #15
 800408c:	18bb      	adds	r3, r7, r2
 800408e:	18ba      	adds	r2, r7, r2
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	0852      	lsrs	r2, r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8004096:	210d      	movs	r1, #13
 8004098:	187b      	adds	r3, r7, r1
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	187b      	adds	r3, r7, r1
 800409e:	3201      	adds	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	2324      	movs	r3, #36	; 0x24
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	220d      	movs	r2, #13
 80040ae:	18ba      	adds	r2, r7, r2
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d3d8      	bcc.n	8004068 <LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 80040b6:	210e      	movs	r1, #14
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	3201      	adds	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	230e      	movs	r3, #14
 80040c4:	18fa      	adds	r2, r7, r3
 80040c6:	2324      	movs	r3, #36	; 0x24
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d3a2      	bcc.n	8004018 <LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 80040d2:	f7ff fcf3 	bl	8003abc <LCD_WriteData16_End>
                    LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 80040d6:	e06b      	b.n	80041b0 <LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 80040d8:	230e      	movs	r3, #14
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e05e      	b.n	80041a0 <LCD_DrawChar+0x20c>
            if (size==12)
 80040e2:	2324      	movs	r3, #36	; 0x24
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d110      	bne.n	800410e <LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 80040ec:	2320      	movs	r3, #32
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	230e      	movs	r3, #14
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	7818      	ldrb	r0, [r3, #0]
 80040f8:	230f      	movs	r3, #15
 80040fa:	18f9      	adds	r1, r7, r3
 80040fc:	4c2e      	ldr	r4, [pc, #184]	; (80041b8 <LCD_DrawChar+0x224>)
 80040fe:	0013      	movs	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	189b      	adds	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	18e3      	adds	r3, r4, r3
 8004108:	5c1b      	ldrb	r3, [r3, r0]
 800410a:	700b      	strb	r3, [r1, #0]
 800410c:	e00c      	b.n	8004128 <LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 800410e:	2320      	movs	r3, #32
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	7819      	ldrb	r1, [r3, #0]
 8004114:	230e      	movs	r3, #14
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	230f      	movs	r3, #15
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	4827      	ldr	r0, [pc, #156]	; (80041bc <LCD_DrawChar+0x228>)
 8004120:	0109      	lsls	r1, r1, #4
 8004122:	1841      	adds	r1, r0, r1
 8004124:	5c8a      	ldrb	r2, [r1, r2]
 8004126:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8004128:	230d      	movs	r3, #13
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e026      	b.n	8004180 <LCD_DrawChar+0x1ec>
                if(temp&0x01)
 8004132:	230f      	movs	r3, #15
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2201      	movs	r2, #1
 800413a:	4013      	ands	r3, r2
 800413c:	d014      	beq.n	8004168 <LCD_DrawChar+0x1d4>
                    LCD_DrawPoint(x+t,y+pos,fc);
 800413e:	230d      	movs	r3, #13
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b29a      	uxth	r2, r3
 8004146:	1dbb      	adds	r3, r7, #6
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	b298      	uxth	r0, r3
 800414e:	230e      	movs	r3, #14
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b29a      	uxth	r2, r3
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	18d3      	adds	r3, r2, r3
 800415c:	b299      	uxth	r1, r3
 800415e:	1cbb      	adds	r3, r7, #2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	001a      	movs	r2, r3
 8004164:	f7ff feee 	bl	8003f44 <LCD_DrawPoint>
                temp>>=1;
 8004168:	220f      	movs	r2, #15
 800416a:	18bb      	adds	r3, r7, r2
 800416c:	18ba      	adds	r2, r7, r2
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	0852      	lsrs	r2, r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8004174:	210d      	movs	r1, #13
 8004176:	187b      	adds	r3, r7, r1
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	187b      	adds	r3, r7, r1
 800417c:	3201      	adds	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	2324      	movs	r3, #36	; 0x24
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	b2db      	uxtb	r3, r3
 800418a:	220d      	movs	r2, #13
 800418c:	18ba      	adds	r2, r7, r2
 800418e:	7812      	ldrb	r2, [r2, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d3ce      	bcc.n	8004132 <LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 8004194:	210e      	movs	r1, #14
 8004196:	187b      	adds	r3, r7, r1
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	187b      	adds	r3, r7, r1
 800419c:	3201      	adds	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	230e      	movs	r3, #14
 80041a2:	18fa      	adds	r2, r7, r3
 80041a4:	2324      	movs	r3, #36	; 0x24
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d398      	bcc.n	80040e2 <LCD_DrawChar+0x14e>
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b004      	add	sp, #16
 80041b6:	bdb0      	pop	{r4, r5, r7, pc}
 80041b8:	0800e520 	.word	0x0800e520
 80041bc:	0800e994 	.word	0x0800e994

080041c0 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af04      	add	r7, sp, #16
 80041c6:	0005      	movs	r5, r0
 80041c8:	000c      	movs	r4, r1
 80041ca:	0010      	movs	r0, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	1dbb      	adds	r3, r7, #6
 80041d0:	1c2a      	adds	r2, r5, #0
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	1c22      	adds	r2, r4, #0
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	1cbb      	adds	r3, r7, #2
 80041dc:	1c02      	adds	r2, r0, #0
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	003b      	movs	r3, r7
 80041e2:	1c0a      	adds	r2, r1, #0
 80041e4:	801a      	strh	r2, [r3, #0]
    while((*p<='~')&&(*p>=' '))
 80041e6:	e036      	b.n	8004256 <LCD_DrawString+0x96>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <LCD_DrawString+0xb0>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	1dba      	adds	r2, r7, #6
 80041ee:	8812      	ldrh	r2, [r2, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d239      	bcs.n	8004268 <LCD_DrawString+0xa8>
 80041f4:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <LCD_DrawString+0xb0>)
 80041f6:	885b      	ldrh	r3, [r3, #2]
 80041f8:	1d3a      	adds	r2, r7, #4
 80041fa:	8812      	ldrh	r2, [r2, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d233      	bcs.n	8004268 <LCD_DrawString+0xa8>
        return;
        LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	003a      	movs	r2, r7
 8004206:	8815      	ldrh	r5, [r2, #0]
 8004208:	1cba      	adds	r2, r7, #2
 800420a:	8814      	ldrh	r4, [r2, #0]
 800420c:	1d3a      	adds	r2, r7, #4
 800420e:	8811      	ldrh	r1, [r2, #0]
 8004210:	1dba      	adds	r2, r7, #6
 8004212:	8810      	ldrh	r0, [r2, #0]
 8004214:	2220      	movs	r2, #32
 8004216:	2608      	movs	r6, #8
 8004218:	46b4      	mov	ip, r6
 800421a:	44bc      	add	ip, r7
 800421c:	4462      	add	r2, ip
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	9202      	str	r2, [sp, #8]
 8004222:	261c      	movs	r6, #28
 8004224:	2208      	movs	r2, #8
 8004226:	18ba      	adds	r2, r7, r2
 8004228:	1992      	adds	r2, r2, r6
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	9201      	str	r2, [sp, #4]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	002b      	movs	r3, r5
 8004232:	0022      	movs	r2, r4
 8004234:	f7ff feae 	bl	8003f94 <LCD_DrawChar>
        x+=size/2;
 8004238:	2308      	movs	r3, #8
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	199b      	adds	r3, r3, r6
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	b299      	uxth	r1, r3
 8004246:	1dbb      	adds	r3, r7, #6
 8004248:	1dba      	adds	r2, r7, #6
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	188a      	adds	r2, r1, r2
 800424e:	801a      	strh	r2, [r3, #0]
        p++;
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	3301      	adds	r3, #1
 8004254:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b7e      	cmp	r3, #126	; 0x7e
 800425c:	d805      	bhi.n	800426a <LCD_DrawString+0xaa>
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b1f      	cmp	r3, #31
 8004264:	d8c0      	bhi.n	80041e8 <LCD_DrawString+0x28>
 8004266:	e000      	b.n	800426a <LCD_DrawString+0xaa>
        return;
 8004268:	46c0      	nop			; (mov r8, r8)
    }
}
 800426a:	46bd      	mov	sp, r7
 800426c:	b003      	add	sp, #12
 800426e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004270:	20001168 	.word	0x20001168

08004274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004278:	f001 fe86 	bl	8005f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800427c:	f000 f822 	bl	80042c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004280:	f000 fa6a 	bl	8004758 <MX_GPIO_Init>
  MX_DMA_Init();
 8004284:	f000 fa4a 	bl	800471c <MX_DMA_Init>
  MX_ADC_Init();
 8004288:	f000 f87c 	bl	8004384 <MX_ADC_Init>
  MX_SPI1_Init();
 800428c:	f000 f914 	bl	80044b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8004290:	f000 f9ac 	bl	80045ec <MX_TIM1_Init>
  MX_I2C1_Init();
 8004294:	f000 f8d0 	bl	8004438 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	4808      	ldr	r0, [pc, #32]	; (80042c0 <main+0x4c>)
 800429e:	2201      	movs	r2, #1
 80042a0:	0019      	movs	r1, r3
 80042a2:	f003 f84a 	bl	800733a <HAL_GPIO_WritePin>
  initialize();
 80042a6:	f000 fdeb 	bl	8004e80 <initialize>
  LCD_Init();
 80042aa:	f7ff fc91 	bl	8003bd0 <LCD_Init>
  LCD_Clear(BLUE);
 80042ae:	201f      	movs	r0, #31
 80042b0:	f7ff fdb0 	bl	8003e14 <LCD_Clear>
  resetSel();
 80042b4:	f001 f956 	bl	8005564 <resetSel>
  menu_home();
 80042b8:	f000 ff06 	bl	80050c8 <menu_home>
  /*auto_tune();
  HAL_Delay(1000);
  dspmain();*/
  while(1)
 80042bc:	e7fe      	b.n	80042bc <main+0x48>
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	48000400 	.word	0x48000400

080042c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b099      	sub	sp, #100	; 0x64
 80042c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042ca:	242c      	movs	r4, #44	; 0x2c
 80042cc:	193b      	adds	r3, r7, r4
 80042ce:	0018      	movs	r0, r3
 80042d0:	2334      	movs	r3, #52	; 0x34
 80042d2:	001a      	movs	r2, r3
 80042d4:	2100      	movs	r1, #0
 80042d6:	f005 fa37 	bl	8009748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042da:	231c      	movs	r3, #28
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	0018      	movs	r0, r3
 80042e0:	2310      	movs	r3, #16
 80042e2:	001a      	movs	r2, r3
 80042e4:	2100      	movs	r1, #0
 80042e6:	f005 fa2f 	bl	8009748 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042ea:	003b      	movs	r3, r7
 80042ec:	0018      	movs	r0, r3
 80042ee:	231c      	movs	r3, #28
 80042f0:	001a      	movs	r2, r3
 80042f2:	2100      	movs	r1, #0
 80042f4:	f005 fa28 	bl	8009748 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80042f8:	0021      	movs	r1, r4
 80042fa:	187b      	adds	r3, r7, r1
 80042fc:	2232      	movs	r2, #50	; 0x32
 80042fe:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004300:	187b      	adds	r3, r7, r1
 8004302:	2201      	movs	r2, #1
 8004304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004306:	187b      	adds	r3, r7, r1
 8004308:	2201      	movs	r2, #1
 800430a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800430c:	187b      	adds	r3, r7, r1
 800430e:	2201      	movs	r2, #1
 8004310:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004312:	187b      	adds	r3, r7, r1
 8004314:	2210      	movs	r2, #16
 8004316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004318:	187b      	adds	r3, r7, r1
 800431a:	2210      	movs	r2, #16
 800431c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800431e:	187b      	adds	r3, r7, r1
 8004320:	2200      	movs	r2, #0
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004324:	187b      	adds	r3, r7, r1
 8004326:	0018      	movs	r0, r3
 8004328:	f003 fd76 	bl	8007e18 <HAL_RCC_OscConfig>
 800432c:	1e03      	subs	r3, r0, #0
 800432e:	d001      	beq.n	8004334 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8004330:	f000 fda0 	bl	8004e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004334:	211c      	movs	r1, #28
 8004336:	187b      	adds	r3, r7, r1
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800433c:	187b      	adds	r3, r7, r1
 800433e:	2203      	movs	r2, #3
 8004340:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004342:	187b      	adds	r3, r7, r1
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004348:	187b      	adds	r3, r7, r1
 800434a:	2200      	movs	r2, #0
 800434c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800434e:	187b      	adds	r3, r7, r1
 8004350:	2101      	movs	r1, #1
 8004352:	0018      	movs	r0, r3
 8004354:	f004 f8e6 	bl	8008524 <HAL_RCC_ClockConfig>
 8004358:	1e03      	subs	r3, r0, #0
 800435a:	d001      	beq.n	8004360 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800435c:	f000 fd8a 	bl	8004e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004360:	003b      	movs	r3, r7
 8004362:	2220      	movs	r2, #32
 8004364:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004366:	003b      	movs	r3, r7
 8004368:	2200      	movs	r2, #0
 800436a:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800436c:	003b      	movs	r3, r7
 800436e:	0018      	movs	r0, r3
 8004370:	f004 fa32 	bl	80087d8 <HAL_RCCEx_PeriphCLKConfig>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d001      	beq.n	800437c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004378:	f000 fd7c 	bl	8004e74 <Error_Handler>
  }
}
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	46bd      	mov	sp, r7
 8004380:	b019      	add	sp, #100	; 0x64
 8004382:	bd90      	pop	{r4, r7, pc}

08004384 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	0018      	movs	r0, r3
 800438e:	230c      	movs	r3, #12
 8004390:	001a      	movs	r2, r3
 8004392:	2100      	movs	r1, #0
 8004394:	f005 f9d8 	bl	8009748 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <MX_ADC_Init+0xac>)
 800439a:	4a26      	ldr	r2, [pc, #152]	; (8004434 <MX_ADC_Init+0xb0>)
 800439c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <MX_ADC_Init+0xac>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80043a4:	4b22      	ldr	r3, [pc, #136]	; (8004430 <MX_ADC_Init+0xac>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043aa:	4b21      	ldr	r3, [pc, #132]	; (8004430 <MX_ADC_Init+0xac>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80043b0:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <MX_ADC_Init+0xac>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043b6:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <MX_ADC_Init+0xac>)
 80043b8:	2204      	movs	r2, #4
 80043ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <MX_ADC_Init+0xac>)
 80043be:	2200      	movs	r2, #0
 80043c0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <MX_ADC_Init+0xac>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <MX_ADC_Init+0xac>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80043ce:	4b18      	ldr	r3, [pc, #96]	; (8004430 <MX_ADC_Init+0xac>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <MX_ADC_Init+0xac>)
 80043d6:	22c2      	movs	r2, #194	; 0xc2
 80043d8:	32ff      	adds	r2, #255	; 0xff
 80043da:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <MX_ADC_Init+0xac>)
 80043de:	2200      	movs	r2, #0
 80043e0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80043e2:	4b13      	ldr	r3, [pc, #76]	; (8004430 <MX_ADC_Init+0xac>)
 80043e4:	2224      	movs	r2, #36	; 0x24
 80043e6:	2101      	movs	r1, #1
 80043e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80043ea:	4b11      	ldr	r3, [pc, #68]	; (8004430 <MX_ADC_Init+0xac>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <MX_ADC_Init+0xac>)
 80043f2:	0018      	movs	r0, r3
 80043f4:	f001 fe2c 	bl	8006050 <HAL_ADC_Init>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d001      	beq.n	8004400 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80043fc:	f000 fd3a 	bl	8004e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	0152      	lsls	r2, r2, #5
 800440c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	2207      	movs	r2, #7
 8004412:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004414:	1d3a      	adds	r2, r7, #4
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <MX_ADC_Init+0xac>)
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f002 f858 	bl	80064d0 <HAL_ADC_ConfigChannel>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d001      	beq.n	8004428 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8004424:	f000 fd26 	bl	8004e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b004      	add	sp, #16
 800442e:	bd80      	pop	{r7, pc}
 8004430:	200012bc 	.word	0x200012bc
 8004434:	40012400 	.word	0x40012400

08004438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <MX_I2C1_Init+0x74>)
 800443e:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <MX_I2C1_Init+0x78>)
 8004440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <MX_I2C1_Init+0x74>)
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <MX_I2C1_Init+0x7c>)
 8004446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <MX_I2C1_Init+0x74>)
 800444a:	2200      	movs	r2, #0
 800444c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <MX_I2C1_Init+0x74>)
 8004450:	2201      	movs	r2, #1
 8004452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <MX_I2C1_Init+0x74>)
 8004456:	2200      	movs	r2, #0
 8004458:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <MX_I2C1_Init+0x74>)
 800445c:	2200      	movs	r2, #0
 800445e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <MX_I2C1_Init+0x74>)
 8004462:	2200      	movs	r2, #0
 8004464:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <MX_I2C1_Init+0x74>)
 8004468:	2200      	movs	r2, #0
 800446a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <MX_I2C1_Init+0x74>)
 800446e:	2200      	movs	r2, #0
 8004470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <MX_I2C1_Init+0x74>)
 8004474:	0018      	movs	r0, r3
 8004476:	f002 ff99 	bl	80073ac <HAL_I2C_Init>
 800447a:	1e03      	subs	r3, r0, #0
 800447c:	d001      	beq.n	8004482 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800447e:	f000 fcf9 	bl	8004e74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <MX_I2C1_Init+0x74>)
 8004484:	2100      	movs	r1, #0
 8004486:	0018      	movs	r0, r3
 8004488:	f003 fc2e 	bl	8007ce8 <HAL_I2CEx_ConfigAnalogFilter>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d001      	beq.n	8004494 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004490:	f000 fcf0 	bl	8004e74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <MX_I2C1_Init+0x74>)
 8004496:	2100      	movs	r1, #0
 8004498:	0018      	movs	r0, r3
 800449a:	f003 fc71 	bl	8007d80 <HAL_I2CEx_ConfigDigitalFilter>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80044a2:	f000 fce7 	bl	8004e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	2000117c 	.word	0x2000117c
 80044b0:	40005400 	.word	0x40005400
 80044b4:	2000090e 	.word	0x2000090e

080044b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80044bc:	4b45      	ldr	r3, [pc, #276]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044be:	4a46      	ldr	r2, [pc, #280]	; (80045d8 <MX_SPI1_Init+0x120>)
 80044c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044c2:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044c4:	2282      	movs	r2, #130	; 0x82
 80044c6:	0052      	lsls	r2, r2, #1
 80044c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044ca:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80044d0:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044d2:	22c0      	movs	r2, #192	; 0xc0
 80044d4:	0092      	lsls	r2, r2, #2
 80044d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044de:	4b3d      	ldr	r3, [pc, #244]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80044e4:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	02d2      	lsls	r2, r2, #11
 80044ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80044ec:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044ee:	2208      	movs	r2, #8
 80044f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044f8:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <MX_SPI1_Init+0x11c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fe:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <MX_SPI1_Init+0x11c>)
 8004500:	2200      	movs	r2, #0
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004504:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <MX_SPI1_Init+0x11c>)
 8004506:	2207      	movs	r2, #7
 8004508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800450a:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <MX_SPI1_Init+0x11c>)
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004510:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <MX_SPI1_Init+0x11c>)
 8004512:	2208      	movs	r2, #8
 8004514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004516:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <MX_SPI1_Init+0x11c>)
 8004518:	0018      	movs	r0, r3
 800451a:	f004 fa5d 	bl	80089d8 <HAL_SPI_Init>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d001      	beq.n	8004526 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004522:	f000 fca7 	bl	8004e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004526:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <MX_SPI1_Init+0x124>)
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <MX_SPI1_Init+0x124>)
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	0289      	lsls	r1, r1, #10
 8004530:	430a      	orrs	r2, r1
 8004532:	615a      	str	r2, [r3, #20]
  GPIOA -> MODER &= ~GPIO_MODER_MODER4 & ~GPIO_MODER_MODER5 & ~GPIO_MODER_MODER7;
 8004534:	2390      	movs	r3, #144	; 0x90
 8004536:	05db      	lsls	r3, r3, #23
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	2390      	movs	r3, #144	; 0x90
 800453c:	05db      	lsls	r3, r3, #23
 800453e:	4928      	ldr	r1, [pc, #160]	; (80045e0 <MX_SPI1_Init+0x128>)
 8004540:	400a      	ands	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8004544:	2390      	movs	r3, #144	; 0x90
 8004546:	05db      	lsls	r3, r3, #23
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	2390      	movs	r3, #144	; 0x90
 800454c:	05db      	lsls	r3, r3, #23
 800454e:	218a      	movs	r1, #138	; 0x8a
 8004550:	0209      	lsls	r1, r1, #8
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER &= ~GPIO_MODER_MODER2 & ~GPIO_MODER_MODER3;
 8004556:	2390      	movs	r3, #144	; 0x90
 8004558:	05db      	lsls	r3, r3, #23
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2390      	movs	r3, #144	; 0x90
 800455e:	05db      	lsls	r3, r3, #23
 8004560:	21f0      	movs	r1, #240	; 0xf0
 8004562:	438a      	bics	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
 8004566:	2390      	movs	r3, #144	; 0x90
 8004568:	05db      	lsls	r3, r3, #23
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2390      	movs	r3, #144	; 0x90
 800456e:	05db      	lsls	r3, r3, #23
 8004570:	2150      	movs	r1, #80	; 0x50
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL4 & ~GPIO_AFRL_AFRL5 & ~GPIO_AFRL_AFRL7;
 8004576:	2390      	movs	r3, #144	; 0x90
 8004578:	05db      	lsls	r3, r3, #23
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	2390      	movs	r3, #144	; 0x90
 800457e:	05db      	lsls	r3, r3, #23
 8004580:	4918      	ldr	r1, [pc, #96]	; (80045e4 <MX_SPI1_Init+0x12c>)
 8004582:	400a      	ands	r2, r1
 8004584:	621a      	str	r2, [r3, #32]

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <MX_SPI1_Init+0x124>)
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	4b14      	ldr	r3, [pc, #80]	; (80045dc <MX_SPI1_Init+0x124>)
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	0149      	lsls	r1, r1, #5
 8004590:	430a      	orrs	r2, r1
 8004592:	619a      	str	r2, [r3, #24]
  SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <MX_SPI1_Init+0x120>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <MX_SPI1_Init+0x120>)
 800459a:	4913      	ldr	r1, [pc, #76]	; (80045e8 <MX_SPI1_Init+0x130>)
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]
  SPI1->CR1 &= ~SPI_CR1_BR;
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <MX_SPI1_Init+0x120>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <MX_SPI1_Init+0x120>)
 80045a6:	2138      	movs	r1, #56	; 0x38
 80045a8:	438a      	bics	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
  SPI1->CR2 = SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <MX_SPI1_Init+0x120>)
 80045ae:	22e0      	movs	r2, #224	; 0xe0
 80045b0:	00d2      	lsls	r2, r2, #3
 80045b2:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |= SPI_CR2_NSSP | SPI_CR2_SSOE;
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <MX_SPI1_Init+0x120>)
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <MX_SPI1_Init+0x120>)
 80045ba:	210c      	movs	r1, #12
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <MX_SPI1_Init+0x120>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <MX_SPI1_Init+0x120>)
 80045c6:	2140      	movs	r1, #64	; 0x40
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	20001214 	.word	0x20001214
 80045d8:	40013000 	.word	0x40013000
 80045dc:	40021000 	.word	0x40021000
 80045e0:	ffff30ff 	.word	0xffff30ff
 80045e4:	0f00ffff 	.word	0x0f00ffff
 80045e8:	0000c004 	.word	0x0000c004

080045ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b092      	sub	sp, #72	; 0x48
 80045f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045f2:	2340      	movs	r3, #64	; 0x40
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	0018      	movs	r0, r3
 80045f8:	2308      	movs	r3, #8
 80045fa:	001a      	movs	r2, r3
 80045fc:	2100      	movs	r1, #0
 80045fe:	f005 f8a3 	bl	8009748 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004602:	2324      	movs	r3, #36	; 0x24
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	0018      	movs	r0, r3
 8004608:	231c      	movs	r3, #28
 800460a:	001a      	movs	r2, r3
 800460c:	2100      	movs	r1, #0
 800460e:	f005 f89b 	bl	8009748 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	0018      	movs	r0, r3
 8004616:	2320      	movs	r3, #32
 8004618:	001a      	movs	r2, r3
 800461a:	2100      	movs	r1, #0
 800461c:	f005 f894 	bl	8009748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004620:	4b3a      	ldr	r3, [pc, #232]	; (800470c <MX_TIM1_Init+0x120>)
 8004622:	4a3b      	ldr	r2, [pc, #236]	; (8004710 <MX_TIM1_Init+0x124>)
 8004624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004626:	4b39      	ldr	r3, [pc, #228]	; (800470c <MX_TIM1_Init+0x120>)
 8004628:	2200      	movs	r2, #0
 800462a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800462c:	4b37      	ldr	r3, [pc, #220]	; (800470c <MX_TIM1_Init+0x120>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7500*6;
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <MX_TIM1_Init+0x120>)
 8004634:	4a37      	ldr	r2, [pc, #220]	; (8004714 <MX_TIM1_Init+0x128>)
 8004636:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004638:	4b34      	ldr	r3, [pc, #208]	; (800470c <MX_TIM1_Init+0x120>)
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <MX_TIM1_Init+0x120>)
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004644:	4b31      	ldr	r3, [pc, #196]	; (800470c <MX_TIM1_Init+0x120>)
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800464a:	4b30      	ldr	r3, [pc, #192]	; (800470c <MX_TIM1_Init+0x120>)
 800464c:	0018      	movs	r0, r3
 800464e:	f004 fa7b 	bl	8008b48 <HAL_TIM_PWM_Init>
 8004652:	1e03      	subs	r3, r0, #0
 8004654:	d001      	beq.n	800465a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004656:	f000 fc0d 	bl	8004e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800465a:	2140      	movs	r1, #64	; 0x40
 800465c:	187b      	adds	r3, r7, r1
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004662:	187b      	adds	r3, r7, r1
 8004664:	2200      	movs	r2, #0
 8004666:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004668:	187a      	adds	r2, r7, r1
 800466a:	4b28      	ldr	r3, [pc, #160]	; (800470c <MX_TIM1_Init+0x120>)
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f004 ff54 	bl	800951c <HAL_TIMEx_MasterConfigSynchronization>
 8004674:	1e03      	subs	r3, r0, #0
 8004676:	d001      	beq.n	800467c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004678:	f000 fbfc 	bl	8004e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800467c:	2124      	movs	r1, #36	; 0x24
 800467e:	187b      	adds	r3, r7, r1
 8004680:	2260      	movs	r2, #96	; 0x60
 8004682:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 7500/2*6;
 8004684:	187b      	adds	r3, r7, r1
 8004686:	4a24      	ldr	r2, [pc, #144]	; (8004718 <MX_TIM1_Init+0x12c>)
 8004688:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800468a:	187b      	adds	r3, r7, r1
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004690:	187b      	adds	r3, r7, r1
 8004692:	2200      	movs	r2, #0
 8004694:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004696:	187b      	adds	r3, r7, r1
 8004698:	2200      	movs	r2, #0
 800469a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800469c:	187b      	adds	r3, r7, r1
 800469e:	2200      	movs	r2, #0
 80046a0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	2200      	movs	r2, #0
 80046a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046a8:	1879      	adds	r1, r7, r1
 80046aa:	4b18      	ldr	r3, [pc, #96]	; (800470c <MX_TIM1_Init+0x120>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	0018      	movs	r0, r3
 80046b0:	f004 fbce 	bl	8008e50 <HAL_TIM_PWM_ConfigChannel>
 80046b4:	1e03      	subs	r3, r0, #0
 80046b6:	d001      	beq.n	80046bc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80046b8:	f000 fbdc 	bl	8004e74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046bc:	1d3b      	adds	r3, r7, #4
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046c2:	1d3b      	adds	r3, r7, #4
 80046c4:	2200      	movs	r2, #0
 80046c6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	2200      	movs	r2, #0
 80046d2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046d4:	1d3b      	adds	r3, r7, #4
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	0192      	lsls	r2, r2, #6
 80046e0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	2200      	movs	r2, #0
 80046e6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80046e8:	1d3a      	adds	r2, r7, #4
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <MX_TIM1_Init+0x120>)
 80046ec:	0011      	movs	r1, r2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f004 ff72 	bl	80095d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80046f4:	1e03      	subs	r3, r0, #0
 80046f6:	d001      	beq.n	80046fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80046f8:	f000 fbbc 	bl	8004e74 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */



  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <MX_TIM1_Init+0x120>)
 80046fe:	0018      	movs	r0, r3
 8004700:	f001 fae0 	bl	8005cc4 <HAL_TIM_MspPostInit>

}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b012      	add	sp, #72	; 0x48
 800470a:	bd80      	pop	{r7, pc}
 800470c:	200011cc 	.word	0x200011cc
 8004710:	40012c00 	.word	0x40012c00
 8004714:	0000afc8 	.word	0x0000afc8
 8004718:	000057e4 	.word	0x000057e4

0800471c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <MX_DMA_Init+0x38>)
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <MX_DMA_Init+0x38>)
 8004728:	2101      	movs	r1, #1
 800472a:	430a      	orrs	r2, r1
 800472c:	615a      	str	r2, [r3, #20]
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <MX_DMA_Init+0x38>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2201      	movs	r2, #1
 8004734:	4013      	ands	r3, r2
 8004736:	607b      	str	r3, [r7, #4]
 8004738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2100      	movs	r1, #0
 800473e:	2009      	movs	r0, #9
 8004740:	f002 fa46 	bl	8006bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8004744:	2009      	movs	r0, #9
 8004746:	f002 fa58 	bl	8006bfa <HAL_NVIC_EnableIRQ>

}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	b002      	add	sp, #8
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	40021000 	.word	0x40021000

08004758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b089      	sub	sp, #36	; 0x24
 800475c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475e:	240c      	movs	r4, #12
 8004760:	193b      	adds	r3, r7, r4
 8004762:	0018      	movs	r0, r3
 8004764:	2314      	movs	r3, #20
 8004766:	001a      	movs	r2, r3
 8004768:	2100      	movs	r1, #0
 800476a:	f004 ffed 	bl	8009748 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800476e:	4b63      	ldr	r3, [pc, #396]	; (80048fc <MX_GPIO_Init+0x1a4>)
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	4b62      	ldr	r3, [pc, #392]	; (80048fc <MX_GPIO_Init+0x1a4>)
 8004774:	2180      	movs	r1, #128	; 0x80
 8004776:	0289      	lsls	r1, r1, #10
 8004778:	430a      	orrs	r2, r1
 800477a:	615a      	str	r2, [r3, #20]
 800477c:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <MX_GPIO_Init+0x1a4>)
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	4013      	ands	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800478a:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <MX_GPIO_Init+0x1a4>)
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	4b5b      	ldr	r3, [pc, #364]	; (80048fc <MX_GPIO_Init+0x1a4>)
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	02c9      	lsls	r1, r1, #11
 8004794:	430a      	orrs	r2, r1
 8004796:	615a      	str	r2, [r3, #20]
 8004798:	4b58      	ldr	r3, [pc, #352]	; (80048fc <MX_GPIO_Init+0x1a4>)
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	02db      	lsls	r3, r3, #11
 80047a0:	4013      	ands	r3, r2
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a6:	4b55      	ldr	r3, [pc, #340]	; (80048fc <MX_GPIO_Init+0x1a4>)
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	4b54      	ldr	r3, [pc, #336]	; (80048fc <MX_GPIO_Init+0x1a4>)
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	0309      	lsls	r1, r1, #12
 80047b0:	430a      	orrs	r2, r1
 80047b2:	615a      	str	r2, [r3, #20]
 80047b4:	4b51      	ldr	r3, [pc, #324]	; (80048fc <MX_GPIO_Init+0x1a4>)
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	031b      	lsls	r3, r3, #12
 80047bc:	4013      	ands	r3, r2
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80047c2:	2390      	movs	r3, #144	; 0x90
 80047c4:	05db      	lsls	r3, r3, #23
 80047c6:	2200      	movs	r2, #0
 80047c8:	210c      	movs	r1, #12
 80047ca:	0018      	movs	r0, r3
 80047cc:	f002 fdb5 	bl	800733a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80047d0:	23c8      	movs	r3, #200	; 0xc8
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	484a      	ldr	r0, [pc, #296]	; (8004900 <MX_GPIO_Init+0x1a8>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	0019      	movs	r1, r3
 80047da:	f002 fdae 	bl	800733a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_SET);
 80047de:	23c0      	movs	r3, #192	; 0xc0
 80047e0:	019b      	lsls	r3, r3, #6
 80047e2:	4847      	ldr	r0, [pc, #284]	; (8004900 <MX_GPIO_Init+0x1a8>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	0019      	movs	r1, r3
 80047e8:	f002 fda7 	bl	800733a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80047ec:	23b8      	movs	r3, #184	; 0xb8
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4844      	ldr	r0, [pc, #272]	; (8004904 <MX_GPIO_Init+0x1ac>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	0019      	movs	r1, r3
 80047f6:	f002 fda0 	bl	800733a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047fa:	193b      	adds	r3, r7, r4
 80047fc:	220c      	movs	r2, #12
 80047fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004800:	193b      	adds	r3, r7, r4
 8004802:	2201      	movs	r2, #1
 8004804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	193b      	adds	r3, r7, r4
 8004808:	2200      	movs	r2, #0
 800480a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480c:	193b      	adds	r3, r7, r4
 800480e:	2200      	movs	r2, #0
 8004810:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	193a      	adds	r2, r7, r4
 8004814:	2390      	movs	r3, #144	; 0x90
 8004816:	05db      	lsls	r3, r3, #23
 8004818:	0011      	movs	r1, r2
 800481a:	0018      	movs	r0, r3
 800481c:	f002 fbf8 	bl	8007010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004820:	0021      	movs	r1, r4
 8004822:	187b      	adds	r3, r7, r1
 8004824:	22e0      	movs	r2, #224	; 0xe0
 8004826:	0192      	lsls	r2, r2, #6
 8004828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800482a:	000c      	movs	r4, r1
 800482c:	193b      	adds	r3, r7, r4
 800482e:	2201      	movs	r2, #1
 8004830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004832:	193b      	adds	r3, r7, r4
 8004834:	2201      	movs	r2, #1
 8004836:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004838:	193b      	adds	r3, r7, r4
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800483e:	193b      	adds	r3, r7, r4
 8004840:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <MX_GPIO_Init+0x1a8>)
 8004842:	0019      	movs	r1, r3
 8004844:	0010      	movs	r0, r2
 8004846:	f002 fbe3 	bl	8007010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800484a:	0021      	movs	r1, r4
 800484c:	187b      	adds	r3, r7, r1
 800484e:	22c0      	movs	r2, #192	; 0xc0
 8004850:	0212      	lsls	r2, r2, #8
 8004852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004854:	000c      	movs	r4, r1
 8004856:	193b      	adds	r3, r7, r4
 8004858:	2201      	movs	r2, #1
 800485a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	193b      	adds	r3, r7, r4
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004862:	193b      	adds	r3, r7, r4
 8004864:	2200      	movs	r2, #0
 8004866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004868:	193b      	adds	r3, r7, r4
 800486a:	4a25      	ldr	r2, [pc, #148]	; (8004900 <MX_GPIO_Init+0x1a8>)
 800486c:	0019      	movs	r1, r3
 800486e:	0010      	movs	r0, r2
 8004870:	f002 fbce 	bl	8007010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004874:	0021      	movs	r1, r4
 8004876:	187b      	adds	r3, r7, r1
 8004878:	22b8      	movs	r2, #184	; 0xb8
 800487a:	00d2      	lsls	r2, r2, #3
 800487c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800487e:	000c      	movs	r4, r1
 8004880:	193b      	adds	r3, r7, r4
 8004882:	2201      	movs	r2, #1
 8004884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	193b      	adds	r3, r7, r4
 8004888:	2200      	movs	r2, #0
 800488a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488c:	193b      	adds	r3, r7, r4
 800488e:	2200      	movs	r2, #0
 8004890:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004892:	193b      	adds	r3, r7, r4
 8004894:	4a1b      	ldr	r2, [pc, #108]	; (8004904 <MX_GPIO_Init+0x1ac>)
 8004896:	0019      	movs	r1, r3
 8004898:	0010      	movs	r0, r2
 800489a:	f002 fbb9 	bl	8007010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	22c0      	movs	r2, #192	; 0xc0
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b2:	193a      	adds	r2, r7, r4
 80048b4:	2390      	movs	r3, #144	; 0x90
 80048b6:	05db      	lsls	r3, r3, #23
 80048b8:	0011      	movs	r1, r2
 80048ba:	0018      	movs	r0, r3
 80048bc:	f002 fba8 	bl	8007010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80048c0:	0021      	movs	r1, r4
 80048c2:	187b      	adds	r3, r7, r1
 80048c4:	22f0      	movs	r2, #240	; 0xf0
 80048c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048c8:	187b      	adds	r3, r7, r1
 80048ca:	2288      	movs	r2, #136	; 0x88
 80048cc:	0352      	lsls	r2, r2, #13
 80048ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <MX_GPIO_Init+0x1a8>)
 80048da:	0019      	movs	r1, r3
 80048dc:	0010      	movs	r0, r2
 80048de:	f002 fb97 	bl	8007010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	2007      	movs	r0, #7
 80048e8:	f002 f972 	bl	8006bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80048ec:	2007      	movs	r0, #7
 80048ee:	f002 f984 	bl	8006bfa <HAL_NVIC_EnableIRQ>

}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b009      	add	sp, #36	; 0x24
 80048f8:	bd90      	pop	{r4, r7, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	40021000 	.word	0x40021000
 8004900:	48000400 	.word	0x48000400
 8004904:	48000800 	.word	0x48000800

08004908 <HAL_GPIO_EXTI_Callback>:
//===========================================================================
// EXTERNAL INTERRUPT CALLBACK
// Used for navigation buttons and trigger
//===========================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	0002      	movs	r2, r0
 8004910:	1dbb      	adds	r3, r7, #6
 8004912:	801a      	strh	r2, [r3, #0]
	curr = HAL_GetTick();
 8004914:	f001 fb92 	bl	800603c <HAL_GetTick>
 8004918:	0002      	movs	r2, r0
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_GPIO_EXTI_Callback+0xa4>)
 800491c:	601a      	str	r2, [r3, #0]
	UNUSED(GPIO_Pin);
	if((GPIO_Pin == (1<<4)) && (curr - prev > 200)) //Left button
 800491e:	1dbb      	adds	r3, r7, #6
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	2b10      	cmp	r3, #16
 8004924:	d10c      	bne.n	8004940 <HAL_GPIO_EXTI_Callback+0x38>
 8004926:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_GPIO_EXTI_Callback+0xa4>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2bc8      	cmp	r3, #200	; 0xc8
 8004932:	d905      	bls.n	8004940 <HAL_GPIO_EXTI_Callback+0x38>
	{
		move_left();//move left
 8004934:	f000 fc24 	bl	8005180 <move_left>
		prev = curr;
 8004938:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <HAL_GPIO_EXTI_Callback+0xa4>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800493e:	601a      	str	r2, [r3, #0]
	}
	if(((GPIO_Pin == (1<<5)) | (GPIO_Pin == (1<<7))) && (curr - prev > 200)) //select button
 8004940:	1dbb      	adds	r3, r7, #6
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	3b20      	subs	r3, #32
 8004946:	425a      	negs	r2, r3
 8004948:	4153      	adcs	r3, r2
 800494a:	b2da      	uxtb	r2, r3
 800494c:	1dbb      	adds	r3, r7, #6
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	3b80      	subs	r3, #128	; 0x80
 8004952:	4259      	negs	r1, r3
 8004954:	414b      	adcs	r3, r1
 8004956:	b2db      	uxtb	r3, r3
 8004958:	4313      	orrs	r3, r2
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00f      	beq.n	8004980 <HAL_GPIO_EXTI_Callback+0x78>
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_GPIO_EXTI_Callback+0xa4>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2bc8      	cmp	r3, #200	; 0xc8
 800496c:	d908      	bls.n	8004980 <HAL_GPIO_EXTI_Callback+0x78>
		{
			display_select(currentSelectIndex); //select option
 800496e:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_GPIO_EXTI_Callback+0xac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	0018      	movs	r0, r3
 8004974:	f000 fd58 	bl	8005428 <display_select>
			prev = curr;
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_GPIO_EXTI_Callback+0xa4>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800497e:	601a      	str	r2, [r3, #0]
		}
	if((GPIO_Pin == (1<<6)) && (curr - prev > 200)) // right button
 8004980:	1dbb      	adds	r3, r7, #6
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d10c      	bne.n	80049a2 <HAL_GPIO_EXTI_Callback+0x9a>
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <HAL_GPIO_EXTI_Callback+0xa4>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2bc8      	cmp	r3, #200	; 0xc8
 8004994:	d905      	bls.n	80049a2 <HAL_GPIO_EXTI_Callback+0x9a>
	{
		move_right();//move right
 8004996:	f000 fbbd 	bl	8005114 <move_right>
		prev = curr;
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <HAL_GPIO_EXTI_Callback+0xa4>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 80049a0:	601a      	str	r2, [r3, #0]
	}
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	46bd      	mov	sp, r7
 80049a6:	b002      	add	sp, #8
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	20000154 	.word	0x20000154
 80049b0:	20000150 	.word	0x20000150
 80049b4:	2000013c 	.word	0x2000013c

080049b8 <HAL_ADC_ConvHalfCpltCallback>:
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  __NOP();
 80049c0:	46c0      	nop			; (mov r8, r8)
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af04      	add	r7, sp, #16
 80049d2:	6078      	str	r0, [r7, #4]
	//LCD_Drawnum(3, 0, 0, , num2)
	HAL_ADC_Stop_DMA(hadc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f001 fcfc 	bl	80063d4 <HAL_ADC_Stop_DMA>
	LCD_DrawString(60 ,80,  YELLOW, BLUE,"Finished samples", 16, 0);
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <HAL_ADC_ConvCpltCallback+0x34>)
 80049de:	2300      	movs	r3, #0
 80049e0:	9302      	str	r3, [sp, #8]
 80049e2:	2310      	movs	r3, #16
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_ADC_ConvCpltCallback+0x38>)
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	231f      	movs	r3, #31
 80049ec:	2150      	movs	r1, #80	; 0x50
 80049ee:	203c      	movs	r0, #60	; 0x3c
 80049f0:	f7ff fbe6 	bl	80041c0 <LCD_DrawString>
	dspmain();
 80049f4:	f7fe fbae 	bl	8003154 <dspmain>
	//LCD_DrawString(60 ,160,  YELLOW, BLUE,"Finished DSP", 16, 0);
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b002      	add	sp, #8
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	0000ffe0 	.word	0x0000ffe0
 8004a04:	0800e1c8 	.word	0x0800e1c8

08004a08 <battery>:
void battery() {
 8004a08:	b5b0      	push	{r4, r5, r7, lr}
 8004a0a:	b096      	sub	sp, #88	; 0x58
 8004a0c:	af04      	add	r7, sp, #16

	battery_setPresacle(5);
 8004a0e:	2005      	movs	r0, #5
 8004a10:	f000 f964 	bl	8004cdc <battery_setPresacle>


	LCD_DrawString(60,100,YELLOW, BLUE, "I2C:", 16, 0);
 8004a14:	4aa1      	ldr	r2, [pc, #644]	; (8004c9c <battery+0x294>)
 8004a16:	2300      	movs	r3, #0
 8004a18:	9302      	str	r3, [sp, #8]
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	4ba0      	ldr	r3, [pc, #640]	; (8004ca0 <battery+0x298>)
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	231f      	movs	r3, #31
 8004a24:	2164      	movs	r1, #100	; 0x64
 8004a26:	203c      	movs	r0, #60	; 0x3c
 8004a28:	f7ff fbca 	bl	80041c0 <LCD_DrawString>
	//HAL_I2C_Master_Transmit(&hi2c1, I2C_BATTERY_MONITOR_ADDR, pData, Size, Timeout);
	HAL_StatusTypeDef ret;
	batbuf[0] = 0;
 8004a2c:	4b9d      	ldr	r3, [pc, #628]	; (8004ca4 <battery+0x29c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, I2C_BATTERY_MONITOR_ADDR, batbuf, 1, HAL_MAX_DELAY);
 8004a32:	23c8      	movs	r3, #200	; 0xc8
 8004a34:	b299      	uxth	r1, r3
 8004a36:	2547      	movs	r5, #71	; 0x47
 8004a38:	197c      	adds	r4, r7, r5
 8004a3a:	4a9a      	ldr	r2, [pc, #616]	; (8004ca4 <battery+0x29c>)
 8004a3c:	489a      	ldr	r0, [pc, #616]	; (8004ca8 <battery+0x2a0>)
 8004a3e:	2301      	movs	r3, #1
 8004a40:	425b      	negs	r3, r3
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2301      	movs	r3, #1
 8004a46:	f002 fd47 	bl	80074d8 <HAL_I2C_Master_Transmit>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	7023      	strb	r3, [r4, #0]
	if ( ret != HAL_OK ) {
 8004a4e:	197b      	adds	r3, r7, r5
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <battery+0x68>
		LCD_DrawString(140,100,YELLOW, BLUE, "ERROR", 16, 0);
 8004a56:	4a91      	ldr	r2, [pc, #580]	; (8004c9c <battery+0x294>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	4b92      	ldr	r3, [pc, #584]	; (8004cac <battery+0x2a4>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	231f      	movs	r3, #31
 8004a66:	2164      	movs	r1, #100	; 0x64
 8004a68:	208c      	movs	r0, #140	; 0x8c
 8004a6a:	f7ff fba9 	bl	80041c0 <LCD_DrawString>
 8004a6e:	e04b      	b.n	8004b08 <battery+0x100>
	} else {
		LCD_DrawString(140,100,YELLOW, BLUE, "ACK", 16, 0);
 8004a70:	4a8a      	ldr	r2, [pc, #552]	; (8004c9c <battery+0x294>)
 8004a72:	2300      	movs	r3, #0
 8004a74:	9302      	str	r3, [sp, #8]
 8004a76:	2310      	movs	r3, #16
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	4b8d      	ldr	r3, [pc, #564]	; (8004cb0 <battery+0x2a8>)
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	231f      	movs	r3, #31
 8004a80:	2164      	movs	r1, #100	; 0x64
 8004a82:	208c      	movs	r0, #140	; 0x8c
 8004a84:	f7ff fb9c 	bl	80041c0 <LCD_DrawString>
		LCD_DrawString(60,120,YELLOW, BLUE, "Status", 16, 0);
 8004a88:	4a84      	ldr	r2, [pc, #528]	; (8004c9c <battery+0x294>)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9302      	str	r3, [sp, #8]
 8004a8e:	2310      	movs	r3, #16
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	4b88      	ldr	r3, [pc, #544]	; (8004cb4 <battery+0x2ac>)
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	231f      	movs	r3, #31
 8004a98:	2178      	movs	r1, #120	; 0x78
 8004a9a:	203c      	movs	r0, #60	; 0x3c
 8004a9c:	f7ff fb90 	bl	80041c0 <LCD_DrawString>

		ret = HAL_I2C_Master_Receive(&hi2c1, I2C_BATTERY_MONITOR_ADDR, batbuf, 1, HAL_MAX_DELAY);
 8004aa0:	23c8      	movs	r3, #200	; 0xc8
 8004aa2:	b299      	uxth	r1, r3
 8004aa4:	2547      	movs	r5, #71	; 0x47
 8004aa6:	197c      	adds	r4, r7, r5
 8004aa8:	4a7e      	ldr	r2, [pc, #504]	; (8004ca4 <battery+0x29c>)
 8004aaa:	487f      	ldr	r0, [pc, #508]	; (8004ca8 <battery+0x2a0>)
 8004aac:	2301      	movs	r3, #1
 8004aae:	425b      	negs	r3, r3
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f002 fe18 	bl	80076e8 <HAL_I2C_Master_Receive>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	7023      	strb	r3, [r4, #0]
		if ( ret != HAL_OK ) {
 8004abc:	197b      	adds	r3, r7, r5
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <battery+0xd6>
			LCD_DrawString(140,120,YELLOW, BLUE, "ERROR", 16, 0);
 8004ac4:	4a75      	ldr	r2, [pc, #468]	; (8004c9c <battery+0x294>)
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9302      	str	r3, [sp, #8]
 8004aca:	2310      	movs	r3, #16
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	4b77      	ldr	r3, [pc, #476]	; (8004cac <battery+0x2a4>)
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	231f      	movs	r3, #31
 8004ad4:	2178      	movs	r1, #120	; 0x78
 8004ad6:	208c      	movs	r0, #140	; 0x8c
 8004ad8:	f7ff fb72 	bl	80041c0 <LCD_DrawString>
 8004adc:	e014      	b.n	8004b08 <battery+0x100>
		} else {
			char text[20];
			sprintf(text, "0x%x", batbuf[0]);
 8004ade:	4b71      	ldr	r3, [pc, #452]	; (8004ca4 <battery+0x29c>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	001a      	movs	r2, r3
 8004ae4:	4974      	ldr	r1, [pc, #464]	; (8004cb8 <battery+0x2b0>)
 8004ae6:	242c      	movs	r4, #44	; 0x2c
 8004ae8:	193b      	adds	r3, r7, r4
 8004aea:	0018      	movs	r0, r3
 8004aec:	f004 feee 	bl	80098cc <siprintf>

			LCD_DrawString(140,120,YELLOW, BLUE, text, 16, 0);
 8004af0:	4a6a      	ldr	r2, [pc, #424]	; (8004c9c <battery+0x294>)
 8004af2:	2300      	movs	r3, #0
 8004af4:	9302      	str	r3, [sp, #8]
 8004af6:	2310      	movs	r3, #16
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	193b      	adds	r3, r7, r4
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	231f      	movs	r3, #31
 8004b00:	2178      	movs	r1, #120	; 0x78
 8004b02:	208c      	movs	r0, #140	; 0x8c
 8004b04:	f7ff fb5c 	bl	80041c0 <LCD_DrawString>
		}
	}

	batbuf[0] = 2;
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <battery+0x29c>)
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	701a      	strb	r2, [r3, #0]
	LCD_DrawString(60,140,YELLOW, BLUE, "Chrg Reg:", 16, 0);
 8004b0e:	4a63      	ldr	r2, [pc, #396]	; (8004c9c <battery+0x294>)
 8004b10:	2300      	movs	r3, #0
 8004b12:	9302      	str	r3, [sp, #8]
 8004b14:	2310      	movs	r3, #16
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <battery+0x2b4>)
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	231f      	movs	r3, #31
 8004b1e:	218c      	movs	r1, #140	; 0x8c
 8004b20:	203c      	movs	r0, #60	; 0x3c
 8004b22:	f7ff fb4d 	bl	80041c0 <LCD_DrawString>
	ret = HAL_I2C_Master_Transmit(&hi2c1, I2C_BATTERY_MONITOR_ADDR, batbuf, 1, HAL_MAX_DELAY);
 8004b26:	23c8      	movs	r3, #200	; 0xc8
 8004b28:	b299      	uxth	r1, r3
 8004b2a:	2547      	movs	r5, #71	; 0x47
 8004b2c:	197c      	adds	r4, r7, r5
 8004b2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ca4 <battery+0x29c>)
 8004b30:	485d      	ldr	r0, [pc, #372]	; (8004ca8 <battery+0x2a0>)
 8004b32:	2301      	movs	r3, #1
 8004b34:	425b      	negs	r3, r3
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f002 fccd 	bl	80074d8 <HAL_I2C_Master_Transmit>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	7023      	strb	r3, [r4, #0]
	if ( ret != HAL_OK ) {
 8004b42:	197b      	adds	r3, r7, r5
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <battery+0x15c>
		LCD_DrawString(140,140,YELLOW, BLUE, "ERROR", 16, 0);
 8004b4a:	4a54      	ldr	r2, [pc, #336]	; (8004c9c <battery+0x294>)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	2310      	movs	r3, #16
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	4b55      	ldr	r3, [pc, #340]	; (8004cac <battery+0x2a4>)
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	231f      	movs	r3, #31
 8004b5a:	218c      	movs	r1, #140	; 0x8c
 8004b5c:	208c      	movs	r0, #140	; 0x8c
 8004b5e:	f7ff fb2f 	bl	80041c0 <LCD_DrawString>

	//HAL_I2C_Master_Receive_IT(&hi2c1, 100, batbuf, I2C_BUF_LEN);
	//HAL_I2C_Master_Receive(&hi2c1, DevAddress, pData, Size, Timeout), DevAddress, pData, Size, Timeout)

	//nano_wait(100000);
}
 8004b62:	e096      	b.n	8004c92 <battery+0x28a>
		LCD_DrawString(140,140,YELLOW, BLUE, "ACK", 16, 0);
 8004b64:	4a4d      	ldr	r2, [pc, #308]	; (8004c9c <battery+0x294>)
 8004b66:	2300      	movs	r3, #0
 8004b68:	9302      	str	r3, [sp, #8]
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <battery+0x2a8>)
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	231f      	movs	r3, #31
 8004b74:	218c      	movs	r1, #140	; 0x8c
 8004b76:	208c      	movs	r0, #140	; 0x8c
 8004b78:	f7ff fb22 	bl	80041c0 <LCD_DrawString>
		LCD_DrawString(60,160,YELLOW, BLUE, "Amount:", 16, 0);
 8004b7c:	4a47      	ldr	r2, [pc, #284]	; (8004c9c <battery+0x294>)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9302      	str	r3, [sp, #8]
 8004b82:	2310      	movs	r3, #16
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	4b4e      	ldr	r3, [pc, #312]	; (8004cc0 <battery+0x2b8>)
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	231f      	movs	r3, #31
 8004b8c:	21a0      	movs	r1, #160	; 0xa0
 8004b8e:	203c      	movs	r0, #60	; 0x3c
 8004b90:	f7ff fb16 	bl	80041c0 <LCD_DrawString>
		ret = HAL_I2C_Master_Receive(&hi2c1, I2C_BATTERY_MONITOR_ADDR, batbuf, 4, HAL_MAX_DELAY);
 8004b94:	23c8      	movs	r3, #200	; 0xc8
 8004b96:	b299      	uxth	r1, r3
 8004b98:	2547      	movs	r5, #71	; 0x47
 8004b9a:	197c      	adds	r4, r7, r5
 8004b9c:	4a41      	ldr	r2, [pc, #260]	; (8004ca4 <battery+0x29c>)
 8004b9e:	4842      	ldr	r0, [pc, #264]	; (8004ca8 <battery+0x2a0>)
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	425b      	negs	r3, r3
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	f002 fd9e 	bl	80076e8 <HAL_I2C_Master_Receive>
 8004bac:	0003      	movs	r3, r0
 8004bae:	7023      	strb	r3, [r4, #0]
		if ( ret != HAL_OK ) {
 8004bb0:	197b      	adds	r3, r7, r5
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <battery+0x1ca>
			LCD_DrawString(140,160,YELLOW, BLUE, "ERROR", 16, 0);
 8004bb8:	4a38      	ldr	r2, [pc, #224]	; (8004c9c <battery+0x294>)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9302      	str	r3, [sp, #8]
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <battery+0x2a4>)
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	231f      	movs	r3, #31
 8004bc8:	21a0      	movs	r1, #160	; 0xa0
 8004bca:	208c      	movs	r0, #140	; 0x8c
 8004bcc:	f7ff faf8 	bl	80041c0 <LCD_DrawString>
}
 8004bd0:	e05f      	b.n	8004c92 <battery+0x28a>
			sprintf(text, "0x%02x%02x %02x%02x", batbuf[0],batbuf[1],batbuf[2],batbuf[3]);
 8004bd2:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <battery+0x29c>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	001c      	movs	r4, r3
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <battery+0x29c>)
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	001d      	movs	r5, r3
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <battery+0x29c>)
 8004be0:	789b      	ldrb	r3, [r3, #2]
 8004be2:	001a      	movs	r2, r3
 8004be4:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <battery+0x29c>)
 8004be6:	78db      	ldrb	r3, [r3, #3]
 8004be8:	4936      	ldr	r1, [pc, #216]	; (8004cc4 <battery+0x2bc>)
 8004bea:	1d38      	adds	r0, r7, #4
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	9200      	str	r2, [sp, #0]
 8004bf0:	002b      	movs	r3, r5
 8004bf2:	0022      	movs	r2, r4
 8004bf4:	f004 fe6a 	bl	80098cc <siprintf>
			LCD_DrawString(140,160,YELLOW, BLUE, text, 16, 0);
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <battery+0x294>)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9302      	str	r3, [sp, #8]
 8004bfe:	2310      	movs	r3, #16
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	1d3b      	adds	r3, r7, #4
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	231f      	movs	r3, #31
 8004c08:	21a0      	movs	r1, #160	; 0xa0
 8004c0a:	208c      	movs	r0, #140	; 0x8c
 8004c0c:	f7ff fad8 	bl	80041c0 <LCD_DrawString>
			float chargeAmount = 2 * 0.085 * (batbuf[3] + batbuf[2] * 256);
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <battery+0x29c>)
 8004c12:	78db      	ldrb	r3, [r3, #3]
 8004c14:	001a      	movs	r2, r3
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <battery+0x29c>)
 8004c18:	789b      	ldrb	r3, [r3, #2]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	18d3      	adds	r3, r2, r3
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7fd ffc6 	bl	8002bb0 <__aeabi_i2d>
 8004c24:	4a28      	ldr	r2, [pc, #160]	; (8004cc8 <battery+0x2c0>)
 8004c26:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <battery+0x2c4>)
 8004c28:	f7fd f98e 	bl	8001f48 <__aeabi_dmul>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	000b      	movs	r3, r1
 8004c30:	0010      	movs	r0, r2
 8004c32:	0019      	movs	r1, r3
 8004c34:	f7fe f834 	bl	8002ca0 <__aeabi_d2f>
 8004c38:	1c03      	adds	r3, r0, #0
 8004c3a:	643b      	str	r3, [r7, #64]	; 0x40
			sprintf(text, "Capacity: %d mAh   %d %%", (uint32_t)chargeAmount, (uint32_t) (chargeAmount/5200.0*100));
 8004c3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c3e:	f7fb fc11 	bl	8000464 <__aeabi_f2uiz>
 8004c42:	0004      	movs	r4, r0
 8004c44:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c46:	f7fd ffe3 	bl	8002c10 <__aeabi_f2d>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <battery+0x2c8>)
 8004c4e:	f7fc fe93 	bl	8001978 <__aeabi_ddiv>
 8004c52:	0002      	movs	r2, r0
 8004c54:	000b      	movs	r3, r1
 8004c56:	0010      	movs	r0, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <battery+0x2cc>)
 8004c5e:	f7fd f973 	bl	8001f48 <__aeabi_dmul>
 8004c62:	0002      	movs	r2, r0
 8004c64:	000b      	movs	r3, r1
 8004c66:	0010      	movs	r0, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	f7fb fc13 	bl	8000494 <__aeabi_d2uiz>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	4919      	ldr	r1, [pc, #100]	; (8004cd8 <battery+0x2d0>)
 8004c72:	1d38      	adds	r0, r7, #4
 8004c74:	0022      	movs	r2, r4
 8004c76:	f004 fe29 	bl	80098cc <siprintf>
			LCD_DrawString(25 ,50,  YELLOW, BLUE, text, 16, 0);
 8004c7a:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <battery+0x294>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	9302      	str	r3, [sp, #8]
 8004c80:	2310      	movs	r3, #16
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	1d3b      	adds	r3, r7, #4
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	231f      	movs	r3, #31
 8004c8a:	2132      	movs	r1, #50	; 0x32
 8004c8c:	2019      	movs	r0, #25
 8004c8e:	f7ff fa97 	bl	80041c0 <LCD_DrawString>
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b012      	add	sp, #72	; 0x48
 8004c98:	bdb0      	pop	{r4, r5, r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	0000ffe0 	.word	0x0000ffe0
 8004ca0:	0800e1dc 	.word	0x0800e1dc
 8004ca4:	200011c8 	.word	0x200011c8
 8004ca8:	2000117c 	.word	0x2000117c
 8004cac:	0800e1e4 	.word	0x0800e1e4
 8004cb0:	0800e1ec 	.word	0x0800e1ec
 8004cb4:	0800e1f0 	.word	0x0800e1f0
 8004cb8:	0800e1f8 	.word	0x0800e1f8
 8004cbc:	0800e200 	.word	0x0800e200
 8004cc0:	0800e20c 	.word	0x0800e20c
 8004cc4:	0800e214 	.word	0x0800e214
 8004cc8:	5c28f5c3 	.word	0x5c28f5c3
 8004ccc:	3fc5c28f 	.word	0x3fc5c28f
 8004cd0:	40b45000 	.word	0x40b45000
 8004cd4:	40590000 	.word	0x40590000
 8004cd8:	0800e228 	.word	0x0800e228

08004cdc <battery_setPresacle>:

void battery_setPresacle(uint8_t scale)
{
 8004cdc:	b5b0      	push	{r4, r5, r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af04      	add	r7, sp, #16
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	1dfb      	adds	r3, r7, #7
 8004ce6:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	batbuf[0] = 0x01;
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <battery_setPresacle+0x88>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
	batbuf[1] = 0x38;
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <battery_setPresacle+0x88>)
 8004cf0:	2238      	movs	r2, #56	; 0x38
 8004cf2:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, I2C_BATTERY_MONITOR_ADDR, batbuf, 2, HAL_MAX_DELAY);
 8004cf4:	23c8      	movs	r3, #200	; 0xc8
 8004cf6:	b299      	uxth	r1, r3
 8004cf8:	250f      	movs	r5, #15
 8004cfa:	197c      	adds	r4, r7, r5
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <battery_setPresacle+0x88>)
 8004cfe:	481a      	ldr	r0, [pc, #104]	; (8004d68 <battery_setPresacle+0x8c>)
 8004d00:	2301      	movs	r3, #1
 8004d02:	425b      	negs	r3, r3
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2302      	movs	r3, #2
 8004d08:	f002 fbe6 	bl	80074d8 <HAL_I2C_Master_Transmit>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	7023      	strb	r3, [r4, #0]
	if ( ret != HAL_OK ) {
 8004d10:	197b      	adds	r3, r7, r5
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00c      	beq.n	8004d32 <battery_setPresacle+0x56>
		LCD_DrawString(140,40,YELLOW, BLUE, "ERROR", 16, 0);
 8004d18:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <battery_setPresacle+0x90>)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9302      	str	r3, [sp, #8]
 8004d1e:	2310      	movs	r3, #16
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <battery_setPresacle+0x94>)
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	231f      	movs	r3, #31
 8004d28:	2128      	movs	r1, #40	; 0x28
 8004d2a:	208c      	movs	r0, #140	; 0x8c
 8004d2c:	f7ff fa48 	bl	80041c0 <LCD_DrawString>
		if ( ret != HAL_OK ) {
				LCD_DrawString(140,40,YELLOW, BLUE, "ERROR", 16, 0);
		} //else {LCD_DrawString(140,40,YELLOW, BLUE, "DONE", 16, 0);}
	}

	return;
 8004d30:	e014      	b.n	8004d5c <battery_setPresacle+0x80>
		batbuf[0] = 0x30;
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <battery_setPresacle+0x88>)
 8004d34:	2230      	movs	r2, #48	; 0x30
 8004d36:	701a      	strb	r2, [r3, #0]
		if ( ret != HAL_OK ) {
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <battery_setPresacle+0x80>
				LCD_DrawString(140,40,YELLOW, BLUE, "ERROR", 16, 0);
 8004d42:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <battery_setPresacle+0x90>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	9302      	str	r3, [sp, #8]
 8004d48:	2310      	movs	r3, #16
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <battery_setPresacle+0x94>)
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	231f      	movs	r3, #31
 8004d52:	2128      	movs	r1, #40	; 0x28
 8004d54:	208c      	movs	r0, #140	; 0x8c
 8004d56:	f7ff fa33 	bl	80041c0 <LCD_DrawString>
	return;
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	46c0      	nop			; (mov r8, r8)
}
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b004      	add	sp, #16
 8004d62:	bdb0      	pop	{r4, r5, r7, pc}
 8004d64:	200011c8 	.word	0x200011c8
 8004d68:	2000117c 	.word	0x2000117c
 8004d6c:	0000ffe0 	.word	0x0000ffe0
 8004d70:	0800e1e4 	.word	0x0800e1e4

08004d74 <auto_tune>:
		renew +=  tmp * fact;
	  }

}
void auto_tune()
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af04      	add	r7, sp, #16
	LCD_Clear(BLUE);
 8004d7a:	201f      	movs	r0, #31
 8004d7c:	f7ff f84a 	bl	8003e14 <LCD_Clear>
	for (int i = 0; i < 2; i++) {
 8004d80:	2300      	movs	r3, #0
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	e01c      	b.n	8004dc0 <auto_tune+0x4c>
				LCD_DrawString(65*i + 25,200,  YELLOW, BLUE, (currDisplay->selection)[i], 16, 0);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	1c1a      	adds	r2, r3, #0
 8004d8c:	0192      	lsls	r2, r2, #6
 8004d8e:	18d3      	adds	r3, r2, r3
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3319      	adds	r3, #25
 8004d94:	b298      	uxth	r0, r3
 8004d96:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <auto_tune+0xa8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	18d3      	adds	r3, r2, r3
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	491e      	ldr	r1, [pc, #120]	; (8004e20 <auto_tune+0xac>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	9202      	str	r2, [sp, #8]
 8004daa:	2210      	movs	r2, #16
 8004dac:	9201      	str	r2, [sp, #4]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	231f      	movs	r3, #31
 8004db2:	000a      	movs	r2, r1
 8004db4:	21c8      	movs	r1, #200	; 0xc8
 8004db6:	f7ff fa03 	bl	80041c0 <LCD_DrawString>
	for (int i = 0; i < 2; i++) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	dddf      	ble.n	8004d86 <auto_tune+0x12>
			}
	pegDisplay();
 8004dc6:	f000 fd71 	bl	80058ac <pegDisplay>
	LCD_DrawString(65*2 + 25,200,  YELLOW, BLUE, (currDisplay->selection)[2], 16, 0);
 8004dca:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <auto_tune+0xa8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <auto_tune+0xac>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	9202      	str	r2, [sp, #8]
 8004dda:	2210      	movs	r2, #16
 8004ddc:	9201      	str	r2, [sp, #4]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	231f      	movs	r3, #31
 8004de2:	000a      	movs	r2, r1
 8004de4:	21c8      	movs	r1, #200	; 0xc8
 8004de6:	209b      	movs	r0, #155	; 0x9b
 8004de8:	f7ff f9ea 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(80 ,80,  YELLOW, BLUE,"Take samples", 16, 0);
 8004dec:	4a0c      	ldr	r2, [pc, #48]	; (8004e20 <auto_tune+0xac>)
 8004dee:	2300      	movs	r3, #0
 8004df0:	9302      	str	r3, [sp, #8]
 8004df2:	2310      	movs	r3, #16
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <auto_tune+0xb0>)
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	231f      	movs	r3, #31
 8004dfc:	2150      	movs	r1, #80	; 0x50
 8004dfe:	2050      	movs	r0, #80	; 0x50
 8004e00:	f7ff f9de 	bl	80041c0 <LCD_DrawString>
	HAL_ADC_Start_DMA(&hadc, adc_buf, ADC_BUF_LEN);
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	011a      	lsls	r2, r3, #4
 8004e08:	4907      	ldr	r1, [pc, #28]	; (8004e28 <auto_tune+0xb4>)
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <auto_tune+0xb8>)
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f001 fa5f 	bl	80062d0 <HAL_ADC_Start_DMA>
	//dspmain();
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b002      	add	sp, #8
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	200012fc 	.word	0x200012fc
 8004e20:	0000ffe0 	.word	0x0000ffe0
 8004e24:	0800e244 	.word	0x0800e244
 8004e28:	20000168 	.word	0x20000168
 8004e2c:	200012bc 	.word	0x200012bc

08004e30 <startmotor>:
void startmotor()
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <startmotor+0x14>)
 8004e36:	2100      	movs	r1, #0
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f003 fed5 	bl	8008be8 <HAL_TIM_PWM_Start>
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	200011cc 	.word	0x200011cc

08004e48 <stopmotor>:
void stopmotor()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <stopmotor+0x24>)
 8004e4e:	2100      	movs	r1, #0
 8004e50:	0018      	movs	r0, r3
 8004e52:	f003 ff81 	bl	8008d58 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	4805      	ldr	r0, [pc, #20]	; (8004e70 <stopmotor+0x28>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	0019      	movs	r1, r3
 8004e60:	f002 fa6b 	bl	800733a <HAL_GPIO_WritePin>
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	200011cc 	.word	0x200011cc
 8004e70:	48000400 	.word	0x48000400

08004e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e78:	b672      	cpsid	i
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e7c:	e7fe      	b.n	8004e7c <Error_Handler+0x8>
	...

08004e80 <initialize>:
uint8_t pressHistory[3] = {0,0,0};
extern const Picture *image;
struct display *currDisplay;

void initialize()
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	; 0x28
 8004e84:	af00      	add	r7, sp, #0
	struct display *home = malloc(sizeof(struct display));
 8004e86:	2020      	movs	r0, #32
 8004e88:	f004 fc54 	bl	8009734 <malloc>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
	struct display *info = malloc(sizeof(struct display));
 8004e90:	2020      	movs	r0, #32
 8004e92:	f004 fc4f 	bl	8009734 <malloc>
 8004e96:	0003      	movs	r3, r0
 8004e98:	623b      	str	r3, [r7, #32]
	struct display *samp = malloc(sizeof(struct display));
 8004e9a:	2020      	movs	r0, #32
 8004e9c:	f004 fc4a 	bl	8009734 <malloc>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	61fb      	str	r3, [r7, #28]
	struct display *tune = malloc(sizeof(struct display));
 8004ea4:	2020      	movs	r0, #32
 8004ea6:	f004 fc45 	bl	8009734 <malloc>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	61bb      	str	r3, [r7, #24]
	struct display *manual = malloc(sizeof(struct display));
 8004eae:	2020      	movs	r0, #32
 8004eb0:	f004 fc40 	bl	8009734 <malloc>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	617b      	str	r3, [r7, #20]
	struct display *peg = malloc(sizeof(struct display));
 8004eb8:	2020      	movs	r0, #32
 8004eba:	f004 fc3b 	bl	8009734 <malloc>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	613b      	str	r3, [r7, #16]
	struct display *rotate = malloc(sizeof(struct display));
 8004ec2:	2020      	movs	r0, #32
 8004ec4:	f004 fc36 	bl	8009734 <malloc>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	60fb      	str	r3, [r7, #12]
	struct display *Auto = malloc(sizeof(struct display));
 8004ecc:	2020      	movs	r0, #32
 8004ece:	f004 fc31 	bl	8009734 <malloc>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	60bb      	str	r3, [r7, #8]
	struct display *bat = malloc(sizeof(struct display));
 8004ed6:	2020      	movs	r0, #32
 8004ed8:	f004 fc2c 	bl	8009734 <malloc>
 8004edc:	0003      	movs	r3, r0
 8004ede:	607b      	str	r3, [r7, #4]

	home->ttl = menu_home;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	4a6a      	ldr	r2, [pc, #424]	; (800508c <initialize+0x20c>)
 8004ee4:	601a      	str	r2, [r3, #0]
	home->scrollmax = 3;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2203      	movs	r2, #3
 8004eea:	60da      	str	r2, [r3, #12]
	home->selectionmax = 3;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	2203      	movs	r2, #3
 8004ef0:	611a      	str	r2, [r3, #16]
	home->backout = NULL;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	61da      	str	r2, [r3, #28]
	home->nextsel = NULL;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	2200      	movs	r2, #0
 8004efc:	615a      	str	r2, [r3, #20]
	home->childsel = info;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	6a3a      	ldr	r2, [r7, #32]
 8004f02:	619a      	str	r2, [r3, #24]
	home->identity = 'h';
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2268      	movs	r2, #104	; 0x68
 8004f08:	711a      	strb	r2, [r3, #4]
	home->selection = menu;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	4a60      	ldr	r2, [pc, #384]	; (8005090 <initialize+0x210>)
 8004f0e:	609a      	str	r2, [r3, #8]
	//info
	info->scrollmax = 2;
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	2202      	movs	r2, #2
 8004f14:	60da      	str	r2, [r3, #12]
	info->selectionmax = 2;
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	611a      	str	r2, [r3, #16]
	info->ttl = Infomode;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	4a5d      	ldr	r2, [pc, #372]	; (8005094 <initialize+0x214>)
 8004f20:	601a      	str	r2, [r3, #0]
	info->backout = home;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	61da      	str	r2, [r3, #28]
	info->nextsel = tune;
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	615a      	str	r2, [r3, #20]
	info->childsel = bat;
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	619a      	str	r2, [r3, #24]
	info->identity = 'i';
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	2269      	movs	r2, #105	; 0x69
 8004f38:	711a      	strb	r2, [r3, #4]
	info->selection = Info;
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	4a56      	ldr	r2, [pc, #344]	; (8005098 <initialize+0x218>)
 8004f3e:	609a      	str	r2, [r3, #8]

	//info
	bat->scrollmax = 0;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]
	bat->selectionmax = 0;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]
	bat->ttl = battery;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a53      	ldr	r2, [pc, #332]	; (800509c <initialize+0x21c>)
 8004f50:	601a      	str	r2, [r3, #0]
	bat->backout = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	61da      	str	r2, [r3, #28]
	bat->nextsel = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	615a      	str	r2, [r3, #20]
	bat->childsel = NULL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	619a      	str	r2, [r3, #24]
	bat->identity = 'b';
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2262      	movs	r2, #98	; 0x62
 8004f68:	711a      	strb	r2, [r3, #4]
	bat->selection = Info;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a4a      	ldr	r2, [pc, #296]	; (8005098 <initialize+0x218>)
 8004f6e:	609a      	str	r2, [r3, #8]
	//Tune
	tune->scrollmax = 3;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2203      	movs	r2, #3
 8004f74:	60da      	str	r2, [r3, #12]
	tune->selectionmax = 7;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2207      	movs	r2, #7
 8004f7a:	611a      	str	r2, [r3, #16]
	tune->ttl = Tunemode;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	4a48      	ldr	r2, [pc, #288]	; (80050a0 <initialize+0x220>)
 8004f80:	601a      	str	r2, [r3, #0]
	tune->backout = home;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f86:	61da      	str	r2, [r3, #28]
	tune->childsel = peg;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	619a      	str	r2, [r3, #24]
	tune->nextsel = manual;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	615a      	str	r2, [r3, #20]
	tune->identity = 't';
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2274      	movs	r2, #116	; 0x74
 8004f98:	711a      	strb	r2, [r3, #4]
	tune->selection = Tune;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	4a41      	ldr	r2, [pc, #260]	; (80050a4 <initialize+0x224>)
 8004f9e:	609a      	str	r2, [r3, #8]

	//Peg
	peg->scrollmax = 3;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	60da      	str	r2, [r3, #12]
	peg->selectionmax = 3;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	611a      	str	r2, [r3, #16]
	peg->ttl = pegDisplay;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4a3e      	ldr	r2, [pc, #248]	; (80050a8 <initialize+0x228>)
 8004fb0:	601a      	str	r2, [r3, #0]
	peg->backout = tune;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	61da      	str	r2, [r3, #28]
	peg->childsel = Auto;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	619a      	str	r2, [r3, #24]
	peg->nextsel = NULL;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
	peg->identity = 'p';
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2270      	movs	r2, #112	; 0x70
 8004fc8:	711a      	strb	r2, [r3, #4]
	peg->selection = Peg;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4a37      	ldr	r2, [pc, #220]	; (80050ac <initialize+0x22c>)
 8004fce:	609a      	str	r2, [r3, #8]

	//Auto
	Auto->scrollmax = 0;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]
	Auto->selectionmax = 0;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	611a      	str	r2, [r3, #16]
	Auto->ttl = autoRotate;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a34      	ldr	r2, [pc, #208]	; (80050b0 <initialize+0x230>)
 8004fe0:	601a      	str	r2, [r3, #0]
	Auto->backout = peg;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	61da      	str	r2, [r3, #28]
	Auto->childsel = NULL;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	619a      	str	r2, [r3, #24]
	Auto->nextsel = samp;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	615a      	str	r2, [r3, #20]
	Auto->identity = 'a';
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2261      	movs	r2, #97	; 0x61
 8004ff8:	711a      	strb	r2, [r3, #4]

	//sample
	samp->scrollmax = 0;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	60da      	str	r2, [r3, #12]
	samp->selectionmax = 0;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
	samp->ttl = auto_tune;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <initialize+0x234>)
 800500a:	601a      	str	r2, [r3, #0]
	samp->backout = peg;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	61da      	str	r2, [r3, #28]
	samp->childsel = NULL;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2200      	movs	r2, #0
 8005016:	619a      	str	r2, [r3, #24]
	samp->nextsel = NULL;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2200      	movs	r2, #0
 800501c:	615a      	str	r2, [r3, #20]
	samp->identity = 'a';
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2261      	movs	r2, #97	; 0x61
 8005022:	711a      	strb	r2, [r3, #4]

	//Manual
	manual->scrollmax = 3;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2203      	movs	r2, #3
 8005028:	60da      	str	r2, [r3, #12]
	manual->selectionmax = 3;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2203      	movs	r2, #3
 800502e:	611a      	str	r2, [r3, #16]
	manual->ttl = Manualmode;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <initialize+0x238>)
 8005034:	601a      	str	r2, [r3, #0]
	manual->backout = home;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	61da      	str	r2, [r3, #28]
	manual->childsel = rotate;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]
	manual->nextsel = info;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	615a      	str	r2, [r3, #20]
	manual->identity = 'm';
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	226d      	movs	r2, #109	; 0x6d
 800504c:	711a      	strb	r2, [r3, #4]
	manual->selection = Manual;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <initialize+0x23c>)
 8005052:	609a      	str	r2, [r3, #8]

	//backout
	rotate->ttl = manualRotate;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <initialize+0x240>)
 8005058:	601a      	str	r2, [r3, #0]
	rotate->scrollmax = 0;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	60da      	str	r2, [r3, #12]
	rotate->selectionmax = 0;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	611a      	str	r2, [r3, #16]
	rotate->backout = NULL;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	61da      	str	r2, [r3, #28]
	rotate->nextsel = NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	615a      	str	r2, [r3, #20]
	rotate->childsel = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	619a      	str	r2, [r3, #24]
	rotate->identity = 'r';
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2272      	movs	r2, #114	; 0x72
 800507c:	711a      	strb	r2, [r3, #4]
	//back->selection = null;

	currDisplay = home;
 800507e:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <initialize+0x244>)
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b00a      	add	sp, #40	; 0x28
 800508a:	bd80      	pop	{r7, pc}
 800508c:	080050c9 	.word	0x080050c9
 8005090:	20000030 	.word	0x20000030
 8005094:	080055fd 	.word	0x080055fd
 8005098:	20000064 	.word	0x20000064
 800509c:	08004a09 	.word	0x08004a09
 80050a0:	080057e1 	.word	0x080057e1
 80050a4:	2000003c 	.word	0x2000003c
 80050a8:	080058ad 	.word	0x080058ad
 80050ac:	2000006c 	.word	0x2000006c
 80050b0:	08005691 	.word	0x08005691
 80050b4:	08004d75 	.word	0x08004d75
 80050b8:	08005629 	.word	0x08005629
 80050bc:	20000058 	.word	0x20000058
 80050c0:	08005671 	.word	0x08005671
 80050c4:	200012fc 	.word	0x200012fc

080050c8 <menu_home>:
struct display *currDisplay;
void menu_home()
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af04      	add	r7, sp, #16
LCD_DrawString(25,200,  YELLOW, BLACK, menu[0], 16, 0);
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <menu_home+0x40>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	490e      	ldr	r1, [pc, #56]	; (800510c <menu_home+0x44>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	9202      	str	r2, [sp, #8]
 80050d8:	2210      	movs	r2, #16
 80050da:	9201      	str	r2, [sp, #4]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	000a      	movs	r2, r1
 80050e2:	21c8      	movs	r1, #200	; 0xc8
 80050e4:	2019      	movs	r0, #25
 80050e6:	f7ff f86b 	bl	80041c0 <LCD_DrawString>
LCD_DrawString(80 ,40,  YELLOW, BLUE,"Home Menu", 16, 0);
 80050ea:	4a08      	ldr	r2, [pc, #32]	; (800510c <menu_home+0x44>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	2310      	movs	r3, #16
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <menu_home+0x48>)
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	231f      	movs	r3, #31
 80050fa:	2128      	movs	r1, #40	; 0x28
 80050fc:	2050      	movs	r0, #80	; 0x50
 80050fe:	f7ff f85f 	bl	80041c0 <LCD_DrawString>
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000030 	.word	0x20000030
 800510c:	0000ffe0 	.word	0x0000ffe0
 8005110:	0800e324 	.word	0x0800e324

08005114 <move_right>:
void move_right()
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
	if (currentScrollIndex == (currDisplay->scrollmax -1)) {
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <move_right+0x58>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	4b13      	ldr	r3, [pc, #76]	; (8005170 <move_right+0x5c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d10a      	bne.n	800513e <move_right+0x2a>
					//if highlighted choice is very last choice, wrap around to first choice
					display_move(currentScrollIndex +1, currentSelectIndex+1,2);
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <move_right+0x5c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	1c58      	adds	r0, r3, #1
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <move_right+0x60>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	2202      	movs	r2, #2
 8005136:	0019      	movs	r1, r3
 8005138:	f000 f852 	bl	80051e0 <display_move>
 800513c:	e009      	b.n	8005152 <move_right+0x3e>
				} else {
					//else just highlight selection to previous choice
					display_move(currentScrollIndex +1, currentSelectIndex+1,0);
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <move_right+0x5c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	1c58      	adds	r0, r3, #1
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <move_right+0x60>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3301      	adds	r3, #1
 800514a:	2200      	movs	r2, #0
 800514c:	0019      	movs	r1, r3
 800514e:	f000 f847 	bl	80051e0 <display_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4808      	ldr	r0, [pc, #32]	; (8005178 <move_right+0x64>)
 8005158:	2201      	movs	r2, #1
 800515a:	0019      	movs	r1, r3
 800515c:	f002 f8ed 	bl	800733a <HAL_GPIO_WritePin>
				goright = 0; // reset right indication flag
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <move_right+0x68>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	200012fc 	.word	0x200012fc
 8005170:	20000140 	.word	0x20000140
 8005174:	2000013c 	.word	0x2000013c
 8005178:	48000800 	.word	0x48000800
 800517c:	2000014c 	.word	0x2000014c

08005180 <move_left>:
void move_left()
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
	if (currentScrollIndex == 0) {
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <move_left+0x50>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <move_left+0x22>
					//if highlighted choice is very first choice, wrap around to last choice
					display_move(currentScrollIndex -1, currentSelectIndex-1,1);
 800518c:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <move_left+0x50>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	1e58      	subs	r0, r3, #1
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <move_left+0x54>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3b01      	subs	r3, #1
 8005198:	2201      	movs	r2, #1
 800519a:	0019      	movs	r1, r3
 800519c:	f000 f820 	bl	80051e0 <display_move>
 80051a0:	e009      	b.n	80051b6 <move_left+0x36>

				} else {
					//else just highlight selection left to previous choice
					display_move(currentScrollIndex -1, currentSelectIndex-1,0);
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <move_left+0x50>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	1e58      	subs	r0, r3, #1
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <move_left+0x54>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	2200      	movs	r2, #0
 80051b0:	0019      	movs	r1, r3
 80051b2:	f000 f815 	bl	80051e0 <display_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80051b6:	2380      	movs	r3, #128	; 0x80
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4807      	ldr	r0, [pc, #28]	; (80051d8 <move_left+0x58>)
 80051bc:	2201      	movs	r2, #1
 80051be:	0019      	movs	r1, r3
 80051c0:	f002 f8bb 	bl	800733a <HAL_GPIO_WritePin>
				goleft = 0; //reset left indication flag
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <move_left+0x5c>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000140 	.word	0x20000140
 80051d4:	2000013c 	.word	0x2000013c
 80051d8:	48000800 	.word	0x48000800
 80051dc:	20000148 	.word	0x20000148

080051e0 <display_move>:
void display_move(int scrollIndex, int selectIndex, int enable) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af04      	add	r7, sp, #16
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	//just unhighlighting previous choice and highlighting current choice
	if((currDisplay->selectionmax > 3) && (enable > 0))
 80051ec:	4b89      	ldr	r3, [pc, #548]	; (8005414 <display_move+0x234>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	dc00      	bgt.n	80051f8 <display_move+0x18>
 80051f6:	e0a7      	b.n	8005348 <display_move+0x168>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dc00      	bgt.n	8005200 <display_move+0x20>
 80051fe:	e0a3      	b.n	8005348 <display_move+0x168>
	{
		if(enable == 1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d14d      	bne.n	80052a2 <display_move+0xc2>
		{
			if(selectIndex < 0)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	da04      	bge.n	8005216 <display_move+0x36>
				selectIndex = currDisplay->selectionmax-1;
 800520c:	4b81      	ldr	r3, [pc, #516]	; (8005414 <display_move+0x234>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	3b01      	subs	r3, #1
 8005214:	60bb      	str	r3, [r7, #8]
			LCD_DrawString(25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 8005216:	4b7f      	ldr	r3, [pc, #508]	; (8005414 <display_move+0x234>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	18d3      	adds	r3, r2, r3
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	497c      	ldr	r1, [pc, #496]	; (8005418 <display_move+0x238>)
 8005226:	2200      	movs	r2, #0
 8005228:	9202      	str	r2, [sp, #8]
 800522a:	2210      	movs	r2, #16
 800522c:	9201      	str	r2, [sp, #4]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	000a      	movs	r2, r1
 8005234:	21c8      	movs	r1, #200	; 0xc8
 8005236:	2019      	movs	r0, #25
 8005238:	f7fe ffc2 	bl	80041c0 <LCD_DrawString>
			int idx = selectIndex;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	61fb      	str	r3, [r7, #28]
			for(int i = 1; i < 3; i++)
 8005240:	2301      	movs	r3, #1
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	e027      	b.n	8005296 <display_move+0xb6>
				{idx++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
				if(idx >= currDisplay->selectionmax)
 800524c:	4b71      	ldr	r3, [pc, #452]	; (8005414 <display_move+0x234>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	429a      	cmp	r2, r3
 8005256:	db01      	blt.n	800525c <display_move+0x7c>
					idx = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
				LCD_DrawString(65*i + 25,200,  YELLOW, BLUE, currDisplay->selection[idx], 16, 0);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	b29b      	uxth	r3, r3
 8005260:	1c1a      	adds	r2, r3, #0
 8005262:	0192      	lsls	r2, r2, #6
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	b29b      	uxth	r3, r3
 8005268:	3319      	adds	r3, #25
 800526a:	b298      	uxth	r0, r3
 800526c:	4b69      	ldr	r3, [pc, #420]	; (8005414 <display_move+0x234>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4967      	ldr	r1, [pc, #412]	; (8005418 <display_move+0x238>)
 800527c:	2200      	movs	r2, #0
 800527e:	9202      	str	r2, [sp, #8]
 8005280:	2210      	movs	r2, #16
 8005282:	9201      	str	r2, [sp, #4]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	231f      	movs	r3, #31
 8005288:	000a      	movs	r2, r1
 800528a:	21c8      	movs	r1, #200	; 0xc8
 800528c:	f7fe ff98 	bl	80041c0 <LCD_DrawString>
			for(int i = 1; i < 3; i++)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	3301      	adds	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b02      	cmp	r3, #2
 800529a:	ddd4      	ble.n	8005246 <display_move+0x66>
				}
			scrollIndex = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e04c      	b.n	800533c <display_move+0x15c>
		}
		else
		{
			if(selectIndex >= currDisplay->selectionmax)
 80052a2:	4b5c      	ldr	r3, [pc, #368]	; (8005414 <display_move+0x234>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	db01      	blt.n	80052b2 <display_move+0xd2>
				selectIndex = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
			LCD_DrawString(65*2 +25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 80052b2:	4b58      	ldr	r3, [pc, #352]	; (8005414 <display_move+0x234>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4955      	ldr	r1, [pc, #340]	; (8005418 <display_move+0x238>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	9202      	str	r2, [sp, #8]
 80052c6:	2210      	movs	r2, #16
 80052c8:	9201      	str	r2, [sp, #4]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	000a      	movs	r2, r1
 80052d0:	21c8      	movs	r1, #200	; 0xc8
 80052d2:	209b      	movs	r0, #155	; 0x9b
 80052d4:	f7fe ff74 	bl	80041c0 <LCD_DrawString>
			int idx = selectIndex;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	617b      	str	r3, [r7, #20]
			for(int i = 1; i >= 0; i--)
 80052dc:	2301      	movs	r3, #1
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	e027      	b.n	8005332 <display_move+0x152>
			{idx--;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	617b      	str	r3, [r7, #20]
			if(idx < 0)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da04      	bge.n	80052f8 <display_move+0x118>
				idx = currDisplay->selectionmax-1;
 80052ee:	4b49      	ldr	r3, [pc, #292]	; (8005414 <display_move+0x234>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
			LCD_DrawString(65*i + 25,200,  YELLOW, BLUE, currDisplay->selection[idx], 16, 0);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	1c1a      	adds	r2, r3, #0
 80052fe:	0192      	lsls	r2, r2, #6
 8005300:	18d3      	adds	r3, r2, r3
 8005302:	b29b      	uxth	r3, r3
 8005304:	3319      	adds	r3, #25
 8005306:	b298      	uxth	r0, r3
 8005308:	4b42      	ldr	r3, [pc, #264]	; (8005414 <display_move+0x234>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	18d3      	adds	r3, r2, r3
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4940      	ldr	r1, [pc, #256]	; (8005418 <display_move+0x238>)
 8005318:	2200      	movs	r2, #0
 800531a:	9202      	str	r2, [sp, #8]
 800531c:	2210      	movs	r2, #16
 800531e:	9201      	str	r2, [sp, #4]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	231f      	movs	r3, #31
 8005324:	000a      	movs	r2, r1
 8005326:	21c8      	movs	r1, #200	; 0xc8
 8005328:	f7fe ff4a 	bl	80041c0 <LCD_DrawString>
			for(int i = 1; i >= 0; i--)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	3b01      	subs	r3, #1
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	dad4      	bge.n	80052e2 <display_move+0x102>
			}
			scrollIndex = 2;
 8005338:	2302      	movs	r3, #2
 800533a:	60fb      	str	r3, [r7, #12]
		}
		currentPeg = currentSelectIndex-1;
 800533c:	4b37      	ldr	r3, [pc, #220]	; (800541c <display_move+0x23c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1e5a      	subs	r2, r3, #1
 8005342:	4b37      	ldr	r3, [pc, #220]	; (8005420 <display_move+0x240>)
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e05b      	b.n	8005400 <display_move+0x220>
	}
	else
	{
	if(enable == 1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10a      	bne.n	8005364 <display_move+0x184>
		{selectIndex = currDisplay->selectionmax-1; scrollIndex = currDisplay->scrollmax-1;}
 800534e:	4b31      	ldr	r3, [pc, #196]	; (8005414 <display_move+0x234>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	3b01      	subs	r3, #1
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	4b2e      	ldr	r3, [pc, #184]	; (8005414 <display_move+0x234>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	3b01      	subs	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e006      	b.n	8005372 <display_move+0x192>
	else if(enable == 2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d103      	bne.n	8005372 <display_move+0x192>
		{selectIndex = 0; scrollIndex = 0;}
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
	if(selectIndex > currDisplay->selectionmax-1)
 8005372:	4b28      	ldr	r3, [pc, #160]	; (8005414 <display_move+0x234>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	db02      	blt.n	8005384 <display_move+0x1a4>
		selectIndex = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	e007      	b.n	8005394 <display_move+0x1b4>
	else if(selectIndex < 0)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	da04      	bge.n	8005394 <display_move+0x1b4>
		selectIndex = currDisplay->selectionmax-1;
 800538a:	4b22      	ldr	r3, [pc, #136]	; (8005414 <display_move+0x234>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	3b01      	subs	r3, #1
 8005392:	60bb      	str	r3, [r7, #8]

	LCD_DrawString(65*scrollIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	b29b      	uxth	r3, r3
 8005398:	1c1a      	adds	r2, r3, #0
 800539a:	0192      	lsls	r2, r2, #6
 800539c:	18d3      	adds	r3, r2, r3
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3319      	adds	r3, #25
 80053a2:	b298      	uxth	r0, r3
 80053a4:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <display_move+0x234>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	18d3      	adds	r3, r2, r3
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4919      	ldr	r1, [pc, #100]	; (8005418 <display_move+0x238>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	9202      	str	r2, [sp, #8]
 80053b8:	2210      	movs	r2, #16
 80053ba:	9201      	str	r2, [sp, #4]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	000a      	movs	r2, r1
 80053c2:	21c8      	movs	r1, #200	; 0xc8
 80053c4:	f7fe fefc 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(65*currentScrollIndex + 25,200,  YELLOW, BLUE, currDisplay->selection[currentSelectIndex], 16, 0);
 80053c8:	4b16      	ldr	r3, [pc, #88]	; (8005424 <display_move+0x244>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	1c1a      	adds	r2, r3, #0
 80053d0:	0192      	lsls	r2, r2, #6
 80053d2:	18d3      	adds	r3, r2, r3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3319      	adds	r3, #25
 80053d8:	b298      	uxth	r0, r3
 80053da:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <display_move+0x234>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	4b0e      	ldr	r3, [pc, #56]	; (800541c <display_move+0x23c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	18d3      	adds	r3, r2, r3
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	490b      	ldr	r1, [pc, #44]	; (8005418 <display_move+0x238>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	9202      	str	r2, [sp, #8]
 80053f0:	2210      	movs	r2, #16
 80053f2:	9201      	str	r2, [sp, #4]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	231f      	movs	r3, #31
 80053f8:	000a      	movs	r2, r1
 80053fa:	21c8      	movs	r1, #200	; 0xc8
 80053fc:	f7fe fee0 	bl	80041c0 <LCD_DrawString>
	}
	currentSelectIndex = selectIndex;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <display_move+0x23c>)
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	601a      	str	r2, [r3, #0]
	currentScrollIndex = scrollIndex;
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <display_move+0x244>)
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]
}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	b008      	add	sp, #32
 8005412:	bd80      	pop	{r7, pc}
 8005414:	200012fc 	.word	0x200012fc
 8005418:	0000ffe0 	.word	0x0000ffe0
 800541c:	2000013c 	.word	0x2000013c
 8005420:	20000144 	.word	0x20000144
 8005424:	20000140 	.word	0x20000140

08005428 <display_select>:

void display_select(int selectIndex) {
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af04      	add	r7, sp, #16
 800542e:	6078      	str	r0, [r7, #4]
	//selection cases of where to go
	//highlight selected choice in red
    LCD_DrawString(65*currentScrollIndex + 25,200,  YELLOW, RED, currDisplay->selection[currentSelectIndex], 16, 0);
 8005430:	4b47      	ldr	r3, [pc, #284]	; (8005550 <display_select+0x128>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	1c1a      	adds	r2, r3, #0
 8005438:	0192      	lsls	r2, r2, #6
 800543a:	18d3      	adds	r3, r2, r3
 800543c:	b29b      	uxth	r3, r3
 800543e:	3319      	adds	r3, #25
 8005440:	b298      	uxth	r0, r3
 8005442:	4b44      	ldr	r3, [pc, #272]	; (8005554 <display_select+0x12c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	4b43      	ldr	r3, [pc, #268]	; (8005558 <display_select+0x130>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	18d3      	adds	r3, r2, r3
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	22f8      	movs	r2, #248	; 0xf8
 8005454:	0212      	lsls	r2, r2, #8
 8005456:	4c41      	ldr	r4, [pc, #260]	; (800555c <display_select+0x134>)
 8005458:	2100      	movs	r1, #0
 800545a:	9102      	str	r1, [sp, #8]
 800545c:	2110      	movs	r1, #16
 800545e:	9101      	str	r1, [sp, #4]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	0013      	movs	r3, r2
 8005464:	0022      	movs	r2, r4
 8005466:	21c8      	movs	r1, #200	; 0xc8
 8005468:	f7fe feaa 	bl	80041c0 <LCD_DrawString>
    lastPressed = selectIndex;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <display_select+0x138>)
 8005472:	701a      	strb	r2, [r3, #0]

    if((currentSelectIndex == 0) && (currDisplay->identity != 'h'))
 8005474:	4b38      	ldr	r3, [pc, #224]	; (8005558 <display_select+0x130>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d113      	bne.n	80054a4 <display_select+0x7c>
 800547c:	4b35      	ldr	r3, [pc, #212]	; (8005554 <display_select+0x12c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	791b      	ldrb	r3, [r3, #4]
 8005482:	2b68      	cmp	r3, #104	; 0x68
 8005484:	d00e      	beq.n	80054a4 <display_select+0x7c>
    {//Tune mode is selected so go to tune display
    	currDisplay = currDisplay->backout;
 8005486:	4b33      	ldr	r3, [pc, #204]	; (8005554 <display_select+0x12c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	4b31      	ldr	r3, [pc, #196]	; (8005554 <display_select+0x12c>)
 800548e:	601a      	str	r2, [r3, #0]
    	LCD_Clear(BLUE);
 8005490:	201f      	movs	r0, #31
 8005492:	f7fe fcbf 	bl	8003e14 <LCD_Clear>
    	resetSel();
 8005496:	f000 f865 	bl	8005564 <resetSel>
    	currDisplay->ttl();
 800549a:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <display_select+0x12c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4798      	blx	r3
    	{
    		child->ttl();
    		LCD_DrawString(65*selectIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
    	}
    }
}
 80054a2:	e050      	b.n	8005546 <display_select+0x11e>
    else if(currDisplay->childsel != NULL)
 80054a4:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <display_select+0x12c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d04b      	beq.n	8005546 <display_select+0x11e>
    	struct display * child = currDisplay->childsel;
 80054ae:	4b29      	ldr	r3, [pc, #164]	; (8005554 <display_select+0x12c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	60fb      	str	r3, [r7, #12]
    	if(currDisplay->identity == 'h'){i = 0;}
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <display_select+0x12c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	791b      	ldrb	r3, [r3, #4]
 80054bc:	2b68      	cmp	r3, #104	; 0x68
 80054be:	d102      	bne.n	80054c6 <display_select+0x9e>
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	e008      	b.n	80054d8 <display_select+0xb0>
    		i = 1;
 80054c6:	2301      	movs	r3, #1
 80054c8:	60bb      	str	r3, [r7, #8]
    	while((i < currentSelectIndex)&&(child->nextsel != NULL))
 80054ca:	e005      	b.n	80054d8 <display_select+0xb0>
    		child = child->nextsel;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	60fb      	str	r3, [r7, #12]
    		i++;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60bb      	str	r3, [r7, #8]
    	while((i < currentSelectIndex)&&(child->nextsel != NULL))
 80054d8:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <display_select+0x130>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	da03      	bge.n	80054ea <display_select+0xc2>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <display_select+0xa4>
    	if(child->selectionmax > 0)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dd0c      	ble.n	800550c <display_select+0xe4>
    		currDisplay = child;
 80054f2:	4b18      	ldr	r3, [pc, #96]	; (8005554 <display_select+0x12c>)
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]
    		LCD_Clear(BLUE);
 80054f8:	201f      	movs	r0, #31
 80054fa:	f7fe fc8b 	bl	8003e14 <LCD_Clear>
    		currDisplay->ttl();
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <display_select+0x12c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4798      	blx	r3
    		resetSel();
 8005506:	f000 f82d 	bl	8005564 <resetSel>
}
 800550a:	e01c      	b.n	8005546 <display_select+0x11e>
    		child->ttl();
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4798      	blx	r3
    		LCD_DrawString(65*selectIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	b29b      	uxth	r3, r3
 8005516:	1c1a      	adds	r2, r3, #0
 8005518:	0192      	lsls	r2, r2, #6
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	3319      	adds	r3, #25
 8005520:	b298      	uxth	r0, r3
 8005522:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <display_select+0x12c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	18d3      	adds	r3, r2, r3
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	490a      	ldr	r1, [pc, #40]	; (800555c <display_select+0x134>)
 8005532:	2200      	movs	r2, #0
 8005534:	9202      	str	r2, [sp, #8]
 8005536:	2210      	movs	r2, #16
 8005538:	9201      	str	r2, [sp, #4]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2300      	movs	r3, #0
 800553e:	000a      	movs	r2, r1
 8005540:	21c8      	movs	r1, #200	; 0xc8
 8005542:	f7fe fe3d 	bl	80041c0 <LCD_DrawString>
}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b005      	add	sp, #20
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20000140 	.word	0x20000140
 8005554:	200012fc 	.word	0x200012fc
 8005558:	2000013c 	.word	0x2000013c
 800555c:	0000ffe0 	.word	0x0000ffe0
 8005560:	200000a8 	.word	0x200000a8

08005564 <resetSel>:
void resetSel()
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af04      	add	r7, sp, #16
	//LCD_Clear(BLUE);
	LCD_DrawString(25,200,  YELLOW, BLACK, (currDisplay->selection)[0], 16, 0);
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <resetSel+0x88>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	491f      	ldr	r1, [pc, #124]	; (80055f0 <resetSel+0x8c>)
 8005574:	2200      	movs	r2, #0
 8005576:	9202      	str	r2, [sp, #8]
 8005578:	2210      	movs	r2, #16
 800557a:	9201      	str	r2, [sp, #4]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2300      	movs	r3, #0
 8005580:	000a      	movs	r2, r1
 8005582:	21c8      	movs	r1, #200	; 0xc8
 8005584:	2019      	movs	r0, #25
 8005586:	f7fe fe1b 	bl	80041c0 <LCD_DrawString>
	for (int i = 1; i < currDisplay->scrollmax; i++) {
 800558a:	2301      	movs	r3, #1
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	e01c      	b.n	80055ca <resetSel+0x66>
			LCD_DrawString(65*i + 25,200,  YELLOW, BLUE, (currDisplay->selection)[i], 16, 0);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	b29b      	uxth	r3, r3
 8005594:	1c1a      	adds	r2, r3, #0
 8005596:	0192      	lsls	r2, r2, #6
 8005598:	18d3      	adds	r3, r2, r3
 800559a:	b29b      	uxth	r3, r3
 800559c:	3319      	adds	r3, #25
 800559e:	b298      	uxth	r0, r3
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <resetSel+0x88>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	18d3      	adds	r3, r2, r3
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4910      	ldr	r1, [pc, #64]	; (80055f0 <resetSel+0x8c>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	9202      	str	r2, [sp, #8]
 80055b4:	2210      	movs	r2, #16
 80055b6:	9201      	str	r2, [sp, #4]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	231f      	movs	r3, #31
 80055bc:	000a      	movs	r2, r1
 80055be:	21c8      	movs	r1, #200	; 0xc8
 80055c0:	f7fe fdfe 	bl	80041c0 <LCD_DrawString>
	for (int i = 1; i < currDisplay->scrollmax; i++) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <resetSel+0x88>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	dbdc      	blt.n	8005590 <resetSel+0x2c>
		}
	currentScrollIndex = 0;
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <resetSel+0x90>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
	currentSelectIndex = 0;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <resetSel+0x94>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	200012fc 	.word	0x200012fc
 80055f0:	0000ffe0 	.word	0x0000ffe0
 80055f4:	20000140 	.word	0x20000140
 80055f8:	2000013c 	.word	0x2000013c

080055fc <Infomode>:
void Infomode()
{//Info mode that displays product usage and info
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af04      	add	r7, sp, #16
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Info will be displayed", 16, 0);
 8005602:	4a07      	ldr	r2, [pc, #28]	; (8005620 <Infomode+0x24>)
 8005604:	2300      	movs	r3, #0
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	2310      	movs	r3, #16
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <Infomode+0x28>)
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	231f      	movs	r3, #31
 8005612:	2132      	movs	r1, #50	; 0x32
 8005614:	2019      	movs	r0, #25
 8005616:	f7fe fdd3 	bl	80041c0 <LCD_DrawString>
	//currently nothing is displayed for now
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	0000ffe0 	.word	0x0000ffe0
 8005624:	0800e330 	.word	0x0800e330

08005628 <Manualmode>:
void Manualmode()
{ //display manual mode
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af04      	add	r7, sp, #16
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Manually Control drill", 16, 0);
 800562e:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <Manualmode+0x3c>)
 8005630:	2300      	movs	r3, #0
 8005632:	9302      	str	r3, [sp, #8]
 8005634:	2310      	movs	r3, #16
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <Manualmode+0x40>)
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	231f      	movs	r3, #31
 800563e:	2132      	movs	r1, #50	; 0x32
 8005640:	2019      	movs	r0, #25
 8005642:	f7fe fdbd 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(25 ,75,  YELLOW, BLUE,"Re-String Purpose", 16, 0);
 8005646:	4a07      	ldr	r2, [pc, #28]	; (8005664 <Manualmode+0x3c>)
 8005648:	2300      	movs	r3, #0
 800564a:	9302      	str	r3, [sp, #8]
 800564c:	2310      	movs	r3, #16
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <Manualmode+0x44>)
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	231f      	movs	r3, #31
 8005656:	214b      	movs	r1, #75	; 0x4b
 8005658:	2019      	movs	r0, #25
 800565a:	f7fe fdb1 	bl	80041c0 <LCD_DrawString>

}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	0000ffe0 	.word	0x0000ffe0
 8005668:	0800e348 	.word	0x0800e348
 800566c:	0800e360 	.word	0x0800e360

08005670 <manualRotate>:

void manualRotate()
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
	stepperMotor(currentSelectIndex, 7500, 90, 1);
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <manualRotate+0x18>)
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	4904      	ldr	r1, [pc, #16]	; (800568c <manualRotate+0x1c>)
 800567a:	2301      	movs	r3, #1
 800567c:	225a      	movs	r2, #90	; 0x5a
 800567e:	f000 f817 	bl	80056b0 <stepperMotor>
}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	2000013c 	.word	0x2000013c
 800568c:	00001d4c 	.word	0x00001d4c

08005690 <autoRotate>:
void autoRotate()
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
	stepperMotor(currentSelectIndex, 7500, 90, 2);
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <autoRotate+0x18>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	4904      	ldr	r1, [pc, #16]	; (80056ac <autoRotate+0x1c>)
 800569a:	2302      	movs	r3, #2
 800569c:	225a      	movs	r2, #90	; 0x5a
 800569e:	f000 f807 	bl	80056b0 <stepperMotor>
}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	2000013c 	.word	0x2000013c
 80056ac:	00001d4c 	.word	0x00001d4c

080056b0 <stepperMotor>:
void stepperMotor(int direction, int per, int angle, int mode)
{// stepper motor control
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
	if(direction == 1) // directional change
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d107      	bne.n	80056d4 <stepperMotor+0x24>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	01db      	lsls	r3, r3, #7
 80056c8:	483c      	ldr	r0, [pc, #240]	; (80057bc <stepperMotor+0x10c>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	0019      	movs	r1, r3
 80056ce:	f001 fe34 	bl	800733a <HAL_GPIO_WritePin>
 80056d2:	e006      	b.n	80056e2 <stepperMotor+0x32>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	01db      	lsls	r3, r3, #7
 80056d8:	4838      	ldr	r0, [pc, #224]	; (80057bc <stepperMotor+0x10c>)
 80056da:	2201      	movs	r2, #1
 80056dc:	0019      	movs	r1, r3
 80056de:	f001 fe2c 	bl	800733a <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //motor Enable
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	4835      	ldr	r0, [pc, #212]	; (80057bc <stepperMotor+0x10c>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	0019      	movs	r1, r3
 80056ec:	f001 fe25 	bl	800733a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); //Boost Enable
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4832      	ldr	r0, [pc, #200]	; (80057c0 <stepperMotor+0x110>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	0019      	movs	r1, r3
 80056fa:	f001 fe1e 	bl	800733a <HAL_GPIO_WritePin>
	//change_pwm(per);// this is to change pwm signal in case we want to speed or low down motore
	// change_pwm might not even be used
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);//seting motor to full drive
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	482f      	ldr	r0, [pc, #188]	; (80057c0 <stepperMotor+0x110>)
 8005704:	2200      	movs	r2, #0
 8005706:	0019      	movs	r1, r3
 8005708:	f001 fe17 	bl	800733a <HAL_GPIO_WritePin>

	if(mode == 1) //Manual stepper rotation
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d114      	bne.n	800573c <stepperMotor+0x8c>
	{startmotor();
 8005712:	f7ff fb8d 	bl	8004e30 <startmotor>
	while(updateToggleHistory(5) | updateToggleHistory(7))
 8005716:	e003      	b.n	8005720 <stepperMotor+0x70>
	{//while trigger button is being pressed, currently mapped to selection button for testing
		nano_wait(5000000);
 8005718:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <stepperMotor+0x114>)
 800571a:	0018      	movs	r0, r3
 800571c:	f7fe f948 	bl	80039b0 <nano_wait>
	while(updateToggleHistory(5) | updateToggleHistory(7))
 8005720:	2005      	movs	r0, #5
 8005722:	f000 f903 	bl	800592c <updateToggleHistory>
 8005726:	0003      	movs	r3, r0
 8005728:	001c      	movs	r4, r3
 800572a:	2007      	movs	r0, #7
 800572c:	f000 f8fe 	bl	800592c <updateToggleHistory>
 8005730:	0003      	movs	r3, r0
 8005732:	4323      	orrs	r3, r4
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1ee      	bne.n	8005718 <stepperMotor+0x68>
 800573a:	e032      	b.n	80057a2 <stepperMotor+0xf2>

	}
	}
	else //Angular precise stepper movements
		{
		uint32_t timemotor = per* angle /10000/1.8*3.95; //period * number of steps(angle) / 10000 / 1.8degrees per step * 1.25
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4353      	muls	r3, r2
 8005742:	4921      	ldr	r1, [pc, #132]	; (80057c8 <stepperMotor+0x118>)
 8005744:	0018      	movs	r0, r3
 8005746:	f7fa fd67 	bl	8000218 <__divsi3>
 800574a:	0003      	movs	r3, r0
 800574c:	0018      	movs	r0, r3
 800574e:	f7fd fa2f 	bl	8002bb0 <__aeabi_i2d>
 8005752:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <stepperMotor+0x11c>)
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <stepperMotor+0x120>)
 8005756:	f7fc f90f 	bl	8001978 <__aeabi_ddiv>
 800575a:	0002      	movs	r2, r0
 800575c:	000b      	movs	r3, r1
 800575e:	0010      	movs	r0, r2
 8005760:	0019      	movs	r1, r3
 8005762:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <stepperMotor+0x124>)
 8005764:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <stepperMotor+0x128>)
 8005766:	f7fc fbef 	bl	8001f48 <__aeabi_dmul>
 800576a:	0002      	movs	r2, r0
 800576c:	000b      	movs	r3, r1
 800576e:	0010      	movs	r0, r2
 8005770:	0019      	movs	r1, r3
 8005772:	f7fa fe8f 	bl	8000494 <__aeabi_d2uiz>
 8005776:	0003      	movs	r3, r0
 8005778:	61bb      	str	r3, [r7, #24]
		startmotor();
 800577a:	f7ff fb59 	bl	8004e30 <startmotor>
		uint32_t motorstarttime = HAL_GetTick();
 800577e:	f000 fc5d 	bl	800603c <HAL_GetTick>
 8005782:	0003      	movs	r3, r0
 8005784:	617b      	str	r3, [r7, #20]
		for(int i =0; i < timemotor; i++)
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e006      	b.n	800579a <stepperMotor+0xea>
		{
			nano_wait(6000000);
 800578c:	4b13      	ldr	r3, [pc, #76]	; (80057dc <stepperMotor+0x12c>)
 800578e:	0018      	movs	r0, r3
 8005790:	f7fe f90e 	bl	80039b0 <nano_wait>
		for(int i =0; i < timemotor; i++)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d8f4      	bhi.n	800578c <stepperMotor+0xdc>
		//{//while trigger is pressed and angle time is not exceeded, continue running the motor
		//}
		}

	//stop motor
	stopmotor();
 80057a2:	f7ff fb51 	bl	8004e48 <stopmotor>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); //Boost Disable
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4805      	ldr	r0, [pc, #20]	; (80057c0 <stepperMotor+0x110>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	0019      	movs	r1, r3
 80057b0:	f001 fdc3 	bl	800733a <HAL_GPIO_WritePin>
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b009      	add	sp, #36	; 0x24
 80057ba:	bd90      	pop	{r4, r7, pc}
 80057bc:	48000400 	.word	0x48000400
 80057c0:	48000800 	.word	0x48000800
 80057c4:	004c4b40 	.word	0x004c4b40
 80057c8:	00002710 	.word	0x00002710
 80057cc:	cccccccd 	.word	0xcccccccd
 80057d0:	3ffccccc 	.word	0x3ffccccc
 80057d4:	9999999a 	.word	0x9999999a
 80057d8:	400f9999 	.word	0x400f9999
 80057dc:	005b8d80 	.word	0x005b8d80

080057e0 <Tunemode>:
void Tunemode() {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af04      	add	r7, sp, #16
	//introduce scroll index which represents the current index in the list of tune
	/*currentSelectIndex is just representing the index respective to which of current three selection
	on the screen is being highlighted */
	//display peg diagram
	LCD_DrawString(95 ,25,  YELLOW, BLUE,"-----", 16, 0);
 80057e6:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <Tunemode+0xb4>)
 80057e8:	2300      	movs	r3, #0
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	2310      	movs	r3, #16
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	4b29      	ldr	r3, [pc, #164]	; (8005898 <Tunemode+0xb8>)
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	231f      	movs	r3, #31
 80057f6:	2119      	movs	r1, #25
 80057f8:	205f      	movs	r0, #95	; 0x5f
 80057fa:	f7fe fce1 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(60 ,40,  YELLOW, BLUE,"3 - |    | - 4", 16, 0);
 80057fe:	4a25      	ldr	r2, [pc, #148]	; (8005894 <Tunemode+0xb4>)
 8005800:	2300      	movs	r3, #0
 8005802:	9302      	str	r3, [sp, #8]
 8005804:	2310      	movs	r3, #16
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	4b24      	ldr	r3, [pc, #144]	; (800589c <Tunemode+0xbc>)
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	231f      	movs	r3, #31
 800580e:	2128      	movs	r1, #40	; 0x28
 8005810:	203c      	movs	r0, #60	; 0x3c
 8005812:	f7fe fcd5 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"2 - |    | - 5", 16, 0);
 8005816:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <Tunemode+0xb4>)
 8005818:	2300      	movs	r3, #0
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	2310      	movs	r3, #16
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	4b1f      	ldr	r3, [pc, #124]	; (80058a0 <Tunemode+0xc0>)
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	231f      	movs	r3, #31
 8005826:	213c      	movs	r1, #60	; 0x3c
 8005828:	203c      	movs	r0, #60	; 0x3c
 800582a:	f7fe fcc9 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(60 ,80,  YELLOW, BLUE,"1 - |    | - 6", 16, 0);
 800582e:	4a19      	ldr	r2, [pc, #100]	; (8005894 <Tunemode+0xb4>)
 8005830:	2300      	movs	r3, #0
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	2310      	movs	r3, #16
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <Tunemode+0xc4>)
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	231f      	movs	r3, #31
 800583e:	2150      	movs	r1, #80	; 0x50
 8005840:	203c      	movs	r0, #60	; 0x3c
 8005842:	f7fe fcbd 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(95 ,100,  YELLOW, BLUE,"-----", 16, 0);
 8005846:	4a13      	ldr	r2, [pc, #76]	; (8005894 <Tunemode+0xb4>)
 8005848:	2300      	movs	r3, #0
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	2310      	movs	r3, #16
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <Tunemode+0xb8>)
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	231f      	movs	r3, #31
 8005856:	2164      	movs	r1, #100	; 0x64
 8005858:	205f      	movs	r0, #95	; 0x5f
 800585a:	f7fe fcb1 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(100 ,115,  YELLOW, BLUE,"||||", 16, 0);
 800585e:	4a0d      	ldr	r2, [pc, #52]	; (8005894 <Tunemode+0xb4>)
 8005860:	2300      	movs	r3, #0
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	2310      	movs	r3, #16
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <Tunemode+0xc8>)
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	231f      	movs	r3, #31
 800586e:	2173      	movs	r1, #115	; 0x73
 8005870:	2064      	movs	r0, #100	; 0x64
 8005872:	f7fe fca5 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(100 ,130,  YELLOW, BLUE,"||||", 16, 0);
 8005876:	4a07      	ldr	r2, [pc, #28]	; (8005894 <Tunemode+0xb4>)
 8005878:	2300      	movs	r3, #0
 800587a:	9302      	str	r3, [sp, #8]
 800587c:	2310      	movs	r3, #16
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <Tunemode+0xc8>)
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	231f      	movs	r3, #31
 8005886:	2182      	movs	r1, #130	; 0x82
 8005888:	2064      	movs	r0, #100	; 0x64
 800588a:	f7fe fc99 	bl	80041c0 <LCD_DrawString>
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	0000ffe0 	.word	0x0000ffe0
 8005898:	0800e374 	.word	0x0800e374
 800589c:	0800e37c 	.word	0x0800e37c
 80058a0:	0800e38c 	.word	0x0800e38c
 80058a4:	0800e39c 	.word	0x0800e39c
 80058a8:	0800e3ac 	.word	0x0800e3ac

080058ac <pegDisplay>:

void pegDisplay()
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af04      	add	r7, sp, #16
	LCD_DrawString(60 ,40,  YELLOW, BLUE,pegsel[currentSelectIndex-1], 16, 0);
 80058b2:	4b19      	ldr	r3, [pc, #100]	; (8005918 <pegDisplay+0x6c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	1e5a      	subs	r2, r3, #1
 80058b8:	4b18      	ldr	r3, [pc, #96]	; (800591c <pegDisplay+0x70>)
 80058ba:	0092      	lsls	r2, r2, #2
 80058bc:	58d3      	ldr	r3, [r2, r3]
 80058be:	4918      	ldr	r1, [pc, #96]	; (8005920 <pegDisplay+0x74>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	9202      	str	r2, [sp, #8]
 80058c4:	2210      	movs	r2, #16
 80058c6:	9201      	str	r2, [sp, #4]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	231f      	movs	r3, #31
 80058cc:	000a      	movs	r2, r1
 80058ce:	2128      	movs	r1, #40	; 0x28
 80058d0:	203c      	movs	r0, #60	; 0x3c
 80058d2:	f7fe fc75 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"Play open", 16, 0);
 80058d6:	4a12      	ldr	r2, [pc, #72]	; (8005920 <pegDisplay+0x74>)
 80058d8:	2300      	movs	r3, #0
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	2310      	movs	r3, #16
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	4b10      	ldr	r3, [pc, #64]	; (8005924 <pegDisplay+0x78>)
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	231f      	movs	r3, #31
 80058e6:	213c      	movs	r1, #60	; 0x3c
 80058e8:	203c      	movs	r0, #60	; 0x3c
 80058ea:	f7fe fc69 	bl	80041c0 <LCD_DrawString>
	LCD_DrawString(140 ,60,  YELLOW, BLUE, note[currentSelectIndex-1], 16, 0);
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <pegDisplay+0x6c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	1e5a      	subs	r2, r3, #1
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <pegDisplay+0x7c>)
 80058f6:	0092      	lsls	r2, r2, #2
 80058f8:	58d3      	ldr	r3, [r2, r3]
 80058fa:	4909      	ldr	r1, [pc, #36]	; (8005920 <pegDisplay+0x74>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	9202      	str	r2, [sp, #8]
 8005900:	2210      	movs	r2, #16
 8005902:	9201      	str	r2, [sp, #4]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	231f      	movs	r3, #31
 8005908:	000a      	movs	r2, r1
 800590a:	213c      	movs	r1, #60	; 0x3c
 800590c:	208c      	movs	r0, #140	; 0x8c
 800590e:	f7fe fc57 	bl	80041c0 <LCD_DrawString>
	//currentPeg = currentSelectIndex-1;
}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	2000013c 	.word	0x2000013c
 800591c:	20000078 	.word	0x20000078
 8005920:	0000ffe0 	.word	0x0000ffe0
 8005924:	0800e3b4 	.word	0x0800e3b4
 8005928:	20000090 	.word	0x20000090

0800592c <updateToggleHistory>:


uint8_t updateToggleHistory(uint8_t button) {
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	0002      	movs	r2, r0
 8005934:	1dfb      	adds	r3, r7, #7
 8005936:	701a      	strb	r2, [r3, #0]
	uint8_t prev = pressHistory[button - 2];
 8005938:	1dfb      	adds	r3, r7, #7
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	1e9a      	subs	r2, r3, #2
 800593e:	260f      	movs	r6, #15
 8005940:	19bb      	adds	r3, r7, r6
 8005942:	492c      	ldr	r1, [pc, #176]	; (80059f4 <updateToggleHistory+0xc8>)
 8005944:	5c8a      	ldrb	r2, [r1, r2]
 8005946:	701a      	strb	r2, [r3, #0]
	uint8_t new = HAL_GPIO_ReadPin(GPIOB, 1 << (button));
 8005948:	1dfb      	adds	r3, r7, #7
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2201      	movs	r2, #1
 800594e:	409a      	lsls	r2, r3
 8005950:	0013      	movs	r3, r2
 8005952:	b29b      	uxth	r3, r3
 8005954:	250e      	movs	r5, #14
 8005956:	197c      	adds	r4, r7, r5
 8005958:	4a27      	ldr	r2, [pc, #156]	; (80059f8 <updateToggleHistory+0xcc>)
 800595a:	0019      	movs	r1, r3
 800595c:	0010      	movs	r0, r2
 800595e:	f001 fccf 	bl	8007300 <HAL_GPIO_ReadPin>
 8005962:	0003      	movs	r3, r0
 8005964:	7023      	strb	r3, [r4, #0]
	pressHistory[button - 2] = new;
 8005966:	1dfb      	adds	r3, r7, #7
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	3b02      	subs	r3, #2
 800596c:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <updateToggleHistory+0xc8>)
 800596e:	0028      	movs	r0, r5
 8005970:	1839      	adds	r1, r7, r0
 8005972:	7809      	ldrb	r1, [r1, #0]
 8005974:	54d1      	strb	r1, [r2, r3]
	if (lastButton == button && (prev == 1 || new == 1)) return 0;
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <updateToggleHistory+0xd0>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	1dfa      	adds	r2, r7, #7
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d109      	bne.n	8005996 <updateToggleHistory+0x6a>
 8005982:	19bb      	adds	r3, r7, r6
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d003      	beq.n	8005992 <updateToggleHistory+0x66>
 800598a:	183b      	adds	r3, r7, r0
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <updateToggleHistory+0x6a>
 8005992:	2300      	movs	r3, #0
 8005994:	e029      	b.n	80059ea <updateToggleHistory+0xbe>
	else if (prev == 1 && new == 1) {
 8005996:	230f      	movs	r3, #15
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d109      	bne.n	80059b4 <updateToggleHistory+0x88>
 80059a0:	230e      	movs	r3, #14
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d104      	bne.n	80059b4 <updateToggleHistory+0x88>
		lastButton = button;
 80059aa:	4b14      	ldr	r3, [pc, #80]	; (80059fc <updateToggleHistory+0xd0>)
 80059ac:	1dfa      	adds	r2, r7, #7
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e00c      	b.n	80059ce <updateToggleHistory+0xa2>
	} else if (prev == 0 && new == 0){
 80059b4:	230f      	movs	r3, #15
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <updateToggleHistory+0xa2>
 80059be:	230e      	movs	r3, #14
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <updateToggleHistory+0xa2>
		lastButton = -1;
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <updateToggleHistory+0xd0>)
 80059ca:	22ff      	movs	r2, #255	; 0xff
 80059cc:	701a      	strb	r2, [r3, #0]
	}

	return prev && new;
 80059ce:	230f      	movs	r3, #15
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <updateToggleHistory+0xba>
 80059d8:	230e      	movs	r3, #14
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <updateToggleHistory+0xba>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <updateToggleHistory+0xbc>
 80059e6:	2300      	movs	r3, #0
 80059e8:	b2db      	uxtb	r3, r3


  /* USER CODE END 3 */
}
 80059ea:	0018      	movs	r0, r3
 80059ec:	46bd      	mov	sp, r7
 80059ee:	b005      	add	sp, #20
 80059f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	20000158 	.word	0x20000158
 80059f8:	48000400 	.word	0x48000400
 80059fc:	200000a9 	.word	0x200000a9

08005a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <HAL_MspInit+0x44>)
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <HAL_MspInit+0x44>)
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	619a      	str	r2, [r3, #24]
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <HAL_MspInit+0x44>)
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2201      	movs	r2, #1
 8005a18:	4013      	ands	r3, r2
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_MspInit+0x44>)
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_MspInit+0x44>)
 8005a24:	2180      	movs	r1, #128	; 0x80
 8005a26:	0549      	lsls	r1, r1, #21
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	61da      	str	r2, [r3, #28]
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_MspInit+0x44>)
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	055b      	lsls	r3, r3, #21
 8005a34:	4013      	ands	r3, r2
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b002      	add	sp, #8
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	40021000 	.word	0x40021000

08005a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b08b      	sub	sp, #44	; 0x2c
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a50:	2414      	movs	r4, #20
 8005a52:	193b      	adds	r3, r7, r4
 8005a54:	0018      	movs	r0, r3
 8005a56:	2314      	movs	r3, #20
 8005a58:	001a      	movs	r2, r3
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	f003 fe74 	bl	8009748 <memset>
  if(hadc->Instance==ADC1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <HAL_ADC_MspInit+0xf4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d163      	bne.n	8005b32 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a6a:	4b35      	ldr	r3, [pc, #212]	; (8005b40 <HAL_ADC_MspInit+0xf8>)
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	4b34      	ldr	r3, [pc, #208]	; (8005b40 <HAL_ADC_MspInit+0xf8>)
 8005a70:	2180      	movs	r1, #128	; 0x80
 8005a72:	0089      	lsls	r1, r1, #2
 8005a74:	430a      	orrs	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]
 8005a78:	4b31      	ldr	r3, [pc, #196]	; (8005b40 <HAL_ADC_MspInit+0xf8>)
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4013      	ands	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a86:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <HAL_ADC_MspInit+0xf8>)
 8005a88:	695a      	ldr	r2, [r3, #20]
 8005a8a:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <HAL_ADC_MspInit+0xf8>)
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	0289      	lsls	r1, r1, #10
 8005a90:	430a      	orrs	r2, r1
 8005a92:	615a      	str	r2, [r3, #20]
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <HAL_ADC_MspInit+0xf8>)
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	029b      	lsls	r3, r3, #10
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005aa2:	193b      	adds	r3, r7, r4
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005aa8:	193b      	adds	r3, r7, r4
 8005aaa:	2203      	movs	r2, #3
 8005aac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aae:	193b      	adds	r3, r7, r4
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab4:	193a      	adds	r2, r7, r4
 8005ab6:	2390      	movs	r3, #144	; 0x90
 8005ab8:	05db      	lsls	r3, r3, #23
 8005aba:	0011      	movs	r1, r2
 8005abc:	0018      	movs	r0, r3
 8005abe:	f001 faa7 	bl	8007010 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8005ac2:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005ac4:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <HAL_ADC_MspInit+0x100>)
 8005ac6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ada:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005adc:	2280      	movs	r2, #128	; 0x80
 8005ade:	0052      	lsls	r2, r2, #1
 8005ae0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ae2:	4b18      	ldr	r3, [pc, #96]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005ae4:	2280      	movs	r2, #128	; 0x80
 8005ae6:	00d2      	lsls	r2, r2, #3
 8005ae8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005aea:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005aec:	2220      	movs	r2, #32
 8005aee:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005af0:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005af8:	0018      	movs	r0, r3
 8005afa:	f001 f89b 	bl	8006c34 <HAL_DMA_Init>
 8005afe:	1e03      	subs	r3, r0, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8005b02:	f7ff f9b7 	bl	8004e74 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8005b06:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <HAL_ADC_MspInit+0x104>)
 8005b08:	23a8      	movs	r3, #168	; 0xa8
 8005b0a:	58d3      	ldr	r3, [r2, r3]
 8005b0c:	490f      	ldr	r1, [pc, #60]	; (8005b4c <HAL_ADC_MspInit+0x104>)
 8005b0e:	220f      	movs	r2, #15
 8005b10:	4393      	bics	r3, r2
 8005b12:	22a8      	movs	r2, #168	; 0xa8
 8005b14:	508b      	str	r3, [r1, r2]
 8005b16:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <HAL_ADC_MspInit+0x104>)
 8005b18:	23a8      	movs	r3, #168	; 0xa8
 8005b1a:	58d3      	ldr	r3, [r2, r3]
 8005b1c:	490b      	ldr	r1, [pc, #44]	; (8005b4c <HAL_ADC_MspInit+0x104>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	22a8      	movs	r2, #168	; 0xa8
 8005b24:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_ADC_MspInit+0xfc>)
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b00b      	add	sp, #44	; 0x2c
 8005b38:	bd90      	pop	{r4, r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	40012400 	.word	0x40012400
 8005b40:	40021000 	.word	0x40021000
 8005b44:	20001278 	.word	0x20001278
 8005b48:	40020008 	.word	0x40020008
 8005b4c:	40020000 	.word	0x40020000

08005b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b08b      	sub	sp, #44	; 0x2c
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b58:	2414      	movs	r4, #20
 8005b5a:	193b      	adds	r3, r7, r4
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	2314      	movs	r3, #20
 8005b60:	001a      	movs	r2, r3
 8005b62:	2100      	movs	r1, #0
 8005b64:	f003 fdf0 	bl	8009748 <memset>
  if(hi2c->Instance==I2C1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_I2C_MspInit+0x90>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d132      	bne.n	8005bd8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b72:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <HAL_I2C_MspInit+0x94>)
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_I2C_MspInit+0x94>)
 8005b78:	2180      	movs	r1, #128	; 0x80
 8005b7a:	02c9      	lsls	r1, r1, #11
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <HAL_I2C_MspInit+0x94>)
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	02db      	lsls	r3, r3, #11
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005b8e:	193b      	adds	r3, r7, r4
 8005b90:	22c0      	movs	r2, #192	; 0xc0
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b96:	0021      	movs	r1, r4
 8005b98:	187b      	adds	r3, r7, r1
 8005b9a:	2212      	movs	r2, #18
 8005b9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9e:	187b      	adds	r3, r7, r1
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	2201      	movs	r2, #1
 8005bae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb0:	187b      	adds	r3, r7, r1
 8005bb2:	4a0d      	ldr	r2, [pc, #52]	; (8005be8 <HAL_I2C_MspInit+0x98>)
 8005bb4:	0019      	movs	r1, r3
 8005bb6:	0010      	movs	r0, r2
 8005bb8:	f001 fa2a 	bl	8007010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005bbc:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_I2C_MspInit+0x94>)
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <HAL_I2C_MspInit+0x94>)
 8005bc2:	2180      	movs	r1, #128	; 0x80
 8005bc4:	0389      	lsls	r1, r1, #14
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	61da      	str	r2, [r3, #28]
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <HAL_I2C_MspInit+0x94>)
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	039b      	lsls	r3, r3, #14
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005bd8:	46c0      	nop			; (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b00b      	add	sp, #44	; 0x2c
 8005bde:	bd90      	pop	{r4, r7, pc}
 8005be0:	40005400 	.word	0x40005400
 8005be4:	40021000 	.word	0x40021000
 8005be8:	48000400 	.word	0x48000400

08005bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b08b      	sub	sp, #44	; 0x2c
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf4:	2414      	movs	r4, #20
 8005bf6:	193b      	adds	r3, r7, r4
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	2314      	movs	r3, #20
 8005bfc:	001a      	movs	r2, r3
 8005bfe:	2100      	movs	r1, #0
 8005c00:	f003 fda2 	bl	8009748 <memset>
  if(hspi->Instance==SPI1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <HAL_SPI_MspInit+0x90>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d132      	bne.n	8005c74 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <HAL_SPI_MspInit+0x94>)
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <HAL_SPI_MspInit+0x94>)
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	0149      	lsls	r1, r1, #5
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	619a      	str	r2, [r3, #24]
 8005c1c:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <HAL_SPI_MspInit+0x94>)
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	015b      	lsls	r3, r3, #5
 8005c24:	4013      	ands	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2a:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <HAL_SPI_MspInit+0x94>)
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <HAL_SPI_MspInit+0x94>)
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	0289      	lsls	r1, r1, #10
 8005c34:	430a      	orrs	r2, r1
 8005c36:	615a      	str	r2, [r3, #20]
 8005c38:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <HAL_SPI_MspInit+0x94>)
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8005c46:	0021      	movs	r1, r4
 8005c48:	187b      	adds	r3, r7, r1
 8005c4a:	22b0      	movs	r2, #176	; 0xb0
 8005c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4e:	187b      	adds	r3, r7, r1
 8005c50:	2202      	movs	r2, #2
 8005c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	2200      	movs	r2, #0
 8005c58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c5a:	187b      	adds	r3, r7, r1
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005c60:	187b      	adds	r3, r7, r1
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c66:	187a      	adds	r2, r7, r1
 8005c68:	2390      	movs	r3, #144	; 0x90
 8005c6a:	05db      	lsls	r3, r3, #23
 8005c6c:	0011      	movs	r1, r2
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f001 f9ce 	bl	8007010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005c74:	46c0      	nop			; (mov r8, r8)
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b00b      	add	sp, #44	; 0x2c
 8005c7a:	bd90      	pop	{r4, r7, pc}
 8005c7c:	40013000 	.word	0x40013000
 8005c80:	40021000 	.word	0x40021000

08005c84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	; (8005cbc <HAL_TIM_PWM_MspInit+0x38>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10d      	bne.n	8005cb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	0109      	lsls	r1, r1, #4
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	619a      	str	r2, [r3, #24]
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005ca6:	699a      	ldr	r2, [r3, #24]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b004      	add	sp, #16
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b089      	sub	sp, #36	; 0x24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ccc:	240c      	movs	r4, #12
 8005cce:	193b      	adds	r3, r7, r4
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	2314      	movs	r3, #20
 8005cd4:	001a      	movs	r2, r3
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	f003 fd36 	bl	8009748 <memset>
  if(htim->Instance==TIM1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIM_MspPostInit+0x78>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d125      	bne.n	8005d32 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce6:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <HAL_TIM_MspPostInit+0x7c>)
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <HAL_TIM_MspPostInit+0x7c>)
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	0289      	lsls	r1, r1, #10
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	615a      	str	r2, [r3, #20]
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <HAL_TIM_MspPostInit+0x7c>)
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005d02:	193b      	adds	r3, r7, r4
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	0052      	lsls	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d0a:	0021      	movs	r1, r4
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	2202      	movs	r2, #2
 8005d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d12:	187b      	adds	r3, r7, r1
 8005d14:	2200      	movs	r2, #0
 8005d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d18:	187b      	adds	r3, r7, r1
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005d1e:	187b      	adds	r3, r7, r1
 8005d20:	2202      	movs	r2, #2
 8005d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d24:	187a      	adds	r2, r7, r1
 8005d26:	2390      	movs	r3, #144	; 0x90
 8005d28:	05db      	lsls	r3, r3, #23
 8005d2a:	0011      	movs	r1, r2
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f001 f96f 	bl	8007010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b009      	add	sp, #36	; 0x24
 8005d38:	bd90      	pop	{r4, r7, pc}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40021000 	.word	0x40021000

08005d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d48:	e7fe      	b.n	8005d48 <NMI_Handler+0x4>

08005d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d4e:	e7fe      	b.n	8005d4e <HardFault_Handler+0x4>

08005d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005d54:	46c0      	nop			; (mov r8, r8)
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d68:	f000 f956 	bl	8006018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005d76:	2010      	movs	r0, #16
 8005d78:	f001 fafc 	bl	8007374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005d7c:	2020      	movs	r0, #32
 8005d7e:	f001 faf9 	bl	8007374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005d82:	2040      	movs	r0, #64	; 0x40
 8005d84:	f001 faf6 	bl	8007374 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005d88:	2080      	movs	r0, #128	; 0x80
 8005d8a:	f001 faf3 	bl	8007374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <DMA1_Ch1_IRQHandler+0x14>)
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f001 f830 	bl	8006e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	20001278 	.word	0x20001278

08005dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
	return 1;
 8005db0:	2301      	movs	r3, #1
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <_kill>:

int _kill(int pid, int sig)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005dc2:	f003 fc8d 	bl	80096e0 <__errno>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	2216      	movs	r2, #22
 8005dca:	601a      	str	r2, [r3, #0]
	return -1;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	425b      	negs	r3, r3
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <_exit>:

void _exit (int status)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005de0:	2301      	movs	r3, #1
 8005de2:	425a      	negs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	0011      	movs	r1, r2
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7ff ffe5 	bl	8005db8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005dee:	e7fe      	b.n	8005dee <_exit+0x16>

08005df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e00a      	b.n	8005e18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005e02:	e000      	b.n	8005e06 <_read+0x16>
 8005e04:	bf00      	nop
 8005e06:	0001      	movs	r1, r0
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	60ba      	str	r2, [r7, #8]
 8005e0e:	b2ca      	uxtb	r2, r1
 8005e10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	3301      	adds	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	dbf0      	blt.n	8005e02 <_read+0x12>
	}

return len;
 8005e20:	687b      	ldr	r3, [r7, #4]
}
 8005e22:	0018      	movs	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b006      	add	sp, #24
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e009      	b.n	8005e50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	60ba      	str	r2, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	0018      	movs	r0, r3
 8005e46:	e000      	b.n	8005e4a <_write+0x20>
 8005e48:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	dbf1      	blt.n	8005e3c <_write+0x12>
	}
	return len;
 8005e58:	687b      	ldr	r3, [r7, #4]
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b006      	add	sp, #24
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <_close>:

int _close(int file)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
	return -1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	425b      	negs	r3, r3
}
 8005e6e:	0018      	movs	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b002      	add	sp, #8
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	0192      	lsls	r2, r2, #6
 8005e86:	605a      	str	r2, [r3, #4]
	return 0;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b002      	add	sp, #8
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <_isatty>:

int _isatty(int file)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
	return 1;
 8005e9a:	2301      	movs	r3, #1
}
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
	return 0;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ec4:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <_sbrk+0x5c>)
 8005ec6:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <_sbrk+0x60>)
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ed0:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <_sbrk+0x64>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <_sbrk+0x64>)
 8005eda:	4a12      	ldr	r2, [pc, #72]	; (8005f24 <_sbrk+0x68>)
 8005edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <_sbrk+0x64>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	18d3      	adds	r3, r2, r3
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d207      	bcs.n	8005efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005eec:	f003 fbf8 	bl	80096e0 <__errno>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	220c      	movs	r2, #12
 8005ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	425b      	negs	r3, r3
 8005efa:	e009      	b.n	8005f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005efc:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <_sbrk+0x64>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f02:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <_sbrk+0x64>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	18d2      	adds	r2, r2, r3
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <_sbrk+0x64>)
 8005f0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	0018      	movs	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b006      	add	sp, #24
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20008000 	.word	0x20008000
 8005f1c:	00000400 	.word	0x00000400
 8005f20:	2000015c 	.word	0x2000015c
 8005f24:	20001318 	.word	0x20001318

08005f28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f34:	480d      	ldr	r0, [pc, #52]	; (8005f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f38:	480d      	ldr	r0, [pc, #52]	; (8005f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f3a:	490e      	ldr	r1, [pc, #56]	; (8005f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f3c:	4a0e      	ldr	r2, [pc, #56]	; (8005f78 <LoopForever+0xe>)
  movs r3, #0
 8005f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f40:	e002      	b.n	8005f48 <LoopCopyDataInit>

08005f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f46:	3304      	adds	r3, #4

08005f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f4c:	d3f9      	bcc.n	8005f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f4e:	4a0b      	ldr	r2, [pc, #44]	; (8005f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f50:	4c0b      	ldr	r4, [pc, #44]	; (8005f80 <LoopForever+0x16>)
  movs r3, #0
 8005f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f54:	e001      	b.n	8005f5a <LoopFillZerobss>

08005f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f58:	3204      	adds	r2, #4

08005f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f5c:	d3fb      	bcc.n	8005f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005f5e:	f7ff ffe3 	bl	8005f28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005f62:	f003 fbc3 	bl	80096ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f66:	f7fe f985 	bl	8004274 <main>

08005f6a <LoopForever>:

LoopForever:
    b LoopForever
 8005f6a:	e7fe      	b.n	8005f6a <LoopForever>
  ldr   r0, =_estack
 8005f6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f74:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8005f78:	0800f480 	.word	0x0800f480
  ldr r2, =_sbss
 8005f7c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8005f80:	20001314 	.word	0x20001314

08005f84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f84:	e7fe      	b.n	8005f84 <ADC1_COMP_IRQHandler>
	...

08005f88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f8c:	4b07      	ldr	r3, [pc, #28]	; (8005fac <HAL_Init+0x24>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_Init+0x24>)
 8005f92:	2110      	movs	r1, #16
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005f98:	2003      	movs	r0, #3
 8005f9a:	f000 f809 	bl	8005fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f9e:	f7ff fd2f 	bl	8005a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	40022000 	.word	0x40022000

08005fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fb0:	b590      	push	{r4, r7, lr}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fb8:	4b14      	ldr	r3, [pc, #80]	; (800600c <HAL_InitTick+0x5c>)
 8005fba:	681c      	ldr	r4, [r3, #0]
 8005fbc:	4b14      	ldr	r3, [pc, #80]	; (8006010 <HAL_InitTick+0x60>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	0019      	movs	r1, r3
 8005fc2:	23fa      	movs	r3, #250	; 0xfa
 8005fc4:	0098      	lsls	r0, r3, #2
 8005fc6:	f7fa f89d 	bl	8000104 <__udivsi3>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	0019      	movs	r1, r3
 8005fce:	0020      	movs	r0, r4
 8005fd0:	f7fa f898 	bl	8000104 <__udivsi3>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 fe1f 	bl	8006c1a <HAL_SYSTICK_Config>
 8005fdc:	1e03      	subs	r3, r0, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e00f      	b.n	8006004 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d80b      	bhi.n	8006002 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	2301      	movs	r3, #1
 8005fee:	425b      	negs	r3, r3
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 fdec 	bl	8006bd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_InitTick+0x64>)
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
}
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	b003      	add	sp, #12
 800600a:	bd90      	pop	{r4, r7, pc}
 800600c:	200000ac 	.word	0x200000ac
 8006010:	200000b4 	.word	0x200000b4
 8006014:	200000b0 	.word	0x200000b0

08006018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_IncTick+0x1c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	001a      	movs	r2, r3
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_IncTick+0x20>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	18d2      	adds	r2, r2, r3
 8006028:	4b03      	ldr	r3, [pc, #12]	; (8006038 <HAL_IncTick+0x20>)
 800602a:	601a      	str	r2, [r3, #0]
}
 800602c:	46c0      	nop			; (mov r8, r8)
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	200000b4 	.word	0x200000b4
 8006038:	20001300 	.word	0x20001300

0800603c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  return uwTick;
 8006040:	4b02      	ldr	r3, [pc, #8]	; (800604c <HAL_GetTick+0x10>)
 8006042:	681b      	ldr	r3, [r3, #0]
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	20001300 	.word	0x20001300

08006050 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006058:	230f      	movs	r3, #15
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e125      	b.n	80062ba <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2234      	movs	r2, #52	; 0x34
 8006080:	2100      	movs	r1, #0
 8006082:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	0018      	movs	r0, r3
 8006088:	f7ff fcde 	bl	8005a48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	2210      	movs	r2, #16
 8006092:	4013      	ands	r3, r2
 8006094:	d000      	beq.n	8006098 <HAL_ADC_Init+0x48>
 8006096:	e103      	b.n	80062a0 <HAL_ADC_Init+0x250>
 8006098:	230f      	movs	r3, #15
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d000      	beq.n	80060a4 <HAL_ADC_Init+0x54>
 80060a2:	e0fd      	b.n	80062a0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2204      	movs	r2, #4
 80060ac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80060ae:	d000      	beq.n	80060b2 <HAL_ADC_Init+0x62>
 80060b0:	e0f6      	b.n	80062a0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	4a83      	ldr	r2, [pc, #524]	; (80062c4 <HAL_ADC_Init+0x274>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	2202      	movs	r2, #2
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2203      	movs	r2, #3
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d112      	bne.n	80060f6 <HAL_ADC_Init+0xa6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	4013      	ands	r3, r2
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d009      	beq.n	80060f2 <HAL_ADC_Init+0xa2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	401a      	ands	r2, r3
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d101      	bne.n	80060f6 <HAL_ADC_Init+0xa6>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <HAL_ADC_Init+0xa8>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d116      	bne.n	800612a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2218      	movs	r2, #24
 8006104:	4393      	bics	r3, r2
 8006106:	0019      	movs	r1, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	0899      	lsrs	r1, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4964      	ldr	r1, [pc, #400]	; (80062c8 <HAL_ADC_Init+0x278>)
 8006136:	400a      	ands	r2, r1
 8006138:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7e1b      	ldrb	r3, [r3, #24]
 800613e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7e5b      	ldrb	r3, [r3, #25]
 8006144:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006146:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	7e9b      	ldrb	r3, [r3, #26]
 800614c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800614e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	2b01      	cmp	r3, #1
 8006156:	d002      	beq.n	800615e <HAL_ADC_Init+0x10e>
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	015b      	lsls	r3, r3, #5
 800615c:	e000      	b.n	8006160 <HAL_ADC_Init+0x110>
 800615e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006160:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006166:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d101      	bne.n	8006174 <HAL_ADC_Init+0x124>
 8006170:	2304      	movs	r3, #4
 8006172:	e000      	b.n	8006176 <HAL_ADC_Init+0x126>
 8006174:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8006176:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2124      	movs	r1, #36	; 0x24
 800617c:	5c5b      	ldrb	r3, [r3, r1]
 800617e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006180:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	4313      	orrs	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7edb      	ldrb	r3, [r3, #27]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d115      	bne.n	80061bc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	7e9b      	ldrb	r3, [r3, #26]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2280      	movs	r2, #128	; 0x80
 800619c:	0252      	lsls	r2, r2, #9
 800619e:	4313      	orrs	r3, r2
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	e00b      	b.n	80061bc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	2220      	movs	r2, #32
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b4:	2201      	movs	r2, #1
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	23c2      	movs	r3, #194	; 0xc2
 80061c2:	33ff      	adds	r3, #255	; 0xff
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d007      	beq.n	80061d8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80061d0:	4313      	orrs	r3, r2
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68d9      	ldr	r1, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	055b      	lsls	r3, r3, #21
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d01b      	beq.n	800622c <HAL_ADC_Init+0x1dc>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d017      	beq.n	800622c <HAL_ADC_Init+0x1dc>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	2b02      	cmp	r3, #2
 8006202:	d013      	beq.n	800622c <HAL_ADC_Init+0x1dc>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	2b03      	cmp	r3, #3
 800620a:	d00f      	beq.n	800622c <HAL_ADC_Init+0x1dc>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	2b04      	cmp	r3, #4
 8006212:	d00b      	beq.n	800622c <HAL_ADC_Init+0x1dc>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	2b05      	cmp	r3, #5
 800621a:	d007      	beq.n	800622c <HAL_ADC_Init+0x1dc>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	2b06      	cmp	r3, #6
 8006222:	d003      	beq.n	800622c <HAL_ADC_Init+0x1dc>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	2b07      	cmp	r3, #7
 800622a:	d112      	bne.n	8006252 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2107      	movs	r1, #7
 8006238:	438a      	bics	r2, r1
 800623a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6959      	ldr	r1, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	2207      	movs	r2, #7
 8006248:	401a      	ands	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <HAL_ADC_Init+0x27c>)
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	d10b      	bne.n	800627a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	2203      	movs	r2, #3
 800626e:	4393      	bics	r3, r2
 8006270:	2201      	movs	r2, #1
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006278:	e01c      	b.n	80062b4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	2212      	movs	r2, #18
 8006280:	4393      	bics	r3, r2
 8006282:	2210      	movs	r2, #16
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	2201      	movs	r2, #1
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8006296:	230f      	movs	r3, #15
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800629e:	e009      	b.n	80062b4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	2210      	movs	r2, #16
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80062ac:	230f      	movs	r3, #15
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	2201      	movs	r2, #1
 80062b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80062b4:	230f      	movs	r3, #15
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	781b      	ldrb	r3, [r3, #0]
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b004      	add	sp, #16
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	fffffefd 	.word	0xfffffefd
 80062c8:	fffe0219 	.word	0xfffe0219
 80062cc:	833fffe7 	.word	0x833fffe7

080062d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80062d0:	b590      	push	{r4, r7, lr}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062dc:	2317      	movs	r3, #23
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2204      	movs	r2, #4
 80062ec:	4013      	ands	r3, r2
 80062ee:	d15e      	bne.n	80063ae <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2234      	movs	r2, #52	; 0x34
 80062f4:	5c9b      	ldrb	r3, [r3, r2]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_ADC_Start_DMA+0x2e>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e05e      	b.n	80063bc <HAL_ADC_Start_DMA+0xec>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2234      	movs	r2, #52	; 0x34
 8006302:	2101      	movs	r1, #1
 8006304:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	7e5b      	ldrb	r3, [r3, #25]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d007      	beq.n	800631e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800630e:	2317      	movs	r3, #23
 8006310:	18fc      	adds	r4, r7, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	0018      	movs	r0, r3
 8006316:	f000 f9e9 	bl	80066ec <ADC_Enable>
 800631a:	0003      	movs	r3, r0
 800631c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800631e:	2317      	movs	r3, #23
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d146      	bne.n	80063b6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <HAL_ADC_Start_DMA+0xf4>)
 800632e:	4013      	ands	r3, r2
 8006330:	2280      	movs	r2, #128	; 0x80
 8006332:	0052      	lsls	r2, r2, #1
 8006334:	431a      	orrs	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2234      	movs	r2, #52	; 0x34
 8006344:	2100      	movs	r1, #0
 8006346:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <HAL_ADC_Start_DMA+0xf8>)
 800634e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_ADC_Start_DMA+0xfc>)
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_ADC_Start_DMA+0x100>)
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	221c      	movs	r2, #28
 8006366:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2110      	movs	r1, #16
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2101      	movs	r1, #1
 8006384:	430a      	orrs	r2, r1
 8006386:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3340      	adds	r3, #64	; 0x40
 8006392:	0019      	movs	r1, r3
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f000 fc94 	bl	8006cc4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2104      	movs	r1, #4
 80063a8:	430a      	orrs	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	e003      	b.n	80063b6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063ae:	2317      	movs	r3, #23
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	2202      	movs	r2, #2
 80063b4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80063b6:	2317      	movs	r3, #23
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	781b      	ldrb	r3, [r3, #0]
}
 80063bc:	0018      	movs	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	b007      	add	sp, #28
 80063c2:	bd90      	pop	{r4, r7, pc}
 80063c4:	fffff0fe 	.word	0xfffff0fe
 80063c8:	08006971 	.word	0x08006971
 80063cc:	08006a25 	.word	0x08006a25
 80063d0:	08006a43 	.word	0x08006a43

080063d4 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80063d4:	b5b0      	push	{r4, r5, r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063dc:	230f      	movs	r3, #15
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2234      	movs	r2, #52	; 0x34
 80063e8:	5c9b      	ldrb	r3, [r3, r2]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_ADC_Stop_DMA+0x1e>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e05f      	b.n	80064b2 <HAL_ADC_Stop_DMA+0xde>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2234      	movs	r2, #52	; 0x34
 80063f6:	2101      	movs	r1, #1
 80063f8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80063fa:	250f      	movs	r5, #15
 80063fc:	197c      	adds	r4, r7, r5
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	0018      	movs	r0, r3
 8006402:	f000 fa68 	bl	80068d6 <ADC_ConversionStop>
 8006406:	0003      	movs	r3, r0
 8006408:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800640a:	0028      	movs	r0, r5
 800640c:	183b      	adds	r3, r7, r0
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d147      	bne.n	80064a4 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2101      	movs	r1, #1
 8006420:	438a      	bics	r2, r1
 8006422:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	2221      	movs	r2, #33	; 0x21
 800642a:	5c9b      	ldrb	r3, [r3, r2]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d112      	bne.n	8006458 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	0005      	movs	r5, r0
 8006438:	183c      	adds	r4, r7, r0
 800643a:	0018      	movs	r0, r3
 800643c:	f000 fca8 	bl	8006d90 <HAL_DMA_Abort>
 8006440:	0003      	movs	r3, r0
 8006442:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006444:	197b      	adds	r3, r7, r5
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	2240      	movs	r2, #64	; 0x40
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2110      	movs	r1, #16
 8006464:	438a      	bics	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8006468:	220f      	movs	r2, #15
 800646a:	18bb      	adds	r3, r7, r2
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006472:	18bc      	adds	r4, r7, r2
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	0018      	movs	r0, r3
 8006478:	f000 f9bc 	bl	80067f4 <ADC_Disable>
 800647c:	0003      	movs	r3, r0
 800647e:	7023      	strb	r3, [r4, #0]
 8006480:	e003      	b.n	800648a <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f9b5 	bl	80067f4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800648a:	230f      	movs	r3, #15
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d107      	bne.n	80064a4 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	4a08      	ldr	r2, [pc, #32]	; (80064bc <HAL_ADC_Stop_DMA+0xe8>)
 800649a:	4013      	ands	r3, r2
 800649c:	2201      	movs	r2, #1
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2234      	movs	r2, #52	; 0x34
 80064a8:	2100      	movs	r1, #0
 80064aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80064ac:	230f      	movs	r3, #15
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	781b      	ldrb	r3, [r3, #0]
}
 80064b2:	0018      	movs	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b004      	add	sp, #16
 80064b8:	bdb0      	pop	{r4, r5, r7, pc}
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	fffffefe 	.word	0xfffffefe

080064c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b002      	add	sp, #8
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064da:	230f      	movs	r3, #15
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	055b      	lsls	r3, r3, #21
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d011      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x46>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d00d      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x46>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d009      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x46>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	2b03      	cmp	r3, #3
 8006508:	d005      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x46>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	2b04      	cmp	r3, #4
 8006510:	d001      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x46>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2234      	movs	r2, #52	; 0x34
 800651a:	5c9b      	ldrb	r3, [r3, r2]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x54>
 8006520:	2302      	movs	r3, #2
 8006522:	e0d0      	b.n	80066c6 <HAL_ADC_ConfigChannel+0x1f6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2234      	movs	r2, #52	; 0x34
 8006528:	2101      	movs	r1, #1
 800652a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2204      	movs	r2, #4
 8006534:	4013      	ands	r3, r2
 8006536:	d000      	beq.n	800653a <HAL_ADC_ConfigChannel+0x6a>
 8006538:	e0b4      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4a64      	ldr	r2, [pc, #400]	; (80066d0 <HAL_ADC_ConfigChannel+0x200>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d100      	bne.n	8006546 <HAL_ADC_ConfigChannel+0x76>
 8006544:	e082      	b.n	800664c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2201      	movs	r2, #1
 8006552:	409a      	lsls	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	055b      	lsls	r3, r3, #21
 8006564:	429a      	cmp	r2, r3
 8006566:	d037      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d033      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	2b02      	cmp	r3, #2
 8006576:	d02f      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	2b03      	cmp	r3, #3
 800657e:	d02b      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	2b04      	cmp	r3, #4
 8006586:	d027      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2b05      	cmp	r3, #5
 800658e:	d023      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	2b06      	cmp	r3, #6
 8006596:	d01f      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	2b07      	cmp	r3, #7
 800659e:	d01b      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	2107      	movs	r1, #7
 80065ac:	400b      	ands	r3, r1
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d012      	beq.n	80065d8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695a      	ldr	r2, [r3, #20]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2107      	movs	r1, #7
 80065be:	438a      	bics	r2, r1
 80065c0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6959      	ldr	r1, [r3, #20]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2207      	movs	r2, #7
 80065ce:	401a      	ands	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d007      	beq.n	80065f0 <HAL_ADC_ConfigChannel+0x120>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b11      	cmp	r3, #17
 80065e6:	d003      	beq.n	80065f0 <HAL_ADC_ConfigChannel+0x120>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b12      	cmp	r3, #18
 80065ee:	d163      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80065f0:	4b38      	ldr	r3, [pc, #224]	; (80066d4 <HAL_ADC_ConfigChannel+0x204>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	d009      	beq.n	8006610 <HAL_ADC_ConfigChannel+0x140>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b11      	cmp	r3, #17
 8006602:	d102      	bne.n	800660a <HAL_ADC_ConfigChannel+0x13a>
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	03db      	lsls	r3, r3, #15
 8006608:	e004      	b.n	8006614 <HAL_ADC_ConfigChannel+0x144>
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	045b      	lsls	r3, r3, #17
 800660e:	e001      	b.n	8006614 <HAL_ADC_ConfigChannel+0x144>
 8006610:	2380      	movs	r3, #128	; 0x80
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	4a2f      	ldr	r2, [pc, #188]	; (80066d4 <HAL_ADC_ConfigChannel+0x204>)
 8006616:	430b      	orrs	r3, r1
 8006618:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b10      	cmp	r3, #16
 8006620:	d14a      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006622:	4b2d      	ldr	r3, [pc, #180]	; (80066d8 <HAL_ADC_ConfigChannel+0x208>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	492d      	ldr	r1, [pc, #180]	; (80066dc <HAL_ADC_ConfigChannel+0x20c>)
 8006628:	0018      	movs	r0, r3
 800662a:	f7f9 fd6b 	bl	8000104 <__udivsi3>
 800662e:	0003      	movs	r3, r0
 8006630:	001a      	movs	r2, r3
 8006632:	0013      	movs	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	189b      	adds	r3, r3, r2
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800663c:	e002      	b.n	8006644 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3b01      	subs	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f9      	bne.n	800663e <HAL_ADC_ConfigChannel+0x16e>
 800664a:	e035      	b.n	80066b8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2101      	movs	r1, #1
 8006658:	4099      	lsls	r1, r3
 800665a:	000b      	movs	r3, r1
 800665c:	43d9      	mvns	r1, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	400a      	ands	r2, r1
 8006664:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b10      	cmp	r3, #16
 800666c:	d007      	beq.n	800667e <HAL_ADC_ConfigChannel+0x1ae>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b11      	cmp	r3, #17
 8006674:	d003      	beq.n	800667e <HAL_ADC_ConfigChannel+0x1ae>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b12      	cmp	r3, #18
 800667c:	d11c      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800667e:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <HAL_ADC_ConfigChannel+0x204>)
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b10      	cmp	r3, #16
 8006688:	d007      	beq.n	800669a <HAL_ADC_ConfigChannel+0x1ca>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b11      	cmp	r3, #17
 8006690:	d101      	bne.n	8006696 <HAL_ADC_ConfigChannel+0x1c6>
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <HAL_ADC_ConfigChannel+0x210>)
 8006694:	e002      	b.n	800669c <HAL_ADC_ConfigChannel+0x1cc>
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <HAL_ADC_ConfigChannel+0x214>)
 8006698:	e000      	b.n	800669c <HAL_ADC_ConfigChannel+0x1cc>
 800669a:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <HAL_ADC_ConfigChannel+0x218>)
 800669c:	4a0d      	ldr	r2, [pc, #52]	; (80066d4 <HAL_ADC_ConfigChannel+0x204>)
 800669e:	400b      	ands	r3, r1
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e009      	b.n	80066b8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	2220      	movs	r2, #32
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80066b0:	230f      	movs	r3, #15
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2234      	movs	r2, #52	; 0x34
 80066bc:	2100      	movs	r1, #0
 80066be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80066c0:	230f      	movs	r3, #15
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	781b      	ldrb	r3, [r3, #0]
}
 80066c6:	0018      	movs	r0, r3
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b004      	add	sp, #16
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	00001001 	.word	0x00001001
 80066d4:	40012708 	.word	0x40012708
 80066d8:	200000ac 	.word	0x200000ac
 80066dc:	000f4240 	.word	0x000f4240
 80066e0:	ffbfffff 	.word	0xffbfffff
 80066e4:	feffffff 	.word	0xfeffffff
 80066e8:	ff7fffff 	.word	0xff7fffff

080066ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2203      	movs	r2, #3
 8006704:	4013      	ands	r3, r2
 8006706:	2b01      	cmp	r3, #1
 8006708:	d112      	bne.n	8006730 <ADC_Enable+0x44>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2201      	movs	r2, #1
 8006712:	4013      	ands	r3, r2
 8006714:	2b01      	cmp	r3, #1
 8006716:	d009      	beq.n	800672c <ADC_Enable+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	2380      	movs	r3, #128	; 0x80
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	401a      	ands	r2, r3
 8006724:	2380      	movs	r3, #128	; 0x80
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	429a      	cmp	r2, r3
 800672a:	d101      	bne.n	8006730 <ADC_Enable+0x44>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <ADC_Enable+0x46>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d152      	bne.n	80067dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a2a      	ldr	r2, [pc, #168]	; (80067e8 <ADC_Enable+0xfc>)
 800673e:	4013      	ands	r3, r2
 8006740:	d00d      	beq.n	800675e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	2210      	movs	r2, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	2201      	movs	r2, #1
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e03f      	b.n	80067de <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2101      	movs	r1, #1
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800676e:	4b1f      	ldr	r3, [pc, #124]	; (80067ec <ADC_Enable+0x100>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	491f      	ldr	r1, [pc, #124]	; (80067f0 <ADC_Enable+0x104>)
 8006774:	0018      	movs	r0, r3
 8006776:	f7f9 fcc5 	bl	8000104 <__udivsi3>
 800677a:	0003      	movs	r3, r0
 800677c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800677e:	e002      	b.n	8006786 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3b01      	subs	r3, #1
 8006784:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f9      	bne.n	8006780 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800678c:	f7ff fc56 	bl	800603c <HAL_GetTick>
 8006790:	0003      	movs	r3, r0
 8006792:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006794:	e01b      	b.n	80067ce <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006796:	f7ff fc51 	bl	800603c <HAL_GetTick>
 800679a:	0002      	movs	r2, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d914      	bls.n	80067ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2201      	movs	r2, #1
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d00d      	beq.n	80067ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	2210      	movs	r2, #16
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	2201      	movs	r2, #1
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e007      	b.n	80067de <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2201      	movs	r2, #1
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d1dc      	bne.n	8006796 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b004      	add	sp, #16
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	80000017 	.word	0x80000017
 80067ec:	200000ac 	.word	0x200000ac
 80067f0:	000f4240 	.word	0x000f4240

080067f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2203      	movs	r2, #3
 8006808:	4013      	ands	r3, r2
 800680a:	2b01      	cmp	r3, #1
 800680c:	d112      	bne.n	8006834 <ADC_Disable+0x40>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2201      	movs	r2, #1
 8006816:	4013      	ands	r3, r2
 8006818:	2b01      	cmp	r3, #1
 800681a:	d009      	beq.n	8006830 <ADC_Disable+0x3c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	401a      	ands	r2, r3
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	429a      	cmp	r2, r3
 800682e:	d101      	bne.n	8006834 <ADC_Disable+0x40>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <ADC_Disable+0x42>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d048      	beq.n	80068cc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2205      	movs	r2, #5
 8006842:	4013      	ands	r3, r2
 8006844:	2b01      	cmp	r3, #1
 8006846:	d110      	bne.n	800686a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2102      	movs	r1, #2
 8006854:	430a      	orrs	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2203      	movs	r2, #3
 800685e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006860:	f7ff fbec 	bl	800603c <HAL_GetTick>
 8006864:	0003      	movs	r3, r0
 8006866:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006868:	e029      	b.n	80068be <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	2210      	movs	r2, #16
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	2201      	movs	r2, #1
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e023      	b.n	80068ce <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006886:	f7ff fbd9 	bl	800603c <HAL_GetTick>
 800688a:	0002      	movs	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d914      	bls.n	80068be <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2201      	movs	r2, #1
 800689c:	4013      	ands	r3, r2
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d10d      	bne.n	80068be <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	2210      	movs	r2, #16
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	2201      	movs	r2, #1
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e007      	b.n	80068ce <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2201      	movs	r2, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d0dc      	beq.n	8006886 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	0018      	movs	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2204      	movs	r2, #4
 80068ea:	4013      	ands	r3, r2
 80068ec:	d03a      	beq.n	8006964 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2204      	movs	r2, #4
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d10d      	bne.n	8006918 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2202      	movs	r2, #2
 8006904:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006906:	d107      	bne.n	8006918 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2110      	movs	r1, #16
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006918:	f7ff fb90 	bl	800603c <HAL_GetTick>
 800691c:	0003      	movs	r3, r0
 800691e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006920:	e01a      	b.n	8006958 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006922:	f7ff fb8b 	bl	800603c <HAL_GetTick>
 8006926:	0002      	movs	r2, r0
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d913      	bls.n	8006958 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2204      	movs	r2, #4
 8006938:	4013      	ands	r3, r2
 800693a:	d00d      	beq.n	8006958 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	2210      	movs	r2, #16
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	2201      	movs	r2, #1
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e006      	b.n	8006966 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2204      	movs	r2, #4
 8006960:	4013      	ands	r3, r2
 8006962:	d1de      	bne.n	8006922 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b004      	add	sp, #16
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	2250      	movs	r2, #80	; 0x50
 8006984:	4013      	ands	r3, r2
 8006986:	d140      	bne.n	8006a0a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	2280      	movs	r2, #128	; 0x80
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	23c0      	movs	r3, #192	; 0xc0
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	4013      	ands	r3, r2
 80069a2:	d12d      	bne.n	8006a00 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d129      	bne.n	8006a00 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2208      	movs	r2, #8
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d122      	bne.n	8006a00 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2204      	movs	r2, #4
 80069c2:	4013      	ands	r3, r2
 80069c4:	d110      	bne.n	80069e8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	210c      	movs	r1, #12
 80069d2:	438a      	bics	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	4a11      	ldr	r2, [pc, #68]	; (8006a20 <ADC_DMAConvCplt+0xb0>)
 80069dc:	4013      	ands	r3, r2
 80069de:	2201      	movs	r2, #1
 80069e0:	431a      	orrs	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38
 80069e6:	e00b      	b.n	8006a00 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	2220      	movs	r2, #32
 80069ee:	431a      	orrs	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f8:	2201      	movs	r2, #1
 80069fa:	431a      	orrs	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f7fd ffe2 	bl	80049cc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8006a08:	e005      	b.n	8006a16 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	0010      	movs	r0, r2
 8006a14:	4798      	blx	r3
}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	b004      	add	sp, #16
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	fffffefe 	.word	0xfffffefe

08006a24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7fd ffbf 	bl	80049b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b004      	add	sp, #16
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	2240      	movs	r2, #64	; 0x40
 8006a56:	431a      	orrs	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a60:	2204      	movs	r2, #4
 8006a62:	431a      	orrs	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7ff fd28 	bl	80064c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a70:	46c0      	nop			; (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b004      	add	sp, #16
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	0002      	movs	r2, r0
 8006a80:	1dfb      	adds	r3, r7, #7
 8006a82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a84:	1dfb      	adds	r3, r7, #7
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8a:	d809      	bhi.n	8006aa0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a8c:	1dfb      	adds	r3, r7, #7
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	001a      	movs	r2, r3
 8006a92:	231f      	movs	r3, #31
 8006a94:	401a      	ands	r2, r3
 8006a96:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <__NVIC_EnableIRQ+0x30>)
 8006a98:	2101      	movs	r1, #1
 8006a9a:	4091      	lsls	r1, r2
 8006a9c:	000a      	movs	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]
  }
}
 8006aa0:	46c0      	nop			; (mov r8, r8)
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b002      	add	sp, #8
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	e000e100 	.word	0xe000e100

08006aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006aac:	b590      	push	{r4, r7, lr}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	0002      	movs	r2, r0
 8006ab4:	6039      	str	r1, [r7, #0]
 8006ab6:	1dfb      	adds	r3, r7, #7
 8006ab8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006aba:	1dfb      	adds	r3, r7, #7
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac0:	d828      	bhi.n	8006b14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ac2:	4a2f      	ldr	r2, [pc, #188]	; (8006b80 <__NVIC_SetPriority+0xd4>)
 8006ac4:	1dfb      	adds	r3, r7, #7
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	089b      	lsrs	r3, r3, #2
 8006acc:	33c0      	adds	r3, #192	; 0xc0
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	589b      	ldr	r3, [r3, r2]
 8006ad2:	1dfa      	adds	r2, r7, #7
 8006ad4:	7812      	ldrb	r2, [r2, #0]
 8006ad6:	0011      	movs	r1, r2
 8006ad8:	2203      	movs	r2, #3
 8006ada:	400a      	ands	r2, r1
 8006adc:	00d2      	lsls	r2, r2, #3
 8006ade:	21ff      	movs	r1, #255	; 0xff
 8006ae0:	4091      	lsls	r1, r2
 8006ae2:	000a      	movs	r2, r1
 8006ae4:	43d2      	mvns	r2, r2
 8006ae6:	401a      	ands	r2, r3
 8006ae8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	019b      	lsls	r3, r3, #6
 8006aee:	22ff      	movs	r2, #255	; 0xff
 8006af0:	401a      	ands	r2, r3
 8006af2:	1dfb      	adds	r3, r7, #7
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	0018      	movs	r0, r3
 8006af8:	2303      	movs	r3, #3
 8006afa:	4003      	ands	r3, r0
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b00:	481f      	ldr	r0, [pc, #124]	; (8006b80 <__NVIC_SetPriority+0xd4>)
 8006b02:	1dfb      	adds	r3, r7, #7
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	089b      	lsrs	r3, r3, #2
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	33c0      	adds	r3, #192	; 0xc0
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006b12:	e031      	b.n	8006b78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b14:	4a1b      	ldr	r2, [pc, #108]	; (8006b84 <__NVIC_SetPriority+0xd8>)
 8006b16:	1dfb      	adds	r3, r7, #7
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	230f      	movs	r3, #15
 8006b1e:	400b      	ands	r3, r1
 8006b20:	3b08      	subs	r3, #8
 8006b22:	089b      	lsrs	r3, r3, #2
 8006b24:	3306      	adds	r3, #6
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	18d3      	adds	r3, r2, r3
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	1dfa      	adds	r2, r7, #7
 8006b30:	7812      	ldrb	r2, [r2, #0]
 8006b32:	0011      	movs	r1, r2
 8006b34:	2203      	movs	r2, #3
 8006b36:	400a      	ands	r2, r1
 8006b38:	00d2      	lsls	r2, r2, #3
 8006b3a:	21ff      	movs	r1, #255	; 0xff
 8006b3c:	4091      	lsls	r1, r2
 8006b3e:	000a      	movs	r2, r1
 8006b40:	43d2      	mvns	r2, r2
 8006b42:	401a      	ands	r2, r3
 8006b44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	019b      	lsls	r3, r3, #6
 8006b4a:	22ff      	movs	r2, #255	; 0xff
 8006b4c:	401a      	ands	r2, r3
 8006b4e:	1dfb      	adds	r3, r7, #7
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	0018      	movs	r0, r3
 8006b54:	2303      	movs	r3, #3
 8006b56:	4003      	ands	r3, r0
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b5c:	4809      	ldr	r0, [pc, #36]	; (8006b84 <__NVIC_SetPriority+0xd8>)
 8006b5e:	1dfb      	adds	r3, r7, #7
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	001c      	movs	r4, r3
 8006b64:	230f      	movs	r3, #15
 8006b66:	4023      	ands	r3, r4
 8006b68:	3b08      	subs	r3, #8
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	3306      	adds	r3, #6
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	18c3      	adds	r3, r0, r3
 8006b74:	3304      	adds	r3, #4
 8006b76:	601a      	str	r2, [r3, #0]
}
 8006b78:	46c0      	nop			; (mov r8, r8)
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bd90      	pop	{r4, r7, pc}
 8006b80:	e000e100 	.word	0xe000e100
 8006b84:	e000ed00 	.word	0xe000ed00

08006b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	1e5a      	subs	r2, r3, #1
 8006b94:	2380      	movs	r3, #128	; 0x80
 8006b96:	045b      	lsls	r3, r3, #17
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d301      	bcc.n	8006ba0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e010      	b.n	8006bc2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <SysTick_Config+0x44>)
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	3a01      	subs	r2, #1
 8006ba6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ba8:	2301      	movs	r3, #1
 8006baa:	425b      	negs	r3, r3
 8006bac:	2103      	movs	r1, #3
 8006bae:	0018      	movs	r0, r3
 8006bb0:	f7ff ff7c 	bl	8006aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <SysTick_Config+0x44>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bba:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <SysTick_Config+0x44>)
 8006bbc:	2207      	movs	r2, #7
 8006bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b002      	add	sp, #8
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	e000e010 	.word	0xe000e010

08006bd0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	210f      	movs	r1, #15
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	1c02      	adds	r2, r0, #0
 8006be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	187b      	adds	r3, r7, r1
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	0011      	movs	r1, r2
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7ff ff5d 	bl	8006aac <__NVIC_SetPriority>
}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b004      	add	sp, #16
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	0002      	movs	r2, r0
 8006c02:	1dfb      	adds	r3, r7, #7
 8006c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c06:	1dfb      	adds	r3, r7, #7
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b25b      	sxtb	r3, r3
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7ff ff33 	bl	8006a78 <__NVIC_EnableIRQ>
}
 8006c12:	46c0      	nop			; (mov r8, r8)
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b002      	add	sp, #8
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7ff ffaf 	bl	8006b88 <SysTick_Config>
 8006c2a:	0003      	movs	r3, r0
}
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b002      	add	sp, #8
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e036      	b.n	8006cb8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2221      	movs	r2, #33	; 0x21
 8006c4e:	2102      	movs	r1, #2
 8006c50:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4a18      	ldr	r2, [pc, #96]	; (8006cc0 <HAL_DMA_Init+0x8c>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f000 f97e 	bl	8006f9c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2221      	movs	r2, #33	; 0x21
 8006caa:	2101      	movs	r1, #1
 8006cac:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}  
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b004      	add	sp, #16
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	ffffc00f 	.word	0xffffc00f

08006cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006cd2:	2317      	movs	r3, #23
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	5c9b      	ldrb	r3, [r3, r2]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_DMA_Start_IT+0x24>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e04f      	b.n	8006d88 <HAL_DMA_Start_IT+0xc4>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	2101      	movs	r1, #1
 8006cee:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2221      	movs	r2, #33	; 0x21
 8006cf4:	5c9b      	ldrb	r3, [r3, r2]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d13a      	bne.n	8006d72 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2221      	movs	r2, #33	; 0x21
 8006d00:	2102      	movs	r1, #2
 8006d02:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2101      	movs	r1, #1
 8006d16:	438a      	bics	r2, r1
 8006d18:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f90f 	bl	8006f44 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	210e      	movs	r1, #14
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e00f      	b.n	8006d60 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	210a      	movs	r1, #10
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2104      	movs	r1, #4
 8006d5c:	438a      	bics	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e007      	b.n	8006d82 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	2100      	movs	r1, #0
 8006d78:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006d7a:	2317      	movs	r3, #23
 8006d7c:	18fb      	adds	r3, r7, r3
 8006d7e:	2202      	movs	r2, #2
 8006d80:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8006d82:	2317      	movs	r3, #23
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	781b      	ldrb	r3, [r3, #0]
} 
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b006      	add	sp, #24
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2221      	movs	r2, #33	; 0x21
 8006d9c:	5c9b      	ldrb	r3, [r3, r2]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d008      	beq.n	8006db6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2204      	movs	r2, #4
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	2100      	movs	r1, #0
 8006db0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e020      	b.n	8006df8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	210e      	movs	r1, #14
 8006dc2:	438a      	bics	r2, r1
 8006dc4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	438a      	bics	r2, r1
 8006dd4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	2101      	movs	r1, #1
 8006de0:	4091      	lsls	r1, r2
 8006de2:	000a      	movs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2221      	movs	r2, #33	; 0x21
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	2100      	movs	r1, #0
 8006df4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	0013      	movs	r3, r2
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4013      	ands	r3, r2
 8006e26:	d024      	beq.n	8006e72 <HAL_DMA_IRQHandler+0x72>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d020      	beq.n	8006e72 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2220      	movs	r2, #32
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d107      	bne.n	8006e4c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2104      	movs	r1, #4
 8006e48:	438a      	bics	r2, r1
 8006e4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e54:	2104      	movs	r1, #4
 8006e56:	4091      	lsls	r1, r2
 8006e58:	000a      	movs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d100      	bne.n	8006e66 <HAL_DMA_IRQHandler+0x66>
 8006e64:	e06a      	b.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	0010      	movs	r0, r2
 8006e6e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006e70:	e064      	b.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	2202      	movs	r2, #2
 8006e78:	409a      	lsls	r2, r3
 8006e7a:	0013      	movs	r3, r2
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	d02b      	beq.n	8006eda <HAL_DMA_IRQHandler+0xda>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2202      	movs	r2, #2
 8006e86:	4013      	ands	r3, r2
 8006e88:	d027      	beq.n	8006eda <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2220      	movs	r2, #32
 8006e92:	4013      	ands	r3, r2
 8006e94:	d10b      	bne.n	8006eae <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	210a      	movs	r1, #10
 8006ea2:	438a      	bics	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2221      	movs	r2, #33	; 0x21
 8006eaa:	2101      	movs	r1, #1
 8006eac:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4091      	lsls	r1, r2
 8006eba:	000a      	movs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d036      	beq.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	0010      	movs	r0, r2
 8006ed6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006ed8:	e030      	b.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	2208      	movs	r2, #8
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	0013      	movs	r3, r2
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d028      	beq.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2208      	movs	r2, #8
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d024      	beq.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	210e      	movs	r1, #14
 8006efe:	438a      	bics	r2, r1
 8006f00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4091      	lsls	r1, r2
 8006f0e:	000a      	movs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2221      	movs	r2, #33	; 0x21
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	2100      	movs	r1, #0
 8006f26:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	0010      	movs	r0, r2
 8006f38:	4798      	blx	r3
    }
   }
}  
 8006f3a:	e7ff      	b.n	8006f3c <HAL_DMA_IRQHandler+0x13c>
 8006f3c:	46c0      	nop			; (mov r8, r8)
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b004      	add	sp, #16
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	4091      	lsls	r1, r2
 8006f5e:	000a      	movs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d108      	bne.n	8006f84 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f82:	e007      	b.n	8006f94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	60da      	str	r2, [r3, #12]
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	46bd      	mov	sp, r7
 8006f98:	b004      	add	sp, #16
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	001a      	movs	r2, r3
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <DMA_CalcBaseAndBitshift+0x60>)
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d810      	bhi.n	8006fd2 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a12      	ldr	r2, [pc, #72]	; (8007000 <DMA_CalcBaseAndBitshift+0x64>)
 8006fb6:	4694      	mov	ip, r2
 8006fb8:	4463      	add	r3, ip
 8006fba:	2114      	movs	r1, #20
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7f9 f8a1 	bl	8000104 <__udivsi3>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	009a      	lsls	r2, r3, #2
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <DMA_CalcBaseAndBitshift+0x68>)
 8006fce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006fd0:	e00f      	b.n	8006ff2 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a0c      	ldr	r2, [pc, #48]	; (8007008 <DMA_CalcBaseAndBitshift+0x6c>)
 8006fd8:	4694      	mov	ip, r2
 8006fda:	4463      	add	r3, ip
 8006fdc:	2114      	movs	r1, #20
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f7f9 f890 	bl	8000104 <__udivsi3>
 8006fe4:	0003      	movs	r3, r0
 8006fe6:	009a      	lsls	r2, r3, #2
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a07      	ldr	r2, [pc, #28]	; (800700c <DMA_CalcBaseAndBitshift+0x70>)
 8006ff0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b002      	add	sp, #8
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	40020407 	.word	0x40020407
 8007000:	bffdfff8 	.word	0xbffdfff8
 8007004:	40020000 	.word	0x40020000
 8007008:	bffdfbf8 	.word	0xbffdfbf8
 800700c:	40020400 	.word	0x40020400

08007010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800701e:	e155      	b.n	80072cc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2101      	movs	r1, #1
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4091      	lsls	r1, r2
 800702a:	000a      	movs	r2, r1
 800702c:	4013      	ands	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d100      	bne.n	8007038 <HAL_GPIO_Init+0x28>
 8007036:	e146      	b.n	80072c6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2203      	movs	r2, #3
 800703e:	4013      	ands	r3, r2
 8007040:	2b01      	cmp	r3, #1
 8007042:	d005      	beq.n	8007050 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2203      	movs	r2, #3
 800704a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800704c:	2b02      	cmp	r3, #2
 800704e:	d130      	bne.n	80070b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	2203      	movs	r2, #3
 800705c:	409a      	lsls	r2, r3
 800705e:	0013      	movs	r3, r2
 8007060:	43da      	mvns	r2, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4013      	ands	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	409a      	lsls	r2, r3
 8007072:	0013      	movs	r3, r2
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007086:	2201      	movs	r2, #1
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	409a      	lsls	r2, r3
 800708c:	0013      	movs	r3, r2
 800708e:	43da      	mvns	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4013      	ands	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	2201      	movs	r2, #1
 800709e:	401a      	ands	r2, r3
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	409a      	lsls	r2, r3
 80070a4:	0013      	movs	r3, r2
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2203      	movs	r2, #3
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d017      	beq.n	80070ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	2203      	movs	r2, #3
 80070ca:	409a      	lsls	r2, r3
 80070cc:	0013      	movs	r3, r2
 80070ce:	43da      	mvns	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	4013      	ands	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	409a      	lsls	r2, r3
 80070e0:	0013      	movs	r3, r2
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2203      	movs	r2, #3
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d123      	bne.n	8007142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	08da      	lsrs	r2, r3, #3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3208      	adds	r2, #8
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	58d3      	ldr	r3, [r2, r3]
 8007106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2207      	movs	r2, #7
 800710c:	4013      	ands	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	220f      	movs	r2, #15
 8007112:	409a      	lsls	r2, r3
 8007114:	0013      	movs	r3, r2
 8007116:	43da      	mvns	r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4013      	ands	r3, r2
 800711c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2107      	movs	r1, #7
 8007126:	400b      	ands	r3, r1
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	409a      	lsls	r2, r3
 800712c:	0013      	movs	r3, r2
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	08da      	lsrs	r2, r3, #3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3208      	adds	r2, #8
 800713c:	0092      	lsls	r2, r2, #2
 800713e:	6939      	ldr	r1, [r7, #16]
 8007140:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	2203      	movs	r2, #3
 800714e:	409a      	lsls	r2, r3
 8007150:	0013      	movs	r3, r2
 8007152:	43da      	mvns	r2, r3
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4013      	ands	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2203      	movs	r2, #3
 8007160:	401a      	ands	r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	409a      	lsls	r2, r3
 8007168:	0013      	movs	r3, r2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	23c0      	movs	r3, #192	; 0xc0
 800717c:	029b      	lsls	r3, r3, #10
 800717e:	4013      	ands	r3, r2
 8007180:	d100      	bne.n	8007184 <HAL_GPIO_Init+0x174>
 8007182:	e0a0      	b.n	80072c6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007184:	4b57      	ldr	r3, [pc, #348]	; (80072e4 <HAL_GPIO_Init+0x2d4>)
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	4b56      	ldr	r3, [pc, #344]	; (80072e4 <HAL_GPIO_Init+0x2d4>)
 800718a:	2101      	movs	r1, #1
 800718c:	430a      	orrs	r2, r1
 800718e:	619a      	str	r2, [r3, #24]
 8007190:	4b54      	ldr	r3, [pc, #336]	; (80072e4 <HAL_GPIO_Init+0x2d4>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2201      	movs	r2, #1
 8007196:	4013      	ands	r3, r2
 8007198:	60bb      	str	r3, [r7, #8]
 800719a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800719c:	4a52      	ldr	r2, [pc, #328]	; (80072e8 <HAL_GPIO_Init+0x2d8>)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	089b      	lsrs	r3, r3, #2
 80071a2:	3302      	adds	r3, #2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	589b      	ldr	r3, [r3, r2]
 80071a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2203      	movs	r2, #3
 80071ae:	4013      	ands	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	220f      	movs	r2, #15
 80071b4:	409a      	lsls	r2, r3
 80071b6:	0013      	movs	r3, r2
 80071b8:	43da      	mvns	r2, r3
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4013      	ands	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	2390      	movs	r3, #144	; 0x90
 80071c4:	05db      	lsls	r3, r3, #23
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d019      	beq.n	80071fe <HAL_GPIO_Init+0x1ee>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a47      	ldr	r2, [pc, #284]	; (80072ec <HAL_GPIO_Init+0x2dc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <HAL_GPIO_Init+0x1ea>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a46      	ldr	r2, [pc, #280]	; (80072f0 <HAL_GPIO_Init+0x2e0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00d      	beq.n	80071f6 <HAL_GPIO_Init+0x1e6>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a45      	ldr	r2, [pc, #276]	; (80072f4 <HAL_GPIO_Init+0x2e4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d007      	beq.n	80071f2 <HAL_GPIO_Init+0x1e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a44      	ldr	r2, [pc, #272]	; (80072f8 <HAL_GPIO_Init+0x2e8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <HAL_GPIO_Init+0x1de>
 80071ea:	2304      	movs	r3, #4
 80071ec:	e008      	b.n	8007200 <HAL_GPIO_Init+0x1f0>
 80071ee:	2305      	movs	r3, #5
 80071f0:	e006      	b.n	8007200 <HAL_GPIO_Init+0x1f0>
 80071f2:	2303      	movs	r3, #3
 80071f4:	e004      	b.n	8007200 <HAL_GPIO_Init+0x1f0>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e002      	b.n	8007200 <HAL_GPIO_Init+0x1f0>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <HAL_GPIO_Init+0x1f0>
 80071fe:	2300      	movs	r3, #0
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	2103      	movs	r1, #3
 8007204:	400a      	ands	r2, r1
 8007206:	0092      	lsls	r2, r2, #2
 8007208:	4093      	lsls	r3, r2
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007210:	4935      	ldr	r1, [pc, #212]	; (80072e8 <HAL_GPIO_Init+0x2d8>)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	089b      	lsrs	r3, r3, #2
 8007216:	3302      	adds	r3, #2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800721e:	4b37      	ldr	r3, [pc, #220]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	43da      	mvns	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	4013      	ands	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	025b      	lsls	r3, r3, #9
 8007236:	4013      	ands	r3, r2
 8007238:	d003      	beq.n	8007242 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007242:	4b2e      	ldr	r3, [pc, #184]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007248:	4b2c      	ldr	r3, [pc, #176]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	43da      	mvns	r2, r3
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4013      	ands	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	029b      	lsls	r3, r3, #10
 8007260:	4013      	ands	r3, r2
 8007262:	d003      	beq.n	800726c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800726c:	4b23      	ldr	r3, [pc, #140]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007272:	4b22      	ldr	r3, [pc, #136]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	43da      	mvns	r2, r3
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	4013      	ands	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	035b      	lsls	r3, r3, #13
 800728a:	4013      	ands	r3, r2
 800728c:	d003      	beq.n	8007296 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007296:	4b19      	ldr	r3, [pc, #100]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800729c:	4b17      	ldr	r3, [pc, #92]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	43da      	mvns	r2, r3
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4013      	ands	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	039b      	lsls	r3, r3, #14
 80072b4:	4013      	ands	r3, r2
 80072b6:	d003      	beq.n	80072c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80072c0:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <HAL_GPIO_Init+0x2ec>)
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	3301      	adds	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	40da      	lsrs	r2, r3
 80072d4:	1e13      	subs	r3, r2, #0
 80072d6:	d000      	beq.n	80072da <HAL_GPIO_Init+0x2ca>
 80072d8:	e6a2      	b.n	8007020 <HAL_GPIO_Init+0x10>
  } 
}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	46c0      	nop			; (mov r8, r8)
 80072de:	46bd      	mov	sp, r7
 80072e0:	b006      	add	sp, #24
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40021000 	.word	0x40021000
 80072e8:	40010000 	.word	0x40010000
 80072ec:	48000400 	.word	0x48000400
 80072f0:	48000800 	.word	0x48000800
 80072f4:	48000c00 	.word	0x48000c00
 80072f8:	48001000 	.word	0x48001000
 80072fc:	40010400 	.word	0x40010400

08007300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	000a      	movs	r2, r1
 800730a:	1cbb      	adds	r3, r7, #2
 800730c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	1cba      	adds	r2, r7, #2
 8007314:	8812      	ldrh	r2, [r2, #0]
 8007316:	4013      	ands	r3, r2
 8007318:	d004      	beq.n	8007324 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800731a:	230f      	movs	r3, #15
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	2201      	movs	r2, #1
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	e003      	b.n	800732c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007324:	230f      	movs	r3, #15
 8007326:	18fb      	adds	r3, r7, r3
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800732c:	230f      	movs	r3, #15
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	781b      	ldrb	r3, [r3, #0]
  }
 8007332:	0018      	movs	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	b004      	add	sp, #16
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	0008      	movs	r0, r1
 8007344:	0011      	movs	r1, r2
 8007346:	1cbb      	adds	r3, r7, #2
 8007348:	1c02      	adds	r2, r0, #0
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	1c7b      	adds	r3, r7, #1
 800734e:	1c0a      	adds	r2, r1, #0
 8007350:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007352:	1c7b      	adds	r3, r7, #1
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800735a:	1cbb      	adds	r3, r7, #2
 800735c:	881a      	ldrh	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007362:	e003      	b.n	800736c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007364:	1cbb      	adds	r3, r7, #2
 8007366:	881a      	ldrh	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800736c:	46c0      	nop			; (mov r8, r8)
 800736e:	46bd      	mov	sp, r7
 8007370:	b002      	add	sp, #8
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	0002      	movs	r2, r0
 800737c:	1dbb      	adds	r3, r7, #6
 800737e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007380:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	1dba      	adds	r2, r7, #6
 8007386:	8812      	ldrh	r2, [r2, #0]
 8007388:	4013      	ands	r3, r2
 800738a:	d008      	beq.n	800739e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800738e:	1dba      	adds	r2, r7, #6
 8007390:	8812      	ldrh	r2, [r2, #0]
 8007392:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007394:	1dbb      	adds	r3, r7, #6
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	0018      	movs	r0, r3
 800739a:	f7fd fab5 	bl	8004908 <HAL_GPIO_EXTI_Callback>
  }
}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	46bd      	mov	sp, r7
 80073a2:	b002      	add	sp, #8
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	40010400 	.word	0x40010400

080073ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e082      	b.n	80074c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2241      	movs	r2, #65	; 0x41
 80073c2:	5c9b      	ldrb	r3, [r3, r2]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d107      	bne.n	80073da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2240      	movs	r2, #64	; 0x40
 80073ce:	2100      	movs	r1, #0
 80073d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	0018      	movs	r0, r3
 80073d6:	f7fe fbbb 	bl	8005b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2241      	movs	r2, #65	; 0x41
 80073de:	2124      	movs	r1, #36	; 0x24
 80073e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2101      	movs	r1, #1
 80073ee:	438a      	bics	r2, r1
 80073f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4934      	ldr	r1, [pc, #208]	; (80074cc <HAL_I2C_Init+0x120>)
 80073fc:	400a      	ands	r2, r1
 80073fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4931      	ldr	r1, [pc, #196]	; (80074d0 <HAL_I2C_Init+0x124>)
 800740c:	400a      	ands	r2, r1
 800740e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d108      	bne.n	800742a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	0209      	lsls	r1, r1, #8
 8007424:	430a      	orrs	r2, r1
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	e007      	b.n	800743a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2184      	movs	r1, #132	; 0x84
 8007434:	0209      	lsls	r1, r1, #8
 8007436:	430a      	orrs	r2, r1
 8007438:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d104      	bne.n	800744c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2280      	movs	r2, #128	; 0x80
 8007448:	0112      	lsls	r2, r2, #4
 800744a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	491f      	ldr	r1, [pc, #124]	; (80074d4 <HAL_I2C_Init+0x128>)
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	491a      	ldr	r1, [pc, #104]	; (80074d0 <HAL_I2C_Init+0x124>)
 8007468:	400a      	ands	r2, r1
 800746a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	431a      	orrs	r2, r3
 8007476:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69d9      	ldr	r1, [r3, #28]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1a      	ldr	r2, [r3, #32]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2101      	movs	r1, #1
 80074a2:	430a      	orrs	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2241      	movs	r2, #65	; 0x41
 80074b0:	2120      	movs	r1, #32
 80074b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2242      	movs	r2, #66	; 0x42
 80074be:	2100      	movs	r1, #0
 80074c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	0018      	movs	r0, r3
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b002      	add	sp, #8
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	f0ffffff 	.word	0xf0ffffff
 80074d0:	ffff7fff 	.word	0xffff7fff
 80074d4:	02008000 	.word	0x02008000

080074d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af02      	add	r7, sp, #8
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	0008      	movs	r0, r1
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	0019      	movs	r1, r3
 80074e6:	230a      	movs	r3, #10
 80074e8:	18fb      	adds	r3, r7, r3
 80074ea:	1c02      	adds	r2, r0, #0
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	2308      	movs	r3, #8
 80074f0:	18fb      	adds	r3, r7, r3
 80074f2:	1c0a      	adds	r2, r1, #0
 80074f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2241      	movs	r2, #65	; 0x41
 80074fa:	5c9b      	ldrb	r3, [r3, r2]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d000      	beq.n	8007504 <HAL_I2C_Master_Transmit+0x2c>
 8007502:	e0e7      	b.n	80076d4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2240      	movs	r2, #64	; 0x40
 8007508:	5c9b      	ldrb	r3, [r3, r2]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_I2C_Master_Transmit+0x3a>
 800750e:	2302      	movs	r3, #2
 8007510:	e0e1      	b.n	80076d6 <HAL_I2C_Master_Transmit+0x1fe>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	2101      	movs	r1, #1
 8007518:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800751a:	f7fe fd8f 	bl	800603c <HAL_GetTick>
 800751e:	0003      	movs	r3, r0
 8007520:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007522:	2380      	movs	r3, #128	; 0x80
 8007524:	0219      	lsls	r1, r3, #8
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2319      	movs	r3, #25
 800752e:	2201      	movs	r2, #1
 8007530:	f000 fa04 	bl	800793c <I2C_WaitOnFlagUntilTimeout>
 8007534:	1e03      	subs	r3, r0, #0
 8007536:	d001      	beq.n	800753c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0cc      	b.n	80076d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2241      	movs	r2, #65	; 0x41
 8007540:	2121      	movs	r1, #33	; 0x21
 8007542:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2242      	movs	r2, #66	; 0x42
 8007548:	2110      	movs	r1, #16
 800754a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2208      	movs	r2, #8
 800755c:	18ba      	adds	r2, r7, r2
 800755e:	8812      	ldrh	r2, [r2, #0]
 8007560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	2bff      	cmp	r3, #255	; 0xff
 8007570:	d911      	bls.n	8007596 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	22ff      	movs	r2, #255	; 0xff
 8007576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757c:	b2da      	uxtb	r2, r3
 800757e:	2380      	movs	r3, #128	; 0x80
 8007580:	045c      	lsls	r4, r3, #17
 8007582:	230a      	movs	r3, #10
 8007584:	18fb      	adds	r3, r7, r3
 8007586:	8819      	ldrh	r1, [r3, #0]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	4b55      	ldr	r3, [pc, #340]	; (80076e0 <HAL_I2C_Master_Transmit+0x208>)
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	0023      	movs	r3, r4
 8007590:	f000 fb74 	bl	8007c7c <I2C_TransferConfig>
 8007594:	e075      	b.n	8007682 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	049c      	lsls	r4, r3, #18
 80075aa:	230a      	movs	r3, #10
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	8819      	ldrh	r1, [r3, #0]
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	4b4b      	ldr	r3, [pc, #300]	; (80076e0 <HAL_I2C_Master_Transmit+0x208>)
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	0023      	movs	r3, r4
 80075b8:	f000 fb60 	bl	8007c7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80075bc:	e061      	b.n	8007682 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	0018      	movs	r0, r3
 80075c6:	f000 f9f8 	bl	80079ba <I2C_WaitOnTXISFlagUntilTimeout>
 80075ca:	1e03      	subs	r3, r0, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e081      	b.n	80076d6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d03a      	beq.n	8007682 <HAL_I2C_Master_Transmit+0x1aa>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007610:	2b00      	cmp	r3, #0
 8007612:	d136      	bne.n	8007682 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	0013      	movs	r3, r2
 800761e:	2200      	movs	r2, #0
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	f000 f98b 	bl	800793c <I2C_WaitOnFlagUntilTimeout>
 8007626:	1e03      	subs	r3, r0, #0
 8007628:	d001      	beq.n	800762e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e053      	b.n	80076d6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007632:	b29b      	uxth	r3, r3
 8007634:	2bff      	cmp	r3, #255	; 0xff
 8007636:	d911      	bls.n	800765c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	22ff      	movs	r2, #255	; 0xff
 800763c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007642:	b2da      	uxtb	r2, r3
 8007644:	2380      	movs	r3, #128	; 0x80
 8007646:	045c      	lsls	r4, r3, #17
 8007648:	230a      	movs	r3, #10
 800764a:	18fb      	adds	r3, r7, r3
 800764c:	8819      	ldrh	r1, [r3, #0]
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	2300      	movs	r3, #0
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	0023      	movs	r3, r4
 8007656:	f000 fb11 	bl	8007c7c <I2C_TransferConfig>
 800765a:	e012      	b.n	8007682 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766a:	b2da      	uxtb	r2, r3
 800766c:	2380      	movs	r3, #128	; 0x80
 800766e:	049c      	lsls	r4, r3, #18
 8007670:	230a      	movs	r3, #10
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	8819      	ldrh	r1, [r3, #0]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	2300      	movs	r3, #0
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	0023      	movs	r3, r4
 800767e:	f000 fafd 	bl	8007c7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d198      	bne.n	80075be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	0018      	movs	r0, r3
 8007694:	f000 f9d0 	bl	8007a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007698:	1e03      	subs	r3, r0, #0
 800769a:	d001      	beq.n	80076a0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e01a      	b.n	80076d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2220      	movs	r2, #32
 80076a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	490c      	ldr	r1, [pc, #48]	; (80076e4 <HAL_I2C_Master_Transmit+0x20c>)
 80076b4:	400a      	ands	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2241      	movs	r2, #65	; 0x41
 80076bc:	2120      	movs	r1, #32
 80076be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2242      	movs	r2, #66	; 0x42
 80076c4:	2100      	movs	r1, #0
 80076c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2240      	movs	r2, #64	; 0x40
 80076cc:	2100      	movs	r1, #0
 80076ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	0018      	movs	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	b007      	add	sp, #28
 80076dc:	bd90      	pop	{r4, r7, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	80002000 	.word	0x80002000
 80076e4:	fe00e800 	.word	0xfe00e800

080076e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80076e8:	b590      	push	{r4, r7, lr}
 80076ea:	b089      	sub	sp, #36	; 0x24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	0008      	movs	r0, r1
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	0019      	movs	r1, r3
 80076f6:	230a      	movs	r3, #10
 80076f8:	18fb      	adds	r3, r7, r3
 80076fa:	1c02      	adds	r2, r0, #0
 80076fc:	801a      	strh	r2, [r3, #0]
 80076fe:	2308      	movs	r3, #8
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	1c0a      	adds	r2, r1, #0
 8007704:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2241      	movs	r2, #65	; 0x41
 800770a:	5c9b      	ldrb	r3, [r3, r2]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b20      	cmp	r3, #32
 8007710:	d000      	beq.n	8007714 <HAL_I2C_Master_Receive+0x2c>
 8007712:	e0e8      	b.n	80078e6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2240      	movs	r2, #64	; 0x40
 8007718:	5c9b      	ldrb	r3, [r3, r2]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_I2C_Master_Receive+0x3a>
 800771e:	2302      	movs	r3, #2
 8007720:	e0e2      	b.n	80078e8 <HAL_I2C_Master_Receive+0x200>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2240      	movs	r2, #64	; 0x40
 8007726:	2101      	movs	r1, #1
 8007728:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800772a:	f7fe fc87 	bl	800603c <HAL_GetTick>
 800772e:	0003      	movs	r3, r0
 8007730:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007732:	2380      	movs	r3, #128	; 0x80
 8007734:	0219      	lsls	r1, r3, #8
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	2319      	movs	r3, #25
 800773e:	2201      	movs	r2, #1
 8007740:	f000 f8fc 	bl	800793c <I2C_WaitOnFlagUntilTimeout>
 8007744:	1e03      	subs	r3, r0, #0
 8007746:	d001      	beq.n	800774c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e0cd      	b.n	80078e8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2241      	movs	r2, #65	; 0x41
 8007750:	2122      	movs	r1, #34	; 0x22
 8007752:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2242      	movs	r2, #66	; 0x42
 8007758:	2110      	movs	r1, #16
 800775a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2208      	movs	r2, #8
 800776c:	18ba      	adds	r2, r7, r2
 800776e:	8812      	ldrh	r2, [r2, #0]
 8007770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29b      	uxth	r3, r3
 800777e:	2bff      	cmp	r3, #255	; 0xff
 8007780:	d911      	bls.n	80077a6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	b2da      	uxtb	r2, r3
 800778e:	2380      	movs	r3, #128	; 0x80
 8007790:	045c      	lsls	r4, r3, #17
 8007792:	230a      	movs	r3, #10
 8007794:	18fb      	adds	r3, r7, r3
 8007796:	8819      	ldrh	r1, [r3, #0]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	4b55      	ldr	r3, [pc, #340]	; (80078f0 <HAL_I2C_Master_Receive+0x208>)
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	0023      	movs	r3, r4
 80077a0:	f000 fa6c 	bl	8007c7c <I2C_TransferConfig>
 80077a4:	e076      	b.n	8007894 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	2380      	movs	r3, #128	; 0x80
 80077b8:	049c      	lsls	r4, r3, #18
 80077ba:	230a      	movs	r3, #10
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	8819      	ldrh	r1, [r3, #0]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	4b4b      	ldr	r3, [pc, #300]	; (80078f0 <HAL_I2C_Master_Receive+0x208>)
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	0023      	movs	r3, r4
 80077c8:	f000 fa58 	bl	8007c7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80077cc:	e062      	b.n	8007894 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	0018      	movs	r0, r3
 80077d6:	f000 f96b 	bl	8007ab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077da:	1e03      	subs	r3, r0, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e082      	b.n	80078e8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fe:	3b01      	subs	r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d03a      	beq.n	8007894 <HAL_I2C_Master_Receive+0x1ac>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d136      	bne.n	8007894 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	0013      	movs	r3, r2
 8007830:	2200      	movs	r2, #0
 8007832:	2180      	movs	r1, #128	; 0x80
 8007834:	f000 f882 	bl	800793c <I2C_WaitOnFlagUntilTimeout>
 8007838:	1e03      	subs	r3, r0, #0
 800783a:	d001      	beq.n	8007840 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e053      	b.n	80078e8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29b      	uxth	r3, r3
 8007846:	2bff      	cmp	r3, #255	; 0xff
 8007848:	d911      	bls.n	800786e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007854:	b2da      	uxtb	r2, r3
 8007856:	2380      	movs	r3, #128	; 0x80
 8007858:	045c      	lsls	r4, r3, #17
 800785a:	230a      	movs	r3, #10
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	8819      	ldrh	r1, [r3, #0]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	2300      	movs	r3, #0
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	0023      	movs	r3, r4
 8007868:	f000 fa08 	bl	8007c7c <I2C_TransferConfig>
 800786c:	e012      	b.n	8007894 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	2380      	movs	r3, #128	; 0x80
 8007880:	049c      	lsls	r4, r3, #18
 8007882:	230a      	movs	r3, #10
 8007884:	18fb      	adds	r3, r7, r3
 8007886:	8819      	ldrh	r1, [r3, #0]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	2300      	movs	r3, #0
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	0023      	movs	r3, r4
 8007890:	f000 f9f4 	bl	8007c7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d197      	bne.n	80077ce <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	0018      	movs	r0, r3
 80078a6:	f000 f8c7 	bl	8007a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078aa:	1e03      	subs	r3, r0, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e01a      	b.n	80078e8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2220      	movs	r2, #32
 80078b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	490b      	ldr	r1, [pc, #44]	; (80078f4 <HAL_I2C_Master_Receive+0x20c>)
 80078c6:	400a      	ands	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2241      	movs	r2, #65	; 0x41
 80078ce:	2120      	movs	r1, #32
 80078d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2242      	movs	r2, #66	; 0x42
 80078d6:	2100      	movs	r1, #0
 80078d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2240      	movs	r2, #64	; 0x40
 80078de:	2100      	movs	r1, #0
 80078e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	e000      	b.n	80078e8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80078e6:	2302      	movs	r3, #2
  }
}
 80078e8:	0018      	movs	r0, r3
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b007      	add	sp, #28
 80078ee:	bd90      	pop	{r4, r7, pc}
 80078f0:	80002400 	.word	0x80002400
 80078f4:	fe00e800 	.word	0xfe00e800

080078f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2202      	movs	r2, #2
 8007908:	4013      	ands	r3, r2
 800790a:	2b02      	cmp	r3, #2
 800790c:	d103      	bne.n	8007916 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2201      	movs	r2, #1
 800791e:	4013      	ands	r3, r2
 8007920:	2b01      	cmp	r3, #1
 8007922:	d007      	beq.n	8007934 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2101      	movs	r1, #1
 8007930:	430a      	orrs	r2, r1
 8007932:	619a      	str	r2, [r3, #24]
  }
}
 8007934:	46c0      	nop			; (mov r8, r8)
 8007936:	46bd      	mov	sp, r7
 8007938:	b002      	add	sp, #8
 800793a:	bd80      	pop	{r7, pc}

0800793c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	1dfb      	adds	r3, r7, #7
 800794a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800794c:	e021      	b.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	d01e      	beq.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007954:	f7fe fb72 	bl	800603c <HAL_GetTick>
 8007958:	0002      	movs	r2, r0
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d302      	bcc.n	800796a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d113      	bne.n	8007992 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	2220      	movs	r2, #32
 8007970:	431a      	orrs	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2241      	movs	r2, #65	; 0x41
 800797a:	2120      	movs	r1, #32
 800797c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2242      	movs	r2, #66	; 0x42
 8007982:	2100      	movs	r1, #0
 8007984:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2240      	movs	r2, #64	; 0x40
 800798a:	2100      	movs	r1, #0
 800798c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e00f      	b.n	80079b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	4013      	ands	r3, r2
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	425a      	negs	r2, r3
 80079a2:	4153      	adcs	r3, r2
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	001a      	movs	r2, r3
 80079a8:	1dfb      	adds	r3, r7, #7
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d0ce      	beq.n	800794e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	0018      	movs	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b004      	add	sp, #16
 80079b8:	bd80      	pop	{r7, pc}

080079ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079c6:	e02b      	b.n	8007a20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	0018      	movs	r0, r3
 80079d0:	f000 f8da 	bl	8007b88 <I2C_IsAcknowledgeFailed>
 80079d4:	1e03      	subs	r3, r0, #0
 80079d6:	d001      	beq.n	80079dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e029      	b.n	8007a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	3301      	adds	r3, #1
 80079e0:	d01e      	beq.n	8007a20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e2:	f7fe fb2b 	bl	800603c <HAL_GetTick>
 80079e6:	0002      	movs	r2, r0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d113      	bne.n	8007a20 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fc:	2220      	movs	r2, #32
 80079fe:	431a      	orrs	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2241      	movs	r2, #65	; 0x41
 8007a08:	2120      	movs	r1, #32
 8007a0a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2242      	movs	r2, #66	; 0x42
 8007a10:	2100      	movs	r1, #0
 8007a12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2240      	movs	r2, #64	; 0x40
 8007a18:	2100      	movs	r1, #0
 8007a1a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e007      	b.n	8007a30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	2202      	movs	r2, #2
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d1cc      	bne.n	80079c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	0018      	movs	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	b004      	add	sp, #16
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a44:	e028      	b.n	8007a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 f89b 	bl	8007b88 <I2C_IsAcknowledgeFailed>
 8007a52:	1e03      	subs	r3, r0, #0
 8007a54:	d001      	beq.n	8007a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e026      	b.n	8007aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5a:	f7fe faef 	bl	800603c <HAL_GetTick>
 8007a5e:	0002      	movs	r2, r0
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d302      	bcc.n	8007a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d113      	bne.n	8007a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a74:	2220      	movs	r2, #32
 8007a76:	431a      	orrs	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2241      	movs	r2, #65	; 0x41
 8007a80:	2120      	movs	r1, #32
 8007a82:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2242      	movs	r2, #66	; 0x42
 8007a88:	2100      	movs	r1, #0
 8007a8a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2240      	movs	r2, #64	; 0x40
 8007a90:	2100      	movs	r1, #0
 8007a92:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e007      	b.n	8007aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	d1cf      	bne.n	8007a46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b004      	add	sp, #16
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007abc:	e055      	b.n	8007b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	68b9      	ldr	r1, [r7, #8]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f000 f85f 	bl	8007b88 <I2C_IsAcknowledgeFailed>
 8007aca:	1e03      	subs	r3, r0, #0
 8007acc:	d001      	beq.n	8007ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e053      	b.n	8007b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d129      	bne.n	8007b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d105      	bne.n	8007afa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e03f      	b.n	8007b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2220      	movs	r2, #32
 8007b00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	491d      	ldr	r1, [pc, #116]	; (8007b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007b0e:	400a      	ands	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2241      	movs	r2, #65	; 0x41
 8007b1c:	2120      	movs	r1, #32
 8007b1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2242      	movs	r2, #66	; 0x42
 8007b24:	2100      	movs	r1, #0
 8007b26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2240      	movs	r2, #64	; 0x40
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e022      	b.n	8007b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b34:	f7fe fa82 	bl	800603c <HAL_GetTick>
 8007b38:	0002      	movs	r2, r0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d302      	bcc.n	8007b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10f      	bne.n	8007b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4e:	2220      	movs	r2, #32
 8007b50:	431a      	orrs	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2241      	movs	r2, #65	; 0x41
 8007b5a:	2120      	movs	r1, #32
 8007b5c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	2100      	movs	r1, #0
 8007b64:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e007      	b.n	8007b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	2204      	movs	r2, #4
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d1a2      	bne.n	8007abe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b004      	add	sp, #16
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	fe00e800 	.word	0xfe00e800

08007b88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	2210      	movs	r2, #16
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d164      	bne.n	8007c6c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	049b      	lsls	r3, r3, #18
 8007bac:	401a      	ands	r2, r3
 8007bae:	2380      	movs	r3, #128	; 0x80
 8007bb0:	049b      	lsls	r3, r3, #18
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d02b      	beq.n	8007c0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2180      	movs	r1, #128	; 0x80
 8007bc2:	01c9      	lsls	r1, r1, #7
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bc8:	e021      	b.n	8007c0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	d01e      	beq.n	8007c0e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd0:	f7fe fa34 	bl	800603c <HAL_GetTick>
 8007bd4:	0002      	movs	r2, r0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d302      	bcc.n	8007be6 <I2C_IsAcknowledgeFailed+0x5e>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d113      	bne.n	8007c0e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bea:	2220      	movs	r2, #32
 8007bec:	431a      	orrs	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2241      	movs	r2, #65	; 0x41
 8007bf6:	2120      	movs	r1, #32
 8007bf8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2242      	movs	r2, #66	; 0x42
 8007bfe:	2100      	movs	r1, #0
 8007c00:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2240      	movs	r2, #64	; 0x40
 8007c06:	2100      	movs	r1, #0
 8007c08:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e02f      	b.n	8007c6e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	2220      	movs	r2, #32
 8007c16:	4013      	ands	r3, r2
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d1d6      	bne.n	8007bca <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2210      	movs	r2, #16
 8007c22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f7ff fe62 	bl	80078f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	490e      	ldr	r1, [pc, #56]	; (8007c78 <I2C_IsAcknowledgeFailed+0xf0>)
 8007c40:	400a      	ands	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c48:	2204      	movs	r2, #4
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2241      	movs	r2, #65	; 0x41
 8007c54:	2120      	movs	r1, #32
 8007c56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2242      	movs	r2, #66	; 0x42
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2240      	movs	r2, #64	; 0x40
 8007c64:	2100      	movs	r1, #0
 8007c66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e000      	b.n	8007c6e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	0018      	movs	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	b004      	add	sp, #16
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	fe00e800 	.word	0xfe00e800

08007c7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c7c:	b590      	push	{r4, r7, lr}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	0008      	movs	r0, r1
 8007c86:	0011      	movs	r1, r2
 8007c88:	607b      	str	r3, [r7, #4]
 8007c8a:	240a      	movs	r4, #10
 8007c8c:	193b      	adds	r3, r7, r4
 8007c8e:	1c02      	adds	r2, r0, #0
 8007c90:	801a      	strh	r2, [r3, #0]
 8007c92:	2009      	movs	r0, #9
 8007c94:	183b      	adds	r3, r7, r0
 8007c96:	1c0a      	adds	r2, r1, #0
 8007c98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	6a3a      	ldr	r2, [r7, #32]
 8007ca2:	0d51      	lsrs	r1, r2, #21
 8007ca4:	2280      	movs	r2, #128	; 0x80
 8007ca6:	00d2      	lsls	r2, r2, #3
 8007ca8:	400a      	ands	r2, r1
 8007caa:	490e      	ldr	r1, [pc, #56]	; (8007ce4 <I2C_TransferConfig+0x68>)
 8007cac:	430a      	orrs	r2, r1
 8007cae:	43d2      	mvns	r2, r2
 8007cb0:	401a      	ands	r2, r3
 8007cb2:	0011      	movs	r1, r2
 8007cb4:	193b      	adds	r3, r7, r4
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	059b      	lsls	r3, r3, #22
 8007cba:	0d9a      	lsrs	r2, r3, #22
 8007cbc:	183b      	adds	r3, r7, r0
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	0418      	lsls	r0, r3, #16
 8007cc2:	23ff      	movs	r3, #255	; 0xff
 8007cc4:	041b      	lsls	r3, r3, #16
 8007cc6:	4003      	ands	r3, r0
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b005      	add	sp, #20
 8007ce0:	bd90      	pop	{r4, r7, pc}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	03ff63ff 	.word	0x03ff63ff

08007ce8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2241      	movs	r2, #65	; 0x41
 8007cf6:	5c9b      	ldrb	r3, [r3, r2]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d138      	bne.n	8007d70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2240      	movs	r2, #64	; 0x40
 8007d02:	5c9b      	ldrb	r3, [r3, r2]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e032      	b.n	8007d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2240      	movs	r2, #64	; 0x40
 8007d10:	2101      	movs	r1, #1
 8007d12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2241      	movs	r2, #65	; 0x41
 8007d18:	2124      	movs	r1, #36	; 0x24
 8007d1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2101      	movs	r1, #1
 8007d28:	438a      	bics	r2, r1
 8007d2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4911      	ldr	r1, [pc, #68]	; (8007d7c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007d38:	400a      	ands	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6819      	ldr	r1, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2101      	movs	r1, #1
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2241      	movs	r2, #65	; 0x41
 8007d60:	2120      	movs	r1, #32
 8007d62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2240      	movs	r2, #64	; 0x40
 8007d68:	2100      	movs	r1, #0
 8007d6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e000      	b.n	8007d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d70:	2302      	movs	r3, #2
  }
}
 8007d72:	0018      	movs	r0, r3
 8007d74:	46bd      	mov	sp, r7
 8007d76:	b002      	add	sp, #8
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	ffffefff 	.word	0xffffefff

08007d80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2241      	movs	r2, #65	; 0x41
 8007d8e:	5c9b      	ldrb	r3, [r3, r2]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d139      	bne.n	8007e0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2240      	movs	r2, #64	; 0x40
 8007d9a:	5c9b      	ldrb	r3, [r3, r2]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e033      	b.n	8007e0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2240      	movs	r2, #64	; 0x40
 8007da8:	2101      	movs	r1, #1
 8007daa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2241      	movs	r2, #65	; 0x41
 8007db0:	2124      	movs	r1, #36	; 0x24
 8007db2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	438a      	bics	r2, r1
 8007dc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a11      	ldr	r2, [pc, #68]	; (8007e14 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2101      	movs	r1, #1
 8007df2:	430a      	orrs	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2241      	movs	r2, #65	; 0x41
 8007dfa:	2120      	movs	r1, #32
 8007dfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2240      	movs	r2, #64	; 0x40
 8007e02:	2100      	movs	r1, #0
 8007e04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e000      	b.n	8007e0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
  }
}
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b004      	add	sp, #16
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	fffff0ff 	.word	0xfffff0ff

08007e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f000 fb76 	bl	8008518 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	4013      	ands	r3, r2
 8007e34:	d100      	bne.n	8007e38 <HAL_RCC_OscConfig+0x20>
 8007e36:	e08e      	b.n	8007f56 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007e38:	4bc5      	ldr	r3, [pc, #788]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	220c      	movs	r2, #12
 8007e3e:	4013      	ands	r3, r2
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d00e      	beq.n	8007e62 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007e44:	4bc2      	ldr	r3, [pc, #776]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	220c      	movs	r2, #12
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d117      	bne.n	8007e80 <HAL_RCC_OscConfig+0x68>
 8007e50:	4bbf      	ldr	r3, [pc, #764]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	23c0      	movs	r3, #192	; 0xc0
 8007e56:	025b      	lsls	r3, r3, #9
 8007e58:	401a      	ands	r2, r3
 8007e5a:	2380      	movs	r3, #128	; 0x80
 8007e5c:	025b      	lsls	r3, r3, #9
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d10e      	bne.n	8007e80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e62:	4bbb      	ldr	r3, [pc, #748]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	2380      	movs	r3, #128	; 0x80
 8007e68:	029b      	lsls	r3, r3, #10
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	d100      	bne.n	8007e70 <HAL_RCC_OscConfig+0x58>
 8007e6e:	e071      	b.n	8007f54 <HAL_RCC_OscConfig+0x13c>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d000      	beq.n	8007e7a <HAL_RCC_OscConfig+0x62>
 8007e78:	e06c      	b.n	8007f54 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f000 fb4c 	bl	8008518 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d107      	bne.n	8007e98 <HAL_RCC_OscConfig+0x80>
 8007e88:	4bb1      	ldr	r3, [pc, #708]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	4bb0      	ldr	r3, [pc, #704]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007e8e:	2180      	movs	r1, #128	; 0x80
 8007e90:	0249      	lsls	r1, r1, #9
 8007e92:	430a      	orrs	r2, r1
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	e02f      	b.n	8007ef8 <HAL_RCC_OscConfig+0xe0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10c      	bne.n	8007eba <HAL_RCC_OscConfig+0xa2>
 8007ea0:	4bab      	ldr	r3, [pc, #684]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4baa      	ldr	r3, [pc, #680]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ea6:	49ab      	ldr	r1, [pc, #684]	; (8008154 <HAL_RCC_OscConfig+0x33c>)
 8007ea8:	400a      	ands	r2, r1
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	4ba8      	ldr	r3, [pc, #672]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	4ba7      	ldr	r3, [pc, #668]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007eb2:	49a9      	ldr	r1, [pc, #676]	; (8008158 <HAL_RCC_OscConfig+0x340>)
 8007eb4:	400a      	ands	r2, r1
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e01e      	b.n	8007ef8 <HAL_RCC_OscConfig+0xe0>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d10e      	bne.n	8007ee0 <HAL_RCC_OscConfig+0xc8>
 8007ec2:	4ba3      	ldr	r3, [pc, #652]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4ba2      	ldr	r3, [pc, #648]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ec8:	2180      	movs	r1, #128	; 0x80
 8007eca:	02c9      	lsls	r1, r1, #11
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	4b9f      	ldr	r3, [pc, #636]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b9e      	ldr	r3, [pc, #632]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ed6:	2180      	movs	r1, #128	; 0x80
 8007ed8:	0249      	lsls	r1, r1, #9
 8007eda:	430a      	orrs	r2, r1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e00b      	b.n	8007ef8 <HAL_RCC_OscConfig+0xe0>
 8007ee0:	4b9b      	ldr	r3, [pc, #620]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	4b9a      	ldr	r3, [pc, #616]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ee6:	499b      	ldr	r1, [pc, #620]	; (8008154 <HAL_RCC_OscConfig+0x33c>)
 8007ee8:	400a      	ands	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	4b98      	ldr	r3, [pc, #608]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	4b97      	ldr	r3, [pc, #604]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ef2:	4999      	ldr	r1, [pc, #612]	; (8008158 <HAL_RCC_OscConfig+0x340>)
 8007ef4:	400a      	ands	r2, r1
 8007ef6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d014      	beq.n	8007f2a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f00:	f7fe f89c 	bl	800603c <HAL_GetTick>
 8007f04:	0003      	movs	r3, r0
 8007f06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f08:	e008      	b.n	8007f1c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f0a:	f7fe f897 	bl	800603c <HAL_GetTick>
 8007f0e:	0002      	movs	r2, r0
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b64      	cmp	r3, #100	; 0x64
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e2fd      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f1c:	4b8c      	ldr	r3, [pc, #560]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	2380      	movs	r3, #128	; 0x80
 8007f22:	029b      	lsls	r3, r3, #10
 8007f24:	4013      	ands	r3, r2
 8007f26:	d0f0      	beq.n	8007f0a <HAL_RCC_OscConfig+0xf2>
 8007f28:	e015      	b.n	8007f56 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f2a:	f7fe f887 	bl	800603c <HAL_GetTick>
 8007f2e:	0003      	movs	r3, r0
 8007f30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f34:	f7fe f882 	bl	800603c <HAL_GetTick>
 8007f38:	0002      	movs	r2, r0
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b64      	cmp	r3, #100	; 0x64
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e2e8      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f46:	4b82      	ldr	r3, [pc, #520]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	2380      	movs	r3, #128	; 0x80
 8007f4c:	029b      	lsls	r3, r3, #10
 8007f4e:	4013      	ands	r3, r2
 8007f50:	d1f0      	bne.n	8007f34 <HAL_RCC_OscConfig+0x11c>
 8007f52:	e000      	b.n	8007f56 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	d100      	bne.n	8007f62 <HAL_RCC_OscConfig+0x14a>
 8007f60:	e06c      	b.n	800803c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007f62:	4b7b      	ldr	r3, [pc, #492]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	220c      	movs	r2, #12
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007f6c:	4b78      	ldr	r3, [pc, #480]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	220c      	movs	r2, #12
 8007f72:	4013      	ands	r3, r2
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d11f      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x1a0>
 8007f78:	4b75      	ldr	r3, [pc, #468]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	23c0      	movs	r3, #192	; 0xc0
 8007f7e:	025b      	lsls	r3, r3, #9
 8007f80:	401a      	ands	r2, r3
 8007f82:	2380      	movs	r3, #128	; 0x80
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d116      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f8a:	4b71      	ldr	r3, [pc, #452]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	4013      	ands	r3, r2
 8007f92:	d005      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x188>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d001      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e2bb      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa0:	4b6b      	ldr	r3, [pc, #428]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	22f8      	movs	r2, #248	; 0xf8
 8007fa6:	4393      	bics	r3, r2
 8007fa8:	0019      	movs	r1, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	00da      	lsls	r2, r3, #3
 8007fb0:	4b67      	ldr	r3, [pc, #412]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fb6:	e041      	b.n	800803c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d024      	beq.n	800800a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fc0:	4b63      	ldr	r3, [pc, #396]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	4b62      	ldr	r3, [pc, #392]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fcc:	f7fe f836 	bl	800603c <HAL_GetTick>
 8007fd0:	0003      	movs	r3, r0
 8007fd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fd6:	f7fe f831 	bl	800603c <HAL_GetTick>
 8007fda:	0002      	movs	r2, r0
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e297      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fe8:	4b59      	ldr	r3, [pc, #356]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2202      	movs	r2, #2
 8007fee:	4013      	ands	r3, r2
 8007ff0:	d0f1      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff2:	4b57      	ldr	r3, [pc, #348]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	22f8      	movs	r2, #248	; 0xf8
 8007ff8:	4393      	bics	r3, r2
 8007ffa:	0019      	movs	r1, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	00da      	lsls	r2, r3, #3
 8008002:	4b53      	ldr	r3, [pc, #332]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008004:	430a      	orrs	r2, r1
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	e018      	b.n	800803c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800800a:	4b51      	ldr	r3, [pc, #324]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b50      	ldr	r3, [pc, #320]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008010:	2101      	movs	r1, #1
 8008012:	438a      	bics	r2, r1
 8008014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008016:	f7fe f811 	bl	800603c <HAL_GetTick>
 800801a:	0003      	movs	r3, r0
 800801c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008020:	f7fe f80c 	bl	800603c <HAL_GetTick>
 8008024:	0002      	movs	r2, r0
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e272      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008032:	4b47      	ldr	r3, [pc, #284]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2202      	movs	r2, #2
 8008038:	4013      	ands	r3, r2
 800803a:	d1f1      	bne.n	8008020 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2208      	movs	r2, #8
 8008042:	4013      	ands	r3, r2
 8008044:	d036      	beq.n	80080b4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d019      	beq.n	8008082 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800804e:	4b40      	ldr	r3, [pc, #256]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008052:	4b3f      	ldr	r3, [pc, #252]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008054:	2101      	movs	r1, #1
 8008056:	430a      	orrs	r2, r1
 8008058:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800805a:	f7fd ffef 	bl	800603c <HAL_GetTick>
 800805e:	0003      	movs	r3, r0
 8008060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008064:	f7fd ffea 	bl	800603c <HAL_GetTick>
 8008068:	0002      	movs	r2, r0
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e250      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008076:	4b36      	ldr	r3, [pc, #216]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2202      	movs	r2, #2
 800807c:	4013      	ands	r3, r2
 800807e:	d0f1      	beq.n	8008064 <HAL_RCC_OscConfig+0x24c>
 8008080:	e018      	b.n	80080b4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008082:	4b33      	ldr	r3, [pc, #204]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008086:	4b32      	ldr	r3, [pc, #200]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008088:	2101      	movs	r1, #1
 800808a:	438a      	bics	r2, r1
 800808c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800808e:	f7fd ffd5 	bl	800603c <HAL_GetTick>
 8008092:	0003      	movs	r3, r0
 8008094:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008096:	e008      	b.n	80080aa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008098:	f7fd ffd0 	bl	800603c <HAL_GetTick>
 800809c:	0002      	movs	r2, r0
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e236      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080aa:	4b29      	ldr	r3, [pc, #164]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	2202      	movs	r2, #2
 80080b0:	4013      	ands	r3, r2
 80080b2:	d1f1      	bne.n	8008098 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2204      	movs	r2, #4
 80080ba:	4013      	ands	r3, r2
 80080bc:	d100      	bne.n	80080c0 <HAL_RCC_OscConfig+0x2a8>
 80080be:	e0b5      	b.n	800822c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c0:	201f      	movs	r0, #31
 80080c2:	183b      	adds	r3, r7, r0
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080c8:	4b21      	ldr	r3, [pc, #132]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	2380      	movs	r3, #128	; 0x80
 80080ce:	055b      	lsls	r3, r3, #21
 80080d0:	4013      	ands	r3, r2
 80080d2:	d110      	bne.n	80080f6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080d4:	4b1e      	ldr	r3, [pc, #120]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 80080da:	2180      	movs	r1, #128	; 0x80
 80080dc:	0549      	lsls	r1, r1, #21
 80080de:	430a      	orrs	r2, r1
 80080e0:	61da      	str	r2, [r3, #28]
 80080e2:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 80080e4:	69da      	ldr	r2, [r3, #28]
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	055b      	lsls	r3, r3, #21
 80080ea:	4013      	ands	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80080f0:	183b      	adds	r3, r7, r0
 80080f2:	2201      	movs	r2, #1
 80080f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080f6:	4b19      	ldr	r3, [pc, #100]	; (800815c <HAL_RCC_OscConfig+0x344>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	2380      	movs	r3, #128	; 0x80
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	4013      	ands	r3, r2
 8008100:	d11a      	bne.n	8008138 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <HAL_RCC_OscConfig+0x344>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4b15      	ldr	r3, [pc, #84]	; (800815c <HAL_RCC_OscConfig+0x344>)
 8008108:	2180      	movs	r1, #128	; 0x80
 800810a:	0049      	lsls	r1, r1, #1
 800810c:	430a      	orrs	r2, r1
 800810e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008110:	f7fd ff94 	bl	800603c <HAL_GetTick>
 8008114:	0003      	movs	r3, r0
 8008116:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008118:	e008      	b.n	800812c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800811a:	f7fd ff8f 	bl	800603c <HAL_GetTick>
 800811e:	0002      	movs	r2, r0
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b64      	cmp	r3, #100	; 0x64
 8008126:	d901      	bls.n	800812c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e1f5      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800812c:	4b0b      	ldr	r3, [pc, #44]	; (800815c <HAL_RCC_OscConfig+0x344>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	2380      	movs	r3, #128	; 0x80
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	4013      	ands	r3, r2
 8008136:	d0f0      	beq.n	800811a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d10f      	bne.n	8008160 <HAL_RCC_OscConfig+0x348>
 8008140:	4b03      	ldr	r3, [pc, #12]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008142:	6a1a      	ldr	r2, [r3, #32]
 8008144:	4b02      	ldr	r3, [pc, #8]	; (8008150 <HAL_RCC_OscConfig+0x338>)
 8008146:	2101      	movs	r1, #1
 8008148:	430a      	orrs	r2, r1
 800814a:	621a      	str	r2, [r3, #32]
 800814c:	e036      	b.n	80081bc <HAL_RCC_OscConfig+0x3a4>
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	40021000 	.word	0x40021000
 8008154:	fffeffff 	.word	0xfffeffff
 8008158:	fffbffff 	.word	0xfffbffff
 800815c:	40007000 	.word	0x40007000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10c      	bne.n	8008182 <HAL_RCC_OscConfig+0x36a>
 8008168:	4bca      	ldr	r3, [pc, #808]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800816a:	6a1a      	ldr	r2, [r3, #32]
 800816c:	4bc9      	ldr	r3, [pc, #804]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800816e:	2101      	movs	r1, #1
 8008170:	438a      	bics	r2, r1
 8008172:	621a      	str	r2, [r3, #32]
 8008174:	4bc7      	ldr	r3, [pc, #796]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008176:	6a1a      	ldr	r2, [r3, #32]
 8008178:	4bc6      	ldr	r3, [pc, #792]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800817a:	2104      	movs	r1, #4
 800817c:	438a      	bics	r2, r1
 800817e:	621a      	str	r2, [r3, #32]
 8008180:	e01c      	b.n	80081bc <HAL_RCC_OscConfig+0x3a4>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	2b05      	cmp	r3, #5
 8008188:	d10c      	bne.n	80081a4 <HAL_RCC_OscConfig+0x38c>
 800818a:	4bc2      	ldr	r3, [pc, #776]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800818c:	6a1a      	ldr	r2, [r3, #32]
 800818e:	4bc1      	ldr	r3, [pc, #772]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008190:	2104      	movs	r1, #4
 8008192:	430a      	orrs	r2, r1
 8008194:	621a      	str	r2, [r3, #32]
 8008196:	4bbf      	ldr	r3, [pc, #764]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008198:	6a1a      	ldr	r2, [r3, #32]
 800819a:	4bbe      	ldr	r3, [pc, #760]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800819c:	2101      	movs	r1, #1
 800819e:	430a      	orrs	r2, r1
 80081a0:	621a      	str	r2, [r3, #32]
 80081a2:	e00b      	b.n	80081bc <HAL_RCC_OscConfig+0x3a4>
 80081a4:	4bbb      	ldr	r3, [pc, #748]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	4bba      	ldr	r3, [pc, #744]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80081aa:	2101      	movs	r1, #1
 80081ac:	438a      	bics	r2, r1
 80081ae:	621a      	str	r2, [r3, #32]
 80081b0:	4bb8      	ldr	r3, [pc, #736]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	4bb7      	ldr	r3, [pc, #732]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80081b6:	2104      	movs	r1, #4
 80081b8:	438a      	bics	r2, r1
 80081ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d014      	beq.n	80081ee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081c4:	f7fd ff3a 	bl	800603c <HAL_GetTick>
 80081c8:	0003      	movs	r3, r0
 80081ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081cc:	e009      	b.n	80081e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ce:	f7fd ff35 	bl	800603c <HAL_GetTick>
 80081d2:	0002      	movs	r2, r0
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	4aaf      	ldr	r2, [pc, #700]	; (8008498 <HAL_RCC_OscConfig+0x680>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e19a      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081e2:	4bac      	ldr	r3, [pc, #688]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	2202      	movs	r2, #2
 80081e8:	4013      	ands	r3, r2
 80081ea:	d0f0      	beq.n	80081ce <HAL_RCC_OscConfig+0x3b6>
 80081ec:	e013      	b.n	8008216 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ee:	f7fd ff25 	bl	800603c <HAL_GetTick>
 80081f2:	0003      	movs	r3, r0
 80081f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081f6:	e009      	b.n	800820c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081f8:	f7fd ff20 	bl	800603c <HAL_GetTick>
 80081fc:	0002      	movs	r2, r0
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	4aa5      	ldr	r2, [pc, #660]	; (8008498 <HAL_RCC_OscConfig+0x680>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d901      	bls.n	800820c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e185      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800820c:	4ba1      	ldr	r3, [pc, #644]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	2202      	movs	r2, #2
 8008212:	4013      	ands	r3, r2
 8008214:	d1f0      	bne.n	80081f8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008216:	231f      	movs	r3, #31
 8008218:	18fb      	adds	r3, r7, r3
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d105      	bne.n	800822c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008220:	4b9c      	ldr	r3, [pc, #624]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	4b9b      	ldr	r3, [pc, #620]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008226:	499d      	ldr	r1, [pc, #628]	; (800849c <HAL_RCC_OscConfig+0x684>)
 8008228:	400a      	ands	r2, r1
 800822a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2210      	movs	r2, #16
 8008232:	4013      	ands	r3, r2
 8008234:	d063      	beq.n	80082fe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d12a      	bne.n	8008294 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800823e:	4b95      	ldr	r3, [pc, #596]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008242:	4b94      	ldr	r3, [pc, #592]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008244:	2104      	movs	r1, #4
 8008246:	430a      	orrs	r2, r1
 8008248:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800824a:	4b92      	ldr	r3, [pc, #584]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800824c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800824e:	4b91      	ldr	r3, [pc, #580]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008250:	2101      	movs	r1, #1
 8008252:	430a      	orrs	r2, r1
 8008254:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008256:	f7fd fef1 	bl	800603c <HAL_GetTick>
 800825a:	0003      	movs	r3, r0
 800825c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008260:	f7fd feec 	bl	800603c <HAL_GetTick>
 8008264:	0002      	movs	r2, r0
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e152      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008272:	4b88      	ldr	r3, [pc, #544]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	2202      	movs	r2, #2
 8008278:	4013      	ands	r3, r2
 800827a:	d0f1      	beq.n	8008260 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800827c:	4b85      	ldr	r3, [pc, #532]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	22f8      	movs	r2, #248	; 0xf8
 8008282:	4393      	bics	r3, r2
 8008284:	0019      	movs	r1, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	00da      	lsls	r2, r3, #3
 800828c:	4b81      	ldr	r3, [pc, #516]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800828e:	430a      	orrs	r2, r1
 8008290:	635a      	str	r2, [r3, #52]	; 0x34
 8008292:	e034      	b.n	80082fe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	3305      	adds	r3, #5
 800829a:	d111      	bne.n	80082c0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800829c:	4b7d      	ldr	r3, [pc, #500]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800829e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a0:	4b7c      	ldr	r3, [pc, #496]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082a2:	2104      	movs	r1, #4
 80082a4:	438a      	bics	r2, r1
 80082a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80082a8:	4b7a      	ldr	r3, [pc, #488]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ac:	22f8      	movs	r2, #248	; 0xf8
 80082ae:	4393      	bics	r3, r2
 80082b0:	0019      	movs	r1, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	00da      	lsls	r2, r3, #3
 80082b8:	4b76      	ldr	r3, [pc, #472]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082ba:	430a      	orrs	r2, r1
 80082bc:	635a      	str	r2, [r3, #52]	; 0x34
 80082be:	e01e      	b.n	80082fe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80082c0:	4b74      	ldr	r3, [pc, #464]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082c4:	4b73      	ldr	r3, [pc, #460]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082c6:	2104      	movs	r1, #4
 80082c8:	430a      	orrs	r2, r1
 80082ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80082cc:	4b71      	ldr	r3, [pc, #452]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d0:	4b70      	ldr	r3, [pc, #448]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082d2:	2101      	movs	r1, #1
 80082d4:	438a      	bics	r2, r1
 80082d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d8:	f7fd feb0 	bl	800603c <HAL_GetTick>
 80082dc:	0003      	movs	r3, r0
 80082de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80082e0:	e008      	b.n	80082f4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80082e2:	f7fd feab 	bl	800603c <HAL_GetTick>
 80082e6:	0002      	movs	r2, r0
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e111      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80082f4:	4b67      	ldr	r3, [pc, #412]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80082f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f8:	2202      	movs	r2, #2
 80082fa:	4013      	ands	r3, r2
 80082fc:	d1f1      	bne.n	80082e2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2220      	movs	r2, #32
 8008304:	4013      	ands	r3, r2
 8008306:	d05c      	beq.n	80083c2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008308:	4b62      	ldr	r3, [pc, #392]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	220c      	movs	r2, #12
 800830e:	4013      	ands	r3, r2
 8008310:	2b0c      	cmp	r3, #12
 8008312:	d00e      	beq.n	8008332 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008314:	4b5f      	ldr	r3, [pc, #380]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	220c      	movs	r2, #12
 800831a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800831c:	2b08      	cmp	r3, #8
 800831e:	d114      	bne.n	800834a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008320:	4b5c      	ldr	r3, [pc, #368]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	23c0      	movs	r3, #192	; 0xc0
 8008326:	025b      	lsls	r3, r3, #9
 8008328:	401a      	ands	r2, r3
 800832a:	23c0      	movs	r3, #192	; 0xc0
 800832c:	025b      	lsls	r3, r3, #9
 800832e:	429a      	cmp	r2, r3
 8008330:	d10b      	bne.n	800834a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008332:	4b58      	ldr	r3, [pc, #352]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008336:	2380      	movs	r3, #128	; 0x80
 8008338:	025b      	lsls	r3, r3, #9
 800833a:	4013      	ands	r3, r2
 800833c:	d040      	beq.n	80083c0 <HAL_RCC_OscConfig+0x5a8>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d03c      	beq.n	80083c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e0e6      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01b      	beq.n	800838a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008352:	4b50      	ldr	r3, [pc, #320]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008356:	4b4f      	ldr	r3, [pc, #316]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008358:	2180      	movs	r1, #128	; 0x80
 800835a:	0249      	lsls	r1, r1, #9
 800835c:	430a      	orrs	r2, r1
 800835e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008360:	f7fd fe6c 	bl	800603c <HAL_GetTick>
 8008364:	0003      	movs	r3, r0
 8008366:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008368:	e008      	b.n	800837c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800836a:	f7fd fe67 	bl	800603c <HAL_GetTick>
 800836e:	0002      	movs	r2, r0
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e0cd      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800837c:	4b45      	ldr	r3, [pc, #276]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800837e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008380:	2380      	movs	r3, #128	; 0x80
 8008382:	025b      	lsls	r3, r3, #9
 8008384:	4013      	ands	r3, r2
 8008386:	d0f0      	beq.n	800836a <HAL_RCC_OscConfig+0x552>
 8008388:	e01b      	b.n	80083c2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800838a:	4b42      	ldr	r3, [pc, #264]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800838c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838e:	4b41      	ldr	r3, [pc, #260]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008390:	4943      	ldr	r1, [pc, #268]	; (80084a0 <HAL_RCC_OscConfig+0x688>)
 8008392:	400a      	ands	r2, r1
 8008394:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008396:	f7fd fe51 	bl	800603c <HAL_GetTick>
 800839a:	0003      	movs	r3, r0
 800839c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083a0:	f7fd fe4c 	bl	800603c <HAL_GetTick>
 80083a4:	0002      	movs	r2, r0
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e0b2      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80083b2:	4b38      	ldr	r3, [pc, #224]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80083b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b6:	2380      	movs	r3, #128	; 0x80
 80083b8:	025b      	lsls	r3, r3, #9
 80083ba:	4013      	ands	r3, r2
 80083bc:	d1f0      	bne.n	80083a0 <HAL_RCC_OscConfig+0x588>
 80083be:	e000      	b.n	80083c2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80083c0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d100      	bne.n	80083cc <HAL_RCC_OscConfig+0x5b4>
 80083ca:	e0a4      	b.n	8008516 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083cc:	4b31      	ldr	r3, [pc, #196]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	220c      	movs	r2, #12
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d100      	bne.n	80083da <HAL_RCC_OscConfig+0x5c2>
 80083d8:	e078      	b.n	80084cc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d14c      	bne.n	800847c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e2:	4b2c      	ldr	r3, [pc, #176]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4b2b      	ldr	r3, [pc, #172]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 80083e8:	492e      	ldr	r1, [pc, #184]	; (80084a4 <HAL_RCC_OscConfig+0x68c>)
 80083ea:	400a      	ands	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ee:	f7fd fe25 	bl	800603c <HAL_GetTick>
 80083f2:	0003      	movs	r3, r0
 80083f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f8:	f7fd fe20 	bl	800603c <HAL_GetTick>
 80083fc:	0002      	movs	r2, r0
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e086      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800840a:	4b22      	ldr	r3, [pc, #136]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	2380      	movs	r3, #128	; 0x80
 8008410:	049b      	lsls	r3, r3, #18
 8008412:	4013      	ands	r3, r2
 8008414:	d1f0      	bne.n	80083f8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008416:	4b1f      	ldr	r3, [pc, #124]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	220f      	movs	r2, #15
 800841c:	4393      	bics	r3, r2
 800841e:	0019      	movs	r1, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008424:	4b1b      	ldr	r3, [pc, #108]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008426:	430a      	orrs	r2, r1
 8008428:	62da      	str	r2, [r3, #44]	; 0x2c
 800842a:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	4a1e      	ldr	r2, [pc, #120]	; (80084a8 <HAL_RCC_OscConfig+0x690>)
 8008430:	4013      	ands	r3, r2
 8008432:	0019      	movs	r1, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	431a      	orrs	r2, r3
 800843e:	4b15      	ldr	r3, [pc, #84]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008444:	4b13      	ldr	r3, [pc, #76]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800844a:	2180      	movs	r1, #128	; 0x80
 800844c:	0449      	lsls	r1, r1, #17
 800844e:	430a      	orrs	r2, r1
 8008450:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008452:	f7fd fdf3 	bl	800603c <HAL_GetTick>
 8008456:	0003      	movs	r3, r0
 8008458:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800845c:	f7fd fdee 	bl	800603c <HAL_GetTick>
 8008460:	0002      	movs	r2, r0
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e054      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	2380      	movs	r3, #128	; 0x80
 8008474:	049b      	lsls	r3, r3, #18
 8008476:	4013      	ands	r3, r2
 8008478:	d0f0      	beq.n	800845c <HAL_RCC_OscConfig+0x644>
 800847a:	e04c      	b.n	8008516 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b04      	ldr	r3, [pc, #16]	; (8008494 <HAL_RCC_OscConfig+0x67c>)
 8008482:	4908      	ldr	r1, [pc, #32]	; (80084a4 <HAL_RCC_OscConfig+0x68c>)
 8008484:	400a      	ands	r2, r1
 8008486:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008488:	f7fd fdd8 	bl	800603c <HAL_GetTick>
 800848c:	0003      	movs	r3, r0
 800848e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008490:	e015      	b.n	80084be <HAL_RCC_OscConfig+0x6a6>
 8008492:	46c0      	nop			; (mov r8, r8)
 8008494:	40021000 	.word	0x40021000
 8008498:	00001388 	.word	0x00001388
 800849c:	efffffff 	.word	0xefffffff
 80084a0:	fffeffff 	.word	0xfffeffff
 80084a4:	feffffff 	.word	0xfeffffff
 80084a8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084ac:	f7fd fdc6 	bl	800603c <HAL_GetTick>
 80084b0:	0002      	movs	r2, r0
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e02c      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80084be:	4b18      	ldr	r3, [pc, #96]	; (8008520 <HAL_RCC_OscConfig+0x708>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	2380      	movs	r3, #128	; 0x80
 80084c4:	049b      	lsls	r3, r3, #18
 80084c6:	4013      	ands	r3, r2
 80084c8:	d1f0      	bne.n	80084ac <HAL_RCC_OscConfig+0x694>
 80084ca:	e024      	b.n	8008516 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e01f      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80084d8:	4b11      	ldr	r3, [pc, #68]	; (8008520 <HAL_RCC_OscConfig+0x708>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <HAL_RCC_OscConfig+0x708>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	23c0      	movs	r3, #192	; 0xc0
 80084e8:	025b      	lsls	r3, r3, #9
 80084ea:	401a      	ands	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d10e      	bne.n	8008512 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	220f      	movs	r2, #15
 80084f8:	401a      	ands	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80084fe:	429a      	cmp	r2, r3
 8008500:	d107      	bne.n	8008512 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	23f0      	movs	r3, #240	; 0xf0
 8008506:	039b      	lsls	r3, r3, #14
 8008508:	401a      	ands	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800850e:	429a      	cmp	r2, r3
 8008510:	d001      	beq.n	8008516 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e000      	b.n	8008518 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	0018      	movs	r0, r3
 800851a:	46bd      	mov	sp, r7
 800851c:	b008      	add	sp, #32
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40021000 	.word	0x40021000

08008524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e0bf      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008538:	4b61      	ldr	r3, [pc, #388]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2201      	movs	r2, #1
 800853e:	4013      	ands	r3, r2
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d911      	bls.n	800856a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008546:	4b5e      	ldr	r3, [pc, #376]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2201      	movs	r2, #1
 800854c:	4393      	bics	r3, r2
 800854e:	0019      	movs	r1, r3
 8008550:	4b5b      	ldr	r3, [pc, #364]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008558:	4b59      	ldr	r3, [pc, #356]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	4013      	ands	r3, r2
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d001      	beq.n	800856a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e0a6      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2202      	movs	r2, #2
 8008570:	4013      	ands	r3, r2
 8008572:	d015      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2204      	movs	r2, #4
 800857a:	4013      	ands	r3, r2
 800857c:	d006      	beq.n	800858c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800857e:	4b51      	ldr	r3, [pc, #324]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	4b50      	ldr	r3, [pc, #320]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008584:	21e0      	movs	r1, #224	; 0xe0
 8008586:	00c9      	lsls	r1, r1, #3
 8008588:	430a      	orrs	r2, r1
 800858a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800858c:	4b4d      	ldr	r3, [pc, #308]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	22f0      	movs	r2, #240	; 0xf0
 8008592:	4393      	bics	r3, r2
 8008594:	0019      	movs	r1, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	4b4a      	ldr	r3, [pc, #296]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 800859c:	430a      	orrs	r2, r1
 800859e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2201      	movs	r2, #1
 80085a6:	4013      	ands	r3, r2
 80085a8:	d04c      	beq.n	8008644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d107      	bne.n	80085c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b2:	4b44      	ldr	r3, [pc, #272]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	2380      	movs	r3, #128	; 0x80
 80085b8:	029b      	lsls	r3, r3, #10
 80085ba:	4013      	ands	r3, r2
 80085bc:	d120      	bne.n	8008600 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e07a      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d107      	bne.n	80085da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ca:	4b3e      	ldr	r3, [pc, #248]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	2380      	movs	r3, #128	; 0x80
 80085d0:	049b      	lsls	r3, r3, #18
 80085d2:	4013      	ands	r3, r2
 80085d4:	d114      	bne.n	8008600 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e06e      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d107      	bne.n	80085f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80085e2:	4b38      	ldr	r3, [pc, #224]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 80085e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e6:	2380      	movs	r3, #128	; 0x80
 80085e8:	025b      	lsls	r3, r3, #9
 80085ea:	4013      	ands	r3, r2
 80085ec:	d108      	bne.n	8008600 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e062      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085f2:	4b34      	ldr	r3, [pc, #208]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2202      	movs	r2, #2
 80085f8:	4013      	ands	r3, r2
 80085fa:	d101      	bne.n	8008600 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e05b      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008600:	4b30      	ldr	r3, [pc, #192]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2203      	movs	r2, #3
 8008606:	4393      	bics	r3, r2
 8008608:	0019      	movs	r1, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	4b2d      	ldr	r3, [pc, #180]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008610:	430a      	orrs	r2, r1
 8008612:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008614:	f7fd fd12 	bl	800603c <HAL_GetTick>
 8008618:	0003      	movs	r3, r0
 800861a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861c:	e009      	b.n	8008632 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800861e:	f7fd fd0d 	bl	800603c <HAL_GetTick>
 8008622:	0002      	movs	r2, r0
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	4a27      	ldr	r2, [pc, #156]	; (80086c8 <HAL_RCC_ClockConfig+0x1a4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d901      	bls.n	8008632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e042      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008632:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	220c      	movs	r2, #12
 8008638:	401a      	ands	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	429a      	cmp	r2, r3
 8008642:	d1ec      	bne.n	800861e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008644:	4b1e      	ldr	r3, [pc, #120]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2201      	movs	r2, #1
 800864a:	4013      	ands	r3, r2
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d211      	bcs.n	8008676 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008652:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2201      	movs	r2, #1
 8008658:	4393      	bics	r3, r2
 800865a:	0019      	movs	r1, r3
 800865c:	4b18      	ldr	r3, [pc, #96]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008664:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <HAL_RCC_ClockConfig+0x19c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2201      	movs	r2, #1
 800866a:	4013      	ands	r3, r2
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d001      	beq.n	8008676 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e020      	b.n	80086b8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2204      	movs	r2, #4
 800867c:	4013      	ands	r3, r2
 800867e:	d009      	beq.n	8008694 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008680:	4b10      	ldr	r3, [pc, #64]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4a11      	ldr	r2, [pc, #68]	; (80086cc <HAL_RCC_ClockConfig+0x1a8>)
 8008686:	4013      	ands	r3, r2
 8008688:	0019      	movs	r1, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 8008690:	430a      	orrs	r2, r1
 8008692:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008694:	f000 f820 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 8008698:	0001      	movs	r1, r0
 800869a:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <HAL_RCC_ClockConfig+0x1a0>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	091b      	lsrs	r3, r3, #4
 80086a0:	220f      	movs	r2, #15
 80086a2:	4013      	ands	r3, r2
 80086a4:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <HAL_RCC_ClockConfig+0x1ac>)
 80086a6:	5cd3      	ldrb	r3, [r2, r3]
 80086a8:	000a      	movs	r2, r1
 80086aa:	40da      	lsrs	r2, r3
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <HAL_RCC_ClockConfig+0x1b0>)
 80086ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80086b0:	2003      	movs	r0, #3
 80086b2:	f7fd fc7d 	bl	8005fb0 <HAL_InitTick>
  
  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	0018      	movs	r0, r3
 80086ba:	46bd      	mov	sp, r7
 80086bc:	b004      	add	sp, #16
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40022000 	.word	0x40022000
 80086c4:	40021000 	.word	0x40021000
 80086c8:	00001388 	.word	0x00001388
 80086cc:	fffff8ff 	.word	0xfffff8ff
 80086d0:	0800ef84 	.word	0x0800ef84
 80086d4:	200000ac 	.word	0x200000ac

080086d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086d8:	b590      	push	{r4, r7, lr}
 80086da:	b08f      	sub	sp, #60	; 0x3c
 80086dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80086de:	2314      	movs	r3, #20
 80086e0:	18fb      	adds	r3, r7, r3
 80086e2:	4a38      	ldr	r2, [pc, #224]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xec>)
 80086e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80086e6:	c313      	stmia	r3!, {r0, r1, r4}
 80086e8:	6812      	ldr	r2, [r2, #0]
 80086ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80086ec:	1d3b      	adds	r3, r7, #4
 80086ee:	4a36      	ldr	r2, [pc, #216]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80086f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80086f2:	c313      	stmia	r3!, {r0, r1, r4}
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086fc:	2300      	movs	r3, #0
 80086fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008700:	2300      	movs	r3, #0
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
 8008704:	2300      	movs	r3, #0
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800870c:	4b2f      	ldr	r3, [pc, #188]	; (80087cc <HAL_RCC_GetSysClockFreq+0xf4>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	220c      	movs	r2, #12
 8008716:	4013      	ands	r3, r2
 8008718:	2b0c      	cmp	r3, #12
 800871a:	d047      	beq.n	80087ac <HAL_RCC_GetSysClockFreq+0xd4>
 800871c:	d849      	bhi.n	80087b2 <HAL_RCC_GetSysClockFreq+0xda>
 800871e:	2b04      	cmp	r3, #4
 8008720:	d002      	beq.n	8008728 <HAL_RCC_GetSysClockFreq+0x50>
 8008722:	2b08      	cmp	r3, #8
 8008724:	d003      	beq.n	800872e <HAL_RCC_GetSysClockFreq+0x56>
 8008726:	e044      	b.n	80087b2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800872a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800872c:	e044      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	0c9b      	lsrs	r3, r3, #18
 8008732:	220f      	movs	r2, #15
 8008734:	4013      	ands	r3, r2
 8008736:	2214      	movs	r2, #20
 8008738:	18ba      	adds	r2, r7, r2
 800873a:	5cd3      	ldrb	r3, [r2, r3]
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800873e:	4b23      	ldr	r3, [pc, #140]	; (80087cc <HAL_RCC_GetSysClockFreq+0xf4>)
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	220f      	movs	r2, #15
 8008744:	4013      	ands	r3, r2
 8008746:	1d3a      	adds	r2, r7, #4
 8008748:	5cd3      	ldrb	r3, [r2, r3]
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800874c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874e:	23c0      	movs	r3, #192	; 0xc0
 8008750:	025b      	lsls	r3, r3, #9
 8008752:	401a      	ands	r2, r3
 8008754:	2380      	movs	r3, #128	; 0x80
 8008756:	025b      	lsls	r3, r3, #9
 8008758:	429a      	cmp	r2, r3
 800875a:	d109      	bne.n	8008770 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800875c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875e:	481c      	ldr	r0, [pc, #112]	; (80087d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008760:	f7f7 fcd0 	bl	8000104 <__udivsi3>
 8008764:	0003      	movs	r3, r0
 8008766:	001a      	movs	r2, r3
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	4353      	muls	r3, r2
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
 800876e:	e01a      	b.n	80087a6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8008770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008772:	23c0      	movs	r3, #192	; 0xc0
 8008774:	025b      	lsls	r3, r3, #9
 8008776:	401a      	ands	r2, r3
 8008778:	23c0      	movs	r3, #192	; 0xc0
 800877a:	025b      	lsls	r3, r3, #9
 800877c:	429a      	cmp	r2, r3
 800877e:	d109      	bne.n	8008794 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008782:	4814      	ldr	r0, [pc, #80]	; (80087d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008784:	f7f7 fcbe 	bl	8000104 <__udivsi3>
 8008788:	0003      	movs	r3, r0
 800878a:	001a      	movs	r2, r3
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	4353      	muls	r3, r2
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
 8008792:	e008      	b.n	80087a6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008796:	480e      	ldr	r0, [pc, #56]	; (80087d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008798:	f7f7 fcb4 	bl	8000104 <__udivsi3>
 800879c:	0003      	movs	r3, r0
 800879e:	001a      	movs	r2, r3
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	4353      	muls	r3, r2
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80087a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80087aa:	e005      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80087b0:	e002      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80087b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80087b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80087ba:	0018      	movs	r0, r3
 80087bc:	46bd      	mov	sp, r7
 80087be:	b00f      	add	sp, #60	; 0x3c
 80087c0:	bd90      	pop	{r4, r7, pc}
 80087c2:	46c0      	nop			; (mov r8, r8)
 80087c4:	0800e3c0 	.word	0x0800e3c0
 80087c8:	0800e3d0 	.word	0x0800e3d0
 80087cc:	40021000 	.word	0x40021000
 80087d0:	007a1200 	.word	0x007a1200
 80087d4:	02dc6c00 	.word	0x02dc6c00

080087d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	025b      	lsls	r3, r3, #9
 80087f0:	4013      	ands	r3, r2
 80087f2:	d100      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80087f4:	e08e      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80087f6:	2017      	movs	r0, #23
 80087f8:	183b      	adds	r3, r7, r0
 80087fa:	2200      	movs	r2, #0
 80087fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087fe:	4b6e      	ldr	r3, [pc, #440]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008800:	69da      	ldr	r2, [r3, #28]
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	055b      	lsls	r3, r3, #21
 8008806:	4013      	ands	r3, r2
 8008808:	d110      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800880a:	4b6b      	ldr	r3, [pc, #428]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800880c:	69da      	ldr	r2, [r3, #28]
 800880e:	4b6a      	ldr	r3, [pc, #424]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008810:	2180      	movs	r1, #128	; 0x80
 8008812:	0549      	lsls	r1, r1, #21
 8008814:	430a      	orrs	r2, r1
 8008816:	61da      	str	r2, [r3, #28]
 8008818:	4b67      	ldr	r3, [pc, #412]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	055b      	lsls	r3, r3, #21
 8008820:	4013      	ands	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]
 8008824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008826:	183b      	adds	r3, r7, r0
 8008828:	2201      	movs	r2, #1
 800882a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800882c:	4b63      	ldr	r3, [pc, #396]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	2380      	movs	r3, #128	; 0x80
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	4013      	ands	r3, r2
 8008836:	d11a      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008838:	4b60      	ldr	r3, [pc, #384]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4b5f      	ldr	r3, [pc, #380]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800883e:	2180      	movs	r1, #128	; 0x80
 8008840:	0049      	lsls	r1, r1, #1
 8008842:	430a      	orrs	r2, r1
 8008844:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008846:	f7fd fbf9 	bl	800603c <HAL_GetTick>
 800884a:	0003      	movs	r3, r0
 800884c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884e:	e008      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008850:	f7fd fbf4 	bl	800603c <HAL_GetTick>
 8008854:	0002      	movs	r2, r0
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b64      	cmp	r3, #100	; 0x64
 800885c:	d901      	bls.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e0a6      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008862:	4b56      	ldr	r3, [pc, #344]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	2380      	movs	r3, #128	; 0x80
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	4013      	ands	r3, r2
 800886c:	d0f0      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800886e:	4b52      	ldr	r3, [pc, #328]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008870:	6a1a      	ldr	r2, [r3, #32]
 8008872:	23c0      	movs	r3, #192	; 0xc0
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4013      	ands	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d034      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	23c0      	movs	r3, #192	; 0xc0
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4013      	ands	r3, r2
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	429a      	cmp	r2, r3
 800888e:	d02c      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008890:	4b49      	ldr	r3, [pc, #292]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	4a4a      	ldr	r2, [pc, #296]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008896:	4013      	ands	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800889a:	4b47      	ldr	r3, [pc, #284]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800889c:	6a1a      	ldr	r2, [r3, #32]
 800889e:	4b46      	ldr	r3, [pc, #280]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80088a0:	2180      	movs	r1, #128	; 0x80
 80088a2:	0249      	lsls	r1, r1, #9
 80088a4:	430a      	orrs	r2, r1
 80088a6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088a8:	4b43      	ldr	r3, [pc, #268]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80088aa:	6a1a      	ldr	r2, [r3, #32]
 80088ac:	4b42      	ldr	r3, [pc, #264]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80088ae:	4945      	ldr	r1, [pc, #276]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80088b0:	400a      	ands	r2, r1
 80088b2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80088b4:	4b40      	ldr	r3, [pc, #256]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	4013      	ands	r3, r2
 80088c0:	d013      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088c2:	f7fd fbbb 	bl	800603c <HAL_GetTick>
 80088c6:	0003      	movs	r3, r0
 80088c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088ca:	e009      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088cc:	f7fd fbb6 	bl	800603c <HAL_GetTick>
 80088d0:	0002      	movs	r2, r0
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	4a3c      	ldr	r2, [pc, #240]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d901      	bls.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e067      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e0:	4b35      	ldr	r3, [pc, #212]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	2202      	movs	r2, #2
 80088e6:	4013      	ands	r3, r2
 80088e8:	d0f0      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088ea:	4b33      	ldr	r3, [pc, #204]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	4a34      	ldr	r2, [pc, #208]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80088f0:	4013      	ands	r3, r2
 80088f2:	0019      	movs	r1, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80088fa:	430a      	orrs	r2, r1
 80088fc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80088fe:	2317      	movs	r3, #23
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d105      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008908:	4b2b      	ldr	r3, [pc, #172]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	4b2a      	ldr	r3, [pc, #168]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800890e:	492f      	ldr	r1, [pc, #188]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8008910:	400a      	ands	r2, r1
 8008912:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2201      	movs	r2, #1
 800891a:	4013      	ands	r3, r2
 800891c:	d009      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800891e:	4b26      	ldr	r3, [pc, #152]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	2203      	movs	r2, #3
 8008924:	4393      	bics	r3, r2
 8008926:	0019      	movs	r1, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	4b22      	ldr	r3, [pc, #136]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800892e:	430a      	orrs	r2, r1
 8008930:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2202      	movs	r2, #2
 8008938:	4013      	ands	r3, r2
 800893a:	d009      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800893c:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008940:	4a23      	ldr	r2, [pc, #140]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008942:	4013      	ands	r3, r2
 8008944:	0019      	movs	r1, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800894c:	430a      	orrs	r2, r1
 800894e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	2380      	movs	r3, #128	; 0x80
 8008956:	02db      	lsls	r3, r3, #11
 8008958:	4013      	ands	r3, r2
 800895a:	d009      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800895c:	4b16      	ldr	r3, [pc, #88]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	4a1c      	ldr	r2, [pc, #112]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008962:	4013      	ands	r3, r2
 8008964:	0019      	movs	r1, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800896c:	430a      	orrs	r2, r1
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2220      	movs	r2, #32
 8008976:	4013      	ands	r3, r2
 8008978:	d009      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	2210      	movs	r2, #16
 8008980:	4393      	bics	r3, r2
 8008982:	0019      	movs	r1, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695a      	ldr	r2, [r3, #20]
 8008988:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800898a:	430a      	orrs	r2, r1
 800898c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	2380      	movs	r3, #128	; 0x80
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	4013      	ands	r3, r2
 8008998:	d009      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800899a:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	2240      	movs	r2, #64	; 0x40
 80089a0:	4393      	bics	r3, r2
 80089a2:	0019      	movs	r1, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	699a      	ldr	r2, [r3, #24]
 80089a8:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80089aa:	430a      	orrs	r2, r1
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b006      	add	sp, #24
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	40021000 	.word	0x40021000
 80089bc:	40007000 	.word	0x40007000
 80089c0:	fffffcff 	.word	0xfffffcff
 80089c4:	fffeffff 	.word	0xfffeffff
 80089c8:	00001388 	.word	0x00001388
 80089cc:	efffffff 	.word	0xefffffff
 80089d0:	fffcffff 	.word	0xfffcffff
 80089d4:	fff3ffff 	.word	0xfff3ffff

080089d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e0a8      	b.n	8008b3c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	2382      	movs	r3, #130	; 0x82
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d009      	beq.n	8008a12 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	61da      	str	r2, [r3, #28]
 8008a04:	e005      	b.n	8008a12 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	225d      	movs	r2, #93	; 0x5d
 8008a1c:	5c9b      	ldrb	r3, [r3, r2]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d107      	bne.n	8008a34 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	225c      	movs	r2, #92	; 0x5c
 8008a28:	2100      	movs	r1, #0
 8008a2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	0018      	movs	r0, r3
 8008a30:	f7fd f8dc 	bl	8005bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	225d      	movs	r2, #93	; 0x5d
 8008a38:	2102      	movs	r1, #2
 8008a3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2140      	movs	r1, #64	; 0x40
 8008a48:	438a      	bics	r2, r1
 8008a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	23e0      	movs	r3, #224	; 0xe0
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d902      	bls.n	8008a5e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	e002      	b.n	8008a64 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a5e:	2380      	movs	r3, #128	; 0x80
 8008a60:	015b      	lsls	r3, r3, #5
 8008a62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	23f0      	movs	r3, #240	; 0xf0
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d008      	beq.n	8008a82 <HAL_SPI_Init+0xaa>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	23e0      	movs	r3, #224	; 0xe0
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d002      	beq.n	8008a82 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	2382      	movs	r3, #130	; 0x82
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6899      	ldr	r1, [r3, #8]
 8008a90:	2384      	movs	r3, #132	; 0x84
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	400b      	ands	r3, r1
 8008a96:	431a      	orrs	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	400b      	ands	r3, r1
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	400b      	ands	r3, r1
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6999      	ldr	r1, [r3, #24]
 8008ab0:	2380      	movs	r3, #128	; 0x80
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	400b      	ands	r3, r1
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	2138      	movs	r1, #56	; 0x38
 8008abe:	400b      	ands	r3, r1
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	2180      	movs	r1, #128	; 0x80
 8008ac8:	400b      	ands	r3, r1
 8008aca:	431a      	orrs	r2, r3
 8008acc:	0011      	movs	r1, r2
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	019b      	lsls	r3, r3, #6
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	0c1b      	lsrs	r3, r3, #16
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	401a      	ands	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	2110      	movs	r1, #16
 8008af0:	400b      	ands	r3, r1
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	2108      	movs	r1, #8
 8008afa:	400b      	ands	r3, r1
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68d9      	ldr	r1, [r3, #12]
 8008b02:	23f0      	movs	r3, #240	; 0xf0
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	400b      	ands	r3, r1
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	0011      	movs	r1, r2
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	2380      	movs	r3, #128	; 0x80
 8008b10:	015b      	lsls	r3, r3, #5
 8008b12:	401a      	ands	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	69da      	ldr	r2, [r3, #28]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4907      	ldr	r1, [pc, #28]	; (8008b44 <HAL_SPI_Init+0x16c>)
 8008b28:	400a      	ands	r2, r1
 8008b2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	225d      	movs	r2, #93	; 0x5d
 8008b36:	2101      	movs	r1, #1
 8008b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b004      	add	sp, #16
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	fffff7ff 	.word	0xfffff7ff

08008b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e042      	b.n	8008be0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	223d      	movs	r2, #61	; 0x3d
 8008b5e:	5c9b      	ldrb	r3, [r3, r2]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d107      	bne.n	8008b76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	223c      	movs	r2, #60	; 0x3c
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7fd f887 	bl	8005c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	223d      	movs	r2, #61	; 0x3d
 8008b7a:	2102      	movs	r1, #2
 8008b7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3304      	adds	r3, #4
 8008b86:	0019      	movs	r1, r3
 8008b88:	0010      	movs	r0, r2
 8008b8a:	f000 fa27 	bl	8008fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2246      	movs	r2, #70	; 0x46
 8008b92:	2101      	movs	r1, #1
 8008b94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	223e      	movs	r2, #62	; 0x3e
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	5499      	strb	r1, [r3, r2]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	223f      	movs	r2, #63	; 0x3f
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	5499      	strb	r1, [r3, r2]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2240      	movs	r2, #64	; 0x40
 8008baa:	2101      	movs	r1, #1
 8008bac:	5499      	strb	r1, [r3, r2]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2241      	movs	r2, #65	; 0x41
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2242      	movs	r2, #66	; 0x42
 8008bba:	2101      	movs	r1, #1
 8008bbc:	5499      	strb	r1, [r3, r2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2243      	movs	r2, #67	; 0x43
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	5499      	strb	r1, [r3, r2]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2244      	movs	r2, #68	; 0x44
 8008bca:	2101      	movs	r1, #1
 8008bcc:	5499      	strb	r1, [r3, r2]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2245      	movs	r2, #69	; 0x45
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	223d      	movs	r2, #61	; 0x3d
 8008bda:	2101      	movs	r1, #1
 8008bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b002      	add	sp, #8
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d108      	bne.n	8008c0a <HAL_TIM_PWM_Start+0x22>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	223e      	movs	r2, #62	; 0x3e
 8008bfc:	5c9b      	ldrb	r3, [r3, r2]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	3b01      	subs	r3, #1
 8008c02:	1e5a      	subs	r2, r3, #1
 8008c04:	4193      	sbcs	r3, r2
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	e01f      	b.n	8008c4a <HAL_TIM_PWM_Start+0x62>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d108      	bne.n	8008c22 <HAL_TIM_PWM_Start+0x3a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	223f      	movs	r2, #63	; 0x3f
 8008c14:	5c9b      	ldrb	r3, [r3, r2]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	1e5a      	subs	r2, r3, #1
 8008c1c:	4193      	sbcs	r3, r2
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	e013      	b.n	8008c4a <HAL_TIM_PWM_Start+0x62>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d108      	bne.n	8008c3a <HAL_TIM_PWM_Start+0x52>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2240      	movs	r2, #64	; 0x40
 8008c2c:	5c9b      	ldrb	r3, [r3, r2]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	3b01      	subs	r3, #1
 8008c32:	1e5a      	subs	r2, r3, #1
 8008c34:	4193      	sbcs	r3, r2
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	e007      	b.n	8008c4a <HAL_TIM_PWM_Start+0x62>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2241      	movs	r2, #65	; 0x41
 8008c3e:	5c9b      	ldrb	r3, [r3, r2]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	4193      	sbcs	r3, r2
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e074      	b.n	8008d3c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <HAL_TIM_PWM_Start+0x7a>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	223e      	movs	r2, #62	; 0x3e
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	5499      	strb	r1, [r3, r2]
 8008c60:	e013      	b.n	8008c8a <HAL_TIM_PWM_Start+0xa2>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d104      	bne.n	8008c72 <HAL_TIM_PWM_Start+0x8a>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	223f      	movs	r2, #63	; 0x3f
 8008c6c:	2102      	movs	r1, #2
 8008c6e:	5499      	strb	r1, [r3, r2]
 8008c70:	e00b      	b.n	8008c8a <HAL_TIM_PWM_Start+0xa2>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d104      	bne.n	8008c82 <HAL_TIM_PWM_Start+0x9a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2240      	movs	r2, #64	; 0x40
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	5499      	strb	r1, [r3, r2]
 8008c80:	e003      	b.n	8008c8a <HAL_TIM_PWM_Start+0xa2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2241      	movs	r2, #65	; 0x41
 8008c86:	2102      	movs	r1, #2
 8008c88:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	2201      	movs	r2, #1
 8008c92:	0018      	movs	r0, r3
 8008c94:	f000 fc1e 	bl	80094d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a29      	ldr	r2, [pc, #164]	; (8008d44 <HAL_TIM_PWM_Start+0x15c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00e      	beq.n	8008cc0 <HAL_TIM_PWM_Start+0xd8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a28      	ldr	r2, [pc, #160]	; (8008d48 <HAL_TIM_PWM_Start+0x160>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d009      	beq.n	8008cc0 <HAL_TIM_PWM_Start+0xd8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <HAL_TIM_PWM_Start+0x164>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <HAL_TIM_PWM_Start+0xd8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a25      	ldr	r2, [pc, #148]	; (8008d50 <HAL_TIM_PWM_Start+0x168>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIM_PWM_Start+0xdc>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <HAL_TIM_PWM_Start+0xde>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d008      	beq.n	8008cdc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2180      	movs	r1, #128	; 0x80
 8008cd6:	0209      	lsls	r1, r1, #8
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a18      	ldr	r2, [pc, #96]	; (8008d44 <HAL_TIM_PWM_Start+0x15c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00f      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x11e>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	2380      	movs	r3, #128	; 0x80
 8008cec:	05db      	lsls	r3, r3, #23
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d009      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x11e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a17      	ldr	r2, [pc, #92]	; (8008d54 <HAL_TIM_PWM_Start+0x16c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d004      	beq.n	8008d06 <HAL_TIM_PWM_Start+0x11e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a11      	ldr	r2, [pc, #68]	; (8008d48 <HAL_TIM_PWM_Start+0x160>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d111      	bne.n	8008d2a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2207      	movs	r2, #7
 8008d0e:	4013      	ands	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b06      	cmp	r3, #6
 8008d16:	d010      	beq.n	8008d3a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2101      	movs	r1, #1
 8008d24:	430a      	orrs	r2, r1
 8008d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d28:	e007      	b.n	8008d3a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2101      	movs	r1, #1
 8008d36:	430a      	orrs	r2, r1
 8008d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	b004      	add	sp, #16
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40012c00 	.word	0x40012c00
 8008d48:	40014000 	.word	0x40014000
 8008d4c:	40014400 	.word	0x40014400
 8008d50:	40014800 	.word	0x40014800
 8008d54:	40000400 	.word	0x40000400

08008d58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f000 fbb2 	bl	80094d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a2f      	ldr	r2, [pc, #188]	; (8008e34 <HAL_TIM_PWM_Stop+0xdc>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d00e      	beq.n	8008d98 <HAL_TIM_PWM_Stop+0x40>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a2e      	ldr	r2, [pc, #184]	; (8008e38 <HAL_TIM_PWM_Stop+0xe0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d009      	beq.n	8008d98 <HAL_TIM_PWM_Stop+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a2c      	ldr	r2, [pc, #176]	; (8008e3c <HAL_TIM_PWM_Stop+0xe4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d004      	beq.n	8008d98 <HAL_TIM_PWM_Stop+0x40>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a2b      	ldr	r2, [pc, #172]	; (8008e40 <HAL_TIM_PWM_Stop+0xe8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d101      	bne.n	8008d9c <HAL_TIM_PWM_Stop+0x44>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <HAL_TIM_PWM_Stop+0x46>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d013      	beq.n	8008dca <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	4a26      	ldr	r2, [pc, #152]	; (8008e44 <HAL_TIM_PWM_Stop+0xec>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	d10d      	bne.n	8008dca <HAL_TIM_PWM_Stop+0x72>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	4a24      	ldr	r2, [pc, #144]	; (8008e48 <HAL_TIM_PWM_Stop+0xf0>)
 8008db6:	4013      	ands	r3, r2
 8008db8:	d107      	bne.n	8008dca <HAL_TIM_PWM_Stop+0x72>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4921      	ldr	r1, [pc, #132]	; (8008e4c <HAL_TIM_PWM_Stop+0xf4>)
 8008dc6:	400a      	ands	r2, r1
 8008dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	4a1c      	ldr	r2, [pc, #112]	; (8008e44 <HAL_TIM_PWM_Stop+0xec>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	d10d      	bne.n	8008df2 <HAL_TIM_PWM_Stop+0x9a>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	4a1a      	ldr	r2, [pc, #104]	; (8008e48 <HAL_TIM_PWM_Stop+0xf0>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	d107      	bne.n	8008df2 <HAL_TIM_PWM_Stop+0x9a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2101      	movs	r1, #1
 8008dee:	438a      	bics	r2, r1
 8008df0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Stop+0xaa>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	223e      	movs	r2, #62	; 0x3e
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	5499      	strb	r1, [r3, r2]
 8008e00:	e013      	b.n	8008e2a <HAL_TIM_PWM_Stop+0xd2>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Stop+0xba>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	223f      	movs	r2, #63	; 0x3f
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	5499      	strb	r1, [r3, r2]
 8008e10:	e00b      	b.n	8008e2a <HAL_TIM_PWM_Stop+0xd2>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b08      	cmp	r3, #8
 8008e16:	d104      	bne.n	8008e22 <HAL_TIM_PWM_Stop+0xca>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2240      	movs	r2, #64	; 0x40
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	5499      	strb	r1, [r3, r2]
 8008e20:	e003      	b.n	8008e2a <HAL_TIM_PWM_Stop+0xd2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2241      	movs	r2, #65	; 0x41
 8008e26:	2101      	movs	r1, #1
 8008e28:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	b002      	add	sp, #8
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40012c00 	.word	0x40012c00
 8008e38:	40014000 	.word	0x40014000
 8008e3c:	40014400 	.word	0x40014400
 8008e40:	40014800 	.word	0x40014800
 8008e44:	00001111 	.word	0x00001111
 8008e48:	00000444 	.word	0x00000444
 8008e4c:	ffff7fff 	.word	0xffff7fff

08008e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5c:	2317      	movs	r3, #23
 8008e5e:	18fb      	adds	r3, r7, r3
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	223c      	movs	r2, #60	; 0x3c
 8008e68:	5c9b      	ldrb	r3, [r3, r2]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e0ad      	b.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	223c      	movs	r2, #60	; 0x3c
 8008e76:	2101      	movs	r1, #1
 8008e78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b0c      	cmp	r3, #12
 8008e7e:	d100      	bne.n	8008e82 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008e80:	e076      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x120>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b0c      	cmp	r3, #12
 8008e86:	d900      	bls.n	8008e8a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8008e88:	e095      	b.n	8008fb6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d04e      	beq.n	8008f2e <HAL_TIM_PWM_ConfigChannel+0xde>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d900      	bls.n	8008e98 <HAL_TIM_PWM_ConfigChannel+0x48>
 8008e96:	e08e      	b.n	8008fb6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d021      	beq.n	8008ee8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8008ea4:	e087      	b.n	8008fb6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	0011      	movs	r1, r2
 8008eae:	0018      	movs	r0, r3
 8008eb0:	f000 f914 	bl	80090dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	699a      	ldr	r2, [r3, #24]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2108      	movs	r1, #8
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	699a      	ldr	r2, [r3, #24]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2104      	movs	r1, #4
 8008ed0:	438a      	bics	r2, r1
 8008ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6999      	ldr	r1, [r3, #24]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	619a      	str	r2, [r3, #24]
      break;
 8008ee6:	e06b      	b.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	0011      	movs	r1, r2
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f000 f97b 	bl	80091ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	699a      	ldr	r2, [r3, #24]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2180      	movs	r1, #128	; 0x80
 8008f02:	0109      	lsls	r1, r1, #4
 8008f04:	430a      	orrs	r2, r1
 8008f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4931      	ldr	r1, [pc, #196]	; (8008fd8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8008f14:	400a      	ands	r2, r1
 8008f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6999      	ldr	r1, [r3, #24]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	021a      	lsls	r2, r3, #8
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	619a      	str	r2, [r3, #24]
      break;
 8008f2c:	e048      	b.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	0011      	movs	r1, r2
 8008f36:	0018      	movs	r0, r3
 8008f38:	f000 f9dc 	bl	80092f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69da      	ldr	r2, [r3, #28]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2108      	movs	r1, #8
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	69da      	ldr	r2, [r3, #28]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2104      	movs	r1, #4
 8008f58:	438a      	bics	r2, r1
 8008f5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	69d9      	ldr	r1, [r3, #28]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	691a      	ldr	r2, [r3, #16]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	61da      	str	r2, [r3, #28]
      break;
 8008f6e:	e027      	b.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	0011      	movs	r1, r2
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f000 fa41 	bl	8009400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69da      	ldr	r2, [r3, #28]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2180      	movs	r1, #128	; 0x80
 8008f8a:	0109      	lsls	r1, r1, #4
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	69da      	ldr	r2, [r3, #28]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	490f      	ldr	r1, [pc, #60]	; (8008fd8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8008f9c:	400a      	ands	r2, r1
 8008f9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	69d9      	ldr	r1, [r3, #28]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	021a      	lsls	r2, r3, #8
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	61da      	str	r2, [r3, #28]
      break;
 8008fb4:	e004      	b.n	8008fc0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8008fb6:	2317      	movs	r3, #23
 8008fb8:	18fb      	adds	r3, r7, r3
 8008fba:	2201      	movs	r2, #1
 8008fbc:	701a      	strb	r2, [r3, #0]
      break;
 8008fbe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	223c      	movs	r2, #60	; 0x3c
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	5499      	strb	r1, [r3, r2]

  return status;
 8008fc8:	2317      	movs	r3, #23
 8008fca:	18fb      	adds	r3, r7, r3
 8008fcc:	781b      	ldrb	r3, [r3, #0]
}
 8008fce:	0018      	movs	r0, r3
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	b006      	add	sp, #24
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	fffffbff 	.word	0xfffffbff

08008fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a34      	ldr	r2, [pc, #208]	; (80090c0 <TIM_Base_SetConfig+0xe4>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d008      	beq.n	8009006 <TIM_Base_SetConfig+0x2a>
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	2380      	movs	r3, #128	; 0x80
 8008ff8:	05db      	lsls	r3, r3, #23
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d003      	beq.n	8009006 <TIM_Base_SetConfig+0x2a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a30      	ldr	r2, [pc, #192]	; (80090c4 <TIM_Base_SetConfig+0xe8>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d108      	bne.n	8009018 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2270      	movs	r2, #112	; 0x70
 800900a:	4393      	bics	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a29      	ldr	r2, [pc, #164]	; (80090c0 <TIM_Base_SetConfig+0xe4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d018      	beq.n	8009052 <TIM_Base_SetConfig+0x76>
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	05db      	lsls	r3, r3, #23
 8009026:	429a      	cmp	r2, r3
 8009028:	d013      	beq.n	8009052 <TIM_Base_SetConfig+0x76>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a25      	ldr	r2, [pc, #148]	; (80090c4 <TIM_Base_SetConfig+0xe8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00f      	beq.n	8009052 <TIM_Base_SetConfig+0x76>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a24      	ldr	r2, [pc, #144]	; (80090c8 <TIM_Base_SetConfig+0xec>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00b      	beq.n	8009052 <TIM_Base_SetConfig+0x76>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a23      	ldr	r2, [pc, #140]	; (80090cc <TIM_Base_SetConfig+0xf0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d007      	beq.n	8009052 <TIM_Base_SetConfig+0x76>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a22      	ldr	r2, [pc, #136]	; (80090d0 <TIM_Base_SetConfig+0xf4>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d003      	beq.n	8009052 <TIM_Base_SetConfig+0x76>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a21      	ldr	r2, [pc, #132]	; (80090d4 <TIM_Base_SetConfig+0xf8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d108      	bne.n	8009064 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4a20      	ldr	r2, [pc, #128]	; (80090d8 <TIM_Base_SetConfig+0xfc>)
 8009056:	4013      	ands	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2280      	movs	r2, #128	; 0x80
 8009068:	4393      	bics	r3, r2
 800906a:	001a      	movs	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a0c      	ldr	r2, [pc, #48]	; (80090c0 <TIM_Base_SetConfig+0xe4>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00b      	beq.n	80090aa <TIM_Base_SetConfig+0xce>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a0d      	ldr	r2, [pc, #52]	; (80090cc <TIM_Base_SetConfig+0xf0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d007      	beq.n	80090aa <TIM_Base_SetConfig+0xce>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a0c      	ldr	r2, [pc, #48]	; (80090d0 <TIM_Base_SetConfig+0xf4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d003      	beq.n	80090aa <TIM_Base_SetConfig+0xce>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a0b      	ldr	r2, [pc, #44]	; (80090d4 <TIM_Base_SetConfig+0xf8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d103      	bne.n	80090b2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	691a      	ldr	r2, [r3, #16]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	615a      	str	r2, [r3, #20]
}
 80090b8:	46c0      	nop			; (mov r8, r8)
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b004      	add	sp, #16
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	40012c00 	.word	0x40012c00
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40002000 	.word	0x40002000
 80090cc:	40014000 	.word	0x40014000
 80090d0:	40014400 	.word	0x40014400
 80090d4:	40014800 	.word	0x40014800
 80090d8:	fffffcff 	.word	0xfffffcff

080090dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	2201      	movs	r2, #1
 80090ec:	4393      	bics	r3, r2
 80090ee:	001a      	movs	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2270      	movs	r2, #112	; 0x70
 800910a:	4393      	bics	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2203      	movs	r2, #3
 8009112:	4393      	bics	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2202      	movs	r2, #2
 8009124:	4393      	bics	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a27      	ldr	r2, [pc, #156]	; (80091d4 <TIM_OC1_SetConfig+0xf8>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d00b      	beq.n	8009152 <TIM_OC1_SetConfig+0x76>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a26      	ldr	r2, [pc, #152]	; (80091d8 <TIM_OC1_SetConfig+0xfc>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d007      	beq.n	8009152 <TIM_OC1_SetConfig+0x76>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a25      	ldr	r2, [pc, #148]	; (80091dc <TIM_OC1_SetConfig+0x100>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d003      	beq.n	8009152 <TIM_OC1_SetConfig+0x76>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a24      	ldr	r2, [pc, #144]	; (80091e0 <TIM_OC1_SetConfig+0x104>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d10c      	bne.n	800916c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2208      	movs	r2, #8
 8009156:	4393      	bics	r3, r2
 8009158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	4313      	orrs	r3, r2
 8009162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2204      	movs	r2, #4
 8009168:	4393      	bics	r3, r2
 800916a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <TIM_OC1_SetConfig+0xf8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d00b      	beq.n	800918c <TIM_OC1_SetConfig+0xb0>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <TIM_OC1_SetConfig+0xfc>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d007      	beq.n	800918c <TIM_OC1_SetConfig+0xb0>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a17      	ldr	r2, [pc, #92]	; (80091dc <TIM_OC1_SetConfig+0x100>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d003      	beq.n	800918c <TIM_OC1_SetConfig+0xb0>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <TIM_OC1_SetConfig+0x104>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d111      	bne.n	80091b0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	4a15      	ldr	r2, [pc, #84]	; (80091e4 <TIM_OC1_SetConfig+0x108>)
 8009190:	4013      	ands	r3, r2
 8009192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4a14      	ldr	r2, [pc, #80]	; (80091e8 <TIM_OC1_SetConfig+0x10c>)
 8009198:	4013      	ands	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	621a      	str	r2, [r3, #32]
}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b006      	add	sp, #24
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	40012c00 	.word	0x40012c00
 80091d8:	40014000 	.word	0x40014000
 80091dc:	40014400 	.word	0x40014400
 80091e0:	40014800 	.word	0x40014800
 80091e4:	fffffeff 	.word	0xfffffeff
 80091e8:	fffffdff 	.word	0xfffffdff

080091ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	2210      	movs	r2, #16
 80091fc:	4393      	bics	r3, r2
 80091fe:	001a      	movs	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4a2e      	ldr	r2, [pc, #184]	; (80092d4 <TIM_OC2_SetConfig+0xe8>)
 800921a:	4013      	ands	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4a2d      	ldr	r2, [pc, #180]	; (80092d8 <TIM_OC2_SetConfig+0xec>)
 8009222:	4013      	ands	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2220      	movs	r2, #32
 8009236:	4393      	bics	r3, r2
 8009238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	4313      	orrs	r3, r2
 8009244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a24      	ldr	r2, [pc, #144]	; (80092dc <TIM_OC2_SetConfig+0xf0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d10d      	bne.n	800926a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2280      	movs	r2, #128	; 0x80
 8009252:	4393      	bics	r3, r2
 8009254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2240      	movs	r2, #64	; 0x40
 8009266:	4393      	bics	r3, r2
 8009268:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a1b      	ldr	r2, [pc, #108]	; (80092dc <TIM_OC2_SetConfig+0xf0>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00b      	beq.n	800928a <TIM_OC2_SetConfig+0x9e>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a1a      	ldr	r2, [pc, #104]	; (80092e0 <TIM_OC2_SetConfig+0xf4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d007      	beq.n	800928a <TIM_OC2_SetConfig+0x9e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <TIM_OC2_SetConfig+0xf8>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d003      	beq.n	800928a <TIM_OC2_SetConfig+0x9e>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <TIM_OC2_SetConfig+0xfc>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d113      	bne.n	80092b2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4a17      	ldr	r2, [pc, #92]	; (80092ec <TIM_OC2_SetConfig+0x100>)
 800928e:	4013      	ands	r3, r2
 8009290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	4a16      	ldr	r2, [pc, #88]	; (80092f0 <TIM_OC2_SetConfig+0x104>)
 8009296:	4013      	ands	r3, r2
 8009298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	621a      	str	r2, [r3, #32]
}
 80092cc:	46c0      	nop			; (mov r8, r8)
 80092ce:	46bd      	mov	sp, r7
 80092d0:	b006      	add	sp, #24
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	ffff8fff 	.word	0xffff8fff
 80092d8:	fffffcff 	.word	0xfffffcff
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40014000 	.word	0x40014000
 80092e4:	40014400 	.word	0x40014400
 80092e8:	40014800 	.word	0x40014800
 80092ec:	fffffbff 	.word	0xfffffbff
 80092f0:	fffff7ff 	.word	0xfffff7ff

080092f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	4a35      	ldr	r2, [pc, #212]	; (80093d8 <TIM_OC3_SetConfig+0xe4>)
 8009304:	401a      	ands	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2270      	movs	r2, #112	; 0x70
 8009320:	4393      	bics	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2203      	movs	r2, #3
 8009328:	4393      	bics	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	4a28      	ldr	r2, [pc, #160]	; (80093dc <TIM_OC3_SetConfig+0xe8>)
 800933a:	4013      	ands	r3, r2
 800933c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a24      	ldr	r2, [pc, #144]	; (80093e0 <TIM_OC3_SetConfig+0xec>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d10d      	bne.n	800936e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	4a23      	ldr	r2, [pc, #140]	; (80093e4 <TIM_OC3_SetConfig+0xf0>)
 8009356:	4013      	ands	r3, r2
 8009358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	4313      	orrs	r3, r2
 8009364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	4a1f      	ldr	r2, [pc, #124]	; (80093e8 <TIM_OC3_SetConfig+0xf4>)
 800936a:	4013      	ands	r3, r2
 800936c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <TIM_OC3_SetConfig+0xec>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00b      	beq.n	800938e <TIM_OC3_SetConfig+0x9a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a1c      	ldr	r2, [pc, #112]	; (80093ec <TIM_OC3_SetConfig+0xf8>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <TIM_OC3_SetConfig+0x9a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a1b      	ldr	r2, [pc, #108]	; (80093f0 <TIM_OC3_SetConfig+0xfc>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_OC3_SetConfig+0x9a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a1a      	ldr	r2, [pc, #104]	; (80093f4 <TIM_OC3_SetConfig+0x100>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d113      	bne.n	80093b6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	4a19      	ldr	r2, [pc, #100]	; (80093f8 <TIM_OC3_SetConfig+0x104>)
 8009392:	4013      	ands	r3, r2
 8009394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	4a18      	ldr	r2, [pc, #96]	; (80093fc <TIM_OC3_SetConfig+0x108>)
 800939a:	4013      	ands	r3, r2
 800939c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	621a      	str	r2, [r3, #32]
}
 80093d0:	46c0      	nop			; (mov r8, r8)
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b006      	add	sp, #24
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	fffffeff 	.word	0xfffffeff
 80093dc:	fffffdff 	.word	0xfffffdff
 80093e0:	40012c00 	.word	0x40012c00
 80093e4:	fffff7ff 	.word	0xfffff7ff
 80093e8:	fffffbff 	.word	0xfffffbff
 80093ec:	40014000 	.word	0x40014000
 80093f0:	40014400 	.word	0x40014400
 80093f4:	40014800 	.word	0x40014800
 80093f8:	ffffefff 	.word	0xffffefff
 80093fc:	ffffdfff 	.word	0xffffdfff

08009400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	4a28      	ldr	r2, [pc, #160]	; (80094b0 <TIM_OC4_SetConfig+0xb0>)
 8009410:	401a      	ands	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a22      	ldr	r2, [pc, #136]	; (80094b4 <TIM_OC4_SetConfig+0xb4>)
 800942c:	4013      	ands	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4a21      	ldr	r2, [pc, #132]	; (80094b8 <TIM_OC4_SetConfig+0xb8>)
 8009434:	4013      	ands	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	021b      	lsls	r3, r3, #8
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	4313      	orrs	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	4a1d      	ldr	r2, [pc, #116]	; (80094bc <TIM_OC4_SetConfig+0xbc>)
 8009448:	4013      	ands	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	031b      	lsls	r3, r3, #12
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	4313      	orrs	r3, r2
 8009456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a19      	ldr	r2, [pc, #100]	; (80094c0 <TIM_OC4_SetConfig+0xc0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00b      	beq.n	8009478 <TIM_OC4_SetConfig+0x78>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a18      	ldr	r2, [pc, #96]	; (80094c4 <TIM_OC4_SetConfig+0xc4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d007      	beq.n	8009478 <TIM_OC4_SetConfig+0x78>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a17      	ldr	r2, [pc, #92]	; (80094c8 <TIM_OC4_SetConfig+0xc8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_OC4_SetConfig+0x78>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a16      	ldr	r2, [pc, #88]	; (80094cc <TIM_OC4_SetConfig+0xcc>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d109      	bne.n	800948c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	4a15      	ldr	r2, [pc, #84]	; (80094d0 <TIM_OC4_SetConfig+0xd0>)
 800947c:	4013      	ands	r3, r2
 800947e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	019b      	lsls	r3, r3, #6
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	46bd      	mov	sp, r7
 80094aa:	b006      	add	sp, #24
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	ffffefff 	.word	0xffffefff
 80094b4:	ffff8fff 	.word	0xffff8fff
 80094b8:	fffffcff 	.word	0xfffffcff
 80094bc:	ffffdfff 	.word	0xffffdfff
 80094c0:	40012c00 	.word	0x40012c00
 80094c4:	40014000 	.word	0x40014000
 80094c8:	40014400 	.word	0x40014400
 80094cc:	40014800 	.word	0x40014800
 80094d0:	ffffbfff 	.word	0xffffbfff

080094d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	221f      	movs	r2, #31
 80094e4:	4013      	ands	r3, r2
 80094e6:	2201      	movs	r2, #1
 80094e8:	409a      	lsls	r2, r3
 80094ea:	0013      	movs	r3, r2
 80094ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	43d2      	mvns	r2, r2
 80094f6:	401a      	ands	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a1a      	ldr	r2, [r3, #32]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	211f      	movs	r1, #31
 8009504:	400b      	ands	r3, r1
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	4099      	lsls	r1, r3
 800950a:	000b      	movs	r3, r1
 800950c:	431a      	orrs	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	46c0      	nop			; (mov r8, r8)
 8009514:	46bd      	mov	sp, r7
 8009516:	b006      	add	sp, #24
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	223c      	movs	r2, #60	; 0x3c
 800952a:	5c9b      	ldrb	r3, [r3, r2]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d101      	bne.n	8009534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009530:	2302      	movs	r3, #2
 8009532:	e047      	b.n	80095c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	223c      	movs	r2, #60	; 0x3c
 8009538:	2101      	movs	r1, #1
 800953a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	223d      	movs	r2, #61	; 0x3d
 8009540:	2102      	movs	r1, #2
 8009542:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2270      	movs	r2, #112	; 0x70
 8009558:	4393      	bics	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a16      	ldr	r2, [pc, #88]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d00f      	beq.n	8009598 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	2380      	movs	r3, #128	; 0x80
 800957e:	05db      	lsls	r3, r3, #23
 8009580:	429a      	cmp	r2, r3
 8009582:	d009      	beq.n	8009598 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a11      	ldr	r2, [pc, #68]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d004      	beq.n	8009598 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a10      	ldr	r2, [pc, #64]	; (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d10c      	bne.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2280      	movs	r2, #128	; 0x80
 800959c:	4393      	bics	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	223d      	movs	r2, #61	; 0x3d
 80095b6:	2101      	movs	r1, #1
 80095b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	223c      	movs	r2, #60	; 0x3c
 80095be:	2100      	movs	r1, #0
 80095c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	0018      	movs	r0, r3
 80095c6:	46bd      	mov	sp, r7
 80095c8:	b004      	add	sp, #16
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40012c00 	.word	0x40012c00
 80095d0:	40000400 	.word	0x40000400
 80095d4:	40014000 	.word	0x40014000

080095d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	223c      	movs	r2, #60	; 0x3c
 80095ea:	5c9b      	ldrb	r3, [r3, r2]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e03e      	b.n	8009672 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	223c      	movs	r2, #60	; 0x3c
 80095f8:	2101      	movs	r1, #1
 80095fa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	22ff      	movs	r2, #255	; 0xff
 8009600:	4393      	bics	r3, r2
 8009602:	001a      	movs	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a1b      	ldr	r2, [pc, #108]	; (800967c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8009610:	401a      	ands	r2, r3
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4a18      	ldr	r2, [pc, #96]	; (8009680 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800961e:	401a      	ands	r2, r3
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4313      	orrs	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4a16      	ldr	r2, [pc, #88]	; (8009684 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800962c:	401a      	ands	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4a13      	ldr	r2, [pc, #76]	; (8009688 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800963a:	401a      	ands	r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4a11      	ldr	r2, [pc, #68]	; (800968c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8009648:	401a      	ands	r2, r3
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a0e      	ldr	r2, [pc, #56]	; (8009690 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8009656:	401a      	ands	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	4313      	orrs	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	223c      	movs	r2, #60	; 0x3c
 800966c:	2100      	movs	r1, #0
 800966e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	0018      	movs	r0, r3
 8009674:	46bd      	mov	sp, r7
 8009676:	b004      	add	sp, #16
 8009678:	bd80      	pop	{r7, pc}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	fffffcff 	.word	0xfffffcff
 8009680:	fffffbff 	.word	0xfffffbff
 8009684:	fffff7ff 	.word	0xfffff7ff
 8009688:	ffffefff 	.word	0xffffefff
 800968c:	ffffdfff 	.word	0xffffdfff
 8009690:	ffffbfff 	.word	0xffffbfff

08009694 <gcvt>:
 8009694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009696:	001c      	movs	r4, r3
 8009698:	0015      	movs	r5, r2
 800969a:	2300      	movs	r3, #0
 800969c:	2200      	movs	r2, #0
 800969e:	b085      	sub	sp, #20
 80096a0:	0006      	movs	r6, r0
 80096a2:	000f      	movs	r7, r1
 80096a4:	f7f9 fb9a 	bl	8002ddc <__aeabi_dcmplt>
 80096a8:	0023      	movs	r3, r4
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d003      	beq.n	80096b6 <gcvt+0x22>
 80096ae:	232d      	movs	r3, #45	; 0x2d
 80096b0:	3d01      	subs	r5, #1
 80096b2:	7023      	strb	r3, [r4, #0]
 80096b4:	1c63      	adds	r3, r4, #1
 80096b6:	2200      	movs	r2, #0
 80096b8:	4908      	ldr	r1, [pc, #32]	; (80096dc <gcvt+0x48>)
 80096ba:	9203      	str	r2, [sp, #12]
 80096bc:	3267      	adds	r2, #103	; 0x67
 80096be:	9202      	str	r2, [sp, #8]
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	9500      	str	r5, [sp, #0]
 80096c4:	003b      	movs	r3, r7
 80096c6:	0032      	movs	r2, r6
 80096c8:	6808      	ldr	r0, [r1, #0]
 80096ca:	f000 f9bf 	bl	8009a4c <_gcvt>
 80096ce:	1e43      	subs	r3, r0, #1
 80096d0:	4198      	sbcs	r0, r3
 80096d2:	4240      	negs	r0, r0
 80096d4:	4004      	ands	r4, r0
 80096d6:	0020      	movs	r0, r4
 80096d8:	b005      	add	sp, #20
 80096da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096dc:	200000b8 	.word	0x200000b8

080096e0 <__errno>:
 80096e0:	4b01      	ldr	r3, [pc, #4]	; (80096e8 <__errno+0x8>)
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	4770      	bx	lr
 80096e6:	46c0      	nop			; (mov r8, r8)
 80096e8:	200000b8 	.word	0x200000b8

080096ec <__libc_init_array>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	2600      	movs	r6, #0
 80096f0:	4d0c      	ldr	r5, [pc, #48]	; (8009724 <__libc_init_array+0x38>)
 80096f2:	4c0d      	ldr	r4, [pc, #52]	; (8009728 <__libc_init_array+0x3c>)
 80096f4:	1b64      	subs	r4, r4, r5
 80096f6:	10a4      	asrs	r4, r4, #2
 80096f8:	42a6      	cmp	r6, r4
 80096fa:	d109      	bne.n	8009710 <__libc_init_array+0x24>
 80096fc:	2600      	movs	r6, #0
 80096fe:	f004 fd47 	bl	800e190 <_init>
 8009702:	4d0a      	ldr	r5, [pc, #40]	; (800972c <__libc_init_array+0x40>)
 8009704:	4c0a      	ldr	r4, [pc, #40]	; (8009730 <__libc_init_array+0x44>)
 8009706:	1b64      	subs	r4, r4, r5
 8009708:	10a4      	asrs	r4, r4, #2
 800970a:	42a6      	cmp	r6, r4
 800970c:	d105      	bne.n	800971a <__libc_init_array+0x2e>
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	00b3      	lsls	r3, r6, #2
 8009712:	58eb      	ldr	r3, [r5, r3]
 8009714:	4798      	blx	r3
 8009716:	3601      	adds	r6, #1
 8009718:	e7ee      	b.n	80096f8 <__libc_init_array+0xc>
 800971a:	00b3      	lsls	r3, r6, #2
 800971c:	58eb      	ldr	r3, [r5, r3]
 800971e:	4798      	blx	r3
 8009720:	3601      	adds	r6, #1
 8009722:	e7f2      	b.n	800970a <__libc_init_array+0x1e>
 8009724:	0800f478 	.word	0x0800f478
 8009728:	0800f478 	.word	0x0800f478
 800972c:	0800f478 	.word	0x0800f478
 8009730:	0800f47c 	.word	0x0800f47c

08009734 <malloc>:
 8009734:	b510      	push	{r4, lr}
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <malloc+0x10>)
 8009738:	0001      	movs	r1, r0
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	f000 f856 	bl	80097ec <_malloc_r>
 8009740:	bd10      	pop	{r4, pc}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	200000b8 	.word	0x200000b8

08009748 <memset>:
 8009748:	0003      	movs	r3, r0
 800974a:	1882      	adds	r2, r0, r2
 800974c:	4293      	cmp	r3, r2
 800974e:	d100      	bne.n	8009752 <memset+0xa>
 8009750:	4770      	bx	lr
 8009752:	7019      	strb	r1, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	e7f9      	b.n	800974c <memset+0x4>

08009758 <_free_r>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	0005      	movs	r5, r0
 800975c:	2900      	cmp	r1, #0
 800975e:	d010      	beq.n	8009782 <_free_r+0x2a>
 8009760:	1f0c      	subs	r4, r1, #4
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	da00      	bge.n	800976a <_free_r+0x12>
 8009768:	18e4      	adds	r4, r4, r3
 800976a:	0028      	movs	r0, r5
 800976c:	f000 fa4a 	bl	8009c04 <__malloc_lock>
 8009770:	4a1d      	ldr	r2, [pc, #116]	; (80097e8 <_free_r+0x90>)
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d105      	bne.n	8009784 <_free_r+0x2c>
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	6014      	str	r4, [r2, #0]
 800977c:	0028      	movs	r0, r5
 800977e:	f000 fa49 	bl	8009c14 <__malloc_unlock>
 8009782:	bd70      	pop	{r4, r5, r6, pc}
 8009784:	42a3      	cmp	r3, r4
 8009786:	d908      	bls.n	800979a <_free_r+0x42>
 8009788:	6821      	ldr	r1, [r4, #0]
 800978a:	1860      	adds	r0, r4, r1
 800978c:	4283      	cmp	r3, r0
 800978e:	d1f3      	bne.n	8009778 <_free_r+0x20>
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	1841      	adds	r1, r0, r1
 8009796:	6021      	str	r1, [r4, #0]
 8009798:	e7ee      	b.n	8009778 <_free_r+0x20>
 800979a:	001a      	movs	r2, r3
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <_free_r+0x4e>
 80097a2:	42a3      	cmp	r3, r4
 80097a4:	d9f9      	bls.n	800979a <_free_r+0x42>
 80097a6:	6811      	ldr	r1, [r2, #0]
 80097a8:	1850      	adds	r0, r2, r1
 80097aa:	42a0      	cmp	r0, r4
 80097ac:	d10b      	bne.n	80097c6 <_free_r+0x6e>
 80097ae:	6820      	ldr	r0, [r4, #0]
 80097b0:	1809      	adds	r1, r1, r0
 80097b2:	1850      	adds	r0, r2, r1
 80097b4:	6011      	str	r1, [r2, #0]
 80097b6:	4283      	cmp	r3, r0
 80097b8:	d1e0      	bne.n	800977c <_free_r+0x24>
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	1841      	adds	r1, r0, r1
 80097c0:	6011      	str	r1, [r2, #0]
 80097c2:	6053      	str	r3, [r2, #4]
 80097c4:	e7da      	b.n	800977c <_free_r+0x24>
 80097c6:	42a0      	cmp	r0, r4
 80097c8:	d902      	bls.n	80097d0 <_free_r+0x78>
 80097ca:	230c      	movs	r3, #12
 80097cc:	602b      	str	r3, [r5, #0]
 80097ce:	e7d5      	b.n	800977c <_free_r+0x24>
 80097d0:	6821      	ldr	r1, [r4, #0]
 80097d2:	1860      	adds	r0, r4, r1
 80097d4:	4283      	cmp	r3, r0
 80097d6:	d103      	bne.n	80097e0 <_free_r+0x88>
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	1841      	adds	r1, r0, r1
 80097de:	6021      	str	r1, [r4, #0]
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	6054      	str	r4, [r2, #4]
 80097e4:	e7ca      	b.n	800977c <_free_r+0x24>
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	20000160 	.word	0x20000160

080097ec <_malloc_r>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	2303      	movs	r3, #3
 80097f0:	1ccd      	adds	r5, r1, #3
 80097f2:	439d      	bics	r5, r3
 80097f4:	3508      	adds	r5, #8
 80097f6:	0006      	movs	r6, r0
 80097f8:	2d0c      	cmp	r5, #12
 80097fa:	d21f      	bcs.n	800983c <_malloc_r+0x50>
 80097fc:	250c      	movs	r5, #12
 80097fe:	42a9      	cmp	r1, r5
 8009800:	d81e      	bhi.n	8009840 <_malloc_r+0x54>
 8009802:	0030      	movs	r0, r6
 8009804:	f000 f9fe 	bl	8009c04 <__malloc_lock>
 8009808:	4925      	ldr	r1, [pc, #148]	; (80098a0 <_malloc_r+0xb4>)
 800980a:	680a      	ldr	r2, [r1, #0]
 800980c:	0014      	movs	r4, r2
 800980e:	2c00      	cmp	r4, #0
 8009810:	d11a      	bne.n	8009848 <_malloc_r+0x5c>
 8009812:	4f24      	ldr	r7, [pc, #144]	; (80098a4 <_malloc_r+0xb8>)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d104      	bne.n	8009824 <_malloc_r+0x38>
 800981a:	0021      	movs	r1, r4
 800981c:	0030      	movs	r0, r6
 800981e:	f000 f843 	bl	80098a8 <_sbrk_r>
 8009822:	6038      	str	r0, [r7, #0]
 8009824:	0029      	movs	r1, r5
 8009826:	0030      	movs	r0, r6
 8009828:	f000 f83e 	bl	80098a8 <_sbrk_r>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d12b      	bne.n	8009888 <_malloc_r+0x9c>
 8009830:	230c      	movs	r3, #12
 8009832:	0030      	movs	r0, r6
 8009834:	6033      	str	r3, [r6, #0]
 8009836:	f000 f9ed 	bl	8009c14 <__malloc_unlock>
 800983a:	e003      	b.n	8009844 <_malloc_r+0x58>
 800983c:	2d00      	cmp	r5, #0
 800983e:	dade      	bge.n	80097fe <_malloc_r+0x12>
 8009840:	230c      	movs	r3, #12
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	2000      	movs	r0, #0
 8009846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	1b5b      	subs	r3, r3, r5
 800984c:	d419      	bmi.n	8009882 <_malloc_r+0x96>
 800984e:	2b0b      	cmp	r3, #11
 8009850:	d903      	bls.n	800985a <_malloc_r+0x6e>
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	18e4      	adds	r4, r4, r3
 8009856:	6025      	str	r5, [r4, #0]
 8009858:	e003      	b.n	8009862 <_malloc_r+0x76>
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	42a2      	cmp	r2, r4
 800985e:	d10e      	bne.n	800987e <_malloc_r+0x92>
 8009860:	600b      	str	r3, [r1, #0]
 8009862:	0030      	movs	r0, r6
 8009864:	f000 f9d6 	bl	8009c14 <__malloc_unlock>
 8009868:	0020      	movs	r0, r4
 800986a:	2207      	movs	r2, #7
 800986c:	300b      	adds	r0, #11
 800986e:	1d23      	adds	r3, r4, #4
 8009870:	4390      	bics	r0, r2
 8009872:	1ac2      	subs	r2, r0, r3
 8009874:	4298      	cmp	r0, r3
 8009876:	d0e6      	beq.n	8009846 <_malloc_r+0x5a>
 8009878:	1a1b      	subs	r3, r3, r0
 800987a:	50a3      	str	r3, [r4, r2]
 800987c:	e7e3      	b.n	8009846 <_malloc_r+0x5a>
 800987e:	6053      	str	r3, [r2, #4]
 8009880:	e7ef      	b.n	8009862 <_malloc_r+0x76>
 8009882:	0022      	movs	r2, r4
 8009884:	6864      	ldr	r4, [r4, #4]
 8009886:	e7c2      	b.n	800980e <_malloc_r+0x22>
 8009888:	2303      	movs	r3, #3
 800988a:	1cc4      	adds	r4, r0, #3
 800988c:	439c      	bics	r4, r3
 800988e:	42a0      	cmp	r0, r4
 8009890:	d0e1      	beq.n	8009856 <_malloc_r+0x6a>
 8009892:	1a21      	subs	r1, r4, r0
 8009894:	0030      	movs	r0, r6
 8009896:	f000 f807 	bl	80098a8 <_sbrk_r>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	d1db      	bne.n	8009856 <_malloc_r+0x6a>
 800989e:	e7c7      	b.n	8009830 <_malloc_r+0x44>
 80098a0:	20000160 	.word	0x20000160
 80098a4:	20000164 	.word	0x20000164

080098a8 <_sbrk_r>:
 80098a8:	2300      	movs	r3, #0
 80098aa:	b570      	push	{r4, r5, r6, lr}
 80098ac:	4d06      	ldr	r5, [pc, #24]	; (80098c8 <_sbrk_r+0x20>)
 80098ae:	0004      	movs	r4, r0
 80098b0:	0008      	movs	r0, r1
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	f7fc fb02 	bl	8005ebc <_sbrk>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d103      	bne.n	80098c4 <_sbrk_r+0x1c>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d000      	beq.n	80098c4 <_sbrk_r+0x1c>
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	20001304 	.word	0x20001304

080098cc <siprintf>:
 80098cc:	b40e      	push	{r1, r2, r3}
 80098ce:	b500      	push	{lr}
 80098d0:	490b      	ldr	r1, [pc, #44]	; (8009900 <siprintf+0x34>)
 80098d2:	b09c      	sub	sp, #112	; 0x70
 80098d4:	ab1d      	add	r3, sp, #116	; 0x74
 80098d6:	9002      	str	r0, [sp, #8]
 80098d8:	9006      	str	r0, [sp, #24]
 80098da:	9107      	str	r1, [sp, #28]
 80098dc:	9104      	str	r1, [sp, #16]
 80098de:	4809      	ldr	r0, [pc, #36]	; (8009904 <siprintf+0x38>)
 80098e0:	4909      	ldr	r1, [pc, #36]	; (8009908 <siprintf+0x3c>)
 80098e2:	cb04      	ldmia	r3!, {r2}
 80098e4:	9105      	str	r1, [sp, #20]
 80098e6:	6800      	ldr	r0, [r0, #0]
 80098e8:	a902      	add	r1, sp, #8
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	f000 fde8 	bl	800a4c0 <_svfiprintf_r>
 80098f0:	2300      	movs	r3, #0
 80098f2:	9a02      	ldr	r2, [sp, #8]
 80098f4:	7013      	strb	r3, [r2, #0]
 80098f6:	b01c      	add	sp, #112	; 0x70
 80098f8:	bc08      	pop	{r3}
 80098fa:	b003      	add	sp, #12
 80098fc:	4718      	bx	r3
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	7fffffff 	.word	0x7fffffff
 8009904:	200000b8 	.word	0x200000b8
 8009908:	ffff0208 	.word	0xffff0208

0800990c <__assert_func>:
 800990c:	b530      	push	{r4, r5, lr}
 800990e:	0014      	movs	r4, r2
 8009910:	001a      	movs	r2, r3
 8009912:	4b09      	ldr	r3, [pc, #36]	; (8009938 <__assert_func+0x2c>)
 8009914:	0005      	movs	r5, r0
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	b085      	sub	sp, #20
 800991a:	68d8      	ldr	r0, [r3, #12]
 800991c:	4b07      	ldr	r3, [pc, #28]	; (800993c <__assert_func+0x30>)
 800991e:	2c00      	cmp	r4, #0
 8009920:	d101      	bne.n	8009926 <__assert_func+0x1a>
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <__assert_func+0x34>)
 8009924:	001c      	movs	r4, r3
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	9100      	str	r1, [sp, #0]
 800992a:	002b      	movs	r3, r5
 800992c:	4905      	ldr	r1, [pc, #20]	; (8009944 <__assert_func+0x38>)
 800992e:	9402      	str	r4, [sp, #8]
 8009930:	f000 f958 	bl	8009be4 <fiprintf>
 8009934:	f001 fa7e 	bl	800ae34 <abort>
 8009938:	200000b8 	.word	0x200000b8
 800993c:	0800ef98 	.word	0x0800ef98
 8009940:	0800efd3 	.word	0x0800efd3
 8009944:	0800efa5 	.word	0x0800efa5

08009948 <print_e>:
 8009948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994a:	b08b      	sub	sp, #44	; 0x2c
 800994c:	000f      	movs	r7, r1
 800994e:	a910      	add	r1, sp, #64	; 0x40
 8009950:	c920      	ldmia	r1!, {r5}
 8009952:	780e      	ldrb	r6, [r1, #0]
 8009954:	a908      	add	r1, sp, #32
 8009956:	9104      	str	r1, [sp, #16]
 8009958:	a907      	add	r1, sp, #28
 800995a:	9103      	str	r1, [sp, #12]
 800995c:	a909      	add	r1, sp, #36	; 0x24
 800995e:	9102      	str	r1, [sp, #8]
 8009960:	1c69      	adds	r1, r5, #1
 8009962:	9101      	str	r1, [sp, #4]
 8009964:	2102      	movs	r1, #2
 8009966:	9100      	str	r1, [sp, #0]
 8009968:	f001 faf6 	bl	800af58 <_dtoa_r>
 800996c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996e:	4b36      	ldr	r3, [pc, #216]	; (8009a48 <print_e+0x100>)
 8009970:	0001      	movs	r1, r0
 8009972:	429a      	cmp	r2, r3
 8009974:	d104      	bne.n	8009980 <print_e+0x38>
 8009976:	0038      	movs	r0, r7
 8009978:	f001 f986 	bl	800ac88 <strcpy>
 800997c:	b00b      	add	sp, #44	; 0x2c
 800997e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009980:	7801      	ldrb	r1, [r0, #0]
 8009982:	1c43      	adds	r3, r0, #1
 8009984:	1c7c      	adds	r4, r7, #1
 8009986:	7039      	strb	r1, [r7, #0]
 8009988:	2d00      	cmp	r5, #0
 800998a:	dd01      	ble.n	8009990 <print_e+0x48>
 800998c:	2101      	movs	r1, #1
 800998e:	9112      	str	r1, [sp, #72]	; 0x48
 8009990:	212e      	movs	r1, #46	; 0x2e
 8009992:	7818      	ldrb	r0, [r3, #0]
 8009994:	2800      	cmp	r0, #0
 8009996:	d001      	beq.n	800999c <print_e+0x54>
 8009998:	2d00      	cmp	r5, #0
 800999a:	dc35      	bgt.n	8009a08 <print_e+0xc0>
 800999c:	2e67      	cmp	r6, #103	; 0x67
 800999e:	d04b      	beq.n	8009a38 <print_e+0xf0>
 80099a0:	2e47      	cmp	r6, #71	; 0x47
 80099a2:	d04b      	beq.n	8009a3c <print_e+0xf4>
 80099a4:	232e      	movs	r3, #46	; 0x2e
 80099a6:	2130      	movs	r1, #48	; 0x30
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	dc3a      	bgt.n	8009a22 <print_e+0xda>
 80099ac:	1e53      	subs	r3, r2, #1
 80099ae:	7026      	strb	r6, [r4, #0]
 80099b0:	9309      	str	r3, [sp, #36]	; 0x24
 80099b2:	1ca5      	adds	r5, r4, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	da43      	bge.n	8009a40 <print_e+0xf8>
 80099b8:	232d      	movs	r3, #45	; 0x2d
 80099ba:	7063      	strb	r3, [r4, #1]
 80099bc:	3b2c      	subs	r3, #44	; 0x2c
 80099be:	1a9b      	subs	r3, r3, r2
 80099c0:	9309      	str	r3, [sp, #36]	; 0x24
 80099c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099c4:	2e63      	cmp	r6, #99	; 0x63
 80099c6:	dd0d      	ble.n	80099e4 <print_e+0x9c>
 80099c8:	2164      	movs	r1, #100	; 0x64
 80099ca:	0030      	movs	r0, r6
 80099cc:	f7f6 fc24 	bl	8000218 <__divsi3>
 80099d0:	0003      	movs	r3, r0
 80099d2:	0002      	movs	r2, r0
 80099d4:	2064      	movs	r0, #100	; 0x64
 80099d6:	4240      	negs	r0, r0
 80099d8:	4358      	muls	r0, r3
 80099da:	3230      	adds	r2, #48	; 0x30
 80099dc:	1980      	adds	r0, r0, r6
 80099de:	1ce5      	adds	r5, r4, #3
 80099e0:	70a2      	strb	r2, [r4, #2]
 80099e2:	9009      	str	r0, [sp, #36]	; 0x24
 80099e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80099e6:	210a      	movs	r1, #10
 80099e8:	0020      	movs	r0, r4
 80099ea:	f7f6 fc15 	bl	8000218 <__divsi3>
 80099ee:	0003      	movs	r3, r0
 80099f0:	0002      	movs	r2, r0
 80099f2:	200a      	movs	r0, #10
 80099f4:	4240      	negs	r0, r0
 80099f6:	4358      	muls	r0, r3
 80099f8:	2300      	movs	r3, #0
 80099fa:	1900      	adds	r0, r0, r4
 80099fc:	3230      	adds	r2, #48	; 0x30
 80099fe:	3030      	adds	r0, #48	; 0x30
 8009a00:	702a      	strb	r2, [r5, #0]
 8009a02:	7068      	strb	r0, [r5, #1]
 8009a04:	70ab      	strb	r3, [r5, #2]
 8009a06:	e7b9      	b.n	800997c <print_e+0x34>
 8009a08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d001      	beq.n	8009a12 <print_e+0xca>
 8009a0e:	7021      	strb	r1, [r4, #0]
 8009a10:	3401      	adds	r4, #1
 8009a12:	7818      	ldrb	r0, [r3, #0]
 8009a14:	3d01      	subs	r5, #1
 8009a16:	7020      	strb	r0, [r4, #0]
 8009a18:	2000      	movs	r0, #0
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	3401      	adds	r4, #1
 8009a1e:	9012      	str	r0, [sp, #72]	; 0x48
 8009a20:	e7b7      	b.n	8009992 <print_e+0x4a>
 8009a22:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d001      	beq.n	8009a2c <print_e+0xe4>
 8009a28:	7023      	strb	r3, [r4, #0]
 8009a2a:	3401      	adds	r4, #1
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	7021      	strb	r1, [r4, #0]
 8009a30:	3d01      	subs	r5, #1
 8009a32:	3401      	adds	r4, #1
 8009a34:	9012      	str	r0, [sp, #72]	; 0x48
 8009a36:	e7b7      	b.n	80099a8 <print_e+0x60>
 8009a38:	2665      	movs	r6, #101	; 0x65
 8009a3a:	e7b7      	b.n	80099ac <print_e+0x64>
 8009a3c:	2645      	movs	r6, #69	; 0x45
 8009a3e:	e7b5      	b.n	80099ac <print_e+0x64>
 8009a40:	232b      	movs	r3, #43	; 0x2b
 8009a42:	7063      	strb	r3, [r4, #1]
 8009a44:	e7bd      	b.n	80099c2 <print_e+0x7a>
 8009a46:	46c0      	nop			; (mov r8, r8)
 8009a48:	0000270f 	.word	0x0000270f

08009a4c <_gcvt>:
 8009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4e:	0016      	movs	r6, r2
 8009a50:	001d      	movs	r5, r3
 8009a52:	b08d      	sub	sp, #52	; 0x34
 8009a54:	ab14      	add	r3, sp, #80	; 0x50
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	0007      	movs	r7, r0
 8009a5a:	9307      	str	r3, [sp, #28]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2300      	movs	r3, #0
 8009a60:	0030      	movs	r0, r6
 8009a62:	0029      	movs	r1, r5
 8009a64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009a66:	f7f9 f9b9 	bl	8002ddc <__aeabi_dcmplt>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d002      	beq.n	8009a74 <_gcvt+0x28>
 8009a6e:	2380      	movs	r3, #128	; 0x80
 8009a70:	061b      	lsls	r3, r3, #24
 8009a72:	18ed      	adds	r5, r5, r3
 8009a74:	2200      	movs	r2, #0
 8009a76:	2300      	movs	r3, #0
 8009a78:	0030      	movs	r0, r6
 8009a7a:	0029      	movs	r1, r5
 8009a7c:	f7f9 f9a8 	bl	8002dd0 <__aeabi_dcmpeq>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d006      	beq.n	8009a92 <_gcvt+0x46>
 8009a84:	2330      	movs	r3, #48	; 0x30
 8009a86:	7023      	strb	r3, [r4, #0]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	7063      	strb	r3, [r4, #1]
 8009a8c:	0020      	movs	r0, r4
 8009a8e:	b00d      	add	sp, #52	; 0x34
 8009a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a92:	0030      	movs	r0, r6
 8009a94:	0029      	movs	r1, r5
 8009a96:	4a50      	ldr	r2, [pc, #320]	; (8009bd8 <_gcvt+0x18c>)
 8009a98:	4b50      	ldr	r3, [pc, #320]	; (8009bdc <_gcvt+0x190>)
 8009a9a:	f7f9 f9a9 	bl	8002df0 <__aeabi_dcmple>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d00d      	beq.n	8009abe <_gcvt+0x72>
 8009aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aa4:	0032      	movs	r2, r6
 8009aa6:	9302      	str	r3, [sp, #8]
 8009aa8:	9b07      	ldr	r3, [sp, #28]
 8009aaa:	0021      	movs	r1, r4
 8009aac:	9301      	str	r3, [sp, #4]
 8009aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ab0:	0038      	movs	r0, r7
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	002b      	movs	r3, r5
 8009ab8:	f7ff ff46 	bl	8009948 <print_e>
 8009abc:	e7e6      	b.n	8009a8c <_gcvt+0x40>
 8009abe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ac0:	f000 fc4e 	bl	800a360 <_mprec_log10>
 8009ac4:	0032      	movs	r2, r6
 8009ac6:	002b      	movs	r3, r5
 8009ac8:	f7f9 f992 	bl	8002df0 <__aeabi_dcmple>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1e8      	bne.n	8009aa2 <_gcvt+0x56>
 8009ad0:	ab0b      	add	r3, sp, #44	; 0x2c
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	ab0a      	add	r3, sp, #40	; 0x28
 8009ad6:	9303      	str	r3, [sp, #12]
 8009ad8:	ab09      	add	r3, sp, #36	; 0x24
 8009ada:	9302      	str	r3, [sp, #8]
 8009adc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ade:	0032      	movs	r2, r6
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	0038      	movs	r0, r7
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	002b      	movs	r3, r5
 8009aea:	f001 fa35 	bl	800af58 <_dtoa_r>
 8009aee:	4b3c      	ldr	r3, [pc, #240]	; (8009be0 <_gcvt+0x194>)
 8009af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af2:	0001      	movs	r1, r0
 8009af4:	0020      	movs	r0, r4
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d00d      	beq.n	8009b16 <_gcvt+0xca>
 8009afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009afc:	18e2      	adds	r2, r4, r3
 8009afe:	780e      	ldrb	r6, [r1, #0]
 8009b00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b02:	1a13      	subs	r3, r2, r0
 8009b04:	2e00      	cmp	r6, #0
 8009b06:	d002      	beq.n	8009b0e <_gcvt+0xc2>
 8009b08:	2d00      	cmp	r5, #0
 8009b0a:	dc07      	bgt.n	8009b1c <_gcvt+0xd0>
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	2201      	movs	r2, #1
 8009b10:	2730      	movs	r7, #48	; 0x30
 8009b12:	4694      	mov	ip, r2
 8009b14:	e00f      	b.n	8009b36 <_gcvt+0xea>
 8009b16:	f001 f8b7 	bl	800ac88 <strcpy>
 8009b1a:	e7b7      	b.n	8009a8c <_gcvt+0x40>
 8009b1c:	3d01      	subs	r5, #1
 8009b1e:	7006      	strb	r6, [r0, #0]
 8009b20:	3101      	adds	r1, #1
 8009b22:	9509      	str	r5, [sp, #36]	; 0x24
 8009b24:	3001      	adds	r0, #1
 8009b26:	e7ea      	b.n	8009afe <_gcvt+0xb2>
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dd07      	ble.n	8009b3c <_gcvt+0xf0>
 8009b2c:	4666      	mov	r6, ip
 8009b2e:	7007      	strb	r7, [r0, #0]
 8009b30:	3d01      	subs	r5, #1
 8009b32:	3b01      	subs	r3, #1
 8009b34:	3001      	adds	r0, #1
 8009b36:	0002      	movs	r2, r0
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	dcf5      	bgt.n	8009b28 <_gcvt+0xdc>
 8009b3c:	2e00      	cmp	r6, #0
 8009b3e:	d000      	beq.n	8009b42 <_gcvt+0xf6>
 8009b40:	9509      	str	r5, [sp, #36]	; 0x24
 8009b42:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009b44:	2d00      	cmp	r5, #0
 8009b46:	d102      	bne.n	8009b4e <_gcvt+0x102>
 8009b48:	780d      	ldrb	r5, [r1, #0]
 8009b4a:	2d00      	cmp	r5, #0
 8009b4c:	d029      	beq.n	8009ba2 <_gcvt+0x156>
 8009b4e:	4284      	cmp	r4, r0
 8009b50:	d102      	bne.n	8009b58 <_gcvt+0x10c>
 8009b52:	2230      	movs	r2, #48	; 0x30
 8009b54:	7022      	strb	r2, [r4, #0]
 8009b56:	1c62      	adds	r2, r4, #1
 8009b58:	202e      	movs	r0, #46	; 0x2e
 8009b5a:	7010      	strb	r0, [r2, #0]
 8009b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b5e:	0015      	movs	r5, r2
 8009b60:	1a87      	subs	r7, r0, r2
 8009b62:	9707      	str	r7, [sp, #28]
 8009b64:	2701      	movs	r7, #1
 8009b66:	2600      	movs	r6, #0
 8009b68:	46bc      	mov	ip, r7
 8009b6a:	9f07      	ldr	r7, [sp, #28]
 8009b6c:	42ef      	cmn	r7, r5
 8009b6e:	d41b      	bmi.n	8009ba8 <_gcvt+0x15c>
 8009b70:	2500      	movs	r5, #0
 8009b72:	4247      	negs	r7, r0
 8009b74:	42a8      	cmp	r0, r5
 8009b76:	dc00      	bgt.n	8009b7a <_gcvt+0x12e>
 8009b78:	003d      	movs	r5, r7
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	1952      	adds	r2, r2, r5
 8009b7e:	2500      	movs	r5, #0
 8009b80:	42a8      	cmp	r0, r5
 8009b82:	dc00      	bgt.n	8009b86 <_gcvt+0x13a>
 8009b84:	003d      	movs	r5, r7
 8009b86:	1945      	adds	r5, r0, r5
 8009b88:	2e00      	cmp	r6, #0
 8009b8a:	d000      	beq.n	8009b8e <_gcvt+0x142>
 8009b8c:	9509      	str	r5, [sp, #36]	; 0x24
 8009b8e:	0010      	movs	r0, r2
 8009b90:	780d      	ldrb	r5, [r1, #0]
 8009b92:	0002      	movs	r2, r0
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	d001      	beq.n	8009b9c <_gcvt+0x150>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dc0a      	bgt.n	8009bb2 <_gcvt+0x166>
 8009b9c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009b9e:	2900      	cmp	r1, #0
 8009ba0:	d116      	bne.n	8009bd0 <_gcvt+0x184>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	7013      	strb	r3, [r2, #0]
 8009ba6:	e771      	b.n	8009a8c <_gcvt+0x40>
 8009ba8:	2630      	movs	r6, #48	; 0x30
 8009baa:	3501      	adds	r5, #1
 8009bac:	702e      	strb	r6, [r5, #0]
 8009bae:	4666      	mov	r6, ip
 8009bb0:	e7db      	b.n	8009b6a <_gcvt+0x11e>
 8009bb2:	7005      	strb	r5, [r0, #0]
 8009bb4:	3101      	adds	r1, #1
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	3001      	adds	r0, #1
 8009bba:	e7e9      	b.n	8009b90 <_gcvt+0x144>
 8009bbc:	7016      	strb	r6, [r2, #0]
 8009bbe:	3201      	adds	r2, #1
 8009bc0:	1aa9      	subs	r1, r5, r2
 8009bc2:	2900      	cmp	r1, #0
 8009bc4:	dcfa      	bgt.n	8009bbc <_gcvt+0x170>
 8009bc6:	43da      	mvns	r2, r3
 8009bc8:	17d2      	asrs	r2, r2, #31
 8009bca:	401a      	ands	r2, r3
 8009bcc:	1882      	adds	r2, r0, r2
 8009bce:	e7e8      	b.n	8009ba2 <_gcvt+0x156>
 8009bd0:	0002      	movs	r2, r0
 8009bd2:	2630      	movs	r6, #48	; 0x30
 8009bd4:	181d      	adds	r5, r3, r0
 8009bd6:	e7f3      	b.n	8009bc0 <_gcvt+0x174>
 8009bd8:	eb1c432d 	.word	0xeb1c432d
 8009bdc:	3f1a36e2 	.word	0x3f1a36e2
 8009be0:	0000270f 	.word	0x0000270f

08009be4 <fiprintf>:
 8009be4:	b40e      	push	{r1, r2, r3}
 8009be6:	b503      	push	{r0, r1, lr}
 8009be8:	0001      	movs	r1, r0
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	4804      	ldr	r0, [pc, #16]	; (8009c00 <fiprintf+0x1c>)
 8009bee:	cb04      	ldmia	r3!, {r2}
 8009bf0:	6800      	ldr	r0, [r0, #0]
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	f000 fd8c 	bl	800a710 <_vfiprintf_r>
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	b003      	add	sp, #12
 8009bfe:	4718      	bx	r3
 8009c00:	200000b8 	.word	0x200000b8

08009c04 <__malloc_lock>:
 8009c04:	b510      	push	{r4, lr}
 8009c06:	4802      	ldr	r0, [pc, #8]	; (8009c10 <__malloc_lock+0xc>)
 8009c08:	f002 f993 	bl	800bf32 <__retarget_lock_acquire_recursive>
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	2000130c 	.word	0x2000130c

08009c14 <__malloc_unlock>:
 8009c14:	b510      	push	{r4, lr}
 8009c16:	4802      	ldr	r0, [pc, #8]	; (8009c20 <__malloc_unlock+0xc>)
 8009c18:	f002 f98c 	bl	800bf34 <__retarget_lock_release_recursive>
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	46c0      	nop			; (mov r8, r8)
 8009c20:	2000130c 	.word	0x2000130c

08009c24 <_Balloc>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c28:	0006      	movs	r6, r0
 8009c2a:	000c      	movs	r4, r1
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	d10e      	bne.n	8009c4e <_Balloc+0x2a>
 8009c30:	2010      	movs	r0, #16
 8009c32:	f7ff fd7f 	bl	8009734 <malloc>
 8009c36:	1e02      	subs	r2, r0, #0
 8009c38:	6270      	str	r0, [r6, #36]	; 0x24
 8009c3a:	d104      	bne.n	8009c46 <_Balloc+0x22>
 8009c3c:	2166      	movs	r1, #102	; 0x66
 8009c3e:	4b19      	ldr	r3, [pc, #100]	; (8009ca4 <_Balloc+0x80>)
 8009c40:	4819      	ldr	r0, [pc, #100]	; (8009ca8 <_Balloc+0x84>)
 8009c42:	f7ff fe63 	bl	800990c <__assert_func>
 8009c46:	6045      	str	r5, [r0, #4]
 8009c48:	6085      	str	r5, [r0, #8]
 8009c4a:	6005      	str	r5, [r0, #0]
 8009c4c:	60c5      	str	r5, [r0, #12]
 8009c4e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009c50:	68eb      	ldr	r3, [r5, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d013      	beq.n	8009c7e <_Balloc+0x5a>
 8009c56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c58:	00a2      	lsls	r2, r4, #2
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	189b      	adds	r3, r3, r2
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d118      	bne.n	8009c96 <_Balloc+0x72>
 8009c64:	2101      	movs	r1, #1
 8009c66:	000d      	movs	r5, r1
 8009c68:	40a5      	lsls	r5, r4
 8009c6a:	1d6a      	adds	r2, r5, #5
 8009c6c:	0030      	movs	r0, r6
 8009c6e:	0092      	lsls	r2, r2, #2
 8009c70:	f000 fb90 	bl	800a394 <_calloc_r>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d00c      	beq.n	8009c92 <_Balloc+0x6e>
 8009c78:	6044      	str	r4, [r0, #4]
 8009c7a:	6085      	str	r5, [r0, #8]
 8009c7c:	e00d      	b.n	8009c9a <_Balloc+0x76>
 8009c7e:	2221      	movs	r2, #33	; 0x21
 8009c80:	2104      	movs	r1, #4
 8009c82:	0030      	movs	r0, r6
 8009c84:	f000 fb86 	bl	800a394 <_calloc_r>
 8009c88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c8a:	60e8      	str	r0, [r5, #12]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e1      	bne.n	8009c56 <_Balloc+0x32>
 8009c92:	2000      	movs	r0, #0
 8009c94:	bd70      	pop	{r4, r5, r6, pc}
 8009c96:	6802      	ldr	r2, [r0, #0]
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	6103      	str	r3, [r0, #16]
 8009c9e:	60c3      	str	r3, [r0, #12]
 8009ca0:	e7f8      	b.n	8009c94 <_Balloc+0x70>
 8009ca2:	46c0      	nop			; (mov r8, r8)
 8009ca4:	0800efd4 	.word	0x0800efd4
 8009ca8:	0800efeb 	.word	0x0800efeb

08009cac <_Bfree>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cb0:	0005      	movs	r5, r0
 8009cb2:	000c      	movs	r4, r1
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	d10e      	bne.n	8009cd6 <_Bfree+0x2a>
 8009cb8:	2010      	movs	r0, #16
 8009cba:	f7ff fd3b 	bl	8009734 <malloc>
 8009cbe:	1e02      	subs	r2, r0, #0
 8009cc0:	6268      	str	r0, [r5, #36]	; 0x24
 8009cc2:	d104      	bne.n	8009cce <_Bfree+0x22>
 8009cc4:	218a      	movs	r1, #138	; 0x8a
 8009cc6:	4b09      	ldr	r3, [pc, #36]	; (8009cec <_Bfree+0x40>)
 8009cc8:	4809      	ldr	r0, [pc, #36]	; (8009cf0 <_Bfree+0x44>)
 8009cca:	f7ff fe1f 	bl	800990c <__assert_func>
 8009cce:	6046      	str	r6, [r0, #4]
 8009cd0:	6086      	str	r6, [r0, #8]
 8009cd2:	6006      	str	r6, [r0, #0]
 8009cd4:	60c6      	str	r6, [r0, #12]
 8009cd6:	2c00      	cmp	r4, #0
 8009cd8:	d007      	beq.n	8009cea <_Bfree+0x3e>
 8009cda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009cdc:	6862      	ldr	r2, [r4, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	0092      	lsls	r2, r2, #2
 8009ce2:	189b      	adds	r3, r3, r2
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	6022      	str	r2, [r4, #0]
 8009ce8:	601c      	str	r4, [r3, #0]
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	0800efd4 	.word	0x0800efd4
 8009cf0:	0800efeb 	.word	0x0800efeb

08009cf4 <__multadd>:
 8009cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cf6:	000e      	movs	r6, r1
 8009cf8:	9001      	str	r0, [sp, #4]
 8009cfa:	000c      	movs	r4, r1
 8009cfc:	001d      	movs	r5, r3
 8009cfe:	2000      	movs	r0, #0
 8009d00:	690f      	ldr	r7, [r1, #16]
 8009d02:	3614      	adds	r6, #20
 8009d04:	6833      	ldr	r3, [r6, #0]
 8009d06:	3001      	adds	r0, #1
 8009d08:	b299      	uxth	r1, r3
 8009d0a:	4351      	muls	r1, r2
 8009d0c:	0c1b      	lsrs	r3, r3, #16
 8009d0e:	4353      	muls	r3, r2
 8009d10:	1949      	adds	r1, r1, r5
 8009d12:	0c0d      	lsrs	r5, r1, #16
 8009d14:	195b      	adds	r3, r3, r5
 8009d16:	0c1d      	lsrs	r5, r3, #16
 8009d18:	b289      	uxth	r1, r1
 8009d1a:	041b      	lsls	r3, r3, #16
 8009d1c:	185b      	adds	r3, r3, r1
 8009d1e:	c608      	stmia	r6!, {r3}
 8009d20:	4287      	cmp	r7, r0
 8009d22:	dcef      	bgt.n	8009d04 <__multadd+0x10>
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	d022      	beq.n	8009d6e <__multadd+0x7a>
 8009d28:	68a3      	ldr	r3, [r4, #8]
 8009d2a:	42bb      	cmp	r3, r7
 8009d2c:	dc19      	bgt.n	8009d62 <__multadd+0x6e>
 8009d2e:	6863      	ldr	r3, [r4, #4]
 8009d30:	9801      	ldr	r0, [sp, #4]
 8009d32:	1c59      	adds	r1, r3, #1
 8009d34:	f7ff ff76 	bl	8009c24 <_Balloc>
 8009d38:	1e06      	subs	r6, r0, #0
 8009d3a:	d105      	bne.n	8009d48 <__multadd+0x54>
 8009d3c:	0002      	movs	r2, r0
 8009d3e:	21b5      	movs	r1, #181	; 0xb5
 8009d40:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <__multadd+0x80>)
 8009d42:	480d      	ldr	r0, [pc, #52]	; (8009d78 <__multadd+0x84>)
 8009d44:	f7ff fde2 	bl	800990c <__assert_func>
 8009d48:	0021      	movs	r1, r4
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	310c      	adds	r1, #12
 8009d4e:	1c9a      	adds	r2, r3, #2
 8009d50:	0092      	lsls	r2, r2, #2
 8009d52:	300c      	adds	r0, #12
 8009d54:	f002 f967 	bl	800c026 <memcpy>
 8009d58:	0021      	movs	r1, r4
 8009d5a:	9801      	ldr	r0, [sp, #4]
 8009d5c:	f7ff ffa6 	bl	8009cac <_Bfree>
 8009d60:	0034      	movs	r4, r6
 8009d62:	1d3b      	adds	r3, r7, #4
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	18e3      	adds	r3, r4, r3
 8009d68:	605d      	str	r5, [r3, #4]
 8009d6a:	1c7b      	adds	r3, r7, #1
 8009d6c:	6123      	str	r3, [r4, #16]
 8009d6e:	0020      	movs	r0, r4
 8009d70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	0800f04b 	.word	0x0800f04b
 8009d78:	0800efeb 	.word	0x0800efeb

08009d7c <__hi0bits>:
 8009d7c:	0003      	movs	r3, r0
 8009d7e:	0c02      	lsrs	r2, r0, #16
 8009d80:	2000      	movs	r0, #0
 8009d82:	4282      	cmp	r2, r0
 8009d84:	d101      	bne.n	8009d8a <__hi0bits+0xe>
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	3010      	adds	r0, #16
 8009d8a:	0e1a      	lsrs	r2, r3, #24
 8009d8c:	d101      	bne.n	8009d92 <__hi0bits+0x16>
 8009d8e:	3008      	adds	r0, #8
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	0f1a      	lsrs	r2, r3, #28
 8009d94:	d101      	bne.n	8009d9a <__hi0bits+0x1e>
 8009d96:	3004      	adds	r0, #4
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	0f9a      	lsrs	r2, r3, #30
 8009d9c:	d101      	bne.n	8009da2 <__hi0bits+0x26>
 8009d9e:	3002      	adds	r0, #2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	db03      	blt.n	8009dae <__hi0bits+0x32>
 8009da6:	3001      	adds	r0, #1
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	d400      	bmi.n	8009dae <__hi0bits+0x32>
 8009dac:	2020      	movs	r0, #32
 8009dae:	4770      	bx	lr

08009db0 <__lo0bits>:
 8009db0:	6803      	ldr	r3, [r0, #0]
 8009db2:	0002      	movs	r2, r0
 8009db4:	2107      	movs	r1, #7
 8009db6:	0018      	movs	r0, r3
 8009db8:	4008      	ands	r0, r1
 8009dba:	420b      	tst	r3, r1
 8009dbc:	d00d      	beq.n	8009dda <__lo0bits+0x2a>
 8009dbe:	3906      	subs	r1, #6
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	420b      	tst	r3, r1
 8009dc4:	d105      	bne.n	8009dd2 <__lo0bits+0x22>
 8009dc6:	3002      	adds	r0, #2
 8009dc8:	4203      	tst	r3, r0
 8009dca:	d003      	beq.n	8009dd4 <__lo0bits+0x24>
 8009dcc:	40cb      	lsrs	r3, r1
 8009dce:	0008      	movs	r0, r1
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	4770      	bx	lr
 8009dd4:	089b      	lsrs	r3, r3, #2
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	e7fb      	b.n	8009dd2 <__lo0bits+0x22>
 8009dda:	b299      	uxth	r1, r3
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	d101      	bne.n	8009de4 <__lo0bits+0x34>
 8009de0:	2010      	movs	r0, #16
 8009de2:	0c1b      	lsrs	r3, r3, #16
 8009de4:	b2d9      	uxtb	r1, r3
 8009de6:	2900      	cmp	r1, #0
 8009de8:	d101      	bne.n	8009dee <__lo0bits+0x3e>
 8009dea:	3008      	adds	r0, #8
 8009dec:	0a1b      	lsrs	r3, r3, #8
 8009dee:	0719      	lsls	r1, r3, #28
 8009df0:	d101      	bne.n	8009df6 <__lo0bits+0x46>
 8009df2:	3004      	adds	r0, #4
 8009df4:	091b      	lsrs	r3, r3, #4
 8009df6:	0799      	lsls	r1, r3, #30
 8009df8:	d101      	bne.n	8009dfe <__lo0bits+0x4e>
 8009dfa:	3002      	adds	r0, #2
 8009dfc:	089b      	lsrs	r3, r3, #2
 8009dfe:	07d9      	lsls	r1, r3, #31
 8009e00:	d4e9      	bmi.n	8009dd6 <__lo0bits+0x26>
 8009e02:	3001      	adds	r0, #1
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	d1e6      	bne.n	8009dd6 <__lo0bits+0x26>
 8009e08:	2020      	movs	r0, #32
 8009e0a:	e7e2      	b.n	8009dd2 <__lo0bits+0x22>

08009e0c <__i2b>:
 8009e0c:	b510      	push	{r4, lr}
 8009e0e:	000c      	movs	r4, r1
 8009e10:	2101      	movs	r1, #1
 8009e12:	f7ff ff07 	bl	8009c24 <_Balloc>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d106      	bne.n	8009e28 <__i2b+0x1c>
 8009e1a:	21a0      	movs	r1, #160	; 0xa0
 8009e1c:	0002      	movs	r2, r0
 8009e1e:	4b04      	ldr	r3, [pc, #16]	; (8009e30 <__i2b+0x24>)
 8009e20:	4804      	ldr	r0, [pc, #16]	; (8009e34 <__i2b+0x28>)
 8009e22:	0049      	lsls	r1, r1, #1
 8009e24:	f7ff fd72 	bl	800990c <__assert_func>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	6144      	str	r4, [r0, #20]
 8009e2c:	6103      	str	r3, [r0, #16]
 8009e2e:	bd10      	pop	{r4, pc}
 8009e30:	0800f04b 	.word	0x0800f04b
 8009e34:	0800efeb 	.word	0x0800efeb

08009e38 <__multiply>:
 8009e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3a:	690b      	ldr	r3, [r1, #16]
 8009e3c:	0014      	movs	r4, r2
 8009e3e:	6912      	ldr	r2, [r2, #16]
 8009e40:	000d      	movs	r5, r1
 8009e42:	b089      	sub	sp, #36	; 0x24
 8009e44:	4293      	cmp	r3, r2
 8009e46:	da01      	bge.n	8009e4c <__multiply+0x14>
 8009e48:	0025      	movs	r5, r4
 8009e4a:	000c      	movs	r4, r1
 8009e4c:	692f      	ldr	r7, [r5, #16]
 8009e4e:	6926      	ldr	r6, [r4, #16]
 8009e50:	6869      	ldr	r1, [r5, #4]
 8009e52:	19bb      	adds	r3, r7, r6
 8009e54:	9302      	str	r3, [sp, #8]
 8009e56:	68ab      	ldr	r3, [r5, #8]
 8009e58:	19ba      	adds	r2, r7, r6
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	da00      	bge.n	8009e60 <__multiply+0x28>
 8009e5e:	3101      	adds	r1, #1
 8009e60:	f7ff fee0 	bl	8009c24 <_Balloc>
 8009e64:	9001      	str	r0, [sp, #4]
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d106      	bne.n	8009e78 <__multiply+0x40>
 8009e6a:	215e      	movs	r1, #94	; 0x5e
 8009e6c:	0002      	movs	r2, r0
 8009e6e:	4b48      	ldr	r3, [pc, #288]	; (8009f90 <__multiply+0x158>)
 8009e70:	4848      	ldr	r0, [pc, #288]	; (8009f94 <__multiply+0x15c>)
 8009e72:	31ff      	adds	r1, #255	; 0xff
 8009e74:	f7ff fd4a 	bl	800990c <__assert_func>
 8009e78:	9b01      	ldr	r3, [sp, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	3314      	adds	r3, #20
 8009e7e:	469c      	mov	ip, r3
 8009e80:	19bb      	adds	r3, r7, r6
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4463      	add	r3, ip
 8009e86:	9303      	str	r3, [sp, #12]
 8009e88:	4663      	mov	r3, ip
 8009e8a:	9903      	ldr	r1, [sp, #12]
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	d32c      	bcc.n	8009eea <__multiply+0xb2>
 8009e90:	002b      	movs	r3, r5
 8009e92:	0022      	movs	r2, r4
 8009e94:	3314      	adds	r3, #20
 8009e96:	00bf      	lsls	r7, r7, #2
 8009e98:	3214      	adds	r2, #20
 8009e9a:	9306      	str	r3, [sp, #24]
 8009e9c:	00b6      	lsls	r6, r6, #2
 8009e9e:	19db      	adds	r3, r3, r7
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	1993      	adds	r3, r2, r6
 8009ea4:	9307      	str	r3, [sp, #28]
 8009ea6:	2304      	movs	r3, #4
 8009ea8:	9305      	str	r3, [sp, #20]
 8009eaa:	002b      	movs	r3, r5
 8009eac:	9904      	ldr	r1, [sp, #16]
 8009eae:	3315      	adds	r3, #21
 8009eb0:	9200      	str	r2, [sp, #0]
 8009eb2:	4299      	cmp	r1, r3
 8009eb4:	d305      	bcc.n	8009ec2 <__multiply+0x8a>
 8009eb6:	1b4b      	subs	r3, r1, r5
 8009eb8:	3b15      	subs	r3, #21
 8009eba:	089b      	lsrs	r3, r3, #2
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	9305      	str	r3, [sp, #20]
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	9a00      	ldr	r2, [sp, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d311      	bcc.n	8009eee <__multiply+0xb6>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd06      	ble.n	8009ede <__multiply+0xa6>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	3b04      	subs	r3, #4
 8009ed4:	9303      	str	r3, [sp, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d054      	beq.n	8009f88 <__multiply+0x150>
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	9a02      	ldr	r2, [sp, #8]
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	611a      	str	r2, [r3, #16]
 8009ee6:	b009      	add	sp, #36	; 0x24
 8009ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eea:	c304      	stmia	r3!, {r2}
 8009eec:	e7cd      	b.n	8009e8a <__multiply+0x52>
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	b298      	uxth	r0, r3
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d01c      	beq.n	8009f32 <__multiply+0xfa>
 8009ef8:	4667      	mov	r7, ip
 8009efa:	2400      	movs	r4, #0
 8009efc:	9e06      	ldr	r6, [sp, #24]
 8009efe:	ce02      	ldmia	r6!, {r1}
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	b28b      	uxth	r3, r1
 8009f04:	4343      	muls	r3, r0
 8009f06:	0c09      	lsrs	r1, r1, #16
 8009f08:	4341      	muls	r1, r0
 8009f0a:	b292      	uxth	r2, r2
 8009f0c:	189b      	adds	r3, r3, r2
 8009f0e:	191b      	adds	r3, r3, r4
 8009f10:	000c      	movs	r4, r1
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	0c11      	lsrs	r1, r2, #16
 8009f16:	1861      	adds	r1, r4, r1
 8009f18:	0c1c      	lsrs	r4, r3, #16
 8009f1a:	1909      	adds	r1, r1, r4
 8009f1c:	0c0c      	lsrs	r4, r1, #16
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	0409      	lsls	r1, r1, #16
 8009f22:	430b      	orrs	r3, r1
 8009f24:	c708      	stmia	r7!, {r3}
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	42b3      	cmp	r3, r6
 8009f2a:	d8e8      	bhi.n	8009efe <__multiply+0xc6>
 8009f2c:	4663      	mov	r3, ip
 8009f2e:	9a05      	ldr	r2, [sp, #20]
 8009f30:	509c      	str	r4, [r3, r2]
 8009f32:	9b00      	ldr	r3, [sp, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	0c1e      	lsrs	r6, r3, #16
 8009f38:	d020      	beq.n	8009f7c <__multiply+0x144>
 8009f3a:	4663      	mov	r3, ip
 8009f3c:	002c      	movs	r4, r5
 8009f3e:	4660      	mov	r0, ip
 8009f40:	2700      	movs	r7, #0
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3414      	adds	r4, #20
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	b291      	uxth	r1, r2
 8009f4c:	4371      	muls	r1, r6
 8009f4e:	6802      	ldr	r2, [r0, #0]
 8009f50:	0c12      	lsrs	r2, r2, #16
 8009f52:	1889      	adds	r1, r1, r2
 8009f54:	19cf      	adds	r7, r1, r7
 8009f56:	0439      	lsls	r1, r7, #16
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	6003      	str	r3, [r0, #0]
 8009f5c:	cc02      	ldmia	r4!, {r1}
 8009f5e:	6843      	ldr	r3, [r0, #4]
 8009f60:	0c09      	lsrs	r1, r1, #16
 8009f62:	4371      	muls	r1, r6
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	0c3f      	lsrs	r7, r7, #16
 8009f68:	18cb      	adds	r3, r1, r3
 8009f6a:	9a04      	ldr	r2, [sp, #16]
 8009f6c:	19db      	adds	r3, r3, r7
 8009f6e:	0c1f      	lsrs	r7, r3, #16
 8009f70:	3004      	adds	r0, #4
 8009f72:	42a2      	cmp	r2, r4
 8009f74:	d8e7      	bhi.n	8009f46 <__multiply+0x10e>
 8009f76:	4662      	mov	r2, ip
 8009f78:	9905      	ldr	r1, [sp, #20]
 8009f7a:	5053      	str	r3, [r2, r1]
 8009f7c:	9b00      	ldr	r3, [sp, #0]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	2304      	movs	r3, #4
 8009f84:	449c      	add	ip, r3
 8009f86:	e79c      	b.n	8009ec2 <__multiply+0x8a>
 8009f88:	9b02      	ldr	r3, [sp, #8]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	9302      	str	r3, [sp, #8]
 8009f8e:	e79c      	b.n	8009eca <__multiply+0x92>
 8009f90:	0800f04b 	.word	0x0800f04b
 8009f94:	0800efeb 	.word	0x0800efeb

08009f98 <__pow5mult>:
 8009f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	0015      	movs	r5, r2
 8009f9e:	0007      	movs	r7, r0
 8009fa0:	000e      	movs	r6, r1
 8009fa2:	401a      	ands	r2, r3
 8009fa4:	421d      	tst	r5, r3
 8009fa6:	d008      	beq.n	8009fba <__pow5mult+0x22>
 8009fa8:	4925      	ldr	r1, [pc, #148]	; (800a040 <__pow5mult+0xa8>)
 8009faa:	3a01      	subs	r2, #1
 8009fac:	0092      	lsls	r2, r2, #2
 8009fae:	5852      	ldr	r2, [r2, r1]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	0031      	movs	r1, r6
 8009fb4:	f7ff fe9e 	bl	8009cf4 <__multadd>
 8009fb8:	0006      	movs	r6, r0
 8009fba:	10ad      	asrs	r5, r5, #2
 8009fbc:	d03d      	beq.n	800a03a <__pow5mult+0xa2>
 8009fbe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009fc0:	2c00      	cmp	r4, #0
 8009fc2:	d10f      	bne.n	8009fe4 <__pow5mult+0x4c>
 8009fc4:	2010      	movs	r0, #16
 8009fc6:	f7ff fbb5 	bl	8009734 <malloc>
 8009fca:	1e02      	subs	r2, r0, #0
 8009fcc:	6278      	str	r0, [r7, #36]	; 0x24
 8009fce:	d105      	bne.n	8009fdc <__pow5mult+0x44>
 8009fd0:	21d7      	movs	r1, #215	; 0xd7
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <__pow5mult+0xac>)
 8009fd4:	481c      	ldr	r0, [pc, #112]	; (800a048 <__pow5mult+0xb0>)
 8009fd6:	0049      	lsls	r1, r1, #1
 8009fd8:	f7ff fc98 	bl	800990c <__assert_func>
 8009fdc:	6044      	str	r4, [r0, #4]
 8009fde:	6084      	str	r4, [r0, #8]
 8009fe0:	6004      	str	r4, [r0, #0]
 8009fe2:	60c4      	str	r4, [r0, #12]
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	689c      	ldr	r4, [r3, #8]
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	2c00      	cmp	r4, #0
 8009fec:	d108      	bne.n	800a000 <__pow5mult+0x68>
 8009fee:	0038      	movs	r0, r7
 8009ff0:	4916      	ldr	r1, [pc, #88]	; (800a04c <__pow5mult+0xb4>)
 8009ff2:	f7ff ff0b 	bl	8009e0c <__i2b>
 8009ff6:	9b01      	ldr	r3, [sp, #4]
 8009ff8:	0004      	movs	r4, r0
 8009ffa:	6098      	str	r0, [r3, #8]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	6003      	str	r3, [r0, #0]
 800a000:	2301      	movs	r3, #1
 800a002:	421d      	tst	r5, r3
 800a004:	d00a      	beq.n	800a01c <__pow5mult+0x84>
 800a006:	0031      	movs	r1, r6
 800a008:	0022      	movs	r2, r4
 800a00a:	0038      	movs	r0, r7
 800a00c:	f7ff ff14 	bl	8009e38 <__multiply>
 800a010:	0031      	movs	r1, r6
 800a012:	9001      	str	r0, [sp, #4]
 800a014:	0038      	movs	r0, r7
 800a016:	f7ff fe49 	bl	8009cac <_Bfree>
 800a01a:	9e01      	ldr	r6, [sp, #4]
 800a01c:	106d      	asrs	r5, r5, #1
 800a01e:	d00c      	beq.n	800a03a <__pow5mult+0xa2>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	2800      	cmp	r0, #0
 800a024:	d107      	bne.n	800a036 <__pow5mult+0x9e>
 800a026:	0022      	movs	r2, r4
 800a028:	0021      	movs	r1, r4
 800a02a:	0038      	movs	r0, r7
 800a02c:	f7ff ff04 	bl	8009e38 <__multiply>
 800a030:	2300      	movs	r3, #0
 800a032:	6020      	str	r0, [r4, #0]
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	0004      	movs	r4, r0
 800a038:	e7e2      	b.n	800a000 <__pow5mult+0x68>
 800a03a:	0030      	movs	r0, r6
 800a03c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a03e:	46c0      	nop			; (mov r8, r8)
 800a040:	0800f150 	.word	0x0800f150
 800a044:	0800efd4 	.word	0x0800efd4
 800a048:	0800efeb 	.word	0x0800efeb
 800a04c:	00000271 	.word	0x00000271

0800a050 <__lshift>:
 800a050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a052:	000c      	movs	r4, r1
 800a054:	0017      	movs	r7, r2
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	1155      	asrs	r5, r2, #5
 800a05a:	b087      	sub	sp, #28
 800a05c:	18eb      	adds	r3, r5, r3
 800a05e:	9302      	str	r3, [sp, #8]
 800a060:	3301      	adds	r3, #1
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	6849      	ldr	r1, [r1, #4]
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	9004      	str	r0, [sp, #16]
 800a06a:	9a01      	ldr	r2, [sp, #4]
 800a06c:	4293      	cmp	r3, r2
 800a06e:	db11      	blt.n	800a094 <__lshift+0x44>
 800a070:	9804      	ldr	r0, [sp, #16]
 800a072:	f7ff fdd7 	bl	8009c24 <_Balloc>
 800a076:	0002      	movs	r2, r0
 800a078:	2300      	movs	r3, #0
 800a07a:	3214      	adds	r2, #20
 800a07c:	0006      	movs	r6, r0
 800a07e:	0011      	movs	r1, r2
 800a080:	9203      	str	r2, [sp, #12]
 800a082:	4298      	cmp	r0, r3
 800a084:	d10d      	bne.n	800a0a2 <__lshift+0x52>
 800a086:	21da      	movs	r1, #218	; 0xda
 800a088:	0002      	movs	r2, r0
 800a08a:	4b27      	ldr	r3, [pc, #156]	; (800a128 <__lshift+0xd8>)
 800a08c:	4827      	ldr	r0, [pc, #156]	; (800a12c <__lshift+0xdc>)
 800a08e:	31ff      	adds	r1, #255	; 0xff
 800a090:	f7ff fc3c 	bl	800990c <__assert_func>
 800a094:	3101      	adds	r1, #1
 800a096:	005b      	lsls	r3, r3, #1
 800a098:	e7e7      	b.n	800a06a <__lshift+0x1a>
 800a09a:	2200      	movs	r2, #0
 800a09c:	0098      	lsls	r0, r3, #2
 800a09e:	500a      	str	r2, [r1, r0]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	42ab      	cmp	r3, r5
 800a0a4:	dbf9      	blt.n	800a09a <__lshift+0x4a>
 800a0a6:	43eb      	mvns	r3, r5
 800a0a8:	17db      	asrs	r3, r3, #31
 800a0aa:	401d      	ands	r5, r3
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	00ad      	lsls	r5, r5, #2
 800a0b0:	211f      	movs	r1, #31
 800a0b2:	0038      	movs	r0, r7
 800a0b4:	195d      	adds	r5, r3, r5
 800a0b6:	0023      	movs	r3, r4
 800a0b8:	6922      	ldr	r2, [r4, #16]
 800a0ba:	3314      	adds	r3, #20
 800a0bc:	0092      	lsls	r2, r2, #2
 800a0be:	4008      	ands	r0, r1
 800a0c0:	4684      	mov	ip, r0
 800a0c2:	189a      	adds	r2, r3, r2
 800a0c4:	420f      	tst	r7, r1
 800a0c6:	d02a      	beq.n	800a11e <__lshift+0xce>
 800a0c8:	3101      	adds	r1, #1
 800a0ca:	1a09      	subs	r1, r1, r0
 800a0cc:	9105      	str	r1, [sp, #20]
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	9503      	str	r5, [sp, #12]
 800a0d2:	4667      	mov	r7, ip
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	40b8      	lsls	r0, r7
 800a0d8:	4301      	orrs	r1, r0
 800a0da:	9803      	ldr	r0, [sp, #12]
 800a0dc:	c002      	stmia	r0!, {r1}
 800a0de:	cb02      	ldmia	r3!, {r1}
 800a0e0:	9003      	str	r0, [sp, #12]
 800a0e2:	9805      	ldr	r0, [sp, #20]
 800a0e4:	40c1      	lsrs	r1, r0
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d8f3      	bhi.n	800a0d2 <__lshift+0x82>
 800a0ea:	0020      	movs	r0, r4
 800a0ec:	3015      	adds	r0, #21
 800a0ee:	2304      	movs	r3, #4
 800a0f0:	4282      	cmp	r2, r0
 800a0f2:	d304      	bcc.n	800a0fe <__lshift+0xae>
 800a0f4:	1b13      	subs	r3, r2, r4
 800a0f6:	3b15      	subs	r3, #21
 800a0f8:	089b      	lsrs	r3, r3, #2
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	50e9      	str	r1, [r5, r3]
 800a100:	2900      	cmp	r1, #0
 800a102:	d002      	beq.n	800a10a <__lshift+0xba>
 800a104:	9b02      	ldr	r3, [sp, #8]
 800a106:	3302      	adds	r3, #2
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	9b01      	ldr	r3, [sp, #4]
 800a10c:	9804      	ldr	r0, [sp, #16]
 800a10e:	3b01      	subs	r3, #1
 800a110:	0021      	movs	r1, r4
 800a112:	6133      	str	r3, [r6, #16]
 800a114:	f7ff fdca 	bl	8009cac <_Bfree>
 800a118:	0030      	movs	r0, r6
 800a11a:	b007      	add	sp, #28
 800a11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a11e:	cb02      	ldmia	r3!, {r1}
 800a120:	c502      	stmia	r5!, {r1}
 800a122:	429a      	cmp	r2, r3
 800a124:	d8fb      	bhi.n	800a11e <__lshift+0xce>
 800a126:	e7f0      	b.n	800a10a <__lshift+0xba>
 800a128:	0800f04b 	.word	0x0800f04b
 800a12c:	0800efeb 	.word	0x0800efeb

0800a130 <__mcmp>:
 800a130:	6902      	ldr	r2, [r0, #16]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	b530      	push	{r4, r5, lr}
 800a136:	0004      	movs	r4, r0
 800a138:	1ad0      	subs	r0, r2, r3
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d10d      	bne.n	800a15a <__mcmp+0x2a>
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	3414      	adds	r4, #20
 800a142:	3114      	adds	r1, #20
 800a144:	18e2      	adds	r2, r4, r3
 800a146:	18c9      	adds	r1, r1, r3
 800a148:	3a04      	subs	r2, #4
 800a14a:	3904      	subs	r1, #4
 800a14c:	6815      	ldr	r5, [r2, #0]
 800a14e:	680b      	ldr	r3, [r1, #0]
 800a150:	429d      	cmp	r5, r3
 800a152:	d003      	beq.n	800a15c <__mcmp+0x2c>
 800a154:	2001      	movs	r0, #1
 800a156:	429d      	cmp	r5, r3
 800a158:	d303      	bcc.n	800a162 <__mcmp+0x32>
 800a15a:	bd30      	pop	{r4, r5, pc}
 800a15c:	4294      	cmp	r4, r2
 800a15e:	d3f3      	bcc.n	800a148 <__mcmp+0x18>
 800a160:	e7fb      	b.n	800a15a <__mcmp+0x2a>
 800a162:	4240      	negs	r0, r0
 800a164:	e7f9      	b.n	800a15a <__mcmp+0x2a>
	...

0800a168 <__mdiff>:
 800a168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a16a:	000e      	movs	r6, r1
 800a16c:	0007      	movs	r7, r0
 800a16e:	0011      	movs	r1, r2
 800a170:	0030      	movs	r0, r6
 800a172:	b087      	sub	sp, #28
 800a174:	0014      	movs	r4, r2
 800a176:	f7ff ffdb 	bl	800a130 <__mcmp>
 800a17a:	1e05      	subs	r5, r0, #0
 800a17c:	d110      	bne.n	800a1a0 <__mdiff+0x38>
 800a17e:	0001      	movs	r1, r0
 800a180:	0038      	movs	r0, r7
 800a182:	f7ff fd4f 	bl	8009c24 <_Balloc>
 800a186:	1e02      	subs	r2, r0, #0
 800a188:	d104      	bne.n	800a194 <__mdiff+0x2c>
 800a18a:	4b40      	ldr	r3, [pc, #256]	; (800a28c <__mdiff+0x124>)
 800a18c:	4940      	ldr	r1, [pc, #256]	; (800a290 <__mdiff+0x128>)
 800a18e:	4841      	ldr	r0, [pc, #260]	; (800a294 <__mdiff+0x12c>)
 800a190:	f7ff fbbc 	bl	800990c <__assert_func>
 800a194:	2301      	movs	r3, #1
 800a196:	6145      	str	r5, [r0, #20]
 800a198:	6103      	str	r3, [r0, #16]
 800a19a:	0010      	movs	r0, r2
 800a19c:	b007      	add	sp, #28
 800a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	db04      	blt.n	800a1b2 <__mdiff+0x4a>
 800a1a8:	0023      	movs	r3, r4
 800a1aa:	0034      	movs	r4, r6
 800a1ac:	001e      	movs	r6, r3
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	0038      	movs	r0, r7
 800a1b4:	6861      	ldr	r1, [r4, #4]
 800a1b6:	f7ff fd35 	bl	8009c24 <_Balloc>
 800a1ba:	1e02      	subs	r2, r0, #0
 800a1bc:	d103      	bne.n	800a1c6 <__mdiff+0x5e>
 800a1be:	2190      	movs	r1, #144	; 0x90
 800a1c0:	4b32      	ldr	r3, [pc, #200]	; (800a28c <__mdiff+0x124>)
 800a1c2:	0089      	lsls	r1, r1, #2
 800a1c4:	e7e3      	b.n	800a18e <__mdiff+0x26>
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	2700      	movs	r7, #0
 800a1ca:	60c3      	str	r3, [r0, #12]
 800a1cc:	6920      	ldr	r0, [r4, #16]
 800a1ce:	3414      	adds	r4, #20
 800a1d0:	9401      	str	r4, [sp, #4]
 800a1d2:	9b01      	ldr	r3, [sp, #4]
 800a1d4:	0084      	lsls	r4, r0, #2
 800a1d6:	191b      	adds	r3, r3, r4
 800a1d8:	0034      	movs	r4, r6
 800a1da:	9302      	str	r3, [sp, #8]
 800a1dc:	6933      	ldr	r3, [r6, #16]
 800a1de:	3414      	adds	r4, #20
 800a1e0:	0099      	lsls	r1, r3, #2
 800a1e2:	1863      	adds	r3, r4, r1
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	0013      	movs	r3, r2
 800a1e8:	3314      	adds	r3, #20
 800a1ea:	469c      	mov	ip, r3
 800a1ec:	9305      	str	r3, [sp, #20]
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	9b04      	ldr	r3, [sp, #16]
 800a1f4:	cc02      	ldmia	r4!, {r1}
 800a1f6:	cb20      	ldmia	r3!, {r5}
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	b2ab      	uxth	r3, r5
 800a1fc:	19df      	adds	r7, r3, r7
 800a1fe:	b28b      	uxth	r3, r1
 800a200:	1afb      	subs	r3, r7, r3
 800a202:	0c2d      	lsrs	r5, r5, #16
 800a204:	0c09      	lsrs	r1, r1, #16
 800a206:	1a69      	subs	r1, r5, r1
 800a208:	141d      	asrs	r5, r3, #16
 800a20a:	1949      	adds	r1, r1, r5
 800a20c:	140f      	asrs	r7, r1, #16
 800a20e:	b29b      	uxth	r3, r3
 800a210:	0409      	lsls	r1, r1, #16
 800a212:	430b      	orrs	r3, r1
 800a214:	4661      	mov	r1, ip
 800a216:	c108      	stmia	r1!, {r3}
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	468c      	mov	ip, r1
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d8e8      	bhi.n	800a1f2 <__mdiff+0x8a>
 800a220:	0031      	movs	r1, r6
 800a222:	9c03      	ldr	r4, [sp, #12]
 800a224:	3115      	adds	r1, #21
 800a226:	2304      	movs	r3, #4
 800a228:	428c      	cmp	r4, r1
 800a22a:	d304      	bcc.n	800a236 <__mdiff+0xce>
 800a22c:	1ba3      	subs	r3, r4, r6
 800a22e:	3b15      	subs	r3, #21
 800a230:	089b      	lsrs	r3, r3, #2
 800a232:	3301      	adds	r3, #1
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	9901      	ldr	r1, [sp, #4]
 800a238:	18cc      	adds	r4, r1, r3
 800a23a:	9905      	ldr	r1, [sp, #20]
 800a23c:	0026      	movs	r6, r4
 800a23e:	18cb      	adds	r3, r1, r3
 800a240:	469c      	mov	ip, r3
 800a242:	9902      	ldr	r1, [sp, #8]
 800a244:	428e      	cmp	r6, r1
 800a246:	d310      	bcc.n	800a26a <__mdiff+0x102>
 800a248:	9e02      	ldr	r6, [sp, #8]
 800a24a:	1ee5      	subs	r5, r4, #3
 800a24c:	2100      	movs	r1, #0
 800a24e:	42ae      	cmp	r6, r5
 800a250:	d304      	bcc.n	800a25c <__mdiff+0xf4>
 800a252:	0031      	movs	r1, r6
 800a254:	3103      	adds	r1, #3
 800a256:	1b09      	subs	r1, r1, r4
 800a258:	0889      	lsrs	r1, r1, #2
 800a25a:	0089      	lsls	r1, r1, #2
 800a25c:	185b      	adds	r3, r3, r1
 800a25e:	3b04      	subs	r3, #4
 800a260:	6819      	ldr	r1, [r3, #0]
 800a262:	2900      	cmp	r1, #0
 800a264:	d00f      	beq.n	800a286 <__mdiff+0x11e>
 800a266:	6110      	str	r0, [r2, #16]
 800a268:	e797      	b.n	800a19a <__mdiff+0x32>
 800a26a:	ce02      	ldmia	r6!, {r1}
 800a26c:	b28d      	uxth	r5, r1
 800a26e:	19ed      	adds	r5, r5, r7
 800a270:	0c0f      	lsrs	r7, r1, #16
 800a272:	1429      	asrs	r1, r5, #16
 800a274:	1879      	adds	r1, r7, r1
 800a276:	140f      	asrs	r7, r1, #16
 800a278:	b2ad      	uxth	r5, r5
 800a27a:	0409      	lsls	r1, r1, #16
 800a27c:	430d      	orrs	r5, r1
 800a27e:	4661      	mov	r1, ip
 800a280:	c120      	stmia	r1!, {r5}
 800a282:	468c      	mov	ip, r1
 800a284:	e7dd      	b.n	800a242 <__mdiff+0xda>
 800a286:	3801      	subs	r0, #1
 800a288:	e7e9      	b.n	800a25e <__mdiff+0xf6>
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	0800f04b 	.word	0x0800f04b
 800a290:	00000232 	.word	0x00000232
 800a294:	0800efeb 	.word	0x0800efeb

0800a298 <__d2b>:
 800a298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29a:	2101      	movs	r1, #1
 800a29c:	0014      	movs	r4, r2
 800a29e:	001e      	movs	r6, r3
 800a2a0:	9f08      	ldr	r7, [sp, #32]
 800a2a2:	f7ff fcbf 	bl	8009c24 <_Balloc>
 800a2a6:	1e05      	subs	r5, r0, #0
 800a2a8:	d105      	bne.n	800a2b6 <__d2b+0x1e>
 800a2aa:	0002      	movs	r2, r0
 800a2ac:	4b26      	ldr	r3, [pc, #152]	; (800a348 <__d2b+0xb0>)
 800a2ae:	4927      	ldr	r1, [pc, #156]	; (800a34c <__d2b+0xb4>)
 800a2b0:	4827      	ldr	r0, [pc, #156]	; (800a350 <__d2b+0xb8>)
 800a2b2:	f7ff fb2b 	bl	800990c <__assert_func>
 800a2b6:	0333      	lsls	r3, r6, #12
 800a2b8:	0076      	lsls	r6, r6, #1
 800a2ba:	0b1b      	lsrs	r3, r3, #12
 800a2bc:	0d76      	lsrs	r6, r6, #21
 800a2be:	d124      	bne.n	800a30a <__d2b+0x72>
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	2c00      	cmp	r4, #0
 800a2c4:	d027      	beq.n	800a316 <__d2b+0x7e>
 800a2c6:	4668      	mov	r0, sp
 800a2c8:	9400      	str	r4, [sp, #0]
 800a2ca:	f7ff fd71 	bl	8009db0 <__lo0bits>
 800a2ce:	9c00      	ldr	r4, [sp, #0]
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d01e      	beq.n	800a312 <__d2b+0x7a>
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	2120      	movs	r1, #32
 800a2d8:	001a      	movs	r2, r3
 800a2da:	1a09      	subs	r1, r1, r0
 800a2dc:	408a      	lsls	r2, r1
 800a2de:	40c3      	lsrs	r3, r0
 800a2e0:	4322      	orrs	r2, r4
 800a2e2:	616a      	str	r2, [r5, #20]
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	9c01      	ldr	r4, [sp, #4]
 800a2e8:	61ac      	str	r4, [r5, #24]
 800a2ea:	1e63      	subs	r3, r4, #1
 800a2ec:	419c      	sbcs	r4, r3
 800a2ee:	3401      	adds	r4, #1
 800a2f0:	612c      	str	r4, [r5, #16]
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	d018      	beq.n	800a328 <__d2b+0x90>
 800a2f6:	4b17      	ldr	r3, [pc, #92]	; (800a354 <__d2b+0xbc>)
 800a2f8:	18f6      	adds	r6, r6, r3
 800a2fa:	2335      	movs	r3, #53	; 0x35
 800a2fc:	1836      	adds	r6, r6, r0
 800a2fe:	1a18      	subs	r0, r3, r0
 800a300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a302:	603e      	str	r6, [r7, #0]
 800a304:	6018      	str	r0, [r3, #0]
 800a306:	0028      	movs	r0, r5
 800a308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a30a:	2280      	movs	r2, #128	; 0x80
 800a30c:	0352      	lsls	r2, r2, #13
 800a30e:	4313      	orrs	r3, r2
 800a310:	e7d6      	b.n	800a2c0 <__d2b+0x28>
 800a312:	616c      	str	r4, [r5, #20]
 800a314:	e7e7      	b.n	800a2e6 <__d2b+0x4e>
 800a316:	a801      	add	r0, sp, #4
 800a318:	f7ff fd4a 	bl	8009db0 <__lo0bits>
 800a31c:	2401      	movs	r4, #1
 800a31e:	9b01      	ldr	r3, [sp, #4]
 800a320:	612c      	str	r4, [r5, #16]
 800a322:	616b      	str	r3, [r5, #20]
 800a324:	3020      	adds	r0, #32
 800a326:	e7e4      	b.n	800a2f2 <__d2b+0x5a>
 800a328:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <__d2b+0xc0>)
 800a32a:	18c0      	adds	r0, r0, r3
 800a32c:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <__d2b+0xc4>)
 800a32e:	6038      	str	r0, [r7, #0]
 800a330:	18e3      	adds	r3, r4, r3
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	18eb      	adds	r3, r5, r3
 800a336:	6958      	ldr	r0, [r3, #20]
 800a338:	f7ff fd20 	bl	8009d7c <__hi0bits>
 800a33c:	0164      	lsls	r4, r4, #5
 800a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a340:	1a24      	subs	r4, r4, r0
 800a342:	601c      	str	r4, [r3, #0]
 800a344:	e7df      	b.n	800a306 <__d2b+0x6e>
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	0800f04b 	.word	0x0800f04b
 800a34c:	0000030a 	.word	0x0000030a
 800a350:	0800efeb 	.word	0x0800efeb
 800a354:	fffffbcd 	.word	0xfffffbcd
 800a358:	fffffbce 	.word	0xfffffbce
 800a35c:	3fffffff 	.word	0x3fffffff

0800a360 <_mprec_log10>:
 800a360:	b510      	push	{r4, lr}
 800a362:	0004      	movs	r4, r0
 800a364:	2817      	cmp	r0, #23
 800a366:	dc05      	bgt.n	800a374 <_mprec_log10+0x14>
 800a368:	4b07      	ldr	r3, [pc, #28]	; (800a388 <_mprec_log10+0x28>)
 800a36a:	00c4      	lsls	r4, r0, #3
 800a36c:	191c      	adds	r4, r3, r4
 800a36e:	6820      	ldr	r0, [r4, #0]
 800a370:	6861      	ldr	r1, [r4, #4]
 800a372:	bd10      	pop	{r4, pc}
 800a374:	2000      	movs	r0, #0
 800a376:	4905      	ldr	r1, [pc, #20]	; (800a38c <_mprec_log10+0x2c>)
 800a378:	2200      	movs	r2, #0
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <_mprec_log10+0x30>)
 800a37c:	3c01      	subs	r4, #1
 800a37e:	f7f7 fde3 	bl	8001f48 <__aeabi_dmul>
 800a382:	2c00      	cmp	r4, #0
 800a384:	d1f8      	bne.n	800a378 <_mprec_log10+0x18>
 800a386:	e7f4      	b.n	800a372 <_mprec_log10+0x12>
 800a388:	0800f088 	.word	0x0800f088
 800a38c:	3ff00000 	.word	0x3ff00000
 800a390:	40240000 	.word	0x40240000

0800a394 <_calloc_r>:
 800a394:	434a      	muls	r2, r1
 800a396:	b570      	push	{r4, r5, r6, lr}
 800a398:	0011      	movs	r1, r2
 800a39a:	0015      	movs	r5, r2
 800a39c:	f7ff fa26 	bl	80097ec <_malloc_r>
 800a3a0:	1e04      	subs	r4, r0, #0
 800a3a2:	d003      	beq.n	800a3ac <_calloc_r+0x18>
 800a3a4:	002a      	movs	r2, r5
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	f7ff f9ce 	bl	8009748 <memset>
 800a3ac:	0020      	movs	r0, r4
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}

0800a3b0 <_realloc_r>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	0007      	movs	r7, r0
 800a3b4:	000d      	movs	r5, r1
 800a3b6:	0016      	movs	r6, r2
 800a3b8:	2900      	cmp	r1, #0
 800a3ba:	d105      	bne.n	800a3c8 <_realloc_r+0x18>
 800a3bc:	0011      	movs	r1, r2
 800a3be:	f7ff fa15 	bl	80097ec <_malloc_r>
 800a3c2:	0004      	movs	r4, r0
 800a3c4:	0020      	movs	r0, r4
 800a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	d103      	bne.n	800a3d4 <_realloc_r+0x24>
 800a3cc:	f7ff f9c4 	bl	8009758 <_free_r>
 800a3d0:	0034      	movs	r4, r6
 800a3d2:	e7f7      	b.n	800a3c4 <_realloc_r+0x14>
 800a3d4:	f001 fe43 	bl	800c05e <_malloc_usable_size_r>
 800a3d8:	002c      	movs	r4, r5
 800a3da:	42b0      	cmp	r0, r6
 800a3dc:	d2f2      	bcs.n	800a3c4 <_realloc_r+0x14>
 800a3de:	0031      	movs	r1, r6
 800a3e0:	0038      	movs	r0, r7
 800a3e2:	f7ff fa03 	bl	80097ec <_malloc_r>
 800a3e6:	1e04      	subs	r4, r0, #0
 800a3e8:	d0ec      	beq.n	800a3c4 <_realloc_r+0x14>
 800a3ea:	0029      	movs	r1, r5
 800a3ec:	0032      	movs	r2, r6
 800a3ee:	f001 fe1a 	bl	800c026 <memcpy>
 800a3f2:	0029      	movs	r1, r5
 800a3f4:	0038      	movs	r0, r7
 800a3f6:	f7ff f9af 	bl	8009758 <_free_r>
 800a3fa:	e7e3      	b.n	800a3c4 <_realloc_r+0x14>

0800a3fc <__ssputs_r>:
 800a3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fe:	688e      	ldr	r6, [r1, #8]
 800a400:	b085      	sub	sp, #20
 800a402:	0007      	movs	r7, r0
 800a404:	000c      	movs	r4, r1
 800a406:	9203      	str	r2, [sp, #12]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	429e      	cmp	r6, r3
 800a40c:	d83c      	bhi.n	800a488 <__ssputs_r+0x8c>
 800a40e:	2390      	movs	r3, #144	; 0x90
 800a410:	898a      	ldrh	r2, [r1, #12]
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	421a      	tst	r2, r3
 800a416:	d034      	beq.n	800a482 <__ssputs_r+0x86>
 800a418:	2503      	movs	r5, #3
 800a41a:	6909      	ldr	r1, [r1, #16]
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	1a5b      	subs	r3, r3, r1
 800a420:	9302      	str	r3, [sp, #8]
 800a422:	6963      	ldr	r3, [r4, #20]
 800a424:	9802      	ldr	r0, [sp, #8]
 800a426:	435d      	muls	r5, r3
 800a428:	0feb      	lsrs	r3, r5, #31
 800a42a:	195d      	adds	r5, r3, r5
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	106d      	asrs	r5, r5, #1
 800a430:	3301      	adds	r3, #1
 800a432:	181b      	adds	r3, r3, r0
 800a434:	42ab      	cmp	r3, r5
 800a436:	d900      	bls.n	800a43a <__ssputs_r+0x3e>
 800a438:	001d      	movs	r5, r3
 800a43a:	0553      	lsls	r3, r2, #21
 800a43c:	d532      	bpl.n	800a4a4 <__ssputs_r+0xa8>
 800a43e:	0029      	movs	r1, r5
 800a440:	0038      	movs	r0, r7
 800a442:	f7ff f9d3 	bl	80097ec <_malloc_r>
 800a446:	1e06      	subs	r6, r0, #0
 800a448:	d109      	bne.n	800a45e <__ssputs_r+0x62>
 800a44a:	230c      	movs	r3, #12
 800a44c:	603b      	str	r3, [r7, #0]
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	2001      	movs	r0, #1
 800a452:	89a2      	ldrh	r2, [r4, #12]
 800a454:	4240      	negs	r0, r0
 800a456:	4313      	orrs	r3, r2
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	b005      	add	sp, #20
 800a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a45e:	9a02      	ldr	r2, [sp, #8]
 800a460:	6921      	ldr	r1, [r4, #16]
 800a462:	f001 fde0 	bl	800c026 <memcpy>
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	4a14      	ldr	r2, [pc, #80]	; (800a4bc <__ssputs_r+0xc0>)
 800a46a:	401a      	ands	r2, r3
 800a46c:	2380      	movs	r3, #128	; 0x80
 800a46e:	4313      	orrs	r3, r2
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	9b02      	ldr	r3, [sp, #8]
 800a474:	6126      	str	r6, [r4, #16]
 800a476:	18f6      	adds	r6, r6, r3
 800a478:	6026      	str	r6, [r4, #0]
 800a47a:	6165      	str	r5, [r4, #20]
 800a47c:	9e01      	ldr	r6, [sp, #4]
 800a47e:	1aed      	subs	r5, r5, r3
 800a480:	60a5      	str	r5, [r4, #8]
 800a482:	9b01      	ldr	r3, [sp, #4]
 800a484:	429e      	cmp	r6, r3
 800a486:	d900      	bls.n	800a48a <__ssputs_r+0x8e>
 800a488:	9e01      	ldr	r6, [sp, #4]
 800a48a:	0032      	movs	r2, r6
 800a48c:	9903      	ldr	r1, [sp, #12]
 800a48e:	6820      	ldr	r0, [r4, #0]
 800a490:	f001 fdd2 	bl	800c038 <memmove>
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	2000      	movs	r0, #0
 800a498:	1b9b      	subs	r3, r3, r6
 800a49a:	60a3      	str	r3, [r4, #8]
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	199e      	adds	r6, r3, r6
 800a4a0:	6026      	str	r6, [r4, #0]
 800a4a2:	e7da      	b.n	800a45a <__ssputs_r+0x5e>
 800a4a4:	002a      	movs	r2, r5
 800a4a6:	0038      	movs	r0, r7
 800a4a8:	f7ff ff82 	bl	800a3b0 <_realloc_r>
 800a4ac:	1e06      	subs	r6, r0, #0
 800a4ae:	d1e0      	bne.n	800a472 <__ssputs_r+0x76>
 800a4b0:	0038      	movs	r0, r7
 800a4b2:	6921      	ldr	r1, [r4, #16]
 800a4b4:	f7ff f950 	bl	8009758 <_free_r>
 800a4b8:	e7c7      	b.n	800a44a <__ssputs_r+0x4e>
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	fffffb7f 	.word	0xfffffb7f

0800a4c0 <_svfiprintf_r>:
 800a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c2:	b0a1      	sub	sp, #132	; 0x84
 800a4c4:	9003      	str	r0, [sp, #12]
 800a4c6:	001d      	movs	r5, r3
 800a4c8:	898b      	ldrh	r3, [r1, #12]
 800a4ca:	000f      	movs	r7, r1
 800a4cc:	0016      	movs	r6, r2
 800a4ce:	061b      	lsls	r3, r3, #24
 800a4d0:	d511      	bpl.n	800a4f6 <_svfiprintf_r+0x36>
 800a4d2:	690b      	ldr	r3, [r1, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10e      	bne.n	800a4f6 <_svfiprintf_r+0x36>
 800a4d8:	2140      	movs	r1, #64	; 0x40
 800a4da:	f7ff f987 	bl	80097ec <_malloc_r>
 800a4de:	6038      	str	r0, [r7, #0]
 800a4e0:	6138      	str	r0, [r7, #16]
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d105      	bne.n	800a4f2 <_svfiprintf_r+0x32>
 800a4e6:	230c      	movs	r3, #12
 800a4e8:	9a03      	ldr	r2, [sp, #12]
 800a4ea:	3801      	subs	r0, #1
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	b021      	add	sp, #132	; 0x84
 800a4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f2:	2340      	movs	r3, #64	; 0x40
 800a4f4:	617b      	str	r3, [r7, #20]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	ac08      	add	r4, sp, #32
 800a4fa:	6163      	str	r3, [r4, #20]
 800a4fc:	3320      	adds	r3, #32
 800a4fe:	7663      	strb	r3, [r4, #25]
 800a500:	3310      	adds	r3, #16
 800a502:	76a3      	strb	r3, [r4, #26]
 800a504:	9507      	str	r5, [sp, #28]
 800a506:	0035      	movs	r5, r6
 800a508:	782b      	ldrb	r3, [r5, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <_svfiprintf_r+0x52>
 800a50e:	2b25      	cmp	r3, #37	; 0x25
 800a510:	d147      	bne.n	800a5a2 <_svfiprintf_r+0xe2>
 800a512:	1bab      	subs	r3, r5, r6
 800a514:	9305      	str	r3, [sp, #20]
 800a516:	42b5      	cmp	r5, r6
 800a518:	d00c      	beq.n	800a534 <_svfiprintf_r+0x74>
 800a51a:	0032      	movs	r2, r6
 800a51c:	0039      	movs	r1, r7
 800a51e:	9803      	ldr	r0, [sp, #12]
 800a520:	f7ff ff6c 	bl	800a3fc <__ssputs_r>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d100      	bne.n	800a52a <_svfiprintf_r+0x6a>
 800a528:	e0ae      	b.n	800a688 <_svfiprintf_r+0x1c8>
 800a52a:	6962      	ldr	r2, [r4, #20]
 800a52c:	9b05      	ldr	r3, [sp, #20]
 800a52e:	4694      	mov	ip, r2
 800a530:	4463      	add	r3, ip
 800a532:	6163      	str	r3, [r4, #20]
 800a534:	782b      	ldrb	r3, [r5, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d100      	bne.n	800a53c <_svfiprintf_r+0x7c>
 800a53a:	e0a5      	b.n	800a688 <_svfiprintf_r+0x1c8>
 800a53c:	2201      	movs	r2, #1
 800a53e:	2300      	movs	r3, #0
 800a540:	4252      	negs	r2, r2
 800a542:	6062      	str	r2, [r4, #4]
 800a544:	a904      	add	r1, sp, #16
 800a546:	3254      	adds	r2, #84	; 0x54
 800a548:	1852      	adds	r2, r2, r1
 800a54a:	1c6e      	adds	r6, r5, #1
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	60e3      	str	r3, [r4, #12]
 800a550:	60a3      	str	r3, [r4, #8]
 800a552:	7013      	strb	r3, [r2, #0]
 800a554:	65a3      	str	r3, [r4, #88]	; 0x58
 800a556:	2205      	movs	r2, #5
 800a558:	7831      	ldrb	r1, [r6, #0]
 800a55a:	4854      	ldr	r0, [pc, #336]	; (800a6ac <_svfiprintf_r+0x1ec>)
 800a55c:	f001 fd58 	bl	800c010 <memchr>
 800a560:	1c75      	adds	r5, r6, #1
 800a562:	2800      	cmp	r0, #0
 800a564:	d11f      	bne.n	800a5a6 <_svfiprintf_r+0xe6>
 800a566:	6822      	ldr	r2, [r4, #0]
 800a568:	06d3      	lsls	r3, r2, #27
 800a56a:	d504      	bpl.n	800a576 <_svfiprintf_r+0xb6>
 800a56c:	2353      	movs	r3, #83	; 0x53
 800a56e:	a904      	add	r1, sp, #16
 800a570:	185b      	adds	r3, r3, r1
 800a572:	2120      	movs	r1, #32
 800a574:	7019      	strb	r1, [r3, #0]
 800a576:	0713      	lsls	r3, r2, #28
 800a578:	d504      	bpl.n	800a584 <_svfiprintf_r+0xc4>
 800a57a:	2353      	movs	r3, #83	; 0x53
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	185b      	adds	r3, r3, r1
 800a580:	212b      	movs	r1, #43	; 0x2b
 800a582:	7019      	strb	r1, [r3, #0]
 800a584:	7833      	ldrb	r3, [r6, #0]
 800a586:	2b2a      	cmp	r3, #42	; 0x2a
 800a588:	d016      	beq.n	800a5b8 <_svfiprintf_r+0xf8>
 800a58a:	0035      	movs	r5, r6
 800a58c:	2100      	movs	r1, #0
 800a58e:	200a      	movs	r0, #10
 800a590:	68e3      	ldr	r3, [r4, #12]
 800a592:	782a      	ldrb	r2, [r5, #0]
 800a594:	1c6e      	adds	r6, r5, #1
 800a596:	3a30      	subs	r2, #48	; 0x30
 800a598:	2a09      	cmp	r2, #9
 800a59a:	d94e      	bls.n	800a63a <_svfiprintf_r+0x17a>
 800a59c:	2900      	cmp	r1, #0
 800a59e:	d111      	bne.n	800a5c4 <_svfiprintf_r+0x104>
 800a5a0:	e017      	b.n	800a5d2 <_svfiprintf_r+0x112>
 800a5a2:	3501      	adds	r5, #1
 800a5a4:	e7b0      	b.n	800a508 <_svfiprintf_r+0x48>
 800a5a6:	4b41      	ldr	r3, [pc, #260]	; (800a6ac <_svfiprintf_r+0x1ec>)
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	1ac0      	subs	r0, r0, r3
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4083      	lsls	r3, r0
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	002e      	movs	r6, r5
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	e7ce      	b.n	800a556 <_svfiprintf_r+0x96>
 800a5b8:	9b07      	ldr	r3, [sp, #28]
 800a5ba:	1d19      	adds	r1, r3, #4
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	9107      	str	r1, [sp, #28]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	db01      	blt.n	800a5c8 <_svfiprintf_r+0x108>
 800a5c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5c6:	e004      	b.n	800a5d2 <_svfiprintf_r+0x112>
 800a5c8:	425b      	negs	r3, r3
 800a5ca:	60e3      	str	r3, [r4, #12]
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	782b      	ldrb	r3, [r5, #0]
 800a5d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a5d6:	d10a      	bne.n	800a5ee <_svfiprintf_r+0x12e>
 800a5d8:	786b      	ldrb	r3, [r5, #1]
 800a5da:	2b2a      	cmp	r3, #42	; 0x2a
 800a5dc:	d135      	bne.n	800a64a <_svfiprintf_r+0x18a>
 800a5de:	9b07      	ldr	r3, [sp, #28]
 800a5e0:	3502      	adds	r5, #2
 800a5e2:	1d1a      	adds	r2, r3, #4
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	9207      	str	r2, [sp, #28]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	db2b      	blt.n	800a644 <_svfiprintf_r+0x184>
 800a5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ee:	4e30      	ldr	r6, [pc, #192]	; (800a6b0 <_svfiprintf_r+0x1f0>)
 800a5f0:	2203      	movs	r2, #3
 800a5f2:	0030      	movs	r0, r6
 800a5f4:	7829      	ldrb	r1, [r5, #0]
 800a5f6:	f001 fd0b 	bl	800c010 <memchr>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d006      	beq.n	800a60c <_svfiprintf_r+0x14c>
 800a5fe:	2340      	movs	r3, #64	; 0x40
 800a600:	1b80      	subs	r0, r0, r6
 800a602:	4083      	lsls	r3, r0
 800a604:	6822      	ldr	r2, [r4, #0]
 800a606:	3501      	adds	r5, #1
 800a608:	4313      	orrs	r3, r2
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	7829      	ldrb	r1, [r5, #0]
 800a60e:	2206      	movs	r2, #6
 800a610:	4828      	ldr	r0, [pc, #160]	; (800a6b4 <_svfiprintf_r+0x1f4>)
 800a612:	1c6e      	adds	r6, r5, #1
 800a614:	7621      	strb	r1, [r4, #24]
 800a616:	f001 fcfb 	bl	800c010 <memchr>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d03c      	beq.n	800a698 <_svfiprintf_r+0x1d8>
 800a61e:	4b26      	ldr	r3, [pc, #152]	; (800a6b8 <_svfiprintf_r+0x1f8>)
 800a620:	2b00      	cmp	r3, #0
 800a622:	d125      	bne.n	800a670 <_svfiprintf_r+0x1b0>
 800a624:	2207      	movs	r2, #7
 800a626:	9b07      	ldr	r3, [sp, #28]
 800a628:	3307      	adds	r3, #7
 800a62a:	4393      	bics	r3, r2
 800a62c:	3308      	adds	r3, #8
 800a62e:	9307      	str	r3, [sp, #28]
 800a630:	6963      	ldr	r3, [r4, #20]
 800a632:	9a04      	ldr	r2, [sp, #16]
 800a634:	189b      	adds	r3, r3, r2
 800a636:	6163      	str	r3, [r4, #20]
 800a638:	e765      	b.n	800a506 <_svfiprintf_r+0x46>
 800a63a:	4343      	muls	r3, r0
 800a63c:	0035      	movs	r5, r6
 800a63e:	2101      	movs	r1, #1
 800a640:	189b      	adds	r3, r3, r2
 800a642:	e7a6      	b.n	800a592 <_svfiprintf_r+0xd2>
 800a644:	2301      	movs	r3, #1
 800a646:	425b      	negs	r3, r3
 800a648:	e7d0      	b.n	800a5ec <_svfiprintf_r+0x12c>
 800a64a:	2300      	movs	r3, #0
 800a64c:	200a      	movs	r0, #10
 800a64e:	001a      	movs	r2, r3
 800a650:	3501      	adds	r5, #1
 800a652:	6063      	str	r3, [r4, #4]
 800a654:	7829      	ldrb	r1, [r5, #0]
 800a656:	1c6e      	adds	r6, r5, #1
 800a658:	3930      	subs	r1, #48	; 0x30
 800a65a:	2909      	cmp	r1, #9
 800a65c:	d903      	bls.n	800a666 <_svfiprintf_r+0x1a6>
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0c5      	beq.n	800a5ee <_svfiprintf_r+0x12e>
 800a662:	9209      	str	r2, [sp, #36]	; 0x24
 800a664:	e7c3      	b.n	800a5ee <_svfiprintf_r+0x12e>
 800a666:	4342      	muls	r2, r0
 800a668:	0035      	movs	r5, r6
 800a66a:	2301      	movs	r3, #1
 800a66c:	1852      	adds	r2, r2, r1
 800a66e:	e7f1      	b.n	800a654 <_svfiprintf_r+0x194>
 800a670:	ab07      	add	r3, sp, #28
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	003a      	movs	r2, r7
 800a676:	0021      	movs	r1, r4
 800a678:	4b10      	ldr	r3, [pc, #64]	; (800a6bc <_svfiprintf_r+0x1fc>)
 800a67a:	9803      	ldr	r0, [sp, #12]
 800a67c:	e000      	b.n	800a680 <_svfiprintf_r+0x1c0>
 800a67e:	bf00      	nop
 800a680:	9004      	str	r0, [sp, #16]
 800a682:	9b04      	ldr	r3, [sp, #16]
 800a684:	3301      	adds	r3, #1
 800a686:	d1d3      	bne.n	800a630 <_svfiprintf_r+0x170>
 800a688:	89bb      	ldrh	r3, [r7, #12]
 800a68a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a68c:	065b      	lsls	r3, r3, #25
 800a68e:	d400      	bmi.n	800a692 <_svfiprintf_r+0x1d2>
 800a690:	e72d      	b.n	800a4ee <_svfiprintf_r+0x2e>
 800a692:	2001      	movs	r0, #1
 800a694:	4240      	negs	r0, r0
 800a696:	e72a      	b.n	800a4ee <_svfiprintf_r+0x2e>
 800a698:	ab07      	add	r3, sp, #28
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	003a      	movs	r2, r7
 800a69e:	0021      	movs	r1, r4
 800a6a0:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <_svfiprintf_r+0x1fc>)
 800a6a2:	9803      	ldr	r0, [sp, #12]
 800a6a4:	f000 f9de 	bl	800aa64 <_printf_i>
 800a6a8:	e7ea      	b.n	800a680 <_svfiprintf_r+0x1c0>
 800a6aa:	46c0      	nop			; (mov r8, r8)
 800a6ac:	0800f15c 	.word	0x0800f15c
 800a6b0:	0800f162 	.word	0x0800f162
 800a6b4:	0800f166 	.word	0x0800f166
 800a6b8:	00000000 	.word	0x00000000
 800a6bc:	0800a3fd 	.word	0x0800a3fd

0800a6c0 <__sfputc_r>:
 800a6c0:	6893      	ldr	r3, [r2, #8]
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	6093      	str	r3, [r2, #8]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	da04      	bge.n	800a6d6 <__sfputc_r+0x16>
 800a6cc:	6994      	ldr	r4, [r2, #24]
 800a6ce:	42a3      	cmp	r3, r4
 800a6d0:	db07      	blt.n	800a6e2 <__sfputc_r+0x22>
 800a6d2:	290a      	cmp	r1, #10
 800a6d4:	d005      	beq.n	800a6e2 <__sfputc_r+0x22>
 800a6d6:	6813      	ldr	r3, [r2, #0]
 800a6d8:	1c58      	adds	r0, r3, #1
 800a6da:	6010      	str	r0, [r2, #0]
 800a6dc:	7019      	strb	r1, [r3, #0]
 800a6de:	0008      	movs	r0, r1
 800a6e0:	bd10      	pop	{r4, pc}
 800a6e2:	f000 fad9 	bl	800ac98 <__swbuf_r>
 800a6e6:	0001      	movs	r1, r0
 800a6e8:	e7f9      	b.n	800a6de <__sfputc_r+0x1e>

0800a6ea <__sfputs_r>:
 800a6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ec:	0006      	movs	r6, r0
 800a6ee:	000f      	movs	r7, r1
 800a6f0:	0014      	movs	r4, r2
 800a6f2:	18d5      	adds	r5, r2, r3
 800a6f4:	42ac      	cmp	r4, r5
 800a6f6:	d101      	bne.n	800a6fc <__sfputs_r+0x12>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e007      	b.n	800a70c <__sfputs_r+0x22>
 800a6fc:	7821      	ldrb	r1, [r4, #0]
 800a6fe:	003a      	movs	r2, r7
 800a700:	0030      	movs	r0, r6
 800a702:	f7ff ffdd 	bl	800a6c0 <__sfputc_r>
 800a706:	3401      	adds	r4, #1
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d1f3      	bne.n	800a6f4 <__sfputs_r+0xa>
 800a70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a710 <_vfiprintf_r>:
 800a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a712:	b0a1      	sub	sp, #132	; 0x84
 800a714:	0006      	movs	r6, r0
 800a716:	000c      	movs	r4, r1
 800a718:	001f      	movs	r7, r3
 800a71a:	9203      	str	r2, [sp, #12]
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d004      	beq.n	800a72a <_vfiprintf_r+0x1a>
 800a720:	6983      	ldr	r3, [r0, #24]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <_vfiprintf_r+0x1a>
 800a726:	f001 fb63 	bl	800bdf0 <__sinit>
 800a72a:	4b8e      	ldr	r3, [pc, #568]	; (800a964 <_vfiprintf_r+0x254>)
 800a72c:	429c      	cmp	r4, r3
 800a72e:	d11c      	bne.n	800a76a <_vfiprintf_r+0x5a>
 800a730:	6874      	ldr	r4, [r6, #4]
 800a732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a734:	07db      	lsls	r3, r3, #31
 800a736:	d405      	bmi.n	800a744 <_vfiprintf_r+0x34>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	059b      	lsls	r3, r3, #22
 800a73c:	d402      	bmi.n	800a744 <_vfiprintf_r+0x34>
 800a73e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a740:	f001 fbf7 	bl	800bf32 <__retarget_lock_acquire_recursive>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	071b      	lsls	r3, r3, #28
 800a748:	d502      	bpl.n	800a750 <_vfiprintf_r+0x40>
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d11d      	bne.n	800a78c <_vfiprintf_r+0x7c>
 800a750:	0021      	movs	r1, r4
 800a752:	0030      	movs	r0, r6
 800a754:	f000 faf6 	bl	800ad44 <__swsetup_r>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d017      	beq.n	800a78c <_vfiprintf_r+0x7c>
 800a75c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a75e:	07db      	lsls	r3, r3, #31
 800a760:	d50d      	bpl.n	800a77e <_vfiprintf_r+0x6e>
 800a762:	2001      	movs	r0, #1
 800a764:	4240      	negs	r0, r0
 800a766:	b021      	add	sp, #132	; 0x84
 800a768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a76a:	4b7f      	ldr	r3, [pc, #508]	; (800a968 <_vfiprintf_r+0x258>)
 800a76c:	429c      	cmp	r4, r3
 800a76e:	d101      	bne.n	800a774 <_vfiprintf_r+0x64>
 800a770:	68b4      	ldr	r4, [r6, #8]
 800a772:	e7de      	b.n	800a732 <_vfiprintf_r+0x22>
 800a774:	4b7d      	ldr	r3, [pc, #500]	; (800a96c <_vfiprintf_r+0x25c>)
 800a776:	429c      	cmp	r4, r3
 800a778:	d1db      	bne.n	800a732 <_vfiprintf_r+0x22>
 800a77a:	68f4      	ldr	r4, [r6, #12]
 800a77c:	e7d9      	b.n	800a732 <_vfiprintf_r+0x22>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	059b      	lsls	r3, r3, #22
 800a782:	d4ee      	bmi.n	800a762 <_vfiprintf_r+0x52>
 800a784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a786:	f001 fbd5 	bl	800bf34 <__retarget_lock_release_recursive>
 800a78a:	e7ea      	b.n	800a762 <_vfiprintf_r+0x52>
 800a78c:	2300      	movs	r3, #0
 800a78e:	ad08      	add	r5, sp, #32
 800a790:	616b      	str	r3, [r5, #20]
 800a792:	3320      	adds	r3, #32
 800a794:	766b      	strb	r3, [r5, #25]
 800a796:	3310      	adds	r3, #16
 800a798:	76ab      	strb	r3, [r5, #26]
 800a79a:	9707      	str	r7, [sp, #28]
 800a79c:	9f03      	ldr	r7, [sp, #12]
 800a79e:	783b      	ldrb	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <_vfiprintf_r+0x98>
 800a7a4:	2b25      	cmp	r3, #37	; 0x25
 800a7a6:	d14e      	bne.n	800a846 <_vfiprintf_r+0x136>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	1afb      	subs	r3, r7, r3
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	429f      	cmp	r7, r3
 800a7b2:	d00d      	beq.n	800a7d0 <_vfiprintf_r+0xc0>
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	0021      	movs	r1, r4
 800a7b8:	0030      	movs	r0, r6
 800a7ba:	9a03      	ldr	r2, [sp, #12]
 800a7bc:	f7ff ff95 	bl	800a6ea <__sfputs_r>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d100      	bne.n	800a7c6 <_vfiprintf_r+0xb6>
 800a7c4:	e0b5      	b.n	800a932 <_vfiprintf_r+0x222>
 800a7c6:	696a      	ldr	r2, [r5, #20]
 800a7c8:	9b05      	ldr	r3, [sp, #20]
 800a7ca:	4694      	mov	ip, r2
 800a7cc:	4463      	add	r3, ip
 800a7ce:	616b      	str	r3, [r5, #20]
 800a7d0:	783b      	ldrb	r3, [r7, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d100      	bne.n	800a7d8 <_vfiprintf_r+0xc8>
 800a7d6:	e0ac      	b.n	800a932 <_vfiprintf_r+0x222>
 800a7d8:	2201      	movs	r2, #1
 800a7da:	1c7b      	adds	r3, r7, #1
 800a7dc:	9303      	str	r3, [sp, #12]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	4252      	negs	r2, r2
 800a7e2:	606a      	str	r2, [r5, #4]
 800a7e4:	a904      	add	r1, sp, #16
 800a7e6:	3254      	adds	r2, #84	; 0x54
 800a7e8:	1852      	adds	r2, r2, r1
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	60eb      	str	r3, [r5, #12]
 800a7ee:	60ab      	str	r3, [r5, #8]
 800a7f0:	7013      	strb	r3, [r2, #0]
 800a7f2:	65ab      	str	r3, [r5, #88]	; 0x58
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	2205      	movs	r2, #5
 800a7f8:	7819      	ldrb	r1, [r3, #0]
 800a7fa:	485d      	ldr	r0, [pc, #372]	; (800a970 <_vfiprintf_r+0x260>)
 800a7fc:	f001 fc08 	bl	800c010 <memchr>
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	1c5f      	adds	r7, r3, #1
 800a804:	2800      	cmp	r0, #0
 800a806:	d120      	bne.n	800a84a <_vfiprintf_r+0x13a>
 800a808:	682a      	ldr	r2, [r5, #0]
 800a80a:	06d3      	lsls	r3, r2, #27
 800a80c:	d504      	bpl.n	800a818 <_vfiprintf_r+0x108>
 800a80e:	2353      	movs	r3, #83	; 0x53
 800a810:	a904      	add	r1, sp, #16
 800a812:	185b      	adds	r3, r3, r1
 800a814:	2120      	movs	r1, #32
 800a816:	7019      	strb	r1, [r3, #0]
 800a818:	0713      	lsls	r3, r2, #28
 800a81a:	d504      	bpl.n	800a826 <_vfiprintf_r+0x116>
 800a81c:	2353      	movs	r3, #83	; 0x53
 800a81e:	a904      	add	r1, sp, #16
 800a820:	185b      	adds	r3, r3, r1
 800a822:	212b      	movs	r1, #43	; 0x2b
 800a824:	7019      	strb	r1, [r3, #0]
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b2a      	cmp	r3, #42	; 0x2a
 800a82c:	d016      	beq.n	800a85c <_vfiprintf_r+0x14c>
 800a82e:	2100      	movs	r1, #0
 800a830:	68eb      	ldr	r3, [r5, #12]
 800a832:	9f03      	ldr	r7, [sp, #12]
 800a834:	783a      	ldrb	r2, [r7, #0]
 800a836:	1c78      	adds	r0, r7, #1
 800a838:	3a30      	subs	r2, #48	; 0x30
 800a83a:	4684      	mov	ip, r0
 800a83c:	2a09      	cmp	r2, #9
 800a83e:	d94f      	bls.n	800a8e0 <_vfiprintf_r+0x1d0>
 800a840:	2900      	cmp	r1, #0
 800a842:	d111      	bne.n	800a868 <_vfiprintf_r+0x158>
 800a844:	e017      	b.n	800a876 <_vfiprintf_r+0x166>
 800a846:	3701      	adds	r7, #1
 800a848:	e7a9      	b.n	800a79e <_vfiprintf_r+0x8e>
 800a84a:	4b49      	ldr	r3, [pc, #292]	; (800a970 <_vfiprintf_r+0x260>)
 800a84c:	682a      	ldr	r2, [r5, #0]
 800a84e:	1ac0      	subs	r0, r0, r3
 800a850:	2301      	movs	r3, #1
 800a852:	4083      	lsls	r3, r0
 800a854:	4313      	orrs	r3, r2
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	9703      	str	r7, [sp, #12]
 800a85a:	e7cb      	b.n	800a7f4 <_vfiprintf_r+0xe4>
 800a85c:	9b07      	ldr	r3, [sp, #28]
 800a85e:	1d19      	adds	r1, r3, #4
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	9107      	str	r1, [sp, #28]
 800a864:	2b00      	cmp	r3, #0
 800a866:	db01      	blt.n	800a86c <_vfiprintf_r+0x15c>
 800a868:	930b      	str	r3, [sp, #44]	; 0x2c
 800a86a:	e004      	b.n	800a876 <_vfiprintf_r+0x166>
 800a86c:	425b      	negs	r3, r3
 800a86e:	60eb      	str	r3, [r5, #12]
 800a870:	2302      	movs	r3, #2
 800a872:	4313      	orrs	r3, r2
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	783b      	ldrb	r3, [r7, #0]
 800a878:	2b2e      	cmp	r3, #46	; 0x2e
 800a87a:	d10a      	bne.n	800a892 <_vfiprintf_r+0x182>
 800a87c:	787b      	ldrb	r3, [r7, #1]
 800a87e:	2b2a      	cmp	r3, #42	; 0x2a
 800a880:	d137      	bne.n	800a8f2 <_vfiprintf_r+0x1e2>
 800a882:	9b07      	ldr	r3, [sp, #28]
 800a884:	3702      	adds	r7, #2
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	9207      	str	r2, [sp, #28]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	db2d      	blt.n	800a8ec <_vfiprintf_r+0x1dc>
 800a890:	9309      	str	r3, [sp, #36]	; 0x24
 800a892:	2203      	movs	r2, #3
 800a894:	7839      	ldrb	r1, [r7, #0]
 800a896:	4837      	ldr	r0, [pc, #220]	; (800a974 <_vfiprintf_r+0x264>)
 800a898:	f001 fbba 	bl	800c010 <memchr>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d007      	beq.n	800a8b0 <_vfiprintf_r+0x1a0>
 800a8a0:	4b34      	ldr	r3, [pc, #208]	; (800a974 <_vfiprintf_r+0x264>)
 800a8a2:	682a      	ldr	r2, [r5, #0]
 800a8a4:	1ac0      	subs	r0, r0, r3
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	4083      	lsls	r3, r0
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	3701      	adds	r7, #1
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	7839      	ldrb	r1, [r7, #0]
 800a8b2:	1c7b      	adds	r3, r7, #1
 800a8b4:	2206      	movs	r2, #6
 800a8b6:	4830      	ldr	r0, [pc, #192]	; (800a978 <_vfiprintf_r+0x268>)
 800a8b8:	9303      	str	r3, [sp, #12]
 800a8ba:	7629      	strb	r1, [r5, #24]
 800a8bc:	f001 fba8 	bl	800c010 <memchr>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d045      	beq.n	800a950 <_vfiprintf_r+0x240>
 800a8c4:	4b2d      	ldr	r3, [pc, #180]	; (800a97c <_vfiprintf_r+0x26c>)
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d127      	bne.n	800a91a <_vfiprintf_r+0x20a>
 800a8ca:	2207      	movs	r2, #7
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	3307      	adds	r3, #7
 800a8d0:	4393      	bics	r3, r2
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	696b      	ldr	r3, [r5, #20]
 800a8d8:	9a04      	ldr	r2, [sp, #16]
 800a8da:	189b      	adds	r3, r3, r2
 800a8dc:	616b      	str	r3, [r5, #20]
 800a8de:	e75d      	b.n	800a79c <_vfiprintf_r+0x8c>
 800a8e0:	210a      	movs	r1, #10
 800a8e2:	434b      	muls	r3, r1
 800a8e4:	4667      	mov	r7, ip
 800a8e6:	189b      	adds	r3, r3, r2
 800a8e8:	3909      	subs	r1, #9
 800a8ea:	e7a3      	b.n	800a834 <_vfiprintf_r+0x124>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	425b      	negs	r3, r3
 800a8f0:	e7ce      	b.n	800a890 <_vfiprintf_r+0x180>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	001a      	movs	r2, r3
 800a8f6:	3701      	adds	r7, #1
 800a8f8:	606b      	str	r3, [r5, #4]
 800a8fa:	7839      	ldrb	r1, [r7, #0]
 800a8fc:	1c78      	adds	r0, r7, #1
 800a8fe:	3930      	subs	r1, #48	; 0x30
 800a900:	4684      	mov	ip, r0
 800a902:	2909      	cmp	r1, #9
 800a904:	d903      	bls.n	800a90e <_vfiprintf_r+0x1fe>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d0c3      	beq.n	800a892 <_vfiprintf_r+0x182>
 800a90a:	9209      	str	r2, [sp, #36]	; 0x24
 800a90c:	e7c1      	b.n	800a892 <_vfiprintf_r+0x182>
 800a90e:	230a      	movs	r3, #10
 800a910:	435a      	muls	r2, r3
 800a912:	4667      	mov	r7, ip
 800a914:	1852      	adds	r2, r2, r1
 800a916:	3b09      	subs	r3, #9
 800a918:	e7ef      	b.n	800a8fa <_vfiprintf_r+0x1ea>
 800a91a:	ab07      	add	r3, sp, #28
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	0022      	movs	r2, r4
 800a920:	0029      	movs	r1, r5
 800a922:	0030      	movs	r0, r6
 800a924:	4b16      	ldr	r3, [pc, #88]	; (800a980 <_vfiprintf_r+0x270>)
 800a926:	e000      	b.n	800a92a <_vfiprintf_r+0x21a>
 800a928:	bf00      	nop
 800a92a:	9004      	str	r0, [sp, #16]
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	3301      	adds	r3, #1
 800a930:	d1d1      	bne.n	800a8d6 <_vfiprintf_r+0x1c6>
 800a932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a934:	07db      	lsls	r3, r3, #31
 800a936:	d405      	bmi.n	800a944 <_vfiprintf_r+0x234>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	059b      	lsls	r3, r3, #22
 800a93c:	d402      	bmi.n	800a944 <_vfiprintf_r+0x234>
 800a93e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a940:	f001 faf8 	bl	800bf34 <__retarget_lock_release_recursive>
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	065b      	lsls	r3, r3, #25
 800a948:	d500      	bpl.n	800a94c <_vfiprintf_r+0x23c>
 800a94a:	e70a      	b.n	800a762 <_vfiprintf_r+0x52>
 800a94c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a94e:	e70a      	b.n	800a766 <_vfiprintf_r+0x56>
 800a950:	ab07      	add	r3, sp, #28
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	0022      	movs	r2, r4
 800a956:	0029      	movs	r1, r5
 800a958:	0030      	movs	r0, r6
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <_vfiprintf_r+0x270>)
 800a95c:	f000 f882 	bl	800aa64 <_printf_i>
 800a960:	e7e3      	b.n	800a92a <_vfiprintf_r+0x21a>
 800a962:	46c0      	nop			; (mov r8, r8)
 800a964:	0800f220 	.word	0x0800f220
 800a968:	0800f240 	.word	0x0800f240
 800a96c:	0800f200 	.word	0x0800f200
 800a970:	0800f15c 	.word	0x0800f15c
 800a974:	0800f162 	.word	0x0800f162
 800a978:	0800f166 	.word	0x0800f166
 800a97c:	00000000 	.word	0x00000000
 800a980:	0800a6eb 	.word	0x0800a6eb

0800a984 <_printf_common>:
 800a984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a986:	0015      	movs	r5, r2
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	688a      	ldr	r2, [r1, #8]
 800a98c:	690b      	ldr	r3, [r1, #16]
 800a98e:	000c      	movs	r4, r1
 800a990:	9000      	str	r0, [sp, #0]
 800a992:	4293      	cmp	r3, r2
 800a994:	da00      	bge.n	800a998 <_printf_common+0x14>
 800a996:	0013      	movs	r3, r2
 800a998:	0022      	movs	r2, r4
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	3243      	adds	r2, #67	; 0x43
 800a99e:	7812      	ldrb	r2, [r2, #0]
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d001      	beq.n	800a9a8 <_printf_common+0x24>
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	069b      	lsls	r3, r3, #26
 800a9ac:	d502      	bpl.n	800a9b4 <_printf_common+0x30>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	3302      	adds	r3, #2
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	6822      	ldr	r2, [r4, #0]
 800a9b6:	2306      	movs	r3, #6
 800a9b8:	0017      	movs	r7, r2
 800a9ba:	401f      	ands	r7, r3
 800a9bc:	421a      	tst	r2, r3
 800a9be:	d027      	beq.n	800aa10 <_printf_common+0x8c>
 800a9c0:	0023      	movs	r3, r4
 800a9c2:	3343      	adds	r3, #67	; 0x43
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	1e5a      	subs	r2, r3, #1
 800a9c8:	4193      	sbcs	r3, r2
 800a9ca:	6822      	ldr	r2, [r4, #0]
 800a9cc:	0692      	lsls	r2, r2, #26
 800a9ce:	d430      	bmi.n	800aa32 <_printf_common+0xae>
 800a9d0:	0022      	movs	r2, r4
 800a9d2:	9901      	ldr	r1, [sp, #4]
 800a9d4:	9800      	ldr	r0, [sp, #0]
 800a9d6:	9e08      	ldr	r6, [sp, #32]
 800a9d8:	3243      	adds	r2, #67	; 0x43
 800a9da:	47b0      	blx	r6
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d025      	beq.n	800aa2c <_printf_common+0xa8>
 800a9e0:	2306      	movs	r3, #6
 800a9e2:	6820      	ldr	r0, [r4, #0]
 800a9e4:	682a      	ldr	r2, [r5, #0]
 800a9e6:	68e1      	ldr	r1, [r4, #12]
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	4003      	ands	r3, r0
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d103      	bne.n	800a9f8 <_printf_common+0x74>
 800a9f0:	1a8d      	subs	r5, r1, r2
 800a9f2:	43eb      	mvns	r3, r5
 800a9f4:	17db      	asrs	r3, r3, #31
 800a9f6:	401d      	ands	r5, r3
 800a9f8:	68a3      	ldr	r3, [r4, #8]
 800a9fa:	6922      	ldr	r2, [r4, #16]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	dd01      	ble.n	800aa04 <_printf_common+0x80>
 800aa00:	1a9b      	subs	r3, r3, r2
 800aa02:	18ed      	adds	r5, r5, r3
 800aa04:	2700      	movs	r7, #0
 800aa06:	42bd      	cmp	r5, r7
 800aa08:	d120      	bne.n	800aa4c <_printf_common+0xc8>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e010      	b.n	800aa30 <_printf_common+0xac>
 800aa0e:	3701      	adds	r7, #1
 800aa10:	68e3      	ldr	r3, [r4, #12]
 800aa12:	682a      	ldr	r2, [r5, #0]
 800aa14:	1a9b      	subs	r3, r3, r2
 800aa16:	42bb      	cmp	r3, r7
 800aa18:	ddd2      	ble.n	800a9c0 <_printf_common+0x3c>
 800aa1a:	0022      	movs	r2, r4
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	9901      	ldr	r1, [sp, #4]
 800aa20:	9800      	ldr	r0, [sp, #0]
 800aa22:	9e08      	ldr	r6, [sp, #32]
 800aa24:	3219      	adds	r2, #25
 800aa26:	47b0      	blx	r6
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d1f0      	bne.n	800aa0e <_printf_common+0x8a>
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	4240      	negs	r0, r0
 800aa30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa32:	2030      	movs	r0, #48	; 0x30
 800aa34:	18e1      	adds	r1, r4, r3
 800aa36:	3143      	adds	r1, #67	; 0x43
 800aa38:	7008      	strb	r0, [r1, #0]
 800aa3a:	0021      	movs	r1, r4
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	3145      	adds	r1, #69	; 0x45
 800aa40:	7809      	ldrb	r1, [r1, #0]
 800aa42:	18a2      	adds	r2, r4, r2
 800aa44:	3243      	adds	r2, #67	; 0x43
 800aa46:	3302      	adds	r3, #2
 800aa48:	7011      	strb	r1, [r2, #0]
 800aa4a:	e7c1      	b.n	800a9d0 <_printf_common+0x4c>
 800aa4c:	0022      	movs	r2, r4
 800aa4e:	2301      	movs	r3, #1
 800aa50:	9901      	ldr	r1, [sp, #4]
 800aa52:	9800      	ldr	r0, [sp, #0]
 800aa54:	9e08      	ldr	r6, [sp, #32]
 800aa56:	321a      	adds	r2, #26
 800aa58:	47b0      	blx	r6
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d0e6      	beq.n	800aa2c <_printf_common+0xa8>
 800aa5e:	3701      	adds	r7, #1
 800aa60:	e7d1      	b.n	800aa06 <_printf_common+0x82>
	...

0800aa64 <_printf_i>:
 800aa64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa66:	b08b      	sub	sp, #44	; 0x2c
 800aa68:	9206      	str	r2, [sp, #24]
 800aa6a:	000a      	movs	r2, r1
 800aa6c:	3243      	adds	r2, #67	; 0x43
 800aa6e:	9307      	str	r3, [sp, #28]
 800aa70:	9005      	str	r0, [sp, #20]
 800aa72:	9204      	str	r2, [sp, #16]
 800aa74:	7e0a      	ldrb	r2, [r1, #24]
 800aa76:	000c      	movs	r4, r1
 800aa78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa7a:	2a78      	cmp	r2, #120	; 0x78
 800aa7c:	d806      	bhi.n	800aa8c <_printf_i+0x28>
 800aa7e:	2a62      	cmp	r2, #98	; 0x62
 800aa80:	d808      	bhi.n	800aa94 <_printf_i+0x30>
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	d100      	bne.n	800aa88 <_printf_i+0x24>
 800aa86:	e0c0      	b.n	800ac0a <_printf_i+0x1a6>
 800aa88:	2a58      	cmp	r2, #88	; 0x58
 800aa8a:	d052      	beq.n	800ab32 <_printf_i+0xce>
 800aa8c:	0026      	movs	r6, r4
 800aa8e:	3642      	adds	r6, #66	; 0x42
 800aa90:	7032      	strb	r2, [r6, #0]
 800aa92:	e022      	b.n	800aada <_printf_i+0x76>
 800aa94:	0010      	movs	r0, r2
 800aa96:	3863      	subs	r0, #99	; 0x63
 800aa98:	2815      	cmp	r0, #21
 800aa9a:	d8f7      	bhi.n	800aa8c <_printf_i+0x28>
 800aa9c:	f7f8 fb0c 	bl	80030b8 <__gnu_thumb1_case_shi>
 800aaa0:	001f0016 	.word	0x001f0016
 800aaa4:	fff6fff6 	.word	0xfff6fff6
 800aaa8:	fff6fff6 	.word	0xfff6fff6
 800aaac:	fff6001f 	.word	0xfff6001f
 800aab0:	fff6fff6 	.word	0xfff6fff6
 800aab4:	00a8fff6 	.word	0x00a8fff6
 800aab8:	009a0036 	.word	0x009a0036
 800aabc:	fff6fff6 	.word	0xfff6fff6
 800aac0:	fff600b9 	.word	0xfff600b9
 800aac4:	fff60036 	.word	0xfff60036
 800aac8:	009efff6 	.word	0x009efff6
 800aacc:	0026      	movs	r6, r4
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	3642      	adds	r6, #66	; 0x42
 800aad2:	1d11      	adds	r1, r2, #4
 800aad4:	6019      	str	r1, [r3, #0]
 800aad6:	6813      	ldr	r3, [r2, #0]
 800aad8:	7033      	strb	r3, [r6, #0]
 800aada:	2301      	movs	r3, #1
 800aadc:	e0a7      	b.n	800ac2e <_printf_i+0x1ca>
 800aade:	6808      	ldr	r0, [r1, #0]
 800aae0:	6819      	ldr	r1, [r3, #0]
 800aae2:	1d0a      	adds	r2, r1, #4
 800aae4:	0605      	lsls	r5, r0, #24
 800aae6:	d50b      	bpl.n	800ab00 <_printf_i+0x9c>
 800aae8:	680d      	ldr	r5, [r1, #0]
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	2d00      	cmp	r5, #0
 800aaee:	da03      	bge.n	800aaf8 <_printf_i+0x94>
 800aaf0:	232d      	movs	r3, #45	; 0x2d
 800aaf2:	9a04      	ldr	r2, [sp, #16]
 800aaf4:	426d      	negs	r5, r5
 800aaf6:	7013      	strb	r3, [r2, #0]
 800aaf8:	4b61      	ldr	r3, [pc, #388]	; (800ac80 <_printf_i+0x21c>)
 800aafa:	270a      	movs	r7, #10
 800aafc:	9303      	str	r3, [sp, #12]
 800aafe:	e032      	b.n	800ab66 <_printf_i+0x102>
 800ab00:	680d      	ldr	r5, [r1, #0]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	0641      	lsls	r1, r0, #25
 800ab06:	d5f1      	bpl.n	800aaec <_printf_i+0x88>
 800ab08:	b22d      	sxth	r5, r5
 800ab0a:	e7ef      	b.n	800aaec <_printf_i+0x88>
 800ab0c:	680d      	ldr	r5, [r1, #0]
 800ab0e:	6819      	ldr	r1, [r3, #0]
 800ab10:	1d08      	adds	r0, r1, #4
 800ab12:	6018      	str	r0, [r3, #0]
 800ab14:	062e      	lsls	r6, r5, #24
 800ab16:	d501      	bpl.n	800ab1c <_printf_i+0xb8>
 800ab18:	680d      	ldr	r5, [r1, #0]
 800ab1a:	e003      	b.n	800ab24 <_printf_i+0xc0>
 800ab1c:	066d      	lsls	r5, r5, #25
 800ab1e:	d5fb      	bpl.n	800ab18 <_printf_i+0xb4>
 800ab20:	680d      	ldr	r5, [r1, #0]
 800ab22:	b2ad      	uxth	r5, r5
 800ab24:	4b56      	ldr	r3, [pc, #344]	; (800ac80 <_printf_i+0x21c>)
 800ab26:	270a      	movs	r7, #10
 800ab28:	9303      	str	r3, [sp, #12]
 800ab2a:	2a6f      	cmp	r2, #111	; 0x6f
 800ab2c:	d117      	bne.n	800ab5e <_printf_i+0xfa>
 800ab2e:	2708      	movs	r7, #8
 800ab30:	e015      	b.n	800ab5e <_printf_i+0xfa>
 800ab32:	3145      	adds	r1, #69	; 0x45
 800ab34:	700a      	strb	r2, [r1, #0]
 800ab36:	4a52      	ldr	r2, [pc, #328]	; (800ac80 <_printf_i+0x21c>)
 800ab38:	9203      	str	r2, [sp, #12]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	6821      	ldr	r1, [r4, #0]
 800ab3e:	ca20      	ldmia	r2!, {r5}
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	0608      	lsls	r0, r1, #24
 800ab44:	d550      	bpl.n	800abe8 <_printf_i+0x184>
 800ab46:	07cb      	lsls	r3, r1, #31
 800ab48:	d502      	bpl.n	800ab50 <_printf_i+0xec>
 800ab4a:	2320      	movs	r3, #32
 800ab4c:	4319      	orrs	r1, r3
 800ab4e:	6021      	str	r1, [r4, #0]
 800ab50:	2710      	movs	r7, #16
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	d103      	bne.n	800ab5e <_printf_i+0xfa>
 800ab56:	2320      	movs	r3, #32
 800ab58:	6822      	ldr	r2, [r4, #0]
 800ab5a:	439a      	bics	r2, r3
 800ab5c:	6022      	str	r2, [r4, #0]
 800ab5e:	0023      	movs	r3, r4
 800ab60:	2200      	movs	r2, #0
 800ab62:	3343      	adds	r3, #67	; 0x43
 800ab64:	701a      	strb	r2, [r3, #0]
 800ab66:	6863      	ldr	r3, [r4, #4]
 800ab68:	60a3      	str	r3, [r4, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	db03      	blt.n	800ab76 <_printf_i+0x112>
 800ab6e:	2204      	movs	r2, #4
 800ab70:	6821      	ldr	r1, [r4, #0]
 800ab72:	4391      	bics	r1, r2
 800ab74:	6021      	str	r1, [r4, #0]
 800ab76:	2d00      	cmp	r5, #0
 800ab78:	d102      	bne.n	800ab80 <_printf_i+0x11c>
 800ab7a:	9e04      	ldr	r6, [sp, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00c      	beq.n	800ab9a <_printf_i+0x136>
 800ab80:	9e04      	ldr	r6, [sp, #16]
 800ab82:	0028      	movs	r0, r5
 800ab84:	0039      	movs	r1, r7
 800ab86:	f7f5 fb43 	bl	8000210 <__aeabi_uidivmod>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	3e01      	subs	r6, #1
 800ab8e:	5c5b      	ldrb	r3, [r3, r1]
 800ab90:	7033      	strb	r3, [r6, #0]
 800ab92:	002b      	movs	r3, r5
 800ab94:	0005      	movs	r5, r0
 800ab96:	429f      	cmp	r7, r3
 800ab98:	d9f3      	bls.n	800ab82 <_printf_i+0x11e>
 800ab9a:	2f08      	cmp	r7, #8
 800ab9c:	d109      	bne.n	800abb2 <_printf_i+0x14e>
 800ab9e:	6823      	ldr	r3, [r4, #0]
 800aba0:	07db      	lsls	r3, r3, #31
 800aba2:	d506      	bpl.n	800abb2 <_printf_i+0x14e>
 800aba4:	6863      	ldr	r3, [r4, #4]
 800aba6:	6922      	ldr	r2, [r4, #16]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	dc02      	bgt.n	800abb2 <_printf_i+0x14e>
 800abac:	2330      	movs	r3, #48	; 0x30
 800abae:	3e01      	subs	r6, #1
 800abb0:	7033      	strb	r3, [r6, #0]
 800abb2:	9b04      	ldr	r3, [sp, #16]
 800abb4:	1b9b      	subs	r3, r3, r6
 800abb6:	6123      	str	r3, [r4, #16]
 800abb8:	9b07      	ldr	r3, [sp, #28]
 800abba:	0021      	movs	r1, r4
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	9805      	ldr	r0, [sp, #20]
 800abc0:	9b06      	ldr	r3, [sp, #24]
 800abc2:	aa09      	add	r2, sp, #36	; 0x24
 800abc4:	f7ff fede 	bl	800a984 <_printf_common>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d135      	bne.n	800ac38 <_printf_i+0x1d4>
 800abcc:	2001      	movs	r0, #1
 800abce:	4240      	negs	r0, r0
 800abd0:	b00b      	add	sp, #44	; 0x2c
 800abd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd4:	2220      	movs	r2, #32
 800abd6:	6809      	ldr	r1, [r1, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	6022      	str	r2, [r4, #0]
 800abdc:	0022      	movs	r2, r4
 800abde:	2178      	movs	r1, #120	; 0x78
 800abe0:	3245      	adds	r2, #69	; 0x45
 800abe2:	7011      	strb	r1, [r2, #0]
 800abe4:	4a27      	ldr	r2, [pc, #156]	; (800ac84 <_printf_i+0x220>)
 800abe6:	e7a7      	b.n	800ab38 <_printf_i+0xd4>
 800abe8:	0648      	lsls	r0, r1, #25
 800abea:	d5ac      	bpl.n	800ab46 <_printf_i+0xe2>
 800abec:	b2ad      	uxth	r5, r5
 800abee:	e7aa      	b.n	800ab46 <_printf_i+0xe2>
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	680d      	ldr	r5, [r1, #0]
 800abf4:	1d10      	adds	r0, r2, #4
 800abf6:	6949      	ldr	r1, [r1, #20]
 800abf8:	6018      	str	r0, [r3, #0]
 800abfa:	6813      	ldr	r3, [r2, #0]
 800abfc:	062e      	lsls	r6, r5, #24
 800abfe:	d501      	bpl.n	800ac04 <_printf_i+0x1a0>
 800ac00:	6019      	str	r1, [r3, #0]
 800ac02:	e002      	b.n	800ac0a <_printf_i+0x1a6>
 800ac04:	066d      	lsls	r5, r5, #25
 800ac06:	d5fb      	bpl.n	800ac00 <_printf_i+0x19c>
 800ac08:	8019      	strh	r1, [r3, #0]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9e04      	ldr	r6, [sp, #16]
 800ac0e:	6123      	str	r3, [r4, #16]
 800ac10:	e7d2      	b.n	800abb8 <_printf_i+0x154>
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	1d11      	adds	r1, r2, #4
 800ac16:	6019      	str	r1, [r3, #0]
 800ac18:	6816      	ldr	r6, [r2, #0]
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	0030      	movs	r0, r6
 800ac1e:	6862      	ldr	r2, [r4, #4]
 800ac20:	f001 f9f6 	bl	800c010 <memchr>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d001      	beq.n	800ac2c <_printf_i+0x1c8>
 800ac28:	1b80      	subs	r0, r0, r6
 800ac2a:	6060      	str	r0, [r4, #4]
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	6123      	str	r3, [r4, #16]
 800ac30:	2300      	movs	r3, #0
 800ac32:	9a04      	ldr	r2, [sp, #16]
 800ac34:	7013      	strb	r3, [r2, #0]
 800ac36:	e7bf      	b.n	800abb8 <_printf_i+0x154>
 800ac38:	6923      	ldr	r3, [r4, #16]
 800ac3a:	0032      	movs	r2, r6
 800ac3c:	9906      	ldr	r1, [sp, #24]
 800ac3e:	9805      	ldr	r0, [sp, #20]
 800ac40:	9d07      	ldr	r5, [sp, #28]
 800ac42:	47a8      	blx	r5
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d0c1      	beq.n	800abcc <_printf_i+0x168>
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	079b      	lsls	r3, r3, #30
 800ac4c:	d415      	bmi.n	800ac7a <_printf_i+0x216>
 800ac4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac50:	68e0      	ldr	r0, [r4, #12]
 800ac52:	4298      	cmp	r0, r3
 800ac54:	dabc      	bge.n	800abd0 <_printf_i+0x16c>
 800ac56:	0018      	movs	r0, r3
 800ac58:	e7ba      	b.n	800abd0 <_printf_i+0x16c>
 800ac5a:	0022      	movs	r2, r4
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	9906      	ldr	r1, [sp, #24]
 800ac60:	9805      	ldr	r0, [sp, #20]
 800ac62:	9e07      	ldr	r6, [sp, #28]
 800ac64:	3219      	adds	r2, #25
 800ac66:	47b0      	blx	r6
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d0af      	beq.n	800abcc <_printf_i+0x168>
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac72:	1a9b      	subs	r3, r3, r2
 800ac74:	42ab      	cmp	r3, r5
 800ac76:	dcf0      	bgt.n	800ac5a <_printf_i+0x1f6>
 800ac78:	e7e9      	b.n	800ac4e <_printf_i+0x1ea>
 800ac7a:	2500      	movs	r5, #0
 800ac7c:	e7f7      	b.n	800ac6e <_printf_i+0x20a>
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	0800f16d 	.word	0x0800f16d
 800ac84:	0800f17e 	.word	0x0800f17e

0800ac88 <strcpy>:
 800ac88:	0003      	movs	r3, r0
 800ac8a:	780a      	ldrb	r2, [r1, #0]
 800ac8c:	3101      	adds	r1, #1
 800ac8e:	701a      	strb	r2, [r3, #0]
 800ac90:	3301      	adds	r3, #1
 800ac92:	2a00      	cmp	r2, #0
 800ac94:	d1f9      	bne.n	800ac8a <strcpy+0x2>
 800ac96:	4770      	bx	lr

0800ac98 <__swbuf_r>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	0005      	movs	r5, r0
 800ac9c:	000e      	movs	r6, r1
 800ac9e:	0014      	movs	r4, r2
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d004      	beq.n	800acae <__swbuf_r+0x16>
 800aca4:	6983      	ldr	r3, [r0, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <__swbuf_r+0x16>
 800acaa:	f001 f8a1 	bl	800bdf0 <__sinit>
 800acae:	4b22      	ldr	r3, [pc, #136]	; (800ad38 <__swbuf_r+0xa0>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	d12e      	bne.n	800ad12 <__swbuf_r+0x7a>
 800acb4:	686c      	ldr	r4, [r5, #4]
 800acb6:	69a3      	ldr	r3, [r4, #24]
 800acb8:	60a3      	str	r3, [r4, #8]
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	071b      	lsls	r3, r3, #28
 800acbe:	d532      	bpl.n	800ad26 <__swbuf_r+0x8e>
 800acc0:	6923      	ldr	r3, [r4, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d02f      	beq.n	800ad26 <__swbuf_r+0x8e>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	6922      	ldr	r2, [r4, #16]
 800acca:	b2f7      	uxtb	r7, r6
 800accc:	1a98      	subs	r0, r3, r2
 800acce:	6963      	ldr	r3, [r4, #20]
 800acd0:	b2f6      	uxtb	r6, r6
 800acd2:	4283      	cmp	r3, r0
 800acd4:	dc05      	bgt.n	800ace2 <__swbuf_r+0x4a>
 800acd6:	0021      	movs	r1, r4
 800acd8:	0028      	movs	r0, r5
 800acda:	f000 ffe7 	bl	800bcac <_fflush_r>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d127      	bne.n	800ad32 <__swbuf_r+0x9a>
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	3001      	adds	r0, #1
 800ace6:	3b01      	subs	r3, #1
 800ace8:	60a3      	str	r3, [r4, #8]
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	6022      	str	r2, [r4, #0]
 800acf0:	701f      	strb	r7, [r3, #0]
 800acf2:	6963      	ldr	r3, [r4, #20]
 800acf4:	4283      	cmp	r3, r0
 800acf6:	d004      	beq.n	800ad02 <__swbuf_r+0x6a>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	07db      	lsls	r3, r3, #31
 800acfc:	d507      	bpl.n	800ad0e <__swbuf_r+0x76>
 800acfe:	2e0a      	cmp	r6, #10
 800ad00:	d105      	bne.n	800ad0e <__swbuf_r+0x76>
 800ad02:	0021      	movs	r1, r4
 800ad04:	0028      	movs	r0, r5
 800ad06:	f000 ffd1 	bl	800bcac <_fflush_r>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d111      	bne.n	800ad32 <__swbuf_r+0x9a>
 800ad0e:	0030      	movs	r0, r6
 800ad10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad12:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <__swbuf_r+0xa4>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	d101      	bne.n	800ad1c <__swbuf_r+0x84>
 800ad18:	68ac      	ldr	r4, [r5, #8]
 800ad1a:	e7cc      	b.n	800acb6 <__swbuf_r+0x1e>
 800ad1c:	4b08      	ldr	r3, [pc, #32]	; (800ad40 <__swbuf_r+0xa8>)
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	d1c9      	bne.n	800acb6 <__swbuf_r+0x1e>
 800ad22:	68ec      	ldr	r4, [r5, #12]
 800ad24:	e7c7      	b.n	800acb6 <__swbuf_r+0x1e>
 800ad26:	0021      	movs	r1, r4
 800ad28:	0028      	movs	r0, r5
 800ad2a:	f000 f80b 	bl	800ad44 <__swsetup_r>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d0c9      	beq.n	800acc6 <__swbuf_r+0x2e>
 800ad32:	2601      	movs	r6, #1
 800ad34:	4276      	negs	r6, r6
 800ad36:	e7ea      	b.n	800ad0e <__swbuf_r+0x76>
 800ad38:	0800f220 	.word	0x0800f220
 800ad3c:	0800f240 	.word	0x0800f240
 800ad40:	0800f200 	.word	0x0800f200

0800ad44 <__swsetup_r>:
 800ad44:	4b37      	ldr	r3, [pc, #220]	; (800ae24 <__swsetup_r+0xe0>)
 800ad46:	b570      	push	{r4, r5, r6, lr}
 800ad48:	681d      	ldr	r5, [r3, #0]
 800ad4a:	0006      	movs	r6, r0
 800ad4c:	000c      	movs	r4, r1
 800ad4e:	2d00      	cmp	r5, #0
 800ad50:	d005      	beq.n	800ad5e <__swsetup_r+0x1a>
 800ad52:	69ab      	ldr	r3, [r5, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <__swsetup_r+0x1a>
 800ad58:	0028      	movs	r0, r5
 800ad5a:	f001 f849 	bl	800bdf0 <__sinit>
 800ad5e:	4b32      	ldr	r3, [pc, #200]	; (800ae28 <__swsetup_r+0xe4>)
 800ad60:	429c      	cmp	r4, r3
 800ad62:	d10f      	bne.n	800ad84 <__swsetup_r+0x40>
 800ad64:	686c      	ldr	r4, [r5, #4]
 800ad66:	230c      	movs	r3, #12
 800ad68:	5ee2      	ldrsh	r2, [r4, r3]
 800ad6a:	b293      	uxth	r3, r2
 800ad6c:	0711      	lsls	r1, r2, #28
 800ad6e:	d42d      	bmi.n	800adcc <__swsetup_r+0x88>
 800ad70:	06d9      	lsls	r1, r3, #27
 800ad72:	d411      	bmi.n	800ad98 <__swsetup_r+0x54>
 800ad74:	2309      	movs	r3, #9
 800ad76:	2001      	movs	r0, #1
 800ad78:	6033      	str	r3, [r6, #0]
 800ad7a:	3337      	adds	r3, #55	; 0x37
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	81a3      	strh	r3, [r4, #12]
 800ad80:	4240      	negs	r0, r0
 800ad82:	bd70      	pop	{r4, r5, r6, pc}
 800ad84:	4b29      	ldr	r3, [pc, #164]	; (800ae2c <__swsetup_r+0xe8>)
 800ad86:	429c      	cmp	r4, r3
 800ad88:	d101      	bne.n	800ad8e <__swsetup_r+0x4a>
 800ad8a:	68ac      	ldr	r4, [r5, #8]
 800ad8c:	e7eb      	b.n	800ad66 <__swsetup_r+0x22>
 800ad8e:	4b28      	ldr	r3, [pc, #160]	; (800ae30 <__swsetup_r+0xec>)
 800ad90:	429c      	cmp	r4, r3
 800ad92:	d1e8      	bne.n	800ad66 <__swsetup_r+0x22>
 800ad94:	68ec      	ldr	r4, [r5, #12]
 800ad96:	e7e6      	b.n	800ad66 <__swsetup_r+0x22>
 800ad98:	075b      	lsls	r3, r3, #29
 800ad9a:	d513      	bpl.n	800adc4 <__swsetup_r+0x80>
 800ad9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad9e:	2900      	cmp	r1, #0
 800ada0:	d008      	beq.n	800adb4 <__swsetup_r+0x70>
 800ada2:	0023      	movs	r3, r4
 800ada4:	3344      	adds	r3, #68	; 0x44
 800ada6:	4299      	cmp	r1, r3
 800ada8:	d002      	beq.n	800adb0 <__swsetup_r+0x6c>
 800adaa:	0030      	movs	r0, r6
 800adac:	f7fe fcd4 	bl	8009758 <_free_r>
 800adb0:	2300      	movs	r3, #0
 800adb2:	6363      	str	r3, [r4, #52]	; 0x34
 800adb4:	2224      	movs	r2, #36	; 0x24
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	4393      	bics	r3, r2
 800adba:	81a3      	strh	r3, [r4, #12]
 800adbc:	2300      	movs	r3, #0
 800adbe:	6063      	str	r3, [r4, #4]
 800adc0:	6923      	ldr	r3, [r4, #16]
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	2308      	movs	r3, #8
 800adc6:	89a2      	ldrh	r2, [r4, #12]
 800adc8:	4313      	orrs	r3, r2
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	6923      	ldr	r3, [r4, #16]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10b      	bne.n	800adea <__swsetup_r+0xa6>
 800add2:	21a0      	movs	r1, #160	; 0xa0
 800add4:	2280      	movs	r2, #128	; 0x80
 800add6:	89a3      	ldrh	r3, [r4, #12]
 800add8:	0089      	lsls	r1, r1, #2
 800adda:	0092      	lsls	r2, r2, #2
 800addc:	400b      	ands	r3, r1
 800adde:	4293      	cmp	r3, r2
 800ade0:	d003      	beq.n	800adea <__swsetup_r+0xa6>
 800ade2:	0021      	movs	r1, r4
 800ade4:	0030      	movs	r0, r6
 800ade6:	f001 f8cf 	bl	800bf88 <__smakebuf_r>
 800adea:	220c      	movs	r2, #12
 800adec:	5ea3      	ldrsh	r3, [r4, r2]
 800adee:	2001      	movs	r0, #1
 800adf0:	001a      	movs	r2, r3
 800adf2:	b299      	uxth	r1, r3
 800adf4:	4002      	ands	r2, r0
 800adf6:	4203      	tst	r3, r0
 800adf8:	d00f      	beq.n	800ae1a <__swsetup_r+0xd6>
 800adfa:	2200      	movs	r2, #0
 800adfc:	60a2      	str	r2, [r4, #8]
 800adfe:	6962      	ldr	r2, [r4, #20]
 800ae00:	4252      	negs	r2, r2
 800ae02:	61a2      	str	r2, [r4, #24]
 800ae04:	2000      	movs	r0, #0
 800ae06:	6922      	ldr	r2, [r4, #16]
 800ae08:	4282      	cmp	r2, r0
 800ae0a:	d1ba      	bne.n	800ad82 <__swsetup_r+0x3e>
 800ae0c:	060a      	lsls	r2, r1, #24
 800ae0e:	d5b8      	bpl.n	800ad82 <__swsetup_r+0x3e>
 800ae10:	2240      	movs	r2, #64	; 0x40
 800ae12:	4313      	orrs	r3, r2
 800ae14:	81a3      	strh	r3, [r4, #12]
 800ae16:	3801      	subs	r0, #1
 800ae18:	e7b3      	b.n	800ad82 <__swsetup_r+0x3e>
 800ae1a:	0788      	lsls	r0, r1, #30
 800ae1c:	d400      	bmi.n	800ae20 <__swsetup_r+0xdc>
 800ae1e:	6962      	ldr	r2, [r4, #20]
 800ae20:	60a2      	str	r2, [r4, #8]
 800ae22:	e7ef      	b.n	800ae04 <__swsetup_r+0xc0>
 800ae24:	200000b8 	.word	0x200000b8
 800ae28:	0800f220 	.word	0x0800f220
 800ae2c:	0800f240 	.word	0x0800f240
 800ae30:	0800f200 	.word	0x0800f200

0800ae34 <abort>:
 800ae34:	2006      	movs	r0, #6
 800ae36:	b510      	push	{r4, lr}
 800ae38:	f001 f944 	bl	800c0c4 <raise>
 800ae3c:	2001      	movs	r0, #1
 800ae3e:	f7fa ffcb 	bl	8005dd8 <_exit>

0800ae42 <quorem>:
 800ae42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae44:	0006      	movs	r6, r0
 800ae46:	690d      	ldr	r5, [r1, #16]
 800ae48:	6933      	ldr	r3, [r6, #16]
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	9102      	str	r1, [sp, #8]
 800ae50:	42ab      	cmp	r3, r5
 800ae52:	db6b      	blt.n	800af2c <quorem+0xea>
 800ae54:	000b      	movs	r3, r1
 800ae56:	3d01      	subs	r5, #1
 800ae58:	00ac      	lsls	r4, r5, #2
 800ae5a:	3314      	adds	r3, #20
 800ae5c:	9305      	str	r3, [sp, #20]
 800ae5e:	191b      	adds	r3, r3, r4
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	0033      	movs	r3, r6
 800ae64:	3314      	adds	r3, #20
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	191c      	adds	r4, r3, r4
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	6827      	ldr	r7, [r4, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	0038      	movs	r0, r7
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	0019      	movs	r1, r3
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	f7f5 f943 	bl	8000104 <__udivsi3>
 800ae7e:	9b04      	ldr	r3, [sp, #16]
 800ae80:	9000      	str	r0, [sp, #0]
 800ae82:	429f      	cmp	r7, r3
 800ae84:	d329      	bcc.n	800aeda <quorem+0x98>
 800ae86:	2300      	movs	r3, #0
 800ae88:	469c      	mov	ip, r3
 800ae8a:	9801      	ldr	r0, [sp, #4]
 800ae8c:	9f05      	ldr	r7, [sp, #20]
 800ae8e:	9304      	str	r3, [sp, #16]
 800ae90:	cf08      	ldmia	r7!, {r3}
 800ae92:	9a00      	ldr	r2, [sp, #0]
 800ae94:	b299      	uxth	r1, r3
 800ae96:	4351      	muls	r1, r2
 800ae98:	0c1b      	lsrs	r3, r3, #16
 800ae9a:	4353      	muls	r3, r2
 800ae9c:	4461      	add	r1, ip
 800ae9e:	0c0a      	lsrs	r2, r1, #16
 800aea0:	189b      	adds	r3, r3, r2
 800aea2:	0c1a      	lsrs	r2, r3, #16
 800aea4:	9305      	str	r3, [sp, #20]
 800aea6:	6803      	ldr	r3, [r0, #0]
 800aea8:	4694      	mov	ip, r2
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	b289      	uxth	r1, r1
 800aeb0:	18d2      	adds	r2, r2, r3
 800aeb2:	6803      	ldr	r3, [r0, #0]
 800aeb4:	1a52      	subs	r2, r2, r1
 800aeb6:	0c19      	lsrs	r1, r3, #16
 800aeb8:	466b      	mov	r3, sp
 800aeba:	8a9b      	ldrh	r3, [r3, #20]
 800aebc:	1acb      	subs	r3, r1, r3
 800aebe:	1411      	asrs	r1, r2, #16
 800aec0:	185b      	adds	r3, r3, r1
 800aec2:	1419      	asrs	r1, r3, #16
 800aec4:	b292      	uxth	r2, r2
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	431a      	orrs	r2, r3
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	9104      	str	r1, [sp, #16]
 800aece:	c004      	stmia	r0!, {r2}
 800aed0:	42bb      	cmp	r3, r7
 800aed2:	d2dd      	bcs.n	800ae90 <quorem+0x4e>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d02e      	beq.n	800af38 <quorem+0xf6>
 800aeda:	0030      	movs	r0, r6
 800aedc:	9902      	ldr	r1, [sp, #8]
 800aede:	f7ff f927 	bl	800a130 <__mcmp>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	db21      	blt.n	800af2a <quorem+0xe8>
 800aee6:	0030      	movs	r0, r6
 800aee8:	2400      	movs	r4, #0
 800aeea:	9b00      	ldr	r3, [sp, #0]
 800aeec:	9902      	ldr	r1, [sp, #8]
 800aeee:	3301      	adds	r3, #1
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	3014      	adds	r0, #20
 800aef4:	3114      	adds	r1, #20
 800aef6:	6802      	ldr	r2, [r0, #0]
 800aef8:	c908      	ldmia	r1!, {r3}
 800aefa:	b292      	uxth	r2, r2
 800aefc:	1914      	adds	r4, r2, r4
 800aefe:	b29a      	uxth	r2, r3
 800af00:	1aa2      	subs	r2, r4, r2
 800af02:	6804      	ldr	r4, [r0, #0]
 800af04:	0c1b      	lsrs	r3, r3, #16
 800af06:	0c24      	lsrs	r4, r4, #16
 800af08:	1ae3      	subs	r3, r4, r3
 800af0a:	1414      	asrs	r4, r2, #16
 800af0c:	191b      	adds	r3, r3, r4
 800af0e:	141c      	asrs	r4, r3, #16
 800af10:	b292      	uxth	r2, r2
 800af12:	041b      	lsls	r3, r3, #16
 800af14:	4313      	orrs	r3, r2
 800af16:	c008      	stmia	r0!, {r3}
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	428b      	cmp	r3, r1
 800af1c:	d2eb      	bcs.n	800aef6 <quorem+0xb4>
 800af1e:	9a01      	ldr	r2, [sp, #4]
 800af20:	00ab      	lsls	r3, r5, #2
 800af22:	18d3      	adds	r3, r2, r3
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	2a00      	cmp	r2, #0
 800af28:	d010      	beq.n	800af4c <quorem+0x10a>
 800af2a:	9800      	ldr	r0, [sp, #0]
 800af2c:	b007      	add	sp, #28
 800af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d104      	bne.n	800af40 <quorem+0xfe>
 800af36:	3d01      	subs	r5, #1
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	3c04      	subs	r4, #4
 800af3c:	42a3      	cmp	r3, r4
 800af3e:	d3f7      	bcc.n	800af30 <quorem+0xee>
 800af40:	6135      	str	r5, [r6, #16]
 800af42:	e7ca      	b.n	800aeda <quorem+0x98>
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	2a00      	cmp	r2, #0
 800af48:	d104      	bne.n	800af54 <quorem+0x112>
 800af4a:	3d01      	subs	r5, #1
 800af4c:	9a01      	ldr	r2, [sp, #4]
 800af4e:	3b04      	subs	r3, #4
 800af50:	429a      	cmp	r2, r3
 800af52:	d3f7      	bcc.n	800af44 <quorem+0x102>
 800af54:	6135      	str	r5, [r6, #16]
 800af56:	e7e8      	b.n	800af2a <quorem+0xe8>

0800af58 <_dtoa_r>:
 800af58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af5a:	b09d      	sub	sp, #116	; 0x74
 800af5c:	9202      	str	r2, [sp, #8]
 800af5e:	9303      	str	r3, [sp, #12]
 800af60:	9b02      	ldr	r3, [sp, #8]
 800af62:	9c03      	ldr	r4, [sp, #12]
 800af64:	930a      	str	r3, [sp, #40]	; 0x28
 800af66:	940b      	str	r4, [sp, #44]	; 0x2c
 800af68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800af6a:	0007      	movs	r7, r0
 800af6c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800af6e:	2c00      	cmp	r4, #0
 800af70:	d10e      	bne.n	800af90 <_dtoa_r+0x38>
 800af72:	2010      	movs	r0, #16
 800af74:	f7fe fbde 	bl	8009734 <malloc>
 800af78:	1e02      	subs	r2, r0, #0
 800af7a:	6278      	str	r0, [r7, #36]	; 0x24
 800af7c:	d104      	bne.n	800af88 <_dtoa_r+0x30>
 800af7e:	21ea      	movs	r1, #234	; 0xea
 800af80:	4bc0      	ldr	r3, [pc, #768]	; (800b284 <_dtoa_r+0x32c>)
 800af82:	48c1      	ldr	r0, [pc, #772]	; (800b288 <_dtoa_r+0x330>)
 800af84:	f7fe fcc2 	bl	800990c <__assert_func>
 800af88:	6044      	str	r4, [r0, #4]
 800af8a:	6084      	str	r4, [r0, #8]
 800af8c:	6004      	str	r4, [r0, #0]
 800af8e:	60c4      	str	r4, [r0, #12]
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	2900      	cmp	r1, #0
 800af96:	d00a      	beq.n	800afae <_dtoa_r+0x56>
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	2301      	movs	r3, #1
 800af9c:	4093      	lsls	r3, r2
 800af9e:	604a      	str	r2, [r1, #4]
 800afa0:	608b      	str	r3, [r1, #8]
 800afa2:	0038      	movs	r0, r7
 800afa4:	f7fe fe82 	bl	8009cac <_Bfree>
 800afa8:	2200      	movs	r2, #0
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	9b03      	ldr	r3, [sp, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	da21      	bge.n	800aff8 <_dtoa_r+0xa0>
 800afb4:	2301      	movs	r3, #1
 800afb6:	602b      	str	r3, [r5, #0]
 800afb8:	9b03      	ldr	r3, [sp, #12]
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	085b      	lsrs	r3, r3, #1
 800afbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800afc0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800afc2:	4bb2      	ldr	r3, [pc, #712]	; (800b28c <_dtoa_r+0x334>)
 800afc4:	002a      	movs	r2, r5
 800afc6:	9318      	str	r3, [sp, #96]	; 0x60
 800afc8:	401a      	ands	r2, r3
 800afca:	429a      	cmp	r2, r3
 800afcc:	d117      	bne.n	800affe <_dtoa_r+0xa6>
 800afce:	4bb0      	ldr	r3, [pc, #704]	; (800b290 <_dtoa_r+0x338>)
 800afd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afd2:	0328      	lsls	r0, r5, #12
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	9b02      	ldr	r3, [sp, #8]
 800afd8:	0b00      	lsrs	r0, r0, #12
 800afda:	4318      	orrs	r0, r3
 800afdc:	d101      	bne.n	800afe2 <_dtoa_r+0x8a>
 800afde:	f000 fdc3 	bl	800bb68 <_dtoa_r+0xc10>
 800afe2:	48ac      	ldr	r0, [pc, #688]	; (800b294 <_dtoa_r+0x33c>)
 800afe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afe6:	9005      	str	r0, [sp, #20]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <_dtoa_r+0x9a>
 800afec:	4baa      	ldr	r3, [pc, #680]	; (800b298 <_dtoa_r+0x340>)
 800afee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	9805      	ldr	r0, [sp, #20]
 800aff4:	b01d      	add	sp, #116	; 0x74
 800aff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff8:	2300      	movs	r3, #0
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	e7e0      	b.n	800afc0 <_dtoa_r+0x68>
 800affe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b000:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b002:	9312      	str	r3, [sp, #72]	; 0x48
 800b004:	9413      	str	r4, [sp, #76]	; 0x4c
 800b006:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b008:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b00a:	2200      	movs	r2, #0
 800b00c:	2300      	movs	r3, #0
 800b00e:	f7f7 fedf 	bl	8002dd0 <__aeabi_dcmpeq>
 800b012:	1e04      	subs	r4, r0, #0
 800b014:	d00b      	beq.n	800b02e <_dtoa_r+0xd6>
 800b016:	2301      	movs	r3, #1
 800b018:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b01a:	6013      	str	r3, [r2, #0]
 800b01c:	4b9f      	ldr	r3, [pc, #636]	; (800b29c <_dtoa_r+0x344>)
 800b01e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b020:	9305      	str	r3, [sp, #20]
 800b022:	2a00      	cmp	r2, #0
 800b024:	d0e5      	beq.n	800aff2 <_dtoa_r+0x9a>
 800b026:	4a9e      	ldr	r2, [pc, #632]	; (800b2a0 <_dtoa_r+0x348>)
 800b028:	9926      	ldr	r1, [sp, #152]	; 0x98
 800b02a:	600a      	str	r2, [r1, #0]
 800b02c:	e7e1      	b.n	800aff2 <_dtoa_r+0x9a>
 800b02e:	ab1a      	add	r3, sp, #104	; 0x68
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	ab1b      	add	r3, sp, #108	; 0x6c
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	0038      	movs	r0, r7
 800b038:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b03a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b03c:	f7ff f92c 	bl	800a298 <__d2b>
 800b040:	006e      	lsls	r6, r5, #1
 800b042:	9004      	str	r0, [sp, #16]
 800b044:	0d76      	lsrs	r6, r6, #21
 800b046:	d100      	bne.n	800b04a <_dtoa_r+0xf2>
 800b048:	e07c      	b.n	800b144 <_dtoa_r+0x1ec>
 800b04a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b04c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b04e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b050:	4a94      	ldr	r2, [pc, #592]	; (800b2a4 <_dtoa_r+0x34c>)
 800b052:	031b      	lsls	r3, r3, #12
 800b054:	0b1b      	lsrs	r3, r3, #12
 800b056:	431a      	orrs	r2, r3
 800b058:	0011      	movs	r1, r2
 800b05a:	4b93      	ldr	r3, [pc, #588]	; (800b2a8 <_dtoa_r+0x350>)
 800b05c:	9416      	str	r4, [sp, #88]	; 0x58
 800b05e:	18f6      	adds	r6, r6, r3
 800b060:	2200      	movs	r2, #0
 800b062:	4b92      	ldr	r3, [pc, #584]	; (800b2ac <_dtoa_r+0x354>)
 800b064:	f7f7 f9dc 	bl	8002420 <__aeabi_dsub>
 800b068:	4a91      	ldr	r2, [pc, #580]	; (800b2b0 <_dtoa_r+0x358>)
 800b06a:	4b92      	ldr	r3, [pc, #584]	; (800b2b4 <_dtoa_r+0x35c>)
 800b06c:	f7f6 ff6c 	bl	8001f48 <__aeabi_dmul>
 800b070:	4a91      	ldr	r2, [pc, #580]	; (800b2b8 <_dtoa_r+0x360>)
 800b072:	4b92      	ldr	r3, [pc, #584]	; (800b2bc <_dtoa_r+0x364>)
 800b074:	f7f6 f916 	bl	80012a4 <__aeabi_dadd>
 800b078:	0004      	movs	r4, r0
 800b07a:	0030      	movs	r0, r6
 800b07c:	000d      	movs	r5, r1
 800b07e:	f7f7 fd97 	bl	8002bb0 <__aeabi_i2d>
 800b082:	4a8f      	ldr	r2, [pc, #572]	; (800b2c0 <_dtoa_r+0x368>)
 800b084:	4b8f      	ldr	r3, [pc, #572]	; (800b2c4 <_dtoa_r+0x36c>)
 800b086:	f7f6 ff5f 	bl	8001f48 <__aeabi_dmul>
 800b08a:	0002      	movs	r2, r0
 800b08c:	000b      	movs	r3, r1
 800b08e:	0020      	movs	r0, r4
 800b090:	0029      	movs	r1, r5
 800b092:	f7f6 f907 	bl	80012a4 <__aeabi_dadd>
 800b096:	0004      	movs	r4, r0
 800b098:	000d      	movs	r5, r1
 800b09a:	f7f7 fd53 	bl	8002b44 <__aeabi_d2iz>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	9002      	str	r0, [sp, #8]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	0020      	movs	r0, r4
 800b0a6:	0029      	movs	r1, r5
 800b0a8:	f7f7 fe98 	bl	8002ddc <__aeabi_dcmplt>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d00b      	beq.n	800b0c8 <_dtoa_r+0x170>
 800b0b0:	9802      	ldr	r0, [sp, #8]
 800b0b2:	f7f7 fd7d 	bl	8002bb0 <__aeabi_i2d>
 800b0b6:	002b      	movs	r3, r5
 800b0b8:	0022      	movs	r2, r4
 800b0ba:	f7f7 fe89 	bl	8002dd0 <__aeabi_dcmpeq>
 800b0be:	4243      	negs	r3, r0
 800b0c0:	4158      	adcs	r0, r3
 800b0c2:	9b02      	ldr	r3, [sp, #8]
 800b0c4:	1a1b      	subs	r3, r3, r0
 800b0c6:	9302      	str	r3, [sp, #8]
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b0cc:	9b02      	ldr	r3, [sp, #8]
 800b0ce:	2b16      	cmp	r3, #22
 800b0d0:	d80f      	bhi.n	800b0f2 <_dtoa_r+0x19a>
 800b0d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b0d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b0d6:	00da      	lsls	r2, r3, #3
 800b0d8:	4b7b      	ldr	r3, [pc, #492]	; (800b2c8 <_dtoa_r+0x370>)
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f7f7 fe7c 	bl	8002ddc <__aeabi_dcmplt>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d049      	beq.n	800b17c <_dtoa_r+0x224>
 800b0e8:	9b02      	ldr	r3, [sp, #8]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	9302      	str	r3, [sp, #8]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9315      	str	r3, [sp, #84]	; 0x54
 800b0f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b0f4:	1b9e      	subs	r6, r3, r6
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9308      	str	r3, [sp, #32]
 800b0fa:	0033      	movs	r3, r6
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	930d      	str	r3, [sp, #52]	; 0x34
 800b100:	d504      	bpl.n	800b10c <_dtoa_r+0x1b4>
 800b102:	2301      	movs	r3, #1
 800b104:	1b9b      	subs	r3, r3, r6
 800b106:	9308      	str	r3, [sp, #32]
 800b108:	2300      	movs	r3, #0
 800b10a:	930d      	str	r3, [sp, #52]	; 0x34
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	db36      	blt.n	800b180 <_dtoa_r+0x228>
 800b112:	9a02      	ldr	r2, [sp, #8]
 800b114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b116:	4694      	mov	ip, r2
 800b118:	4463      	add	r3, ip
 800b11a:	930d      	str	r3, [sp, #52]	; 0x34
 800b11c:	2300      	movs	r3, #0
 800b11e:	9214      	str	r2, [sp, #80]	; 0x50
 800b120:	930e      	str	r3, [sp, #56]	; 0x38
 800b122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b124:	2401      	movs	r4, #1
 800b126:	2b09      	cmp	r3, #9
 800b128:	d862      	bhi.n	800b1f0 <_dtoa_r+0x298>
 800b12a:	2b05      	cmp	r3, #5
 800b12c:	dd02      	ble.n	800b134 <_dtoa_r+0x1dc>
 800b12e:	2400      	movs	r4, #0
 800b130:	3b04      	subs	r3, #4
 800b132:	9322      	str	r3, [sp, #136]	; 0x88
 800b134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b136:	1e98      	subs	r0, r3, #2
 800b138:	2803      	cmp	r0, #3
 800b13a:	d862      	bhi.n	800b202 <_dtoa_r+0x2aa>
 800b13c:	f7f7 ffb2 	bl	80030a4 <__gnu_thumb1_case_uqi>
 800b140:	56343629 	.word	0x56343629
 800b144:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b146:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b148:	189e      	adds	r6, r3, r2
 800b14a:	4b60      	ldr	r3, [pc, #384]	; (800b2cc <_dtoa_r+0x374>)
 800b14c:	18f2      	adds	r2, r6, r3
 800b14e:	2a20      	cmp	r2, #32
 800b150:	dd0f      	ble.n	800b172 <_dtoa_r+0x21a>
 800b152:	2340      	movs	r3, #64	; 0x40
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	409d      	lsls	r5, r3
 800b158:	4b5d      	ldr	r3, [pc, #372]	; (800b2d0 <_dtoa_r+0x378>)
 800b15a:	9802      	ldr	r0, [sp, #8]
 800b15c:	18f3      	adds	r3, r6, r3
 800b15e:	40d8      	lsrs	r0, r3
 800b160:	4328      	orrs	r0, r5
 800b162:	f7f7 ffb3 	bl	80030cc <__aeabi_ui2d>
 800b166:	2301      	movs	r3, #1
 800b168:	4c5a      	ldr	r4, [pc, #360]	; (800b2d4 <_dtoa_r+0x37c>)
 800b16a:	3e01      	subs	r6, #1
 800b16c:	1909      	adds	r1, r1, r4
 800b16e:	9316      	str	r3, [sp, #88]	; 0x58
 800b170:	e776      	b.n	800b060 <_dtoa_r+0x108>
 800b172:	2320      	movs	r3, #32
 800b174:	9802      	ldr	r0, [sp, #8]
 800b176:	1a9b      	subs	r3, r3, r2
 800b178:	4098      	lsls	r0, r3
 800b17a:	e7f2      	b.n	800b162 <_dtoa_r+0x20a>
 800b17c:	9015      	str	r0, [sp, #84]	; 0x54
 800b17e:	e7b8      	b.n	800b0f2 <_dtoa_r+0x19a>
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	9a02      	ldr	r2, [sp, #8]
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	9308      	str	r3, [sp, #32]
 800b188:	4253      	negs	r3, r2
 800b18a:	930e      	str	r3, [sp, #56]	; 0x38
 800b18c:	2300      	movs	r3, #0
 800b18e:	9314      	str	r3, [sp, #80]	; 0x50
 800b190:	e7c7      	b.n	800b122 <_dtoa_r+0x1ca>
 800b192:	2300      	movs	r3, #0
 800b194:	930f      	str	r3, [sp, #60]	; 0x3c
 800b196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dc36      	bgt.n	800b20a <_dtoa_r+0x2b2>
 800b19c:	2301      	movs	r3, #1
 800b19e:	001a      	movs	r2, r3
 800b1a0:	930c      	str	r3, [sp, #48]	; 0x30
 800b1a2:	9306      	str	r3, [sp, #24]
 800b1a4:	9223      	str	r2, [sp, #140]	; 0x8c
 800b1a6:	e00d      	b.n	800b1c4 <_dtoa_r+0x26c>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e7f3      	b.n	800b194 <_dtoa_r+0x23c>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b1b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1b2:	4694      	mov	ip, r2
 800b1b4:	9b02      	ldr	r3, [sp, #8]
 800b1b6:	4463      	add	r3, ip
 800b1b8:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	9306      	str	r3, [sp, #24]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	dc00      	bgt.n	800b1c4 <_dtoa_r+0x26c>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1c8:	6042      	str	r2, [r0, #4]
 800b1ca:	3204      	adds	r2, #4
 800b1cc:	0015      	movs	r5, r2
 800b1ce:	3514      	adds	r5, #20
 800b1d0:	6841      	ldr	r1, [r0, #4]
 800b1d2:	429d      	cmp	r5, r3
 800b1d4:	d91d      	bls.n	800b212 <_dtoa_r+0x2ba>
 800b1d6:	0038      	movs	r0, r7
 800b1d8:	f7fe fd24 	bl	8009c24 <_Balloc>
 800b1dc:	9005      	str	r0, [sp, #20]
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d11b      	bne.n	800b21a <_dtoa_r+0x2c2>
 800b1e2:	21d5      	movs	r1, #213	; 0xd5
 800b1e4:	0002      	movs	r2, r0
 800b1e6:	4b3c      	ldr	r3, [pc, #240]	; (800b2d8 <_dtoa_r+0x380>)
 800b1e8:	0049      	lsls	r1, r1, #1
 800b1ea:	e6ca      	b.n	800af82 <_dtoa_r+0x2a>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e7de      	b.n	800b1ae <_dtoa_r+0x256>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	940f      	str	r4, [sp, #60]	; 0x3c
 800b1f4:	9322      	str	r3, [sp, #136]	; 0x88
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b1fa:	9306      	str	r3, [sp, #24]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	3313      	adds	r3, #19
 800b200:	e7d0      	b.n	800b1a4 <_dtoa_r+0x24c>
 800b202:	2301      	movs	r3, #1
 800b204:	930f      	str	r3, [sp, #60]	; 0x3c
 800b206:	3b02      	subs	r3, #2
 800b208:	e7f6      	b.n	800b1f8 <_dtoa_r+0x2a0>
 800b20a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b20c:	930c      	str	r3, [sp, #48]	; 0x30
 800b20e:	9306      	str	r3, [sp, #24]
 800b210:	e7d8      	b.n	800b1c4 <_dtoa_r+0x26c>
 800b212:	3101      	adds	r1, #1
 800b214:	6041      	str	r1, [r0, #4]
 800b216:	0052      	lsls	r2, r2, #1
 800b218:	e7d8      	b.n	800b1cc <_dtoa_r+0x274>
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	9a05      	ldr	r2, [sp, #20]
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	9b06      	ldr	r3, [sp, #24]
 800b222:	2b0e      	cmp	r3, #14
 800b224:	d900      	bls.n	800b228 <_dtoa_r+0x2d0>
 800b226:	e0eb      	b.n	800b400 <_dtoa_r+0x4a8>
 800b228:	2c00      	cmp	r4, #0
 800b22a:	d100      	bne.n	800b22e <_dtoa_r+0x2d6>
 800b22c:	e0e8      	b.n	800b400 <_dtoa_r+0x4a8>
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	dd68      	ble.n	800b306 <_dtoa_r+0x3ae>
 800b234:	001a      	movs	r2, r3
 800b236:	210f      	movs	r1, #15
 800b238:	4b23      	ldr	r3, [pc, #140]	; (800b2c8 <_dtoa_r+0x370>)
 800b23a:	400a      	ands	r2, r1
 800b23c:	00d2      	lsls	r2, r2, #3
 800b23e:	189b      	adds	r3, r3, r2
 800b240:	681d      	ldr	r5, [r3, #0]
 800b242:	685e      	ldr	r6, [r3, #4]
 800b244:	9b02      	ldr	r3, [sp, #8]
 800b246:	111c      	asrs	r4, r3, #4
 800b248:	2302      	movs	r3, #2
 800b24a:	9310      	str	r3, [sp, #64]	; 0x40
 800b24c:	9b02      	ldr	r3, [sp, #8]
 800b24e:	05db      	lsls	r3, r3, #23
 800b250:	d50b      	bpl.n	800b26a <_dtoa_r+0x312>
 800b252:	4b22      	ldr	r3, [pc, #136]	; (800b2dc <_dtoa_r+0x384>)
 800b254:	400c      	ands	r4, r1
 800b256:	6a1a      	ldr	r2, [r3, #32]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b25c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b25e:	f7f6 fb8b 	bl	8001978 <__aeabi_ddiv>
 800b262:	2303      	movs	r3, #3
 800b264:	900a      	str	r0, [sp, #40]	; 0x28
 800b266:	910b      	str	r1, [sp, #44]	; 0x2c
 800b268:	9310      	str	r3, [sp, #64]	; 0x40
 800b26a:	4b1c      	ldr	r3, [pc, #112]	; (800b2dc <_dtoa_r+0x384>)
 800b26c:	9307      	str	r3, [sp, #28]
 800b26e:	2c00      	cmp	r4, #0
 800b270:	d136      	bne.n	800b2e0 <_dtoa_r+0x388>
 800b272:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b276:	002a      	movs	r2, r5
 800b278:	0033      	movs	r3, r6
 800b27a:	f7f6 fb7d 	bl	8001978 <__aeabi_ddiv>
 800b27e:	900a      	str	r0, [sp, #40]	; 0x28
 800b280:	910b      	str	r1, [sp, #44]	; 0x2c
 800b282:	e05c      	b.n	800b33e <_dtoa_r+0x3e6>
 800b284:	0800efd4 	.word	0x0800efd4
 800b288:	0800f19e 	.word	0x0800f19e
 800b28c:	7ff00000 	.word	0x7ff00000
 800b290:	0000270f 	.word	0x0000270f
 800b294:	0800f198 	.word	0x0800f198
 800b298:	0800f19b 	.word	0x0800f19b
 800b29c:	0800f19c 	.word	0x0800f19c
 800b2a0:	0800f19d 	.word	0x0800f19d
 800b2a4:	3ff00000 	.word	0x3ff00000
 800b2a8:	fffffc01 	.word	0xfffffc01
 800b2ac:	3ff80000 	.word	0x3ff80000
 800b2b0:	636f4361 	.word	0x636f4361
 800b2b4:	3fd287a7 	.word	0x3fd287a7
 800b2b8:	8b60c8b3 	.word	0x8b60c8b3
 800b2bc:	3fc68a28 	.word	0x3fc68a28
 800b2c0:	509f79fb 	.word	0x509f79fb
 800b2c4:	3fd34413 	.word	0x3fd34413
 800b2c8:	0800f088 	.word	0x0800f088
 800b2cc:	00000432 	.word	0x00000432
 800b2d0:	00000412 	.word	0x00000412
 800b2d4:	fe100000 	.word	0xfe100000
 800b2d8:	0800f04b 	.word	0x0800f04b
 800b2dc:	0800f060 	.word	0x0800f060
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	421c      	tst	r4, r3
 800b2e4:	d00b      	beq.n	800b2fe <_dtoa_r+0x3a6>
 800b2e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2e8:	0028      	movs	r0, r5
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	9310      	str	r3, [sp, #64]	; 0x40
 800b2ee:	9b07      	ldr	r3, [sp, #28]
 800b2f0:	0031      	movs	r1, r6
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	f7f6 fe27 	bl	8001f48 <__aeabi_dmul>
 800b2fa:	0005      	movs	r5, r0
 800b2fc:	000e      	movs	r6, r1
 800b2fe:	9b07      	ldr	r3, [sp, #28]
 800b300:	1064      	asrs	r4, r4, #1
 800b302:	3308      	adds	r3, #8
 800b304:	e7b2      	b.n	800b26c <_dtoa_r+0x314>
 800b306:	2302      	movs	r3, #2
 800b308:	9310      	str	r3, [sp, #64]	; 0x40
 800b30a:	9b02      	ldr	r3, [sp, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d016      	beq.n	800b33e <_dtoa_r+0x3e6>
 800b310:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b312:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b314:	425c      	negs	r4, r3
 800b316:	230f      	movs	r3, #15
 800b318:	4ab5      	ldr	r2, [pc, #724]	; (800b5f0 <_dtoa_r+0x698>)
 800b31a:	4023      	ands	r3, r4
 800b31c:	00db      	lsls	r3, r3, #3
 800b31e:	18d3      	adds	r3, r2, r3
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f7f6 fe10 	bl	8001f48 <__aeabi_dmul>
 800b328:	2601      	movs	r6, #1
 800b32a:	2300      	movs	r3, #0
 800b32c:	900a      	str	r0, [sp, #40]	; 0x28
 800b32e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b330:	4db0      	ldr	r5, [pc, #704]	; (800b5f4 <_dtoa_r+0x69c>)
 800b332:	1124      	asrs	r4, r4, #4
 800b334:	2c00      	cmp	r4, #0
 800b336:	d000      	beq.n	800b33a <_dtoa_r+0x3e2>
 800b338:	e094      	b.n	800b464 <_dtoa_r+0x50c>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d19f      	bne.n	800b27e <_dtoa_r+0x326>
 800b33e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b340:	2b00      	cmp	r3, #0
 800b342:	d100      	bne.n	800b346 <_dtoa_r+0x3ee>
 800b344:	e09b      	b.n	800b47e <_dtoa_r+0x526>
 800b346:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b348:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b34a:	2200      	movs	r2, #0
 800b34c:	0020      	movs	r0, r4
 800b34e:	0029      	movs	r1, r5
 800b350:	4ba9      	ldr	r3, [pc, #676]	; (800b5f8 <_dtoa_r+0x6a0>)
 800b352:	f7f7 fd43 	bl	8002ddc <__aeabi_dcmplt>
 800b356:	2800      	cmp	r0, #0
 800b358:	d100      	bne.n	800b35c <_dtoa_r+0x404>
 800b35a:	e090      	b.n	800b47e <_dtoa_r+0x526>
 800b35c:	9b06      	ldr	r3, [sp, #24]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d100      	bne.n	800b364 <_dtoa_r+0x40c>
 800b362:	e08c      	b.n	800b47e <_dtoa_r+0x526>
 800b364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b366:	2b00      	cmp	r3, #0
 800b368:	dd46      	ble.n	800b3f8 <_dtoa_r+0x4a0>
 800b36a:	9b02      	ldr	r3, [sp, #8]
 800b36c:	2200      	movs	r2, #0
 800b36e:	0020      	movs	r0, r4
 800b370:	0029      	movs	r1, r5
 800b372:	1e5e      	subs	r6, r3, #1
 800b374:	4ba1      	ldr	r3, [pc, #644]	; (800b5fc <_dtoa_r+0x6a4>)
 800b376:	f7f6 fde7 	bl	8001f48 <__aeabi_dmul>
 800b37a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b37c:	900a      	str	r0, [sp, #40]	; 0x28
 800b37e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b380:	3301      	adds	r3, #1
 800b382:	9310      	str	r3, [sp, #64]	; 0x40
 800b384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b386:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b388:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b38a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b38c:	9307      	str	r3, [sp, #28]
 800b38e:	f7f7 fc0f 	bl	8002bb0 <__aeabi_i2d>
 800b392:	0022      	movs	r2, r4
 800b394:	002b      	movs	r3, r5
 800b396:	f7f6 fdd7 	bl	8001f48 <__aeabi_dmul>
 800b39a:	2200      	movs	r2, #0
 800b39c:	4b98      	ldr	r3, [pc, #608]	; (800b600 <_dtoa_r+0x6a8>)
 800b39e:	f7f5 ff81 	bl	80012a4 <__aeabi_dadd>
 800b3a2:	9010      	str	r0, [sp, #64]	; 0x40
 800b3a4:	9111      	str	r1, [sp, #68]	; 0x44
 800b3a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3aa:	920a      	str	r2, [sp, #40]	; 0x28
 800b3ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ae:	4a95      	ldr	r2, [pc, #596]	; (800b604 <_dtoa_r+0x6ac>)
 800b3b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3b2:	4694      	mov	ip, r2
 800b3b4:	4463      	add	r3, ip
 800b3b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b3b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ba:	9b07      	ldr	r3, [sp, #28]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d161      	bne.n	800b484 <_dtoa_r+0x52c>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	0020      	movs	r0, r4
 800b3c4:	0029      	movs	r1, r5
 800b3c6:	4b90      	ldr	r3, [pc, #576]	; (800b608 <_dtoa_r+0x6b0>)
 800b3c8:	f7f7 f82a 	bl	8002420 <__aeabi_dsub>
 800b3cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3d0:	0004      	movs	r4, r0
 800b3d2:	000d      	movs	r5, r1
 800b3d4:	f7f7 fd16 	bl	8002e04 <__aeabi_dcmpgt>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d000      	beq.n	800b3de <_dtoa_r+0x486>
 800b3dc:	e2b5      	b.n	800b94a <_dtoa_r+0x9f2>
 800b3de:	488b      	ldr	r0, [pc, #556]	; (800b60c <_dtoa_r+0x6b4>)
 800b3e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b3e2:	4684      	mov	ip, r0
 800b3e4:	4461      	add	r1, ip
 800b3e6:	000b      	movs	r3, r1
 800b3e8:	0020      	movs	r0, r4
 800b3ea:	0029      	movs	r1, r5
 800b3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ee:	f7f7 fcf5 	bl	8002ddc <__aeabi_dcmplt>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d000      	beq.n	800b3f8 <_dtoa_r+0x4a0>
 800b3f6:	e2a5      	b.n	800b944 <_dtoa_r+0x9ec>
 800b3f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b3fc:	930a      	str	r3, [sp, #40]	; 0x28
 800b3fe:	940b      	str	r4, [sp, #44]	; 0x2c
 800b400:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b402:	2b00      	cmp	r3, #0
 800b404:	da00      	bge.n	800b408 <_dtoa_r+0x4b0>
 800b406:	e171      	b.n	800b6ec <_dtoa_r+0x794>
 800b408:	9a02      	ldr	r2, [sp, #8]
 800b40a:	2a0e      	cmp	r2, #14
 800b40c:	dd00      	ble.n	800b410 <_dtoa_r+0x4b8>
 800b40e:	e16d      	b.n	800b6ec <_dtoa_r+0x794>
 800b410:	4b77      	ldr	r3, [pc, #476]	; (800b5f0 <_dtoa_r+0x698>)
 800b412:	00d2      	lsls	r2, r2, #3
 800b414:	189b      	adds	r3, r3, r2
 800b416:	685c      	ldr	r4, [r3, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	9308      	str	r3, [sp, #32]
 800b41c:	9409      	str	r4, [sp, #36]	; 0x24
 800b41e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b420:	2b00      	cmp	r3, #0
 800b422:	db00      	blt.n	800b426 <_dtoa_r+0x4ce>
 800b424:	e0f6      	b.n	800b614 <_dtoa_r+0x6bc>
 800b426:	9b06      	ldr	r3, [sp, #24]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dd00      	ble.n	800b42e <_dtoa_r+0x4d6>
 800b42c:	e0f2      	b.n	800b614 <_dtoa_r+0x6bc>
 800b42e:	d000      	beq.n	800b432 <_dtoa_r+0x4da>
 800b430:	e288      	b.n	800b944 <_dtoa_r+0x9ec>
 800b432:	9808      	ldr	r0, [sp, #32]
 800b434:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b436:	2200      	movs	r2, #0
 800b438:	4b73      	ldr	r3, [pc, #460]	; (800b608 <_dtoa_r+0x6b0>)
 800b43a:	f7f6 fd85 	bl	8001f48 <__aeabi_dmul>
 800b43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b442:	f7f7 fce9 	bl	8002e18 <__aeabi_dcmpge>
 800b446:	9e06      	ldr	r6, [sp, #24]
 800b448:	0035      	movs	r5, r6
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d000      	beq.n	800b450 <_dtoa_r+0x4f8>
 800b44e:	e25f      	b.n	800b910 <_dtoa_r+0x9b8>
 800b450:	9b05      	ldr	r3, [sp, #20]
 800b452:	9a05      	ldr	r2, [sp, #20]
 800b454:	3301      	adds	r3, #1
 800b456:	9307      	str	r3, [sp, #28]
 800b458:	2331      	movs	r3, #49	; 0x31
 800b45a:	7013      	strb	r3, [r2, #0]
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	3301      	adds	r3, #1
 800b460:	9302      	str	r3, [sp, #8]
 800b462:	e25a      	b.n	800b91a <_dtoa_r+0x9c2>
 800b464:	4234      	tst	r4, r6
 800b466:	d007      	beq.n	800b478 <_dtoa_r+0x520>
 800b468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b46a:	3301      	adds	r3, #1
 800b46c:	9310      	str	r3, [sp, #64]	; 0x40
 800b46e:	682a      	ldr	r2, [r5, #0]
 800b470:	686b      	ldr	r3, [r5, #4]
 800b472:	f7f6 fd69 	bl	8001f48 <__aeabi_dmul>
 800b476:	0033      	movs	r3, r6
 800b478:	1064      	asrs	r4, r4, #1
 800b47a:	3508      	adds	r5, #8
 800b47c:	e75a      	b.n	800b334 <_dtoa_r+0x3dc>
 800b47e:	9e02      	ldr	r6, [sp, #8]
 800b480:	9b06      	ldr	r3, [sp, #24]
 800b482:	e780      	b.n	800b386 <_dtoa_r+0x42e>
 800b484:	9b07      	ldr	r3, [sp, #28]
 800b486:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b488:	1e5a      	subs	r2, r3, #1
 800b48a:	4b59      	ldr	r3, [pc, #356]	; (800b5f0 <_dtoa_r+0x698>)
 800b48c:	00d2      	lsls	r2, r2, #3
 800b48e:	189b      	adds	r3, r3, r2
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	2900      	cmp	r1, #0
 800b496:	d051      	beq.n	800b53c <_dtoa_r+0x5e4>
 800b498:	2000      	movs	r0, #0
 800b49a:	495d      	ldr	r1, [pc, #372]	; (800b610 <_dtoa_r+0x6b8>)
 800b49c:	f7f6 fa6c 	bl	8001978 <__aeabi_ddiv>
 800b4a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a4:	f7f6 ffbc 	bl	8002420 <__aeabi_dsub>
 800b4a8:	9a05      	ldr	r2, [sp, #20]
 800b4aa:	9b05      	ldr	r3, [sp, #20]
 800b4ac:	4694      	mov	ip, r2
 800b4ae:	9310      	str	r3, [sp, #64]	; 0x40
 800b4b0:	9b07      	ldr	r3, [sp, #28]
 800b4b2:	900a      	str	r0, [sp, #40]	; 0x28
 800b4b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800b4b6:	4463      	add	r3, ip
 800b4b8:	9319      	str	r3, [sp, #100]	; 0x64
 800b4ba:	0029      	movs	r1, r5
 800b4bc:	0020      	movs	r0, r4
 800b4be:	f7f7 fb41 	bl	8002b44 <__aeabi_d2iz>
 800b4c2:	9017      	str	r0, [sp, #92]	; 0x5c
 800b4c4:	f7f7 fb74 	bl	8002bb0 <__aeabi_i2d>
 800b4c8:	0002      	movs	r2, r0
 800b4ca:	000b      	movs	r3, r1
 800b4cc:	0020      	movs	r0, r4
 800b4ce:	0029      	movs	r1, r5
 800b4d0:	f7f6 ffa6 	bl	8002420 <__aeabi_dsub>
 800b4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4d8:	3301      	adds	r3, #1
 800b4da:	9307      	str	r3, [sp, #28]
 800b4dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4de:	0004      	movs	r4, r0
 800b4e0:	3330      	adds	r3, #48	; 0x30
 800b4e2:	7013      	strb	r3, [r2, #0]
 800b4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e8:	000d      	movs	r5, r1
 800b4ea:	f7f7 fc77 	bl	8002ddc <__aeabi_dcmplt>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d175      	bne.n	800b5de <_dtoa_r+0x686>
 800b4f2:	0022      	movs	r2, r4
 800b4f4:	002b      	movs	r3, r5
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	493f      	ldr	r1, [pc, #252]	; (800b5f8 <_dtoa_r+0x6a0>)
 800b4fa:	f7f6 ff91 	bl	8002420 <__aeabi_dsub>
 800b4fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b502:	f7f7 fc6b 	bl	8002ddc <__aeabi_dcmplt>
 800b506:	2800      	cmp	r0, #0
 800b508:	d000      	beq.n	800b50c <_dtoa_r+0x5b4>
 800b50a:	e0d1      	b.n	800b6b0 <_dtoa_r+0x758>
 800b50c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b50e:	9a07      	ldr	r2, [sp, #28]
 800b510:	4293      	cmp	r3, r2
 800b512:	d100      	bne.n	800b516 <_dtoa_r+0x5be>
 800b514:	e770      	b.n	800b3f8 <_dtoa_r+0x4a0>
 800b516:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b51a:	2200      	movs	r2, #0
 800b51c:	4b37      	ldr	r3, [pc, #220]	; (800b5fc <_dtoa_r+0x6a4>)
 800b51e:	f7f6 fd13 	bl	8001f48 <__aeabi_dmul>
 800b522:	4b36      	ldr	r3, [pc, #216]	; (800b5fc <_dtoa_r+0x6a4>)
 800b524:	900a      	str	r0, [sp, #40]	; 0x28
 800b526:	910b      	str	r1, [sp, #44]	; 0x2c
 800b528:	2200      	movs	r2, #0
 800b52a:	0020      	movs	r0, r4
 800b52c:	0029      	movs	r1, r5
 800b52e:	f7f6 fd0b 	bl	8001f48 <__aeabi_dmul>
 800b532:	9b07      	ldr	r3, [sp, #28]
 800b534:	0004      	movs	r4, r0
 800b536:	000d      	movs	r5, r1
 800b538:	9310      	str	r3, [sp, #64]	; 0x40
 800b53a:	e7be      	b.n	800b4ba <_dtoa_r+0x562>
 800b53c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b53e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b540:	f7f6 fd02 	bl	8001f48 <__aeabi_dmul>
 800b544:	9a05      	ldr	r2, [sp, #20]
 800b546:	9b05      	ldr	r3, [sp, #20]
 800b548:	4694      	mov	ip, r2
 800b54a:	930a      	str	r3, [sp, #40]	; 0x28
 800b54c:	9b07      	ldr	r3, [sp, #28]
 800b54e:	9010      	str	r0, [sp, #64]	; 0x40
 800b550:	9111      	str	r1, [sp, #68]	; 0x44
 800b552:	4463      	add	r3, ip
 800b554:	9319      	str	r3, [sp, #100]	; 0x64
 800b556:	0029      	movs	r1, r5
 800b558:	0020      	movs	r0, r4
 800b55a:	f7f7 faf3 	bl	8002b44 <__aeabi_d2iz>
 800b55e:	9017      	str	r0, [sp, #92]	; 0x5c
 800b560:	f7f7 fb26 	bl	8002bb0 <__aeabi_i2d>
 800b564:	0002      	movs	r2, r0
 800b566:	000b      	movs	r3, r1
 800b568:	0020      	movs	r0, r4
 800b56a:	0029      	movs	r1, r5
 800b56c:	f7f6 ff58 	bl	8002420 <__aeabi_dsub>
 800b570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b574:	3330      	adds	r3, #48	; 0x30
 800b576:	7013      	strb	r3, [r2, #0]
 800b578:	0013      	movs	r3, r2
 800b57a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b57c:	3301      	adds	r3, #1
 800b57e:	0004      	movs	r4, r0
 800b580:	000d      	movs	r5, r1
 800b582:	930a      	str	r3, [sp, #40]	; 0x28
 800b584:	4293      	cmp	r3, r2
 800b586:	d12c      	bne.n	800b5e2 <_dtoa_r+0x68a>
 800b588:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b58a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b58c:	9a05      	ldr	r2, [sp, #20]
 800b58e:	9b07      	ldr	r3, [sp, #28]
 800b590:	4694      	mov	ip, r2
 800b592:	4463      	add	r3, ip
 800b594:	2200      	movs	r2, #0
 800b596:	9307      	str	r3, [sp, #28]
 800b598:	4b1d      	ldr	r3, [pc, #116]	; (800b610 <_dtoa_r+0x6b8>)
 800b59a:	f7f5 fe83 	bl	80012a4 <__aeabi_dadd>
 800b59e:	0002      	movs	r2, r0
 800b5a0:	000b      	movs	r3, r1
 800b5a2:	0020      	movs	r0, r4
 800b5a4:	0029      	movs	r1, r5
 800b5a6:	f7f7 fc2d 	bl	8002e04 <__aeabi_dcmpgt>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d000      	beq.n	800b5b0 <_dtoa_r+0x658>
 800b5ae:	e07f      	b.n	800b6b0 <_dtoa_r+0x758>
 800b5b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	4916      	ldr	r1, [pc, #88]	; (800b610 <_dtoa_r+0x6b8>)
 800b5b8:	f7f6 ff32 	bl	8002420 <__aeabi_dsub>
 800b5bc:	0002      	movs	r2, r0
 800b5be:	000b      	movs	r3, r1
 800b5c0:	0020      	movs	r0, r4
 800b5c2:	0029      	movs	r1, r5
 800b5c4:	f7f7 fc0a 	bl	8002ddc <__aeabi_dcmplt>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d100      	bne.n	800b5ce <_dtoa_r+0x676>
 800b5cc:	e714      	b.n	800b3f8 <_dtoa_r+0x4a0>
 800b5ce:	9b07      	ldr	r3, [sp, #28]
 800b5d0:	001a      	movs	r2, r3
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	9207      	str	r2, [sp, #28]
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	2a30      	cmp	r2, #48	; 0x30
 800b5da:	d0f8      	beq.n	800b5ce <_dtoa_r+0x676>
 800b5dc:	9307      	str	r3, [sp, #28]
 800b5de:	9602      	str	r6, [sp, #8]
 800b5e0:	e054      	b.n	800b68c <_dtoa_r+0x734>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <_dtoa_r+0x6a4>)
 800b5e6:	f7f6 fcaf 	bl	8001f48 <__aeabi_dmul>
 800b5ea:	0004      	movs	r4, r0
 800b5ec:	000d      	movs	r5, r1
 800b5ee:	e7b2      	b.n	800b556 <_dtoa_r+0x5fe>
 800b5f0:	0800f088 	.word	0x0800f088
 800b5f4:	0800f060 	.word	0x0800f060
 800b5f8:	3ff00000 	.word	0x3ff00000
 800b5fc:	40240000 	.word	0x40240000
 800b600:	401c0000 	.word	0x401c0000
 800b604:	fcc00000 	.word	0xfcc00000
 800b608:	40140000 	.word	0x40140000
 800b60c:	7cc00000 	.word	0x7cc00000
 800b610:	3fe00000 	.word	0x3fe00000
 800b614:	9b06      	ldr	r3, [sp, #24]
 800b616:	9e05      	ldr	r6, [sp, #20]
 800b618:	3b01      	subs	r3, #1
 800b61a:	199b      	adds	r3, r3, r6
 800b61c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b61e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b620:	930a      	str	r3, [sp, #40]	; 0x28
 800b622:	9a08      	ldr	r2, [sp, #32]
 800b624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b626:	0020      	movs	r0, r4
 800b628:	0029      	movs	r1, r5
 800b62a:	f7f6 f9a5 	bl	8001978 <__aeabi_ddiv>
 800b62e:	f7f7 fa89 	bl	8002b44 <__aeabi_d2iz>
 800b632:	9006      	str	r0, [sp, #24]
 800b634:	f7f7 fabc 	bl	8002bb0 <__aeabi_i2d>
 800b638:	9a08      	ldr	r2, [sp, #32]
 800b63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63c:	f7f6 fc84 	bl	8001f48 <__aeabi_dmul>
 800b640:	0002      	movs	r2, r0
 800b642:	000b      	movs	r3, r1
 800b644:	0020      	movs	r0, r4
 800b646:	0029      	movs	r1, r5
 800b648:	f7f6 feea 	bl	8002420 <__aeabi_dsub>
 800b64c:	0033      	movs	r3, r6
 800b64e:	9a06      	ldr	r2, [sp, #24]
 800b650:	3601      	adds	r6, #1
 800b652:	3230      	adds	r2, #48	; 0x30
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b658:	9607      	str	r6, [sp, #28]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d139      	bne.n	800b6d2 <_dtoa_r+0x77a>
 800b65e:	0002      	movs	r2, r0
 800b660:	000b      	movs	r3, r1
 800b662:	f7f5 fe1f 	bl	80012a4 <__aeabi_dadd>
 800b666:	9a08      	ldr	r2, [sp, #32]
 800b668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66a:	0004      	movs	r4, r0
 800b66c:	000d      	movs	r5, r1
 800b66e:	f7f7 fbc9 	bl	8002e04 <__aeabi_dcmpgt>
 800b672:	2800      	cmp	r0, #0
 800b674:	d11b      	bne.n	800b6ae <_dtoa_r+0x756>
 800b676:	9a08      	ldr	r2, [sp, #32]
 800b678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67a:	0020      	movs	r0, r4
 800b67c:	0029      	movs	r1, r5
 800b67e:	f7f7 fba7 	bl	8002dd0 <__aeabi_dcmpeq>
 800b682:	2800      	cmp	r0, #0
 800b684:	d002      	beq.n	800b68c <_dtoa_r+0x734>
 800b686:	9b06      	ldr	r3, [sp, #24]
 800b688:	07db      	lsls	r3, r3, #31
 800b68a:	d410      	bmi.n	800b6ae <_dtoa_r+0x756>
 800b68c:	0038      	movs	r0, r7
 800b68e:	9904      	ldr	r1, [sp, #16]
 800b690:	f7fe fb0c 	bl	8009cac <_Bfree>
 800b694:	2300      	movs	r3, #0
 800b696:	9a07      	ldr	r2, [sp, #28]
 800b698:	9802      	ldr	r0, [sp, #8]
 800b69a:	7013      	strb	r3, [r2, #0]
 800b69c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b69e:	3001      	adds	r0, #1
 800b6a0:	6018      	str	r0, [r3, #0]
 800b6a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d100      	bne.n	800b6aa <_dtoa_r+0x752>
 800b6a8:	e4a3      	b.n	800aff2 <_dtoa_r+0x9a>
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	e4a1      	b.n	800aff2 <_dtoa_r+0x9a>
 800b6ae:	9e02      	ldr	r6, [sp, #8]
 800b6b0:	9b07      	ldr	r3, [sp, #28]
 800b6b2:	9307      	str	r3, [sp, #28]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	2a39      	cmp	r2, #57	; 0x39
 800b6ba:	d106      	bne.n	800b6ca <_dtoa_r+0x772>
 800b6bc:	9a05      	ldr	r2, [sp, #20]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d1f7      	bne.n	800b6b2 <_dtoa_r+0x75a>
 800b6c2:	2230      	movs	r2, #48	; 0x30
 800b6c4:	9905      	ldr	r1, [sp, #20]
 800b6c6:	3601      	adds	r6, #1
 800b6c8:	700a      	strb	r2, [r1, #0]
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	3201      	adds	r2, #1
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	e785      	b.n	800b5de <_dtoa_r+0x686>
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	4bad      	ldr	r3, [pc, #692]	; (800b98c <_dtoa_r+0xa34>)
 800b6d6:	f7f6 fc37 	bl	8001f48 <__aeabi_dmul>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2300      	movs	r3, #0
 800b6de:	0004      	movs	r4, r0
 800b6e0:	000d      	movs	r5, r1
 800b6e2:	f7f7 fb75 	bl	8002dd0 <__aeabi_dcmpeq>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d09b      	beq.n	800b622 <_dtoa_r+0x6ca>
 800b6ea:	e7cf      	b.n	800b68c <_dtoa_r+0x734>
 800b6ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	d100      	bne.n	800b6f4 <_dtoa_r+0x79c>
 800b6f2:	e082      	b.n	800b7fa <_dtoa_r+0x8a2>
 800b6f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b6f6:	2a01      	cmp	r2, #1
 800b6f8:	dc66      	bgt.n	800b7c8 <_dtoa_r+0x870>
 800b6fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	d05f      	beq.n	800b7c0 <_dtoa_r+0x868>
 800b700:	4aa3      	ldr	r2, [pc, #652]	; (800b990 <_dtoa_r+0xa38>)
 800b702:	189b      	adds	r3, r3, r2
 800b704:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b706:	9c08      	ldr	r4, [sp, #32]
 800b708:	9a08      	ldr	r2, [sp, #32]
 800b70a:	2101      	movs	r1, #1
 800b70c:	18d2      	adds	r2, r2, r3
 800b70e:	9208      	str	r2, [sp, #32]
 800b710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b712:	0038      	movs	r0, r7
 800b714:	18d3      	adds	r3, r2, r3
 800b716:	930d      	str	r3, [sp, #52]	; 0x34
 800b718:	f7fe fb78 	bl	8009e0c <__i2b>
 800b71c:	0005      	movs	r5, r0
 800b71e:	2c00      	cmp	r4, #0
 800b720:	dd0e      	ble.n	800b740 <_dtoa_r+0x7e8>
 800b722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd0b      	ble.n	800b740 <_dtoa_r+0x7e8>
 800b728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b72a:	0023      	movs	r3, r4
 800b72c:	4294      	cmp	r4, r2
 800b72e:	dd00      	ble.n	800b732 <_dtoa_r+0x7da>
 800b730:	0013      	movs	r3, r2
 800b732:	9a08      	ldr	r2, [sp, #32]
 800b734:	1ae4      	subs	r4, r4, r3
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	9208      	str	r2, [sp, #32]
 800b73a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	930d      	str	r3, [sp, #52]	; 0x34
 800b740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b742:	2b00      	cmp	r3, #0
 800b744:	d01f      	beq.n	800b786 <_dtoa_r+0x82e>
 800b746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d05a      	beq.n	800b802 <_dtoa_r+0x8aa>
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	dd11      	ble.n	800b774 <_dtoa_r+0x81c>
 800b750:	0029      	movs	r1, r5
 800b752:	0032      	movs	r2, r6
 800b754:	0038      	movs	r0, r7
 800b756:	f7fe fc1f 	bl	8009f98 <__pow5mult>
 800b75a:	9a04      	ldr	r2, [sp, #16]
 800b75c:	0001      	movs	r1, r0
 800b75e:	0005      	movs	r5, r0
 800b760:	0038      	movs	r0, r7
 800b762:	f7fe fb69 	bl	8009e38 <__multiply>
 800b766:	9904      	ldr	r1, [sp, #16]
 800b768:	9007      	str	r0, [sp, #28]
 800b76a:	0038      	movs	r0, r7
 800b76c:	f7fe fa9e 	bl	8009cac <_Bfree>
 800b770:	9b07      	ldr	r3, [sp, #28]
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b776:	1b9a      	subs	r2, r3, r6
 800b778:	42b3      	cmp	r3, r6
 800b77a:	d004      	beq.n	800b786 <_dtoa_r+0x82e>
 800b77c:	0038      	movs	r0, r7
 800b77e:	9904      	ldr	r1, [sp, #16]
 800b780:	f7fe fc0a 	bl	8009f98 <__pow5mult>
 800b784:	9004      	str	r0, [sp, #16]
 800b786:	2101      	movs	r1, #1
 800b788:	0038      	movs	r0, r7
 800b78a:	f7fe fb3f 	bl	8009e0c <__i2b>
 800b78e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b790:	0006      	movs	r6, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	dd37      	ble.n	800b806 <_dtoa_r+0x8ae>
 800b796:	001a      	movs	r2, r3
 800b798:	0001      	movs	r1, r0
 800b79a:	0038      	movs	r0, r7
 800b79c:	f7fe fbfc 	bl	8009f98 <__pow5mult>
 800b7a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7a2:	0006      	movs	r6, r0
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	dd33      	ble.n	800b810 <_dtoa_r+0x8b8>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9307      	str	r3, [sp, #28]
 800b7ac:	6933      	ldr	r3, [r6, #16]
 800b7ae:	3303      	adds	r3, #3
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	18f3      	adds	r3, r6, r3
 800b7b4:	6858      	ldr	r0, [r3, #4]
 800b7b6:	f7fe fae1 	bl	8009d7c <__hi0bits>
 800b7ba:	2320      	movs	r3, #32
 800b7bc:	1a18      	subs	r0, r3, r0
 800b7be:	e03f      	b.n	800b840 <_dtoa_r+0x8e8>
 800b7c0:	2336      	movs	r3, #54	; 0x36
 800b7c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b7c4:	1a9b      	subs	r3, r3, r2
 800b7c6:	e79d      	b.n	800b704 <_dtoa_r+0x7ac>
 800b7c8:	9b06      	ldr	r3, [sp, #24]
 800b7ca:	1e5e      	subs	r6, r3, #1
 800b7cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7ce:	42b3      	cmp	r3, r6
 800b7d0:	db08      	blt.n	800b7e4 <_dtoa_r+0x88c>
 800b7d2:	1b9e      	subs	r6, r3, r6
 800b7d4:	9b06      	ldr	r3, [sp, #24]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da0c      	bge.n	800b7f4 <_dtoa_r+0x89c>
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	9a06      	ldr	r2, [sp, #24]
 800b7de:	1a9c      	subs	r4, r3, r2
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	e791      	b.n	800b708 <_dtoa_r+0x7b0>
 800b7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7e8:	1af3      	subs	r3, r6, r3
 800b7ea:	18d3      	adds	r3, r2, r3
 800b7ec:	960e      	str	r6, [sp, #56]	; 0x38
 800b7ee:	9314      	str	r3, [sp, #80]	; 0x50
 800b7f0:	2600      	movs	r6, #0
 800b7f2:	e7ef      	b.n	800b7d4 <_dtoa_r+0x87c>
 800b7f4:	9c08      	ldr	r4, [sp, #32]
 800b7f6:	9b06      	ldr	r3, [sp, #24]
 800b7f8:	e786      	b.n	800b708 <_dtoa_r+0x7b0>
 800b7fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b7fc:	9c08      	ldr	r4, [sp, #32]
 800b7fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b800:	e78d      	b.n	800b71e <_dtoa_r+0x7c6>
 800b802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b804:	e7ba      	b.n	800b77c <_dtoa_r+0x824>
 800b806:	2300      	movs	r3, #0
 800b808:	9307      	str	r3, [sp, #28]
 800b80a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	dc13      	bgt.n	800b838 <_dtoa_r+0x8e0>
 800b810:	2300      	movs	r3, #0
 800b812:	9307      	str	r3, [sp, #28]
 800b814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10e      	bne.n	800b838 <_dtoa_r+0x8e0>
 800b81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b81c:	031b      	lsls	r3, r3, #12
 800b81e:	d10b      	bne.n	800b838 <_dtoa_r+0x8e0>
 800b820:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b824:	4213      	tst	r3, r2
 800b826:	d007      	beq.n	800b838 <_dtoa_r+0x8e0>
 800b828:	9b08      	ldr	r3, [sp, #32]
 800b82a:	3301      	adds	r3, #1
 800b82c:	9308      	str	r3, [sp, #32]
 800b82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b830:	3301      	adds	r3, #1
 800b832:	930d      	str	r3, [sp, #52]	; 0x34
 800b834:	2301      	movs	r3, #1
 800b836:	9307      	str	r3, [sp, #28]
 800b838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b83a:	2001      	movs	r0, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1b5      	bne.n	800b7ac <_dtoa_r+0x854>
 800b840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b842:	221f      	movs	r2, #31
 800b844:	1818      	adds	r0, r3, r0
 800b846:	0003      	movs	r3, r0
 800b848:	4013      	ands	r3, r2
 800b84a:	4210      	tst	r0, r2
 800b84c:	d046      	beq.n	800b8dc <_dtoa_r+0x984>
 800b84e:	3201      	adds	r2, #1
 800b850:	1ad2      	subs	r2, r2, r3
 800b852:	2a04      	cmp	r2, #4
 800b854:	dd3f      	ble.n	800b8d6 <_dtoa_r+0x97e>
 800b856:	221c      	movs	r2, #28
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	9a08      	ldr	r2, [sp, #32]
 800b85c:	18e4      	adds	r4, r4, r3
 800b85e:	18d2      	adds	r2, r2, r3
 800b860:	9208      	str	r2, [sp, #32]
 800b862:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b864:	18d3      	adds	r3, r2, r3
 800b866:	930d      	str	r3, [sp, #52]	; 0x34
 800b868:	9b08      	ldr	r3, [sp, #32]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	dd05      	ble.n	800b87a <_dtoa_r+0x922>
 800b86e:	001a      	movs	r2, r3
 800b870:	0038      	movs	r0, r7
 800b872:	9904      	ldr	r1, [sp, #16]
 800b874:	f7fe fbec 	bl	800a050 <__lshift>
 800b878:	9004      	str	r0, [sp, #16]
 800b87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dd05      	ble.n	800b88c <_dtoa_r+0x934>
 800b880:	0031      	movs	r1, r6
 800b882:	001a      	movs	r2, r3
 800b884:	0038      	movs	r0, r7
 800b886:	f7fe fbe3 	bl	800a050 <__lshift>
 800b88a:	0006      	movs	r6, r0
 800b88c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d026      	beq.n	800b8e0 <_dtoa_r+0x988>
 800b892:	0031      	movs	r1, r6
 800b894:	9804      	ldr	r0, [sp, #16]
 800b896:	f7fe fc4b 	bl	800a130 <__mcmp>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	da20      	bge.n	800b8e0 <_dtoa_r+0x988>
 800b89e:	9b02      	ldr	r3, [sp, #8]
 800b8a0:	220a      	movs	r2, #10
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	9302      	str	r3, [sp, #8]
 800b8a6:	0038      	movs	r0, r7
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9904      	ldr	r1, [sp, #16]
 800b8ac:	f7fe fa22 	bl	8009cf4 <__multadd>
 800b8b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8b2:	9004      	str	r0, [sp, #16]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d100      	bne.n	800b8ba <_dtoa_r+0x962>
 800b8b8:	e160      	b.n	800bb7c <_dtoa_r+0xc24>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	0029      	movs	r1, r5
 800b8be:	220a      	movs	r2, #10
 800b8c0:	0038      	movs	r0, r7
 800b8c2:	f7fe fa17 	bl	8009cf4 <__multadd>
 800b8c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8c8:	0005      	movs	r5, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dc47      	bgt.n	800b95e <_dtoa_r+0xa06>
 800b8ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	dc0d      	bgt.n	800b8f0 <_dtoa_r+0x998>
 800b8d4:	e043      	b.n	800b95e <_dtoa_r+0xa06>
 800b8d6:	2a04      	cmp	r2, #4
 800b8d8:	d0c6      	beq.n	800b868 <_dtoa_r+0x910>
 800b8da:	0013      	movs	r3, r2
 800b8dc:	331c      	adds	r3, #28
 800b8de:	e7bc      	b.n	800b85a <_dtoa_r+0x902>
 800b8e0:	9b06      	ldr	r3, [sp, #24]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	dc35      	bgt.n	800b952 <_dtoa_r+0x9fa>
 800b8e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	dd32      	ble.n	800b952 <_dtoa_r+0x9fa>
 800b8ec:	9b06      	ldr	r3, [sp, #24]
 800b8ee:	930c      	str	r3, [sp, #48]	; 0x30
 800b8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10c      	bne.n	800b910 <_dtoa_r+0x9b8>
 800b8f6:	0031      	movs	r1, r6
 800b8f8:	2205      	movs	r2, #5
 800b8fa:	0038      	movs	r0, r7
 800b8fc:	f7fe f9fa 	bl	8009cf4 <__multadd>
 800b900:	0006      	movs	r6, r0
 800b902:	0001      	movs	r1, r0
 800b904:	9804      	ldr	r0, [sp, #16]
 800b906:	f7fe fc13 	bl	800a130 <__mcmp>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	dd00      	ble.n	800b910 <_dtoa_r+0x9b8>
 800b90e:	e59f      	b.n	800b450 <_dtoa_r+0x4f8>
 800b910:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b912:	43db      	mvns	r3, r3
 800b914:	9302      	str	r3, [sp, #8]
 800b916:	9b05      	ldr	r3, [sp, #20]
 800b918:	9307      	str	r3, [sp, #28]
 800b91a:	2400      	movs	r4, #0
 800b91c:	0031      	movs	r1, r6
 800b91e:	0038      	movs	r0, r7
 800b920:	f7fe f9c4 	bl	8009cac <_Bfree>
 800b924:	2d00      	cmp	r5, #0
 800b926:	d100      	bne.n	800b92a <_dtoa_r+0x9d2>
 800b928:	e6b0      	b.n	800b68c <_dtoa_r+0x734>
 800b92a:	2c00      	cmp	r4, #0
 800b92c:	d005      	beq.n	800b93a <_dtoa_r+0x9e2>
 800b92e:	42ac      	cmp	r4, r5
 800b930:	d003      	beq.n	800b93a <_dtoa_r+0x9e2>
 800b932:	0021      	movs	r1, r4
 800b934:	0038      	movs	r0, r7
 800b936:	f7fe f9b9 	bl	8009cac <_Bfree>
 800b93a:	0029      	movs	r1, r5
 800b93c:	0038      	movs	r0, r7
 800b93e:	f7fe f9b5 	bl	8009cac <_Bfree>
 800b942:	e6a3      	b.n	800b68c <_dtoa_r+0x734>
 800b944:	2600      	movs	r6, #0
 800b946:	0035      	movs	r5, r6
 800b948:	e7e2      	b.n	800b910 <_dtoa_r+0x9b8>
 800b94a:	9602      	str	r6, [sp, #8]
 800b94c:	9e07      	ldr	r6, [sp, #28]
 800b94e:	0035      	movs	r5, r6
 800b950:	e57e      	b.n	800b450 <_dtoa_r+0x4f8>
 800b952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d100      	bne.n	800b95a <_dtoa_r+0xa02>
 800b958:	e0c8      	b.n	800baec <_dtoa_r+0xb94>
 800b95a:	9b06      	ldr	r3, [sp, #24]
 800b95c:	930c      	str	r3, [sp, #48]	; 0x30
 800b95e:	2c00      	cmp	r4, #0
 800b960:	dd05      	ble.n	800b96e <_dtoa_r+0xa16>
 800b962:	0029      	movs	r1, r5
 800b964:	0022      	movs	r2, r4
 800b966:	0038      	movs	r0, r7
 800b968:	f7fe fb72 	bl	800a050 <__lshift>
 800b96c:	0005      	movs	r5, r0
 800b96e:	9b07      	ldr	r3, [sp, #28]
 800b970:	0028      	movs	r0, r5
 800b972:	2b00      	cmp	r3, #0
 800b974:	d01f      	beq.n	800b9b6 <_dtoa_r+0xa5e>
 800b976:	0038      	movs	r0, r7
 800b978:	6869      	ldr	r1, [r5, #4]
 800b97a:	f7fe f953 	bl	8009c24 <_Balloc>
 800b97e:	1e04      	subs	r4, r0, #0
 800b980:	d10c      	bne.n	800b99c <_dtoa_r+0xa44>
 800b982:	0002      	movs	r2, r0
 800b984:	4b03      	ldr	r3, [pc, #12]	; (800b994 <_dtoa_r+0xa3c>)
 800b986:	4904      	ldr	r1, [pc, #16]	; (800b998 <_dtoa_r+0xa40>)
 800b988:	f7ff fafb 	bl	800af82 <_dtoa_r+0x2a>
 800b98c:	40240000 	.word	0x40240000
 800b990:	00000433 	.word	0x00000433
 800b994:	0800f04b 	.word	0x0800f04b
 800b998:	000002ea 	.word	0x000002ea
 800b99c:	0029      	movs	r1, r5
 800b99e:	692b      	ldr	r3, [r5, #16]
 800b9a0:	310c      	adds	r1, #12
 800b9a2:	1c9a      	adds	r2, r3, #2
 800b9a4:	0092      	lsls	r2, r2, #2
 800b9a6:	300c      	adds	r0, #12
 800b9a8:	f000 fb3d 	bl	800c026 <memcpy>
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	0021      	movs	r1, r4
 800b9b0:	0038      	movs	r0, r7
 800b9b2:	f7fe fb4d 	bl	800a050 <__lshift>
 800b9b6:	002c      	movs	r4, r5
 800b9b8:	0005      	movs	r5, r0
 800b9ba:	9b05      	ldr	r3, [sp, #20]
 800b9bc:	9308      	str	r3, [sp, #32]
 800b9be:	0031      	movs	r1, r6
 800b9c0:	9804      	ldr	r0, [sp, #16]
 800b9c2:	f7ff fa3e 	bl	800ae42 <quorem>
 800b9c6:	0003      	movs	r3, r0
 800b9c8:	0021      	movs	r1, r4
 800b9ca:	3330      	adds	r3, #48	; 0x30
 800b9cc:	900e      	str	r0, [sp, #56]	; 0x38
 800b9ce:	9804      	ldr	r0, [sp, #16]
 800b9d0:	9306      	str	r3, [sp, #24]
 800b9d2:	f7fe fbad 	bl	800a130 <__mcmp>
 800b9d6:	002a      	movs	r2, r5
 800b9d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b9da:	0031      	movs	r1, r6
 800b9dc:	0038      	movs	r0, r7
 800b9de:	f7fe fbc3 	bl	800a168 <__mdiff>
 800b9e2:	68c3      	ldr	r3, [r0, #12]
 800b9e4:	9007      	str	r0, [sp, #28]
 800b9e6:	9310      	str	r3, [sp, #64]	; 0x40
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	930d      	str	r3, [sp, #52]	; 0x34
 800b9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d104      	bne.n	800b9fc <_dtoa_r+0xaa4>
 800b9f2:	0001      	movs	r1, r0
 800b9f4:	9804      	ldr	r0, [sp, #16]
 800b9f6:	f7fe fb9b 	bl	800a130 <__mcmp>
 800b9fa:	900d      	str	r0, [sp, #52]	; 0x34
 800b9fc:	0038      	movs	r0, r7
 800b9fe:	9907      	ldr	r1, [sp, #28]
 800ba00:	f7fe f954 	bl	8009cac <_Bfree>
 800ba04:	2301      	movs	r3, #1
 800ba06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba0a:	4018      	ands	r0, r3
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	9307      	str	r3, [sp, #28]
 800ba12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba14:	4313      	orrs	r3, r2
 800ba16:	4303      	orrs	r3, r0
 800ba18:	d10c      	bne.n	800ba34 <_dtoa_r+0xadc>
 800ba1a:	9b06      	ldr	r3, [sp, #24]
 800ba1c:	2b39      	cmp	r3, #57	; 0x39
 800ba1e:	d025      	beq.n	800ba6c <_dtoa_r+0xb14>
 800ba20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd02      	ble.n	800ba2c <_dtoa_r+0xad4>
 800ba26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba28:	3331      	adds	r3, #49	; 0x31
 800ba2a:	9306      	str	r3, [sp, #24]
 800ba2c:	9b08      	ldr	r3, [sp, #32]
 800ba2e:	9a06      	ldr	r2, [sp, #24]
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	e773      	b.n	800b91c <_dtoa_r+0x9c4>
 800ba34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	db03      	blt.n	800ba42 <_dtoa_r+0xaea>
 800ba3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	4303      	orrs	r3, r0
 800ba40:	d11f      	bne.n	800ba82 <_dtoa_r+0xb2a>
 800ba42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	ddf1      	ble.n	800ba2c <_dtoa_r+0xad4>
 800ba48:	9904      	ldr	r1, [sp, #16]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	0038      	movs	r0, r7
 800ba4e:	f7fe faff 	bl	800a050 <__lshift>
 800ba52:	0031      	movs	r1, r6
 800ba54:	9004      	str	r0, [sp, #16]
 800ba56:	f7fe fb6b 	bl	800a130 <__mcmp>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	dc03      	bgt.n	800ba66 <_dtoa_r+0xb0e>
 800ba5e:	d1e5      	bne.n	800ba2c <_dtoa_r+0xad4>
 800ba60:	9b06      	ldr	r3, [sp, #24]
 800ba62:	07db      	lsls	r3, r3, #31
 800ba64:	d5e2      	bpl.n	800ba2c <_dtoa_r+0xad4>
 800ba66:	9b06      	ldr	r3, [sp, #24]
 800ba68:	2b39      	cmp	r3, #57	; 0x39
 800ba6a:	d1dc      	bne.n	800ba26 <_dtoa_r+0xace>
 800ba6c:	2339      	movs	r3, #57	; 0x39
 800ba6e:	9a08      	ldr	r2, [sp, #32]
 800ba70:	7013      	strb	r3, [r2, #0]
 800ba72:	9b07      	ldr	r3, [sp, #28]
 800ba74:	9307      	str	r3, [sp, #28]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	781a      	ldrb	r2, [r3, #0]
 800ba7a:	2a39      	cmp	r2, #57	; 0x39
 800ba7c:	d06c      	beq.n	800bb58 <_dtoa_r+0xc00>
 800ba7e:	3201      	adds	r2, #1
 800ba80:	e7d6      	b.n	800ba30 <_dtoa_r+0xad8>
 800ba82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dd07      	ble.n	800ba98 <_dtoa_r+0xb40>
 800ba88:	9b06      	ldr	r3, [sp, #24]
 800ba8a:	2b39      	cmp	r3, #57	; 0x39
 800ba8c:	d0ee      	beq.n	800ba6c <_dtoa_r+0xb14>
 800ba8e:	9b06      	ldr	r3, [sp, #24]
 800ba90:	9a08      	ldr	r2, [sp, #32]
 800ba92:	3301      	adds	r3, #1
 800ba94:	7013      	strb	r3, [r2, #0]
 800ba96:	e741      	b.n	800b91c <_dtoa_r+0x9c4>
 800ba98:	9b08      	ldr	r3, [sp, #32]
 800ba9a:	9a06      	ldr	r2, [sp, #24]
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	2301      	movs	r3, #1
 800baa0:	9a05      	ldr	r2, [sp, #20]
 800baa2:	1a9b      	subs	r3, r3, r2
 800baa4:	9a08      	ldr	r2, [sp, #32]
 800baa6:	189b      	adds	r3, r3, r2
 800baa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800baaa:	429a      	cmp	r2, r3
 800baac:	d03e      	beq.n	800bb2c <_dtoa_r+0xbd4>
 800baae:	2300      	movs	r3, #0
 800bab0:	220a      	movs	r2, #10
 800bab2:	9904      	ldr	r1, [sp, #16]
 800bab4:	0038      	movs	r0, r7
 800bab6:	f7fe f91d 	bl	8009cf4 <__multadd>
 800baba:	2300      	movs	r3, #0
 800babc:	9004      	str	r0, [sp, #16]
 800babe:	220a      	movs	r2, #10
 800bac0:	0021      	movs	r1, r4
 800bac2:	0038      	movs	r0, r7
 800bac4:	42ac      	cmp	r4, r5
 800bac6:	d106      	bne.n	800bad6 <_dtoa_r+0xb7e>
 800bac8:	f7fe f914 	bl	8009cf4 <__multadd>
 800bacc:	0004      	movs	r4, r0
 800bace:	0005      	movs	r5, r0
 800bad0:	9b07      	ldr	r3, [sp, #28]
 800bad2:	9308      	str	r3, [sp, #32]
 800bad4:	e773      	b.n	800b9be <_dtoa_r+0xa66>
 800bad6:	f7fe f90d 	bl	8009cf4 <__multadd>
 800bada:	0029      	movs	r1, r5
 800badc:	0004      	movs	r4, r0
 800bade:	2300      	movs	r3, #0
 800bae0:	220a      	movs	r2, #10
 800bae2:	0038      	movs	r0, r7
 800bae4:	f7fe f906 	bl	8009cf4 <__multadd>
 800bae8:	0005      	movs	r5, r0
 800baea:	e7f1      	b.n	800bad0 <_dtoa_r+0xb78>
 800baec:	9b06      	ldr	r3, [sp, #24]
 800baee:	930c      	str	r3, [sp, #48]	; 0x30
 800baf0:	2400      	movs	r4, #0
 800baf2:	0031      	movs	r1, r6
 800baf4:	9804      	ldr	r0, [sp, #16]
 800baf6:	f7ff f9a4 	bl	800ae42 <quorem>
 800bafa:	9b05      	ldr	r3, [sp, #20]
 800bafc:	3030      	adds	r0, #48	; 0x30
 800bafe:	5518      	strb	r0, [r3, r4]
 800bb00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb02:	3401      	adds	r4, #1
 800bb04:	9006      	str	r0, [sp, #24]
 800bb06:	42a3      	cmp	r3, r4
 800bb08:	dd07      	ble.n	800bb1a <_dtoa_r+0xbc2>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	220a      	movs	r2, #10
 800bb0e:	0038      	movs	r0, r7
 800bb10:	9904      	ldr	r1, [sp, #16]
 800bb12:	f7fe f8ef 	bl	8009cf4 <__multadd>
 800bb16:	9004      	str	r0, [sp, #16]
 800bb18:	e7eb      	b.n	800baf2 <_dtoa_r+0xb9a>
 800bb1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb1c:	2001      	movs	r0, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd00      	ble.n	800bb24 <_dtoa_r+0xbcc>
 800bb22:	0018      	movs	r0, r3
 800bb24:	2400      	movs	r4, #0
 800bb26:	9b05      	ldr	r3, [sp, #20]
 800bb28:	181b      	adds	r3, r3, r0
 800bb2a:	9307      	str	r3, [sp, #28]
 800bb2c:	9904      	ldr	r1, [sp, #16]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	0038      	movs	r0, r7
 800bb32:	f7fe fa8d 	bl	800a050 <__lshift>
 800bb36:	0031      	movs	r1, r6
 800bb38:	9004      	str	r0, [sp, #16]
 800bb3a:	f7fe faf9 	bl	800a130 <__mcmp>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	dc97      	bgt.n	800ba72 <_dtoa_r+0xb1a>
 800bb42:	d102      	bne.n	800bb4a <_dtoa_r+0xbf2>
 800bb44:	9b06      	ldr	r3, [sp, #24]
 800bb46:	07db      	lsls	r3, r3, #31
 800bb48:	d493      	bmi.n	800ba72 <_dtoa_r+0xb1a>
 800bb4a:	9b07      	ldr	r3, [sp, #28]
 800bb4c:	9307      	str	r3, [sp, #28]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	781a      	ldrb	r2, [r3, #0]
 800bb52:	2a30      	cmp	r2, #48	; 0x30
 800bb54:	d0fa      	beq.n	800bb4c <_dtoa_r+0xbf4>
 800bb56:	e6e1      	b.n	800b91c <_dtoa_r+0x9c4>
 800bb58:	9a05      	ldr	r2, [sp, #20]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d18a      	bne.n	800ba74 <_dtoa_r+0xb1c>
 800bb5e:	9b02      	ldr	r3, [sp, #8]
 800bb60:	3301      	adds	r3, #1
 800bb62:	9302      	str	r3, [sp, #8]
 800bb64:	2331      	movs	r3, #49	; 0x31
 800bb66:	e795      	b.n	800ba94 <_dtoa_r+0xb3c>
 800bb68:	4b08      	ldr	r3, [pc, #32]	; (800bb8c <_dtoa_r+0xc34>)
 800bb6a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bb6c:	9305      	str	r3, [sp, #20]
 800bb6e:	4b08      	ldr	r3, [pc, #32]	; (800bb90 <_dtoa_r+0xc38>)
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	d001      	beq.n	800bb78 <_dtoa_r+0xc20>
 800bb74:	f7ff fa3b 	bl	800afee <_dtoa_r+0x96>
 800bb78:	f7ff fa3b 	bl	800aff2 <_dtoa_r+0x9a>
 800bb7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	dcb6      	bgt.n	800baf0 <_dtoa_r+0xb98>
 800bb82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	dd00      	ble.n	800bb8a <_dtoa_r+0xc32>
 800bb88:	e6b2      	b.n	800b8f0 <_dtoa_r+0x998>
 800bb8a:	e7b1      	b.n	800baf0 <_dtoa_r+0xb98>
 800bb8c:	0800f18f 	.word	0x0800f18f
 800bb90:	0800f197 	.word	0x0800f197

0800bb94 <__sflush_r>:
 800bb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb96:	898b      	ldrh	r3, [r1, #12]
 800bb98:	0005      	movs	r5, r0
 800bb9a:	000c      	movs	r4, r1
 800bb9c:	071a      	lsls	r2, r3, #28
 800bb9e:	d45f      	bmi.n	800bc60 <__sflush_r+0xcc>
 800bba0:	684a      	ldr	r2, [r1, #4]
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	dc04      	bgt.n	800bbb0 <__sflush_r+0x1c>
 800bba6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	dc01      	bgt.n	800bbb0 <__sflush_r+0x1c>
 800bbac:	2000      	movs	r0, #0
 800bbae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bbb2:	2f00      	cmp	r7, #0
 800bbb4:	d0fa      	beq.n	800bbac <__sflush_r+0x18>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2180      	movs	r1, #128	; 0x80
 800bbba:	682e      	ldr	r6, [r5, #0]
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	001a      	movs	r2, r3
 800bbc0:	0149      	lsls	r1, r1, #5
 800bbc2:	400a      	ands	r2, r1
 800bbc4:	420b      	tst	r3, r1
 800bbc6:	d034      	beq.n	800bc32 <__sflush_r+0x9e>
 800bbc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	075b      	lsls	r3, r3, #29
 800bbce:	d506      	bpl.n	800bbde <__sflush_r+0x4a>
 800bbd0:	6863      	ldr	r3, [r4, #4]
 800bbd2:	1ac0      	subs	r0, r0, r3
 800bbd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <__sflush_r+0x4a>
 800bbda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbdc:	1ac0      	subs	r0, r0, r3
 800bbde:	0002      	movs	r2, r0
 800bbe0:	6a21      	ldr	r1, [r4, #32]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	0028      	movs	r0, r5
 800bbe6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bbe8:	47b8      	blx	r7
 800bbea:	89a1      	ldrh	r1, [r4, #12]
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d106      	bne.n	800bbfe <__sflush_r+0x6a>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	2b1d      	cmp	r3, #29
 800bbf4:	d831      	bhi.n	800bc5a <__sflush_r+0xc6>
 800bbf6:	4a2c      	ldr	r2, [pc, #176]	; (800bca8 <__sflush_r+0x114>)
 800bbf8:	40da      	lsrs	r2, r3
 800bbfa:	07d3      	lsls	r3, r2, #31
 800bbfc:	d52d      	bpl.n	800bc5a <__sflush_r+0xc6>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6063      	str	r3, [r4, #4]
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	04cb      	lsls	r3, r1, #19
 800bc08:	d505      	bpl.n	800bc16 <__sflush_r+0x82>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	d102      	bne.n	800bc14 <__sflush_r+0x80>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d100      	bne.n	800bc16 <__sflush_r+0x82>
 800bc14:	6560      	str	r0, [r4, #84]	; 0x54
 800bc16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc18:	602e      	str	r6, [r5, #0]
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	d0c6      	beq.n	800bbac <__sflush_r+0x18>
 800bc1e:	0023      	movs	r3, r4
 800bc20:	3344      	adds	r3, #68	; 0x44
 800bc22:	4299      	cmp	r1, r3
 800bc24:	d002      	beq.n	800bc2c <__sflush_r+0x98>
 800bc26:	0028      	movs	r0, r5
 800bc28:	f7fd fd96 	bl	8009758 <_free_r>
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	6360      	str	r0, [r4, #52]	; 0x34
 800bc30:	e7bd      	b.n	800bbae <__sflush_r+0x1a>
 800bc32:	2301      	movs	r3, #1
 800bc34:	0028      	movs	r0, r5
 800bc36:	6a21      	ldr	r1, [r4, #32]
 800bc38:	47b8      	blx	r7
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	d1c5      	bne.n	800bbca <__sflush_r+0x36>
 800bc3e:	682b      	ldr	r3, [r5, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d0c2      	beq.n	800bbca <__sflush_r+0x36>
 800bc44:	2b1d      	cmp	r3, #29
 800bc46:	d001      	beq.n	800bc4c <__sflush_r+0xb8>
 800bc48:	2b16      	cmp	r3, #22
 800bc4a:	d101      	bne.n	800bc50 <__sflush_r+0xbc>
 800bc4c:	602e      	str	r6, [r5, #0]
 800bc4e:	e7ad      	b.n	800bbac <__sflush_r+0x18>
 800bc50:	2340      	movs	r3, #64	; 0x40
 800bc52:	89a2      	ldrh	r2, [r4, #12]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	81a3      	strh	r3, [r4, #12]
 800bc58:	e7a9      	b.n	800bbae <__sflush_r+0x1a>
 800bc5a:	2340      	movs	r3, #64	; 0x40
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	e7fa      	b.n	800bc56 <__sflush_r+0xc2>
 800bc60:	690f      	ldr	r7, [r1, #16]
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	d0a2      	beq.n	800bbac <__sflush_r+0x18>
 800bc66:	680a      	ldr	r2, [r1, #0]
 800bc68:	600f      	str	r7, [r1, #0]
 800bc6a:	1bd2      	subs	r2, r2, r7
 800bc6c:	9201      	str	r2, [sp, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	079b      	lsls	r3, r3, #30
 800bc72:	d100      	bne.n	800bc76 <__sflush_r+0xe2>
 800bc74:	694a      	ldr	r2, [r1, #20]
 800bc76:	60a2      	str	r2, [r4, #8]
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	dc00      	bgt.n	800bc80 <__sflush_r+0xec>
 800bc7e:	e795      	b.n	800bbac <__sflush_r+0x18>
 800bc80:	003a      	movs	r2, r7
 800bc82:	0028      	movs	r0, r5
 800bc84:	9b01      	ldr	r3, [sp, #4]
 800bc86:	6a21      	ldr	r1, [r4, #32]
 800bc88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc8a:	47b0      	blx	r6
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	dc06      	bgt.n	800bc9e <__sflush_r+0x10a>
 800bc90:	2340      	movs	r3, #64	; 0x40
 800bc92:	2001      	movs	r0, #1
 800bc94:	89a2      	ldrh	r2, [r4, #12]
 800bc96:	4240      	negs	r0, r0
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	81a3      	strh	r3, [r4, #12]
 800bc9c:	e787      	b.n	800bbae <__sflush_r+0x1a>
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	183f      	adds	r7, r7, r0
 800bca2:	1a1b      	subs	r3, r3, r0
 800bca4:	9301      	str	r3, [sp, #4]
 800bca6:	e7e7      	b.n	800bc78 <__sflush_r+0xe4>
 800bca8:	20400001 	.word	0x20400001

0800bcac <_fflush_r>:
 800bcac:	690b      	ldr	r3, [r1, #16]
 800bcae:	b570      	push	{r4, r5, r6, lr}
 800bcb0:	0005      	movs	r5, r0
 800bcb2:	000c      	movs	r4, r1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <_fflush_r+0x12>
 800bcb8:	2500      	movs	r5, #0
 800bcba:	0028      	movs	r0, r5
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d004      	beq.n	800bccc <_fflush_r+0x20>
 800bcc2:	6983      	ldr	r3, [r0, #24]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <_fflush_r+0x20>
 800bcc8:	f000 f892 	bl	800bdf0 <__sinit>
 800bccc:	4b14      	ldr	r3, [pc, #80]	; (800bd20 <_fflush_r+0x74>)
 800bcce:	429c      	cmp	r4, r3
 800bcd0:	d11b      	bne.n	800bd0a <_fflush_r+0x5e>
 800bcd2:	686c      	ldr	r4, [r5, #4]
 800bcd4:	220c      	movs	r2, #12
 800bcd6:	5ea3      	ldrsh	r3, [r4, r2]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0ed      	beq.n	800bcb8 <_fflush_r+0xc>
 800bcdc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcde:	07d2      	lsls	r2, r2, #31
 800bce0:	d404      	bmi.n	800bcec <_fflush_r+0x40>
 800bce2:	059b      	lsls	r3, r3, #22
 800bce4:	d402      	bmi.n	800bcec <_fflush_r+0x40>
 800bce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bce8:	f000 f923 	bl	800bf32 <__retarget_lock_acquire_recursive>
 800bcec:	0028      	movs	r0, r5
 800bcee:	0021      	movs	r1, r4
 800bcf0:	f7ff ff50 	bl	800bb94 <__sflush_r>
 800bcf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcf6:	0005      	movs	r5, r0
 800bcf8:	07db      	lsls	r3, r3, #31
 800bcfa:	d4de      	bmi.n	800bcba <_fflush_r+0xe>
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	059b      	lsls	r3, r3, #22
 800bd00:	d4db      	bmi.n	800bcba <_fflush_r+0xe>
 800bd02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd04:	f000 f916 	bl	800bf34 <__retarget_lock_release_recursive>
 800bd08:	e7d7      	b.n	800bcba <_fflush_r+0xe>
 800bd0a:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <_fflush_r+0x78>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	d101      	bne.n	800bd14 <_fflush_r+0x68>
 800bd10:	68ac      	ldr	r4, [r5, #8]
 800bd12:	e7df      	b.n	800bcd4 <_fflush_r+0x28>
 800bd14:	4b04      	ldr	r3, [pc, #16]	; (800bd28 <_fflush_r+0x7c>)
 800bd16:	429c      	cmp	r4, r3
 800bd18:	d1dc      	bne.n	800bcd4 <_fflush_r+0x28>
 800bd1a:	68ec      	ldr	r4, [r5, #12]
 800bd1c:	e7da      	b.n	800bcd4 <_fflush_r+0x28>
 800bd1e:	46c0      	nop			; (mov r8, r8)
 800bd20:	0800f220 	.word	0x0800f220
 800bd24:	0800f240 	.word	0x0800f240
 800bd28:	0800f200 	.word	0x0800f200

0800bd2c <std>:
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	0004      	movs	r4, r0
 800bd32:	6003      	str	r3, [r0, #0]
 800bd34:	6043      	str	r3, [r0, #4]
 800bd36:	6083      	str	r3, [r0, #8]
 800bd38:	8181      	strh	r1, [r0, #12]
 800bd3a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd3c:	0019      	movs	r1, r3
 800bd3e:	81c2      	strh	r2, [r0, #14]
 800bd40:	6103      	str	r3, [r0, #16]
 800bd42:	6143      	str	r3, [r0, #20]
 800bd44:	6183      	str	r3, [r0, #24]
 800bd46:	2208      	movs	r2, #8
 800bd48:	305c      	adds	r0, #92	; 0x5c
 800bd4a:	f7fd fcfd 	bl	8009748 <memset>
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <std+0x38>)
 800bd50:	6263      	str	r3, [r4, #36]	; 0x24
 800bd52:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <std+0x3c>)
 800bd54:	6224      	str	r4, [r4, #32]
 800bd56:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd58:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <std+0x40>)
 800bd5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd5c:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <std+0x44>)
 800bd5e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd60:	bd10      	pop	{r4, pc}
 800bd62:	46c0      	nop			; (mov r8, r8)
 800bd64:	0800c105 	.word	0x0800c105
 800bd68:	0800c12d 	.word	0x0800c12d
 800bd6c:	0800c165 	.word	0x0800c165
 800bd70:	0800c191 	.word	0x0800c191

0800bd74 <_cleanup_r>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	4902      	ldr	r1, [pc, #8]	; (800bd80 <_cleanup_r+0xc>)
 800bd78:	f000 f8ba 	bl	800bef0 <_fwalk_reent>
 800bd7c:	bd10      	pop	{r4, pc}
 800bd7e:	46c0      	nop			; (mov r8, r8)
 800bd80:	0800bcad 	.word	0x0800bcad

0800bd84 <__sfmoreglue>:
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	2568      	movs	r5, #104	; 0x68
 800bd88:	1e4a      	subs	r2, r1, #1
 800bd8a:	4355      	muls	r5, r2
 800bd8c:	000e      	movs	r6, r1
 800bd8e:	0029      	movs	r1, r5
 800bd90:	3174      	adds	r1, #116	; 0x74
 800bd92:	f7fd fd2b 	bl	80097ec <_malloc_r>
 800bd96:	1e04      	subs	r4, r0, #0
 800bd98:	d008      	beq.n	800bdac <__sfmoreglue+0x28>
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	002a      	movs	r2, r5
 800bd9e:	6001      	str	r1, [r0, #0]
 800bda0:	6046      	str	r6, [r0, #4]
 800bda2:	300c      	adds	r0, #12
 800bda4:	60a0      	str	r0, [r4, #8]
 800bda6:	3268      	adds	r2, #104	; 0x68
 800bda8:	f7fd fcce 	bl	8009748 <memset>
 800bdac:	0020      	movs	r0, r4
 800bdae:	bd70      	pop	{r4, r5, r6, pc}

0800bdb0 <__sfp_lock_acquire>:
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	4802      	ldr	r0, [pc, #8]	; (800bdbc <__sfp_lock_acquire+0xc>)
 800bdb4:	f000 f8bd 	bl	800bf32 <__retarget_lock_acquire_recursive>
 800bdb8:	bd10      	pop	{r4, pc}
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	20001310 	.word	0x20001310

0800bdc0 <__sfp_lock_release>:
 800bdc0:	b510      	push	{r4, lr}
 800bdc2:	4802      	ldr	r0, [pc, #8]	; (800bdcc <__sfp_lock_release+0xc>)
 800bdc4:	f000 f8b6 	bl	800bf34 <__retarget_lock_release_recursive>
 800bdc8:	bd10      	pop	{r4, pc}
 800bdca:	46c0      	nop			; (mov r8, r8)
 800bdcc:	20001310 	.word	0x20001310

0800bdd0 <__sinit_lock_acquire>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	4802      	ldr	r0, [pc, #8]	; (800bddc <__sinit_lock_acquire+0xc>)
 800bdd4:	f000 f8ad 	bl	800bf32 <__retarget_lock_acquire_recursive>
 800bdd8:	bd10      	pop	{r4, pc}
 800bdda:	46c0      	nop			; (mov r8, r8)
 800bddc:	2000130b 	.word	0x2000130b

0800bde0 <__sinit_lock_release>:
 800bde0:	b510      	push	{r4, lr}
 800bde2:	4802      	ldr	r0, [pc, #8]	; (800bdec <__sinit_lock_release+0xc>)
 800bde4:	f000 f8a6 	bl	800bf34 <__retarget_lock_release_recursive>
 800bde8:	bd10      	pop	{r4, pc}
 800bdea:	46c0      	nop			; (mov r8, r8)
 800bdec:	2000130b 	.word	0x2000130b

0800bdf0 <__sinit>:
 800bdf0:	b513      	push	{r0, r1, r4, lr}
 800bdf2:	0004      	movs	r4, r0
 800bdf4:	f7ff ffec 	bl	800bdd0 <__sinit_lock_acquire>
 800bdf8:	69a3      	ldr	r3, [r4, #24]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <__sinit+0x14>
 800bdfe:	f7ff ffef 	bl	800bde0 <__sinit_lock_release>
 800be02:	bd13      	pop	{r0, r1, r4, pc}
 800be04:	64a3      	str	r3, [r4, #72]	; 0x48
 800be06:	64e3      	str	r3, [r4, #76]	; 0x4c
 800be08:	6523      	str	r3, [r4, #80]	; 0x50
 800be0a:	4b13      	ldr	r3, [pc, #76]	; (800be58 <__sinit+0x68>)
 800be0c:	4a13      	ldr	r2, [pc, #76]	; (800be5c <__sinit+0x6c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	62a2      	str	r2, [r4, #40]	; 0x28
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	42a3      	cmp	r3, r4
 800be16:	d101      	bne.n	800be1c <__sinit+0x2c>
 800be18:	2301      	movs	r3, #1
 800be1a:	61a3      	str	r3, [r4, #24]
 800be1c:	0020      	movs	r0, r4
 800be1e:	f000 f81f 	bl	800be60 <__sfp>
 800be22:	6060      	str	r0, [r4, #4]
 800be24:	0020      	movs	r0, r4
 800be26:	f000 f81b 	bl	800be60 <__sfp>
 800be2a:	60a0      	str	r0, [r4, #8]
 800be2c:	0020      	movs	r0, r4
 800be2e:	f000 f817 	bl	800be60 <__sfp>
 800be32:	2200      	movs	r2, #0
 800be34:	2104      	movs	r1, #4
 800be36:	60e0      	str	r0, [r4, #12]
 800be38:	6860      	ldr	r0, [r4, #4]
 800be3a:	f7ff ff77 	bl	800bd2c <std>
 800be3e:	2201      	movs	r2, #1
 800be40:	2109      	movs	r1, #9
 800be42:	68a0      	ldr	r0, [r4, #8]
 800be44:	f7ff ff72 	bl	800bd2c <std>
 800be48:	2202      	movs	r2, #2
 800be4a:	2112      	movs	r1, #18
 800be4c:	68e0      	ldr	r0, [r4, #12]
 800be4e:	f7ff ff6d 	bl	800bd2c <std>
 800be52:	2301      	movs	r3, #1
 800be54:	61a3      	str	r3, [r4, #24]
 800be56:	e7d2      	b.n	800bdfe <__sinit+0xe>
 800be58:	0800ef94 	.word	0x0800ef94
 800be5c:	0800bd75 	.word	0x0800bd75

0800be60 <__sfp>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	0007      	movs	r7, r0
 800be64:	f7ff ffa4 	bl	800bdb0 <__sfp_lock_acquire>
 800be68:	4b1f      	ldr	r3, [pc, #124]	; (800bee8 <__sfp+0x88>)
 800be6a:	681e      	ldr	r6, [r3, #0]
 800be6c:	69b3      	ldr	r3, [r6, #24]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <__sfp+0x18>
 800be72:	0030      	movs	r0, r6
 800be74:	f7ff ffbc 	bl	800bdf0 <__sinit>
 800be78:	3648      	adds	r6, #72	; 0x48
 800be7a:	68b4      	ldr	r4, [r6, #8]
 800be7c:	6873      	ldr	r3, [r6, #4]
 800be7e:	3b01      	subs	r3, #1
 800be80:	d504      	bpl.n	800be8c <__sfp+0x2c>
 800be82:	6833      	ldr	r3, [r6, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d022      	beq.n	800bece <__sfp+0x6e>
 800be88:	6836      	ldr	r6, [r6, #0]
 800be8a:	e7f6      	b.n	800be7a <__sfp+0x1a>
 800be8c:	220c      	movs	r2, #12
 800be8e:	5ea5      	ldrsh	r5, [r4, r2]
 800be90:	2d00      	cmp	r5, #0
 800be92:	d11a      	bne.n	800beca <__sfp+0x6a>
 800be94:	0020      	movs	r0, r4
 800be96:	4b15      	ldr	r3, [pc, #84]	; (800beec <__sfp+0x8c>)
 800be98:	3058      	adds	r0, #88	; 0x58
 800be9a:	60e3      	str	r3, [r4, #12]
 800be9c:	6665      	str	r5, [r4, #100]	; 0x64
 800be9e:	f000 f847 	bl	800bf30 <__retarget_lock_init_recursive>
 800bea2:	f7ff ff8d 	bl	800bdc0 <__sfp_lock_release>
 800bea6:	0020      	movs	r0, r4
 800bea8:	2208      	movs	r2, #8
 800beaa:	0029      	movs	r1, r5
 800beac:	6025      	str	r5, [r4, #0]
 800beae:	60a5      	str	r5, [r4, #8]
 800beb0:	6065      	str	r5, [r4, #4]
 800beb2:	6125      	str	r5, [r4, #16]
 800beb4:	6165      	str	r5, [r4, #20]
 800beb6:	61a5      	str	r5, [r4, #24]
 800beb8:	305c      	adds	r0, #92	; 0x5c
 800beba:	f7fd fc45 	bl	8009748 <memset>
 800bebe:	6365      	str	r5, [r4, #52]	; 0x34
 800bec0:	63a5      	str	r5, [r4, #56]	; 0x38
 800bec2:	64a5      	str	r5, [r4, #72]	; 0x48
 800bec4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bec6:	0020      	movs	r0, r4
 800bec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beca:	3468      	adds	r4, #104	; 0x68
 800becc:	e7d7      	b.n	800be7e <__sfp+0x1e>
 800bece:	2104      	movs	r1, #4
 800bed0:	0038      	movs	r0, r7
 800bed2:	f7ff ff57 	bl	800bd84 <__sfmoreglue>
 800bed6:	1e04      	subs	r4, r0, #0
 800bed8:	6030      	str	r0, [r6, #0]
 800beda:	d1d5      	bne.n	800be88 <__sfp+0x28>
 800bedc:	f7ff ff70 	bl	800bdc0 <__sfp_lock_release>
 800bee0:	230c      	movs	r3, #12
 800bee2:	603b      	str	r3, [r7, #0]
 800bee4:	e7ef      	b.n	800bec6 <__sfp+0x66>
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	0800ef94 	.word	0x0800ef94
 800beec:	ffff0001 	.word	0xffff0001

0800bef0 <_fwalk_reent>:
 800bef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bef2:	0004      	movs	r4, r0
 800bef4:	0006      	movs	r6, r0
 800bef6:	2700      	movs	r7, #0
 800bef8:	9101      	str	r1, [sp, #4]
 800befa:	3448      	adds	r4, #72	; 0x48
 800befc:	6863      	ldr	r3, [r4, #4]
 800befe:	68a5      	ldr	r5, [r4, #8]
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	9b00      	ldr	r3, [sp, #0]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	d504      	bpl.n	800bf14 <_fwalk_reent+0x24>
 800bf0a:	6824      	ldr	r4, [r4, #0]
 800bf0c:	2c00      	cmp	r4, #0
 800bf0e:	d1f5      	bne.n	800befc <_fwalk_reent+0xc>
 800bf10:	0038      	movs	r0, r7
 800bf12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf14:	89ab      	ldrh	r3, [r5, #12]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d908      	bls.n	800bf2c <_fwalk_reent+0x3c>
 800bf1a:	220e      	movs	r2, #14
 800bf1c:	5eab      	ldrsh	r3, [r5, r2]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	d004      	beq.n	800bf2c <_fwalk_reent+0x3c>
 800bf22:	0029      	movs	r1, r5
 800bf24:	0030      	movs	r0, r6
 800bf26:	9b01      	ldr	r3, [sp, #4]
 800bf28:	4798      	blx	r3
 800bf2a:	4307      	orrs	r7, r0
 800bf2c:	3568      	adds	r5, #104	; 0x68
 800bf2e:	e7e8      	b.n	800bf02 <_fwalk_reent+0x12>

0800bf30 <__retarget_lock_init_recursive>:
 800bf30:	4770      	bx	lr

0800bf32 <__retarget_lock_acquire_recursive>:
 800bf32:	4770      	bx	lr

0800bf34 <__retarget_lock_release_recursive>:
 800bf34:	4770      	bx	lr
	...

0800bf38 <__swhatbuf_r>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	000e      	movs	r6, r1
 800bf3c:	001d      	movs	r5, r3
 800bf3e:	230e      	movs	r3, #14
 800bf40:	5ec9      	ldrsh	r1, [r1, r3]
 800bf42:	0014      	movs	r4, r2
 800bf44:	b096      	sub	sp, #88	; 0x58
 800bf46:	2900      	cmp	r1, #0
 800bf48:	da07      	bge.n	800bf5a <__swhatbuf_r+0x22>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	602b      	str	r3, [r5, #0]
 800bf4e:	89b3      	ldrh	r3, [r6, #12]
 800bf50:	061b      	lsls	r3, r3, #24
 800bf52:	d411      	bmi.n	800bf78 <__swhatbuf_r+0x40>
 800bf54:	2380      	movs	r3, #128	; 0x80
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	e00f      	b.n	800bf7a <__swhatbuf_r+0x42>
 800bf5a:	466a      	mov	r2, sp
 800bf5c:	f000 f944 	bl	800c1e8 <_fstat_r>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	dbf2      	blt.n	800bf4a <__swhatbuf_r+0x12>
 800bf64:	23f0      	movs	r3, #240	; 0xf0
 800bf66:	9901      	ldr	r1, [sp, #4]
 800bf68:	021b      	lsls	r3, r3, #8
 800bf6a:	4019      	ands	r1, r3
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <__swhatbuf_r+0x4c>)
 800bf6e:	18c9      	adds	r1, r1, r3
 800bf70:	424b      	negs	r3, r1
 800bf72:	4159      	adcs	r1, r3
 800bf74:	6029      	str	r1, [r5, #0]
 800bf76:	e7ed      	b.n	800bf54 <__swhatbuf_r+0x1c>
 800bf78:	2340      	movs	r3, #64	; 0x40
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	b016      	add	sp, #88	; 0x58
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
 800bf82:	46c0      	nop			; (mov r8, r8)
 800bf84:	ffffe000 	.word	0xffffe000

0800bf88 <__smakebuf_r>:
 800bf88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf8a:	2602      	movs	r6, #2
 800bf8c:	898b      	ldrh	r3, [r1, #12]
 800bf8e:	0005      	movs	r5, r0
 800bf90:	000c      	movs	r4, r1
 800bf92:	4233      	tst	r3, r6
 800bf94:	d006      	beq.n	800bfa4 <__smakebuf_r+0x1c>
 800bf96:	0023      	movs	r3, r4
 800bf98:	3347      	adds	r3, #71	; 0x47
 800bf9a:	6023      	str	r3, [r4, #0]
 800bf9c:	6123      	str	r3, [r4, #16]
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	6163      	str	r3, [r4, #20]
 800bfa2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bfa4:	466a      	mov	r2, sp
 800bfa6:	ab01      	add	r3, sp, #4
 800bfa8:	f7ff ffc6 	bl	800bf38 <__swhatbuf_r>
 800bfac:	9900      	ldr	r1, [sp, #0]
 800bfae:	0007      	movs	r7, r0
 800bfb0:	0028      	movs	r0, r5
 800bfb2:	f7fd fc1b 	bl	80097ec <_malloc_r>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d108      	bne.n	800bfcc <__smakebuf_r+0x44>
 800bfba:	220c      	movs	r2, #12
 800bfbc:	5ea3      	ldrsh	r3, [r4, r2]
 800bfbe:	059a      	lsls	r2, r3, #22
 800bfc0:	d4ef      	bmi.n	800bfa2 <__smakebuf_r+0x1a>
 800bfc2:	2203      	movs	r2, #3
 800bfc4:	4393      	bics	r3, r2
 800bfc6:	431e      	orrs	r6, r3
 800bfc8:	81a6      	strh	r6, [r4, #12]
 800bfca:	e7e4      	b.n	800bf96 <__smakebuf_r+0xe>
 800bfcc:	4b0f      	ldr	r3, [pc, #60]	; (800c00c <__smakebuf_r+0x84>)
 800bfce:	62ab      	str	r3, [r5, #40]	; 0x28
 800bfd0:	2380      	movs	r3, #128	; 0x80
 800bfd2:	89a2      	ldrh	r2, [r4, #12]
 800bfd4:	6020      	str	r0, [r4, #0]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	9b00      	ldr	r3, [sp, #0]
 800bfdc:	6120      	str	r0, [r4, #16]
 800bfde:	6163      	str	r3, [r4, #20]
 800bfe0:	9b01      	ldr	r3, [sp, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00d      	beq.n	800c002 <__smakebuf_r+0x7a>
 800bfe6:	0028      	movs	r0, r5
 800bfe8:	230e      	movs	r3, #14
 800bfea:	5ee1      	ldrsh	r1, [r4, r3]
 800bfec:	f000 f90e 	bl	800c20c <_isatty_r>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d006      	beq.n	800c002 <__smakebuf_r+0x7a>
 800bff4:	2203      	movs	r2, #3
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	4393      	bics	r3, r2
 800bffa:	001a      	movs	r2, r3
 800bffc:	2301      	movs	r3, #1
 800bffe:	4313      	orrs	r3, r2
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	89a0      	ldrh	r0, [r4, #12]
 800c004:	4307      	orrs	r7, r0
 800c006:	81a7      	strh	r7, [r4, #12]
 800c008:	e7cb      	b.n	800bfa2 <__smakebuf_r+0x1a>
 800c00a:	46c0      	nop			; (mov r8, r8)
 800c00c:	0800bd75 	.word	0x0800bd75

0800c010 <memchr>:
 800c010:	b2c9      	uxtb	r1, r1
 800c012:	1882      	adds	r2, r0, r2
 800c014:	4290      	cmp	r0, r2
 800c016:	d101      	bne.n	800c01c <memchr+0xc>
 800c018:	2000      	movs	r0, #0
 800c01a:	4770      	bx	lr
 800c01c:	7803      	ldrb	r3, [r0, #0]
 800c01e:	428b      	cmp	r3, r1
 800c020:	d0fb      	beq.n	800c01a <memchr+0xa>
 800c022:	3001      	adds	r0, #1
 800c024:	e7f6      	b.n	800c014 <memchr+0x4>

0800c026 <memcpy>:
 800c026:	2300      	movs	r3, #0
 800c028:	b510      	push	{r4, lr}
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d100      	bne.n	800c030 <memcpy+0xa>
 800c02e:	bd10      	pop	{r4, pc}
 800c030:	5ccc      	ldrb	r4, [r1, r3]
 800c032:	54c4      	strb	r4, [r0, r3]
 800c034:	3301      	adds	r3, #1
 800c036:	e7f8      	b.n	800c02a <memcpy+0x4>

0800c038 <memmove>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	4288      	cmp	r0, r1
 800c03c:	d902      	bls.n	800c044 <memmove+0xc>
 800c03e:	188b      	adds	r3, r1, r2
 800c040:	4298      	cmp	r0, r3
 800c042:	d303      	bcc.n	800c04c <memmove+0x14>
 800c044:	2300      	movs	r3, #0
 800c046:	e007      	b.n	800c058 <memmove+0x20>
 800c048:	5c8b      	ldrb	r3, [r1, r2]
 800c04a:	5483      	strb	r3, [r0, r2]
 800c04c:	3a01      	subs	r2, #1
 800c04e:	d2fb      	bcs.n	800c048 <memmove+0x10>
 800c050:	bd10      	pop	{r4, pc}
 800c052:	5ccc      	ldrb	r4, [r1, r3]
 800c054:	54c4      	strb	r4, [r0, r3]
 800c056:	3301      	adds	r3, #1
 800c058:	429a      	cmp	r2, r3
 800c05a:	d1fa      	bne.n	800c052 <memmove+0x1a>
 800c05c:	e7f8      	b.n	800c050 <memmove+0x18>

0800c05e <_malloc_usable_size_r>:
 800c05e:	1f0b      	subs	r3, r1, #4
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	1f18      	subs	r0, r3, #4
 800c064:	2b00      	cmp	r3, #0
 800c066:	da01      	bge.n	800c06c <_malloc_usable_size_r+0xe>
 800c068:	580b      	ldr	r3, [r1, r0]
 800c06a:	18c0      	adds	r0, r0, r3
 800c06c:	4770      	bx	lr

0800c06e <_raise_r>:
 800c06e:	b570      	push	{r4, r5, r6, lr}
 800c070:	0004      	movs	r4, r0
 800c072:	000d      	movs	r5, r1
 800c074:	291f      	cmp	r1, #31
 800c076:	d904      	bls.n	800c082 <_raise_r+0x14>
 800c078:	2316      	movs	r3, #22
 800c07a:	6003      	str	r3, [r0, #0]
 800c07c:	2001      	movs	r0, #1
 800c07e:	4240      	negs	r0, r0
 800c080:	bd70      	pop	{r4, r5, r6, pc}
 800c082:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c084:	2b00      	cmp	r3, #0
 800c086:	d004      	beq.n	800c092 <_raise_r+0x24>
 800c088:	008a      	lsls	r2, r1, #2
 800c08a:	189b      	adds	r3, r3, r2
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	2a00      	cmp	r2, #0
 800c090:	d108      	bne.n	800c0a4 <_raise_r+0x36>
 800c092:	0020      	movs	r0, r4
 800c094:	f000 f832 	bl	800c0fc <_getpid_r>
 800c098:	002a      	movs	r2, r5
 800c09a:	0001      	movs	r1, r0
 800c09c:	0020      	movs	r0, r4
 800c09e:	f000 f81b 	bl	800c0d8 <_kill_r>
 800c0a2:	e7ed      	b.n	800c080 <_raise_r+0x12>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	2a01      	cmp	r2, #1
 800c0a8:	d0ea      	beq.n	800c080 <_raise_r+0x12>
 800c0aa:	1c51      	adds	r1, r2, #1
 800c0ac:	d103      	bne.n	800c0b6 <_raise_r+0x48>
 800c0ae:	2316      	movs	r3, #22
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	6023      	str	r3, [r4, #0]
 800c0b4:	e7e4      	b.n	800c080 <_raise_r+0x12>
 800c0b6:	2400      	movs	r4, #0
 800c0b8:	0028      	movs	r0, r5
 800c0ba:	601c      	str	r4, [r3, #0]
 800c0bc:	4790      	blx	r2
 800c0be:	0020      	movs	r0, r4
 800c0c0:	e7de      	b.n	800c080 <_raise_r+0x12>
	...

0800c0c4 <raise>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	4b03      	ldr	r3, [pc, #12]	; (800c0d4 <raise+0x10>)
 800c0c8:	0001      	movs	r1, r0
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	f7ff ffcf 	bl	800c06e <_raise_r>
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	46c0      	nop			; (mov r8, r8)
 800c0d4:	200000b8 	.word	0x200000b8

0800c0d8 <_kill_r>:
 800c0d8:	2300      	movs	r3, #0
 800c0da:	b570      	push	{r4, r5, r6, lr}
 800c0dc:	4d06      	ldr	r5, [pc, #24]	; (800c0f8 <_kill_r+0x20>)
 800c0de:	0004      	movs	r4, r0
 800c0e0:	0008      	movs	r0, r1
 800c0e2:	0011      	movs	r1, r2
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	f7f9 fe67 	bl	8005db8 <_kill>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d103      	bne.n	800c0f6 <_kill_r+0x1e>
 800c0ee:	682b      	ldr	r3, [r5, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d000      	beq.n	800c0f6 <_kill_r+0x1e>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	20001304 	.word	0x20001304

0800c0fc <_getpid_r>:
 800c0fc:	b510      	push	{r4, lr}
 800c0fe:	f7f9 fe55 	bl	8005dac <_getpid>
 800c102:	bd10      	pop	{r4, pc}

0800c104 <__sread>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	000c      	movs	r4, r1
 800c108:	250e      	movs	r5, #14
 800c10a:	5f49      	ldrsh	r1, [r1, r5]
 800c10c:	f000 f8a4 	bl	800c258 <_read_r>
 800c110:	2800      	cmp	r0, #0
 800c112:	db03      	blt.n	800c11c <__sread+0x18>
 800c114:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c116:	181b      	adds	r3, r3, r0
 800c118:	6563      	str	r3, [r4, #84]	; 0x54
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	4a02      	ldr	r2, [pc, #8]	; (800c128 <__sread+0x24>)
 800c120:	4013      	ands	r3, r2
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	e7f9      	b.n	800c11a <__sread+0x16>
 800c126:	46c0      	nop			; (mov r8, r8)
 800c128:	ffffefff 	.word	0xffffefff

0800c12c <__swrite>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	001f      	movs	r7, r3
 800c130:	898b      	ldrh	r3, [r1, #12]
 800c132:	0005      	movs	r5, r0
 800c134:	000c      	movs	r4, r1
 800c136:	0016      	movs	r6, r2
 800c138:	05db      	lsls	r3, r3, #23
 800c13a:	d505      	bpl.n	800c148 <__swrite+0x1c>
 800c13c:	230e      	movs	r3, #14
 800c13e:	5ec9      	ldrsh	r1, [r1, r3]
 800c140:	2200      	movs	r2, #0
 800c142:	2302      	movs	r3, #2
 800c144:	f000 f874 	bl	800c230 <_lseek_r>
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	4a05      	ldr	r2, [pc, #20]	; (800c160 <__swrite+0x34>)
 800c14c:	0028      	movs	r0, r5
 800c14e:	4013      	ands	r3, r2
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	0032      	movs	r2, r6
 800c154:	230e      	movs	r3, #14
 800c156:	5ee1      	ldrsh	r1, [r4, r3]
 800c158:	003b      	movs	r3, r7
 800c15a:	f000 f81f 	bl	800c19c <_write_r>
 800c15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c160:	ffffefff 	.word	0xffffefff

0800c164 <__sseek>:
 800c164:	b570      	push	{r4, r5, r6, lr}
 800c166:	000c      	movs	r4, r1
 800c168:	250e      	movs	r5, #14
 800c16a:	5f49      	ldrsh	r1, [r1, r5]
 800c16c:	f000 f860 	bl	800c230 <_lseek_r>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	1c42      	adds	r2, r0, #1
 800c174:	d103      	bne.n	800c17e <__sseek+0x1a>
 800c176:	4a05      	ldr	r2, [pc, #20]	; (800c18c <__sseek+0x28>)
 800c178:	4013      	ands	r3, r2
 800c17a:	81a3      	strh	r3, [r4, #12]
 800c17c:	bd70      	pop	{r4, r5, r6, pc}
 800c17e:	2280      	movs	r2, #128	; 0x80
 800c180:	0152      	lsls	r2, r2, #5
 800c182:	4313      	orrs	r3, r2
 800c184:	81a3      	strh	r3, [r4, #12]
 800c186:	6560      	str	r0, [r4, #84]	; 0x54
 800c188:	e7f8      	b.n	800c17c <__sseek+0x18>
 800c18a:	46c0      	nop			; (mov r8, r8)
 800c18c:	ffffefff 	.word	0xffffefff

0800c190 <__sclose>:
 800c190:	b510      	push	{r4, lr}
 800c192:	230e      	movs	r3, #14
 800c194:	5ec9      	ldrsh	r1, [r1, r3]
 800c196:	f000 f815 	bl	800c1c4 <_close_r>
 800c19a:	bd10      	pop	{r4, pc}

0800c19c <_write_r>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	0004      	movs	r4, r0
 800c1a0:	0008      	movs	r0, r1
 800c1a2:	0011      	movs	r1, r2
 800c1a4:	001a      	movs	r2, r3
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	4d05      	ldr	r5, [pc, #20]	; (800c1c0 <_write_r+0x24>)
 800c1aa:	602b      	str	r3, [r5, #0]
 800c1ac:	f7f9 fe3d 	bl	8005e2a <_write>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d103      	bne.n	800c1bc <_write_r+0x20>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d000      	beq.n	800c1bc <_write_r+0x20>
 800c1ba:	6023      	str	r3, [r4, #0]
 800c1bc:	bd70      	pop	{r4, r5, r6, pc}
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	20001304 	.word	0x20001304

0800c1c4 <_close_r>:
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	b570      	push	{r4, r5, r6, lr}
 800c1c8:	4d06      	ldr	r5, [pc, #24]	; (800c1e4 <_close_r+0x20>)
 800c1ca:	0004      	movs	r4, r0
 800c1cc:	0008      	movs	r0, r1
 800c1ce:	602b      	str	r3, [r5, #0]
 800c1d0:	f7f9 fe47 	bl	8005e62 <_close>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d103      	bne.n	800c1e0 <_close_r+0x1c>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d000      	beq.n	800c1e0 <_close_r+0x1c>
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	bd70      	pop	{r4, r5, r6, pc}
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	20001304 	.word	0x20001304

0800c1e8 <_fstat_r>:
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	4d06      	ldr	r5, [pc, #24]	; (800c208 <_fstat_r+0x20>)
 800c1ee:	0004      	movs	r4, r0
 800c1f0:	0008      	movs	r0, r1
 800c1f2:	0011      	movs	r1, r2
 800c1f4:	602b      	str	r3, [r5, #0]
 800c1f6:	f7f9 fe3e 	bl	8005e76 <_fstat>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	d103      	bne.n	800c206 <_fstat_r+0x1e>
 800c1fe:	682b      	ldr	r3, [r5, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d000      	beq.n	800c206 <_fstat_r+0x1e>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd70      	pop	{r4, r5, r6, pc}
 800c208:	20001304 	.word	0x20001304

0800c20c <_isatty_r>:
 800c20c:	2300      	movs	r3, #0
 800c20e:	b570      	push	{r4, r5, r6, lr}
 800c210:	4d06      	ldr	r5, [pc, #24]	; (800c22c <_isatty_r+0x20>)
 800c212:	0004      	movs	r4, r0
 800c214:	0008      	movs	r0, r1
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	f7f9 fe3b 	bl	8005e92 <_isatty>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d103      	bne.n	800c228 <_isatty_r+0x1c>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d000      	beq.n	800c228 <_isatty_r+0x1c>
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	bd70      	pop	{r4, r5, r6, pc}
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	20001304 	.word	0x20001304

0800c230 <_lseek_r>:
 800c230:	b570      	push	{r4, r5, r6, lr}
 800c232:	0004      	movs	r4, r0
 800c234:	0008      	movs	r0, r1
 800c236:	0011      	movs	r1, r2
 800c238:	001a      	movs	r2, r3
 800c23a:	2300      	movs	r3, #0
 800c23c:	4d05      	ldr	r5, [pc, #20]	; (800c254 <_lseek_r+0x24>)
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f9 fe30 	bl	8005ea4 <_lseek>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d103      	bne.n	800c250 <_lseek_r+0x20>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d000      	beq.n	800c250 <_lseek_r+0x20>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	bd70      	pop	{r4, r5, r6, pc}
 800c252:	46c0      	nop			; (mov r8, r8)
 800c254:	20001304 	.word	0x20001304

0800c258 <_read_r>:
 800c258:	b570      	push	{r4, r5, r6, lr}
 800c25a:	0004      	movs	r4, r0
 800c25c:	0008      	movs	r0, r1
 800c25e:	0011      	movs	r1, r2
 800c260:	001a      	movs	r2, r3
 800c262:	2300      	movs	r3, #0
 800c264:	4d05      	ldr	r5, [pc, #20]	; (800c27c <_read_r+0x24>)
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	f7f9 fdc2 	bl	8005df0 <_read>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d103      	bne.n	800c278 <_read_r+0x20>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d000      	beq.n	800c278 <_read_r+0x20>
 800c276:	6023      	str	r3, [r4, #0]
 800c278:	bd70      	pop	{r4, r5, r6, pc}
 800c27a:	46c0      	nop			; (mov r8, r8)
 800c27c:	20001304 	.word	0x20001304

0800c280 <cos>:
 800c280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c282:	4a1e      	ldr	r2, [pc, #120]	; (800c2fc <cos+0x7c>)
 800c284:	004b      	lsls	r3, r1, #1
 800c286:	b087      	sub	sp, #28
 800c288:	085b      	lsrs	r3, r3, #1
 800c28a:	4293      	cmp	r3, r2
 800c28c:	dc04      	bgt.n	800c298 <cos+0x18>
 800c28e:	2200      	movs	r2, #0
 800c290:	2300      	movs	r3, #0
 800c292:	f001 f903 	bl	800d49c <__kernel_cos>
 800c296:	e006      	b.n	800c2a6 <cos+0x26>
 800c298:	4a19      	ldr	r2, [pc, #100]	; (800c300 <cos+0x80>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	dd05      	ble.n	800c2aa <cos+0x2a>
 800c29e:	0002      	movs	r2, r0
 800c2a0:	000b      	movs	r3, r1
 800c2a2:	f7f6 f8bd 	bl	8002420 <__aeabi_dsub>
 800c2a6:	b007      	add	sp, #28
 800c2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2aa:	aa02      	add	r2, sp, #8
 800c2ac:	f000 fe56 	bl	800cf5c <__ieee754_rem_pio2>
 800c2b0:	9c04      	ldr	r4, [sp, #16]
 800c2b2:	9d05      	ldr	r5, [sp, #20]
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	4003      	ands	r3, r0
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d008      	beq.n	800c2ce <cos+0x4e>
 800c2bc:	9802      	ldr	r0, [sp, #8]
 800c2be:	9903      	ldr	r1, [sp, #12]
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d00f      	beq.n	800c2e4 <cos+0x64>
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d112      	bne.n	800c2ee <cos+0x6e>
 800c2c8:	0022      	movs	r2, r4
 800c2ca:	002b      	movs	r3, r5
 800c2cc:	e7e1      	b.n	800c292 <cos+0x12>
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	0022      	movs	r2, r4
 800c2d2:	9802      	ldr	r0, [sp, #8]
 800c2d4:	9903      	ldr	r1, [sp, #12]
 800c2d6:	002b      	movs	r3, r5
 800c2d8:	f001 fd16 	bl	800dd08 <__kernel_sin>
 800c2dc:	2380      	movs	r3, #128	; 0x80
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	18c9      	adds	r1, r1, r3
 800c2e2:	e7e0      	b.n	800c2a6 <cos+0x26>
 800c2e4:	0022      	movs	r2, r4
 800c2e6:	002b      	movs	r3, r5
 800c2e8:	f001 f8d8 	bl	800d49c <__kernel_cos>
 800c2ec:	e7f6      	b.n	800c2dc <cos+0x5c>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	0022      	movs	r2, r4
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	002b      	movs	r3, r5
 800c2f6:	f001 fd07 	bl	800dd08 <__kernel_sin>
 800c2fa:	e7d4      	b.n	800c2a6 <cos+0x26>
 800c2fc:	3fe921fb 	.word	0x3fe921fb
 800c300:	7fefffff 	.word	0x7fefffff

0800c304 <sin>:
 800c304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c306:	4a20      	ldr	r2, [pc, #128]	; (800c388 <sin+0x84>)
 800c308:	004b      	lsls	r3, r1, #1
 800c30a:	b087      	sub	sp, #28
 800c30c:	085b      	lsrs	r3, r3, #1
 800c30e:	4293      	cmp	r3, r2
 800c310:	dc06      	bgt.n	800c320 <sin+0x1c>
 800c312:	2300      	movs	r3, #0
 800c314:	2200      	movs	r2, #0
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	2300      	movs	r3, #0
 800c31a:	f001 fcf5 	bl	800dd08 <__kernel_sin>
 800c31e:	e006      	b.n	800c32e <sin+0x2a>
 800c320:	4a1a      	ldr	r2, [pc, #104]	; (800c38c <sin+0x88>)
 800c322:	4293      	cmp	r3, r2
 800c324:	dd05      	ble.n	800c332 <sin+0x2e>
 800c326:	0002      	movs	r2, r0
 800c328:	000b      	movs	r3, r1
 800c32a:	f7f6 f879 	bl	8002420 <__aeabi_dsub>
 800c32e:	b007      	add	sp, #28
 800c330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c332:	aa02      	add	r2, sp, #8
 800c334:	f000 fe12 	bl	800cf5c <__ieee754_rem_pio2>
 800c338:	9c04      	ldr	r4, [sp, #16]
 800c33a:	9d05      	ldr	r5, [sp, #20]
 800c33c:	2303      	movs	r3, #3
 800c33e:	4003      	ands	r3, r0
 800c340:	2b01      	cmp	r3, #1
 800c342:	d00a      	beq.n	800c35a <sin+0x56>
 800c344:	9802      	ldr	r0, [sp, #8]
 800c346:	9903      	ldr	r1, [sp, #12]
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d00d      	beq.n	800c368 <sin+0x64>
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d115      	bne.n	800c37c <sin+0x78>
 800c350:	3301      	adds	r3, #1
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	0022      	movs	r2, r4
 800c356:	002b      	movs	r3, r5
 800c358:	e7df      	b.n	800c31a <sin+0x16>
 800c35a:	0022      	movs	r2, r4
 800c35c:	9802      	ldr	r0, [sp, #8]
 800c35e:	9903      	ldr	r1, [sp, #12]
 800c360:	002b      	movs	r3, r5
 800c362:	f001 f89b 	bl	800d49c <__kernel_cos>
 800c366:	e7e2      	b.n	800c32e <sin+0x2a>
 800c368:	2301      	movs	r3, #1
 800c36a:	0022      	movs	r2, r4
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	002b      	movs	r3, r5
 800c370:	f001 fcca 	bl	800dd08 <__kernel_sin>
 800c374:	2380      	movs	r3, #128	; 0x80
 800c376:	061b      	lsls	r3, r3, #24
 800c378:	18c9      	adds	r1, r1, r3
 800c37a:	e7d8      	b.n	800c32e <sin+0x2a>
 800c37c:	0022      	movs	r2, r4
 800c37e:	002b      	movs	r3, r5
 800c380:	f001 f88c 	bl	800d49c <__kernel_cos>
 800c384:	e7f6      	b.n	800c374 <sin+0x70>
 800c386:	46c0      	nop			; (mov r8, r8)
 800c388:	3fe921fb 	.word	0x3fe921fb
 800c38c:	7fefffff 	.word	0x7fefffff

0800c390 <pow>:
 800c390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c392:	001d      	movs	r5, r3
 800c394:	0014      	movs	r4, r2
 800c396:	9000      	str	r0, [sp, #0]
 800c398:	9101      	str	r1, [sp, #4]
 800c39a:	f000 f8df 	bl	800c55c <__ieee754_pow>
 800c39e:	4b54      	ldr	r3, [pc, #336]	; (800c4f0 <pow+0x160>)
 800c3a0:	0006      	movs	r6, r0
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	000f      	movs	r7, r1
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	d018      	beq.n	800c3de <pow+0x4e>
 800c3ac:	0022      	movs	r2, r4
 800c3ae:	002b      	movs	r3, r5
 800c3b0:	0020      	movs	r0, r4
 800c3b2:	0029      	movs	r1, r5
 800c3b4:	f7f6 feb0 	bl	8003118 <__aeabi_dcmpun>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d110      	bne.n	800c3de <pow+0x4e>
 800c3bc:	9a00      	ldr	r2, [sp, #0]
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	0010      	movs	r0, r2
 800c3c2:	0019      	movs	r1, r3
 800c3c4:	f7f6 fea8 	bl	8003118 <__aeabi_dcmpun>
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d00a      	beq.n	800c3e6 <pow+0x56>
 800c3d0:	0020      	movs	r0, r4
 800c3d2:	0029      	movs	r1, r5
 800c3d4:	f7f6 fcfc 	bl	8002dd0 <__aeabi_dcmpeq>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d000      	beq.n	800c3de <pow+0x4e>
 800c3dc:	e084      	b.n	800c4e8 <pow+0x158>
 800c3de:	0030      	movs	r0, r6
 800c3e0:	0039      	movs	r1, r7
 800c3e2:	b003      	add	sp, #12
 800c3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e6:	9800      	ldr	r0, [sp, #0]
 800c3e8:	9901      	ldr	r1, [sp, #4]
 800c3ea:	f7f6 fcf1 	bl	8002dd0 <__aeabi_dcmpeq>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d01c      	beq.n	800c42c <pow+0x9c>
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	0020      	movs	r0, r4
 800c3f8:	0029      	movs	r1, r5
 800c3fa:	f7f6 fce9 	bl	8002dd0 <__aeabi_dcmpeq>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d172      	bne.n	800c4e8 <pow+0x158>
 800c402:	0020      	movs	r0, r4
 800c404:	0029      	movs	r1, r5
 800c406:	f001 fd2f 	bl	800de68 <finite>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d0e7      	beq.n	800c3de <pow+0x4e>
 800c40e:	2200      	movs	r2, #0
 800c410:	2300      	movs	r3, #0
 800c412:	0020      	movs	r0, r4
 800c414:	0029      	movs	r1, r5
 800c416:	f7f6 fce1 	bl	8002ddc <__aeabi_dcmplt>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d0df      	beq.n	800c3de <pow+0x4e>
 800c41e:	f7fd f95f 	bl	80096e0 <__errno>
 800c422:	2321      	movs	r3, #33	; 0x21
 800c424:	2600      	movs	r6, #0
 800c426:	6003      	str	r3, [r0, #0]
 800c428:	4f32      	ldr	r7, [pc, #200]	; (800c4f4 <pow+0x164>)
 800c42a:	e7d8      	b.n	800c3de <pow+0x4e>
 800c42c:	0030      	movs	r0, r6
 800c42e:	0039      	movs	r1, r7
 800c430:	f001 fd1a 	bl	800de68 <finite>
 800c434:	2800      	cmp	r0, #0
 800c436:	d139      	bne.n	800c4ac <pow+0x11c>
 800c438:	9800      	ldr	r0, [sp, #0]
 800c43a:	9901      	ldr	r1, [sp, #4]
 800c43c:	f001 fd14 	bl	800de68 <finite>
 800c440:	2800      	cmp	r0, #0
 800c442:	d033      	beq.n	800c4ac <pow+0x11c>
 800c444:	0020      	movs	r0, r4
 800c446:	0029      	movs	r1, r5
 800c448:	f001 fd0e 	bl	800de68 <finite>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d02d      	beq.n	800c4ac <pow+0x11c>
 800c450:	0032      	movs	r2, r6
 800c452:	003b      	movs	r3, r7
 800c454:	0030      	movs	r0, r6
 800c456:	0039      	movs	r1, r7
 800c458:	f7f6 fe5e 	bl	8003118 <__aeabi_dcmpun>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d00c      	beq.n	800c47a <pow+0xea>
 800c460:	f7fd f93e 	bl	80096e0 <__errno>
 800c464:	2321      	movs	r3, #33	; 0x21
 800c466:	2200      	movs	r2, #0
 800c468:	6003      	str	r3, [r0, #0]
 800c46a:	2300      	movs	r3, #0
 800c46c:	0010      	movs	r0, r2
 800c46e:	0019      	movs	r1, r3
 800c470:	f7f5 fa82 	bl	8001978 <__aeabi_ddiv>
 800c474:	0006      	movs	r6, r0
 800c476:	000f      	movs	r7, r1
 800c478:	e7b1      	b.n	800c3de <pow+0x4e>
 800c47a:	f7fd f931 	bl	80096e0 <__errno>
 800c47e:	2322      	movs	r3, #34	; 0x22
 800c480:	2200      	movs	r2, #0
 800c482:	6003      	str	r3, [r0, #0]
 800c484:	2300      	movs	r3, #0
 800c486:	9800      	ldr	r0, [sp, #0]
 800c488:	9901      	ldr	r1, [sp, #4]
 800c48a:	f7f6 fca7 	bl	8002ddc <__aeabi_dcmplt>
 800c48e:	2600      	movs	r6, #0
 800c490:	2800      	cmp	r0, #0
 800c492:	d009      	beq.n	800c4a8 <pow+0x118>
 800c494:	0020      	movs	r0, r4
 800c496:	0029      	movs	r1, r5
 800c498:	f001 fd7e 	bl	800df98 <rint>
 800c49c:	0022      	movs	r2, r4
 800c49e:	002b      	movs	r3, r5
 800c4a0:	f7f6 fc96 	bl	8002dd0 <__aeabi_dcmpeq>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d0bf      	beq.n	800c428 <pow+0x98>
 800c4a8:	4f13      	ldr	r7, [pc, #76]	; (800c4f8 <pow+0x168>)
 800c4aa:	e798      	b.n	800c3de <pow+0x4e>
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	0030      	movs	r0, r6
 800c4b2:	0039      	movs	r1, r7
 800c4b4:	f7f6 fc8c 	bl	8002dd0 <__aeabi_dcmpeq>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d100      	bne.n	800c4be <pow+0x12e>
 800c4bc:	e78f      	b.n	800c3de <pow+0x4e>
 800c4be:	9800      	ldr	r0, [sp, #0]
 800c4c0:	9901      	ldr	r1, [sp, #4]
 800c4c2:	f001 fcd1 	bl	800de68 <finite>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d100      	bne.n	800c4cc <pow+0x13c>
 800c4ca:	e788      	b.n	800c3de <pow+0x4e>
 800c4cc:	0020      	movs	r0, r4
 800c4ce:	0029      	movs	r1, r5
 800c4d0:	f001 fcca 	bl	800de68 <finite>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d100      	bne.n	800c4da <pow+0x14a>
 800c4d8:	e781      	b.n	800c3de <pow+0x4e>
 800c4da:	f7fd f901 	bl	80096e0 <__errno>
 800c4de:	2322      	movs	r3, #34	; 0x22
 800c4e0:	2600      	movs	r6, #0
 800c4e2:	2700      	movs	r7, #0
 800c4e4:	6003      	str	r3, [r0, #0]
 800c4e6:	e77a      	b.n	800c3de <pow+0x4e>
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	4f04      	ldr	r7, [pc, #16]	; (800c4fc <pow+0x16c>)
 800c4ec:	e777      	b.n	800c3de <pow+0x4e>
 800c4ee:	46c0      	nop			; (mov r8, r8)
 800c4f0:	2000011c 	.word	0x2000011c
 800c4f4:	fff00000 	.word	0xfff00000
 800c4f8:	7ff00000 	.word	0x7ff00000
 800c4fc:	3ff00000 	.word	0x3ff00000

0800c500 <sqrt>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	0004      	movs	r4, r0
 800c504:	000d      	movs	r5, r1
 800c506:	f000 ff15 	bl	800d334 <__ieee754_sqrt>
 800c50a:	4b13      	ldr	r3, [pc, #76]	; (800c558 <sqrt+0x58>)
 800c50c:	0006      	movs	r6, r0
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	000f      	movs	r7, r1
 800c512:	b25b      	sxtb	r3, r3
 800c514:	3301      	adds	r3, #1
 800c516:	d01b      	beq.n	800c550 <sqrt+0x50>
 800c518:	0022      	movs	r2, r4
 800c51a:	002b      	movs	r3, r5
 800c51c:	0020      	movs	r0, r4
 800c51e:	0029      	movs	r1, r5
 800c520:	f7f6 fdfa 	bl	8003118 <__aeabi_dcmpun>
 800c524:	2800      	cmp	r0, #0
 800c526:	d113      	bne.n	800c550 <sqrt+0x50>
 800c528:	2200      	movs	r2, #0
 800c52a:	2300      	movs	r3, #0
 800c52c:	0020      	movs	r0, r4
 800c52e:	0029      	movs	r1, r5
 800c530:	f7f6 fc54 	bl	8002ddc <__aeabi_dcmplt>
 800c534:	2800      	cmp	r0, #0
 800c536:	d00b      	beq.n	800c550 <sqrt+0x50>
 800c538:	f7fd f8d2 	bl	80096e0 <__errno>
 800c53c:	2321      	movs	r3, #33	; 0x21
 800c53e:	2200      	movs	r2, #0
 800c540:	6003      	str	r3, [r0, #0]
 800c542:	2300      	movs	r3, #0
 800c544:	0010      	movs	r0, r2
 800c546:	0019      	movs	r1, r3
 800c548:	f7f5 fa16 	bl	8001978 <__aeabi_ddiv>
 800c54c:	0006      	movs	r6, r0
 800c54e:	000f      	movs	r7, r1
 800c550:	0030      	movs	r0, r6
 800c552:	0039      	movs	r1, r7
 800c554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c556:	46c0      	nop			; (mov r8, r8)
 800c558:	2000011c 	.word	0x2000011c

0800c55c <__ieee754_pow>:
 800c55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55e:	b095      	sub	sp, #84	; 0x54
 800c560:	9202      	str	r2, [sp, #8]
 800c562:	9303      	str	r3, [sp, #12]
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	9a03      	ldr	r2, [sp, #12]
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	0055      	lsls	r5, r2, #1
 800c56e:	001a      	movs	r2, r3
 800c570:	086d      	lsrs	r5, r5, #1
 800c572:	0007      	movs	r7, r0
 800c574:	000e      	movs	r6, r1
 800c576:	432a      	orrs	r2, r5
 800c578:	d101      	bne.n	800c57e <__ieee754_pow+0x22>
 800c57a:	f000 fcb6 	bl	800ceea <__ieee754_pow+0x98e>
 800c57e:	4a82      	ldr	r2, [pc, #520]	; (800c788 <__ieee754_pow+0x22c>)
 800c580:	004c      	lsls	r4, r1, #1
 800c582:	9108      	str	r1, [sp, #32]
 800c584:	9000      	str	r0, [sp, #0]
 800c586:	0864      	lsrs	r4, r4, #1
 800c588:	4294      	cmp	r4, r2
 800c58a:	dc0d      	bgt.n	800c5a8 <__ieee754_pow+0x4c>
 800c58c:	d104      	bne.n	800c598 <__ieee754_pow+0x3c>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d110      	bne.n	800c5b4 <__ieee754_pow+0x58>
 800c592:	42a5      	cmp	r5, r4
 800c594:	dd03      	ble.n	800c59e <__ieee754_pow+0x42>
 800c596:	e00d      	b.n	800c5b4 <__ieee754_pow+0x58>
 800c598:	4a7b      	ldr	r2, [pc, #492]	; (800c788 <__ieee754_pow+0x22c>)
 800c59a:	4295      	cmp	r5, r2
 800c59c:	dc04      	bgt.n	800c5a8 <__ieee754_pow+0x4c>
 800c59e:	4a7a      	ldr	r2, [pc, #488]	; (800c788 <__ieee754_pow+0x22c>)
 800c5a0:	4295      	cmp	r5, r2
 800c5a2:	d10d      	bne.n	800c5c0 <__ieee754_pow+0x64>
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00b      	beq.n	800c5c0 <__ieee754_pow+0x64>
 800c5a8:	4b78      	ldr	r3, [pc, #480]	; (800c78c <__ieee754_pow+0x230>)
 800c5aa:	18e4      	adds	r4, r4, r3
 800c5ac:	4327      	orrs	r7, r4
 800c5ae:	d101      	bne.n	800c5b4 <__ieee754_pow+0x58>
 800c5b0:	f000 fc9b 	bl	800ceea <__ieee754_pow+0x98e>
 800c5b4:	4876      	ldr	r0, [pc, #472]	; (800c790 <__ieee754_pow+0x234>)
 800c5b6:	f001 fce9 	bl	800df8c <nan>
 800c5ba:	9000      	str	r0, [sp, #0]
 800c5bc:	9101      	str	r1, [sp, #4]
 800c5be:	e092      	b.n	800c6e6 <__ieee754_pow+0x18a>
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	9206      	str	r2, [sp, #24]
 800c5c4:	2e00      	cmp	r6, #0
 800c5c6:	da69      	bge.n	800c69c <__ieee754_pow+0x140>
 800c5c8:	4a72      	ldr	r2, [pc, #456]	; (800c794 <__ieee754_pow+0x238>)
 800c5ca:	4295      	cmp	r5, r2
 800c5cc:	dc64      	bgt.n	800c698 <__ieee754_pow+0x13c>
 800c5ce:	4a72      	ldr	r2, [pc, #456]	; (800c798 <__ieee754_pow+0x23c>)
 800c5d0:	4295      	cmp	r5, r2
 800c5d2:	dd11      	ble.n	800c5f8 <__ieee754_pow+0x9c>
 800c5d4:	4971      	ldr	r1, [pc, #452]	; (800c79c <__ieee754_pow+0x240>)
 800c5d6:	152a      	asrs	r2, r5, #20
 800c5d8:	1852      	adds	r2, r2, r1
 800c5da:	2a14      	cmp	r2, #20
 800c5dc:	dd3c      	ble.n	800c658 <__ieee754_pow+0xfc>
 800c5de:	2134      	movs	r1, #52	; 0x34
 800c5e0:	1a8a      	subs	r2, r1, r2
 800c5e2:	9902      	ldr	r1, [sp, #8]
 800c5e4:	40d1      	lsrs	r1, r2
 800c5e6:	0008      	movs	r0, r1
 800c5e8:	4090      	lsls	r0, r2
 800c5ea:	4298      	cmp	r0, r3
 800c5ec:	d104      	bne.n	800c5f8 <__ieee754_pow+0x9c>
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	4011      	ands	r1, r2
 800c5f2:	1892      	adds	r2, r2, r2
 800c5f4:	1a52      	subs	r2, r2, r1
 800c5f6:	9206      	str	r2, [sp, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d03c      	beq.n	800c676 <__ieee754_pow+0x11a>
 800c5fc:	0038      	movs	r0, r7
 800c5fe:	0031      	movs	r1, r6
 800c600:	f001 fc2e 	bl	800de60 <fabs>
 800c604:	9000      	str	r0, [sp, #0]
 800c606:	9101      	str	r1, [sp, #4]
 800c608:	2f00      	cmp	r7, #0
 800c60a:	d000      	beq.n	800c60e <__ieee754_pow+0xb2>
 800c60c:	e094      	b.n	800c738 <__ieee754_pow+0x1dc>
 800c60e:	2c00      	cmp	r4, #0
 800c610:	d005      	beq.n	800c61e <__ieee754_pow+0xc2>
 800c612:	4a63      	ldr	r2, [pc, #396]	; (800c7a0 <__ieee754_pow+0x244>)
 800c614:	00b3      	lsls	r3, r6, #2
 800c616:	089b      	lsrs	r3, r3, #2
 800c618:	4293      	cmp	r3, r2
 800c61a:	d000      	beq.n	800c61e <__ieee754_pow+0xc2>
 800c61c:	e08c      	b.n	800c738 <__ieee754_pow+0x1dc>
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	da07      	bge.n	800c634 <__ieee754_pow+0xd8>
 800c624:	9a00      	ldr	r2, [sp, #0]
 800c626:	9b01      	ldr	r3, [sp, #4]
 800c628:	2000      	movs	r0, #0
 800c62a:	495d      	ldr	r1, [pc, #372]	; (800c7a0 <__ieee754_pow+0x244>)
 800c62c:	f7f5 f9a4 	bl	8001978 <__aeabi_ddiv>
 800c630:	9000      	str	r0, [sp, #0]
 800c632:	9101      	str	r1, [sp, #4]
 800c634:	9b08      	ldr	r3, [sp, #32]
 800c636:	2b00      	cmp	r3, #0
 800c638:	da55      	bge.n	800c6e6 <__ieee754_pow+0x18a>
 800c63a:	4b54      	ldr	r3, [pc, #336]	; (800c78c <__ieee754_pow+0x230>)
 800c63c:	18e4      	adds	r4, r4, r3
 800c63e:	9b06      	ldr	r3, [sp, #24]
 800c640:	431c      	orrs	r4, r3
 800c642:	d000      	beq.n	800c646 <__ieee754_pow+0xea>
 800c644:	e06c      	b.n	800c720 <__ieee754_pow+0x1c4>
 800c646:	9a00      	ldr	r2, [sp, #0]
 800c648:	9b01      	ldr	r3, [sp, #4]
 800c64a:	0010      	movs	r0, r2
 800c64c:	0019      	movs	r1, r3
 800c64e:	f7f5 fee7 	bl	8002420 <__aeabi_dsub>
 800c652:	0002      	movs	r2, r0
 800c654:	000b      	movs	r3, r1
 800c656:	e01c      	b.n	800c692 <__ieee754_pow+0x136>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1cf      	bne.n	800c5fc <__ieee754_pow+0xa0>
 800c65c:	3314      	adds	r3, #20
 800c65e:	1a9a      	subs	r2, r3, r2
 800c660:	002b      	movs	r3, r5
 800c662:	4113      	asrs	r3, r2
 800c664:	0019      	movs	r1, r3
 800c666:	4091      	lsls	r1, r2
 800c668:	42a9      	cmp	r1, r5
 800c66a:	d104      	bne.n	800c676 <__ieee754_pow+0x11a>
 800c66c:	2201      	movs	r2, #1
 800c66e:	4013      	ands	r3, r2
 800c670:	1892      	adds	r2, r2, r2
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	9306      	str	r3, [sp, #24]
 800c676:	4b4a      	ldr	r3, [pc, #296]	; (800c7a0 <__ieee754_pow+0x244>)
 800c678:	429d      	cmp	r5, r3
 800c67a:	d138      	bne.n	800c6ee <__ieee754_pow+0x192>
 800c67c:	0038      	movs	r0, r7
 800c67e:	0031      	movs	r1, r6
 800c680:	9b04      	ldr	r3, [sp, #16]
 800c682:	9000      	str	r0, [sp, #0]
 800c684:	9101      	str	r1, [sp, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	da2d      	bge.n	800c6e6 <__ieee754_pow+0x18a>
 800c68a:	003a      	movs	r2, r7
 800c68c:	0033      	movs	r3, r6
 800c68e:	2000      	movs	r0, #0
 800c690:	4943      	ldr	r1, [pc, #268]	; (800c7a0 <__ieee754_pow+0x244>)
 800c692:	f7f5 f971 	bl	8001978 <__aeabi_ddiv>
 800c696:	e790      	b.n	800c5ba <__ieee754_pow+0x5e>
 800c698:	2202      	movs	r2, #2
 800c69a:	9206      	str	r2, [sp, #24]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1ad      	bne.n	800c5fc <__ieee754_pow+0xa0>
 800c6a0:	4b39      	ldr	r3, [pc, #228]	; (800c788 <__ieee754_pow+0x22c>)
 800c6a2:	429d      	cmp	r5, r3
 800c6a4:	d1e7      	bne.n	800c676 <__ieee754_pow+0x11a>
 800c6a6:	4b39      	ldr	r3, [pc, #228]	; (800c78c <__ieee754_pow+0x230>)
 800c6a8:	18e3      	adds	r3, r4, r3
 800c6aa:	431f      	orrs	r7, r3
 800c6ac:	d101      	bne.n	800c6b2 <__ieee754_pow+0x156>
 800c6ae:	f000 fc1c 	bl	800ceea <__ieee754_pow+0x98e>
 800c6b2:	4b39      	ldr	r3, [pc, #228]	; (800c798 <__ieee754_pow+0x23c>)
 800c6b4:	429c      	cmp	r4, r3
 800c6b6:	dd0b      	ble.n	800c6d0 <__ieee754_pow+0x174>
 800c6b8:	9b02      	ldr	r3, [sp, #8]
 800c6ba:	9c03      	ldr	r4, [sp, #12]
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	9401      	str	r4, [sp, #4]
 800c6c0:	9b04      	ldr	r3, [sp, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	da0f      	bge.n	800c6e6 <__ieee754_pow+0x18a>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	2400      	movs	r4, #0
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	9401      	str	r4, [sp, #4]
 800c6ce:	e00a      	b.n	800c6e6 <__ieee754_pow+0x18a>
 800c6d0:	9b04      	ldr	r3, [sp, #16]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	daf7      	bge.n	800c6c6 <__ieee754_pow+0x16a>
 800c6d6:	2280      	movs	r2, #128	; 0x80
 800c6d8:	0612      	lsls	r2, r2, #24
 800c6da:	4694      	mov	ip, r2
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	4463      	add	r3, ip
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	9800      	ldr	r0, [sp, #0]
 800c6e8:	9901      	ldr	r1, [sp, #4]
 800c6ea:	b015      	add	sp, #84	; 0x54
 800c6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ee:	2380      	movs	r3, #128	; 0x80
 800c6f0:	9a04      	ldr	r2, [sp, #16]
 800c6f2:	05db      	lsls	r3, r3, #23
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d106      	bne.n	800c706 <__ieee754_pow+0x1aa>
 800c6f8:	003a      	movs	r2, r7
 800c6fa:	0033      	movs	r3, r6
 800c6fc:	0038      	movs	r0, r7
 800c6fe:	0031      	movs	r1, r6
 800c700:	f7f5 fc22 	bl	8001f48 <__aeabi_dmul>
 800c704:	e759      	b.n	800c5ba <__ieee754_pow+0x5e>
 800c706:	4b27      	ldr	r3, [pc, #156]	; (800c7a4 <__ieee754_pow+0x248>)
 800c708:	9a04      	ldr	r2, [sp, #16]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d000      	beq.n	800c710 <__ieee754_pow+0x1b4>
 800c70e:	e775      	b.n	800c5fc <__ieee754_pow+0xa0>
 800c710:	2e00      	cmp	r6, #0
 800c712:	da00      	bge.n	800c716 <__ieee754_pow+0x1ba>
 800c714:	e772      	b.n	800c5fc <__ieee754_pow+0xa0>
 800c716:	0038      	movs	r0, r7
 800c718:	0031      	movs	r1, r6
 800c71a:	f000 fe0b 	bl	800d334 <__ieee754_sqrt>
 800c71e:	e74c      	b.n	800c5ba <__ieee754_pow+0x5e>
 800c720:	9b06      	ldr	r3, [sp, #24]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d1df      	bne.n	800c6e6 <__ieee754_pow+0x18a>
 800c726:	9800      	ldr	r0, [sp, #0]
 800c728:	2180      	movs	r1, #128	; 0x80
 800c72a:	0002      	movs	r2, r0
 800c72c:	9801      	ldr	r0, [sp, #4]
 800c72e:	0609      	lsls	r1, r1, #24
 800c730:	1843      	adds	r3, r0, r1
 800c732:	9200      	str	r2, [sp, #0]
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	e7d6      	b.n	800c6e6 <__ieee754_pow+0x18a>
 800c738:	0ff3      	lsrs	r3, r6, #31
 800c73a:	3b01      	subs	r3, #1
 800c73c:	9310      	str	r3, [sp, #64]	; 0x40
 800c73e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c740:	9b06      	ldr	r3, [sp, #24]
 800c742:	4313      	orrs	r3, r2
 800c744:	d104      	bne.n	800c750 <__ieee754_pow+0x1f4>
 800c746:	003a      	movs	r2, r7
 800c748:	0033      	movs	r3, r6
 800c74a:	0038      	movs	r0, r7
 800c74c:	0031      	movs	r1, r6
 800c74e:	e77e      	b.n	800c64e <__ieee754_pow+0xf2>
 800c750:	4b15      	ldr	r3, [pc, #84]	; (800c7a8 <__ieee754_pow+0x24c>)
 800c752:	429d      	cmp	r5, r3
 800c754:	dc00      	bgt.n	800c758 <__ieee754_pow+0x1fc>
 800c756:	e0f5      	b.n	800c944 <__ieee754_pow+0x3e8>
 800c758:	4b14      	ldr	r3, [pc, #80]	; (800c7ac <__ieee754_pow+0x250>)
 800c75a:	429d      	cmp	r5, r3
 800c75c:	dd0a      	ble.n	800c774 <__ieee754_pow+0x218>
 800c75e:	4b0e      	ldr	r3, [pc, #56]	; (800c798 <__ieee754_pow+0x23c>)
 800c760:	429c      	cmp	r4, r3
 800c762:	dc0d      	bgt.n	800c780 <__ieee754_pow+0x224>
 800c764:	9b04      	ldr	r3, [sp, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	daad      	bge.n	800c6c6 <__ieee754_pow+0x16a>
 800c76a:	4a11      	ldr	r2, [pc, #68]	; (800c7b0 <__ieee754_pow+0x254>)
 800c76c:	4b11      	ldr	r3, [pc, #68]	; (800c7b4 <__ieee754_pow+0x258>)
 800c76e:	0010      	movs	r0, r2
 800c770:	0019      	movs	r1, r3
 800c772:	e7c5      	b.n	800c700 <__ieee754_pow+0x1a4>
 800c774:	4b10      	ldr	r3, [pc, #64]	; (800c7b8 <__ieee754_pow+0x25c>)
 800c776:	429c      	cmp	r4, r3
 800c778:	ddf4      	ble.n	800c764 <__ieee754_pow+0x208>
 800c77a:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <__ieee754_pow+0x244>)
 800c77c:	429c      	cmp	r4, r3
 800c77e:	dd1d      	ble.n	800c7bc <__ieee754_pow+0x260>
 800c780:	9b04      	ldr	r3, [sp, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	dcf1      	bgt.n	800c76a <__ieee754_pow+0x20e>
 800c786:	e79e      	b.n	800c6c6 <__ieee754_pow+0x16a>
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	c0100000 	.word	0xc0100000
 800c790:	0800efd3 	.word	0x0800efd3
 800c794:	433fffff 	.word	0x433fffff
 800c798:	3fefffff 	.word	0x3fefffff
 800c79c:	fffffc01 	.word	0xfffffc01
 800c7a0:	3ff00000 	.word	0x3ff00000
 800c7a4:	3fe00000 	.word	0x3fe00000
 800c7a8:	41e00000 	.word	0x41e00000
 800c7ac:	43f00000 	.word	0x43f00000
 800c7b0:	8800759c 	.word	0x8800759c
 800c7b4:	7e37e43c 	.word	0x7e37e43c
 800c7b8:	3feffffe 	.word	0x3feffffe
 800c7bc:	2200      	movs	r2, #0
 800c7be:	9800      	ldr	r0, [sp, #0]
 800c7c0:	9901      	ldr	r1, [sp, #4]
 800c7c2:	4b52      	ldr	r3, [pc, #328]	; (800c90c <__ieee754_pow+0x3b0>)
 800c7c4:	f7f5 fe2c 	bl	8002420 <__aeabi_dsub>
 800c7c8:	22c0      	movs	r2, #192	; 0xc0
 800c7ca:	4b51      	ldr	r3, [pc, #324]	; (800c910 <__ieee754_pow+0x3b4>)
 800c7cc:	05d2      	lsls	r2, r2, #23
 800c7ce:	0004      	movs	r4, r0
 800c7d0:	000d      	movs	r5, r1
 800c7d2:	f7f5 fbb9 	bl	8001f48 <__aeabi_dmul>
 800c7d6:	4a4f      	ldr	r2, [pc, #316]	; (800c914 <__ieee754_pow+0x3b8>)
 800c7d8:	9000      	str	r0, [sp, #0]
 800c7da:	9101      	str	r1, [sp, #4]
 800c7dc:	4b4e      	ldr	r3, [pc, #312]	; (800c918 <__ieee754_pow+0x3bc>)
 800c7de:	0020      	movs	r0, r4
 800c7e0:	0029      	movs	r1, r5
 800c7e2:	f7f5 fbb1 	bl	8001f48 <__aeabi_dmul>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	9004      	str	r0, [sp, #16]
 800c7ea:	9105      	str	r1, [sp, #20]
 800c7ec:	4b4b      	ldr	r3, [pc, #300]	; (800c91c <__ieee754_pow+0x3c0>)
 800c7ee:	0020      	movs	r0, r4
 800c7f0:	0029      	movs	r1, r5
 800c7f2:	f7f5 fba9 	bl	8001f48 <__aeabi_dmul>
 800c7f6:	0002      	movs	r2, r0
 800c7f8:	000b      	movs	r3, r1
 800c7fa:	4849      	ldr	r0, [pc, #292]	; (800c920 <__ieee754_pow+0x3c4>)
 800c7fc:	4949      	ldr	r1, [pc, #292]	; (800c924 <__ieee754_pow+0x3c8>)
 800c7fe:	f7f5 fe0f 	bl	8002420 <__aeabi_dsub>
 800c802:	0022      	movs	r2, r4
 800c804:	002b      	movs	r3, r5
 800c806:	f7f5 fb9f 	bl	8001f48 <__aeabi_dmul>
 800c80a:	0002      	movs	r2, r0
 800c80c:	000b      	movs	r3, r1
 800c80e:	2000      	movs	r0, #0
 800c810:	4945      	ldr	r1, [pc, #276]	; (800c928 <__ieee754_pow+0x3cc>)
 800c812:	f7f5 fe05 	bl	8002420 <__aeabi_dsub>
 800c816:	0022      	movs	r2, r4
 800c818:	0006      	movs	r6, r0
 800c81a:	000f      	movs	r7, r1
 800c81c:	002b      	movs	r3, r5
 800c81e:	0020      	movs	r0, r4
 800c820:	0029      	movs	r1, r5
 800c822:	f7f5 fb91 	bl	8001f48 <__aeabi_dmul>
 800c826:	0002      	movs	r2, r0
 800c828:	000b      	movs	r3, r1
 800c82a:	0030      	movs	r0, r6
 800c82c:	0039      	movs	r1, r7
 800c82e:	f7f5 fb8b 	bl	8001f48 <__aeabi_dmul>
 800c832:	4a3e      	ldr	r2, [pc, #248]	; (800c92c <__ieee754_pow+0x3d0>)
 800c834:	4b36      	ldr	r3, [pc, #216]	; (800c910 <__ieee754_pow+0x3b4>)
 800c836:	f7f5 fb87 	bl	8001f48 <__aeabi_dmul>
 800c83a:	0002      	movs	r2, r0
 800c83c:	000b      	movs	r3, r1
 800c83e:	9804      	ldr	r0, [sp, #16]
 800c840:	9905      	ldr	r1, [sp, #20]
 800c842:	f7f5 fded 	bl	8002420 <__aeabi_dsub>
 800c846:	0002      	movs	r2, r0
 800c848:	000b      	movs	r3, r1
 800c84a:	0004      	movs	r4, r0
 800c84c:	000d      	movs	r5, r1
 800c84e:	9800      	ldr	r0, [sp, #0]
 800c850:	9901      	ldr	r1, [sp, #4]
 800c852:	f7f4 fd27 	bl	80012a4 <__aeabi_dadd>
 800c856:	9a00      	ldr	r2, [sp, #0]
 800c858:	9b01      	ldr	r3, [sp, #4]
 800c85a:	2000      	movs	r0, #0
 800c85c:	000f      	movs	r7, r1
 800c85e:	0006      	movs	r6, r0
 800c860:	f7f5 fdde 	bl	8002420 <__aeabi_dsub>
 800c864:	0002      	movs	r2, r0
 800c866:	000b      	movs	r3, r1
 800c868:	0020      	movs	r0, r4
 800c86a:	0029      	movs	r1, r5
 800c86c:	f7f5 fdd8 	bl	8002420 <__aeabi_dsub>
 800c870:	9b06      	ldr	r3, [sp, #24]
 800c872:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c874:	3b01      	subs	r3, #1
 800c876:	9004      	str	r0, [sp, #16]
 800c878:	9105      	str	r1, [sp, #20]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	d000      	beq.n	800c880 <__ieee754_pow+0x324>
 800c87e:	e1e0      	b.n	800cc42 <__ieee754_pow+0x6e6>
 800c880:	2300      	movs	r3, #0
 800c882:	4c2b      	ldr	r4, [pc, #172]	; (800c930 <__ieee754_pow+0x3d4>)
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	9401      	str	r4, [sp, #4]
 800c888:	9c02      	ldr	r4, [sp, #8]
 800c88a:	9d03      	ldr	r5, [sp, #12]
 800c88c:	9802      	ldr	r0, [sp, #8]
 800c88e:	9903      	ldr	r1, [sp, #12]
 800c890:	2400      	movs	r4, #0
 800c892:	002b      	movs	r3, r5
 800c894:	0022      	movs	r2, r4
 800c896:	f7f5 fdc3 	bl	8002420 <__aeabi_dsub>
 800c89a:	0032      	movs	r2, r6
 800c89c:	003b      	movs	r3, r7
 800c89e:	f7f5 fb53 	bl	8001f48 <__aeabi_dmul>
 800c8a2:	9a02      	ldr	r2, [sp, #8]
 800c8a4:	9b03      	ldr	r3, [sp, #12]
 800c8a6:	9006      	str	r0, [sp, #24]
 800c8a8:	9107      	str	r1, [sp, #28]
 800c8aa:	9804      	ldr	r0, [sp, #16]
 800c8ac:	9905      	ldr	r1, [sp, #20]
 800c8ae:	f7f5 fb4b 	bl	8001f48 <__aeabi_dmul>
 800c8b2:	0002      	movs	r2, r0
 800c8b4:	000b      	movs	r3, r1
 800c8b6:	9806      	ldr	r0, [sp, #24]
 800c8b8:	9907      	ldr	r1, [sp, #28]
 800c8ba:	f7f4 fcf3 	bl	80012a4 <__aeabi_dadd>
 800c8be:	0022      	movs	r2, r4
 800c8c0:	002b      	movs	r3, r5
 800c8c2:	9004      	str	r0, [sp, #16]
 800c8c4:	9105      	str	r1, [sp, #20]
 800c8c6:	0030      	movs	r0, r6
 800c8c8:	0039      	movs	r1, r7
 800c8ca:	f7f5 fb3d 	bl	8001f48 <__aeabi_dmul>
 800c8ce:	0006      	movs	r6, r0
 800c8d0:	000f      	movs	r7, r1
 800c8d2:	000b      	movs	r3, r1
 800c8d4:	0002      	movs	r2, r0
 800c8d6:	9804      	ldr	r0, [sp, #16]
 800c8d8:	9905      	ldr	r1, [sp, #20]
 800c8da:	9606      	str	r6, [sp, #24]
 800c8dc:	9707      	str	r7, [sp, #28]
 800c8de:	f7f4 fce1 	bl	80012a4 <__aeabi_dadd>
 800c8e2:	4b14      	ldr	r3, [pc, #80]	; (800c934 <__ieee754_pow+0x3d8>)
 800c8e4:	0005      	movs	r5, r0
 800c8e6:	000c      	movs	r4, r1
 800c8e8:	9108      	str	r1, [sp, #32]
 800c8ea:	4299      	cmp	r1, r3
 800c8ec:	dc00      	bgt.n	800c8f0 <__ieee754_pow+0x394>
 800c8ee:	e2da      	b.n	800cea6 <__ieee754_pow+0x94a>
 800c8f0:	4b11      	ldr	r3, [pc, #68]	; (800c938 <__ieee754_pow+0x3dc>)
 800c8f2:	18cb      	adds	r3, r1, r3
 800c8f4:	4303      	orrs	r3, r0
 800c8f6:	d100      	bne.n	800c8fa <__ieee754_pow+0x39e>
 800c8f8:	e1dc      	b.n	800ccb4 <__ieee754_pow+0x758>
 800c8fa:	9800      	ldr	r0, [sp, #0]
 800c8fc:	9901      	ldr	r1, [sp, #4]
 800c8fe:	4a0f      	ldr	r2, [pc, #60]	; (800c93c <__ieee754_pow+0x3e0>)
 800c900:	4b0f      	ldr	r3, [pc, #60]	; (800c940 <__ieee754_pow+0x3e4>)
 800c902:	f7f5 fb21 	bl	8001f48 <__aeabi_dmul>
 800c906:	4a0d      	ldr	r2, [pc, #52]	; (800c93c <__ieee754_pow+0x3e0>)
 800c908:	4b0d      	ldr	r3, [pc, #52]	; (800c940 <__ieee754_pow+0x3e4>)
 800c90a:	e6f9      	b.n	800c700 <__ieee754_pow+0x1a4>
 800c90c:	3ff00000 	.word	0x3ff00000
 800c910:	3ff71547 	.word	0x3ff71547
 800c914:	f85ddf44 	.word	0xf85ddf44
 800c918:	3e54ae0b 	.word	0x3e54ae0b
 800c91c:	3fd00000 	.word	0x3fd00000
 800c920:	55555555 	.word	0x55555555
 800c924:	3fd55555 	.word	0x3fd55555
 800c928:	3fe00000 	.word	0x3fe00000
 800c92c:	652b82fe 	.word	0x652b82fe
 800c930:	bff00000 	.word	0xbff00000
 800c934:	408fffff 	.word	0x408fffff
 800c938:	bf700000 	.word	0xbf700000
 800c93c:	8800759c 	.word	0x8800759c
 800c940:	7e37e43c 	.word	0x7e37e43c
 800c944:	4bc0      	ldr	r3, [pc, #768]	; (800cc48 <__ieee754_pow+0x6ec>)
 800c946:	2200      	movs	r2, #0
 800c948:	4233      	tst	r3, r6
 800c94a:	d10a      	bne.n	800c962 <__ieee754_pow+0x406>
 800c94c:	9800      	ldr	r0, [sp, #0]
 800c94e:	9901      	ldr	r1, [sp, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	4bbe      	ldr	r3, [pc, #760]	; (800cc4c <__ieee754_pow+0x6f0>)
 800c954:	f7f5 faf8 	bl	8001f48 <__aeabi_dmul>
 800c958:	2235      	movs	r2, #53	; 0x35
 800c95a:	9000      	str	r0, [sp, #0]
 800c95c:	9101      	str	r1, [sp, #4]
 800c95e:	9c01      	ldr	r4, [sp, #4]
 800c960:	4252      	negs	r2, r2
 800c962:	49bb      	ldr	r1, [pc, #748]	; (800cc50 <__ieee754_pow+0x6f4>)
 800c964:	1523      	asrs	r3, r4, #20
 800c966:	185b      	adds	r3, r3, r1
 800c968:	189b      	adds	r3, r3, r2
 800c96a:	0324      	lsls	r4, r4, #12
 800c96c:	4db9      	ldr	r5, [pc, #740]	; (800cc54 <__ieee754_pow+0x6f8>)
 800c96e:	930d      	str	r3, [sp, #52]	; 0x34
 800c970:	4bb9      	ldr	r3, [pc, #740]	; (800cc58 <__ieee754_pow+0x6fc>)
 800c972:	0b22      	lsrs	r2, r4, #12
 800c974:	4315      	orrs	r5, r2
 800c976:	2400      	movs	r4, #0
 800c978:	429a      	cmp	r2, r3
 800c97a:	dd09      	ble.n	800c990 <__ieee754_pow+0x434>
 800c97c:	4bb7      	ldr	r3, [pc, #732]	; (800cc5c <__ieee754_pow+0x700>)
 800c97e:	3401      	adds	r4, #1
 800c980:	429a      	cmp	r2, r3
 800c982:	dd05      	ble.n	800c990 <__ieee754_pow+0x434>
 800c984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c986:	191b      	adds	r3, r3, r4
 800c988:	2400      	movs	r4, #0
 800c98a:	930d      	str	r3, [sp, #52]	; 0x34
 800c98c:	4bb4      	ldr	r3, [pc, #720]	; (800cc60 <__ieee754_pow+0x704>)
 800c98e:	18ed      	adds	r5, r5, r3
 800c990:	9800      	ldr	r0, [sp, #0]
 800c992:	9901      	ldr	r1, [sp, #4]
 800c994:	0029      	movs	r1, r5
 800c996:	00e3      	lsls	r3, r4, #3
 800c998:	9311      	str	r3, [sp, #68]	; 0x44
 800c99a:	4bb2      	ldr	r3, [pc, #712]	; (800cc64 <__ieee754_pow+0x708>)
 800c99c:	00e2      	lsls	r2, r4, #3
 800c99e:	189b      	adds	r3, r3, r2
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	900e      	str	r0, [sp, #56]	; 0x38
 800c9a6:	910f      	str	r1, [sp, #60]	; 0x3c
 800c9a8:	920a      	str	r2, [sp, #40]	; 0x28
 800c9aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9ac:	f7f5 fd38 	bl	8002420 <__aeabi_dsub>
 800c9b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9b4:	0006      	movs	r6, r0
 800c9b6:	000f      	movs	r7, r1
 800c9b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9bc:	f7f4 fc72 	bl	80012a4 <__aeabi_dadd>
 800c9c0:	0002      	movs	r2, r0
 800c9c2:	000b      	movs	r3, r1
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	49a3      	ldr	r1, [pc, #652]	; (800cc54 <__ieee754_pow+0x6f8>)
 800c9c8:	f7f4 ffd6 	bl	8001978 <__aeabi_ddiv>
 800c9cc:	0002      	movs	r2, r0
 800c9ce:	000b      	movs	r3, r1
 800c9d0:	9012      	str	r0, [sp, #72]	; 0x48
 800c9d2:	9113      	str	r1, [sp, #76]	; 0x4c
 800c9d4:	0030      	movs	r0, r6
 800c9d6:	0039      	movs	r1, r7
 800c9d8:	f7f5 fab6 	bl	8001f48 <__aeabi_dmul>
 800c9dc:	9008      	str	r0, [sp, #32]
 800c9de:	9109      	str	r1, [sp, #36]	; 0x24
 800c9e0:	9a08      	ldr	r2, [sp, #32]
 800c9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e4:	2180      	movs	r1, #128	; 0x80
 800c9e6:	9204      	str	r2, [sp, #16]
 800c9e8:	9305      	str	r3, [sp, #20]
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	0589      	lsls	r1, r1, #22
 800c9ee:	106d      	asrs	r5, r5, #1
 800c9f0:	430d      	orrs	r5, r1
 800c9f2:	2180      	movs	r1, #128	; 0x80
 800c9f4:	9304      	str	r3, [sp, #16]
 800c9f6:	9a04      	ldr	r2, [sp, #16]
 800c9f8:	9b05      	ldr	r3, [sp, #20]
 800c9fa:	9200      	str	r2, [sp, #0]
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	0309      	lsls	r1, r1, #12
 800ca02:	186d      	adds	r5, r5, r1
 800ca04:	04a1      	lsls	r1, r4, #18
 800ca06:	186b      	adds	r3, r5, r1
 800ca08:	9800      	ldr	r0, [sp, #0]
 800ca0a:	9901      	ldr	r1, [sp, #4]
 800ca0c:	0014      	movs	r4, r2
 800ca0e:	001d      	movs	r5, r3
 800ca10:	f7f5 fa9a 	bl	8001f48 <__aeabi_dmul>
 800ca14:	0002      	movs	r2, r0
 800ca16:	000b      	movs	r3, r1
 800ca18:	0030      	movs	r0, r6
 800ca1a:	0039      	movs	r1, r7
 800ca1c:	f7f5 fd00 	bl	8002420 <__aeabi_dsub>
 800ca20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca24:	0006      	movs	r6, r0
 800ca26:	000f      	movs	r7, r1
 800ca28:	0020      	movs	r0, r4
 800ca2a:	0029      	movs	r1, r5
 800ca2c:	f7f5 fcf8 	bl	8002420 <__aeabi_dsub>
 800ca30:	0002      	movs	r2, r0
 800ca32:	000b      	movs	r3, r1
 800ca34:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ca36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca38:	f7f5 fcf2 	bl	8002420 <__aeabi_dsub>
 800ca3c:	9a00      	ldr	r2, [sp, #0]
 800ca3e:	9b01      	ldr	r3, [sp, #4]
 800ca40:	f7f5 fa82 	bl	8001f48 <__aeabi_dmul>
 800ca44:	0002      	movs	r2, r0
 800ca46:	000b      	movs	r3, r1
 800ca48:	0030      	movs	r0, r6
 800ca4a:	0039      	movs	r1, r7
 800ca4c:	f7f5 fce8 	bl	8002420 <__aeabi_dsub>
 800ca50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca54:	f7f5 fa78 	bl	8001f48 <__aeabi_dmul>
 800ca58:	9a08      	ldr	r2, [sp, #32]
 800ca5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca5c:	900a      	str	r0, [sp, #40]	; 0x28
 800ca5e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ca60:	0010      	movs	r0, r2
 800ca62:	0019      	movs	r1, r3
 800ca64:	f7f5 fa70 	bl	8001f48 <__aeabi_dmul>
 800ca68:	0006      	movs	r6, r0
 800ca6a:	000f      	movs	r7, r1
 800ca6c:	4a7e      	ldr	r2, [pc, #504]	; (800cc68 <__ieee754_pow+0x70c>)
 800ca6e:	4b7f      	ldr	r3, [pc, #508]	; (800cc6c <__ieee754_pow+0x710>)
 800ca70:	f7f5 fa6a 	bl	8001f48 <__aeabi_dmul>
 800ca74:	4a7e      	ldr	r2, [pc, #504]	; (800cc70 <__ieee754_pow+0x714>)
 800ca76:	4b7f      	ldr	r3, [pc, #508]	; (800cc74 <__ieee754_pow+0x718>)
 800ca78:	f7f4 fc14 	bl	80012a4 <__aeabi_dadd>
 800ca7c:	0032      	movs	r2, r6
 800ca7e:	003b      	movs	r3, r7
 800ca80:	f7f5 fa62 	bl	8001f48 <__aeabi_dmul>
 800ca84:	4a7c      	ldr	r2, [pc, #496]	; (800cc78 <__ieee754_pow+0x71c>)
 800ca86:	4b7d      	ldr	r3, [pc, #500]	; (800cc7c <__ieee754_pow+0x720>)
 800ca88:	f7f4 fc0c 	bl	80012a4 <__aeabi_dadd>
 800ca8c:	0032      	movs	r2, r6
 800ca8e:	003b      	movs	r3, r7
 800ca90:	f7f5 fa5a 	bl	8001f48 <__aeabi_dmul>
 800ca94:	4a7a      	ldr	r2, [pc, #488]	; (800cc80 <__ieee754_pow+0x724>)
 800ca96:	4b7b      	ldr	r3, [pc, #492]	; (800cc84 <__ieee754_pow+0x728>)
 800ca98:	f7f4 fc04 	bl	80012a4 <__aeabi_dadd>
 800ca9c:	0032      	movs	r2, r6
 800ca9e:	003b      	movs	r3, r7
 800caa0:	f7f5 fa52 	bl	8001f48 <__aeabi_dmul>
 800caa4:	4a78      	ldr	r2, [pc, #480]	; (800cc88 <__ieee754_pow+0x72c>)
 800caa6:	4b79      	ldr	r3, [pc, #484]	; (800cc8c <__ieee754_pow+0x730>)
 800caa8:	f7f4 fbfc 	bl	80012a4 <__aeabi_dadd>
 800caac:	0032      	movs	r2, r6
 800caae:	003b      	movs	r3, r7
 800cab0:	f7f5 fa4a 	bl	8001f48 <__aeabi_dmul>
 800cab4:	4a76      	ldr	r2, [pc, #472]	; (800cc90 <__ieee754_pow+0x734>)
 800cab6:	4b77      	ldr	r3, [pc, #476]	; (800cc94 <__ieee754_pow+0x738>)
 800cab8:	f7f4 fbf4 	bl	80012a4 <__aeabi_dadd>
 800cabc:	0032      	movs	r2, r6
 800cabe:	0004      	movs	r4, r0
 800cac0:	000d      	movs	r5, r1
 800cac2:	003b      	movs	r3, r7
 800cac4:	0030      	movs	r0, r6
 800cac6:	0039      	movs	r1, r7
 800cac8:	f7f5 fa3e 	bl	8001f48 <__aeabi_dmul>
 800cacc:	0002      	movs	r2, r0
 800cace:	000b      	movs	r3, r1
 800cad0:	0020      	movs	r0, r4
 800cad2:	0029      	movs	r1, r5
 800cad4:	f7f5 fa38 	bl	8001f48 <__aeabi_dmul>
 800cad8:	9a00      	ldr	r2, [sp, #0]
 800cada:	9b01      	ldr	r3, [sp, #4]
 800cadc:	0004      	movs	r4, r0
 800cade:	000d      	movs	r5, r1
 800cae0:	9808      	ldr	r0, [sp, #32]
 800cae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cae4:	f7f4 fbde 	bl	80012a4 <__aeabi_dadd>
 800cae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caec:	f7f5 fa2c 	bl	8001f48 <__aeabi_dmul>
 800caf0:	0022      	movs	r2, r4
 800caf2:	002b      	movs	r3, r5
 800caf4:	f7f4 fbd6 	bl	80012a4 <__aeabi_dadd>
 800caf8:	9a00      	ldr	r2, [sp, #0]
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	900e      	str	r0, [sp, #56]	; 0x38
 800cafe:	910f      	str	r1, [sp, #60]	; 0x3c
 800cb00:	0010      	movs	r0, r2
 800cb02:	0019      	movs	r1, r3
 800cb04:	f7f5 fa20 	bl	8001f48 <__aeabi_dmul>
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4b63      	ldr	r3, [pc, #396]	; (800cc98 <__ieee754_pow+0x73c>)
 800cb0c:	0004      	movs	r4, r0
 800cb0e:	000d      	movs	r5, r1
 800cb10:	f7f4 fbc8 	bl	80012a4 <__aeabi_dadd>
 800cb14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb18:	f7f4 fbc4 	bl	80012a4 <__aeabi_dadd>
 800cb1c:	9e04      	ldr	r6, [sp, #16]
 800cb1e:	000f      	movs	r7, r1
 800cb20:	0032      	movs	r2, r6
 800cb22:	000b      	movs	r3, r1
 800cb24:	9800      	ldr	r0, [sp, #0]
 800cb26:	9901      	ldr	r1, [sp, #4]
 800cb28:	f7f5 fa0e 	bl	8001f48 <__aeabi_dmul>
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	9000      	str	r0, [sp, #0]
 800cb30:	9101      	str	r1, [sp, #4]
 800cb32:	4b59      	ldr	r3, [pc, #356]	; (800cc98 <__ieee754_pow+0x73c>)
 800cb34:	0030      	movs	r0, r6
 800cb36:	0039      	movs	r1, r7
 800cb38:	f7f5 fc72 	bl	8002420 <__aeabi_dsub>
 800cb3c:	0022      	movs	r2, r4
 800cb3e:	002b      	movs	r3, r5
 800cb40:	f7f5 fc6e 	bl	8002420 <__aeabi_dsub>
 800cb44:	0002      	movs	r2, r0
 800cb46:	000b      	movs	r3, r1
 800cb48:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cb4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cb4c:	f7f5 fc68 	bl	8002420 <__aeabi_dsub>
 800cb50:	9a08      	ldr	r2, [sp, #32]
 800cb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb54:	f7f5 f9f8 	bl	8001f48 <__aeabi_dmul>
 800cb58:	0032      	movs	r2, r6
 800cb5a:	0004      	movs	r4, r0
 800cb5c:	000d      	movs	r5, r1
 800cb5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb62:	003b      	movs	r3, r7
 800cb64:	f7f5 f9f0 	bl	8001f48 <__aeabi_dmul>
 800cb68:	0002      	movs	r2, r0
 800cb6a:	000b      	movs	r3, r1
 800cb6c:	0020      	movs	r0, r4
 800cb6e:	0029      	movs	r1, r5
 800cb70:	f7f4 fb98 	bl	80012a4 <__aeabi_dadd>
 800cb74:	0004      	movs	r4, r0
 800cb76:	000d      	movs	r5, r1
 800cb78:	0002      	movs	r2, r0
 800cb7a:	000b      	movs	r3, r1
 800cb7c:	9800      	ldr	r0, [sp, #0]
 800cb7e:	9901      	ldr	r1, [sp, #4]
 800cb80:	f7f4 fb90 	bl	80012a4 <__aeabi_dadd>
 800cb84:	22e0      	movs	r2, #224	; 0xe0
 800cb86:	9e04      	ldr	r6, [sp, #16]
 800cb88:	4b44      	ldr	r3, [pc, #272]	; (800cc9c <__ieee754_pow+0x740>)
 800cb8a:	0030      	movs	r0, r6
 800cb8c:	0612      	lsls	r2, r2, #24
 800cb8e:	000f      	movs	r7, r1
 800cb90:	f7f5 f9da 	bl	8001f48 <__aeabi_dmul>
 800cb94:	9008      	str	r0, [sp, #32]
 800cb96:	9109      	str	r1, [sp, #36]	; 0x24
 800cb98:	9a00      	ldr	r2, [sp, #0]
 800cb9a:	9b01      	ldr	r3, [sp, #4]
 800cb9c:	0030      	movs	r0, r6
 800cb9e:	0039      	movs	r1, r7
 800cba0:	f7f5 fc3e 	bl	8002420 <__aeabi_dsub>
 800cba4:	0002      	movs	r2, r0
 800cba6:	000b      	movs	r3, r1
 800cba8:	0020      	movs	r0, r4
 800cbaa:	0029      	movs	r1, r5
 800cbac:	f7f5 fc38 	bl	8002420 <__aeabi_dsub>
 800cbb0:	4a3b      	ldr	r2, [pc, #236]	; (800cca0 <__ieee754_pow+0x744>)
 800cbb2:	4b3a      	ldr	r3, [pc, #232]	; (800cc9c <__ieee754_pow+0x740>)
 800cbb4:	f7f5 f9c8 	bl	8001f48 <__aeabi_dmul>
 800cbb8:	4a3a      	ldr	r2, [pc, #232]	; (800cca4 <__ieee754_pow+0x748>)
 800cbba:	0004      	movs	r4, r0
 800cbbc:	000d      	movs	r5, r1
 800cbbe:	0030      	movs	r0, r6
 800cbc0:	0039      	movs	r1, r7
 800cbc2:	4b39      	ldr	r3, [pc, #228]	; (800cca8 <__ieee754_pow+0x74c>)
 800cbc4:	f7f5 f9c0 	bl	8001f48 <__aeabi_dmul>
 800cbc8:	0002      	movs	r2, r0
 800cbca:	000b      	movs	r3, r1
 800cbcc:	0020      	movs	r0, r4
 800cbce:	0029      	movs	r1, r5
 800cbd0:	f7f4 fb68 	bl	80012a4 <__aeabi_dadd>
 800cbd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cbd6:	4b35      	ldr	r3, [pc, #212]	; (800ccac <__ieee754_pow+0x750>)
 800cbd8:	189b      	adds	r3, r3, r2
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f7f4 fb61 	bl	80012a4 <__aeabi_dadd>
 800cbe2:	900a      	str	r0, [sp, #40]	; 0x28
 800cbe4:	910b      	str	r1, [sp, #44]	; 0x2c
 800cbe6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cbe8:	f7f5 ffe2 	bl	8002bb0 <__aeabi_i2d>
 800cbec:	0004      	movs	r4, r0
 800cbee:	000d      	movs	r5, r1
 800cbf0:	9808      	ldr	r0, [sp, #32]
 800cbf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cbf6:	4b2e      	ldr	r3, [pc, #184]	; (800ccb0 <__ieee754_pow+0x754>)
 800cbf8:	189b      	adds	r3, r3, r2
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	9200      	str	r2, [sp, #0]
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc06:	f7f4 fb4d 	bl	80012a4 <__aeabi_dadd>
 800cc0a:	9a00      	ldr	r2, [sp, #0]
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	f7f4 fb49 	bl	80012a4 <__aeabi_dadd>
 800cc12:	0022      	movs	r2, r4
 800cc14:	002b      	movs	r3, r5
 800cc16:	f7f4 fb45 	bl	80012a4 <__aeabi_dadd>
 800cc1a:	9804      	ldr	r0, [sp, #16]
 800cc1c:	0022      	movs	r2, r4
 800cc1e:	002b      	movs	r3, r5
 800cc20:	0006      	movs	r6, r0
 800cc22:	000f      	movs	r7, r1
 800cc24:	f7f5 fbfc 	bl	8002420 <__aeabi_dsub>
 800cc28:	9a00      	ldr	r2, [sp, #0]
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	f7f5 fbf8 	bl	8002420 <__aeabi_dsub>
 800cc30:	9a08      	ldr	r2, [sp, #32]
 800cc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc34:	f7f5 fbf4 	bl	8002420 <__aeabi_dsub>
 800cc38:	0002      	movs	r2, r0
 800cc3a:	000b      	movs	r3, r1
 800cc3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc40:	e614      	b.n	800c86c <__ieee754_pow+0x310>
 800cc42:	2300      	movs	r3, #0
 800cc44:	4c03      	ldr	r4, [pc, #12]	; (800cc54 <__ieee754_pow+0x6f8>)
 800cc46:	e61d      	b.n	800c884 <__ieee754_pow+0x328>
 800cc48:	7ff00000 	.word	0x7ff00000
 800cc4c:	43400000 	.word	0x43400000
 800cc50:	fffffc01 	.word	0xfffffc01
 800cc54:	3ff00000 	.word	0x3ff00000
 800cc58:	0003988e 	.word	0x0003988e
 800cc5c:	000bb679 	.word	0x000bb679
 800cc60:	fff00000 	.word	0xfff00000
 800cc64:	0800f260 	.word	0x0800f260
 800cc68:	4a454eef 	.word	0x4a454eef
 800cc6c:	3fca7e28 	.word	0x3fca7e28
 800cc70:	93c9db65 	.word	0x93c9db65
 800cc74:	3fcd864a 	.word	0x3fcd864a
 800cc78:	a91d4101 	.word	0xa91d4101
 800cc7c:	3fd17460 	.word	0x3fd17460
 800cc80:	518f264d 	.word	0x518f264d
 800cc84:	3fd55555 	.word	0x3fd55555
 800cc88:	db6fabff 	.word	0xdb6fabff
 800cc8c:	3fdb6db6 	.word	0x3fdb6db6
 800cc90:	33333303 	.word	0x33333303
 800cc94:	3fe33333 	.word	0x3fe33333
 800cc98:	40080000 	.word	0x40080000
 800cc9c:	3feec709 	.word	0x3feec709
 800cca0:	dc3a03fd 	.word	0xdc3a03fd
 800cca4:	145b01f5 	.word	0x145b01f5
 800cca8:	be3e2fe0 	.word	0xbe3e2fe0
 800ccac:	0800f280 	.word	0x0800f280
 800ccb0:	0800f270 	.word	0x0800f270
 800ccb4:	4a8f      	ldr	r2, [pc, #572]	; (800cef4 <__ieee754_pow+0x998>)
 800ccb6:	4b90      	ldr	r3, [pc, #576]	; (800cef8 <__ieee754_pow+0x99c>)
 800ccb8:	9804      	ldr	r0, [sp, #16]
 800ccba:	9905      	ldr	r1, [sp, #20]
 800ccbc:	f7f4 faf2 	bl	80012a4 <__aeabi_dadd>
 800ccc0:	0032      	movs	r2, r6
 800ccc2:	9002      	str	r0, [sp, #8]
 800ccc4:	9103      	str	r1, [sp, #12]
 800ccc6:	003b      	movs	r3, r7
 800ccc8:	0028      	movs	r0, r5
 800ccca:	0021      	movs	r1, r4
 800cccc:	f7f5 fba8 	bl	8002420 <__aeabi_dsub>
 800ccd0:	0002      	movs	r2, r0
 800ccd2:	000b      	movs	r3, r1
 800ccd4:	9802      	ldr	r0, [sp, #8]
 800ccd6:	9903      	ldr	r1, [sp, #12]
 800ccd8:	f7f6 f894 	bl	8002e04 <__aeabi_dcmpgt>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d000      	beq.n	800cce2 <__ieee754_pow+0x786>
 800cce0:	e60b      	b.n	800c8fa <__ieee754_pow+0x39e>
 800cce2:	2100      	movs	r1, #0
 800cce4:	4a85      	ldr	r2, [pc, #532]	; (800cefc <__ieee754_pow+0x9a0>)
 800cce6:	0063      	lsls	r3, r4, #1
 800cce8:	085b      	lsrs	r3, r3, #1
 800ccea:	9102      	str	r1, [sp, #8]
 800ccec:	4293      	cmp	r3, r2
 800ccee:	dd25      	ble.n	800cd3c <__ieee754_pow+0x7e0>
 800ccf0:	4a83      	ldr	r2, [pc, #524]	; (800cf00 <__ieee754_pow+0x9a4>)
 800ccf2:	151b      	asrs	r3, r3, #20
 800ccf4:	189b      	adds	r3, r3, r2
 800ccf6:	2280      	movs	r2, #128	; 0x80
 800ccf8:	0352      	lsls	r2, r2, #13
 800ccfa:	4694      	mov	ip, r2
 800ccfc:	411a      	asrs	r2, r3
 800ccfe:	1914      	adds	r4, r2, r4
 800cd00:	4b80      	ldr	r3, [pc, #512]	; (800cf04 <__ieee754_pow+0x9a8>)
 800cd02:	0060      	lsls	r0, r4, #1
 800cd04:	4d80      	ldr	r5, [pc, #512]	; (800cf08 <__ieee754_pow+0x9ac>)
 800cd06:	0d40      	lsrs	r0, r0, #21
 800cd08:	18c0      	adds	r0, r0, r3
 800cd0a:	4105      	asrs	r5, r0
 800cd0c:	0021      	movs	r1, r4
 800cd0e:	43a9      	bics	r1, r5
 800cd10:	000b      	movs	r3, r1
 800cd12:	4661      	mov	r1, ip
 800cd14:	0324      	lsls	r4, r4, #12
 800cd16:	0b24      	lsrs	r4, r4, #12
 800cd18:	4321      	orrs	r1, r4
 800cd1a:	2414      	movs	r4, #20
 800cd1c:	1a20      	subs	r0, r4, r0
 800cd1e:	4101      	asrs	r1, r0
 800cd20:	9102      	str	r1, [sp, #8]
 800cd22:	9908      	ldr	r1, [sp, #32]
 800cd24:	2200      	movs	r2, #0
 800cd26:	2900      	cmp	r1, #0
 800cd28:	da02      	bge.n	800cd30 <__ieee754_pow+0x7d4>
 800cd2a:	9902      	ldr	r1, [sp, #8]
 800cd2c:	4249      	negs	r1, r1
 800cd2e:	9102      	str	r1, [sp, #8]
 800cd30:	0030      	movs	r0, r6
 800cd32:	0039      	movs	r1, r7
 800cd34:	f7f5 fb74 	bl	8002420 <__aeabi_dsub>
 800cd38:	9006      	str	r0, [sp, #24]
 800cd3a:	9107      	str	r1, [sp, #28]
 800cd3c:	9a04      	ldr	r2, [sp, #16]
 800cd3e:	9b05      	ldr	r3, [sp, #20]
 800cd40:	9806      	ldr	r0, [sp, #24]
 800cd42:	9907      	ldr	r1, [sp, #28]
 800cd44:	2600      	movs	r6, #0
 800cd46:	f7f4 faad 	bl	80012a4 <__aeabi_dadd>
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	0030      	movs	r0, r6
 800cd4e:	4b6f      	ldr	r3, [pc, #444]	; (800cf0c <__ieee754_pow+0x9b0>)
 800cd50:	000f      	movs	r7, r1
 800cd52:	f7f5 f8f9 	bl	8001f48 <__aeabi_dmul>
 800cd56:	9a06      	ldr	r2, [sp, #24]
 800cd58:	9b07      	ldr	r3, [sp, #28]
 800cd5a:	9008      	str	r0, [sp, #32]
 800cd5c:	9109      	str	r1, [sp, #36]	; 0x24
 800cd5e:	0030      	movs	r0, r6
 800cd60:	0039      	movs	r1, r7
 800cd62:	f7f5 fb5d 	bl	8002420 <__aeabi_dsub>
 800cd66:	0002      	movs	r2, r0
 800cd68:	000b      	movs	r3, r1
 800cd6a:	9804      	ldr	r0, [sp, #16]
 800cd6c:	9905      	ldr	r1, [sp, #20]
 800cd6e:	f7f5 fb57 	bl	8002420 <__aeabi_dsub>
 800cd72:	4a67      	ldr	r2, [pc, #412]	; (800cf10 <__ieee754_pow+0x9b4>)
 800cd74:	4b67      	ldr	r3, [pc, #412]	; (800cf14 <__ieee754_pow+0x9b8>)
 800cd76:	f7f5 f8e7 	bl	8001f48 <__aeabi_dmul>
 800cd7a:	4a67      	ldr	r2, [pc, #412]	; (800cf18 <__ieee754_pow+0x9bc>)
 800cd7c:	0004      	movs	r4, r0
 800cd7e:	000d      	movs	r5, r1
 800cd80:	0030      	movs	r0, r6
 800cd82:	0039      	movs	r1, r7
 800cd84:	4b65      	ldr	r3, [pc, #404]	; (800cf1c <__ieee754_pow+0x9c0>)
 800cd86:	f7f5 f8df 	bl	8001f48 <__aeabi_dmul>
 800cd8a:	0002      	movs	r2, r0
 800cd8c:	000b      	movs	r3, r1
 800cd8e:	0020      	movs	r0, r4
 800cd90:	0029      	movs	r1, r5
 800cd92:	f7f4 fa87 	bl	80012a4 <__aeabi_dadd>
 800cd96:	0004      	movs	r4, r0
 800cd98:	000d      	movs	r5, r1
 800cd9a:	0002      	movs	r2, r0
 800cd9c:	000b      	movs	r3, r1
 800cd9e:	9808      	ldr	r0, [sp, #32]
 800cda0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cda2:	f7f4 fa7f 	bl	80012a4 <__aeabi_dadd>
 800cda6:	9a08      	ldr	r2, [sp, #32]
 800cda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdaa:	0006      	movs	r6, r0
 800cdac:	000f      	movs	r7, r1
 800cdae:	f7f5 fb37 	bl	8002420 <__aeabi_dsub>
 800cdb2:	0002      	movs	r2, r0
 800cdb4:	000b      	movs	r3, r1
 800cdb6:	0020      	movs	r0, r4
 800cdb8:	0029      	movs	r1, r5
 800cdba:	f7f5 fb31 	bl	8002420 <__aeabi_dsub>
 800cdbe:	0032      	movs	r2, r6
 800cdc0:	9004      	str	r0, [sp, #16]
 800cdc2:	9105      	str	r1, [sp, #20]
 800cdc4:	003b      	movs	r3, r7
 800cdc6:	0030      	movs	r0, r6
 800cdc8:	0039      	movs	r1, r7
 800cdca:	f7f5 f8bd 	bl	8001f48 <__aeabi_dmul>
 800cdce:	0004      	movs	r4, r0
 800cdd0:	000d      	movs	r5, r1
 800cdd2:	4a53      	ldr	r2, [pc, #332]	; (800cf20 <__ieee754_pow+0x9c4>)
 800cdd4:	4b53      	ldr	r3, [pc, #332]	; (800cf24 <__ieee754_pow+0x9c8>)
 800cdd6:	f7f5 f8b7 	bl	8001f48 <__aeabi_dmul>
 800cdda:	4a53      	ldr	r2, [pc, #332]	; (800cf28 <__ieee754_pow+0x9cc>)
 800cddc:	4b53      	ldr	r3, [pc, #332]	; (800cf2c <__ieee754_pow+0x9d0>)
 800cdde:	f7f5 fb1f 	bl	8002420 <__aeabi_dsub>
 800cde2:	0022      	movs	r2, r4
 800cde4:	002b      	movs	r3, r5
 800cde6:	f7f5 f8af 	bl	8001f48 <__aeabi_dmul>
 800cdea:	4a51      	ldr	r2, [pc, #324]	; (800cf30 <__ieee754_pow+0x9d4>)
 800cdec:	4b51      	ldr	r3, [pc, #324]	; (800cf34 <__ieee754_pow+0x9d8>)
 800cdee:	f7f4 fa59 	bl	80012a4 <__aeabi_dadd>
 800cdf2:	0022      	movs	r2, r4
 800cdf4:	002b      	movs	r3, r5
 800cdf6:	f7f5 f8a7 	bl	8001f48 <__aeabi_dmul>
 800cdfa:	4a4f      	ldr	r2, [pc, #316]	; (800cf38 <__ieee754_pow+0x9dc>)
 800cdfc:	4b4f      	ldr	r3, [pc, #316]	; (800cf3c <__ieee754_pow+0x9e0>)
 800cdfe:	f7f5 fb0f 	bl	8002420 <__aeabi_dsub>
 800ce02:	0022      	movs	r2, r4
 800ce04:	002b      	movs	r3, r5
 800ce06:	f7f5 f89f 	bl	8001f48 <__aeabi_dmul>
 800ce0a:	4a4d      	ldr	r2, [pc, #308]	; (800cf40 <__ieee754_pow+0x9e4>)
 800ce0c:	4b4d      	ldr	r3, [pc, #308]	; (800cf44 <__ieee754_pow+0x9e8>)
 800ce0e:	f7f4 fa49 	bl	80012a4 <__aeabi_dadd>
 800ce12:	0022      	movs	r2, r4
 800ce14:	002b      	movs	r3, r5
 800ce16:	f7f5 f897 	bl	8001f48 <__aeabi_dmul>
 800ce1a:	0002      	movs	r2, r0
 800ce1c:	000b      	movs	r3, r1
 800ce1e:	0030      	movs	r0, r6
 800ce20:	0039      	movs	r1, r7
 800ce22:	f7f5 fafd 	bl	8002420 <__aeabi_dsub>
 800ce26:	0004      	movs	r4, r0
 800ce28:	000d      	movs	r5, r1
 800ce2a:	0002      	movs	r2, r0
 800ce2c:	000b      	movs	r3, r1
 800ce2e:	0030      	movs	r0, r6
 800ce30:	0039      	movs	r1, r7
 800ce32:	f7f5 f889 	bl	8001f48 <__aeabi_dmul>
 800ce36:	2380      	movs	r3, #128	; 0x80
 800ce38:	9006      	str	r0, [sp, #24]
 800ce3a:	9107      	str	r1, [sp, #28]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	0020      	movs	r0, r4
 800ce40:	0029      	movs	r1, r5
 800ce42:	05db      	lsls	r3, r3, #23
 800ce44:	f7f5 faec 	bl	8002420 <__aeabi_dsub>
 800ce48:	0002      	movs	r2, r0
 800ce4a:	000b      	movs	r3, r1
 800ce4c:	9806      	ldr	r0, [sp, #24]
 800ce4e:	9907      	ldr	r1, [sp, #28]
 800ce50:	f7f4 fd92 	bl	8001978 <__aeabi_ddiv>
 800ce54:	9a04      	ldr	r2, [sp, #16]
 800ce56:	9b05      	ldr	r3, [sp, #20]
 800ce58:	0004      	movs	r4, r0
 800ce5a:	000d      	movs	r5, r1
 800ce5c:	0030      	movs	r0, r6
 800ce5e:	0039      	movs	r1, r7
 800ce60:	f7f5 f872 	bl	8001f48 <__aeabi_dmul>
 800ce64:	9a04      	ldr	r2, [sp, #16]
 800ce66:	9b05      	ldr	r3, [sp, #20]
 800ce68:	f7f4 fa1c 	bl	80012a4 <__aeabi_dadd>
 800ce6c:	0002      	movs	r2, r0
 800ce6e:	000b      	movs	r3, r1
 800ce70:	0020      	movs	r0, r4
 800ce72:	0029      	movs	r1, r5
 800ce74:	f7f5 fad4 	bl	8002420 <__aeabi_dsub>
 800ce78:	0032      	movs	r2, r6
 800ce7a:	003b      	movs	r3, r7
 800ce7c:	f7f5 fad0 	bl	8002420 <__aeabi_dsub>
 800ce80:	0002      	movs	r2, r0
 800ce82:	000b      	movs	r3, r1
 800ce84:	2000      	movs	r0, #0
 800ce86:	4930      	ldr	r1, [pc, #192]	; (800cf48 <__ieee754_pow+0x9ec>)
 800ce88:	f7f5 faca 	bl	8002420 <__aeabi_dsub>
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	051b      	lsls	r3, r3, #20
 800ce90:	185b      	adds	r3, r3, r1
 800ce92:	151a      	asrs	r2, r3, #20
 800ce94:	2a00      	cmp	r2, #0
 800ce96:	dc26      	bgt.n	800cee6 <__ieee754_pow+0x98a>
 800ce98:	9a02      	ldr	r2, [sp, #8]
 800ce9a:	f001 f905 	bl	800e0a8 <scalbn>
 800ce9e:	9a00      	ldr	r2, [sp, #0]
 800cea0:	9b01      	ldr	r3, [sp, #4]
 800cea2:	f7ff fc2d 	bl	800c700 <__ieee754_pow+0x1a4>
 800cea6:	4a29      	ldr	r2, [pc, #164]	; (800cf4c <__ieee754_pow+0x9f0>)
 800cea8:	004b      	lsls	r3, r1, #1
 800ceaa:	085b      	lsrs	r3, r3, #1
 800ceac:	4293      	cmp	r3, r2
 800ceae:	dc00      	bgt.n	800ceb2 <__ieee754_pow+0x956>
 800ceb0:	e717      	b.n	800cce2 <__ieee754_pow+0x786>
 800ceb2:	4b27      	ldr	r3, [pc, #156]	; (800cf50 <__ieee754_pow+0x9f4>)
 800ceb4:	18cb      	adds	r3, r1, r3
 800ceb6:	4303      	orrs	r3, r0
 800ceb8:	d009      	beq.n	800cece <__ieee754_pow+0x972>
 800ceba:	9800      	ldr	r0, [sp, #0]
 800cebc:	9901      	ldr	r1, [sp, #4]
 800cebe:	4a25      	ldr	r2, [pc, #148]	; (800cf54 <__ieee754_pow+0x9f8>)
 800cec0:	4b25      	ldr	r3, [pc, #148]	; (800cf58 <__ieee754_pow+0x9fc>)
 800cec2:	f7f5 f841 	bl	8001f48 <__aeabi_dmul>
 800cec6:	4a23      	ldr	r2, [pc, #140]	; (800cf54 <__ieee754_pow+0x9f8>)
 800cec8:	4b23      	ldr	r3, [pc, #140]	; (800cf58 <__ieee754_pow+0x9fc>)
 800ceca:	f7ff fc19 	bl	800c700 <__ieee754_pow+0x1a4>
 800cece:	0032      	movs	r2, r6
 800ced0:	003b      	movs	r3, r7
 800ced2:	f7f5 faa5 	bl	8002420 <__aeabi_dsub>
 800ced6:	9a04      	ldr	r2, [sp, #16]
 800ced8:	9b05      	ldr	r3, [sp, #20]
 800ceda:	f7f5 ff9d 	bl	8002e18 <__aeabi_dcmpge>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d100      	bne.n	800cee4 <__ieee754_pow+0x988>
 800cee2:	e6fe      	b.n	800cce2 <__ieee754_pow+0x786>
 800cee4:	e7e9      	b.n	800ceba <__ieee754_pow+0x95e>
 800cee6:	0019      	movs	r1, r3
 800cee8:	e7d9      	b.n	800ce9e <__ieee754_pow+0x942>
 800ceea:	2300      	movs	r3, #0
 800ceec:	4c16      	ldr	r4, [pc, #88]	; (800cf48 <__ieee754_pow+0x9ec>)
 800ceee:	f7ff fbec 	bl	800c6ca <__ieee754_pow+0x16e>
 800cef2:	46c0      	nop			; (mov r8, r8)
 800cef4:	652b82fe 	.word	0x652b82fe
 800cef8:	3c971547 	.word	0x3c971547
 800cefc:	3fe00000 	.word	0x3fe00000
 800cf00:	fffffc02 	.word	0xfffffc02
 800cf04:	fffffc01 	.word	0xfffffc01
 800cf08:	000fffff 	.word	0x000fffff
 800cf0c:	3fe62e43 	.word	0x3fe62e43
 800cf10:	fefa39ef 	.word	0xfefa39ef
 800cf14:	3fe62e42 	.word	0x3fe62e42
 800cf18:	0ca86c39 	.word	0x0ca86c39
 800cf1c:	be205c61 	.word	0xbe205c61
 800cf20:	72bea4d0 	.word	0x72bea4d0
 800cf24:	3e663769 	.word	0x3e663769
 800cf28:	c5d26bf1 	.word	0xc5d26bf1
 800cf2c:	3ebbbd41 	.word	0x3ebbbd41
 800cf30:	af25de2c 	.word	0xaf25de2c
 800cf34:	3f11566a 	.word	0x3f11566a
 800cf38:	16bebd93 	.word	0x16bebd93
 800cf3c:	3f66c16c 	.word	0x3f66c16c
 800cf40:	5555553e 	.word	0x5555553e
 800cf44:	3fc55555 	.word	0x3fc55555
 800cf48:	3ff00000 	.word	0x3ff00000
 800cf4c:	4090cbff 	.word	0x4090cbff
 800cf50:	3f6f3400 	.word	0x3f6f3400
 800cf54:	c2f8f359 	.word	0xc2f8f359
 800cf58:	01a56e1f 	.word	0x01a56e1f

0800cf5c <__ieee754_rem_pio2>:
 800cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5e:	004b      	lsls	r3, r1, #1
 800cf60:	b091      	sub	sp, #68	; 0x44
 800cf62:	085b      	lsrs	r3, r3, #1
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	0017      	movs	r7, r2
 800cf68:	4bb6      	ldr	r3, [pc, #728]	; (800d244 <__ieee754_rem_pio2+0x2e8>)
 800cf6a:	9a02      	ldr	r2, [sp, #8]
 800cf6c:	0004      	movs	r4, r0
 800cf6e:	000d      	movs	r5, r1
 800cf70:	9109      	str	r1, [sp, #36]	; 0x24
 800cf72:	429a      	cmp	r2, r3
 800cf74:	dc09      	bgt.n	800cf8a <__ieee754_rem_pio2+0x2e>
 800cf76:	0002      	movs	r2, r0
 800cf78:	000b      	movs	r3, r1
 800cf7a:	603a      	str	r2, [r7, #0]
 800cf7c:	607b      	str	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	2300      	movs	r3, #0
 800cf82:	60ba      	str	r2, [r7, #8]
 800cf84:	60fb      	str	r3, [r7, #12]
 800cf86:	2600      	movs	r6, #0
 800cf88:	e025      	b.n	800cfd6 <__ieee754_rem_pio2+0x7a>
 800cf8a:	4baf      	ldr	r3, [pc, #700]	; (800d248 <__ieee754_rem_pio2+0x2ec>)
 800cf8c:	9a02      	ldr	r2, [sp, #8]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	dd00      	ble.n	800cf94 <__ieee754_rem_pio2+0x38>
 800cf92:	e06e      	b.n	800d072 <__ieee754_rem_pio2+0x116>
 800cf94:	4ead      	ldr	r6, [pc, #692]	; (800d24c <__ieee754_rem_pio2+0x2f0>)
 800cf96:	4aae      	ldr	r2, [pc, #696]	; (800d250 <__ieee754_rem_pio2+0x2f4>)
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	dd35      	ble.n	800d008 <__ieee754_rem_pio2+0xac>
 800cf9c:	0020      	movs	r0, r4
 800cf9e:	0029      	movs	r1, r5
 800cfa0:	4baa      	ldr	r3, [pc, #680]	; (800d24c <__ieee754_rem_pio2+0x2f0>)
 800cfa2:	f7f5 fa3d 	bl	8002420 <__aeabi_dsub>
 800cfa6:	9b02      	ldr	r3, [sp, #8]
 800cfa8:	0004      	movs	r4, r0
 800cfaa:	000d      	movs	r5, r1
 800cfac:	42b3      	cmp	r3, r6
 800cfae:	d015      	beq.n	800cfdc <__ieee754_rem_pio2+0x80>
 800cfb0:	4aa8      	ldr	r2, [pc, #672]	; (800d254 <__ieee754_rem_pio2+0x2f8>)
 800cfb2:	4ba9      	ldr	r3, [pc, #676]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800cfb4:	f7f5 fa34 	bl	8002420 <__aeabi_dsub>
 800cfb8:	0002      	movs	r2, r0
 800cfba:	000b      	movs	r3, r1
 800cfbc:	0020      	movs	r0, r4
 800cfbe:	603a      	str	r2, [r7, #0]
 800cfc0:	607b      	str	r3, [r7, #4]
 800cfc2:	0029      	movs	r1, r5
 800cfc4:	f7f5 fa2c 	bl	8002420 <__aeabi_dsub>
 800cfc8:	4aa2      	ldr	r2, [pc, #648]	; (800d254 <__ieee754_rem_pio2+0x2f8>)
 800cfca:	4ba3      	ldr	r3, [pc, #652]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800cfcc:	f7f5 fa28 	bl	8002420 <__aeabi_dsub>
 800cfd0:	2601      	movs	r6, #1
 800cfd2:	60b8      	str	r0, [r7, #8]
 800cfd4:	60f9      	str	r1, [r7, #12]
 800cfd6:	0030      	movs	r0, r6
 800cfd8:	b011      	add	sp, #68	; 0x44
 800cfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfdc:	22d3      	movs	r2, #211	; 0xd3
 800cfde:	4b9e      	ldr	r3, [pc, #632]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800cfe0:	0552      	lsls	r2, r2, #21
 800cfe2:	f7f5 fa1d 	bl	8002420 <__aeabi_dsub>
 800cfe6:	4a9d      	ldr	r2, [pc, #628]	; (800d25c <__ieee754_rem_pio2+0x300>)
 800cfe8:	4b9d      	ldr	r3, [pc, #628]	; (800d260 <__ieee754_rem_pio2+0x304>)
 800cfea:	0004      	movs	r4, r0
 800cfec:	000d      	movs	r5, r1
 800cfee:	f7f5 fa17 	bl	8002420 <__aeabi_dsub>
 800cff2:	0002      	movs	r2, r0
 800cff4:	000b      	movs	r3, r1
 800cff6:	0020      	movs	r0, r4
 800cff8:	603a      	str	r2, [r7, #0]
 800cffa:	607b      	str	r3, [r7, #4]
 800cffc:	0029      	movs	r1, r5
 800cffe:	f7f5 fa0f 	bl	8002420 <__aeabi_dsub>
 800d002:	4a96      	ldr	r2, [pc, #600]	; (800d25c <__ieee754_rem_pio2+0x300>)
 800d004:	4b96      	ldr	r3, [pc, #600]	; (800d260 <__ieee754_rem_pio2+0x304>)
 800d006:	e7e1      	b.n	800cfcc <__ieee754_rem_pio2+0x70>
 800d008:	0020      	movs	r0, r4
 800d00a:	0029      	movs	r1, r5
 800d00c:	4b8f      	ldr	r3, [pc, #572]	; (800d24c <__ieee754_rem_pio2+0x2f0>)
 800d00e:	f7f4 f949 	bl	80012a4 <__aeabi_dadd>
 800d012:	9b02      	ldr	r3, [sp, #8]
 800d014:	0004      	movs	r4, r0
 800d016:	000d      	movs	r5, r1
 800d018:	42b3      	cmp	r3, r6
 800d01a:	d014      	beq.n	800d046 <__ieee754_rem_pio2+0xea>
 800d01c:	4a8d      	ldr	r2, [pc, #564]	; (800d254 <__ieee754_rem_pio2+0x2f8>)
 800d01e:	4b8e      	ldr	r3, [pc, #568]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800d020:	f7f4 f940 	bl	80012a4 <__aeabi_dadd>
 800d024:	0002      	movs	r2, r0
 800d026:	000b      	movs	r3, r1
 800d028:	0020      	movs	r0, r4
 800d02a:	603a      	str	r2, [r7, #0]
 800d02c:	607b      	str	r3, [r7, #4]
 800d02e:	0029      	movs	r1, r5
 800d030:	f7f5 f9f6 	bl	8002420 <__aeabi_dsub>
 800d034:	4a87      	ldr	r2, [pc, #540]	; (800d254 <__ieee754_rem_pio2+0x2f8>)
 800d036:	4b88      	ldr	r3, [pc, #544]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800d038:	f7f4 f934 	bl	80012a4 <__aeabi_dadd>
 800d03c:	2601      	movs	r6, #1
 800d03e:	60b8      	str	r0, [r7, #8]
 800d040:	60f9      	str	r1, [r7, #12]
 800d042:	4276      	negs	r6, r6
 800d044:	e7c7      	b.n	800cfd6 <__ieee754_rem_pio2+0x7a>
 800d046:	22d3      	movs	r2, #211	; 0xd3
 800d048:	4b83      	ldr	r3, [pc, #524]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800d04a:	0552      	lsls	r2, r2, #21
 800d04c:	f7f4 f92a 	bl	80012a4 <__aeabi_dadd>
 800d050:	4a82      	ldr	r2, [pc, #520]	; (800d25c <__ieee754_rem_pio2+0x300>)
 800d052:	4b83      	ldr	r3, [pc, #524]	; (800d260 <__ieee754_rem_pio2+0x304>)
 800d054:	0004      	movs	r4, r0
 800d056:	000d      	movs	r5, r1
 800d058:	f7f4 f924 	bl	80012a4 <__aeabi_dadd>
 800d05c:	0002      	movs	r2, r0
 800d05e:	000b      	movs	r3, r1
 800d060:	0020      	movs	r0, r4
 800d062:	603a      	str	r2, [r7, #0]
 800d064:	607b      	str	r3, [r7, #4]
 800d066:	0029      	movs	r1, r5
 800d068:	f7f5 f9da 	bl	8002420 <__aeabi_dsub>
 800d06c:	4a7b      	ldr	r2, [pc, #492]	; (800d25c <__ieee754_rem_pio2+0x300>)
 800d06e:	4b7c      	ldr	r3, [pc, #496]	; (800d260 <__ieee754_rem_pio2+0x304>)
 800d070:	e7e2      	b.n	800d038 <__ieee754_rem_pio2+0xdc>
 800d072:	4b7c      	ldr	r3, [pc, #496]	; (800d264 <__ieee754_rem_pio2+0x308>)
 800d074:	9a02      	ldr	r2, [sp, #8]
 800d076:	429a      	cmp	r2, r3
 800d078:	dd00      	ble.n	800d07c <__ieee754_rem_pio2+0x120>
 800d07a:	e0d3      	b.n	800d224 <__ieee754_rem_pio2+0x2c8>
 800d07c:	0020      	movs	r0, r4
 800d07e:	0029      	movs	r1, r5
 800d080:	f000 feee 	bl	800de60 <fabs>
 800d084:	4a78      	ldr	r2, [pc, #480]	; (800d268 <__ieee754_rem_pio2+0x30c>)
 800d086:	4b79      	ldr	r3, [pc, #484]	; (800d26c <__ieee754_rem_pio2+0x310>)
 800d088:	0004      	movs	r4, r0
 800d08a:	000d      	movs	r5, r1
 800d08c:	f7f4 ff5c 	bl	8001f48 <__aeabi_dmul>
 800d090:	2200      	movs	r2, #0
 800d092:	4b77      	ldr	r3, [pc, #476]	; (800d270 <__ieee754_rem_pio2+0x314>)
 800d094:	f7f4 f906 	bl	80012a4 <__aeabi_dadd>
 800d098:	f7f5 fd54 	bl	8002b44 <__aeabi_d2iz>
 800d09c:	0006      	movs	r6, r0
 800d09e:	f7f5 fd87 	bl	8002bb0 <__aeabi_i2d>
 800d0a2:	4a6b      	ldr	r2, [pc, #428]	; (800d250 <__ieee754_rem_pio2+0x2f4>)
 800d0a4:	4b69      	ldr	r3, [pc, #420]	; (800d24c <__ieee754_rem_pio2+0x2f0>)
 800d0a6:	9006      	str	r0, [sp, #24]
 800d0a8:	9107      	str	r1, [sp, #28]
 800d0aa:	f7f4 ff4d 	bl	8001f48 <__aeabi_dmul>
 800d0ae:	0002      	movs	r2, r0
 800d0b0:	000b      	movs	r3, r1
 800d0b2:	0020      	movs	r0, r4
 800d0b4:	0029      	movs	r1, r5
 800d0b6:	f7f5 f9b3 	bl	8002420 <__aeabi_dsub>
 800d0ba:	4a66      	ldr	r2, [pc, #408]	; (800d254 <__ieee754_rem_pio2+0x2f8>)
 800d0bc:	9004      	str	r0, [sp, #16]
 800d0be:	9105      	str	r1, [sp, #20]
 800d0c0:	9806      	ldr	r0, [sp, #24]
 800d0c2:	9907      	ldr	r1, [sp, #28]
 800d0c4:	4b64      	ldr	r3, [pc, #400]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800d0c6:	f7f4 ff3f 	bl	8001f48 <__aeabi_dmul>
 800d0ca:	0004      	movs	r4, r0
 800d0cc:	000d      	movs	r5, r1
 800d0ce:	2e1f      	cmp	r6, #31
 800d0d0:	dc0f      	bgt.n	800d0f2 <__ieee754_rem_pio2+0x196>
 800d0d2:	4a68      	ldr	r2, [pc, #416]	; (800d274 <__ieee754_rem_pio2+0x318>)
 800d0d4:	1e73      	subs	r3, r6, #1
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	589b      	ldr	r3, [r3, r2]
 800d0da:	9a02      	ldr	r2, [sp, #8]
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d008      	beq.n	800d0f2 <__ieee754_rem_pio2+0x196>
 800d0e0:	9804      	ldr	r0, [sp, #16]
 800d0e2:	9905      	ldr	r1, [sp, #20]
 800d0e4:	0022      	movs	r2, r4
 800d0e6:	002b      	movs	r3, r5
 800d0e8:	f7f5 f99a 	bl	8002420 <__aeabi_dsub>
 800d0ec:	6038      	str	r0, [r7, #0]
 800d0ee:	6079      	str	r1, [r7, #4]
 800d0f0:	e012      	b.n	800d118 <__ieee754_rem_pio2+0x1bc>
 800d0f2:	0022      	movs	r2, r4
 800d0f4:	9804      	ldr	r0, [sp, #16]
 800d0f6:	9905      	ldr	r1, [sp, #20]
 800d0f8:	002b      	movs	r3, r5
 800d0fa:	f7f5 f991 	bl	8002420 <__aeabi_dsub>
 800d0fe:	9b02      	ldr	r3, [sp, #8]
 800d100:	151b      	asrs	r3, r3, #20
 800d102:	9308      	str	r3, [sp, #32]
 800d104:	9a08      	ldr	r2, [sp, #32]
 800d106:	004b      	lsls	r3, r1, #1
 800d108:	0d5b      	lsrs	r3, r3, #21
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	2b10      	cmp	r3, #16
 800d10e:	dc21      	bgt.n	800d154 <__ieee754_rem_pio2+0x1f8>
 800d110:	0002      	movs	r2, r0
 800d112:	000b      	movs	r3, r1
 800d114:	603a      	str	r2, [r7, #0]
 800d116:	607b      	str	r3, [r7, #4]
 800d118:	9804      	ldr	r0, [sp, #16]
 800d11a:	9905      	ldr	r1, [sp, #20]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	9302      	str	r3, [sp, #8]
 800d122:	9b02      	ldr	r3, [sp, #8]
 800d124:	f7f5 f97c 	bl	8002420 <__aeabi_dsub>
 800d128:	0022      	movs	r2, r4
 800d12a:	002b      	movs	r3, r5
 800d12c:	f7f5 f978 	bl	8002420 <__aeabi_dsub>
 800d130:	000b      	movs	r3, r1
 800d132:	0002      	movs	r2, r0
 800d134:	60ba      	str	r2, [r7, #8]
 800d136:	60fb      	str	r3, [r7, #12]
 800d138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	db00      	blt.n	800d140 <__ieee754_rem_pio2+0x1e4>
 800d13e:	e74a      	b.n	800cfd6 <__ieee754_rem_pio2+0x7a>
 800d140:	2280      	movs	r2, #128	; 0x80
 800d142:	0612      	lsls	r2, r2, #24
 800d144:	4694      	mov	ip, r2
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	1889      	adds	r1, r1, r2
 800d14a:	4463      	add	r3, ip
 800d14c:	607b      	str	r3, [r7, #4]
 800d14e:	60b8      	str	r0, [r7, #8]
 800d150:	60f9      	str	r1, [r7, #12]
 800d152:	e776      	b.n	800d042 <__ieee754_rem_pio2+0xe6>
 800d154:	22d3      	movs	r2, #211	; 0xd3
 800d156:	9806      	ldr	r0, [sp, #24]
 800d158:	9907      	ldr	r1, [sp, #28]
 800d15a:	4b3f      	ldr	r3, [pc, #252]	; (800d258 <__ieee754_rem_pio2+0x2fc>)
 800d15c:	0552      	lsls	r2, r2, #21
 800d15e:	f7f4 fef3 	bl	8001f48 <__aeabi_dmul>
 800d162:	0004      	movs	r4, r0
 800d164:	000d      	movs	r5, r1
 800d166:	0002      	movs	r2, r0
 800d168:	000b      	movs	r3, r1
 800d16a:	9804      	ldr	r0, [sp, #16]
 800d16c:	9905      	ldr	r1, [sp, #20]
 800d16e:	f7f5 f957 	bl	8002420 <__aeabi_dsub>
 800d172:	0002      	movs	r2, r0
 800d174:	000b      	movs	r3, r1
 800d176:	9002      	str	r0, [sp, #8]
 800d178:	9103      	str	r1, [sp, #12]
 800d17a:	9804      	ldr	r0, [sp, #16]
 800d17c:	9905      	ldr	r1, [sp, #20]
 800d17e:	f7f5 f94f 	bl	8002420 <__aeabi_dsub>
 800d182:	0022      	movs	r2, r4
 800d184:	002b      	movs	r3, r5
 800d186:	f7f5 f94b 	bl	8002420 <__aeabi_dsub>
 800d18a:	0004      	movs	r4, r0
 800d18c:	000d      	movs	r5, r1
 800d18e:	9806      	ldr	r0, [sp, #24]
 800d190:	9907      	ldr	r1, [sp, #28]
 800d192:	4a32      	ldr	r2, [pc, #200]	; (800d25c <__ieee754_rem_pio2+0x300>)
 800d194:	4b32      	ldr	r3, [pc, #200]	; (800d260 <__ieee754_rem_pio2+0x304>)
 800d196:	f7f4 fed7 	bl	8001f48 <__aeabi_dmul>
 800d19a:	0022      	movs	r2, r4
 800d19c:	002b      	movs	r3, r5
 800d19e:	f7f5 f93f 	bl	8002420 <__aeabi_dsub>
 800d1a2:	0002      	movs	r2, r0
 800d1a4:	000b      	movs	r3, r1
 800d1a6:	0004      	movs	r4, r0
 800d1a8:	000d      	movs	r5, r1
 800d1aa:	9802      	ldr	r0, [sp, #8]
 800d1ac:	9903      	ldr	r1, [sp, #12]
 800d1ae:	f7f5 f937 	bl	8002420 <__aeabi_dsub>
 800d1b2:	9a08      	ldr	r2, [sp, #32]
 800d1b4:	004b      	lsls	r3, r1, #1
 800d1b6:	0d5b      	lsrs	r3, r3, #21
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	2b31      	cmp	r3, #49	; 0x31
 800d1bc:	dc08      	bgt.n	800d1d0 <__ieee754_rem_pio2+0x274>
 800d1be:	0002      	movs	r2, r0
 800d1c0:	000b      	movs	r3, r1
 800d1c2:	603a      	str	r2, [r7, #0]
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	9a02      	ldr	r2, [sp, #8]
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	9204      	str	r2, [sp, #16]
 800d1cc:	9305      	str	r3, [sp, #20]
 800d1ce:	e7a3      	b.n	800d118 <__ieee754_rem_pio2+0x1bc>
 800d1d0:	22b8      	movs	r2, #184	; 0xb8
 800d1d2:	9806      	ldr	r0, [sp, #24]
 800d1d4:	9907      	ldr	r1, [sp, #28]
 800d1d6:	4b22      	ldr	r3, [pc, #136]	; (800d260 <__ieee754_rem_pio2+0x304>)
 800d1d8:	0592      	lsls	r2, r2, #22
 800d1da:	f7f4 feb5 	bl	8001f48 <__aeabi_dmul>
 800d1de:	0004      	movs	r4, r0
 800d1e0:	000d      	movs	r5, r1
 800d1e2:	0002      	movs	r2, r0
 800d1e4:	000b      	movs	r3, r1
 800d1e6:	9802      	ldr	r0, [sp, #8]
 800d1e8:	9903      	ldr	r1, [sp, #12]
 800d1ea:	f7f5 f919 	bl	8002420 <__aeabi_dsub>
 800d1ee:	0002      	movs	r2, r0
 800d1f0:	000b      	movs	r3, r1
 800d1f2:	9004      	str	r0, [sp, #16]
 800d1f4:	9105      	str	r1, [sp, #20]
 800d1f6:	9802      	ldr	r0, [sp, #8]
 800d1f8:	9903      	ldr	r1, [sp, #12]
 800d1fa:	f7f5 f911 	bl	8002420 <__aeabi_dsub>
 800d1fe:	0022      	movs	r2, r4
 800d200:	002b      	movs	r3, r5
 800d202:	f7f5 f90d 	bl	8002420 <__aeabi_dsub>
 800d206:	0004      	movs	r4, r0
 800d208:	000d      	movs	r5, r1
 800d20a:	9806      	ldr	r0, [sp, #24]
 800d20c:	9907      	ldr	r1, [sp, #28]
 800d20e:	4a1a      	ldr	r2, [pc, #104]	; (800d278 <__ieee754_rem_pio2+0x31c>)
 800d210:	4b1a      	ldr	r3, [pc, #104]	; (800d27c <__ieee754_rem_pio2+0x320>)
 800d212:	f7f4 fe99 	bl	8001f48 <__aeabi_dmul>
 800d216:	0022      	movs	r2, r4
 800d218:	002b      	movs	r3, r5
 800d21a:	f7f5 f901 	bl	8002420 <__aeabi_dsub>
 800d21e:	0004      	movs	r4, r0
 800d220:	000d      	movs	r5, r1
 800d222:	e75d      	b.n	800d0e0 <__ieee754_rem_pio2+0x184>
 800d224:	4b16      	ldr	r3, [pc, #88]	; (800d280 <__ieee754_rem_pio2+0x324>)
 800d226:	9a02      	ldr	r2, [sp, #8]
 800d228:	429a      	cmp	r2, r3
 800d22a:	dd2b      	ble.n	800d284 <__ieee754_rem_pio2+0x328>
 800d22c:	0022      	movs	r2, r4
 800d22e:	002b      	movs	r3, r5
 800d230:	0020      	movs	r0, r4
 800d232:	0029      	movs	r1, r5
 800d234:	f7f5 f8f4 	bl	8002420 <__aeabi_dsub>
 800d238:	60b8      	str	r0, [r7, #8]
 800d23a:	60f9      	str	r1, [r7, #12]
 800d23c:	6038      	str	r0, [r7, #0]
 800d23e:	6079      	str	r1, [r7, #4]
 800d240:	e6a1      	b.n	800cf86 <__ieee754_rem_pio2+0x2a>
 800d242:	46c0      	nop			; (mov r8, r8)
 800d244:	3fe921fb 	.word	0x3fe921fb
 800d248:	4002d97b 	.word	0x4002d97b
 800d24c:	3ff921fb 	.word	0x3ff921fb
 800d250:	54400000 	.word	0x54400000
 800d254:	1a626331 	.word	0x1a626331
 800d258:	3dd0b461 	.word	0x3dd0b461
 800d25c:	2e037073 	.word	0x2e037073
 800d260:	3ba3198a 	.word	0x3ba3198a
 800d264:	413921fb 	.word	0x413921fb
 800d268:	6dc9c883 	.word	0x6dc9c883
 800d26c:	3fe45f30 	.word	0x3fe45f30
 800d270:	3fe00000 	.word	0x3fe00000
 800d274:	0800f290 	.word	0x0800f290
 800d278:	252049c1 	.word	0x252049c1
 800d27c:	397b839a 	.word	0x397b839a
 800d280:	7fefffff 	.word	0x7fefffff
 800d284:	9a02      	ldr	r2, [sp, #8]
 800d286:	0020      	movs	r0, r4
 800d288:	1516      	asrs	r6, r2, #20
 800d28a:	4a27      	ldr	r2, [pc, #156]	; (800d328 <__ieee754_rem_pio2+0x3cc>)
 800d28c:	18b6      	adds	r6, r6, r2
 800d28e:	9a02      	ldr	r2, [sp, #8]
 800d290:	0533      	lsls	r3, r6, #20
 800d292:	1ad5      	subs	r5, r2, r3
 800d294:	0029      	movs	r1, r5
 800d296:	f7f5 fc55 	bl	8002b44 <__aeabi_d2iz>
 800d29a:	f7f5 fc89 	bl	8002bb0 <__aeabi_i2d>
 800d29e:	0002      	movs	r2, r0
 800d2a0:	000b      	movs	r3, r1
 800d2a2:	0020      	movs	r0, r4
 800d2a4:	0029      	movs	r1, r5
 800d2a6:	920a      	str	r2, [sp, #40]	; 0x28
 800d2a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2aa:	f7f5 f8b9 	bl	8002420 <__aeabi_dsub>
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	4b1e      	ldr	r3, [pc, #120]	; (800d32c <__ieee754_rem_pio2+0x3d0>)
 800d2b2:	f7f4 fe49 	bl	8001f48 <__aeabi_dmul>
 800d2b6:	000d      	movs	r5, r1
 800d2b8:	0004      	movs	r4, r0
 800d2ba:	f7f5 fc43 	bl	8002b44 <__aeabi_d2iz>
 800d2be:	f7f5 fc77 	bl	8002bb0 <__aeabi_i2d>
 800d2c2:	0002      	movs	r2, r0
 800d2c4:	000b      	movs	r3, r1
 800d2c6:	0020      	movs	r0, r4
 800d2c8:	0029      	movs	r1, r5
 800d2ca:	920c      	str	r2, [sp, #48]	; 0x30
 800d2cc:	930d      	str	r3, [sp, #52]	; 0x34
 800d2ce:	f7f5 f8a7 	bl	8002420 <__aeabi_dsub>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	4b15      	ldr	r3, [pc, #84]	; (800d32c <__ieee754_rem_pio2+0x3d0>)
 800d2d6:	f7f4 fe37 	bl	8001f48 <__aeabi_dmul>
 800d2da:	2503      	movs	r5, #3
 800d2dc:	900e      	str	r0, [sp, #56]	; 0x38
 800d2de:	910f      	str	r1, [sp, #60]	; 0x3c
 800d2e0:	ac0a      	add	r4, sp, #40	; 0x28
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	6920      	ldr	r0, [r4, #16]
 800d2e6:	6961      	ldr	r1, [r4, #20]
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	9502      	str	r5, [sp, #8]
 800d2ec:	3c08      	subs	r4, #8
 800d2ee:	3d01      	subs	r5, #1
 800d2f0:	f7f5 fd6e 	bl	8002dd0 <__aeabi_dcmpeq>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d1f4      	bne.n	800d2e2 <__ieee754_rem_pio2+0x386>
 800d2f8:	4b0d      	ldr	r3, [pc, #52]	; (800d330 <__ieee754_rem_pio2+0x3d4>)
 800d2fa:	0032      	movs	r2, r6
 800d2fc:	9301      	str	r3, [sp, #4]
 800d2fe:	2302      	movs	r3, #2
 800d300:	0039      	movs	r1, r7
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	a80a      	add	r0, sp, #40	; 0x28
 800d306:	9b02      	ldr	r3, [sp, #8]
 800d308:	f000 f988 	bl	800d61c <__kernel_rem_pio2>
 800d30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d30e:	0006      	movs	r6, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	db00      	blt.n	800d316 <__ieee754_rem_pio2+0x3ba>
 800d314:	e65f      	b.n	800cfd6 <__ieee754_rem_pio2+0x7a>
 800d316:	2280      	movs	r2, #128	; 0x80
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	0612      	lsls	r2, r2, #24
 800d31c:	189b      	adds	r3, r3, r2
 800d31e:	607b      	str	r3, [r7, #4]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	189b      	adds	r3, r3, r2
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e68c      	b.n	800d042 <__ieee754_rem_pio2+0xe6>
 800d328:	fffffbea 	.word	0xfffffbea
 800d32c:	41700000 	.word	0x41700000
 800d330:	0800f310 	.word	0x0800f310

0800d334 <__ieee754_sqrt>:
 800d334:	4b56      	ldr	r3, [pc, #344]	; (800d490 <__ieee754_sqrt+0x15c>)
 800d336:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d338:	0002      	movs	r2, r0
 800d33a:	0005      	movs	r5, r0
 800d33c:	0018      	movs	r0, r3
 800d33e:	000c      	movs	r4, r1
 800d340:	b085      	sub	sp, #20
 800d342:	4008      	ands	r0, r1
 800d344:	4298      	cmp	r0, r3
 800d346:	d10f      	bne.n	800d368 <__ieee754_sqrt+0x34>
 800d348:	000b      	movs	r3, r1
 800d34a:	0028      	movs	r0, r5
 800d34c:	f7f4 fdfc 	bl	8001f48 <__aeabi_dmul>
 800d350:	0002      	movs	r2, r0
 800d352:	000b      	movs	r3, r1
 800d354:	0028      	movs	r0, r5
 800d356:	0021      	movs	r1, r4
 800d358:	f7f3 ffa4 	bl	80012a4 <__aeabi_dadd>
 800d35c:	0005      	movs	r5, r0
 800d35e:	000c      	movs	r4, r1
 800d360:	0028      	movs	r0, r5
 800d362:	0021      	movs	r1, r4
 800d364:	b005      	add	sp, #20
 800d366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d368:	2900      	cmp	r1, #0
 800d36a:	dc10      	bgt.n	800d38e <__ieee754_sqrt+0x5a>
 800d36c:	004b      	lsls	r3, r1, #1
 800d36e:	085b      	lsrs	r3, r3, #1
 800d370:	432b      	orrs	r3, r5
 800d372:	d0f5      	beq.n	800d360 <__ieee754_sqrt+0x2c>
 800d374:	2000      	movs	r0, #0
 800d376:	4281      	cmp	r1, r0
 800d378:	d100      	bne.n	800d37c <__ieee754_sqrt+0x48>
 800d37a:	e080      	b.n	800d47e <__ieee754_sqrt+0x14a>
 800d37c:	000b      	movs	r3, r1
 800d37e:	0028      	movs	r0, r5
 800d380:	f7f5 f84e 	bl	8002420 <__aeabi_dsub>
 800d384:	0002      	movs	r2, r0
 800d386:	000b      	movs	r3, r1
 800d388:	f7f4 faf6 	bl	8001978 <__aeabi_ddiv>
 800d38c:	e7e6      	b.n	800d35c <__ieee754_sqrt+0x28>
 800d38e:	1508      	asrs	r0, r1, #20
 800d390:	d075      	beq.n	800d47e <__ieee754_sqrt+0x14a>
 800d392:	4b40      	ldr	r3, [pc, #256]	; (800d494 <__ieee754_sqrt+0x160>)
 800d394:	0309      	lsls	r1, r1, #12
 800d396:	18c4      	adds	r4, r0, r3
 800d398:	2380      	movs	r3, #128	; 0x80
 800d39a:	0b09      	lsrs	r1, r1, #12
 800d39c:	035b      	lsls	r3, r3, #13
 800d39e:	4319      	orrs	r1, r3
 800d3a0:	07c3      	lsls	r3, r0, #31
 800d3a2:	d403      	bmi.n	800d3ac <__ieee754_sqrt+0x78>
 800d3a4:	0fd3      	lsrs	r3, r2, #31
 800d3a6:	0049      	lsls	r1, r1, #1
 800d3a8:	18c9      	adds	r1, r1, r3
 800d3aa:	0052      	lsls	r2, r2, #1
 800d3ac:	1063      	asrs	r3, r4, #1
 800d3ae:	2400      	movs	r4, #0
 800d3b0:	0049      	lsls	r1, r1, #1
 800d3b2:	9303      	str	r3, [sp, #12]
 800d3b4:	0fd3      	lsrs	r3, r2, #31
 800d3b6:	18cb      	adds	r3, r1, r3
 800d3b8:	2180      	movs	r1, #128	; 0x80
 800d3ba:	2516      	movs	r5, #22
 800d3bc:	0020      	movs	r0, r4
 800d3be:	0052      	lsls	r2, r2, #1
 800d3c0:	0389      	lsls	r1, r1, #14
 800d3c2:	1846      	adds	r6, r0, r1
 800d3c4:	429e      	cmp	r6, r3
 800d3c6:	dc02      	bgt.n	800d3ce <__ieee754_sqrt+0x9a>
 800d3c8:	1870      	adds	r0, r6, r1
 800d3ca:	1b9b      	subs	r3, r3, r6
 800d3cc:	1864      	adds	r4, r4, r1
 800d3ce:	0fd6      	lsrs	r6, r2, #31
 800d3d0:	005b      	lsls	r3, r3, #1
 800d3d2:	3d01      	subs	r5, #1
 800d3d4:	18f3      	adds	r3, r6, r3
 800d3d6:	0052      	lsls	r2, r2, #1
 800d3d8:	0849      	lsrs	r1, r1, #1
 800d3da:	2d00      	cmp	r5, #0
 800d3dc:	d1f1      	bne.n	800d3c2 <__ieee754_sqrt+0x8e>
 800d3de:	2620      	movs	r6, #32
 800d3e0:	2780      	movs	r7, #128	; 0x80
 800d3e2:	0029      	movs	r1, r5
 800d3e4:	9601      	str	r6, [sp, #4]
 800d3e6:	063f      	lsls	r7, r7, #24
 800d3e8:	197e      	adds	r6, r7, r5
 800d3ea:	46b4      	mov	ip, r6
 800d3ec:	4283      	cmp	r3, r0
 800d3ee:	dc02      	bgt.n	800d3f6 <__ieee754_sqrt+0xc2>
 800d3f0:	d114      	bne.n	800d41c <__ieee754_sqrt+0xe8>
 800d3f2:	4296      	cmp	r6, r2
 800d3f4:	d812      	bhi.n	800d41c <__ieee754_sqrt+0xe8>
 800d3f6:	4665      	mov	r5, ip
 800d3f8:	4666      	mov	r6, ip
 800d3fa:	19ed      	adds	r5, r5, r7
 800d3fc:	9002      	str	r0, [sp, #8]
 800d3fe:	2e00      	cmp	r6, #0
 800d400:	da03      	bge.n	800d40a <__ieee754_sqrt+0xd6>
 800d402:	43ee      	mvns	r6, r5
 800d404:	0ff6      	lsrs	r6, r6, #31
 800d406:	1986      	adds	r6, r0, r6
 800d408:	9602      	str	r6, [sp, #8]
 800d40a:	1a1b      	subs	r3, r3, r0
 800d40c:	4562      	cmp	r2, ip
 800d40e:	4180      	sbcs	r0, r0
 800d410:	4240      	negs	r0, r0
 800d412:	1a1b      	subs	r3, r3, r0
 800d414:	4660      	mov	r0, ip
 800d416:	1a12      	subs	r2, r2, r0
 800d418:	9802      	ldr	r0, [sp, #8]
 800d41a:	19c9      	adds	r1, r1, r7
 800d41c:	0fd6      	lsrs	r6, r2, #31
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	18f3      	adds	r3, r6, r3
 800d422:	9e01      	ldr	r6, [sp, #4]
 800d424:	0052      	lsls	r2, r2, #1
 800d426:	3e01      	subs	r6, #1
 800d428:	087f      	lsrs	r7, r7, #1
 800d42a:	9601      	str	r6, [sp, #4]
 800d42c:	2e00      	cmp	r6, #0
 800d42e:	d1db      	bne.n	800d3e8 <__ieee754_sqrt+0xb4>
 800d430:	4313      	orrs	r3, r2
 800d432:	d003      	beq.n	800d43c <__ieee754_sqrt+0x108>
 800d434:	1c4b      	adds	r3, r1, #1
 800d436:	d127      	bne.n	800d488 <__ieee754_sqrt+0x154>
 800d438:	0031      	movs	r1, r6
 800d43a:	3401      	adds	r4, #1
 800d43c:	4b16      	ldr	r3, [pc, #88]	; (800d498 <__ieee754_sqrt+0x164>)
 800d43e:	1060      	asrs	r0, r4, #1
 800d440:	18c0      	adds	r0, r0, r3
 800d442:	0849      	lsrs	r1, r1, #1
 800d444:	07e3      	lsls	r3, r4, #31
 800d446:	d502      	bpl.n	800d44e <__ieee754_sqrt+0x11a>
 800d448:	2380      	movs	r3, #128	; 0x80
 800d44a:	061b      	lsls	r3, r3, #24
 800d44c:	4319      	orrs	r1, r3
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	000d      	movs	r5, r1
 800d452:	051c      	lsls	r4, r3, #20
 800d454:	1823      	adds	r3, r4, r0
 800d456:	001c      	movs	r4, r3
 800d458:	e782      	b.n	800d360 <__ieee754_sqrt+0x2c>
 800d45a:	0ad1      	lsrs	r1, r2, #11
 800d45c:	3b15      	subs	r3, #21
 800d45e:	0552      	lsls	r2, r2, #21
 800d460:	2900      	cmp	r1, #0
 800d462:	d0fa      	beq.n	800d45a <__ieee754_sqrt+0x126>
 800d464:	2480      	movs	r4, #128	; 0x80
 800d466:	0364      	lsls	r4, r4, #13
 800d468:	4221      	tst	r1, r4
 800d46a:	d00a      	beq.n	800d482 <__ieee754_sqrt+0x14e>
 800d46c:	2420      	movs	r4, #32
 800d46e:	0016      	movs	r6, r2
 800d470:	1a24      	subs	r4, r4, r0
 800d472:	40e6      	lsrs	r6, r4
 800d474:	1e45      	subs	r5, r0, #1
 800d476:	4082      	lsls	r2, r0
 800d478:	4331      	orrs	r1, r6
 800d47a:	1b58      	subs	r0, r3, r5
 800d47c:	e789      	b.n	800d392 <__ieee754_sqrt+0x5e>
 800d47e:	2300      	movs	r3, #0
 800d480:	e7ee      	b.n	800d460 <__ieee754_sqrt+0x12c>
 800d482:	0049      	lsls	r1, r1, #1
 800d484:	3001      	adds	r0, #1
 800d486:	e7ef      	b.n	800d468 <__ieee754_sqrt+0x134>
 800d488:	2301      	movs	r3, #1
 800d48a:	3101      	adds	r1, #1
 800d48c:	4399      	bics	r1, r3
 800d48e:	e7d5      	b.n	800d43c <__ieee754_sqrt+0x108>
 800d490:	7ff00000 	.word	0x7ff00000
 800d494:	fffffc01 	.word	0xfffffc01
 800d498:	3fe00000 	.word	0x3fe00000

0800d49c <__kernel_cos>:
 800d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	9204      	str	r2, [sp, #16]
 800d4a2:	9305      	str	r3, [sp, #20]
 800d4a4:	004b      	lsls	r3, r1, #1
 800d4a6:	085b      	lsrs	r3, r3, #1
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	23f9      	movs	r3, #249	; 0xf9
 800d4ac:	9a00      	ldr	r2, [sp, #0]
 800d4ae:	0007      	movs	r7, r0
 800d4b0:	000e      	movs	r6, r1
 800d4b2:	059b      	lsls	r3, r3, #22
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	da04      	bge.n	800d4c2 <__kernel_cos+0x26>
 800d4b8:	f7f5 fb44 	bl	8002b44 <__aeabi_d2iz>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d100      	bne.n	800d4c2 <__kernel_cos+0x26>
 800d4c0:	e084      	b.n	800d5cc <__kernel_cos+0x130>
 800d4c2:	003a      	movs	r2, r7
 800d4c4:	0033      	movs	r3, r6
 800d4c6:	0038      	movs	r0, r7
 800d4c8:	0031      	movs	r1, r6
 800d4ca:	f7f4 fd3d 	bl	8001f48 <__aeabi_dmul>
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4b40      	ldr	r3, [pc, #256]	; (800d5d4 <__kernel_cos+0x138>)
 800d4d2:	0004      	movs	r4, r0
 800d4d4:	000d      	movs	r5, r1
 800d4d6:	f7f4 fd37 	bl	8001f48 <__aeabi_dmul>
 800d4da:	4a3f      	ldr	r2, [pc, #252]	; (800d5d8 <__kernel_cos+0x13c>)
 800d4dc:	9002      	str	r0, [sp, #8]
 800d4de:	9103      	str	r1, [sp, #12]
 800d4e0:	4b3e      	ldr	r3, [pc, #248]	; (800d5dc <__kernel_cos+0x140>)
 800d4e2:	0020      	movs	r0, r4
 800d4e4:	0029      	movs	r1, r5
 800d4e6:	f7f4 fd2f 	bl	8001f48 <__aeabi_dmul>
 800d4ea:	4a3d      	ldr	r2, [pc, #244]	; (800d5e0 <__kernel_cos+0x144>)
 800d4ec:	4b3d      	ldr	r3, [pc, #244]	; (800d5e4 <__kernel_cos+0x148>)
 800d4ee:	f7f3 fed9 	bl	80012a4 <__aeabi_dadd>
 800d4f2:	0022      	movs	r2, r4
 800d4f4:	002b      	movs	r3, r5
 800d4f6:	f7f4 fd27 	bl	8001f48 <__aeabi_dmul>
 800d4fa:	4a3b      	ldr	r2, [pc, #236]	; (800d5e8 <__kernel_cos+0x14c>)
 800d4fc:	4b3b      	ldr	r3, [pc, #236]	; (800d5ec <__kernel_cos+0x150>)
 800d4fe:	f7f4 ff8f 	bl	8002420 <__aeabi_dsub>
 800d502:	0022      	movs	r2, r4
 800d504:	002b      	movs	r3, r5
 800d506:	f7f4 fd1f 	bl	8001f48 <__aeabi_dmul>
 800d50a:	4a39      	ldr	r2, [pc, #228]	; (800d5f0 <__kernel_cos+0x154>)
 800d50c:	4b39      	ldr	r3, [pc, #228]	; (800d5f4 <__kernel_cos+0x158>)
 800d50e:	f7f3 fec9 	bl	80012a4 <__aeabi_dadd>
 800d512:	0022      	movs	r2, r4
 800d514:	002b      	movs	r3, r5
 800d516:	f7f4 fd17 	bl	8001f48 <__aeabi_dmul>
 800d51a:	4a37      	ldr	r2, [pc, #220]	; (800d5f8 <__kernel_cos+0x15c>)
 800d51c:	4b37      	ldr	r3, [pc, #220]	; (800d5fc <__kernel_cos+0x160>)
 800d51e:	f7f4 ff7f 	bl	8002420 <__aeabi_dsub>
 800d522:	0022      	movs	r2, r4
 800d524:	002b      	movs	r3, r5
 800d526:	f7f4 fd0f 	bl	8001f48 <__aeabi_dmul>
 800d52a:	4a35      	ldr	r2, [pc, #212]	; (800d600 <__kernel_cos+0x164>)
 800d52c:	4b35      	ldr	r3, [pc, #212]	; (800d604 <__kernel_cos+0x168>)
 800d52e:	f7f3 feb9 	bl	80012a4 <__aeabi_dadd>
 800d532:	0022      	movs	r2, r4
 800d534:	002b      	movs	r3, r5
 800d536:	f7f4 fd07 	bl	8001f48 <__aeabi_dmul>
 800d53a:	0022      	movs	r2, r4
 800d53c:	002b      	movs	r3, r5
 800d53e:	f7f4 fd03 	bl	8001f48 <__aeabi_dmul>
 800d542:	9a04      	ldr	r2, [sp, #16]
 800d544:	9b05      	ldr	r3, [sp, #20]
 800d546:	0004      	movs	r4, r0
 800d548:	000d      	movs	r5, r1
 800d54a:	0038      	movs	r0, r7
 800d54c:	0031      	movs	r1, r6
 800d54e:	f7f4 fcfb 	bl	8001f48 <__aeabi_dmul>
 800d552:	0002      	movs	r2, r0
 800d554:	000b      	movs	r3, r1
 800d556:	0020      	movs	r0, r4
 800d558:	0029      	movs	r1, r5
 800d55a:	f7f4 ff61 	bl	8002420 <__aeabi_dsub>
 800d55e:	4b2a      	ldr	r3, [pc, #168]	; (800d608 <__kernel_cos+0x16c>)
 800d560:	9a00      	ldr	r2, [sp, #0]
 800d562:	0004      	movs	r4, r0
 800d564:	000d      	movs	r5, r1
 800d566:	429a      	cmp	r2, r3
 800d568:	dc0d      	bgt.n	800d586 <__kernel_cos+0xea>
 800d56a:	0002      	movs	r2, r0
 800d56c:	000b      	movs	r3, r1
 800d56e:	9802      	ldr	r0, [sp, #8]
 800d570:	9903      	ldr	r1, [sp, #12]
 800d572:	f7f4 ff55 	bl	8002420 <__aeabi_dsub>
 800d576:	0002      	movs	r2, r0
 800d578:	2000      	movs	r0, #0
 800d57a:	000b      	movs	r3, r1
 800d57c:	4923      	ldr	r1, [pc, #140]	; (800d60c <__kernel_cos+0x170>)
 800d57e:	f7f4 ff4f 	bl	8002420 <__aeabi_dsub>
 800d582:	b007      	add	sp, #28
 800d584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d586:	4b22      	ldr	r3, [pc, #136]	; (800d610 <__kernel_cos+0x174>)
 800d588:	9a00      	ldr	r2, [sp, #0]
 800d58a:	2600      	movs	r6, #0
 800d58c:	429a      	cmp	r2, r3
 800d58e:	dc1b      	bgt.n	800d5c8 <__kernel_cos+0x12c>
 800d590:	0013      	movs	r3, r2
 800d592:	4a20      	ldr	r2, [pc, #128]	; (800d614 <__kernel_cos+0x178>)
 800d594:	4694      	mov	ip, r2
 800d596:	4463      	add	r3, ip
 800d598:	001f      	movs	r7, r3
 800d59a:	0032      	movs	r2, r6
 800d59c:	003b      	movs	r3, r7
 800d59e:	2000      	movs	r0, #0
 800d5a0:	491a      	ldr	r1, [pc, #104]	; (800d60c <__kernel_cos+0x170>)
 800d5a2:	f7f4 ff3d 	bl	8002420 <__aeabi_dsub>
 800d5a6:	0032      	movs	r2, r6
 800d5a8:	003b      	movs	r3, r7
 800d5aa:	9000      	str	r0, [sp, #0]
 800d5ac:	9101      	str	r1, [sp, #4]
 800d5ae:	9802      	ldr	r0, [sp, #8]
 800d5b0:	9903      	ldr	r1, [sp, #12]
 800d5b2:	f7f4 ff35 	bl	8002420 <__aeabi_dsub>
 800d5b6:	0022      	movs	r2, r4
 800d5b8:	002b      	movs	r3, r5
 800d5ba:	f7f4 ff31 	bl	8002420 <__aeabi_dsub>
 800d5be:	0002      	movs	r2, r0
 800d5c0:	000b      	movs	r3, r1
 800d5c2:	9800      	ldr	r0, [sp, #0]
 800d5c4:	9901      	ldr	r1, [sp, #4]
 800d5c6:	e7da      	b.n	800d57e <__kernel_cos+0xe2>
 800d5c8:	4f13      	ldr	r7, [pc, #76]	; (800d618 <__kernel_cos+0x17c>)
 800d5ca:	e7e6      	b.n	800d59a <__kernel_cos+0xfe>
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	490f      	ldr	r1, [pc, #60]	; (800d60c <__kernel_cos+0x170>)
 800d5d0:	e7d7      	b.n	800d582 <__kernel_cos+0xe6>
 800d5d2:	46c0      	nop			; (mov r8, r8)
 800d5d4:	3fe00000 	.word	0x3fe00000
 800d5d8:	be8838d4 	.word	0xbe8838d4
 800d5dc:	bda8fae9 	.word	0xbda8fae9
 800d5e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d5e4:	3e21ee9e 	.word	0x3e21ee9e
 800d5e8:	809c52ad 	.word	0x809c52ad
 800d5ec:	3e927e4f 	.word	0x3e927e4f
 800d5f0:	19cb1590 	.word	0x19cb1590
 800d5f4:	3efa01a0 	.word	0x3efa01a0
 800d5f8:	16c15177 	.word	0x16c15177
 800d5fc:	3f56c16c 	.word	0x3f56c16c
 800d600:	5555554c 	.word	0x5555554c
 800d604:	3fa55555 	.word	0x3fa55555
 800d608:	3fd33332 	.word	0x3fd33332
 800d60c:	3ff00000 	.word	0x3ff00000
 800d610:	3fe90000 	.word	0x3fe90000
 800d614:	ffe00000 	.word	0xffe00000
 800d618:	3fd20000 	.word	0x3fd20000

0800d61c <__kernel_rem_pio2>:
 800d61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d61e:	4cd0      	ldr	r4, [pc, #832]	; (800d960 <__kernel_rem_pio2+0x344>)
 800d620:	44a5      	add	sp, r4
 800d622:	930d      	str	r3, [sp, #52]	; 0x34
 800d624:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d626:	0014      	movs	r4, r2
 800d628:	009a      	lsls	r2, r3, #2
 800d62a:	4bce      	ldr	r3, [pc, #824]	; (800d964 <__kernel_rem_pio2+0x348>)
 800d62c:	900e      	str	r0, [sp, #56]	; 0x38
 800d62e:	58d3      	ldr	r3, [r2, r3]
 800d630:	9107      	str	r1, [sp, #28]
 800d632:	9308      	str	r3, [sp, #32]
 800d634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d636:	3b01      	subs	r3, #1
 800d638:	930c      	str	r3, [sp, #48]	; 0x30
 800d63a:	2300      	movs	r3, #0
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	0023      	movs	r3, r4
 800d640:	3314      	adds	r3, #20
 800d642:	db04      	blt.n	800d64e <__kernel_rem_pio2+0x32>
 800d644:	2118      	movs	r1, #24
 800d646:	1ee0      	subs	r0, r4, #3
 800d648:	f7f2 fde6 	bl	8000218 <__divsi3>
 800d64c:	9000      	str	r0, [sp, #0]
 800d64e:	2218      	movs	r2, #24
 800d650:	9b00      	ldr	r3, [sp, #0]
 800d652:	4252      	negs	r2, r2
 800d654:	3301      	adds	r3, #1
 800d656:	435a      	muls	r2, r3
 800d658:	1913      	adds	r3, r2, r4
 800d65a:	9302      	str	r3, [sp, #8]
 800d65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d65e:	9b00      	ldr	r3, [sp, #0]
 800d660:	ae26      	add	r6, sp, #152	; 0x98
 800d662:	1a9d      	subs	r5, r3, r2
 800d664:	002c      	movs	r4, r5
 800d666:	9b08      	ldr	r3, [sp, #32]
 800d668:	189f      	adds	r7, r3, r2
 800d66a:	1b63      	subs	r3, r4, r5
 800d66c:	429f      	cmp	r7, r3
 800d66e:	da17      	bge.n	800d6a0 <__kernel_rem_pio2+0x84>
 800d670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	ab76      	add	r3, sp, #472	; 0x1d8
 800d678:	930a      	str	r3, [sp, #40]	; 0x28
 800d67a:	2301      	movs	r3, #1
 800d67c:	1a9b      	subs	r3, r3, r2
 800d67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d680:	ab28      	add	r3, sp, #160	; 0xa0
 800d682:	930f      	str	r3, [sp, #60]	; 0x3c
 800d684:	9a04      	ldr	r2, [sp, #16]
 800d686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d688:	189b      	adds	r3, r3, r2
 800d68a:	9a08      	ldr	r2, [sp, #32]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	db31      	blt.n	800d6f4 <__kernel_rem_pio2+0xd8>
 800d690:	9b04      	ldr	r3, [sp, #16]
 800d692:	2400      	movs	r4, #0
 800d694:	00de      	lsls	r6, r3, #3
 800d696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d698:	2500      	movs	r5, #0
 800d69a:	2700      	movs	r7, #0
 800d69c:	199e      	adds	r6, r3, r6
 800d69e:	e01e      	b.n	800d6de <__kernel_rem_pio2+0xc2>
 800d6a0:	2c00      	cmp	r4, #0
 800d6a2:	db07      	blt.n	800d6b4 <__kernel_rem_pio2+0x98>
 800d6a4:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800d6a6:	00a3      	lsls	r3, r4, #2
 800d6a8:	58d0      	ldr	r0, [r2, r3]
 800d6aa:	f7f5 fa81 	bl	8002bb0 <__aeabi_i2d>
 800d6ae:	c603      	stmia	r6!, {r0, r1}
 800d6b0:	3401      	adds	r4, #1
 800d6b2:	e7da      	b.n	800d66a <__kernel_rem_pio2+0x4e>
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	e7f9      	b.n	800d6ae <__kernel_rem_pio2+0x92>
 800d6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6bc:	00f9      	lsls	r1, r7, #3
 800d6be:	1859      	adds	r1, r3, r1
 800d6c0:	6808      	ldr	r0, [r1, #0]
 800d6c2:	6849      	ldr	r1, [r1, #4]
 800d6c4:	6832      	ldr	r2, [r6, #0]
 800d6c6:	6873      	ldr	r3, [r6, #4]
 800d6c8:	f7f4 fc3e 	bl	8001f48 <__aeabi_dmul>
 800d6cc:	0002      	movs	r2, r0
 800d6ce:	000b      	movs	r3, r1
 800d6d0:	0020      	movs	r0, r4
 800d6d2:	0029      	movs	r1, r5
 800d6d4:	f7f3 fde6 	bl	80012a4 <__aeabi_dadd>
 800d6d8:	0004      	movs	r4, r0
 800d6da:	000d      	movs	r5, r1
 800d6dc:	3701      	adds	r7, #1
 800d6de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6e0:	3e08      	subs	r6, #8
 800d6e2:	429f      	cmp	r7, r3
 800d6e4:	dde9      	ble.n	800d6ba <__kernel_rem_pio2+0x9e>
 800d6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e8:	c330      	stmia	r3!, {r4, r5}
 800d6ea:	930a      	str	r3, [sp, #40]	; 0x28
 800d6ec:	9b04      	ldr	r3, [sp, #16]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	9304      	str	r3, [sp, #16]
 800d6f2:	e7c7      	b.n	800d684 <__kernel_rem_pio2+0x68>
 800d6f4:	9b08      	ldr	r3, [sp, #32]
 800d6f6:	aa12      	add	r2, sp, #72	; 0x48
 800d6f8:	009b      	lsls	r3, r3, #2
 800d6fa:	189b      	adds	r3, r3, r2
 800d6fc:	9310      	str	r3, [sp, #64]	; 0x40
 800d6fe:	9b00      	ldr	r3, [sp, #0]
 800d700:	0098      	lsls	r0, r3, #2
 800d702:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d704:	181b      	adds	r3, r3, r0
 800d706:	930f      	str	r3, [sp, #60]	; 0x3c
 800d708:	9b08      	ldr	r3, [sp, #32]
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	9b04      	ldr	r3, [sp, #16]
 800d70e:	aa76      	add	r2, sp, #472	; 0x1d8
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	18d3      	adds	r3, r2, r3
 800d714:	681c      	ldr	r4, [r3, #0]
 800d716:	685d      	ldr	r5, [r3, #4]
 800d718:	ab12      	add	r3, sp, #72	; 0x48
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d71e:	9b04      	ldr	r3, [sp, #16]
 800d720:	9211      	str	r2, [sp, #68]	; 0x44
 800d722:	930a      	str	r3, [sp, #40]	; 0x28
 800d724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d726:	2b00      	cmp	r3, #0
 800d728:	dc74      	bgt.n	800d814 <__kernel_rem_pio2+0x1f8>
 800d72a:	0020      	movs	r0, r4
 800d72c:	0029      	movs	r1, r5
 800d72e:	9a02      	ldr	r2, [sp, #8]
 800d730:	f000 fcba 	bl	800e0a8 <scalbn>
 800d734:	23ff      	movs	r3, #255	; 0xff
 800d736:	2200      	movs	r2, #0
 800d738:	059b      	lsls	r3, r3, #22
 800d73a:	0004      	movs	r4, r0
 800d73c:	000d      	movs	r5, r1
 800d73e:	f7f4 fc03 	bl	8001f48 <__aeabi_dmul>
 800d742:	f000 fb99 	bl	800de78 <floor>
 800d746:	2200      	movs	r2, #0
 800d748:	4b87      	ldr	r3, [pc, #540]	; (800d968 <__kernel_rem_pio2+0x34c>)
 800d74a:	f7f4 fbfd 	bl	8001f48 <__aeabi_dmul>
 800d74e:	0002      	movs	r2, r0
 800d750:	000b      	movs	r3, r1
 800d752:	0020      	movs	r0, r4
 800d754:	0029      	movs	r1, r5
 800d756:	f7f4 fe63 	bl	8002420 <__aeabi_dsub>
 800d75a:	000d      	movs	r5, r1
 800d75c:	0004      	movs	r4, r0
 800d75e:	f7f5 f9f1 	bl	8002b44 <__aeabi_d2iz>
 800d762:	900b      	str	r0, [sp, #44]	; 0x2c
 800d764:	f7f5 fa24 	bl	8002bb0 <__aeabi_i2d>
 800d768:	000b      	movs	r3, r1
 800d76a:	0002      	movs	r2, r0
 800d76c:	0029      	movs	r1, r5
 800d76e:	0020      	movs	r0, r4
 800d770:	f7f4 fe56 	bl	8002420 <__aeabi_dsub>
 800d774:	9b02      	ldr	r3, [sp, #8]
 800d776:	0006      	movs	r6, r0
 800d778:	000f      	movs	r7, r1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	dd74      	ble.n	800d868 <__kernel_rem_pio2+0x24c>
 800d77e:	2118      	movs	r1, #24
 800d780:	9b04      	ldr	r3, [sp, #16]
 800d782:	aa12      	add	r2, sp, #72	; 0x48
 800d784:	3b01      	subs	r3, #1
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	589a      	ldr	r2, [r3, r2]
 800d78a:	9802      	ldr	r0, [sp, #8]
 800d78c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d78e:	1a09      	subs	r1, r1, r0
 800d790:	0010      	movs	r0, r2
 800d792:	4108      	asrs	r0, r1
 800d794:	1824      	adds	r4, r4, r0
 800d796:	4088      	lsls	r0, r1
 800d798:	a912      	add	r1, sp, #72	; 0x48
 800d79a:	1a12      	subs	r2, r2, r0
 800d79c:	505a      	str	r2, [r3, r1]
 800d79e:	2317      	movs	r3, #23
 800d7a0:	9902      	ldr	r1, [sp, #8]
 800d7a2:	940b      	str	r4, [sp, #44]	; 0x2c
 800d7a4:	1a5b      	subs	r3, r3, r1
 800d7a6:	411a      	asrs	r2, r3
 800d7a8:	920a      	str	r2, [sp, #40]	; 0x28
 800d7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dd6d      	ble.n	800d88c <__kernel_rem_pio2+0x270>
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7b4:	2080      	movs	r0, #128	; 0x80
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7ba:	4b6c      	ldr	r3, [pc, #432]	; (800d96c <__kernel_rem_pio2+0x350>)
 800d7bc:	0014      	movs	r4, r2
 800d7be:	469c      	mov	ip, r3
 800d7c0:	2501      	movs	r5, #1
 800d7c2:	0440      	lsls	r0, r0, #17
 800d7c4:	9b04      	ldr	r3, [sp, #16]
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	dd00      	ble.n	800d7cc <__kernel_rem_pio2+0x1b0>
 800d7ca:	e098      	b.n	800d8fe <__kernel_rem_pio2+0x2e2>
 800d7cc:	9b02      	ldr	r3, [sp, #8]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	dd05      	ble.n	800d7de <__kernel_rem_pio2+0x1c2>
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d100      	bne.n	800d7d8 <__kernel_rem_pio2+0x1bc>
 800d7d6:	e0a8      	b.n	800d92a <__kernel_rem_pio2+0x30e>
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d100      	bne.n	800d7de <__kernel_rem_pio2+0x1c2>
 800d7dc:	e0b0      	b.n	800d940 <__kernel_rem_pio2+0x324>
 800d7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7e0:	2b02      	cmp	r3, #2
 800d7e2:	d153      	bne.n	800d88c <__kernel_rem_pio2+0x270>
 800d7e4:	0032      	movs	r2, r6
 800d7e6:	003b      	movs	r3, r7
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	4961      	ldr	r1, [pc, #388]	; (800d970 <__kernel_rem_pio2+0x354>)
 800d7ec:	f7f4 fe18 	bl	8002420 <__aeabi_dsub>
 800d7f0:	0006      	movs	r6, r0
 800d7f2:	000f      	movs	r7, r1
 800d7f4:	2c00      	cmp	r4, #0
 800d7f6:	d049      	beq.n	800d88c <__kernel_rem_pio2+0x270>
 800d7f8:	9a02      	ldr	r2, [sp, #8]
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	495c      	ldr	r1, [pc, #368]	; (800d970 <__kernel_rem_pio2+0x354>)
 800d7fe:	f000 fc53 	bl	800e0a8 <scalbn>
 800d802:	0002      	movs	r2, r0
 800d804:	000b      	movs	r3, r1
 800d806:	0030      	movs	r0, r6
 800d808:	0039      	movs	r1, r7
 800d80a:	f7f4 fe09 	bl	8002420 <__aeabi_dsub>
 800d80e:	0006      	movs	r6, r0
 800d810:	000f      	movs	r7, r1
 800d812:	e03b      	b.n	800d88c <__kernel_rem_pio2+0x270>
 800d814:	2200      	movs	r2, #0
 800d816:	4b57      	ldr	r3, [pc, #348]	; (800d974 <__kernel_rem_pio2+0x358>)
 800d818:	0020      	movs	r0, r4
 800d81a:	0029      	movs	r1, r5
 800d81c:	f7f4 fb94 	bl	8001f48 <__aeabi_dmul>
 800d820:	f7f5 f990 	bl	8002b44 <__aeabi_d2iz>
 800d824:	f7f5 f9c4 	bl	8002bb0 <__aeabi_i2d>
 800d828:	2200      	movs	r2, #0
 800d82a:	4b53      	ldr	r3, [pc, #332]	; (800d978 <__kernel_rem_pio2+0x35c>)
 800d82c:	0006      	movs	r6, r0
 800d82e:	000f      	movs	r7, r1
 800d830:	f7f4 fb8a 	bl	8001f48 <__aeabi_dmul>
 800d834:	0002      	movs	r2, r0
 800d836:	000b      	movs	r3, r1
 800d838:	0020      	movs	r0, r4
 800d83a:	0029      	movs	r1, r5
 800d83c:	f7f4 fdf0 	bl	8002420 <__aeabi_dsub>
 800d840:	f7f5 f980 	bl	8002b44 <__aeabi_d2iz>
 800d844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d846:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d848:	c301      	stmia	r3!, {r0}
 800d84a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d84e:	0030      	movs	r0, r6
 800d850:	3b01      	subs	r3, #1
 800d852:	930a      	str	r3, [sp, #40]	; 0x28
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	18d3      	adds	r3, r2, r3
 800d858:	0039      	movs	r1, r7
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	f7f3 fd21 	bl	80012a4 <__aeabi_dadd>
 800d862:	0004      	movs	r4, r0
 800d864:	000d      	movs	r5, r1
 800d866:	e75d      	b.n	800d724 <__kernel_rem_pio2+0x108>
 800d868:	9b02      	ldr	r3, [sp, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d107      	bne.n	800d87e <__kernel_rem_pio2+0x262>
 800d86e:	9b04      	ldr	r3, [sp, #16]
 800d870:	aa12      	add	r2, sp, #72	; 0x48
 800d872:	3b01      	subs	r3, #1
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	5898      	ldr	r0, [r3, r2]
 800d878:	15c3      	asrs	r3, r0, #23
 800d87a:	930a      	str	r3, [sp, #40]	; 0x28
 800d87c:	e795      	b.n	800d7aa <__kernel_rem_pio2+0x18e>
 800d87e:	2200      	movs	r2, #0
 800d880:	4b3e      	ldr	r3, [pc, #248]	; (800d97c <__kernel_rem_pio2+0x360>)
 800d882:	f7f5 fac9 	bl	8002e18 <__aeabi_dcmpge>
 800d886:	2800      	cmp	r0, #0
 800d888:	d136      	bne.n	800d8f8 <__kernel_rem_pio2+0x2dc>
 800d88a:	900a      	str	r0, [sp, #40]	; 0x28
 800d88c:	2200      	movs	r2, #0
 800d88e:	2300      	movs	r3, #0
 800d890:	0030      	movs	r0, r6
 800d892:	0039      	movs	r1, r7
 800d894:	f7f5 fa9c 	bl	8002dd0 <__aeabi_dcmpeq>
 800d898:	2800      	cmp	r0, #0
 800d89a:	d100      	bne.n	800d89e <__kernel_rem_pio2+0x282>
 800d89c:	e0b9      	b.n	800da12 <__kernel_rem_pio2+0x3f6>
 800d89e:	2200      	movs	r2, #0
 800d8a0:	9b04      	ldr	r3, [sp, #16]
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	9908      	ldr	r1, [sp, #32]
 800d8a8:	428b      	cmp	r3, r1
 800d8aa:	da52      	bge.n	800d952 <__kernel_rem_pio2+0x336>
 800d8ac:	2a00      	cmp	r2, #0
 800d8ae:	d100      	bne.n	800d8b2 <__kernel_rem_pio2+0x296>
 800d8b0:	e095      	b.n	800d9de <__kernel_rem_pio2+0x3c2>
 800d8b2:	9b02      	ldr	r3, [sp, #8]
 800d8b4:	aa12      	add	r2, sp, #72	; 0x48
 800d8b6:	3b18      	subs	r3, #24
 800d8b8:	9302      	str	r3, [sp, #8]
 800d8ba:	9b00      	ldr	r3, [sp, #0]
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	589b      	ldr	r3, [r3, r2]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d100      	bne.n	800d8c6 <__kernel_rem_pio2+0x2aa>
 800d8c4:	e0a1      	b.n	800da0a <__kernel_rem_pio2+0x3ee>
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	9a02      	ldr	r2, [sp, #8]
 800d8ca:	4929      	ldr	r1, [pc, #164]	; (800d970 <__kernel_rem_pio2+0x354>)
 800d8cc:	f000 fbec 	bl	800e0a8 <scalbn>
 800d8d0:	0006      	movs	r6, r0
 800d8d2:	000f      	movs	r7, r1
 800d8d4:	9c00      	ldr	r4, [sp, #0]
 800d8d6:	2c00      	cmp	r4, #0
 800d8d8:	db00      	blt.n	800d8dc <__kernel_rem_pio2+0x2c0>
 800d8da:	e0d9      	b.n	800da90 <__kernel_rem_pio2+0x474>
 800d8dc:	2600      	movs	r6, #0
 800d8de:	9d00      	ldr	r5, [sp, #0]
 800d8e0:	2d00      	cmp	r5, #0
 800d8e2:	da00      	bge.n	800d8e6 <__kernel_rem_pio2+0x2ca>
 800d8e4:	e10c      	b.n	800db00 <__kernel_rem_pio2+0x4e4>
 800d8e6:	ab76      	add	r3, sp, #472	; 0x1d8
 800d8e8:	00ef      	lsls	r7, r5, #3
 800d8ea:	2400      	movs	r4, #0
 800d8ec:	18ff      	adds	r7, r7, r3
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	9302      	str	r3, [sp, #8]
 800d8f2:	9403      	str	r4, [sp, #12]
 800d8f4:	2400      	movs	r4, #0
 800d8f6:	e0f4      	b.n	800dae2 <__kernel_rem_pio2+0x4c6>
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d8fc:	e758      	b.n	800d7b0 <__kernel_rem_pio2+0x194>
 800d8fe:	9b00      	ldr	r3, [sp, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2c00      	cmp	r4, #0
 800d904:	d10b      	bne.n	800d91e <__kernel_rem_pio2+0x302>
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <__kernel_rem_pio2+0x2f6>
 800d90a:	9c00      	ldr	r4, [sp, #0]
 800d90c:	1ac3      	subs	r3, r0, r3
 800d90e:	6023      	str	r3, [r4, #0]
 800d910:	002b      	movs	r3, r5
 800d912:	9c00      	ldr	r4, [sp, #0]
 800d914:	3201      	adds	r2, #1
 800d916:	3404      	adds	r4, #4
 800d918:	9400      	str	r4, [sp, #0]
 800d91a:	001c      	movs	r4, r3
 800d91c:	e752      	b.n	800d7c4 <__kernel_rem_pio2+0x1a8>
 800d91e:	4661      	mov	r1, ip
 800d920:	1acb      	subs	r3, r1, r3
 800d922:	9900      	ldr	r1, [sp, #0]
 800d924:	600b      	str	r3, [r1, #0]
 800d926:	0023      	movs	r3, r4
 800d928:	e7f3      	b.n	800d912 <__kernel_rem_pio2+0x2f6>
 800d92a:	9b04      	ldr	r3, [sp, #16]
 800d92c:	aa12      	add	r2, sp, #72	; 0x48
 800d92e:	3b01      	subs	r3, #1
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	589a      	ldr	r2, [r3, r2]
 800d934:	9200      	str	r2, [sp, #0]
 800d936:	0252      	lsls	r2, r2, #9
 800d938:	0a52      	lsrs	r2, r2, #9
 800d93a:	a912      	add	r1, sp, #72	; 0x48
 800d93c:	505a      	str	r2, [r3, r1]
 800d93e:	e74e      	b.n	800d7de <__kernel_rem_pio2+0x1c2>
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	aa12      	add	r2, sp, #72	; 0x48
 800d944:	3b01      	subs	r3, #1
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	589a      	ldr	r2, [r3, r2]
 800d94a:	9200      	str	r2, [sp, #0]
 800d94c:	0292      	lsls	r2, r2, #10
 800d94e:	0a92      	lsrs	r2, r2, #10
 800d950:	e7f3      	b.n	800d93a <__kernel_rem_pio2+0x31e>
 800d952:	0099      	lsls	r1, r3, #2
 800d954:	a812      	add	r0, sp, #72	; 0x48
 800d956:	5809      	ldr	r1, [r1, r0]
 800d958:	3b01      	subs	r3, #1
 800d95a:	430a      	orrs	r2, r1
 800d95c:	e7a3      	b.n	800d8a6 <__kernel_rem_pio2+0x28a>
 800d95e:	46c0      	nop			; (mov r8, r8)
 800d960:	fffffd84 	.word	0xfffffd84
 800d964:	0800f458 	.word	0x0800f458
 800d968:	40200000 	.word	0x40200000
 800d96c:	00ffffff 	.word	0x00ffffff
 800d970:	3ff00000 	.word	0x3ff00000
 800d974:	3e700000 	.word	0x3e700000
 800d978:	41700000 	.word	0x41700000
 800d97c:	3fe00000 	.word	0x3fe00000
 800d980:	3301      	adds	r3, #1
 800d982:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d984:	009a      	lsls	r2, r3, #2
 800d986:	4252      	negs	r2, r2
 800d988:	588a      	ldr	r2, [r1, r2]
 800d98a:	2a00      	cmp	r2, #0
 800d98c:	d0f8      	beq.n	800d980 <__kernel_rem_pio2+0x364>
 800d98e:	9a04      	ldr	r2, [sp, #16]
 800d990:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d992:	1c57      	adds	r7, r2, #1
 800d994:	1854      	adds	r4, r2, r1
 800d996:	00e4      	lsls	r4, r4, #3
 800d998:	aa26      	add	r2, sp, #152	; 0x98
 800d99a:	1914      	adds	r4, r2, r4
 800d99c:	9a04      	ldr	r2, [sp, #16]
 800d99e:	18d3      	adds	r3, r2, r3
 800d9a0:	9304      	str	r3, [sp, #16]
 800d9a2:	9b04      	ldr	r3, [sp, #16]
 800d9a4:	42bb      	cmp	r3, r7
 800d9a6:	da00      	bge.n	800d9aa <__kernel_rem_pio2+0x38e>
 800d9a8:	e6b0      	b.n	800d70c <__kernel_rem_pio2+0xf0>
 800d9aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9ac:	00bb      	lsls	r3, r7, #2
 800d9ae:	58d0      	ldr	r0, [r2, r3]
 800d9b0:	f7f5 f8fe 	bl	8002bb0 <__aeabi_i2d>
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	0026      	movs	r6, r4
 800d9ba:	2500      	movs	r5, #0
 800d9bc:	6020      	str	r0, [r4, #0]
 800d9be:	6061      	str	r1, [r4, #4]
 800d9c0:	9200      	str	r2, [sp, #0]
 800d9c2:	9301      	str	r3, [sp, #4]
 800d9c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9c6:	429d      	cmp	r5, r3
 800d9c8:	dd0b      	ble.n	800d9e2 <__kernel_rem_pio2+0x3c6>
 800d9ca:	00fb      	lsls	r3, r7, #3
 800d9cc:	aa76      	add	r2, sp, #472	; 0x1d8
 800d9ce:	18d3      	adds	r3, r2, r3
 800d9d0:	3701      	adds	r7, #1
 800d9d2:	9900      	ldr	r1, [sp, #0]
 800d9d4:	9a01      	ldr	r2, [sp, #4]
 800d9d6:	3408      	adds	r4, #8
 800d9d8:	6019      	str	r1, [r3, #0]
 800d9da:	605a      	str	r2, [r3, #4]
 800d9dc:	e7e1      	b.n	800d9a2 <__kernel_rem_pio2+0x386>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e7cf      	b.n	800d982 <__kernel_rem_pio2+0x366>
 800d9e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9e4:	00e9      	lsls	r1, r5, #3
 800d9e6:	1859      	adds	r1, r3, r1
 800d9e8:	6808      	ldr	r0, [r1, #0]
 800d9ea:	6849      	ldr	r1, [r1, #4]
 800d9ec:	6832      	ldr	r2, [r6, #0]
 800d9ee:	6873      	ldr	r3, [r6, #4]
 800d9f0:	f7f4 faaa 	bl	8001f48 <__aeabi_dmul>
 800d9f4:	0002      	movs	r2, r0
 800d9f6:	000b      	movs	r3, r1
 800d9f8:	9800      	ldr	r0, [sp, #0]
 800d9fa:	9901      	ldr	r1, [sp, #4]
 800d9fc:	f7f3 fc52 	bl	80012a4 <__aeabi_dadd>
 800da00:	3501      	adds	r5, #1
 800da02:	9000      	str	r0, [sp, #0]
 800da04:	9101      	str	r1, [sp, #4]
 800da06:	3e08      	subs	r6, #8
 800da08:	e7dc      	b.n	800d9c4 <__kernel_rem_pio2+0x3a8>
 800da0a:	9b00      	ldr	r3, [sp, #0]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	e74f      	b.n	800d8b2 <__kernel_rem_pio2+0x296>
 800da12:	9b02      	ldr	r3, [sp, #8]
 800da14:	0030      	movs	r0, r6
 800da16:	425a      	negs	r2, r3
 800da18:	0039      	movs	r1, r7
 800da1a:	f000 fb45 	bl	800e0a8 <scalbn>
 800da1e:	2200      	movs	r2, #0
 800da20:	4bb6      	ldr	r3, [pc, #728]	; (800dcfc <__kernel_rem_pio2+0x6e0>)
 800da22:	0004      	movs	r4, r0
 800da24:	000d      	movs	r5, r1
 800da26:	f7f5 f9f7 	bl	8002e18 <__aeabi_dcmpge>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d025      	beq.n	800da7a <__kernel_rem_pio2+0x45e>
 800da2e:	2200      	movs	r2, #0
 800da30:	4bb3      	ldr	r3, [pc, #716]	; (800dd00 <__kernel_rem_pio2+0x6e4>)
 800da32:	0020      	movs	r0, r4
 800da34:	0029      	movs	r1, r5
 800da36:	f7f4 fa87 	bl	8001f48 <__aeabi_dmul>
 800da3a:	f7f5 f883 	bl	8002b44 <__aeabi_d2iz>
 800da3e:	9b04      	ldr	r3, [sp, #16]
 800da40:	0006      	movs	r6, r0
 800da42:	009f      	lsls	r7, r3, #2
 800da44:	f7f5 f8b4 	bl	8002bb0 <__aeabi_i2d>
 800da48:	2200      	movs	r2, #0
 800da4a:	4bac      	ldr	r3, [pc, #688]	; (800dcfc <__kernel_rem_pio2+0x6e0>)
 800da4c:	f7f4 fa7c 	bl	8001f48 <__aeabi_dmul>
 800da50:	0002      	movs	r2, r0
 800da52:	000b      	movs	r3, r1
 800da54:	0020      	movs	r0, r4
 800da56:	0029      	movs	r1, r5
 800da58:	f7f4 fce2 	bl	8002420 <__aeabi_dsub>
 800da5c:	f7f5 f872 	bl	8002b44 <__aeabi_d2iz>
 800da60:	ab12      	add	r3, sp, #72	; 0x48
 800da62:	51d8      	str	r0, [r3, r7]
 800da64:	9b04      	ldr	r3, [sp, #16]
 800da66:	aa12      	add	r2, sp, #72	; 0x48
 800da68:	3301      	adds	r3, #1
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	9b02      	ldr	r3, [sp, #8]
 800da6e:	3318      	adds	r3, #24
 800da70:	9302      	str	r3, [sp, #8]
 800da72:	9b00      	ldr	r3, [sp, #0]
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	509e      	str	r6, [r3, r2]
 800da78:	e725      	b.n	800d8c6 <__kernel_rem_pio2+0x2aa>
 800da7a:	9b04      	ldr	r3, [sp, #16]
 800da7c:	0020      	movs	r0, r4
 800da7e:	0029      	movs	r1, r5
 800da80:	009e      	lsls	r6, r3, #2
 800da82:	f7f5 f85f 	bl	8002b44 <__aeabi_d2iz>
 800da86:	ab12      	add	r3, sp, #72	; 0x48
 800da88:	5198      	str	r0, [r3, r6]
 800da8a:	9b04      	ldr	r3, [sp, #16]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	e71a      	b.n	800d8c6 <__kernel_rem_pio2+0x2aa>
 800da90:	00e5      	lsls	r5, r4, #3
 800da92:	ab76      	add	r3, sp, #472	; 0x1d8
 800da94:	aa12      	add	r2, sp, #72	; 0x48
 800da96:	195d      	adds	r5, r3, r5
 800da98:	00a3      	lsls	r3, r4, #2
 800da9a:	5898      	ldr	r0, [r3, r2]
 800da9c:	f7f5 f888 	bl	8002bb0 <__aeabi_i2d>
 800daa0:	0032      	movs	r2, r6
 800daa2:	003b      	movs	r3, r7
 800daa4:	f7f4 fa50 	bl	8001f48 <__aeabi_dmul>
 800daa8:	2200      	movs	r2, #0
 800daaa:	6028      	str	r0, [r5, #0]
 800daac:	6069      	str	r1, [r5, #4]
 800daae:	4b94      	ldr	r3, [pc, #592]	; (800dd00 <__kernel_rem_pio2+0x6e4>)
 800dab0:	0030      	movs	r0, r6
 800dab2:	0039      	movs	r1, r7
 800dab4:	f7f4 fa48 	bl	8001f48 <__aeabi_dmul>
 800dab8:	3c01      	subs	r4, #1
 800daba:	0006      	movs	r6, r0
 800dabc:	000f      	movs	r7, r1
 800dabe:	e70a      	b.n	800d8d6 <__kernel_rem_pio2+0x2ba>
 800dac0:	4b90      	ldr	r3, [pc, #576]	; (800dd04 <__kernel_rem_pio2+0x6e8>)
 800dac2:	00e1      	lsls	r1, r4, #3
 800dac4:	1859      	adds	r1, r3, r1
 800dac6:	6808      	ldr	r0, [r1, #0]
 800dac8:	6849      	ldr	r1, [r1, #4]
 800daca:	cf0c      	ldmia	r7!, {r2, r3}
 800dacc:	f7f4 fa3c 	bl	8001f48 <__aeabi_dmul>
 800dad0:	0002      	movs	r2, r0
 800dad2:	000b      	movs	r3, r1
 800dad4:	9802      	ldr	r0, [sp, #8]
 800dad6:	9903      	ldr	r1, [sp, #12]
 800dad8:	f7f3 fbe4 	bl	80012a4 <__aeabi_dadd>
 800dadc:	9002      	str	r0, [sp, #8]
 800dade:	9103      	str	r1, [sp, #12]
 800dae0:	3401      	adds	r4, #1
 800dae2:	9b08      	ldr	r3, [sp, #32]
 800dae4:	429c      	cmp	r4, r3
 800dae6:	dc01      	bgt.n	800daec <__kernel_rem_pio2+0x4d0>
 800dae8:	42a6      	cmp	r6, r4
 800daea:	dae9      	bge.n	800dac0 <__kernel_rem_pio2+0x4a4>
 800daec:	00f3      	lsls	r3, r6, #3
 800daee:	aa4e      	add	r2, sp, #312	; 0x138
 800daf0:	18d3      	adds	r3, r2, r3
 800daf2:	3d01      	subs	r5, #1
 800daf4:	9902      	ldr	r1, [sp, #8]
 800daf6:	9a03      	ldr	r2, [sp, #12]
 800daf8:	3601      	adds	r6, #1
 800dafa:	6019      	str	r1, [r3, #0]
 800dafc:	605a      	str	r2, [r3, #4]
 800dafe:	e6ef      	b.n	800d8e0 <__kernel_rem_pio2+0x2c4>
 800db00:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800db02:	2b02      	cmp	r3, #2
 800db04:	dc0b      	bgt.n	800db1e <__kernel_rem_pio2+0x502>
 800db06:	2b00      	cmp	r3, #0
 800db08:	dd00      	ble.n	800db0c <__kernel_rem_pio2+0x4f0>
 800db0a:	e08a      	b.n	800dc22 <__kernel_rem_pio2+0x606>
 800db0c:	d055      	beq.n	800dbba <__kernel_rem_pio2+0x59e>
 800db0e:	2007      	movs	r0, #7
 800db10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db12:	4003      	ands	r3, r0
 800db14:	0018      	movs	r0, r3
 800db16:	239f      	movs	r3, #159	; 0x9f
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	449d      	add	sp, r3
 800db1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db1e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800db20:	2b03      	cmp	r3, #3
 800db22:	d1f4      	bne.n	800db0e <__kernel_rem_pio2+0x4f2>
 800db24:	9b00      	ldr	r3, [sp, #0]
 800db26:	00dc      	lsls	r4, r3, #3
 800db28:	ab4e      	add	r3, sp, #312	; 0x138
 800db2a:	191c      	adds	r4, r3, r4
 800db2c:	0025      	movs	r5, r4
 800db2e:	9b00      	ldr	r3, [sp, #0]
 800db30:	9302      	str	r3, [sp, #8]
 800db32:	9b02      	ldr	r3, [sp, #8]
 800db34:	3d08      	subs	r5, #8
 800db36:	2b00      	cmp	r3, #0
 800db38:	dd00      	ble.n	800db3c <__kernel_rem_pio2+0x520>
 800db3a:	e083      	b.n	800dc44 <__kernel_rem_pio2+0x628>
 800db3c:	9d00      	ldr	r5, [sp, #0]
 800db3e:	3c08      	subs	r4, #8
 800db40:	2d01      	cmp	r5, #1
 800db42:	dd00      	ble.n	800db46 <__kernel_rem_pio2+0x52a>
 800db44:	e0a0      	b.n	800dc88 <__kernel_rem_pio2+0x66c>
 800db46:	2400      	movs	r4, #0
 800db48:	0021      	movs	r1, r4
 800db4a:	9b00      	ldr	r3, [sp, #0]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	dd00      	ble.n	800db52 <__kernel_rem_pio2+0x536>
 800db50:	e0b8      	b.n	800dcc4 <__kernel_rem_pio2+0x6a8>
 800db52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db54:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800db56:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800db58:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800db5a:	9851      	ldr	r0, [sp, #324]	; 0x144
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d000      	beq.n	800db62 <__kernel_rem_pio2+0x546>
 800db60:	e0be      	b.n	800dce0 <__kernel_rem_pio2+0x6c4>
 800db62:	0033      	movs	r3, r6
 800db64:	003a      	movs	r2, r7
 800db66:	9e07      	ldr	r6, [sp, #28]
 800db68:	6032      	str	r2, [r6, #0]
 800db6a:	6073      	str	r3, [r6, #4]
 800db6c:	002a      	movs	r2, r5
 800db6e:	0003      	movs	r3, r0
 800db70:	60b2      	str	r2, [r6, #8]
 800db72:	60f3      	str	r3, [r6, #12]
 800db74:	0022      	movs	r2, r4
 800db76:	000b      	movs	r3, r1
 800db78:	6132      	str	r2, [r6, #16]
 800db7a:	6173      	str	r3, [r6, #20]
 800db7c:	e7c7      	b.n	800db0e <__kernel_rem_pio2+0x4f2>
 800db7e:	9b00      	ldr	r3, [sp, #0]
 800db80:	aa4e      	add	r2, sp, #312	; 0x138
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	18d3      	adds	r3, r2, r3
 800db86:	0028      	movs	r0, r5
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	0021      	movs	r1, r4
 800db8e:	f7f3 fb89 	bl	80012a4 <__aeabi_dadd>
 800db92:	0005      	movs	r5, r0
 800db94:	000c      	movs	r4, r1
 800db96:	9b00      	ldr	r3, [sp, #0]
 800db98:	3b01      	subs	r3, #1
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	9b00      	ldr	r3, [sp, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	daed      	bge.n	800db7e <__kernel_rem_pio2+0x562>
 800dba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d002      	beq.n	800dbae <__kernel_rem_pio2+0x592>
 800dba8:	2380      	movs	r3, #128	; 0x80
 800dbaa:	061b      	lsls	r3, r3, #24
 800dbac:	18e4      	adds	r4, r4, r3
 800dbae:	002a      	movs	r2, r5
 800dbb0:	0023      	movs	r3, r4
 800dbb2:	9907      	ldr	r1, [sp, #28]
 800dbb4:	600a      	str	r2, [r1, #0]
 800dbb6:	604b      	str	r3, [r1, #4]
 800dbb8:	e7a9      	b.n	800db0e <__kernel_rem_pio2+0x4f2>
 800dbba:	9da4      	ldr	r5, [sp, #656]	; 0x290
 800dbbc:	002c      	movs	r4, r5
 800dbbe:	e7ed      	b.n	800db9c <__kernel_rem_pio2+0x580>
 800dbc0:	00e3      	lsls	r3, r4, #3
 800dbc2:	aa4e      	add	r2, sp, #312	; 0x138
 800dbc4:	18d3      	adds	r3, r2, r3
 800dbc6:	0030      	movs	r0, r6
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	0029      	movs	r1, r5
 800dbce:	f7f3 fb69 	bl	80012a4 <__aeabi_dadd>
 800dbd2:	0006      	movs	r6, r0
 800dbd4:	000d      	movs	r5, r1
 800dbd6:	3c01      	subs	r4, #1
 800dbd8:	2c00      	cmp	r4, #0
 800dbda:	daf1      	bge.n	800dbc0 <__kernel_rem_pio2+0x5a4>
 800dbdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbde:	0029      	movs	r1, r5
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <__kernel_rem_pio2+0x5ce>
 800dbe4:	2380      	movs	r3, #128	; 0x80
 800dbe6:	061b      	lsls	r3, r3, #24
 800dbe8:	18e9      	adds	r1, r5, r3
 800dbea:	0032      	movs	r2, r6
 800dbec:	000b      	movs	r3, r1
 800dbee:	9907      	ldr	r1, [sp, #28]
 800dbf0:	2401      	movs	r4, #1
 800dbf2:	600a      	str	r2, [r1, #0]
 800dbf4:	604b      	str	r3, [r1, #4]
 800dbf6:	984e      	ldr	r0, [sp, #312]	; 0x138
 800dbf8:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800dbfa:	002b      	movs	r3, r5
 800dbfc:	f7f4 fc10 	bl	8002420 <__aeabi_dsub>
 800dc00:	0006      	movs	r6, r0
 800dc02:	000d      	movs	r5, r1
 800dc04:	9b00      	ldr	r3, [sp, #0]
 800dc06:	42a3      	cmp	r3, r4
 800dc08:	da0f      	bge.n	800dc2a <__kernel_rem_pio2+0x60e>
 800dc0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d002      	beq.n	800dc16 <__kernel_rem_pio2+0x5fa>
 800dc10:	2380      	movs	r3, #128	; 0x80
 800dc12:	061b      	lsls	r3, r3, #24
 800dc14:	18ed      	adds	r5, r5, r3
 800dc16:	0032      	movs	r2, r6
 800dc18:	002b      	movs	r3, r5
 800dc1a:	9907      	ldr	r1, [sp, #28]
 800dc1c:	608a      	str	r2, [r1, #8]
 800dc1e:	60cb      	str	r3, [r1, #12]
 800dc20:	e775      	b.n	800db0e <__kernel_rem_pio2+0x4f2>
 800dc22:	2600      	movs	r6, #0
 800dc24:	9c00      	ldr	r4, [sp, #0]
 800dc26:	0035      	movs	r5, r6
 800dc28:	e7d6      	b.n	800dbd8 <__kernel_rem_pio2+0x5bc>
 800dc2a:	00e3      	lsls	r3, r4, #3
 800dc2c:	aa4e      	add	r2, sp, #312	; 0x138
 800dc2e:	18d3      	adds	r3, r2, r3
 800dc30:	0030      	movs	r0, r6
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	0029      	movs	r1, r5
 800dc38:	f7f3 fb34 	bl	80012a4 <__aeabi_dadd>
 800dc3c:	3401      	adds	r4, #1
 800dc3e:	0006      	movs	r6, r0
 800dc40:	000d      	movs	r5, r1
 800dc42:	e7df      	b.n	800dc04 <__kernel_rem_pio2+0x5e8>
 800dc44:	9b02      	ldr	r3, [sp, #8]
 800dc46:	68ae      	ldr	r6, [r5, #8]
 800dc48:	68ef      	ldr	r7, [r5, #12]
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	9302      	str	r3, [sp, #8]
 800dc4e:	682a      	ldr	r2, [r5, #0]
 800dc50:	686b      	ldr	r3, [r5, #4]
 800dc52:	9204      	str	r2, [sp, #16]
 800dc54:	9305      	str	r3, [sp, #20]
 800dc56:	9804      	ldr	r0, [sp, #16]
 800dc58:	9905      	ldr	r1, [sp, #20]
 800dc5a:	0032      	movs	r2, r6
 800dc5c:	003b      	movs	r3, r7
 800dc5e:	f7f3 fb21 	bl	80012a4 <__aeabi_dadd>
 800dc62:	0002      	movs	r2, r0
 800dc64:	000b      	movs	r3, r1
 800dc66:	9008      	str	r0, [sp, #32]
 800dc68:	9109      	str	r1, [sp, #36]	; 0x24
 800dc6a:	9804      	ldr	r0, [sp, #16]
 800dc6c:	9905      	ldr	r1, [sp, #20]
 800dc6e:	f7f4 fbd7 	bl	8002420 <__aeabi_dsub>
 800dc72:	0032      	movs	r2, r6
 800dc74:	003b      	movs	r3, r7
 800dc76:	f7f3 fb15 	bl	80012a4 <__aeabi_dadd>
 800dc7a:	9a08      	ldr	r2, [sp, #32]
 800dc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc7e:	60a8      	str	r0, [r5, #8]
 800dc80:	60e9      	str	r1, [r5, #12]
 800dc82:	602a      	str	r2, [r5, #0]
 800dc84:	606b      	str	r3, [r5, #4]
 800dc86:	e754      	b.n	800db32 <__kernel_rem_pio2+0x516>
 800dc88:	6826      	ldr	r6, [r4, #0]
 800dc8a:	6867      	ldr	r7, [r4, #4]
 800dc8c:	68a2      	ldr	r2, [r4, #8]
 800dc8e:	68e3      	ldr	r3, [r4, #12]
 800dc90:	0030      	movs	r0, r6
 800dc92:	0039      	movs	r1, r7
 800dc94:	9202      	str	r2, [sp, #8]
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	f7f3 fb04 	bl	80012a4 <__aeabi_dadd>
 800dc9c:	0002      	movs	r2, r0
 800dc9e:	000b      	movs	r3, r1
 800dca0:	9004      	str	r0, [sp, #16]
 800dca2:	9105      	str	r1, [sp, #20]
 800dca4:	0030      	movs	r0, r6
 800dca6:	0039      	movs	r1, r7
 800dca8:	f7f4 fbba 	bl	8002420 <__aeabi_dsub>
 800dcac:	9a02      	ldr	r2, [sp, #8]
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	f7f3 faf8 	bl	80012a4 <__aeabi_dadd>
 800dcb4:	9a04      	ldr	r2, [sp, #16]
 800dcb6:	9b05      	ldr	r3, [sp, #20]
 800dcb8:	60a0      	str	r0, [r4, #8]
 800dcba:	60e1      	str	r1, [r4, #12]
 800dcbc:	6022      	str	r2, [r4, #0]
 800dcbe:	6063      	str	r3, [r4, #4]
 800dcc0:	3d01      	subs	r5, #1
 800dcc2:	e73c      	b.n	800db3e <__kernel_rem_pio2+0x522>
 800dcc4:	9b00      	ldr	r3, [sp, #0]
 800dcc6:	aa4e      	add	r2, sp, #312	; 0x138
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	18d3      	adds	r3, r2, r3
 800dccc:	0020      	movs	r0, r4
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f7f3 fae7 	bl	80012a4 <__aeabi_dadd>
 800dcd6:	9b00      	ldr	r3, [sp, #0]
 800dcd8:	0004      	movs	r4, r0
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	e734      	b.n	800db4a <__kernel_rem_pio2+0x52e>
 800dce0:	9b07      	ldr	r3, [sp, #28]
 800dce2:	9a07      	ldr	r2, [sp, #28]
 800dce4:	601f      	str	r7, [r3, #0]
 800dce6:	2380      	movs	r3, #128	; 0x80
 800dce8:	061b      	lsls	r3, r3, #24
 800dcea:	18f6      	adds	r6, r6, r3
 800dcec:	18c0      	adds	r0, r0, r3
 800dcee:	18c9      	adds	r1, r1, r3
 800dcf0:	6056      	str	r6, [r2, #4]
 800dcf2:	6095      	str	r5, [r2, #8]
 800dcf4:	60d0      	str	r0, [r2, #12]
 800dcf6:	6114      	str	r4, [r2, #16]
 800dcf8:	6151      	str	r1, [r2, #20]
 800dcfa:	e708      	b.n	800db0e <__kernel_rem_pio2+0x4f2>
 800dcfc:	41700000 	.word	0x41700000
 800dd00:	3e700000 	.word	0x3e700000
 800dd04:	0800f418 	.word	0x0800f418

0800dd08 <__kernel_sin>:
 800dd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd0a:	b089      	sub	sp, #36	; 0x24
 800dd0c:	9202      	str	r2, [sp, #8]
 800dd0e:	9303      	str	r3, [sp, #12]
 800dd10:	22f9      	movs	r2, #249	; 0xf9
 800dd12:	004b      	lsls	r3, r1, #1
 800dd14:	0007      	movs	r7, r0
 800dd16:	000e      	movs	r6, r1
 800dd18:	085b      	lsrs	r3, r3, #1
 800dd1a:	0592      	lsls	r2, r2, #22
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	da03      	bge.n	800dd28 <__kernel_sin+0x20>
 800dd20:	f7f4 ff10 	bl	8002b44 <__aeabi_d2iz>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d04c      	beq.n	800ddc2 <__kernel_sin+0xba>
 800dd28:	003a      	movs	r2, r7
 800dd2a:	0033      	movs	r3, r6
 800dd2c:	0038      	movs	r0, r7
 800dd2e:	0031      	movs	r1, r6
 800dd30:	f7f4 f90a 	bl	8001f48 <__aeabi_dmul>
 800dd34:	0004      	movs	r4, r0
 800dd36:	000d      	movs	r5, r1
 800dd38:	0002      	movs	r2, r0
 800dd3a:	000b      	movs	r3, r1
 800dd3c:	0038      	movs	r0, r7
 800dd3e:	0031      	movs	r1, r6
 800dd40:	f7f4 f902 	bl	8001f48 <__aeabi_dmul>
 800dd44:	4a39      	ldr	r2, [pc, #228]	; (800de2c <__kernel_sin+0x124>)
 800dd46:	9000      	str	r0, [sp, #0]
 800dd48:	9101      	str	r1, [sp, #4]
 800dd4a:	4b39      	ldr	r3, [pc, #228]	; (800de30 <__kernel_sin+0x128>)
 800dd4c:	0020      	movs	r0, r4
 800dd4e:	0029      	movs	r1, r5
 800dd50:	f7f4 f8fa 	bl	8001f48 <__aeabi_dmul>
 800dd54:	4a37      	ldr	r2, [pc, #220]	; (800de34 <__kernel_sin+0x12c>)
 800dd56:	4b38      	ldr	r3, [pc, #224]	; (800de38 <__kernel_sin+0x130>)
 800dd58:	f7f4 fb62 	bl	8002420 <__aeabi_dsub>
 800dd5c:	0022      	movs	r2, r4
 800dd5e:	002b      	movs	r3, r5
 800dd60:	f7f4 f8f2 	bl	8001f48 <__aeabi_dmul>
 800dd64:	4a35      	ldr	r2, [pc, #212]	; (800de3c <__kernel_sin+0x134>)
 800dd66:	4b36      	ldr	r3, [pc, #216]	; (800de40 <__kernel_sin+0x138>)
 800dd68:	f7f3 fa9c 	bl	80012a4 <__aeabi_dadd>
 800dd6c:	0022      	movs	r2, r4
 800dd6e:	002b      	movs	r3, r5
 800dd70:	f7f4 f8ea 	bl	8001f48 <__aeabi_dmul>
 800dd74:	4a33      	ldr	r2, [pc, #204]	; (800de44 <__kernel_sin+0x13c>)
 800dd76:	4b34      	ldr	r3, [pc, #208]	; (800de48 <__kernel_sin+0x140>)
 800dd78:	f7f4 fb52 	bl	8002420 <__aeabi_dsub>
 800dd7c:	0022      	movs	r2, r4
 800dd7e:	002b      	movs	r3, r5
 800dd80:	f7f4 f8e2 	bl	8001f48 <__aeabi_dmul>
 800dd84:	4b31      	ldr	r3, [pc, #196]	; (800de4c <__kernel_sin+0x144>)
 800dd86:	4a32      	ldr	r2, [pc, #200]	; (800de50 <__kernel_sin+0x148>)
 800dd88:	f7f3 fa8c 	bl	80012a4 <__aeabi_dadd>
 800dd8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd8e:	9004      	str	r0, [sp, #16]
 800dd90:	9105      	str	r1, [sp, #20]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d119      	bne.n	800ddca <__kernel_sin+0xc2>
 800dd96:	0002      	movs	r2, r0
 800dd98:	000b      	movs	r3, r1
 800dd9a:	0020      	movs	r0, r4
 800dd9c:	0029      	movs	r1, r5
 800dd9e:	f7f4 f8d3 	bl	8001f48 <__aeabi_dmul>
 800dda2:	4a2c      	ldr	r2, [pc, #176]	; (800de54 <__kernel_sin+0x14c>)
 800dda4:	4b2c      	ldr	r3, [pc, #176]	; (800de58 <__kernel_sin+0x150>)
 800dda6:	f7f4 fb3b 	bl	8002420 <__aeabi_dsub>
 800ddaa:	9a00      	ldr	r2, [sp, #0]
 800ddac:	9b01      	ldr	r3, [sp, #4]
 800ddae:	f7f4 f8cb 	bl	8001f48 <__aeabi_dmul>
 800ddb2:	0002      	movs	r2, r0
 800ddb4:	000b      	movs	r3, r1
 800ddb6:	0038      	movs	r0, r7
 800ddb8:	0031      	movs	r1, r6
 800ddba:	f7f3 fa73 	bl	80012a4 <__aeabi_dadd>
 800ddbe:	0007      	movs	r7, r0
 800ddc0:	000e      	movs	r6, r1
 800ddc2:	0038      	movs	r0, r7
 800ddc4:	0031      	movs	r1, r6
 800ddc6:	b009      	add	sp, #36	; 0x24
 800ddc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddca:	2200      	movs	r2, #0
 800ddcc:	9802      	ldr	r0, [sp, #8]
 800ddce:	9903      	ldr	r1, [sp, #12]
 800ddd0:	4b22      	ldr	r3, [pc, #136]	; (800de5c <__kernel_sin+0x154>)
 800ddd2:	f7f4 f8b9 	bl	8001f48 <__aeabi_dmul>
 800ddd6:	9a04      	ldr	r2, [sp, #16]
 800ddd8:	9b05      	ldr	r3, [sp, #20]
 800ddda:	9006      	str	r0, [sp, #24]
 800dddc:	9107      	str	r1, [sp, #28]
 800ddde:	9800      	ldr	r0, [sp, #0]
 800dde0:	9901      	ldr	r1, [sp, #4]
 800dde2:	f7f4 f8b1 	bl	8001f48 <__aeabi_dmul>
 800dde6:	0002      	movs	r2, r0
 800dde8:	000b      	movs	r3, r1
 800ddea:	9806      	ldr	r0, [sp, #24]
 800ddec:	9907      	ldr	r1, [sp, #28]
 800ddee:	f7f4 fb17 	bl	8002420 <__aeabi_dsub>
 800ddf2:	0022      	movs	r2, r4
 800ddf4:	002b      	movs	r3, r5
 800ddf6:	f7f4 f8a7 	bl	8001f48 <__aeabi_dmul>
 800ddfa:	9a02      	ldr	r2, [sp, #8]
 800ddfc:	9b03      	ldr	r3, [sp, #12]
 800ddfe:	f7f4 fb0f 	bl	8002420 <__aeabi_dsub>
 800de02:	4a14      	ldr	r2, [pc, #80]	; (800de54 <__kernel_sin+0x14c>)
 800de04:	0004      	movs	r4, r0
 800de06:	000d      	movs	r5, r1
 800de08:	9800      	ldr	r0, [sp, #0]
 800de0a:	9901      	ldr	r1, [sp, #4]
 800de0c:	4b12      	ldr	r3, [pc, #72]	; (800de58 <__kernel_sin+0x150>)
 800de0e:	f7f4 f89b 	bl	8001f48 <__aeabi_dmul>
 800de12:	0002      	movs	r2, r0
 800de14:	000b      	movs	r3, r1
 800de16:	0020      	movs	r0, r4
 800de18:	0029      	movs	r1, r5
 800de1a:	f7f3 fa43 	bl	80012a4 <__aeabi_dadd>
 800de1e:	0002      	movs	r2, r0
 800de20:	000b      	movs	r3, r1
 800de22:	0038      	movs	r0, r7
 800de24:	0031      	movs	r1, r6
 800de26:	f7f4 fafb 	bl	8002420 <__aeabi_dsub>
 800de2a:	e7c8      	b.n	800ddbe <__kernel_sin+0xb6>
 800de2c:	5acfd57c 	.word	0x5acfd57c
 800de30:	3de5d93a 	.word	0x3de5d93a
 800de34:	8a2b9ceb 	.word	0x8a2b9ceb
 800de38:	3e5ae5e6 	.word	0x3e5ae5e6
 800de3c:	57b1fe7d 	.word	0x57b1fe7d
 800de40:	3ec71de3 	.word	0x3ec71de3
 800de44:	19c161d5 	.word	0x19c161d5
 800de48:	3f2a01a0 	.word	0x3f2a01a0
 800de4c:	3f811111 	.word	0x3f811111
 800de50:	1110f8a6 	.word	0x1110f8a6
 800de54:	55555549 	.word	0x55555549
 800de58:	3fc55555 	.word	0x3fc55555
 800de5c:	3fe00000 	.word	0x3fe00000

0800de60 <fabs>:
 800de60:	004b      	lsls	r3, r1, #1
 800de62:	0859      	lsrs	r1, r3, #1
 800de64:	4770      	bx	lr
	...

0800de68 <finite>:
 800de68:	4b02      	ldr	r3, [pc, #8]	; (800de74 <finite+0xc>)
 800de6a:	0048      	lsls	r0, r1, #1
 800de6c:	0840      	lsrs	r0, r0, #1
 800de6e:	18c0      	adds	r0, r0, r3
 800de70:	0fc0      	lsrs	r0, r0, #31
 800de72:	4770      	bx	lr
 800de74:	80100000 	.word	0x80100000

0800de78 <floor>:
 800de78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de7a:	004b      	lsls	r3, r1, #1
 800de7c:	4a3d      	ldr	r2, [pc, #244]	; (800df74 <floor+0xfc>)
 800de7e:	0d5b      	lsrs	r3, r3, #21
 800de80:	189f      	adds	r7, r3, r2
 800de82:	4684      	mov	ip, r0
 800de84:	000e      	movs	r6, r1
 800de86:	000d      	movs	r5, r1
 800de88:	0004      	movs	r4, r0
 800de8a:	9001      	str	r0, [sp, #4]
 800de8c:	2f13      	cmp	r7, #19
 800de8e:	dc34      	bgt.n	800defa <floor+0x82>
 800de90:	2f00      	cmp	r7, #0
 800de92:	da16      	bge.n	800dec2 <floor+0x4a>
 800de94:	4a38      	ldr	r2, [pc, #224]	; (800df78 <floor+0x100>)
 800de96:	4b39      	ldr	r3, [pc, #228]	; (800df7c <floor+0x104>)
 800de98:	4660      	mov	r0, ip
 800de9a:	0031      	movs	r1, r6
 800de9c:	f7f3 fa02 	bl	80012a4 <__aeabi_dadd>
 800dea0:	2200      	movs	r2, #0
 800dea2:	2300      	movs	r3, #0
 800dea4:	f7f4 ffae 	bl	8002e04 <__aeabi_dcmpgt>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d007      	beq.n	800debc <floor+0x44>
 800deac:	2e00      	cmp	r6, #0
 800deae:	da5d      	bge.n	800df6c <floor+0xf4>
 800deb0:	0073      	lsls	r3, r6, #1
 800deb2:	085b      	lsrs	r3, r3, #1
 800deb4:	431c      	orrs	r4, r3
 800deb6:	d001      	beq.n	800debc <floor+0x44>
 800deb8:	2400      	movs	r4, #0
 800deba:	4d31      	ldr	r5, [pc, #196]	; (800df80 <floor+0x108>)
 800debc:	46a4      	mov	ip, r4
 800debe:	002e      	movs	r6, r5
 800dec0:	e029      	b.n	800df16 <floor+0x9e>
 800dec2:	4b30      	ldr	r3, [pc, #192]	; (800df84 <floor+0x10c>)
 800dec4:	413b      	asrs	r3, r7
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	400b      	ands	r3, r1
 800deca:	4303      	orrs	r3, r0
 800decc:	d023      	beq.n	800df16 <floor+0x9e>
 800dece:	4a2a      	ldr	r2, [pc, #168]	; (800df78 <floor+0x100>)
 800ded0:	4b2a      	ldr	r3, [pc, #168]	; (800df7c <floor+0x104>)
 800ded2:	4660      	mov	r0, ip
 800ded4:	0031      	movs	r1, r6
 800ded6:	f7f3 f9e5 	bl	80012a4 <__aeabi_dadd>
 800deda:	2200      	movs	r2, #0
 800dedc:	2300      	movs	r3, #0
 800dede:	f7f4 ff91 	bl	8002e04 <__aeabi_dcmpgt>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d0ea      	beq.n	800debc <floor+0x44>
 800dee6:	2e00      	cmp	r6, #0
 800dee8:	da03      	bge.n	800def2 <floor+0x7a>
 800deea:	2380      	movs	r3, #128	; 0x80
 800deec:	035b      	lsls	r3, r3, #13
 800deee:	413b      	asrs	r3, r7
 800def0:	18f5      	adds	r5, r6, r3
 800def2:	9b00      	ldr	r3, [sp, #0]
 800def4:	2400      	movs	r4, #0
 800def6:	439d      	bics	r5, r3
 800def8:	e7e0      	b.n	800debc <floor+0x44>
 800defa:	2f33      	cmp	r7, #51	; 0x33
 800defc:	dd0f      	ble.n	800df1e <floor+0xa6>
 800defe:	2380      	movs	r3, #128	; 0x80
 800df00:	00db      	lsls	r3, r3, #3
 800df02:	429f      	cmp	r7, r3
 800df04:	d107      	bne.n	800df16 <floor+0x9e>
 800df06:	0002      	movs	r2, r0
 800df08:	000b      	movs	r3, r1
 800df0a:	4660      	mov	r0, ip
 800df0c:	0031      	movs	r1, r6
 800df0e:	f7f3 f9c9 	bl	80012a4 <__aeabi_dadd>
 800df12:	4684      	mov	ip, r0
 800df14:	000e      	movs	r6, r1
 800df16:	4660      	mov	r0, ip
 800df18:	0031      	movs	r1, r6
 800df1a:	b003      	add	sp, #12
 800df1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df1e:	4a1a      	ldr	r2, [pc, #104]	; (800df88 <floor+0x110>)
 800df20:	189b      	adds	r3, r3, r2
 800df22:	2201      	movs	r2, #1
 800df24:	4252      	negs	r2, r2
 800df26:	40da      	lsrs	r2, r3
 800df28:	9200      	str	r2, [sp, #0]
 800df2a:	4210      	tst	r0, r2
 800df2c:	d0f3      	beq.n	800df16 <floor+0x9e>
 800df2e:	4a12      	ldr	r2, [pc, #72]	; (800df78 <floor+0x100>)
 800df30:	4b12      	ldr	r3, [pc, #72]	; (800df7c <floor+0x104>)
 800df32:	4660      	mov	r0, ip
 800df34:	0031      	movs	r1, r6
 800df36:	f7f3 f9b5 	bl	80012a4 <__aeabi_dadd>
 800df3a:	2200      	movs	r2, #0
 800df3c:	2300      	movs	r3, #0
 800df3e:	f7f4 ff61 	bl	8002e04 <__aeabi_dcmpgt>
 800df42:	2800      	cmp	r0, #0
 800df44:	d0ba      	beq.n	800debc <floor+0x44>
 800df46:	2e00      	cmp	r6, #0
 800df48:	da02      	bge.n	800df50 <floor+0xd8>
 800df4a:	2f14      	cmp	r7, #20
 800df4c:	d103      	bne.n	800df56 <floor+0xde>
 800df4e:	3501      	adds	r5, #1
 800df50:	9b00      	ldr	r3, [sp, #0]
 800df52:	439c      	bics	r4, r3
 800df54:	e7b2      	b.n	800debc <floor+0x44>
 800df56:	2334      	movs	r3, #52	; 0x34
 800df58:	1bdf      	subs	r7, r3, r7
 800df5a:	3b33      	subs	r3, #51	; 0x33
 800df5c:	40bb      	lsls	r3, r7
 800df5e:	18e4      	adds	r4, r4, r3
 800df60:	9b01      	ldr	r3, [sp, #4]
 800df62:	429c      	cmp	r4, r3
 800df64:	419b      	sbcs	r3, r3
 800df66:	425b      	negs	r3, r3
 800df68:	18f5      	adds	r5, r6, r3
 800df6a:	e7f1      	b.n	800df50 <floor+0xd8>
 800df6c:	2400      	movs	r4, #0
 800df6e:	0025      	movs	r5, r4
 800df70:	e7a4      	b.n	800debc <floor+0x44>
 800df72:	46c0      	nop			; (mov r8, r8)
 800df74:	fffffc01 	.word	0xfffffc01
 800df78:	8800759c 	.word	0x8800759c
 800df7c:	7e37e43c 	.word	0x7e37e43c
 800df80:	bff00000 	.word	0xbff00000
 800df84:	000fffff 	.word	0x000fffff
 800df88:	fffffbed 	.word	0xfffffbed

0800df8c <nan>:
 800df8c:	2000      	movs	r0, #0
 800df8e:	4901      	ldr	r1, [pc, #4]	; (800df94 <nan+0x8>)
 800df90:	4770      	bx	lr
 800df92:	46c0      	nop			; (mov r8, r8)
 800df94:	7ff80000 	.word	0x7ff80000

0800df98 <rint>:
 800df98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df9a:	004a      	lsls	r2, r1, #1
 800df9c:	4e3e      	ldr	r6, [pc, #248]	; (800e098 <rint+0x100>)
 800df9e:	0d52      	lsrs	r2, r2, #21
 800dfa0:	b085      	sub	sp, #20
 800dfa2:	1996      	adds	r6, r2, r6
 800dfa4:	000d      	movs	r5, r1
 800dfa6:	0003      	movs	r3, r0
 800dfa8:	9101      	str	r1, [sp, #4]
 800dfaa:	0fcc      	lsrs	r4, r1, #31
 800dfac:	2e13      	cmp	r6, #19
 800dfae:	dc57      	bgt.n	800e060 <rint+0xc8>
 800dfb0:	2e00      	cmp	r6, #0
 800dfb2:	da2a      	bge.n	800e00a <rint+0x72>
 800dfb4:	004a      	lsls	r2, r1, #1
 800dfb6:	0852      	lsrs	r2, r2, #1
 800dfb8:	4302      	orrs	r2, r0
 800dfba:	d024      	beq.n	800e006 <rint+0x6e>
 800dfbc:	030a      	lsls	r2, r1, #12
 800dfbe:	0b12      	lsrs	r2, r2, #12
 800dfc0:	4302      	orrs	r2, r0
 800dfc2:	4253      	negs	r3, r2
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	2280      	movs	r2, #128	; 0x80
 800dfc8:	0c4d      	lsrs	r5, r1, #17
 800dfca:	0312      	lsls	r2, r2, #12
 800dfcc:	0b1b      	lsrs	r3, r3, #12
 800dfce:	4013      	ands	r3, r2
 800dfd0:	046d      	lsls	r5, r5, #17
 800dfd2:	432b      	orrs	r3, r5
 800dfd4:	0019      	movs	r1, r3
 800dfd6:	4b31      	ldr	r3, [pc, #196]	; (800e09c <rint+0x104>)
 800dfd8:	00e2      	lsls	r2, r4, #3
 800dfda:	189b      	adds	r3, r3, r2
 800dfdc:	681e      	ldr	r6, [r3, #0]
 800dfde:	685f      	ldr	r7, [r3, #4]
 800dfe0:	0002      	movs	r2, r0
 800dfe2:	000b      	movs	r3, r1
 800dfe4:	0030      	movs	r0, r6
 800dfe6:	0039      	movs	r1, r7
 800dfe8:	f7f3 f95c 	bl	80012a4 <__aeabi_dadd>
 800dfec:	9002      	str	r0, [sp, #8]
 800dfee:	9103      	str	r1, [sp, #12]
 800dff0:	9802      	ldr	r0, [sp, #8]
 800dff2:	9903      	ldr	r1, [sp, #12]
 800dff4:	003b      	movs	r3, r7
 800dff6:	0032      	movs	r2, r6
 800dff8:	f7f4 fa12 	bl	8002420 <__aeabi_dsub>
 800dffc:	004b      	lsls	r3, r1, #1
 800dffe:	085b      	lsrs	r3, r3, #1
 800e000:	07e4      	lsls	r4, r4, #31
 800e002:	4323      	orrs	r3, r4
 800e004:	0019      	movs	r1, r3
 800e006:	b005      	add	sp, #20
 800e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e00a:	4a25      	ldr	r2, [pc, #148]	; (800e0a0 <rint+0x108>)
 800e00c:	4132      	asrs	r2, r6
 800e00e:	0017      	movs	r7, r2
 800e010:	400f      	ands	r7, r1
 800e012:	4307      	orrs	r7, r0
 800e014:	d0f7      	beq.n	800e006 <rint+0x6e>
 800e016:	0852      	lsrs	r2, r2, #1
 800e018:	0011      	movs	r1, r2
 800e01a:	4029      	ands	r1, r5
 800e01c:	430b      	orrs	r3, r1
 800e01e:	d00a      	beq.n	800e036 <rint+0x9e>
 800e020:	2300      	movs	r3, #0
 800e022:	2e13      	cmp	r6, #19
 800e024:	d101      	bne.n	800e02a <rint+0x92>
 800e026:	2380      	movs	r3, #128	; 0x80
 800e028:	061b      	lsls	r3, r3, #24
 800e02a:	2780      	movs	r7, #128	; 0x80
 800e02c:	02ff      	lsls	r7, r7, #11
 800e02e:	4137      	asrs	r7, r6
 800e030:	4395      	bics	r5, r2
 800e032:	432f      	orrs	r7, r5
 800e034:	9701      	str	r7, [sp, #4]
 800e036:	9901      	ldr	r1, [sp, #4]
 800e038:	001a      	movs	r2, r3
 800e03a:	000b      	movs	r3, r1
 800e03c:	4917      	ldr	r1, [pc, #92]	; (800e09c <rint+0x104>)
 800e03e:	00e4      	lsls	r4, r4, #3
 800e040:	190c      	adds	r4, r1, r4
 800e042:	6865      	ldr	r5, [r4, #4]
 800e044:	6824      	ldr	r4, [r4, #0]
 800e046:	0020      	movs	r0, r4
 800e048:	0029      	movs	r1, r5
 800e04a:	f7f3 f92b 	bl	80012a4 <__aeabi_dadd>
 800e04e:	9002      	str	r0, [sp, #8]
 800e050:	9103      	str	r1, [sp, #12]
 800e052:	9802      	ldr	r0, [sp, #8]
 800e054:	9903      	ldr	r1, [sp, #12]
 800e056:	0022      	movs	r2, r4
 800e058:	002b      	movs	r3, r5
 800e05a:	f7f4 f9e1 	bl	8002420 <__aeabi_dsub>
 800e05e:	e7d2      	b.n	800e006 <rint+0x6e>
 800e060:	2e33      	cmp	r6, #51	; 0x33
 800e062:	dd08      	ble.n	800e076 <rint+0xde>
 800e064:	2380      	movs	r3, #128	; 0x80
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	429e      	cmp	r6, r3
 800e06a:	d1cc      	bne.n	800e006 <rint+0x6e>
 800e06c:	0002      	movs	r2, r0
 800e06e:	000b      	movs	r3, r1
 800e070:	f7f3 f918 	bl	80012a4 <__aeabi_dadd>
 800e074:	e7c7      	b.n	800e006 <rint+0x6e>
 800e076:	2601      	movs	r6, #1
 800e078:	4d0a      	ldr	r5, [pc, #40]	; (800e0a4 <rint+0x10c>)
 800e07a:	4276      	negs	r6, r6
 800e07c:	1952      	adds	r2, r2, r5
 800e07e:	40d6      	lsrs	r6, r2
 800e080:	4206      	tst	r6, r0
 800e082:	d0c0      	beq.n	800e006 <rint+0x6e>
 800e084:	0876      	lsrs	r6, r6, #1
 800e086:	4206      	tst	r6, r0
 800e088:	d0d5      	beq.n	800e036 <rint+0x9e>
 800e08a:	2180      	movs	r1, #128	; 0x80
 800e08c:	05c9      	lsls	r1, r1, #23
 800e08e:	4111      	asrs	r1, r2
 800e090:	43b3      	bics	r3, r6
 800e092:	430b      	orrs	r3, r1
 800e094:	e7cf      	b.n	800e036 <rint+0x9e>
 800e096:	46c0      	nop			; (mov r8, r8)
 800e098:	fffffc01 	.word	0xfffffc01
 800e09c:	0800f468 	.word	0x0800f468
 800e0a0:	000fffff 	.word	0x000fffff
 800e0a4:	fffffbed 	.word	0xfffffbed

0800e0a8 <scalbn>:
 800e0a8:	004b      	lsls	r3, r1, #1
 800e0aa:	b570      	push	{r4, r5, r6, lr}
 800e0ac:	0d5b      	lsrs	r3, r3, #21
 800e0ae:	0014      	movs	r4, r2
 800e0b0:	000a      	movs	r2, r1
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10d      	bne.n	800e0d2 <scalbn+0x2a>
 800e0b6:	004b      	lsls	r3, r1, #1
 800e0b8:	085b      	lsrs	r3, r3, #1
 800e0ba:	4303      	orrs	r3, r0
 800e0bc:	d010      	beq.n	800e0e0 <scalbn+0x38>
 800e0be:	4b27      	ldr	r3, [pc, #156]	; (800e15c <scalbn+0xb4>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f7f3 ff41 	bl	8001f48 <__aeabi_dmul>
 800e0c6:	4b26      	ldr	r3, [pc, #152]	; (800e160 <scalbn+0xb8>)
 800e0c8:	429c      	cmp	r4, r3
 800e0ca:	da0a      	bge.n	800e0e2 <scalbn+0x3a>
 800e0cc:	4a25      	ldr	r2, [pc, #148]	; (800e164 <scalbn+0xbc>)
 800e0ce:	4b26      	ldr	r3, [pc, #152]	; (800e168 <scalbn+0xc0>)
 800e0d0:	e019      	b.n	800e106 <scalbn+0x5e>
 800e0d2:	4d26      	ldr	r5, [pc, #152]	; (800e16c <scalbn+0xc4>)
 800e0d4:	42ab      	cmp	r3, r5
 800e0d6:	d108      	bne.n	800e0ea <scalbn+0x42>
 800e0d8:	0002      	movs	r2, r0
 800e0da:	000b      	movs	r3, r1
 800e0dc:	f7f3 f8e2 	bl	80012a4 <__aeabi_dadd>
 800e0e0:	bd70      	pop	{r4, r5, r6, pc}
 800e0e2:	000a      	movs	r2, r1
 800e0e4:	004b      	lsls	r3, r1, #1
 800e0e6:	0d5b      	lsrs	r3, r3, #21
 800e0e8:	3b36      	subs	r3, #54	; 0x36
 800e0ea:	4d21      	ldr	r5, [pc, #132]	; (800e170 <scalbn+0xc8>)
 800e0ec:	18e3      	adds	r3, r4, r3
 800e0ee:	42ab      	cmp	r3, r5
 800e0f0:	dd0c      	ble.n	800e10c <scalbn+0x64>
 800e0f2:	4c20      	ldr	r4, [pc, #128]	; (800e174 <scalbn+0xcc>)
 800e0f4:	4d20      	ldr	r5, [pc, #128]	; (800e178 <scalbn+0xd0>)
 800e0f6:	2900      	cmp	r1, #0
 800e0f8:	da01      	bge.n	800e0fe <scalbn+0x56>
 800e0fa:	4c1e      	ldr	r4, [pc, #120]	; (800e174 <scalbn+0xcc>)
 800e0fc:	4d1f      	ldr	r5, [pc, #124]	; (800e17c <scalbn+0xd4>)
 800e0fe:	0020      	movs	r0, r4
 800e100:	0029      	movs	r1, r5
 800e102:	4a1c      	ldr	r2, [pc, #112]	; (800e174 <scalbn+0xcc>)
 800e104:	4b1c      	ldr	r3, [pc, #112]	; (800e178 <scalbn+0xd0>)
 800e106:	f7f3 ff1f 	bl	8001f48 <__aeabi_dmul>
 800e10a:	e7e9      	b.n	800e0e0 <scalbn+0x38>
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	dd05      	ble.n	800e11c <scalbn+0x74>
 800e110:	4c1b      	ldr	r4, [pc, #108]	; (800e180 <scalbn+0xd8>)
 800e112:	051b      	lsls	r3, r3, #20
 800e114:	4022      	ands	r2, r4
 800e116:	431a      	orrs	r2, r3
 800e118:	0011      	movs	r1, r2
 800e11a:	e7e1      	b.n	800e0e0 <scalbn+0x38>
 800e11c:	001d      	movs	r5, r3
 800e11e:	3535      	adds	r5, #53	; 0x35
 800e120:	da13      	bge.n	800e14a <scalbn+0xa2>
 800e122:	4a18      	ldr	r2, [pc, #96]	; (800e184 <scalbn+0xdc>)
 800e124:	0fcb      	lsrs	r3, r1, #31
 800e126:	4294      	cmp	r4, r2
 800e128:	dd08      	ble.n	800e13c <scalbn+0x94>
 800e12a:	4812      	ldr	r0, [pc, #72]	; (800e174 <scalbn+0xcc>)
 800e12c:	4912      	ldr	r1, [pc, #72]	; (800e178 <scalbn+0xd0>)
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <scalbn+0x8e>
 800e132:	4810      	ldr	r0, [pc, #64]	; (800e174 <scalbn+0xcc>)
 800e134:	4911      	ldr	r1, [pc, #68]	; (800e17c <scalbn+0xd4>)
 800e136:	4a0f      	ldr	r2, [pc, #60]	; (800e174 <scalbn+0xcc>)
 800e138:	4b0f      	ldr	r3, [pc, #60]	; (800e178 <scalbn+0xd0>)
 800e13a:	e7e4      	b.n	800e106 <scalbn+0x5e>
 800e13c:	4809      	ldr	r0, [pc, #36]	; (800e164 <scalbn+0xbc>)
 800e13e:	490a      	ldr	r1, [pc, #40]	; (800e168 <scalbn+0xc0>)
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0c3      	beq.n	800e0cc <scalbn+0x24>
 800e144:	4807      	ldr	r0, [pc, #28]	; (800e164 <scalbn+0xbc>)
 800e146:	4910      	ldr	r1, [pc, #64]	; (800e188 <scalbn+0xe0>)
 800e148:	e7c0      	b.n	800e0cc <scalbn+0x24>
 800e14a:	4c0d      	ldr	r4, [pc, #52]	; (800e180 <scalbn+0xd8>)
 800e14c:	3336      	adds	r3, #54	; 0x36
 800e14e:	4022      	ands	r2, r4
 800e150:	051b      	lsls	r3, r3, #20
 800e152:	4313      	orrs	r3, r2
 800e154:	0019      	movs	r1, r3
 800e156:	2200      	movs	r2, #0
 800e158:	4b0c      	ldr	r3, [pc, #48]	; (800e18c <scalbn+0xe4>)
 800e15a:	e7d4      	b.n	800e106 <scalbn+0x5e>
 800e15c:	43500000 	.word	0x43500000
 800e160:	ffff3cb0 	.word	0xffff3cb0
 800e164:	c2f8f359 	.word	0xc2f8f359
 800e168:	01a56e1f 	.word	0x01a56e1f
 800e16c:	000007ff 	.word	0x000007ff
 800e170:	000007fe 	.word	0x000007fe
 800e174:	8800759c 	.word	0x8800759c
 800e178:	7e37e43c 	.word	0x7e37e43c
 800e17c:	fe37e43c 	.word	0xfe37e43c
 800e180:	800fffff 	.word	0x800fffff
 800e184:	0000c350 	.word	0x0000c350
 800e188:	81a56e1f 	.word	0x81a56e1f
 800e18c:	3c900000 	.word	0x3c900000

0800e190 <_init>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	46c0      	nop			; (mov r8, r8)
 800e194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e196:	bc08      	pop	{r3}
 800e198:	469e      	mov	lr, r3
 800e19a:	4770      	bx	lr

0800e19c <_fini>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	46c0      	nop			; (mov r8, r8)
 800e1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a2:	bc08      	pop	{r3}
 800e1a4:	469e      	mov	lr, r3
 800e1a6:	4770      	bx	lr
