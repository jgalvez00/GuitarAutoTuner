
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008914  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b0  080097b0  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  080097b0  080097b0  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097b0  080097b0  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080097b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200000ec  080098a4  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080098a4  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146a4  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e41  00000000  00000000  000347b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00037600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00038810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ff51  00000000  00000000  000398f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004fc7  00000000  00000000  00049841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0004e808  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004d9c  00000000  00000000  0004e85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000ec 	.word	0x200000ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080089b8 	.word	0x080089b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000f0 	.word	0x200000f0
 8000100:	080089b8 	.word	0x080089b8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f000 fc0f 	bl	8000c38 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb59 	bl	8000adc <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fc01 	bl	8000c38 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fbf7 	bl	8000c38 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fb7b 	bl	8000b54 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fb71 	bl	8000b54 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	0415      	lsls	r5, r2, #16
 8000484:	0c2d      	lsrs	r5, r5, #16
 8000486:	000f      	movs	r7, r1
 8000488:	0001      	movs	r1, r0
 800048a:	002e      	movs	r6, r5
 800048c:	46c6      	mov	lr, r8
 800048e:	4684      	mov	ip, r0
 8000490:	0400      	lsls	r0, r0, #16
 8000492:	0c14      	lsrs	r4, r2, #16
 8000494:	0c00      	lsrs	r0, r0, #16
 8000496:	0c09      	lsrs	r1, r1, #16
 8000498:	4346      	muls	r6, r0
 800049a:	434d      	muls	r5, r1
 800049c:	4360      	muls	r0, r4
 800049e:	4361      	muls	r1, r4
 80004a0:	1940      	adds	r0, r0, r5
 80004a2:	0c34      	lsrs	r4, r6, #16
 80004a4:	1824      	adds	r4, r4, r0
 80004a6:	b500      	push	{lr}
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	d903      	bls.n	80004b4 <__aeabi_lmul+0x34>
 80004ac:	2080      	movs	r0, #128	; 0x80
 80004ae:	0240      	lsls	r0, r0, #9
 80004b0:	4680      	mov	r8, r0
 80004b2:	4441      	add	r1, r8
 80004b4:	0c25      	lsrs	r5, r4, #16
 80004b6:	186d      	adds	r5, r5, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	4359      	muls	r1, r3
 80004bc:	437a      	muls	r2, r7
 80004be:	0430      	lsls	r0, r6, #16
 80004c0:	1949      	adds	r1, r1, r5
 80004c2:	0424      	lsls	r4, r4, #16
 80004c4:	0c00      	lsrs	r0, r0, #16
 80004c6:	1820      	adds	r0, r4, r0
 80004c8:	1889      	adds	r1, r1, r2
 80004ca:	bc80      	pop	{r7}
 80004cc:	46b8      	mov	r8, r7
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004d0 <__aeabi_d2uiz>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	2200      	movs	r2, #0
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <__aeabi_d2uiz+0x38>)
 80004d6:	0004      	movs	r4, r0
 80004d8:	000d      	movs	r5, r1
 80004da:	f7ff ffc7 	bl	800046c <__aeabi_dcmpge>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d104      	bne.n	80004ec <__aeabi_d2uiz+0x1c>
 80004e2:	0020      	movs	r0, r4
 80004e4:	0029      	movs	r1, r5
 80004e6:	f001 fa15 	bl	8001914 <__aeabi_d2iz>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <__aeabi_d2uiz+0x38>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0020      	movs	r0, r4
 80004f2:	0029      	movs	r1, r5
 80004f4:	f000 fe7c 	bl	80011f0 <__aeabi_dsub>
 80004f8:	f001 fa0c 	bl	8001914 <__aeabi_d2iz>
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	061b      	lsls	r3, r3, #24
 8000500:	469c      	mov	ip, r3
 8000502:	4460      	add	r0, ip
 8000504:	e7f1      	b.n	80004ea <__aeabi_d2uiz+0x1a>
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	41e00000 	.word	0x41e00000

0800050c <__aeabi_ddiv>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	4657      	mov	r7, sl
 8000510:	464e      	mov	r6, r9
 8000512:	4645      	mov	r5, r8
 8000514:	46de      	mov	lr, fp
 8000516:	b5e0      	push	{r5, r6, r7, lr}
 8000518:	4681      	mov	r9, r0
 800051a:	0005      	movs	r5, r0
 800051c:	030c      	lsls	r4, r1, #12
 800051e:	0048      	lsls	r0, r1, #1
 8000520:	4692      	mov	sl, r2
 8000522:	001f      	movs	r7, r3
 8000524:	b085      	sub	sp, #20
 8000526:	0b24      	lsrs	r4, r4, #12
 8000528:	0d40      	lsrs	r0, r0, #21
 800052a:	0fce      	lsrs	r6, r1, #31
 800052c:	2800      	cmp	r0, #0
 800052e:	d059      	beq.n	80005e4 <__aeabi_ddiv+0xd8>
 8000530:	4b87      	ldr	r3, [pc, #540]	; (8000750 <__aeabi_ddiv+0x244>)
 8000532:	4298      	cmp	r0, r3
 8000534:	d100      	bne.n	8000538 <__aeabi_ddiv+0x2c>
 8000536:	e098      	b.n	800066a <__aeabi_ddiv+0x15e>
 8000538:	0f6b      	lsrs	r3, r5, #29
 800053a:	00e4      	lsls	r4, r4, #3
 800053c:	431c      	orrs	r4, r3
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	4323      	orrs	r3, r4
 8000544:	4698      	mov	r8, r3
 8000546:	4b83      	ldr	r3, [pc, #524]	; (8000754 <__aeabi_ddiv+0x248>)
 8000548:	00ed      	lsls	r5, r5, #3
 800054a:	469b      	mov	fp, r3
 800054c:	2300      	movs	r3, #0
 800054e:	4699      	mov	r9, r3
 8000550:	4483      	add	fp, r0
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	033c      	lsls	r4, r7, #12
 8000556:	007b      	lsls	r3, r7, #1
 8000558:	4650      	mov	r0, sl
 800055a:	0b24      	lsrs	r4, r4, #12
 800055c:	0d5b      	lsrs	r3, r3, #21
 800055e:	0fff      	lsrs	r7, r7, #31
 8000560:	2b00      	cmp	r3, #0
 8000562:	d067      	beq.n	8000634 <__aeabi_ddiv+0x128>
 8000564:	4a7a      	ldr	r2, [pc, #488]	; (8000750 <__aeabi_ddiv+0x244>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d018      	beq.n	800059c <__aeabi_ddiv+0x90>
 800056a:	497a      	ldr	r1, [pc, #488]	; (8000754 <__aeabi_ddiv+0x248>)
 800056c:	0f42      	lsrs	r2, r0, #29
 800056e:	468c      	mov	ip, r1
 8000570:	00e4      	lsls	r4, r4, #3
 8000572:	4659      	mov	r1, fp
 8000574:	4314      	orrs	r4, r2
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	4463      	add	r3, ip
 800057a:	0412      	lsls	r2, r2, #16
 800057c:	1acb      	subs	r3, r1, r3
 800057e:	4314      	orrs	r4, r2
 8000580:	469b      	mov	fp, r3
 8000582:	00c2      	lsls	r2, r0, #3
 8000584:	2000      	movs	r0, #0
 8000586:	0033      	movs	r3, r6
 8000588:	407b      	eors	r3, r7
 800058a:	469a      	mov	sl, r3
 800058c:	464b      	mov	r3, r9
 800058e:	2b0f      	cmp	r3, #15
 8000590:	d900      	bls.n	8000594 <__aeabi_ddiv+0x88>
 8000592:	e0ef      	b.n	8000774 <__aeabi_ddiv+0x268>
 8000594:	4970      	ldr	r1, [pc, #448]	; (8000758 <__aeabi_ddiv+0x24c>)
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	58cb      	ldr	r3, [r1, r3]
 800059a:	469f      	mov	pc, r3
 800059c:	4b6f      	ldr	r3, [pc, #444]	; (800075c <__aeabi_ddiv+0x250>)
 800059e:	4652      	mov	r2, sl
 80005a0:	469c      	mov	ip, r3
 80005a2:	4322      	orrs	r2, r4
 80005a4:	44e3      	add	fp, ip
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_ddiv+0xa0>
 80005aa:	e095      	b.n	80006d8 <__aeabi_ddiv+0x1cc>
 80005ac:	4649      	mov	r1, r9
 80005ae:	2302      	movs	r3, #2
 80005b0:	4319      	orrs	r1, r3
 80005b2:	4689      	mov	r9, r1
 80005b4:	2400      	movs	r4, #0
 80005b6:	2002      	movs	r0, #2
 80005b8:	e7e5      	b.n	8000586 <__aeabi_ddiv+0x7a>
 80005ba:	2300      	movs	r3, #0
 80005bc:	2400      	movs	r4, #0
 80005be:	2500      	movs	r5, #0
 80005c0:	4652      	mov	r2, sl
 80005c2:	051b      	lsls	r3, r3, #20
 80005c4:	4323      	orrs	r3, r4
 80005c6:	07d2      	lsls	r2, r2, #31
 80005c8:	4313      	orrs	r3, r2
 80005ca:	0028      	movs	r0, r5
 80005cc:	0019      	movs	r1, r3
 80005ce:	b005      	add	sp, #20
 80005d0:	bcf0      	pop	{r4, r5, r6, r7}
 80005d2:	46bb      	mov	fp, r7
 80005d4:	46b2      	mov	sl, r6
 80005d6:	46a9      	mov	r9, r5
 80005d8:	46a0      	mov	r8, r4
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005dc:	2400      	movs	r4, #0
 80005de:	2500      	movs	r5, #0
 80005e0:	4b5b      	ldr	r3, [pc, #364]	; (8000750 <__aeabi_ddiv+0x244>)
 80005e2:	e7ed      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 80005e4:	464b      	mov	r3, r9
 80005e6:	4323      	orrs	r3, r4
 80005e8:	4698      	mov	r8, r3
 80005ea:	d100      	bne.n	80005ee <__aeabi_ddiv+0xe2>
 80005ec:	e089      	b.n	8000702 <__aeabi_ddiv+0x1f6>
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_ddiv+0xe8>
 80005f2:	e1e0      	b.n	80009b6 <__aeabi_ddiv+0x4aa>
 80005f4:	0020      	movs	r0, r4
 80005f6:	f001 f9f3 	bl	80019e0 <__clzsi2>
 80005fa:	0001      	movs	r1, r0
 80005fc:	0002      	movs	r2, r0
 80005fe:	390b      	subs	r1, #11
 8000600:	231d      	movs	r3, #29
 8000602:	1a5b      	subs	r3, r3, r1
 8000604:	4649      	mov	r1, r9
 8000606:	0010      	movs	r0, r2
 8000608:	40d9      	lsrs	r1, r3
 800060a:	3808      	subs	r0, #8
 800060c:	4084      	lsls	r4, r0
 800060e:	000b      	movs	r3, r1
 8000610:	464d      	mov	r5, r9
 8000612:	4323      	orrs	r3, r4
 8000614:	4698      	mov	r8, r3
 8000616:	4085      	lsls	r5, r0
 8000618:	4851      	ldr	r0, [pc, #324]	; (8000760 <__aeabi_ddiv+0x254>)
 800061a:	033c      	lsls	r4, r7, #12
 800061c:	1a83      	subs	r3, r0, r2
 800061e:	469b      	mov	fp, r3
 8000620:	2300      	movs	r3, #0
 8000622:	4699      	mov	r9, r3
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	007b      	lsls	r3, r7, #1
 8000628:	4650      	mov	r0, sl
 800062a:	0b24      	lsrs	r4, r4, #12
 800062c:	0d5b      	lsrs	r3, r3, #21
 800062e:	0fff      	lsrs	r7, r7, #31
 8000630:	2b00      	cmp	r3, #0
 8000632:	d197      	bne.n	8000564 <__aeabi_ddiv+0x58>
 8000634:	4652      	mov	r2, sl
 8000636:	4322      	orrs	r2, r4
 8000638:	d055      	beq.n	80006e6 <__aeabi_ddiv+0x1da>
 800063a:	2c00      	cmp	r4, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_ddiv+0x134>
 800063e:	e1ca      	b.n	80009d6 <__aeabi_ddiv+0x4ca>
 8000640:	0020      	movs	r0, r4
 8000642:	f001 f9cd 	bl	80019e0 <__clzsi2>
 8000646:	0002      	movs	r2, r0
 8000648:	3a0b      	subs	r2, #11
 800064a:	231d      	movs	r3, #29
 800064c:	0001      	movs	r1, r0
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	4652      	mov	r2, sl
 8000652:	3908      	subs	r1, #8
 8000654:	40da      	lsrs	r2, r3
 8000656:	408c      	lsls	r4, r1
 8000658:	4314      	orrs	r4, r2
 800065a:	4652      	mov	r2, sl
 800065c:	408a      	lsls	r2, r1
 800065e:	4b41      	ldr	r3, [pc, #260]	; (8000764 <__aeabi_ddiv+0x258>)
 8000660:	4458      	add	r0, fp
 8000662:	469b      	mov	fp, r3
 8000664:	4483      	add	fp, r0
 8000666:	2000      	movs	r0, #0
 8000668:	e78d      	b.n	8000586 <__aeabi_ddiv+0x7a>
 800066a:	464b      	mov	r3, r9
 800066c:	4323      	orrs	r3, r4
 800066e:	4698      	mov	r8, r3
 8000670:	d140      	bne.n	80006f4 <__aeabi_ddiv+0x1e8>
 8000672:	2308      	movs	r3, #8
 8000674:	4699      	mov	r9, r3
 8000676:	3b06      	subs	r3, #6
 8000678:	2500      	movs	r5, #0
 800067a:	4683      	mov	fp, r0
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	e769      	b.n	8000554 <__aeabi_ddiv+0x48>
 8000680:	46b2      	mov	sl, r6
 8000682:	9b00      	ldr	r3, [sp, #0]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d0a9      	beq.n	80005dc <__aeabi_ddiv+0xd0>
 8000688:	2b03      	cmp	r3, #3
 800068a:	d100      	bne.n	800068e <__aeabi_ddiv+0x182>
 800068c:	e211      	b.n	8000ab2 <__aeabi_ddiv+0x5a6>
 800068e:	2b01      	cmp	r3, #1
 8000690:	d093      	beq.n	80005ba <__aeabi_ddiv+0xae>
 8000692:	4a35      	ldr	r2, [pc, #212]	; (8000768 <__aeabi_ddiv+0x25c>)
 8000694:	445a      	add	r2, fp
 8000696:	2a00      	cmp	r2, #0
 8000698:	dc00      	bgt.n	800069c <__aeabi_ddiv+0x190>
 800069a:	e13c      	b.n	8000916 <__aeabi_ddiv+0x40a>
 800069c:	076b      	lsls	r3, r5, #29
 800069e:	d000      	beq.n	80006a2 <__aeabi_ddiv+0x196>
 80006a0:	e1a7      	b.n	80009f2 <__aeabi_ddiv+0x4e6>
 80006a2:	08ed      	lsrs	r5, r5, #3
 80006a4:	4643      	mov	r3, r8
 80006a6:	01db      	lsls	r3, r3, #7
 80006a8:	d506      	bpl.n	80006b8 <__aeabi_ddiv+0x1ac>
 80006aa:	4642      	mov	r2, r8
 80006ac:	4b2f      	ldr	r3, [pc, #188]	; (800076c <__aeabi_ddiv+0x260>)
 80006ae:	401a      	ands	r2, r3
 80006b0:	4690      	mov	r8, r2
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	00d2      	lsls	r2, r2, #3
 80006b6:	445a      	add	r2, fp
 80006b8:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <__aeabi_ddiv+0x264>)
 80006ba:	429a      	cmp	r2, r3
 80006bc:	dc8e      	bgt.n	80005dc <__aeabi_ddiv+0xd0>
 80006be:	4643      	mov	r3, r8
 80006c0:	0552      	lsls	r2, r2, #21
 80006c2:	0758      	lsls	r0, r3, #29
 80006c4:	025c      	lsls	r4, r3, #9
 80006c6:	4305      	orrs	r5, r0
 80006c8:	0b24      	lsrs	r4, r4, #12
 80006ca:	0d53      	lsrs	r3, r2, #21
 80006cc:	e778      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 80006ce:	46ba      	mov	sl, r7
 80006d0:	46a0      	mov	r8, r4
 80006d2:	0015      	movs	r5, r2
 80006d4:	9000      	str	r0, [sp, #0]
 80006d6:	e7d4      	b.n	8000682 <__aeabi_ddiv+0x176>
 80006d8:	464a      	mov	r2, r9
 80006da:	2303      	movs	r3, #3
 80006dc:	431a      	orrs	r2, r3
 80006de:	4691      	mov	r9, r2
 80006e0:	2003      	movs	r0, #3
 80006e2:	4652      	mov	r2, sl
 80006e4:	e74f      	b.n	8000586 <__aeabi_ddiv+0x7a>
 80006e6:	4649      	mov	r1, r9
 80006e8:	2301      	movs	r3, #1
 80006ea:	4319      	orrs	r1, r3
 80006ec:	4689      	mov	r9, r1
 80006ee:	2400      	movs	r4, #0
 80006f0:	2001      	movs	r0, #1
 80006f2:	e748      	b.n	8000586 <__aeabi_ddiv+0x7a>
 80006f4:	230c      	movs	r3, #12
 80006f6:	4699      	mov	r9, r3
 80006f8:	3b09      	subs	r3, #9
 80006fa:	46a0      	mov	r8, r4
 80006fc:	4683      	mov	fp, r0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	e728      	b.n	8000554 <__aeabi_ddiv+0x48>
 8000702:	2304      	movs	r3, #4
 8000704:	4699      	mov	r9, r3
 8000706:	2300      	movs	r3, #0
 8000708:	469b      	mov	fp, r3
 800070a:	3301      	adds	r3, #1
 800070c:	2500      	movs	r5, #0
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	e720      	b.n	8000554 <__aeabi_ddiv+0x48>
 8000712:	2300      	movs	r3, #0
 8000714:	2480      	movs	r4, #128	; 0x80
 8000716:	469a      	mov	sl, r3
 8000718:	2500      	movs	r5, #0
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <__aeabi_ddiv+0x244>)
 800071c:	0324      	lsls	r4, r4, #12
 800071e:	e74f      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	4641      	mov	r1, r8
 8000724:	031b      	lsls	r3, r3, #12
 8000726:	4219      	tst	r1, r3
 8000728:	d008      	beq.n	800073c <__aeabi_ddiv+0x230>
 800072a:	421c      	tst	r4, r3
 800072c:	d106      	bne.n	800073c <__aeabi_ddiv+0x230>
 800072e:	431c      	orrs	r4, r3
 8000730:	0324      	lsls	r4, r4, #12
 8000732:	46ba      	mov	sl, r7
 8000734:	0015      	movs	r5, r2
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <__aeabi_ddiv+0x244>)
 8000738:	0b24      	lsrs	r4, r4, #12
 800073a:	e741      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 800073c:	2480      	movs	r4, #128	; 0x80
 800073e:	4643      	mov	r3, r8
 8000740:	0324      	lsls	r4, r4, #12
 8000742:	431c      	orrs	r4, r3
 8000744:	0324      	lsls	r4, r4, #12
 8000746:	46b2      	mov	sl, r6
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <__aeabi_ddiv+0x244>)
 800074a:	0b24      	lsrs	r4, r4, #12
 800074c:	e738      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	000007ff 	.word	0x000007ff
 8000754:	fffffc01 	.word	0xfffffc01
 8000758:	08008b70 	.word	0x08008b70
 800075c:	fffff801 	.word	0xfffff801
 8000760:	fffffc0d 	.word	0xfffffc0d
 8000764:	000003f3 	.word	0x000003f3
 8000768:	000003ff 	.word	0x000003ff
 800076c:	feffffff 	.word	0xfeffffff
 8000770:	000007fe 	.word	0x000007fe
 8000774:	4544      	cmp	r4, r8
 8000776:	d200      	bcs.n	800077a <__aeabi_ddiv+0x26e>
 8000778:	e116      	b.n	80009a8 <__aeabi_ddiv+0x49c>
 800077a:	d100      	bne.n	800077e <__aeabi_ddiv+0x272>
 800077c:	e111      	b.n	80009a2 <__aeabi_ddiv+0x496>
 800077e:	2301      	movs	r3, #1
 8000780:	425b      	negs	r3, r3
 8000782:	469c      	mov	ip, r3
 8000784:	002e      	movs	r6, r5
 8000786:	4640      	mov	r0, r8
 8000788:	2500      	movs	r5, #0
 800078a:	44e3      	add	fp, ip
 800078c:	0223      	lsls	r3, r4, #8
 800078e:	0e14      	lsrs	r4, r2, #24
 8000790:	431c      	orrs	r4, r3
 8000792:	0c1b      	lsrs	r3, r3, #16
 8000794:	4699      	mov	r9, r3
 8000796:	0423      	lsls	r3, r4, #16
 8000798:	0c1f      	lsrs	r7, r3, #16
 800079a:	0212      	lsls	r2, r2, #8
 800079c:	4649      	mov	r1, r9
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	9701      	str	r7, [sp, #4]
 80007a2:	f7ff fd3f 	bl	8000224 <__aeabi_uidivmod>
 80007a6:	0002      	movs	r2, r0
 80007a8:	437a      	muls	r2, r7
 80007aa:	040b      	lsls	r3, r1, #16
 80007ac:	0c31      	lsrs	r1, r6, #16
 80007ae:	4680      	mov	r8, r0
 80007b0:	4319      	orrs	r1, r3
 80007b2:	428a      	cmp	r2, r1
 80007b4:	d90b      	bls.n	80007ce <__aeabi_ddiv+0x2c2>
 80007b6:	2301      	movs	r3, #1
 80007b8:	425b      	negs	r3, r3
 80007ba:	469c      	mov	ip, r3
 80007bc:	1909      	adds	r1, r1, r4
 80007be:	44e0      	add	r8, ip
 80007c0:	428c      	cmp	r4, r1
 80007c2:	d804      	bhi.n	80007ce <__aeabi_ddiv+0x2c2>
 80007c4:	428a      	cmp	r2, r1
 80007c6:	d902      	bls.n	80007ce <__aeabi_ddiv+0x2c2>
 80007c8:	1e83      	subs	r3, r0, #2
 80007ca:	4698      	mov	r8, r3
 80007cc:	1909      	adds	r1, r1, r4
 80007ce:	1a88      	subs	r0, r1, r2
 80007d0:	4649      	mov	r1, r9
 80007d2:	f7ff fd27 	bl	8000224 <__aeabi_uidivmod>
 80007d6:	0409      	lsls	r1, r1, #16
 80007d8:	468c      	mov	ip, r1
 80007da:	0431      	lsls	r1, r6, #16
 80007dc:	4666      	mov	r6, ip
 80007de:	9a01      	ldr	r2, [sp, #4]
 80007e0:	0c09      	lsrs	r1, r1, #16
 80007e2:	4342      	muls	r2, r0
 80007e4:	0003      	movs	r3, r0
 80007e6:	4331      	orrs	r1, r6
 80007e8:	428a      	cmp	r2, r1
 80007ea:	d904      	bls.n	80007f6 <__aeabi_ddiv+0x2ea>
 80007ec:	1909      	adds	r1, r1, r4
 80007ee:	3b01      	subs	r3, #1
 80007f0:	428c      	cmp	r4, r1
 80007f2:	d800      	bhi.n	80007f6 <__aeabi_ddiv+0x2ea>
 80007f4:	e111      	b.n	8000a1a <__aeabi_ddiv+0x50e>
 80007f6:	1a89      	subs	r1, r1, r2
 80007f8:	4642      	mov	r2, r8
 80007fa:	9e00      	ldr	r6, [sp, #0]
 80007fc:	0412      	lsls	r2, r2, #16
 80007fe:	431a      	orrs	r2, r3
 8000800:	0c33      	lsrs	r3, r6, #16
 8000802:	001f      	movs	r7, r3
 8000804:	0c10      	lsrs	r0, r2, #16
 8000806:	4690      	mov	r8, r2
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	0413      	lsls	r3, r2, #16
 800080c:	0432      	lsls	r2, r6, #16
 800080e:	0c16      	lsrs	r6, r2, #16
 8000810:	0032      	movs	r2, r6
 8000812:	0c1b      	lsrs	r3, r3, #16
 8000814:	435a      	muls	r2, r3
 8000816:	9603      	str	r6, [sp, #12]
 8000818:	437b      	muls	r3, r7
 800081a:	4346      	muls	r6, r0
 800081c:	4378      	muls	r0, r7
 800081e:	0c17      	lsrs	r7, r2, #16
 8000820:	46bc      	mov	ip, r7
 8000822:	199b      	adds	r3, r3, r6
 8000824:	4463      	add	r3, ip
 8000826:	429e      	cmp	r6, r3
 8000828:	d903      	bls.n	8000832 <__aeabi_ddiv+0x326>
 800082a:	2680      	movs	r6, #128	; 0x80
 800082c:	0276      	lsls	r6, r6, #9
 800082e:	46b4      	mov	ip, r6
 8000830:	4460      	add	r0, ip
 8000832:	0c1e      	lsrs	r6, r3, #16
 8000834:	1830      	adds	r0, r6, r0
 8000836:	0416      	lsls	r6, r2, #16
 8000838:	041b      	lsls	r3, r3, #16
 800083a:	0c36      	lsrs	r6, r6, #16
 800083c:	199e      	adds	r6, r3, r6
 800083e:	4281      	cmp	r1, r0
 8000840:	d200      	bcs.n	8000844 <__aeabi_ddiv+0x338>
 8000842:	e09c      	b.n	800097e <__aeabi_ddiv+0x472>
 8000844:	d100      	bne.n	8000848 <__aeabi_ddiv+0x33c>
 8000846:	e097      	b.n	8000978 <__aeabi_ddiv+0x46c>
 8000848:	1bae      	subs	r6, r5, r6
 800084a:	1a09      	subs	r1, r1, r0
 800084c:	42b5      	cmp	r5, r6
 800084e:	4180      	sbcs	r0, r0
 8000850:	4240      	negs	r0, r0
 8000852:	1a08      	subs	r0, r1, r0
 8000854:	4284      	cmp	r4, r0
 8000856:	d100      	bne.n	800085a <__aeabi_ddiv+0x34e>
 8000858:	e111      	b.n	8000a7e <__aeabi_ddiv+0x572>
 800085a:	4649      	mov	r1, r9
 800085c:	f7ff fce2 	bl	8000224 <__aeabi_uidivmod>
 8000860:	9a01      	ldr	r2, [sp, #4]
 8000862:	040b      	lsls	r3, r1, #16
 8000864:	4342      	muls	r2, r0
 8000866:	0c31      	lsrs	r1, r6, #16
 8000868:	0005      	movs	r5, r0
 800086a:	4319      	orrs	r1, r3
 800086c:	428a      	cmp	r2, r1
 800086e:	d907      	bls.n	8000880 <__aeabi_ddiv+0x374>
 8000870:	1909      	adds	r1, r1, r4
 8000872:	3d01      	subs	r5, #1
 8000874:	428c      	cmp	r4, r1
 8000876:	d803      	bhi.n	8000880 <__aeabi_ddiv+0x374>
 8000878:	428a      	cmp	r2, r1
 800087a:	d901      	bls.n	8000880 <__aeabi_ddiv+0x374>
 800087c:	1e85      	subs	r5, r0, #2
 800087e:	1909      	adds	r1, r1, r4
 8000880:	1a88      	subs	r0, r1, r2
 8000882:	4649      	mov	r1, r9
 8000884:	f7ff fcce 	bl	8000224 <__aeabi_uidivmod>
 8000888:	0409      	lsls	r1, r1, #16
 800088a:	468c      	mov	ip, r1
 800088c:	0431      	lsls	r1, r6, #16
 800088e:	4666      	mov	r6, ip
 8000890:	9a01      	ldr	r2, [sp, #4]
 8000892:	0c09      	lsrs	r1, r1, #16
 8000894:	4342      	muls	r2, r0
 8000896:	0003      	movs	r3, r0
 8000898:	4331      	orrs	r1, r6
 800089a:	428a      	cmp	r2, r1
 800089c:	d907      	bls.n	80008ae <__aeabi_ddiv+0x3a2>
 800089e:	1909      	adds	r1, r1, r4
 80008a0:	3b01      	subs	r3, #1
 80008a2:	428c      	cmp	r4, r1
 80008a4:	d803      	bhi.n	80008ae <__aeabi_ddiv+0x3a2>
 80008a6:	428a      	cmp	r2, r1
 80008a8:	d901      	bls.n	80008ae <__aeabi_ddiv+0x3a2>
 80008aa:	1e83      	subs	r3, r0, #2
 80008ac:	1909      	adds	r1, r1, r4
 80008ae:	9e03      	ldr	r6, [sp, #12]
 80008b0:	1a89      	subs	r1, r1, r2
 80008b2:	0032      	movs	r2, r6
 80008b4:	042d      	lsls	r5, r5, #16
 80008b6:	431d      	orrs	r5, r3
 80008b8:	9f02      	ldr	r7, [sp, #8]
 80008ba:	042b      	lsls	r3, r5, #16
 80008bc:	0c1b      	lsrs	r3, r3, #16
 80008be:	435a      	muls	r2, r3
 80008c0:	437b      	muls	r3, r7
 80008c2:	469c      	mov	ip, r3
 80008c4:	0c28      	lsrs	r0, r5, #16
 80008c6:	4346      	muls	r6, r0
 80008c8:	0c13      	lsrs	r3, r2, #16
 80008ca:	44b4      	add	ip, r6
 80008cc:	4463      	add	r3, ip
 80008ce:	4378      	muls	r0, r7
 80008d0:	429e      	cmp	r6, r3
 80008d2:	d903      	bls.n	80008dc <__aeabi_ddiv+0x3d0>
 80008d4:	2680      	movs	r6, #128	; 0x80
 80008d6:	0276      	lsls	r6, r6, #9
 80008d8:	46b4      	mov	ip, r6
 80008da:	4460      	add	r0, ip
 80008dc:	0c1e      	lsrs	r6, r3, #16
 80008de:	0412      	lsls	r2, r2, #16
 80008e0:	041b      	lsls	r3, r3, #16
 80008e2:	0c12      	lsrs	r2, r2, #16
 80008e4:	1830      	adds	r0, r6, r0
 80008e6:	189b      	adds	r3, r3, r2
 80008e8:	4281      	cmp	r1, r0
 80008ea:	d306      	bcc.n	80008fa <__aeabi_ddiv+0x3ee>
 80008ec:	d002      	beq.n	80008f4 <__aeabi_ddiv+0x3e8>
 80008ee:	2301      	movs	r3, #1
 80008f0:	431d      	orrs	r5, r3
 80008f2:	e6ce      	b.n	8000692 <__aeabi_ddiv+0x186>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_ddiv+0x3ee>
 80008f8:	e6cb      	b.n	8000692 <__aeabi_ddiv+0x186>
 80008fa:	1861      	adds	r1, r4, r1
 80008fc:	1e6e      	subs	r6, r5, #1
 80008fe:	42a1      	cmp	r1, r4
 8000900:	d200      	bcs.n	8000904 <__aeabi_ddiv+0x3f8>
 8000902:	e0a4      	b.n	8000a4e <__aeabi_ddiv+0x542>
 8000904:	4281      	cmp	r1, r0
 8000906:	d200      	bcs.n	800090a <__aeabi_ddiv+0x3fe>
 8000908:	e0c9      	b.n	8000a9e <__aeabi_ddiv+0x592>
 800090a:	d100      	bne.n	800090e <__aeabi_ddiv+0x402>
 800090c:	e0d9      	b.n	8000ac2 <__aeabi_ddiv+0x5b6>
 800090e:	0035      	movs	r5, r6
 8000910:	e7ed      	b.n	80008ee <__aeabi_ddiv+0x3e2>
 8000912:	2501      	movs	r5, #1
 8000914:	426d      	negs	r5, r5
 8000916:	2101      	movs	r1, #1
 8000918:	1a89      	subs	r1, r1, r2
 800091a:	2938      	cmp	r1, #56	; 0x38
 800091c:	dd00      	ble.n	8000920 <__aeabi_ddiv+0x414>
 800091e:	e64c      	b.n	80005ba <__aeabi_ddiv+0xae>
 8000920:	291f      	cmp	r1, #31
 8000922:	dc00      	bgt.n	8000926 <__aeabi_ddiv+0x41a>
 8000924:	e07f      	b.n	8000a26 <__aeabi_ddiv+0x51a>
 8000926:	231f      	movs	r3, #31
 8000928:	425b      	negs	r3, r3
 800092a:	1a9a      	subs	r2, r3, r2
 800092c:	4643      	mov	r3, r8
 800092e:	40d3      	lsrs	r3, r2
 8000930:	2920      	cmp	r1, #32
 8000932:	d004      	beq.n	800093e <__aeabi_ddiv+0x432>
 8000934:	4644      	mov	r4, r8
 8000936:	4a65      	ldr	r2, [pc, #404]	; (8000acc <__aeabi_ddiv+0x5c0>)
 8000938:	445a      	add	r2, fp
 800093a:	4094      	lsls	r4, r2
 800093c:	4325      	orrs	r5, r4
 800093e:	1e6a      	subs	r2, r5, #1
 8000940:	4195      	sbcs	r5, r2
 8000942:	2207      	movs	r2, #7
 8000944:	432b      	orrs	r3, r5
 8000946:	0015      	movs	r5, r2
 8000948:	2400      	movs	r4, #0
 800094a:	401d      	ands	r5, r3
 800094c:	421a      	tst	r2, r3
 800094e:	d100      	bne.n	8000952 <__aeabi_ddiv+0x446>
 8000950:	e0a1      	b.n	8000a96 <__aeabi_ddiv+0x58a>
 8000952:	220f      	movs	r2, #15
 8000954:	2400      	movs	r4, #0
 8000956:	401a      	ands	r2, r3
 8000958:	2a04      	cmp	r2, #4
 800095a:	d100      	bne.n	800095e <__aeabi_ddiv+0x452>
 800095c:	e098      	b.n	8000a90 <__aeabi_ddiv+0x584>
 800095e:	1d1a      	adds	r2, r3, #4
 8000960:	429a      	cmp	r2, r3
 8000962:	419b      	sbcs	r3, r3
 8000964:	425b      	negs	r3, r3
 8000966:	18e4      	adds	r4, r4, r3
 8000968:	0013      	movs	r3, r2
 800096a:	0222      	lsls	r2, r4, #8
 800096c:	d400      	bmi.n	8000970 <__aeabi_ddiv+0x464>
 800096e:	e08f      	b.n	8000a90 <__aeabi_ddiv+0x584>
 8000970:	2301      	movs	r3, #1
 8000972:	2400      	movs	r4, #0
 8000974:	2500      	movs	r5, #0
 8000976:	e623      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 8000978:	42b5      	cmp	r5, r6
 800097a:	d300      	bcc.n	800097e <__aeabi_ddiv+0x472>
 800097c:	e764      	b.n	8000848 <__aeabi_ddiv+0x33c>
 800097e:	4643      	mov	r3, r8
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	9b00      	ldr	r3, [sp, #0]
 8000984:	469c      	mov	ip, r3
 8000986:	4465      	add	r5, ip
 8000988:	001f      	movs	r7, r3
 800098a:	429d      	cmp	r5, r3
 800098c:	419b      	sbcs	r3, r3
 800098e:	425b      	negs	r3, r3
 8000990:	191b      	adds	r3, r3, r4
 8000992:	18c9      	adds	r1, r1, r3
 8000994:	428c      	cmp	r4, r1
 8000996:	d23a      	bcs.n	8000a0e <__aeabi_ddiv+0x502>
 8000998:	4288      	cmp	r0, r1
 800099a:	d863      	bhi.n	8000a64 <__aeabi_ddiv+0x558>
 800099c:	d060      	beq.n	8000a60 <__aeabi_ddiv+0x554>
 800099e:	4690      	mov	r8, r2
 80009a0:	e752      	b.n	8000848 <__aeabi_ddiv+0x33c>
 80009a2:	42aa      	cmp	r2, r5
 80009a4:	d900      	bls.n	80009a8 <__aeabi_ddiv+0x49c>
 80009a6:	e6ea      	b.n	800077e <__aeabi_ddiv+0x272>
 80009a8:	4643      	mov	r3, r8
 80009aa:	07de      	lsls	r6, r3, #31
 80009ac:	0858      	lsrs	r0, r3, #1
 80009ae:	086b      	lsrs	r3, r5, #1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	07ed      	lsls	r5, r5, #31
 80009b4:	e6ea      	b.n	800078c <__aeabi_ddiv+0x280>
 80009b6:	4648      	mov	r0, r9
 80009b8:	f001 f812 	bl	80019e0 <__clzsi2>
 80009bc:	0001      	movs	r1, r0
 80009be:	0002      	movs	r2, r0
 80009c0:	3115      	adds	r1, #21
 80009c2:	3220      	adds	r2, #32
 80009c4:	291c      	cmp	r1, #28
 80009c6:	dc00      	bgt.n	80009ca <__aeabi_ddiv+0x4be>
 80009c8:	e61a      	b.n	8000600 <__aeabi_ddiv+0xf4>
 80009ca:	464b      	mov	r3, r9
 80009cc:	3808      	subs	r0, #8
 80009ce:	4083      	lsls	r3, r0
 80009d0:	2500      	movs	r5, #0
 80009d2:	4698      	mov	r8, r3
 80009d4:	e620      	b.n	8000618 <__aeabi_ddiv+0x10c>
 80009d6:	f001 f803 	bl	80019e0 <__clzsi2>
 80009da:	0003      	movs	r3, r0
 80009dc:	001a      	movs	r2, r3
 80009de:	3215      	adds	r2, #21
 80009e0:	3020      	adds	r0, #32
 80009e2:	2a1c      	cmp	r2, #28
 80009e4:	dc00      	bgt.n	80009e8 <__aeabi_ddiv+0x4dc>
 80009e6:	e630      	b.n	800064a <__aeabi_ddiv+0x13e>
 80009e8:	4654      	mov	r4, sl
 80009ea:	3b08      	subs	r3, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	409c      	lsls	r4, r3
 80009f0:	e635      	b.n	800065e <__aeabi_ddiv+0x152>
 80009f2:	230f      	movs	r3, #15
 80009f4:	402b      	ands	r3, r5
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d100      	bne.n	80009fc <__aeabi_ddiv+0x4f0>
 80009fa:	e652      	b.n	80006a2 <__aeabi_ddiv+0x196>
 80009fc:	2305      	movs	r3, #5
 80009fe:	425b      	negs	r3, r3
 8000a00:	42ab      	cmp	r3, r5
 8000a02:	419b      	sbcs	r3, r3
 8000a04:	3504      	adds	r5, #4
 8000a06:	425b      	negs	r3, r3
 8000a08:	08ed      	lsrs	r5, r5, #3
 8000a0a:	4498      	add	r8, r3
 8000a0c:	e64a      	b.n	80006a4 <__aeabi_ddiv+0x198>
 8000a0e:	428c      	cmp	r4, r1
 8000a10:	d1c5      	bne.n	800099e <__aeabi_ddiv+0x492>
 8000a12:	42af      	cmp	r7, r5
 8000a14:	d9c0      	bls.n	8000998 <__aeabi_ddiv+0x48c>
 8000a16:	4690      	mov	r8, r2
 8000a18:	e716      	b.n	8000848 <__aeabi_ddiv+0x33c>
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	d800      	bhi.n	8000a20 <__aeabi_ddiv+0x514>
 8000a1e:	e6ea      	b.n	80007f6 <__aeabi_ddiv+0x2ea>
 8000a20:	1e83      	subs	r3, r0, #2
 8000a22:	1909      	adds	r1, r1, r4
 8000a24:	e6e7      	b.n	80007f6 <__aeabi_ddiv+0x2ea>
 8000a26:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <__aeabi_ddiv+0x5c4>)
 8000a28:	0028      	movs	r0, r5
 8000a2a:	445a      	add	r2, fp
 8000a2c:	4643      	mov	r3, r8
 8000a2e:	4095      	lsls	r5, r2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	40c8      	lsrs	r0, r1
 8000a34:	1e6a      	subs	r2, r5, #1
 8000a36:	4195      	sbcs	r5, r2
 8000a38:	4644      	mov	r4, r8
 8000a3a:	4303      	orrs	r3, r0
 8000a3c:	432b      	orrs	r3, r5
 8000a3e:	40cc      	lsrs	r4, r1
 8000a40:	075a      	lsls	r2, r3, #29
 8000a42:	d092      	beq.n	800096a <__aeabi_ddiv+0x45e>
 8000a44:	220f      	movs	r2, #15
 8000a46:	401a      	ands	r2, r3
 8000a48:	2a04      	cmp	r2, #4
 8000a4a:	d188      	bne.n	800095e <__aeabi_ddiv+0x452>
 8000a4c:	e78d      	b.n	800096a <__aeabi_ddiv+0x45e>
 8000a4e:	0035      	movs	r5, r6
 8000a50:	4281      	cmp	r1, r0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_ddiv+0x54a>
 8000a54:	e74b      	b.n	80008ee <__aeabi_ddiv+0x3e2>
 8000a56:	9a00      	ldr	r2, [sp, #0]
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_ddiv+0x552>
 8000a5c:	e747      	b.n	80008ee <__aeabi_ddiv+0x3e2>
 8000a5e:	e618      	b.n	8000692 <__aeabi_ddiv+0x186>
 8000a60:	42ae      	cmp	r6, r5
 8000a62:	d99c      	bls.n	800099e <__aeabi_ddiv+0x492>
 8000a64:	2302      	movs	r3, #2
 8000a66:	425b      	negs	r3, r3
 8000a68:	469c      	mov	ip, r3
 8000a6a:	9b00      	ldr	r3, [sp, #0]
 8000a6c:	44e0      	add	r8, ip
 8000a6e:	469c      	mov	ip, r3
 8000a70:	4465      	add	r5, ip
 8000a72:	429d      	cmp	r5, r3
 8000a74:	419b      	sbcs	r3, r3
 8000a76:	425b      	negs	r3, r3
 8000a78:	191b      	adds	r3, r3, r4
 8000a7a:	18c9      	adds	r1, r1, r3
 8000a7c:	e6e4      	b.n	8000848 <__aeabi_ddiv+0x33c>
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <__aeabi_ddiv+0x5c8>)
 8000a80:	445a      	add	r2, fp
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	dc00      	bgt.n	8000a88 <__aeabi_ddiv+0x57c>
 8000a86:	e744      	b.n	8000912 <__aeabi_ddiv+0x406>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	4498      	add	r8, r3
 8000a8e:	e609      	b.n	80006a4 <__aeabi_ddiv+0x198>
 8000a90:	0765      	lsls	r5, r4, #29
 8000a92:	0264      	lsls	r4, r4, #9
 8000a94:	0b24      	lsrs	r4, r4, #12
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	431d      	orrs	r5, r3
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e590      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 8000a9e:	9e00      	ldr	r6, [sp, #0]
 8000aa0:	3d02      	subs	r5, #2
 8000aa2:	0072      	lsls	r2, r6, #1
 8000aa4:	42b2      	cmp	r2, r6
 8000aa6:	41bf      	sbcs	r7, r7
 8000aa8:	427f      	negs	r7, r7
 8000aaa:	193c      	adds	r4, r7, r4
 8000aac:	1909      	adds	r1, r1, r4
 8000aae:	9200      	str	r2, [sp, #0]
 8000ab0:	e7ce      	b.n	8000a50 <__aeabi_ddiv+0x544>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	0324      	lsls	r4, r4, #12
 8000ab8:	431c      	orrs	r4, r3
 8000aba:	0324      	lsls	r4, r4, #12
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <__aeabi_ddiv+0x5cc>)
 8000abe:	0b24      	lsrs	r4, r4, #12
 8000ac0:	e57e      	b.n	80005c0 <__aeabi_ddiv+0xb4>
 8000ac2:	9a00      	ldr	r2, [sp, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d3ea      	bcc.n	8000a9e <__aeabi_ddiv+0x592>
 8000ac8:	0035      	movs	r5, r6
 8000aca:	e7c4      	b.n	8000a56 <__aeabi_ddiv+0x54a>
 8000acc:	0000043e 	.word	0x0000043e
 8000ad0:	0000041e 	.word	0x0000041e
 8000ad4:	000003ff 	.word	0x000003ff
 8000ad8:	000007ff 	.word	0x000007ff

08000adc <__eqdf2>:
 8000adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ade:	464f      	mov	r7, r9
 8000ae0:	4646      	mov	r6, r8
 8000ae2:	46d6      	mov	lr, sl
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	4691      	mov	r9, r2
 8000ae8:	031a      	lsls	r2, r3, #12
 8000aea:	0b12      	lsrs	r2, r2, #12
 8000aec:	4d18      	ldr	r5, [pc, #96]	; (8000b50 <__eqdf2+0x74>)
 8000aee:	b5c0      	push	{r6, r7, lr}
 8000af0:	004c      	lsls	r4, r1, #1
 8000af2:	030f      	lsls	r7, r1, #12
 8000af4:	4692      	mov	sl, r2
 8000af6:	005a      	lsls	r2, r3, #1
 8000af8:	0006      	movs	r6, r0
 8000afa:	4680      	mov	r8, r0
 8000afc:	0b3f      	lsrs	r7, r7, #12
 8000afe:	2001      	movs	r0, #1
 8000b00:	0d64      	lsrs	r4, r4, #21
 8000b02:	0fc9      	lsrs	r1, r1, #31
 8000b04:	0d52      	lsrs	r2, r2, #21
 8000b06:	0fdb      	lsrs	r3, r3, #31
 8000b08:	42ac      	cmp	r4, r5
 8000b0a:	d00a      	beq.n	8000b22 <__eqdf2+0x46>
 8000b0c:	42aa      	cmp	r2, r5
 8000b0e:	d003      	beq.n	8000b18 <__eqdf2+0x3c>
 8000b10:	4294      	cmp	r4, r2
 8000b12:	d101      	bne.n	8000b18 <__eqdf2+0x3c>
 8000b14:	4557      	cmp	r7, sl
 8000b16:	d00d      	beq.n	8000b34 <__eqdf2+0x58>
 8000b18:	bce0      	pop	{r5, r6, r7}
 8000b1a:	46ba      	mov	sl, r7
 8000b1c:	46b1      	mov	r9, r6
 8000b1e:	46a8      	mov	r8, r5
 8000b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b22:	003d      	movs	r5, r7
 8000b24:	4335      	orrs	r5, r6
 8000b26:	d1f7      	bne.n	8000b18 <__eqdf2+0x3c>
 8000b28:	42a2      	cmp	r2, r4
 8000b2a:	d1f5      	bne.n	8000b18 <__eqdf2+0x3c>
 8000b2c:	4652      	mov	r2, sl
 8000b2e:	4665      	mov	r5, ip
 8000b30:	432a      	orrs	r2, r5
 8000b32:	d1f1      	bne.n	8000b18 <__eqdf2+0x3c>
 8000b34:	2001      	movs	r0, #1
 8000b36:	45c8      	cmp	r8, r9
 8000b38:	d1ee      	bne.n	8000b18 <__eqdf2+0x3c>
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	d006      	beq.n	8000b4c <__eqdf2+0x70>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d1ea      	bne.n	8000b18 <__eqdf2+0x3c>
 8000b42:	433e      	orrs	r6, r7
 8000b44:	0030      	movs	r0, r6
 8000b46:	1e46      	subs	r6, r0, #1
 8000b48:	41b0      	sbcs	r0, r6
 8000b4a:	e7e5      	b.n	8000b18 <__eqdf2+0x3c>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7e3      	b.n	8000b18 <__eqdf2+0x3c>
 8000b50:	000007ff 	.word	0x000007ff

08000b54 <__gedf2>:
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	464e      	mov	r6, r9
 8000b58:	4645      	mov	r5, r8
 8000b5a:	4657      	mov	r7, sl
 8000b5c:	46de      	mov	lr, fp
 8000b5e:	0004      	movs	r4, r0
 8000b60:	0018      	movs	r0, r3
 8000b62:	b5e0      	push	{r5, r6, r7, lr}
 8000b64:	0016      	movs	r6, r2
 8000b66:	031b      	lsls	r3, r3, #12
 8000b68:	0b1b      	lsrs	r3, r3, #12
 8000b6a:	4d32      	ldr	r5, [pc, #200]	; (8000c34 <__gedf2+0xe0>)
 8000b6c:	030f      	lsls	r7, r1, #12
 8000b6e:	004a      	lsls	r2, r1, #1
 8000b70:	4699      	mov	r9, r3
 8000b72:	0043      	lsls	r3, r0, #1
 8000b74:	46a4      	mov	ip, r4
 8000b76:	46b0      	mov	r8, r6
 8000b78:	0b3f      	lsrs	r7, r7, #12
 8000b7a:	0d52      	lsrs	r2, r2, #21
 8000b7c:	0fc9      	lsrs	r1, r1, #31
 8000b7e:	0d5b      	lsrs	r3, r3, #21
 8000b80:	0fc0      	lsrs	r0, r0, #31
 8000b82:	42aa      	cmp	r2, r5
 8000b84:	d029      	beq.n	8000bda <__gedf2+0x86>
 8000b86:	42ab      	cmp	r3, r5
 8000b88:	d018      	beq.n	8000bbc <__gedf2+0x68>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d12a      	bne.n	8000be4 <__gedf2+0x90>
 8000b8e:	433c      	orrs	r4, r7
 8000b90:	46a3      	mov	fp, r4
 8000b92:	4265      	negs	r5, r4
 8000b94:	4165      	adcs	r5, r4
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <__gedf2+0x4c>
 8000b9a:	464c      	mov	r4, r9
 8000b9c:	4326      	orrs	r6, r4
 8000b9e:	d027      	beq.n	8000bf0 <__gedf2+0x9c>
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d115      	bne.n	8000bd0 <__gedf2+0x7c>
 8000ba4:	4281      	cmp	r1, r0
 8000ba6:	d028      	beq.n	8000bfa <__gedf2+0xa6>
 8000ba8:	2002      	movs	r0, #2
 8000baa:	3901      	subs	r1, #1
 8000bac:	4008      	ands	r0, r1
 8000bae:	3801      	subs	r0, #1
 8000bb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb2:	46bb      	mov	fp, r7
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	46a9      	mov	r9, r5
 8000bb8:	46a0      	mov	r8, r4
 8000bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bbc:	464d      	mov	r5, r9
 8000bbe:	432e      	orrs	r6, r5
 8000bc0:	d12f      	bne.n	8000c22 <__gedf2+0xce>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d1ee      	bne.n	8000ba4 <__gedf2+0x50>
 8000bc6:	433c      	orrs	r4, r7
 8000bc8:	4265      	negs	r5, r4
 8000bca:	4165      	adcs	r5, r4
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d0e9      	beq.n	8000ba4 <__gedf2+0x50>
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d1ed      	bne.n	8000bb0 <__gedf2+0x5c>
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	e7ea      	b.n	8000bb0 <__gedf2+0x5c>
 8000bda:	003d      	movs	r5, r7
 8000bdc:	4325      	orrs	r5, r4
 8000bde:	d120      	bne.n	8000c22 <__gedf2+0xce>
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d0eb      	beq.n	8000bbc <__gedf2+0x68>
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1dd      	bne.n	8000ba4 <__gedf2+0x50>
 8000be8:	464c      	mov	r4, r9
 8000bea:	4326      	orrs	r6, r4
 8000bec:	d1da      	bne.n	8000ba4 <__gedf2+0x50>
 8000bee:	e7db      	b.n	8000ba8 <__gedf2+0x54>
 8000bf0:	465b      	mov	r3, fp
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0db      	beq.n	8000bb0 <__gedf2+0x5c>
 8000bf8:	e7d6      	b.n	8000ba8 <__gedf2+0x54>
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dc0a      	bgt.n	8000c14 <__gedf2+0xc0>
 8000bfe:	dbe7      	blt.n	8000bd0 <__gedf2+0x7c>
 8000c00:	454f      	cmp	r7, r9
 8000c02:	d8d1      	bhi.n	8000ba8 <__gedf2+0x54>
 8000c04:	d010      	beq.n	8000c28 <__gedf2+0xd4>
 8000c06:	2000      	movs	r0, #0
 8000c08:	454f      	cmp	r7, r9
 8000c0a:	d2d1      	bcs.n	8000bb0 <__gedf2+0x5c>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d0e1      	beq.n	8000bd4 <__gedf2+0x80>
 8000c10:	0008      	movs	r0, r1
 8000c12:	e7cd      	b.n	8000bb0 <__gedf2+0x5c>
 8000c14:	4243      	negs	r3, r0
 8000c16:	4158      	adcs	r0, r3
 8000c18:	2302      	movs	r3, #2
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	4018      	ands	r0, r3
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7c6      	b.n	8000bb0 <__gedf2+0x5c>
 8000c22:	2002      	movs	r0, #2
 8000c24:	4240      	negs	r0, r0
 8000c26:	e7c3      	b.n	8000bb0 <__gedf2+0x5c>
 8000c28:	45c4      	cmp	ip, r8
 8000c2a:	d8bd      	bhi.n	8000ba8 <__gedf2+0x54>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	45c4      	cmp	ip, r8
 8000c30:	d2be      	bcs.n	8000bb0 <__gedf2+0x5c>
 8000c32:	e7eb      	b.n	8000c0c <__gedf2+0xb8>
 8000c34:	000007ff 	.word	0x000007ff

08000c38 <__ledf2>:
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	464e      	mov	r6, r9
 8000c3c:	4645      	mov	r5, r8
 8000c3e:	4657      	mov	r7, sl
 8000c40:	46de      	mov	lr, fp
 8000c42:	0004      	movs	r4, r0
 8000c44:	0018      	movs	r0, r3
 8000c46:	b5e0      	push	{r5, r6, r7, lr}
 8000c48:	0016      	movs	r6, r2
 8000c4a:	031b      	lsls	r3, r3, #12
 8000c4c:	0b1b      	lsrs	r3, r3, #12
 8000c4e:	4d31      	ldr	r5, [pc, #196]	; (8000d14 <__ledf2+0xdc>)
 8000c50:	030f      	lsls	r7, r1, #12
 8000c52:	004a      	lsls	r2, r1, #1
 8000c54:	4699      	mov	r9, r3
 8000c56:	0043      	lsls	r3, r0, #1
 8000c58:	46a4      	mov	ip, r4
 8000c5a:	46b0      	mov	r8, r6
 8000c5c:	0b3f      	lsrs	r7, r7, #12
 8000c5e:	0d52      	lsrs	r2, r2, #21
 8000c60:	0fc9      	lsrs	r1, r1, #31
 8000c62:	0d5b      	lsrs	r3, r3, #21
 8000c64:	0fc0      	lsrs	r0, r0, #31
 8000c66:	42aa      	cmp	r2, r5
 8000c68:	d011      	beq.n	8000c8e <__ledf2+0x56>
 8000c6a:	42ab      	cmp	r3, r5
 8000c6c:	d014      	beq.n	8000c98 <__ledf2+0x60>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d12f      	bne.n	8000cd2 <__ledf2+0x9a>
 8000c72:	433c      	orrs	r4, r7
 8000c74:	46a3      	mov	fp, r4
 8000c76:	4265      	negs	r5, r4
 8000c78:	4165      	adcs	r5, r4
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d114      	bne.n	8000ca8 <__ledf2+0x70>
 8000c7e:	464c      	mov	r4, r9
 8000c80:	4326      	orrs	r6, r4
 8000c82:	d111      	bne.n	8000ca8 <__ledf2+0x70>
 8000c84:	465b      	mov	r3, fp
 8000c86:	2000      	movs	r0, #0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d017      	beq.n	8000cbc <__ledf2+0x84>
 8000c8c:	e010      	b.n	8000cb0 <__ledf2+0x78>
 8000c8e:	003d      	movs	r5, r7
 8000c90:	4325      	orrs	r5, r4
 8000c92:	d112      	bne.n	8000cba <__ledf2+0x82>
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d11c      	bne.n	8000cd2 <__ledf2+0x9a>
 8000c98:	464d      	mov	r5, r9
 8000c9a:	432e      	orrs	r6, r5
 8000c9c:	d10d      	bne.n	8000cba <__ledf2+0x82>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d104      	bne.n	8000cac <__ledf2+0x74>
 8000ca2:	433c      	orrs	r4, r7
 8000ca4:	4265      	negs	r5, r4
 8000ca6:	4165      	adcs	r5, r4
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d10d      	bne.n	8000cc8 <__ledf2+0x90>
 8000cac:	4281      	cmp	r1, r0
 8000cae:	d016      	beq.n	8000cde <__ledf2+0xa6>
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	3901      	subs	r1, #1
 8000cb4:	4008      	ands	r0, r1
 8000cb6:	3801      	subs	r0, #1
 8000cb8:	e000      	b.n	8000cbc <__ledf2+0x84>
 8000cba:	2002      	movs	r0, #2
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	46bb      	mov	fp, r7
 8000cc0:	46b2      	mov	sl, r6
 8000cc2:	46a9      	mov	r9, r5
 8000cc4:	46a0      	mov	r8, r4
 8000cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d1f7      	bne.n	8000cbc <__ledf2+0x84>
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4240      	negs	r0, r0
 8000cd0:	e7f4      	b.n	8000cbc <__ledf2+0x84>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1ea      	bne.n	8000cac <__ledf2+0x74>
 8000cd6:	464c      	mov	r4, r9
 8000cd8:	4326      	orrs	r6, r4
 8000cda:	d1e7      	bne.n	8000cac <__ledf2+0x74>
 8000cdc:	e7e8      	b.n	8000cb0 <__ledf2+0x78>
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dd06      	ble.n	8000cf0 <__ledf2+0xb8>
 8000ce2:	4243      	negs	r3, r0
 8000ce4:	4158      	adcs	r0, r3
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	4240      	negs	r0, r0
 8000cea:	4018      	ands	r0, r3
 8000cec:	3801      	subs	r0, #1
 8000cee:	e7e5      	b.n	8000cbc <__ledf2+0x84>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbe9      	blt.n	8000cc8 <__ledf2+0x90>
 8000cf4:	454f      	cmp	r7, r9
 8000cf6:	d8db      	bhi.n	8000cb0 <__ledf2+0x78>
 8000cf8:	d006      	beq.n	8000d08 <__ledf2+0xd0>
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	454f      	cmp	r7, r9
 8000cfe:	d2dd      	bcs.n	8000cbc <__ledf2+0x84>
 8000d00:	2900      	cmp	r1, #0
 8000d02:	d0e3      	beq.n	8000ccc <__ledf2+0x94>
 8000d04:	0008      	movs	r0, r1
 8000d06:	e7d9      	b.n	8000cbc <__ledf2+0x84>
 8000d08:	45c4      	cmp	ip, r8
 8000d0a:	d8d1      	bhi.n	8000cb0 <__ledf2+0x78>
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	45c4      	cmp	ip, r8
 8000d10:	d2d4      	bcs.n	8000cbc <__ledf2+0x84>
 8000d12:	e7f5      	b.n	8000d00 <__ledf2+0xc8>
 8000d14:	000007ff 	.word	0x000007ff

08000d18 <__aeabi_dmul>:
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	4657      	mov	r7, sl
 8000d1c:	464e      	mov	r6, r9
 8000d1e:	4645      	mov	r5, r8
 8000d20:	46de      	mov	lr, fp
 8000d22:	b5e0      	push	{r5, r6, r7, lr}
 8000d24:	4698      	mov	r8, r3
 8000d26:	030c      	lsls	r4, r1, #12
 8000d28:	004b      	lsls	r3, r1, #1
 8000d2a:	0006      	movs	r6, r0
 8000d2c:	4692      	mov	sl, r2
 8000d2e:	b087      	sub	sp, #28
 8000d30:	0b24      	lsrs	r4, r4, #12
 8000d32:	0d5b      	lsrs	r3, r3, #21
 8000d34:	0fcf      	lsrs	r7, r1, #31
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d06c      	beq.n	8000e14 <__aeabi_dmul+0xfc>
 8000d3a:	4add      	ldr	r2, [pc, #884]	; (80010b0 <__aeabi_dmul+0x398>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dmul+0x2a>
 8000d40:	e086      	b.n	8000e50 <__aeabi_dmul+0x138>
 8000d42:	0f42      	lsrs	r2, r0, #29
 8000d44:	00e4      	lsls	r4, r4, #3
 8000d46:	4314      	orrs	r4, r2
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	0412      	lsls	r2, r2, #16
 8000d4c:	4314      	orrs	r4, r2
 8000d4e:	4ad9      	ldr	r2, [pc, #868]	; (80010b4 <__aeabi_dmul+0x39c>)
 8000d50:	00c5      	lsls	r5, r0, #3
 8000d52:	4694      	mov	ip, r2
 8000d54:	4463      	add	r3, ip
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4699      	mov	r9, r3
 8000d5c:	469b      	mov	fp, r3
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4642      	mov	r2, r8
 8000d62:	031e      	lsls	r6, r3, #12
 8000d64:	0fd2      	lsrs	r2, r2, #31
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4650      	mov	r0, sl
 8000d6a:	4690      	mov	r8, r2
 8000d6c:	0b36      	lsrs	r6, r6, #12
 8000d6e:	0d5b      	lsrs	r3, r3, #21
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dmul+0x5c>
 8000d72:	e078      	b.n	8000e66 <__aeabi_dmul+0x14e>
 8000d74:	4ace      	ldr	r2, [pc, #824]	; (80010b0 <__aeabi_dmul+0x398>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d01d      	beq.n	8000db6 <__aeabi_dmul+0x9e>
 8000d7a:	49ce      	ldr	r1, [pc, #824]	; (80010b4 <__aeabi_dmul+0x39c>)
 8000d7c:	0f42      	lsrs	r2, r0, #29
 8000d7e:	468c      	mov	ip, r1
 8000d80:	9900      	ldr	r1, [sp, #0]
 8000d82:	4463      	add	r3, ip
 8000d84:	00f6      	lsls	r6, r6, #3
 8000d86:	468c      	mov	ip, r1
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	449c      	add	ip, r3
 8000d8e:	0412      	lsls	r2, r2, #16
 8000d90:	4663      	mov	r3, ip
 8000d92:	4316      	orrs	r6, r2
 8000d94:	00c2      	lsls	r2, r0, #3
 8000d96:	2000      	movs	r0, #0
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	9900      	ldr	r1, [sp, #0]
 8000d9c:	4643      	mov	r3, r8
 8000d9e:	3101      	adds	r1, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	4649      	mov	r1, r9
 8000da4:	407b      	eors	r3, r7
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	290f      	cmp	r1, #15
 8000daa:	d900      	bls.n	8000dae <__aeabi_dmul+0x96>
 8000dac:	e07e      	b.n	8000eac <__aeabi_dmul+0x194>
 8000dae:	4bc2      	ldr	r3, [pc, #776]	; (80010b8 <__aeabi_dmul+0x3a0>)
 8000db0:	0089      	lsls	r1, r1, #2
 8000db2:	5859      	ldr	r1, [r3, r1]
 8000db4:	468f      	mov	pc, r1
 8000db6:	4652      	mov	r2, sl
 8000db8:	9b00      	ldr	r3, [sp, #0]
 8000dba:	4332      	orrs	r2, r6
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_dmul+0xa8>
 8000dbe:	e156      	b.n	800106e <__aeabi_dmul+0x356>
 8000dc0:	49bb      	ldr	r1, [pc, #748]	; (80010b0 <__aeabi_dmul+0x398>)
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	4463      	add	r3, ip
 8000dc8:	4649      	mov	r1, r9
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2302      	movs	r3, #2
 8000dce:	4319      	orrs	r1, r3
 8000dd0:	4689      	mov	r9, r1
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	e7e1      	b.n	8000d9a <__aeabi_dmul+0x82>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	0034      	movs	r4, r6
 8000ddc:	0015      	movs	r5, r2
 8000dde:	4683      	mov	fp, r0
 8000de0:	465b      	mov	r3, fp
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d05e      	beq.n	8000ea4 <__aeabi_dmul+0x18c>
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d100      	bne.n	8000dec <__aeabi_dmul+0xd4>
 8000dea:	e1f3      	b.n	80011d4 <__aeabi_dmul+0x4bc>
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d000      	beq.n	8000df2 <__aeabi_dmul+0xda>
 8000df0:	e118      	b.n	8001024 <__aeabi_dmul+0x30c>
 8000df2:	2200      	movs	r2, #0
 8000df4:	2400      	movs	r4, #0
 8000df6:	2500      	movs	r5, #0
 8000df8:	9b01      	ldr	r3, [sp, #4]
 8000dfa:	0512      	lsls	r2, r2, #20
 8000dfc:	4322      	orrs	r2, r4
 8000dfe:	07db      	lsls	r3, r3, #31
 8000e00:	431a      	orrs	r2, r3
 8000e02:	0028      	movs	r0, r5
 8000e04:	0011      	movs	r1, r2
 8000e06:	b007      	add	sp, #28
 8000e08:	bcf0      	pop	{r4, r5, r6, r7}
 8000e0a:	46bb      	mov	fp, r7
 8000e0c:	46b2      	mov	sl, r6
 8000e0e:	46a9      	mov	r9, r5
 8000e10:	46a0      	mov	r8, r4
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e14:	0025      	movs	r5, r4
 8000e16:	4305      	orrs	r5, r0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_dmul+0x104>
 8000e1a:	e141      	b.n	80010a0 <__aeabi_dmul+0x388>
 8000e1c:	2c00      	cmp	r4, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dmul+0x10a>
 8000e20:	e1ad      	b.n	800117e <__aeabi_dmul+0x466>
 8000e22:	0020      	movs	r0, r4
 8000e24:	f000 fddc 	bl	80019e0 <__clzsi2>
 8000e28:	0001      	movs	r1, r0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	390b      	subs	r1, #11
 8000e2e:	231d      	movs	r3, #29
 8000e30:	0010      	movs	r0, r2
 8000e32:	1a5b      	subs	r3, r3, r1
 8000e34:	0031      	movs	r1, r6
 8000e36:	0035      	movs	r5, r6
 8000e38:	3808      	subs	r0, #8
 8000e3a:	4084      	lsls	r4, r0
 8000e3c:	40d9      	lsrs	r1, r3
 8000e3e:	4085      	lsls	r5, r0
 8000e40:	430c      	orrs	r4, r1
 8000e42:	489e      	ldr	r0, [pc, #632]	; (80010bc <__aeabi_dmul+0x3a4>)
 8000e44:	1a83      	subs	r3, r0, r2
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4699      	mov	r9, r3
 8000e4c:	469b      	mov	fp, r3
 8000e4e:	e786      	b.n	8000d5e <__aeabi_dmul+0x46>
 8000e50:	0005      	movs	r5, r0
 8000e52:	4325      	orrs	r5, r4
 8000e54:	d000      	beq.n	8000e58 <__aeabi_dmul+0x140>
 8000e56:	e11c      	b.n	8001092 <__aeabi_dmul+0x37a>
 8000e58:	2208      	movs	r2, #8
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	2400      	movs	r4, #0
 8000e60:	4691      	mov	r9, r2
 8000e62:	469b      	mov	fp, r3
 8000e64:	e77b      	b.n	8000d5e <__aeabi_dmul+0x46>
 8000e66:	4652      	mov	r2, sl
 8000e68:	4332      	orrs	r2, r6
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_dmul+0x156>
 8000e6c:	e10a      	b.n	8001084 <__aeabi_dmul+0x36c>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dmul+0x15c>
 8000e72:	e176      	b.n	8001162 <__aeabi_dmul+0x44a>
 8000e74:	0030      	movs	r0, r6
 8000e76:	f000 fdb3 	bl	80019e0 <__clzsi2>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	3a0b      	subs	r2, #11
 8000e7e:	231d      	movs	r3, #29
 8000e80:	0001      	movs	r1, r0
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	4652      	mov	r2, sl
 8000e86:	3908      	subs	r1, #8
 8000e88:	40da      	lsrs	r2, r3
 8000e8a:	408e      	lsls	r6, r1
 8000e8c:	4316      	orrs	r6, r2
 8000e8e:	4652      	mov	r2, sl
 8000e90:	408a      	lsls	r2, r1
 8000e92:	9b00      	ldr	r3, [sp, #0]
 8000e94:	4989      	ldr	r1, [pc, #548]	; (80010bc <__aeabi_dmul+0x3a4>)
 8000e96:	1a18      	subs	r0, r3, r0
 8000e98:	0003      	movs	r3, r0
 8000e9a:	468c      	mov	ip, r1
 8000e9c:	4463      	add	r3, ip
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	e77a      	b.n	8000d9a <__aeabi_dmul+0x82>
 8000ea4:	2400      	movs	r4, #0
 8000ea6:	2500      	movs	r5, #0
 8000ea8:	4a81      	ldr	r2, [pc, #516]	; (80010b0 <__aeabi_dmul+0x398>)
 8000eaa:	e7a5      	b.n	8000df8 <__aeabi_dmul+0xe0>
 8000eac:	0c2f      	lsrs	r7, r5, #16
 8000eae:	042d      	lsls	r5, r5, #16
 8000eb0:	0c2d      	lsrs	r5, r5, #16
 8000eb2:	002b      	movs	r3, r5
 8000eb4:	0c11      	lsrs	r1, r2, #16
 8000eb6:	0412      	lsls	r2, r2, #16
 8000eb8:	0c12      	lsrs	r2, r2, #16
 8000eba:	4353      	muls	r3, r2
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	0028      	movs	r0, r5
 8000ec2:	437b      	muls	r3, r7
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	4348      	muls	r0, r1
 8000ec8:	4448      	add	r0, r9
 8000eca:	4683      	mov	fp, r0
 8000ecc:	4640      	mov	r0, r8
 8000ece:	000b      	movs	r3, r1
 8000ed0:	0c00      	lsrs	r0, r0, #16
 8000ed2:	4682      	mov	sl, r0
 8000ed4:	4658      	mov	r0, fp
 8000ed6:	437b      	muls	r3, r7
 8000ed8:	4450      	add	r0, sl
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	4581      	cmp	r9, r0
 8000ede:	d906      	bls.n	8000eee <__aeabi_dmul+0x1d6>
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	4699      	mov	r9, r3
 8000ee8:	44ca      	add	sl, r9
 8000eea:	4653      	mov	r3, sl
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	469b      	mov	fp, r3
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	0400      	lsls	r0, r0, #16
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	4698      	mov	r8, r3
 8000efc:	0003      	movs	r3, r0
 8000efe:	4443      	add	r3, r8
 8000f00:	9304      	str	r3, [sp, #16]
 8000f02:	0c33      	lsrs	r3, r6, #16
 8000f04:	4699      	mov	r9, r3
 8000f06:	002b      	movs	r3, r5
 8000f08:	0436      	lsls	r6, r6, #16
 8000f0a:	0c36      	lsrs	r6, r6, #16
 8000f0c:	4373      	muls	r3, r6
 8000f0e:	4698      	mov	r8, r3
 8000f10:	0033      	movs	r3, r6
 8000f12:	437b      	muls	r3, r7
 8000f14:	469a      	mov	sl, r3
 8000f16:	464b      	mov	r3, r9
 8000f18:	435d      	muls	r5, r3
 8000f1a:	435f      	muls	r7, r3
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	4455      	add	r5, sl
 8000f20:	0c18      	lsrs	r0, r3, #16
 8000f22:	1940      	adds	r0, r0, r5
 8000f24:	4582      	cmp	sl, r0
 8000f26:	d903      	bls.n	8000f30 <__aeabi_dmul+0x218>
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	4457      	add	r7, sl
 8000f30:	0c05      	lsrs	r5, r0, #16
 8000f32:	19eb      	adds	r3, r5, r7
 8000f34:	9305      	str	r3, [sp, #20]
 8000f36:	4643      	mov	r3, r8
 8000f38:	041d      	lsls	r5, r3, #16
 8000f3a:	0c2d      	lsrs	r5, r5, #16
 8000f3c:	0400      	lsls	r0, r0, #16
 8000f3e:	1940      	adds	r0, r0, r5
 8000f40:	0c25      	lsrs	r5, r4, #16
 8000f42:	0424      	lsls	r4, r4, #16
 8000f44:	0c24      	lsrs	r4, r4, #16
 8000f46:	0027      	movs	r7, r4
 8000f48:	4357      	muls	r7, r2
 8000f4a:	436a      	muls	r2, r5
 8000f4c:	4690      	mov	r8, r2
 8000f4e:	002a      	movs	r2, r5
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	469a      	mov	sl, r3
 8000f54:	434a      	muls	r2, r1
 8000f56:	4361      	muls	r1, r4
 8000f58:	4441      	add	r1, r8
 8000f5a:	4451      	add	r1, sl
 8000f5c:	4483      	add	fp, r0
 8000f5e:	4588      	cmp	r8, r1
 8000f60:	d903      	bls.n	8000f6a <__aeabi_dmul+0x252>
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	025b      	lsls	r3, r3, #9
 8000f66:	4698      	mov	r8, r3
 8000f68:	4442      	add	r2, r8
 8000f6a:	043f      	lsls	r7, r7, #16
 8000f6c:	0c0b      	lsrs	r3, r1, #16
 8000f6e:	0c3f      	lsrs	r7, r7, #16
 8000f70:	0409      	lsls	r1, r1, #16
 8000f72:	19c9      	adds	r1, r1, r7
 8000f74:	0027      	movs	r7, r4
 8000f76:	4698      	mov	r8, r3
 8000f78:	464b      	mov	r3, r9
 8000f7a:	4377      	muls	r7, r6
 8000f7c:	435c      	muls	r4, r3
 8000f7e:	436e      	muls	r6, r5
 8000f80:	435d      	muls	r5, r3
 8000f82:	0c3b      	lsrs	r3, r7, #16
 8000f84:	4699      	mov	r9, r3
 8000f86:	19a4      	adds	r4, r4, r6
 8000f88:	444c      	add	r4, r9
 8000f8a:	4442      	add	r2, r8
 8000f8c:	9503      	str	r5, [sp, #12]
 8000f8e:	42a6      	cmp	r6, r4
 8000f90:	d904      	bls.n	8000f9c <__aeabi_dmul+0x284>
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	4698      	mov	r8, r3
 8000f98:	4445      	add	r5, r8
 8000f9a:	9503      	str	r5, [sp, #12]
 8000f9c:	9b02      	ldr	r3, [sp, #8]
 8000f9e:	043f      	lsls	r7, r7, #16
 8000fa0:	445b      	add	r3, fp
 8000fa2:	001e      	movs	r6, r3
 8000fa4:	4283      	cmp	r3, r0
 8000fa6:	4180      	sbcs	r0, r0
 8000fa8:	0423      	lsls	r3, r4, #16
 8000faa:	4698      	mov	r8, r3
 8000fac:	9b05      	ldr	r3, [sp, #20]
 8000fae:	0c3f      	lsrs	r7, r7, #16
 8000fb0:	4447      	add	r7, r8
 8000fb2:	4698      	mov	r8, r3
 8000fb4:	1876      	adds	r6, r6, r1
 8000fb6:	428e      	cmp	r6, r1
 8000fb8:	4189      	sbcs	r1, r1
 8000fba:	4447      	add	r7, r8
 8000fbc:	4240      	negs	r0, r0
 8000fbe:	183d      	adds	r5, r7, r0
 8000fc0:	46a8      	mov	r8, r5
 8000fc2:	4693      	mov	fp, r2
 8000fc4:	4249      	negs	r1, r1
 8000fc6:	468a      	mov	sl, r1
 8000fc8:	44c3      	add	fp, r8
 8000fca:	429f      	cmp	r7, r3
 8000fcc:	41bf      	sbcs	r7, r7
 8000fce:	4580      	cmp	r8, r0
 8000fd0:	4180      	sbcs	r0, r0
 8000fd2:	9b03      	ldr	r3, [sp, #12]
 8000fd4:	44da      	add	sl, fp
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	4653      	mov	r3, sl
 8000fda:	4240      	negs	r0, r0
 8000fdc:	427f      	negs	r7, r7
 8000fde:	4307      	orrs	r7, r0
 8000fe0:	0c24      	lsrs	r4, r4, #16
 8000fe2:	4593      	cmp	fp, r2
 8000fe4:	4192      	sbcs	r2, r2
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	4189      	sbcs	r1, r1
 8000fea:	193f      	adds	r7, r7, r4
 8000fec:	0ddc      	lsrs	r4, r3, #23
 8000fee:	9b04      	ldr	r3, [sp, #16]
 8000ff0:	0275      	lsls	r5, r6, #9
 8000ff2:	431d      	orrs	r5, r3
 8000ff4:	1e68      	subs	r0, r5, #1
 8000ff6:	4185      	sbcs	r5, r0
 8000ff8:	4653      	mov	r3, sl
 8000ffa:	4252      	negs	r2, r2
 8000ffc:	4249      	negs	r1, r1
 8000ffe:	430a      	orrs	r2, r1
 8001000:	18bf      	adds	r7, r7, r2
 8001002:	4447      	add	r7, r8
 8001004:	0df6      	lsrs	r6, r6, #23
 8001006:	027f      	lsls	r7, r7, #9
 8001008:	4335      	orrs	r5, r6
 800100a:	025a      	lsls	r2, r3, #9
 800100c:	433c      	orrs	r4, r7
 800100e:	4315      	orrs	r5, r2
 8001010:	01fb      	lsls	r3, r7, #7
 8001012:	d400      	bmi.n	8001016 <__aeabi_dmul+0x2fe>
 8001014:	e0c1      	b.n	800119a <__aeabi_dmul+0x482>
 8001016:	2101      	movs	r1, #1
 8001018:	086a      	lsrs	r2, r5, #1
 800101a:	400d      	ands	r5, r1
 800101c:	4315      	orrs	r5, r2
 800101e:	07e2      	lsls	r2, r4, #31
 8001020:	4315      	orrs	r5, r2
 8001022:	0864      	lsrs	r4, r4, #1
 8001024:	4926      	ldr	r1, [pc, #152]	; (80010c0 <__aeabi_dmul+0x3a8>)
 8001026:	4461      	add	r1, ip
 8001028:	2900      	cmp	r1, #0
 800102a:	dd56      	ble.n	80010da <__aeabi_dmul+0x3c2>
 800102c:	076b      	lsls	r3, r5, #29
 800102e:	d009      	beq.n	8001044 <__aeabi_dmul+0x32c>
 8001030:	220f      	movs	r2, #15
 8001032:	402a      	ands	r2, r5
 8001034:	2a04      	cmp	r2, #4
 8001036:	d005      	beq.n	8001044 <__aeabi_dmul+0x32c>
 8001038:	1d2a      	adds	r2, r5, #4
 800103a:	42aa      	cmp	r2, r5
 800103c:	41ad      	sbcs	r5, r5
 800103e:	426d      	negs	r5, r5
 8001040:	1964      	adds	r4, r4, r5
 8001042:	0015      	movs	r5, r2
 8001044:	01e3      	lsls	r3, r4, #7
 8001046:	d504      	bpl.n	8001052 <__aeabi_dmul+0x33a>
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <__aeabi_dmul+0x3ac>)
 800104c:	00c9      	lsls	r1, r1, #3
 800104e:	4014      	ands	r4, r2
 8001050:	4461      	add	r1, ip
 8001052:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <__aeabi_dmul+0x3b0>)
 8001054:	4291      	cmp	r1, r2
 8001056:	dd00      	ble.n	800105a <__aeabi_dmul+0x342>
 8001058:	e724      	b.n	8000ea4 <__aeabi_dmul+0x18c>
 800105a:	0762      	lsls	r2, r4, #29
 800105c:	08ed      	lsrs	r5, r5, #3
 800105e:	0264      	lsls	r4, r4, #9
 8001060:	0549      	lsls	r1, r1, #21
 8001062:	4315      	orrs	r5, r2
 8001064:	0b24      	lsrs	r4, r4, #12
 8001066:	0d4a      	lsrs	r2, r1, #21
 8001068:	e6c6      	b.n	8000df8 <__aeabi_dmul+0xe0>
 800106a:	9701      	str	r7, [sp, #4]
 800106c:	e6b8      	b.n	8000de0 <__aeabi_dmul+0xc8>
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <__aeabi_dmul+0x398>)
 8001070:	2003      	movs	r0, #3
 8001072:	4694      	mov	ip, r2
 8001074:	4463      	add	r3, ip
 8001076:	464a      	mov	r2, r9
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2303      	movs	r3, #3
 800107c:	431a      	orrs	r2, r3
 800107e:	4691      	mov	r9, r2
 8001080:	4652      	mov	r2, sl
 8001082:	e68a      	b.n	8000d9a <__aeabi_dmul+0x82>
 8001084:	4649      	mov	r1, r9
 8001086:	2301      	movs	r3, #1
 8001088:	4319      	orrs	r1, r3
 800108a:	4689      	mov	r9, r1
 800108c:	2600      	movs	r6, #0
 800108e:	2001      	movs	r0, #1
 8001090:	e683      	b.n	8000d9a <__aeabi_dmul+0x82>
 8001092:	220c      	movs	r2, #12
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2303      	movs	r3, #3
 8001098:	0005      	movs	r5, r0
 800109a:	4691      	mov	r9, r2
 800109c:	469b      	mov	fp, r3
 800109e:	e65e      	b.n	8000d5e <__aeabi_dmul+0x46>
 80010a0:	2304      	movs	r3, #4
 80010a2:	4699      	mov	r9, r3
 80010a4:	2300      	movs	r3, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	2400      	movs	r4, #0
 80010ac:	469b      	mov	fp, r3
 80010ae:	e656      	b.n	8000d5e <__aeabi_dmul+0x46>
 80010b0:	000007ff 	.word	0x000007ff
 80010b4:	fffffc01 	.word	0xfffffc01
 80010b8:	08008bb0 	.word	0x08008bb0
 80010bc:	fffffc0d 	.word	0xfffffc0d
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	feffffff 	.word	0xfeffffff
 80010c8:	000007fe 	.word	0x000007fe
 80010cc:	2300      	movs	r3, #0
 80010ce:	2480      	movs	r4, #128	; 0x80
 80010d0:	2500      	movs	r5, #0
 80010d2:	4a44      	ldr	r2, [pc, #272]	; (80011e4 <__aeabi_dmul+0x4cc>)
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	0324      	lsls	r4, r4, #12
 80010d8:	e68e      	b.n	8000df8 <__aeabi_dmul+0xe0>
 80010da:	2001      	movs	r0, #1
 80010dc:	1a40      	subs	r0, r0, r1
 80010de:	2838      	cmp	r0, #56	; 0x38
 80010e0:	dd00      	ble.n	80010e4 <__aeabi_dmul+0x3cc>
 80010e2:	e686      	b.n	8000df2 <__aeabi_dmul+0xda>
 80010e4:	281f      	cmp	r0, #31
 80010e6:	dd5b      	ble.n	80011a0 <__aeabi_dmul+0x488>
 80010e8:	221f      	movs	r2, #31
 80010ea:	0023      	movs	r3, r4
 80010ec:	4252      	negs	r2, r2
 80010ee:	1a51      	subs	r1, r2, r1
 80010f0:	40cb      	lsrs	r3, r1
 80010f2:	0019      	movs	r1, r3
 80010f4:	2820      	cmp	r0, #32
 80010f6:	d003      	beq.n	8001100 <__aeabi_dmul+0x3e8>
 80010f8:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <__aeabi_dmul+0x4d0>)
 80010fa:	4462      	add	r2, ip
 80010fc:	4094      	lsls	r4, r2
 80010fe:	4325      	orrs	r5, r4
 8001100:	1e6a      	subs	r2, r5, #1
 8001102:	4195      	sbcs	r5, r2
 8001104:	002a      	movs	r2, r5
 8001106:	430a      	orrs	r2, r1
 8001108:	2107      	movs	r1, #7
 800110a:	000d      	movs	r5, r1
 800110c:	2400      	movs	r4, #0
 800110e:	4015      	ands	r5, r2
 8001110:	4211      	tst	r1, r2
 8001112:	d05b      	beq.n	80011cc <__aeabi_dmul+0x4b4>
 8001114:	210f      	movs	r1, #15
 8001116:	2400      	movs	r4, #0
 8001118:	4011      	ands	r1, r2
 800111a:	2904      	cmp	r1, #4
 800111c:	d053      	beq.n	80011c6 <__aeabi_dmul+0x4ae>
 800111e:	1d11      	adds	r1, r2, #4
 8001120:	4291      	cmp	r1, r2
 8001122:	4192      	sbcs	r2, r2
 8001124:	4252      	negs	r2, r2
 8001126:	18a4      	adds	r4, r4, r2
 8001128:	000a      	movs	r2, r1
 800112a:	0223      	lsls	r3, r4, #8
 800112c:	d54b      	bpl.n	80011c6 <__aeabi_dmul+0x4ae>
 800112e:	2201      	movs	r2, #1
 8001130:	2400      	movs	r4, #0
 8001132:	2500      	movs	r5, #0
 8001134:	e660      	b.n	8000df8 <__aeabi_dmul+0xe0>
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	031b      	lsls	r3, r3, #12
 800113a:	421c      	tst	r4, r3
 800113c:	d009      	beq.n	8001152 <__aeabi_dmul+0x43a>
 800113e:	421e      	tst	r6, r3
 8001140:	d107      	bne.n	8001152 <__aeabi_dmul+0x43a>
 8001142:	4333      	orrs	r3, r6
 8001144:	031c      	lsls	r4, r3, #12
 8001146:	4643      	mov	r3, r8
 8001148:	0015      	movs	r5, r2
 800114a:	0b24      	lsrs	r4, r4, #12
 800114c:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <__aeabi_dmul+0x4cc>)
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	e652      	b.n	8000df8 <__aeabi_dmul+0xe0>
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	0312      	lsls	r2, r2, #12
 8001156:	4314      	orrs	r4, r2
 8001158:	0324      	lsls	r4, r4, #12
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <__aeabi_dmul+0x4cc>)
 800115c:	0b24      	lsrs	r4, r4, #12
 800115e:	9701      	str	r7, [sp, #4]
 8001160:	e64a      	b.n	8000df8 <__aeabi_dmul+0xe0>
 8001162:	f000 fc3d 	bl	80019e0 <__clzsi2>
 8001166:	0003      	movs	r3, r0
 8001168:	001a      	movs	r2, r3
 800116a:	3215      	adds	r2, #21
 800116c:	3020      	adds	r0, #32
 800116e:	2a1c      	cmp	r2, #28
 8001170:	dc00      	bgt.n	8001174 <__aeabi_dmul+0x45c>
 8001172:	e684      	b.n	8000e7e <__aeabi_dmul+0x166>
 8001174:	4656      	mov	r6, sl
 8001176:	3b08      	subs	r3, #8
 8001178:	2200      	movs	r2, #0
 800117a:	409e      	lsls	r6, r3
 800117c:	e689      	b.n	8000e92 <__aeabi_dmul+0x17a>
 800117e:	f000 fc2f 	bl	80019e0 <__clzsi2>
 8001182:	0001      	movs	r1, r0
 8001184:	0002      	movs	r2, r0
 8001186:	3115      	adds	r1, #21
 8001188:	3220      	adds	r2, #32
 800118a:	291c      	cmp	r1, #28
 800118c:	dc00      	bgt.n	8001190 <__aeabi_dmul+0x478>
 800118e:	e64e      	b.n	8000e2e <__aeabi_dmul+0x116>
 8001190:	0034      	movs	r4, r6
 8001192:	3808      	subs	r0, #8
 8001194:	2500      	movs	r5, #0
 8001196:	4084      	lsls	r4, r0
 8001198:	e653      	b.n	8000e42 <__aeabi_dmul+0x12a>
 800119a:	9b00      	ldr	r3, [sp, #0]
 800119c:	469c      	mov	ip, r3
 800119e:	e741      	b.n	8001024 <__aeabi_dmul+0x30c>
 80011a0:	4912      	ldr	r1, [pc, #72]	; (80011ec <__aeabi_dmul+0x4d4>)
 80011a2:	0022      	movs	r2, r4
 80011a4:	4461      	add	r1, ip
 80011a6:	002e      	movs	r6, r5
 80011a8:	408d      	lsls	r5, r1
 80011aa:	408a      	lsls	r2, r1
 80011ac:	40c6      	lsrs	r6, r0
 80011ae:	1e69      	subs	r1, r5, #1
 80011b0:	418d      	sbcs	r5, r1
 80011b2:	4332      	orrs	r2, r6
 80011b4:	432a      	orrs	r2, r5
 80011b6:	40c4      	lsrs	r4, r0
 80011b8:	0753      	lsls	r3, r2, #29
 80011ba:	d0b6      	beq.n	800112a <__aeabi_dmul+0x412>
 80011bc:	210f      	movs	r1, #15
 80011be:	4011      	ands	r1, r2
 80011c0:	2904      	cmp	r1, #4
 80011c2:	d1ac      	bne.n	800111e <__aeabi_dmul+0x406>
 80011c4:	e7b1      	b.n	800112a <__aeabi_dmul+0x412>
 80011c6:	0765      	lsls	r5, r4, #29
 80011c8:	0264      	lsls	r4, r4, #9
 80011ca:	0b24      	lsrs	r4, r4, #12
 80011cc:	08d2      	lsrs	r2, r2, #3
 80011ce:	4315      	orrs	r5, r2
 80011d0:	2200      	movs	r2, #0
 80011d2:	e611      	b.n	8000df8 <__aeabi_dmul+0xe0>
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	0312      	lsls	r2, r2, #12
 80011d8:	4314      	orrs	r4, r2
 80011da:	0324      	lsls	r4, r4, #12
 80011dc:	4a01      	ldr	r2, [pc, #4]	; (80011e4 <__aeabi_dmul+0x4cc>)
 80011de:	0b24      	lsrs	r4, r4, #12
 80011e0:	e60a      	b.n	8000df8 <__aeabi_dmul+0xe0>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	000007ff 	.word	0x000007ff
 80011e8:	0000043e 	.word	0x0000043e
 80011ec:	0000041e 	.word	0x0000041e

080011f0 <__aeabi_dsub>:
 80011f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f2:	4657      	mov	r7, sl
 80011f4:	464e      	mov	r6, r9
 80011f6:	4645      	mov	r5, r8
 80011f8:	46de      	mov	lr, fp
 80011fa:	0004      	movs	r4, r0
 80011fc:	b5e0      	push	{r5, r6, r7, lr}
 80011fe:	001f      	movs	r7, r3
 8001200:	0010      	movs	r0, r2
 8001202:	030b      	lsls	r3, r1, #12
 8001204:	0f62      	lsrs	r2, r4, #29
 8001206:	004e      	lsls	r6, r1, #1
 8001208:	0fcd      	lsrs	r5, r1, #31
 800120a:	0a5b      	lsrs	r3, r3, #9
 800120c:	0339      	lsls	r1, r7, #12
 800120e:	4313      	orrs	r3, r2
 8001210:	0a49      	lsrs	r1, r1, #9
 8001212:	00e2      	lsls	r2, r4, #3
 8001214:	0f44      	lsrs	r4, r0, #29
 8001216:	4321      	orrs	r1, r4
 8001218:	4cc2      	ldr	r4, [pc, #776]	; (8001524 <__aeabi_dsub+0x334>)
 800121a:	4691      	mov	r9, r2
 800121c:	4692      	mov	sl, r2
 800121e:	00c0      	lsls	r0, r0, #3
 8001220:	007a      	lsls	r2, r7, #1
 8001222:	4680      	mov	r8, r0
 8001224:	0d76      	lsrs	r6, r6, #21
 8001226:	0d52      	lsrs	r2, r2, #21
 8001228:	0fff      	lsrs	r7, r7, #31
 800122a:	42a2      	cmp	r2, r4
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x40>
 800122e:	e0b4      	b.n	800139a <__aeabi_dsub+0x1aa>
 8001230:	2401      	movs	r4, #1
 8001232:	4067      	eors	r7, r4
 8001234:	46bb      	mov	fp, r7
 8001236:	42bd      	cmp	r5, r7
 8001238:	d100      	bne.n	800123c <__aeabi_dsub+0x4c>
 800123a:	e088      	b.n	800134e <__aeabi_dsub+0x15e>
 800123c:	1ab4      	subs	r4, r6, r2
 800123e:	46a4      	mov	ip, r4
 8001240:	2c00      	cmp	r4, #0
 8001242:	dc00      	bgt.n	8001246 <__aeabi_dsub+0x56>
 8001244:	e0b2      	b.n	80013ac <__aeabi_dsub+0x1bc>
 8001246:	2a00      	cmp	r2, #0
 8001248:	d100      	bne.n	800124c <__aeabi_dsub+0x5c>
 800124a:	e0c5      	b.n	80013d8 <__aeabi_dsub+0x1e8>
 800124c:	4ab5      	ldr	r2, [pc, #724]	; (8001524 <__aeabi_dsub+0x334>)
 800124e:	4296      	cmp	r6, r2
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x64>
 8001252:	e28b      	b.n	800176c <__aeabi_dsub+0x57c>
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	0412      	lsls	r2, r2, #16
 8001258:	4311      	orrs	r1, r2
 800125a:	4662      	mov	r2, ip
 800125c:	2a38      	cmp	r2, #56	; 0x38
 800125e:	dd00      	ble.n	8001262 <__aeabi_dsub+0x72>
 8001260:	e1a1      	b.n	80015a6 <__aeabi_dsub+0x3b6>
 8001262:	2a1f      	cmp	r2, #31
 8001264:	dd00      	ble.n	8001268 <__aeabi_dsub+0x78>
 8001266:	e216      	b.n	8001696 <__aeabi_dsub+0x4a6>
 8001268:	2720      	movs	r7, #32
 800126a:	000c      	movs	r4, r1
 800126c:	1abf      	subs	r7, r7, r2
 800126e:	40bc      	lsls	r4, r7
 8001270:	0002      	movs	r2, r0
 8001272:	46a0      	mov	r8, r4
 8001274:	4664      	mov	r4, ip
 8001276:	40b8      	lsls	r0, r7
 8001278:	40e2      	lsrs	r2, r4
 800127a:	4644      	mov	r4, r8
 800127c:	4314      	orrs	r4, r2
 800127e:	0002      	movs	r2, r0
 8001280:	1e50      	subs	r0, r2, #1
 8001282:	4182      	sbcs	r2, r0
 8001284:	4660      	mov	r0, ip
 8001286:	40c1      	lsrs	r1, r0
 8001288:	4322      	orrs	r2, r4
 800128a:	1a5b      	subs	r3, r3, r1
 800128c:	4649      	mov	r1, r9
 800128e:	1a8c      	subs	r4, r1, r2
 8001290:	45a1      	cmp	r9, r4
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	4698      	mov	r8, r3
 800129a:	4643      	mov	r3, r8
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	d400      	bmi.n	80012a2 <__aeabi_dsub+0xb2>
 80012a0:	e117      	b.n	80014d2 <__aeabi_dsub+0x2e2>
 80012a2:	4643      	mov	r3, r8
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	0a5b      	lsrs	r3, r3, #9
 80012a8:	4698      	mov	r8, r3
 80012aa:	4643      	mov	r3, r8
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dsub+0xc2>
 80012b0:	e16c      	b.n	800158c <__aeabi_dsub+0x39c>
 80012b2:	4640      	mov	r0, r8
 80012b4:	f000 fb94 	bl	80019e0 <__clzsi2>
 80012b8:	0002      	movs	r2, r0
 80012ba:	3a08      	subs	r2, #8
 80012bc:	2120      	movs	r1, #32
 80012be:	0020      	movs	r0, r4
 80012c0:	4643      	mov	r3, r8
 80012c2:	1a89      	subs	r1, r1, r2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	40c8      	lsrs	r0, r1
 80012c8:	4094      	lsls	r4, r2
 80012ca:	4303      	orrs	r3, r0
 80012cc:	4296      	cmp	r6, r2
 80012ce:	dd00      	ble.n	80012d2 <__aeabi_dsub+0xe2>
 80012d0:	e157      	b.n	8001582 <__aeabi_dsub+0x392>
 80012d2:	1b96      	subs	r6, r2, r6
 80012d4:	1c71      	adds	r1, r6, #1
 80012d6:	291f      	cmp	r1, #31
 80012d8:	dd00      	ble.n	80012dc <__aeabi_dsub+0xec>
 80012da:	e1cb      	b.n	8001674 <__aeabi_dsub+0x484>
 80012dc:	2220      	movs	r2, #32
 80012de:	0018      	movs	r0, r3
 80012e0:	0026      	movs	r6, r4
 80012e2:	1a52      	subs	r2, r2, r1
 80012e4:	4094      	lsls	r4, r2
 80012e6:	4090      	lsls	r0, r2
 80012e8:	40ce      	lsrs	r6, r1
 80012ea:	40cb      	lsrs	r3, r1
 80012ec:	1e62      	subs	r2, r4, #1
 80012ee:	4194      	sbcs	r4, r2
 80012f0:	4330      	orrs	r0, r6
 80012f2:	4698      	mov	r8, r3
 80012f4:	2600      	movs	r6, #0
 80012f6:	4304      	orrs	r4, r0
 80012f8:	0763      	lsls	r3, r4, #29
 80012fa:	d009      	beq.n	8001310 <__aeabi_dsub+0x120>
 80012fc:	230f      	movs	r3, #15
 80012fe:	4023      	ands	r3, r4
 8001300:	2b04      	cmp	r3, #4
 8001302:	d005      	beq.n	8001310 <__aeabi_dsub+0x120>
 8001304:	1d23      	adds	r3, r4, #4
 8001306:	42a3      	cmp	r3, r4
 8001308:	41a4      	sbcs	r4, r4
 800130a:	4264      	negs	r4, r4
 800130c:	44a0      	add	r8, r4
 800130e:	001c      	movs	r4, r3
 8001310:	4643      	mov	r3, r8
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	d400      	bmi.n	8001318 <__aeabi_dsub+0x128>
 8001316:	e0df      	b.n	80014d8 <__aeabi_dsub+0x2e8>
 8001318:	4b82      	ldr	r3, [pc, #520]	; (8001524 <__aeabi_dsub+0x334>)
 800131a:	3601      	adds	r6, #1
 800131c:	429e      	cmp	r6, r3
 800131e:	d100      	bne.n	8001322 <__aeabi_dsub+0x132>
 8001320:	e0fb      	b.n	800151a <__aeabi_dsub+0x32a>
 8001322:	4642      	mov	r2, r8
 8001324:	4b80      	ldr	r3, [pc, #512]	; (8001528 <__aeabi_dsub+0x338>)
 8001326:	08e4      	lsrs	r4, r4, #3
 8001328:	401a      	ands	r2, r3
 800132a:	0013      	movs	r3, r2
 800132c:	0571      	lsls	r1, r6, #21
 800132e:	0752      	lsls	r2, r2, #29
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	4322      	orrs	r2, r4
 8001334:	0b1b      	lsrs	r3, r3, #12
 8001336:	0d49      	lsrs	r1, r1, #21
 8001338:	0509      	lsls	r1, r1, #20
 800133a:	07ed      	lsls	r5, r5, #31
 800133c:	4319      	orrs	r1, r3
 800133e:	4329      	orrs	r1, r5
 8001340:	0010      	movs	r0, r2
 8001342:	bcf0      	pop	{r4, r5, r6, r7}
 8001344:	46bb      	mov	fp, r7
 8001346:	46b2      	mov	sl, r6
 8001348:	46a9      	mov	r9, r5
 800134a:	46a0      	mov	r8, r4
 800134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800134e:	1ab4      	subs	r4, r6, r2
 8001350:	46a4      	mov	ip, r4
 8001352:	2c00      	cmp	r4, #0
 8001354:	dd58      	ble.n	8001408 <__aeabi_dsub+0x218>
 8001356:	2a00      	cmp	r2, #0
 8001358:	d100      	bne.n	800135c <__aeabi_dsub+0x16c>
 800135a:	e09e      	b.n	800149a <__aeabi_dsub+0x2aa>
 800135c:	4a71      	ldr	r2, [pc, #452]	; (8001524 <__aeabi_dsub+0x334>)
 800135e:	4296      	cmp	r6, r2
 8001360:	d100      	bne.n	8001364 <__aeabi_dsub+0x174>
 8001362:	e13b      	b.n	80015dc <__aeabi_dsub+0x3ec>
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	0412      	lsls	r2, r2, #16
 8001368:	4311      	orrs	r1, r2
 800136a:	4662      	mov	r2, ip
 800136c:	2a38      	cmp	r2, #56	; 0x38
 800136e:	dd00      	ble.n	8001372 <__aeabi_dsub+0x182>
 8001370:	e0c1      	b.n	80014f6 <__aeabi_dsub+0x306>
 8001372:	2a1f      	cmp	r2, #31
 8001374:	dc00      	bgt.n	8001378 <__aeabi_dsub+0x188>
 8001376:	e1bb      	b.n	80016f0 <__aeabi_dsub+0x500>
 8001378:	000c      	movs	r4, r1
 800137a:	3a20      	subs	r2, #32
 800137c:	40d4      	lsrs	r4, r2
 800137e:	0022      	movs	r2, r4
 8001380:	4664      	mov	r4, ip
 8001382:	2c20      	cmp	r4, #32
 8001384:	d004      	beq.n	8001390 <__aeabi_dsub+0x1a0>
 8001386:	2740      	movs	r7, #64	; 0x40
 8001388:	1b3f      	subs	r7, r7, r4
 800138a:	40b9      	lsls	r1, r7
 800138c:	4308      	orrs	r0, r1
 800138e:	4680      	mov	r8, r0
 8001390:	4644      	mov	r4, r8
 8001392:	1e61      	subs	r1, r4, #1
 8001394:	418c      	sbcs	r4, r1
 8001396:	4314      	orrs	r4, r2
 8001398:	e0b1      	b.n	80014fe <__aeabi_dsub+0x30e>
 800139a:	000c      	movs	r4, r1
 800139c:	4304      	orrs	r4, r0
 800139e:	d02a      	beq.n	80013f6 <__aeabi_dsub+0x206>
 80013a0:	46bb      	mov	fp, r7
 80013a2:	42bd      	cmp	r5, r7
 80013a4:	d02d      	beq.n	8001402 <__aeabi_dsub+0x212>
 80013a6:	4c61      	ldr	r4, [pc, #388]	; (800152c <__aeabi_dsub+0x33c>)
 80013a8:	46a4      	mov	ip, r4
 80013aa:	44b4      	add	ip, r6
 80013ac:	4664      	mov	r4, ip
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d05c      	beq.n	800146c <__aeabi_dsub+0x27c>
 80013b2:	1b94      	subs	r4, r2, r6
 80013b4:	46a4      	mov	ip, r4
 80013b6:	2e00      	cmp	r6, #0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dsub+0x1cc>
 80013ba:	e115      	b.n	80015e8 <__aeabi_dsub+0x3f8>
 80013bc:	464d      	mov	r5, r9
 80013be:	431d      	orrs	r5, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x1d4>
 80013c2:	e1c3      	b.n	800174c <__aeabi_dsub+0x55c>
 80013c4:	1e65      	subs	r5, r4, #1
 80013c6:	2c01      	cmp	r4, #1
 80013c8:	d100      	bne.n	80013cc <__aeabi_dsub+0x1dc>
 80013ca:	e20c      	b.n	80017e6 <__aeabi_dsub+0x5f6>
 80013cc:	4e55      	ldr	r6, [pc, #340]	; (8001524 <__aeabi_dsub+0x334>)
 80013ce:	42b4      	cmp	r4, r6
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dsub+0x1e4>
 80013d2:	e1f8      	b.n	80017c6 <__aeabi_dsub+0x5d6>
 80013d4:	46ac      	mov	ip, r5
 80013d6:	e10e      	b.n	80015f6 <__aeabi_dsub+0x406>
 80013d8:	000a      	movs	r2, r1
 80013da:	4302      	orrs	r2, r0
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dsub+0x1f0>
 80013de:	e136      	b.n	800164e <__aeabi_dsub+0x45e>
 80013e0:	0022      	movs	r2, r4
 80013e2:	3a01      	subs	r2, #1
 80013e4:	2c01      	cmp	r4, #1
 80013e6:	d100      	bne.n	80013ea <__aeabi_dsub+0x1fa>
 80013e8:	e1c6      	b.n	8001778 <__aeabi_dsub+0x588>
 80013ea:	4c4e      	ldr	r4, [pc, #312]	; (8001524 <__aeabi_dsub+0x334>)
 80013ec:	45a4      	cmp	ip, r4
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dsub+0x202>
 80013f0:	e0f4      	b.n	80015dc <__aeabi_dsub+0x3ec>
 80013f2:	4694      	mov	ip, r2
 80013f4:	e731      	b.n	800125a <__aeabi_dsub+0x6a>
 80013f6:	2401      	movs	r4, #1
 80013f8:	4067      	eors	r7, r4
 80013fa:	46bb      	mov	fp, r7
 80013fc:	42bd      	cmp	r5, r7
 80013fe:	d000      	beq.n	8001402 <__aeabi_dsub+0x212>
 8001400:	e71c      	b.n	800123c <__aeabi_dsub+0x4c>
 8001402:	4c4a      	ldr	r4, [pc, #296]	; (800152c <__aeabi_dsub+0x33c>)
 8001404:	46a4      	mov	ip, r4
 8001406:	44b4      	add	ip, r6
 8001408:	4664      	mov	r4, ip
 800140a:	2c00      	cmp	r4, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x220>
 800140e:	e0cf      	b.n	80015b0 <__aeabi_dsub+0x3c0>
 8001410:	1b94      	subs	r4, r2, r6
 8001412:	46a4      	mov	ip, r4
 8001414:	2e00      	cmp	r6, #0
 8001416:	d100      	bne.n	800141a <__aeabi_dsub+0x22a>
 8001418:	e15c      	b.n	80016d4 <__aeabi_dsub+0x4e4>
 800141a:	4e42      	ldr	r6, [pc, #264]	; (8001524 <__aeabi_dsub+0x334>)
 800141c:	42b2      	cmp	r2, r6
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x232>
 8001420:	e1ec      	b.n	80017fc <__aeabi_dsub+0x60c>
 8001422:	2680      	movs	r6, #128	; 0x80
 8001424:	0436      	lsls	r6, r6, #16
 8001426:	4333      	orrs	r3, r6
 8001428:	4664      	mov	r4, ip
 800142a:	2c38      	cmp	r4, #56	; 0x38
 800142c:	dd00      	ble.n	8001430 <__aeabi_dsub+0x240>
 800142e:	e1b3      	b.n	8001798 <__aeabi_dsub+0x5a8>
 8001430:	2c1f      	cmp	r4, #31
 8001432:	dd00      	ble.n	8001436 <__aeabi_dsub+0x246>
 8001434:	e238      	b.n	80018a8 <__aeabi_dsub+0x6b8>
 8001436:	2620      	movs	r6, #32
 8001438:	1b36      	subs	r6, r6, r4
 800143a:	001c      	movs	r4, r3
 800143c:	40b4      	lsls	r4, r6
 800143e:	464f      	mov	r7, r9
 8001440:	46a0      	mov	r8, r4
 8001442:	4664      	mov	r4, ip
 8001444:	40e7      	lsrs	r7, r4
 8001446:	4644      	mov	r4, r8
 8001448:	433c      	orrs	r4, r7
 800144a:	464f      	mov	r7, r9
 800144c:	40b7      	lsls	r7, r6
 800144e:	003e      	movs	r6, r7
 8001450:	1e77      	subs	r7, r6, #1
 8001452:	41be      	sbcs	r6, r7
 8001454:	4334      	orrs	r4, r6
 8001456:	4666      	mov	r6, ip
 8001458:	40f3      	lsrs	r3, r6
 800145a:	18c9      	adds	r1, r1, r3
 800145c:	1824      	adds	r4, r4, r0
 800145e:	4284      	cmp	r4, r0
 8001460:	419b      	sbcs	r3, r3
 8001462:	425b      	negs	r3, r3
 8001464:	4698      	mov	r8, r3
 8001466:	0016      	movs	r6, r2
 8001468:	4488      	add	r8, r1
 800146a:	e04e      	b.n	800150a <__aeabi_dsub+0x31a>
 800146c:	4a30      	ldr	r2, [pc, #192]	; (8001530 <__aeabi_dsub+0x340>)
 800146e:	1c74      	adds	r4, r6, #1
 8001470:	4214      	tst	r4, r2
 8001472:	d000      	beq.n	8001476 <__aeabi_dsub+0x286>
 8001474:	e0d6      	b.n	8001624 <__aeabi_dsub+0x434>
 8001476:	464a      	mov	r2, r9
 8001478:	431a      	orrs	r2, r3
 800147a:	2e00      	cmp	r6, #0
 800147c:	d000      	beq.n	8001480 <__aeabi_dsub+0x290>
 800147e:	e15b      	b.n	8001738 <__aeabi_dsub+0x548>
 8001480:	2a00      	cmp	r2, #0
 8001482:	d100      	bne.n	8001486 <__aeabi_dsub+0x296>
 8001484:	e1a5      	b.n	80017d2 <__aeabi_dsub+0x5e2>
 8001486:	000a      	movs	r2, r1
 8001488:	4302      	orrs	r2, r0
 800148a:	d000      	beq.n	800148e <__aeabi_dsub+0x29e>
 800148c:	e1bb      	b.n	8001806 <__aeabi_dsub+0x616>
 800148e:	464a      	mov	r2, r9
 8001490:	0759      	lsls	r1, r3, #29
 8001492:	08d2      	lsrs	r2, r2, #3
 8001494:	430a      	orrs	r2, r1
 8001496:	08db      	lsrs	r3, r3, #3
 8001498:	e027      	b.n	80014ea <__aeabi_dsub+0x2fa>
 800149a:	000a      	movs	r2, r1
 800149c:	4302      	orrs	r2, r0
 800149e:	d100      	bne.n	80014a2 <__aeabi_dsub+0x2b2>
 80014a0:	e174      	b.n	800178c <__aeabi_dsub+0x59c>
 80014a2:	0022      	movs	r2, r4
 80014a4:	3a01      	subs	r2, #1
 80014a6:	2c01      	cmp	r4, #1
 80014a8:	d005      	beq.n	80014b6 <__aeabi_dsub+0x2c6>
 80014aa:	4c1e      	ldr	r4, [pc, #120]	; (8001524 <__aeabi_dsub+0x334>)
 80014ac:	45a4      	cmp	ip, r4
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dsub+0x2c2>
 80014b0:	e094      	b.n	80015dc <__aeabi_dsub+0x3ec>
 80014b2:	4694      	mov	ip, r2
 80014b4:	e759      	b.n	800136a <__aeabi_dsub+0x17a>
 80014b6:	4448      	add	r0, r9
 80014b8:	4548      	cmp	r0, r9
 80014ba:	4192      	sbcs	r2, r2
 80014bc:	185b      	adds	r3, r3, r1
 80014be:	4698      	mov	r8, r3
 80014c0:	0004      	movs	r4, r0
 80014c2:	4252      	negs	r2, r2
 80014c4:	4490      	add	r8, r2
 80014c6:	4643      	mov	r3, r8
 80014c8:	2602      	movs	r6, #2
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	d500      	bpl.n	80014d0 <__aeabi_dsub+0x2e0>
 80014ce:	e0c4      	b.n	800165a <__aeabi_dsub+0x46a>
 80014d0:	3e01      	subs	r6, #1
 80014d2:	0763      	lsls	r3, r4, #29
 80014d4:	d000      	beq.n	80014d8 <__aeabi_dsub+0x2e8>
 80014d6:	e711      	b.n	80012fc <__aeabi_dsub+0x10c>
 80014d8:	4643      	mov	r3, r8
 80014da:	46b4      	mov	ip, r6
 80014dc:	0759      	lsls	r1, r3, #29
 80014de:	08e2      	lsrs	r2, r4, #3
 80014e0:	430a      	orrs	r2, r1
 80014e2:	08db      	lsrs	r3, r3, #3
 80014e4:	490f      	ldr	r1, [pc, #60]	; (8001524 <__aeabi_dsub+0x334>)
 80014e6:	458c      	cmp	ip, r1
 80014e8:	d040      	beq.n	800156c <__aeabi_dsub+0x37c>
 80014ea:	4661      	mov	r1, ip
 80014ec:	031b      	lsls	r3, r3, #12
 80014ee:	0549      	lsls	r1, r1, #21
 80014f0:	0b1b      	lsrs	r3, r3, #12
 80014f2:	0d49      	lsrs	r1, r1, #21
 80014f4:	e720      	b.n	8001338 <__aeabi_dsub+0x148>
 80014f6:	4301      	orrs	r1, r0
 80014f8:	000c      	movs	r4, r1
 80014fa:	1e61      	subs	r1, r4, #1
 80014fc:	418c      	sbcs	r4, r1
 80014fe:	444c      	add	r4, r9
 8001500:	454c      	cmp	r4, r9
 8001502:	4192      	sbcs	r2, r2
 8001504:	4252      	negs	r2, r2
 8001506:	4690      	mov	r8, r2
 8001508:	4498      	add	r8, r3
 800150a:	4643      	mov	r3, r8
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	d5e0      	bpl.n	80014d2 <__aeabi_dsub+0x2e2>
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__aeabi_dsub+0x334>)
 8001512:	3601      	adds	r6, #1
 8001514:	429e      	cmp	r6, r3
 8001516:	d000      	beq.n	800151a <__aeabi_dsub+0x32a>
 8001518:	e09f      	b.n	800165a <__aeabi_dsub+0x46a>
 800151a:	0031      	movs	r1, r6
 800151c:	2300      	movs	r3, #0
 800151e:	2200      	movs	r2, #0
 8001520:	e70a      	b.n	8001338 <__aeabi_dsub+0x148>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	000007ff 	.word	0x000007ff
 8001528:	ff7fffff 	.word	0xff7fffff
 800152c:	fffff801 	.word	0xfffff801
 8001530:	000007fe 	.word	0x000007fe
 8001534:	2a00      	cmp	r2, #0
 8001536:	d100      	bne.n	800153a <__aeabi_dsub+0x34a>
 8001538:	e160      	b.n	80017fc <__aeabi_dsub+0x60c>
 800153a:	000a      	movs	r2, r1
 800153c:	4302      	orrs	r2, r0
 800153e:	d04d      	beq.n	80015dc <__aeabi_dsub+0x3ec>
 8001540:	464a      	mov	r2, r9
 8001542:	075c      	lsls	r4, r3, #29
 8001544:	08d2      	lsrs	r2, r2, #3
 8001546:	4322      	orrs	r2, r4
 8001548:	2480      	movs	r4, #128	; 0x80
 800154a:	08db      	lsrs	r3, r3, #3
 800154c:	0324      	lsls	r4, r4, #12
 800154e:	4223      	tst	r3, r4
 8001550:	d007      	beq.n	8001562 <__aeabi_dsub+0x372>
 8001552:	08ce      	lsrs	r6, r1, #3
 8001554:	4226      	tst	r6, r4
 8001556:	d104      	bne.n	8001562 <__aeabi_dsub+0x372>
 8001558:	465d      	mov	r5, fp
 800155a:	0033      	movs	r3, r6
 800155c:	08c2      	lsrs	r2, r0, #3
 800155e:	0749      	lsls	r1, r1, #29
 8001560:	430a      	orrs	r2, r1
 8001562:	0f51      	lsrs	r1, r2, #29
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	08d2      	lsrs	r2, r2, #3
 8001568:	0749      	lsls	r1, r1, #29
 800156a:	430a      	orrs	r2, r1
 800156c:	0011      	movs	r1, r2
 800156e:	4319      	orrs	r1, r3
 8001570:	d100      	bne.n	8001574 <__aeabi_dsub+0x384>
 8001572:	e1c8      	b.n	8001906 <__aeabi_dsub+0x716>
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0309      	lsls	r1, r1, #12
 8001578:	430b      	orrs	r3, r1
 800157a:	031b      	lsls	r3, r3, #12
 800157c:	49d5      	ldr	r1, [pc, #852]	; (80018d4 <__aeabi_dsub+0x6e4>)
 800157e:	0b1b      	lsrs	r3, r3, #12
 8001580:	e6da      	b.n	8001338 <__aeabi_dsub+0x148>
 8001582:	49d5      	ldr	r1, [pc, #852]	; (80018d8 <__aeabi_dsub+0x6e8>)
 8001584:	1ab6      	subs	r6, r6, r2
 8001586:	400b      	ands	r3, r1
 8001588:	4698      	mov	r8, r3
 800158a:	e6b5      	b.n	80012f8 <__aeabi_dsub+0x108>
 800158c:	0020      	movs	r0, r4
 800158e:	f000 fa27 	bl	80019e0 <__clzsi2>
 8001592:	0002      	movs	r2, r0
 8001594:	3218      	adds	r2, #24
 8001596:	2a1f      	cmp	r2, #31
 8001598:	dc00      	bgt.n	800159c <__aeabi_dsub+0x3ac>
 800159a:	e68f      	b.n	80012bc <__aeabi_dsub+0xcc>
 800159c:	0023      	movs	r3, r4
 800159e:	3808      	subs	r0, #8
 80015a0:	4083      	lsls	r3, r0
 80015a2:	2400      	movs	r4, #0
 80015a4:	e692      	b.n	80012cc <__aeabi_dsub+0xdc>
 80015a6:	4308      	orrs	r0, r1
 80015a8:	0002      	movs	r2, r0
 80015aa:	1e50      	subs	r0, r2, #1
 80015ac:	4182      	sbcs	r2, r0
 80015ae:	e66d      	b.n	800128c <__aeabi_dsub+0x9c>
 80015b0:	4cca      	ldr	r4, [pc, #808]	; (80018dc <__aeabi_dsub+0x6ec>)
 80015b2:	1c72      	adds	r2, r6, #1
 80015b4:	4222      	tst	r2, r4
 80015b6:	d000      	beq.n	80015ba <__aeabi_dsub+0x3ca>
 80015b8:	e0ad      	b.n	8001716 <__aeabi_dsub+0x526>
 80015ba:	464a      	mov	r2, r9
 80015bc:	431a      	orrs	r2, r3
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d1b8      	bne.n	8001534 <__aeabi_dsub+0x344>
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dsub+0x3d8>
 80015c6:	e158      	b.n	800187a <__aeabi_dsub+0x68a>
 80015c8:	000a      	movs	r2, r1
 80015ca:	4302      	orrs	r2, r0
 80015cc:	d000      	beq.n	80015d0 <__aeabi_dsub+0x3e0>
 80015ce:	e159      	b.n	8001884 <__aeabi_dsub+0x694>
 80015d0:	464a      	mov	r2, r9
 80015d2:	0759      	lsls	r1, r3, #29
 80015d4:	08d2      	lsrs	r2, r2, #3
 80015d6:	430a      	orrs	r2, r1
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	e786      	b.n	80014ea <__aeabi_dsub+0x2fa>
 80015dc:	464a      	mov	r2, r9
 80015de:	0759      	lsls	r1, r3, #29
 80015e0:	08d2      	lsrs	r2, r2, #3
 80015e2:	430a      	orrs	r2, r1
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	e7c1      	b.n	800156c <__aeabi_dsub+0x37c>
 80015e8:	4dba      	ldr	r5, [pc, #744]	; (80018d4 <__aeabi_dsub+0x6e4>)
 80015ea:	42aa      	cmp	r2, r5
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dsub+0x400>
 80015ee:	e11e      	b.n	800182e <__aeabi_dsub+0x63e>
 80015f0:	2580      	movs	r5, #128	; 0x80
 80015f2:	042d      	lsls	r5, r5, #16
 80015f4:	432b      	orrs	r3, r5
 80015f6:	4664      	mov	r4, ip
 80015f8:	2c38      	cmp	r4, #56	; 0x38
 80015fa:	dc5d      	bgt.n	80016b8 <__aeabi_dsub+0x4c8>
 80015fc:	2c1f      	cmp	r4, #31
 80015fe:	dd00      	ble.n	8001602 <__aeabi_dsub+0x412>
 8001600:	e0d0      	b.n	80017a4 <__aeabi_dsub+0x5b4>
 8001602:	2520      	movs	r5, #32
 8001604:	4667      	mov	r7, ip
 8001606:	1b2d      	subs	r5, r5, r4
 8001608:	464e      	mov	r6, r9
 800160a:	001c      	movs	r4, r3
 800160c:	40fe      	lsrs	r6, r7
 800160e:	40ac      	lsls	r4, r5
 8001610:	4334      	orrs	r4, r6
 8001612:	464e      	mov	r6, r9
 8001614:	40ae      	lsls	r6, r5
 8001616:	0035      	movs	r5, r6
 8001618:	40fb      	lsrs	r3, r7
 800161a:	1e6e      	subs	r6, r5, #1
 800161c:	41b5      	sbcs	r5, r6
 800161e:	1ac9      	subs	r1, r1, r3
 8001620:	432c      	orrs	r4, r5
 8001622:	e04e      	b.n	80016c2 <__aeabi_dsub+0x4d2>
 8001624:	464a      	mov	r2, r9
 8001626:	1a14      	subs	r4, r2, r0
 8001628:	45a1      	cmp	r9, r4
 800162a:	4192      	sbcs	r2, r2
 800162c:	4252      	negs	r2, r2
 800162e:	4690      	mov	r8, r2
 8001630:	1a5f      	subs	r7, r3, r1
 8001632:	003a      	movs	r2, r7
 8001634:	4647      	mov	r7, r8
 8001636:	1bd2      	subs	r2, r2, r7
 8001638:	4690      	mov	r8, r2
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	d500      	bpl.n	8001640 <__aeabi_dsub+0x450>
 800163e:	e08b      	b.n	8001758 <__aeabi_dsub+0x568>
 8001640:	4642      	mov	r2, r8
 8001642:	4322      	orrs	r2, r4
 8001644:	d000      	beq.n	8001648 <__aeabi_dsub+0x458>
 8001646:	e630      	b.n	80012aa <__aeabi_dsub+0xba>
 8001648:	2300      	movs	r3, #0
 800164a:	2500      	movs	r5, #0
 800164c:	e74d      	b.n	80014ea <__aeabi_dsub+0x2fa>
 800164e:	464a      	mov	r2, r9
 8001650:	0759      	lsls	r1, r3, #29
 8001652:	08d2      	lsrs	r2, r2, #3
 8001654:	430a      	orrs	r2, r1
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	e744      	b.n	80014e4 <__aeabi_dsub+0x2f4>
 800165a:	4642      	mov	r2, r8
 800165c:	4b9e      	ldr	r3, [pc, #632]	; (80018d8 <__aeabi_dsub+0x6e8>)
 800165e:	0861      	lsrs	r1, r4, #1
 8001660:	401a      	ands	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	2201      	movs	r2, #1
 8001666:	4014      	ands	r4, r2
 8001668:	430c      	orrs	r4, r1
 800166a:	07da      	lsls	r2, r3, #31
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	4698      	mov	r8, r3
 8001670:	4314      	orrs	r4, r2
 8001672:	e641      	b.n	80012f8 <__aeabi_dsub+0x108>
 8001674:	001a      	movs	r2, r3
 8001676:	3e1f      	subs	r6, #31
 8001678:	40f2      	lsrs	r2, r6
 800167a:	0016      	movs	r6, r2
 800167c:	2920      	cmp	r1, #32
 800167e:	d003      	beq.n	8001688 <__aeabi_dsub+0x498>
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	1a51      	subs	r1, r2, r1
 8001684:	408b      	lsls	r3, r1
 8001686:	431c      	orrs	r4, r3
 8001688:	1e62      	subs	r2, r4, #1
 800168a:	4194      	sbcs	r4, r2
 800168c:	2300      	movs	r3, #0
 800168e:	4334      	orrs	r4, r6
 8001690:	4698      	mov	r8, r3
 8001692:	2600      	movs	r6, #0
 8001694:	e71d      	b.n	80014d2 <__aeabi_dsub+0x2e2>
 8001696:	000c      	movs	r4, r1
 8001698:	3a20      	subs	r2, #32
 800169a:	40d4      	lsrs	r4, r2
 800169c:	0022      	movs	r2, r4
 800169e:	4664      	mov	r4, ip
 80016a0:	2c20      	cmp	r4, #32
 80016a2:	d004      	beq.n	80016ae <__aeabi_dsub+0x4be>
 80016a4:	2740      	movs	r7, #64	; 0x40
 80016a6:	1b3f      	subs	r7, r7, r4
 80016a8:	40b9      	lsls	r1, r7
 80016aa:	4308      	orrs	r0, r1
 80016ac:	4680      	mov	r8, r0
 80016ae:	4644      	mov	r4, r8
 80016b0:	1e61      	subs	r1, r4, #1
 80016b2:	418c      	sbcs	r4, r1
 80016b4:	4322      	orrs	r2, r4
 80016b6:	e5e9      	b.n	800128c <__aeabi_dsub+0x9c>
 80016b8:	464c      	mov	r4, r9
 80016ba:	4323      	orrs	r3, r4
 80016bc:	001c      	movs	r4, r3
 80016be:	1e63      	subs	r3, r4, #1
 80016c0:	419c      	sbcs	r4, r3
 80016c2:	1b04      	subs	r4, r0, r4
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	419b      	sbcs	r3, r3
 80016c8:	425b      	negs	r3, r3
 80016ca:	1acb      	subs	r3, r1, r3
 80016cc:	4698      	mov	r8, r3
 80016ce:	465d      	mov	r5, fp
 80016d0:	0016      	movs	r6, r2
 80016d2:	e5e2      	b.n	800129a <__aeabi_dsub+0xaa>
 80016d4:	464e      	mov	r6, r9
 80016d6:	431e      	orrs	r6, r3
 80016d8:	d100      	bne.n	80016dc <__aeabi_dsub+0x4ec>
 80016da:	e0ae      	b.n	800183a <__aeabi_dsub+0x64a>
 80016dc:	1e66      	subs	r6, r4, #1
 80016de:	2c01      	cmp	r4, #1
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dsub+0x4f4>
 80016e2:	e0fd      	b.n	80018e0 <__aeabi_dsub+0x6f0>
 80016e4:	4f7b      	ldr	r7, [pc, #492]	; (80018d4 <__aeabi_dsub+0x6e4>)
 80016e6:	42bc      	cmp	r4, r7
 80016e8:	d100      	bne.n	80016ec <__aeabi_dsub+0x4fc>
 80016ea:	e107      	b.n	80018fc <__aeabi_dsub+0x70c>
 80016ec:	46b4      	mov	ip, r6
 80016ee:	e69b      	b.n	8001428 <__aeabi_dsub+0x238>
 80016f0:	4664      	mov	r4, ip
 80016f2:	2220      	movs	r2, #32
 80016f4:	1b12      	subs	r2, r2, r4
 80016f6:	000c      	movs	r4, r1
 80016f8:	4094      	lsls	r4, r2
 80016fa:	0007      	movs	r7, r0
 80016fc:	4090      	lsls	r0, r2
 80016fe:	46a0      	mov	r8, r4
 8001700:	4664      	mov	r4, ip
 8001702:	1e42      	subs	r2, r0, #1
 8001704:	4190      	sbcs	r0, r2
 8001706:	4662      	mov	r2, ip
 8001708:	40e7      	lsrs	r7, r4
 800170a:	4644      	mov	r4, r8
 800170c:	40d1      	lsrs	r1, r2
 800170e:	433c      	orrs	r4, r7
 8001710:	4304      	orrs	r4, r0
 8001712:	185b      	adds	r3, r3, r1
 8001714:	e6f3      	b.n	80014fe <__aeabi_dsub+0x30e>
 8001716:	4c6f      	ldr	r4, [pc, #444]	; (80018d4 <__aeabi_dsub+0x6e4>)
 8001718:	42a2      	cmp	r2, r4
 800171a:	d100      	bne.n	800171e <__aeabi_dsub+0x52e>
 800171c:	e0d5      	b.n	80018ca <__aeabi_dsub+0x6da>
 800171e:	4448      	add	r0, r9
 8001720:	185b      	adds	r3, r3, r1
 8001722:	4548      	cmp	r0, r9
 8001724:	4189      	sbcs	r1, r1
 8001726:	4249      	negs	r1, r1
 8001728:	185b      	adds	r3, r3, r1
 800172a:	07dc      	lsls	r4, r3, #31
 800172c:	0840      	lsrs	r0, r0, #1
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	4698      	mov	r8, r3
 8001732:	0016      	movs	r6, r2
 8001734:	4304      	orrs	r4, r0
 8001736:	e6cc      	b.n	80014d2 <__aeabi_dsub+0x2e2>
 8001738:	2a00      	cmp	r2, #0
 800173a:	d000      	beq.n	800173e <__aeabi_dsub+0x54e>
 800173c:	e082      	b.n	8001844 <__aeabi_dsub+0x654>
 800173e:	000a      	movs	r2, r1
 8001740:	4302      	orrs	r2, r0
 8001742:	d140      	bne.n	80017c6 <__aeabi_dsub+0x5d6>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	2500      	movs	r5, #0
 8001748:	031b      	lsls	r3, r3, #12
 800174a:	e713      	b.n	8001574 <__aeabi_dsub+0x384>
 800174c:	074b      	lsls	r3, r1, #29
 800174e:	08c2      	lsrs	r2, r0, #3
 8001750:	431a      	orrs	r2, r3
 8001752:	465d      	mov	r5, fp
 8001754:	08cb      	lsrs	r3, r1, #3
 8001756:	e6c5      	b.n	80014e4 <__aeabi_dsub+0x2f4>
 8001758:	464a      	mov	r2, r9
 800175a:	1a84      	subs	r4, r0, r2
 800175c:	42a0      	cmp	r0, r4
 800175e:	4192      	sbcs	r2, r2
 8001760:	1acb      	subs	r3, r1, r3
 8001762:	4252      	negs	r2, r2
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	4698      	mov	r8, r3
 8001768:	465d      	mov	r5, fp
 800176a:	e59e      	b.n	80012aa <__aeabi_dsub+0xba>
 800176c:	464a      	mov	r2, r9
 800176e:	0759      	lsls	r1, r3, #29
 8001770:	08d2      	lsrs	r2, r2, #3
 8001772:	430a      	orrs	r2, r1
 8001774:	08db      	lsrs	r3, r3, #3
 8001776:	e6f9      	b.n	800156c <__aeabi_dsub+0x37c>
 8001778:	464a      	mov	r2, r9
 800177a:	1a14      	subs	r4, r2, r0
 800177c:	45a1      	cmp	r9, r4
 800177e:	4192      	sbcs	r2, r2
 8001780:	1a5b      	subs	r3, r3, r1
 8001782:	4252      	negs	r2, r2
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	4698      	mov	r8, r3
 8001788:	2601      	movs	r6, #1
 800178a:	e586      	b.n	800129a <__aeabi_dsub+0xaa>
 800178c:	464a      	mov	r2, r9
 800178e:	0759      	lsls	r1, r3, #29
 8001790:	08d2      	lsrs	r2, r2, #3
 8001792:	430a      	orrs	r2, r1
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	e6a5      	b.n	80014e4 <__aeabi_dsub+0x2f4>
 8001798:	464c      	mov	r4, r9
 800179a:	4323      	orrs	r3, r4
 800179c:	001c      	movs	r4, r3
 800179e:	1e63      	subs	r3, r4, #1
 80017a0:	419c      	sbcs	r4, r3
 80017a2:	e65b      	b.n	800145c <__aeabi_dsub+0x26c>
 80017a4:	4665      	mov	r5, ip
 80017a6:	001e      	movs	r6, r3
 80017a8:	3d20      	subs	r5, #32
 80017aa:	40ee      	lsrs	r6, r5
 80017ac:	2c20      	cmp	r4, #32
 80017ae:	d005      	beq.n	80017bc <__aeabi_dsub+0x5cc>
 80017b0:	2540      	movs	r5, #64	; 0x40
 80017b2:	1b2d      	subs	r5, r5, r4
 80017b4:	40ab      	lsls	r3, r5
 80017b6:	464c      	mov	r4, r9
 80017b8:	431c      	orrs	r4, r3
 80017ba:	46a2      	mov	sl, r4
 80017bc:	4654      	mov	r4, sl
 80017be:	1e63      	subs	r3, r4, #1
 80017c0:	419c      	sbcs	r4, r3
 80017c2:	4334      	orrs	r4, r6
 80017c4:	e77d      	b.n	80016c2 <__aeabi_dsub+0x4d2>
 80017c6:	074b      	lsls	r3, r1, #29
 80017c8:	08c2      	lsrs	r2, r0, #3
 80017ca:	431a      	orrs	r2, r3
 80017cc:	465d      	mov	r5, fp
 80017ce:	08cb      	lsrs	r3, r1, #3
 80017d0:	e6cc      	b.n	800156c <__aeabi_dsub+0x37c>
 80017d2:	000a      	movs	r2, r1
 80017d4:	4302      	orrs	r2, r0
 80017d6:	d100      	bne.n	80017da <__aeabi_dsub+0x5ea>
 80017d8:	e736      	b.n	8001648 <__aeabi_dsub+0x458>
 80017da:	074b      	lsls	r3, r1, #29
 80017dc:	08c2      	lsrs	r2, r0, #3
 80017de:	431a      	orrs	r2, r3
 80017e0:	465d      	mov	r5, fp
 80017e2:	08cb      	lsrs	r3, r1, #3
 80017e4:	e681      	b.n	80014ea <__aeabi_dsub+0x2fa>
 80017e6:	464a      	mov	r2, r9
 80017e8:	1a84      	subs	r4, r0, r2
 80017ea:	42a0      	cmp	r0, r4
 80017ec:	4192      	sbcs	r2, r2
 80017ee:	1acb      	subs	r3, r1, r3
 80017f0:	4252      	negs	r2, r2
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	4698      	mov	r8, r3
 80017f6:	465d      	mov	r5, fp
 80017f8:	2601      	movs	r6, #1
 80017fa:	e54e      	b.n	800129a <__aeabi_dsub+0xaa>
 80017fc:	074b      	lsls	r3, r1, #29
 80017fe:	08c2      	lsrs	r2, r0, #3
 8001800:	431a      	orrs	r2, r3
 8001802:	08cb      	lsrs	r3, r1, #3
 8001804:	e6b2      	b.n	800156c <__aeabi_dsub+0x37c>
 8001806:	464a      	mov	r2, r9
 8001808:	1a14      	subs	r4, r2, r0
 800180a:	45a1      	cmp	r9, r4
 800180c:	4192      	sbcs	r2, r2
 800180e:	1a5f      	subs	r7, r3, r1
 8001810:	4252      	negs	r2, r2
 8001812:	1aba      	subs	r2, r7, r2
 8001814:	4690      	mov	r8, r2
 8001816:	0212      	lsls	r2, r2, #8
 8001818:	d56b      	bpl.n	80018f2 <__aeabi_dsub+0x702>
 800181a:	464a      	mov	r2, r9
 800181c:	1a84      	subs	r4, r0, r2
 800181e:	42a0      	cmp	r0, r4
 8001820:	4192      	sbcs	r2, r2
 8001822:	1acb      	subs	r3, r1, r3
 8001824:	4252      	negs	r2, r2
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	4698      	mov	r8, r3
 800182a:	465d      	mov	r5, fp
 800182c:	e564      	b.n	80012f8 <__aeabi_dsub+0x108>
 800182e:	074b      	lsls	r3, r1, #29
 8001830:	08c2      	lsrs	r2, r0, #3
 8001832:	431a      	orrs	r2, r3
 8001834:	465d      	mov	r5, fp
 8001836:	08cb      	lsrs	r3, r1, #3
 8001838:	e698      	b.n	800156c <__aeabi_dsub+0x37c>
 800183a:	074b      	lsls	r3, r1, #29
 800183c:	08c2      	lsrs	r2, r0, #3
 800183e:	431a      	orrs	r2, r3
 8001840:	08cb      	lsrs	r3, r1, #3
 8001842:	e64f      	b.n	80014e4 <__aeabi_dsub+0x2f4>
 8001844:	000a      	movs	r2, r1
 8001846:	4302      	orrs	r2, r0
 8001848:	d090      	beq.n	800176c <__aeabi_dsub+0x57c>
 800184a:	464a      	mov	r2, r9
 800184c:	075c      	lsls	r4, r3, #29
 800184e:	08d2      	lsrs	r2, r2, #3
 8001850:	4314      	orrs	r4, r2
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	0312      	lsls	r2, r2, #12
 8001858:	4213      	tst	r3, r2
 800185a:	d008      	beq.n	800186e <__aeabi_dsub+0x67e>
 800185c:	08ce      	lsrs	r6, r1, #3
 800185e:	4216      	tst	r6, r2
 8001860:	d105      	bne.n	800186e <__aeabi_dsub+0x67e>
 8001862:	08c0      	lsrs	r0, r0, #3
 8001864:	0749      	lsls	r1, r1, #29
 8001866:	4308      	orrs	r0, r1
 8001868:	0004      	movs	r4, r0
 800186a:	465d      	mov	r5, fp
 800186c:	0033      	movs	r3, r6
 800186e:	0f61      	lsrs	r1, r4, #29
 8001870:	00e2      	lsls	r2, r4, #3
 8001872:	0749      	lsls	r1, r1, #29
 8001874:	08d2      	lsrs	r2, r2, #3
 8001876:	430a      	orrs	r2, r1
 8001878:	e678      	b.n	800156c <__aeabi_dsub+0x37c>
 800187a:	074b      	lsls	r3, r1, #29
 800187c:	08c2      	lsrs	r2, r0, #3
 800187e:	431a      	orrs	r2, r3
 8001880:	08cb      	lsrs	r3, r1, #3
 8001882:	e632      	b.n	80014ea <__aeabi_dsub+0x2fa>
 8001884:	4448      	add	r0, r9
 8001886:	185b      	adds	r3, r3, r1
 8001888:	4548      	cmp	r0, r9
 800188a:	4192      	sbcs	r2, r2
 800188c:	4698      	mov	r8, r3
 800188e:	4252      	negs	r2, r2
 8001890:	4490      	add	r8, r2
 8001892:	4643      	mov	r3, r8
 8001894:	0004      	movs	r4, r0
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	d400      	bmi.n	800189c <__aeabi_dsub+0x6ac>
 800189a:	e61a      	b.n	80014d2 <__aeabi_dsub+0x2e2>
 800189c:	4642      	mov	r2, r8
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <__aeabi_dsub+0x6e8>)
 80018a0:	2601      	movs	r6, #1
 80018a2:	401a      	ands	r2, r3
 80018a4:	4690      	mov	r8, r2
 80018a6:	e614      	b.n	80014d2 <__aeabi_dsub+0x2e2>
 80018a8:	4666      	mov	r6, ip
 80018aa:	001f      	movs	r7, r3
 80018ac:	3e20      	subs	r6, #32
 80018ae:	40f7      	lsrs	r7, r6
 80018b0:	2c20      	cmp	r4, #32
 80018b2:	d005      	beq.n	80018c0 <__aeabi_dsub+0x6d0>
 80018b4:	2640      	movs	r6, #64	; 0x40
 80018b6:	1b36      	subs	r6, r6, r4
 80018b8:	40b3      	lsls	r3, r6
 80018ba:	464c      	mov	r4, r9
 80018bc:	431c      	orrs	r4, r3
 80018be:	46a2      	mov	sl, r4
 80018c0:	4654      	mov	r4, sl
 80018c2:	1e63      	subs	r3, r4, #1
 80018c4:	419c      	sbcs	r4, r3
 80018c6:	433c      	orrs	r4, r7
 80018c8:	e5c8      	b.n	800145c <__aeabi_dsub+0x26c>
 80018ca:	0011      	movs	r1, r2
 80018cc:	2300      	movs	r3, #0
 80018ce:	2200      	movs	r2, #0
 80018d0:	e532      	b.n	8001338 <__aeabi_dsub+0x148>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	000007ff 	.word	0x000007ff
 80018d8:	ff7fffff 	.word	0xff7fffff
 80018dc:	000007fe 	.word	0x000007fe
 80018e0:	464a      	mov	r2, r9
 80018e2:	1814      	adds	r4, r2, r0
 80018e4:	4284      	cmp	r4, r0
 80018e6:	4192      	sbcs	r2, r2
 80018e8:	185b      	adds	r3, r3, r1
 80018ea:	4698      	mov	r8, r3
 80018ec:	4252      	negs	r2, r2
 80018ee:	4490      	add	r8, r2
 80018f0:	e5e9      	b.n	80014c6 <__aeabi_dsub+0x2d6>
 80018f2:	4642      	mov	r2, r8
 80018f4:	4322      	orrs	r2, r4
 80018f6:	d100      	bne.n	80018fa <__aeabi_dsub+0x70a>
 80018f8:	e6a6      	b.n	8001648 <__aeabi_dsub+0x458>
 80018fa:	e5ea      	b.n	80014d2 <__aeabi_dsub+0x2e2>
 80018fc:	074b      	lsls	r3, r1, #29
 80018fe:	08c2      	lsrs	r2, r0, #3
 8001900:	431a      	orrs	r2, r3
 8001902:	08cb      	lsrs	r3, r1, #3
 8001904:	e632      	b.n	800156c <__aeabi_dsub+0x37c>
 8001906:	2200      	movs	r2, #0
 8001908:	4901      	ldr	r1, [pc, #4]	; (8001910 <__aeabi_dsub+0x720>)
 800190a:	0013      	movs	r3, r2
 800190c:	e514      	b.n	8001338 <__aeabi_dsub+0x148>
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	000007ff 	.word	0x000007ff

08001914 <__aeabi_d2iz>:
 8001914:	000a      	movs	r2, r1
 8001916:	b530      	push	{r4, r5, lr}
 8001918:	4c13      	ldr	r4, [pc, #76]	; (8001968 <__aeabi_d2iz+0x54>)
 800191a:	0053      	lsls	r3, r2, #1
 800191c:	0309      	lsls	r1, r1, #12
 800191e:	0005      	movs	r5, r0
 8001920:	0b09      	lsrs	r1, r1, #12
 8001922:	2000      	movs	r0, #0
 8001924:	0d5b      	lsrs	r3, r3, #21
 8001926:	0fd2      	lsrs	r2, r2, #31
 8001928:	42a3      	cmp	r3, r4
 800192a:	dd04      	ble.n	8001936 <__aeabi_d2iz+0x22>
 800192c:	480f      	ldr	r0, [pc, #60]	; (800196c <__aeabi_d2iz+0x58>)
 800192e:	4283      	cmp	r3, r0
 8001930:	dd02      	ble.n	8001938 <__aeabi_d2iz+0x24>
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <__aeabi_d2iz+0x5c>)
 8001934:	18d0      	adds	r0, r2, r3
 8001936:	bd30      	pop	{r4, r5, pc}
 8001938:	2080      	movs	r0, #128	; 0x80
 800193a:	0340      	lsls	r0, r0, #13
 800193c:	4301      	orrs	r1, r0
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <__aeabi_d2iz+0x60>)
 8001940:	1ac0      	subs	r0, r0, r3
 8001942:	281f      	cmp	r0, #31
 8001944:	dd08      	ble.n	8001958 <__aeabi_d2iz+0x44>
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <__aeabi_d2iz+0x64>)
 8001948:	1ac3      	subs	r3, r0, r3
 800194a:	40d9      	lsrs	r1, r3
 800194c:	000b      	movs	r3, r1
 800194e:	4258      	negs	r0, r3
 8001950:	2a00      	cmp	r2, #0
 8001952:	d1f0      	bne.n	8001936 <__aeabi_d2iz+0x22>
 8001954:	0018      	movs	r0, r3
 8001956:	e7ee      	b.n	8001936 <__aeabi_d2iz+0x22>
 8001958:	4c08      	ldr	r4, [pc, #32]	; (800197c <__aeabi_d2iz+0x68>)
 800195a:	40c5      	lsrs	r5, r0
 800195c:	46a4      	mov	ip, r4
 800195e:	4463      	add	r3, ip
 8001960:	4099      	lsls	r1, r3
 8001962:	000b      	movs	r3, r1
 8001964:	432b      	orrs	r3, r5
 8001966:	e7f2      	b.n	800194e <__aeabi_d2iz+0x3a>
 8001968:	000003fe 	.word	0x000003fe
 800196c:	0000041d 	.word	0x0000041d
 8001970:	7fffffff 	.word	0x7fffffff
 8001974:	00000433 	.word	0x00000433
 8001978:	00000413 	.word	0x00000413
 800197c:	fffffbed 	.word	0xfffffbed

08001980 <__aeabi_i2d>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2800      	cmp	r0, #0
 8001984:	d016      	beq.n	80019b4 <__aeabi_i2d+0x34>
 8001986:	17c3      	asrs	r3, r0, #31
 8001988:	18c5      	adds	r5, r0, r3
 800198a:	405d      	eors	r5, r3
 800198c:	0fc4      	lsrs	r4, r0, #31
 800198e:	0028      	movs	r0, r5
 8001990:	f000 f826 	bl	80019e0 <__clzsi2>
 8001994:	4a11      	ldr	r2, [pc, #68]	; (80019dc <__aeabi_i2d+0x5c>)
 8001996:	1a12      	subs	r2, r2, r0
 8001998:	280a      	cmp	r0, #10
 800199a:	dc16      	bgt.n	80019ca <__aeabi_i2d+0x4a>
 800199c:	0003      	movs	r3, r0
 800199e:	002e      	movs	r6, r5
 80019a0:	3315      	adds	r3, #21
 80019a2:	409e      	lsls	r6, r3
 80019a4:	230b      	movs	r3, #11
 80019a6:	1a18      	subs	r0, r3, r0
 80019a8:	40c5      	lsrs	r5, r0
 80019aa:	0553      	lsls	r3, r2, #21
 80019ac:	032d      	lsls	r5, r5, #12
 80019ae:	0b2d      	lsrs	r5, r5, #12
 80019b0:	0d5b      	lsrs	r3, r3, #21
 80019b2:	e003      	b.n	80019bc <__aeabi_i2d+0x3c>
 80019b4:	2400      	movs	r4, #0
 80019b6:	2300      	movs	r3, #0
 80019b8:	2500      	movs	r5, #0
 80019ba:	2600      	movs	r6, #0
 80019bc:	051b      	lsls	r3, r3, #20
 80019be:	432b      	orrs	r3, r5
 80019c0:	07e4      	lsls	r4, r4, #31
 80019c2:	4323      	orrs	r3, r4
 80019c4:	0030      	movs	r0, r6
 80019c6:	0019      	movs	r1, r3
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
 80019ca:	380b      	subs	r0, #11
 80019cc:	4085      	lsls	r5, r0
 80019ce:	0553      	lsls	r3, r2, #21
 80019d0:	032d      	lsls	r5, r5, #12
 80019d2:	2600      	movs	r6, #0
 80019d4:	0b2d      	lsrs	r5, r5, #12
 80019d6:	0d5b      	lsrs	r3, r3, #21
 80019d8:	e7f0      	b.n	80019bc <__aeabi_i2d+0x3c>
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	0000041e 	.word	0x0000041e

080019e0 <__clzsi2>:
 80019e0:	211c      	movs	r1, #28
 80019e2:	2301      	movs	r3, #1
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	4298      	cmp	r0, r3
 80019e8:	d301      	bcc.n	80019ee <__clzsi2+0xe>
 80019ea:	0c00      	lsrs	r0, r0, #16
 80019ec:	3910      	subs	r1, #16
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	4298      	cmp	r0, r3
 80019f2:	d301      	bcc.n	80019f8 <__clzsi2+0x18>
 80019f4:	0a00      	lsrs	r0, r0, #8
 80019f6:	3908      	subs	r1, #8
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	4298      	cmp	r0, r3
 80019fc:	d301      	bcc.n	8001a02 <__clzsi2+0x22>
 80019fe:	0900      	lsrs	r0, r0, #4
 8001a00:	3904      	subs	r1, #4
 8001a02:	a202      	add	r2, pc, #8	; (adr r2, 8001a0c <__clzsi2+0x2c>)
 8001a04:	5c10      	ldrb	r0, [r2, r0]
 8001a06:	1840      	adds	r0, r0, r1
 8001a08:	4770      	bx	lr
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	02020304 	.word	0x02020304
 8001a10:	01010101 	.word	0x01010101
	...

08001a1c <randn>:
#include "stdio.h"
#include "stdlib.h"
#include "math.h"

void randn(double* r)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	*r = (double)rand() / (double)RAND_MAX;
 8001a24:	f006 f82e 	bl	8007a84 <rand>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff ffa8 	bl	8001980 <__aeabi_i2d>
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <randn+0x30>)
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <randn+0x34>)
 8001a34:	f7fe fd6a 	bl	800050c <__aeabi_ddiv>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	000b      	movs	r3, r1
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	600a      	str	r2, [r1, #0]
 8001a40:	604b      	str	r3, [r1, #4]
	//return (double)rand() / (double)RAND_MAX;
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	ffc00000 	.word	0xffc00000
 8001a50:	41dfffff 	.word	0x41dfffff

08001a54 <nano_wait>:
#define LCD_RESET_CLR GPIO_TYPE->BRR=1<<LCD_RESET

//============================================================================
// Wait for n nanoseconds. (Maximum: 4.294 seconds)
//============================================================================
void nano_wait(unsigned int n) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    asm(    "        mov r0,%0\n"
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	1c18      	adds	r0, r3, #0

08001a60 <repeat>:
 8001a60:	3853      	subs	r0, #83	; 0x53
 8001a62:	dcfd      	bgt.n	8001a60 <repeat>
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <LCD_Reset>:

void LCD_Reset(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
    // Assert reset
    GPIOA->BRR = 1<<LCD_RESET;
 8001a70:	2390      	movs	r3, #144	; 0x90
 8001a72:	05db      	lsls	r3, r3, #23
 8001a74:	2204      	movs	r2, #4
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
    nano_wait(100000000);
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <LCD_Reset+0x2c>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff ffea 	bl	8001a54 <nano_wait>
    GPIOA->BSRR = 1<<LCD_RESET;
 8001a80:	2390      	movs	r3, #144	; 0x90
 8001a82:	05db      	lsls	r3, r3, #23
 8001a84:	2204      	movs	r2, #4
 8001a86:	619a      	str	r2, [r3, #24]
    nano_wait(50000000);
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <LCD_Reset+0x30>)
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff ffe2 	bl	8001a54 <nano_wait>
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	05f5e100 	.word	0x05f5e100
 8001a9c:	02faf080 	.word	0x02faf080

08001aa0 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <LCD_WR_REG+0x30>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d1fa      	bne.n	8001aae <LCD_WR_REG+0xe>
        ;
    // Don't clear RS until the previous operation is done.
    LCD_RS_CLR;
 8001ab8:	2390      	movs	r3, #144	; 0x90
 8001aba:	05db      	lsls	r3, r3, #23
 8001abc:	2208      	movs	r2, #8
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
    *((uint8_t*)&SPI->DR) = data;
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <LCD_WR_REG+0x34>)
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	7013      	strb	r3, [r2, #0]
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40013000 	.word	0x40013000
 8001ad4:	4001300c 	.word	0x4001300c

08001ad8 <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	0002      	movs	r2, r0
 8001ae0:	1dfb      	adds	r3, r7, #7
 8001ae2:	701a      	strb	r2, [r3, #0]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <LCD_WR_DATA+0x30>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	4013      	ands	r3, r2
 8001aee:	d1fa      	bne.n	8001ae6 <LCD_WR_DATA+0xe>
        ;
    // Don't set RS until the previous operation is done.
    LCD_RS_SET;
 8001af0:	2390      	movs	r3, #144	; 0x90
 8001af2:	05db      	lsls	r3, r3, #23
 8001af4:	2208      	movs	r2, #8
 8001af6:	619a      	str	r2, [r3, #24]
    *((uint8_t*)&SPI->DR) = data;
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <LCD_WR_DATA+0x34>)
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	7013      	strb	r3, [r2, #0]
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40013000 	.word	0x40013000
 8001b0c:	4001300c 	.word	0x4001300c

08001b10 <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    LCD_RS_SET;
 8001b14:	2390      	movs	r3, #144	; 0x90
 8001b16:	05db      	lsls	r3, r3, #23
 8001b18:	2208      	movs	r2, #8
 8001b1a:	619a      	str	r2, [r3, #24]
    SPI->CR2 |= SPI_CR2_DS;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <LCD_WriteData16_Prepare+0x20>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <LCD_WriteData16_Prepare+0x20>)
 8001b22:	21f0      	movs	r1, #240	; 0xf0
 8001b24:	0109      	lsls	r1, r1, #4
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40013000 	.word	0x40013000

08001b34 <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	1dbb      	adds	r3, r7, #6
 8001b3e:	801a      	strh	r2, [r3, #0]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <LCD_WriteData16+0x28>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0fa      	beq.n	8001b42 <LCD_WriteData16+0xe>
        ;
    SPI->DR = data;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <LCD_WriteData16+0x28>)
 8001b4e:	1dba      	adds	r2, r7, #6
 8001b50:	8812      	ldrh	r2, [r2, #0]
 8001b52:	60da      	str	r2, [r3, #12]
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013000 	.word	0x40013000

08001b60 <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <LCD_WriteData16_End+0x18>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <LCD_WriteData16_End+0x18>)
 8001b6a:	4904      	ldr	r1, [pc, #16]	; (8001b7c <LCD_WriteData16_End+0x1c>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40013000 	.word	0x40013000
 8001b7c:	fffff0ff 	.word	0xfffff0ff

08001b80 <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	1c0a      	adds	r2, r1, #0
 8001b90:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(LCD_Reg);
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff ff82 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7ff ff98 	bl	8001ad8 <LCD_WR_DATA>
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <LCD_WriteRAM_Prepare+0x18>)
 8001bb6:	891b      	ldrh	r3, [r3, #8]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7ff ff70 	bl	8001aa0 <LCD_WR_REG>
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000130 	.word	0x20000130

08001bcc <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	701a      	strb	r2, [r3, #0]
    lcddev.setxcmd=0x2A;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <LCD_direction+0xa4>)
 8001bda:	222a      	movs	r2, #42	; 0x2a
 8001bdc:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <LCD_direction+0xa4>)
 8001be0:	222b      	movs	r2, #43	; 0x2b
 8001be2:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <LCD_direction+0xa4>)
 8001be6:	222c      	movs	r2, #44	; 0x2c
 8001be8:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d02c      	beq.n	8001c4c <LCD_direction+0x80>
 8001bf2:	dc37      	bgt.n	8001c64 <LCD_direction+0x98>
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d01d      	beq.n	8001c34 <LCD_direction+0x68>
 8001bf8:	dc34      	bgt.n	8001c64 <LCD_direction+0x98>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <LCD_direction+0x38>
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d00c      	beq.n	8001c1c <LCD_direction+0x50>
    case 3:
        lcddev.width=LCD_H;
        lcddev.height=LCD_W;
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
        break;
    default:break;
 8001c02:	e02f      	b.n	8001c64 <LCD_direction+0x98>
        lcddev.width=LCD_W;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <LCD_direction+0xa4>)
 8001c06:	22f0      	movs	r2, #240	; 0xf0
 8001c08:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <LCD_direction+0xa4>)
 8001c0c:	22a0      	movs	r2, #160	; 0xa0
 8001c0e:	0052      	lsls	r2, r2, #1
 8001c10:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8001c12:	2108      	movs	r1, #8
 8001c14:	2036      	movs	r0, #54	; 0x36
 8001c16:	f7ff ffb3 	bl	8001b80 <LCD_WriteReg>
        break;
 8001c1a:	e024      	b.n	8001c66 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <LCD_direction+0xa4>)
 8001c1e:	22a0      	movs	r2, #160	; 0xa0
 8001c20:	0052      	lsls	r2, r2, #1
 8001c22:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <LCD_direction+0xa4>)
 8001c26:	22f0      	movs	r2, #240	; 0xf0
 8001c28:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001c2a:	2168      	movs	r1, #104	; 0x68
 8001c2c:	2036      	movs	r0, #54	; 0x36
 8001c2e:	f7ff ffa7 	bl	8001b80 <LCD_WriteReg>
        break;
 8001c32:	e018      	b.n	8001c66 <LCD_direction+0x9a>
        lcddev.width=LCD_W;
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <LCD_direction+0xa4>)
 8001c36:	22f0      	movs	r2, #240	; 0xf0
 8001c38:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <LCD_direction+0xa4>)
 8001c3c:	22a0      	movs	r2, #160	; 0xa0
 8001c3e:	0052      	lsls	r2, r2, #1
 8001c40:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8001c42:	21c8      	movs	r1, #200	; 0xc8
 8001c44:	2036      	movs	r0, #54	; 0x36
 8001c46:	f7ff ff9b 	bl	8001b80 <LCD_WriteReg>
        break;
 8001c4a:	e00c      	b.n	8001c66 <LCD_direction+0x9a>
        lcddev.width=LCD_H;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <LCD_direction+0xa4>)
 8001c4e:	22a0      	movs	r2, #160	; 0xa0
 8001c50:	0052      	lsls	r2, r2, #1
 8001c52:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <LCD_direction+0xa4>)
 8001c56:	22f0      	movs	r2, #240	; 0xf0
 8001c58:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001c5a:	21a8      	movs	r1, #168	; 0xa8
 8001c5c:	2036      	movs	r0, #54	; 0x36
 8001c5e:	f7ff ff8f 	bl	8001b80 <LCD_WriteReg>
        break;
 8001c62:	e000      	b.n	8001c66 <LCD_direction+0x9a>
    default:break;
 8001c64:	46c0      	nop			; (mov r8, r8)
    }
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000130 	.word	0x20000130

08001c74 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    LCD_Reset();
 8001c78:	f7ff fef8 	bl	8001a6c <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8001c7c:	20cf      	movs	r0, #207	; 0xcf
 8001c7e:	f7ff ff0f 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff ff28 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8001c88:	20d9      	movs	r0, #217	; 0xd9
 8001c8a:	f7ff ff25 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8001c8e:	2030      	movs	r0, #48	; 0x30
 8001c90:	f7ff ff22 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8001c94:	20ed      	movs	r0, #237	; 0xed
 8001c96:	f7ff ff03 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8001c9a:	2064      	movs	r0, #100	; 0x64
 8001c9c:	f7ff ff1c 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f7ff ff19 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8001ca6:	2012      	movs	r0, #18
 8001ca8:	f7ff ff16 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8001cac:	2081      	movs	r0, #129	; 0x81
 8001cae:	f7ff ff13 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8001cb2:	20e8      	movs	r0, #232	; 0xe8
 8001cb4:	f7ff fef4 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8001cb8:	2085      	movs	r0, #133	; 0x85
 8001cba:	f7ff ff0d 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8001cbe:	2010      	movs	r0, #16
 8001cc0:	f7ff ff0a 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8001cc4:	207a      	movs	r0, #122	; 0x7a
 8001cc6:	f7ff ff07 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8001cca:	20cb      	movs	r0, #203	; 0xcb
 8001ccc:	f7ff fee8 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8001cd0:	2039      	movs	r0, #57	; 0x39
 8001cd2:	f7ff ff01 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8001cd6:	202c      	movs	r0, #44	; 0x2c
 8001cd8:	f7ff fefe 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff fefb 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8001ce2:	2034      	movs	r0, #52	; 0x34
 8001ce4:	f7ff fef8 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f7ff fef5 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8001cee:	20f7      	movs	r0, #247	; 0xf7
 8001cf0:	f7ff fed6 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 8001cf4:	2020      	movs	r0, #32
 8001cf6:	f7ff feef 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8001cfa:	20ea      	movs	r0, #234	; 0xea
 8001cfc:	f7ff fed0 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fee9 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff fee6 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 8001d0c:	20c0      	movs	r0, #192	; 0xc0
 8001d0e:	f7ff fec7 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 8001d12:	2021      	movs	r0, #33	; 0x21
 8001d14:	f7ff fee0 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 8001d18:	20c1      	movs	r0, #193	; 0xc1
 8001d1a:	f7ff fec1 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 8001d1e:	2012      	movs	r0, #18
 8001d20:	f7ff feda 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 8001d24:	20c5      	movs	r0, #197	; 0xc5
 8001d26:	f7ff febb 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 8001d2a:	2039      	movs	r0, #57	; 0x39
 8001d2c:	f7ff fed4 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 8001d30:	2037      	movs	r0, #55	; 0x37
 8001d32:	f7ff fed1 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 8001d36:	20c7      	movs	r0, #199	; 0xc7
 8001d38:	f7ff feb2 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8001d3c:	20ab      	movs	r0, #171	; 0xab
 8001d3e:	f7ff fecb 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 8001d42:	2036      	movs	r0, #54	; 0x36
 8001d44:	f7ff feac 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 8001d48:	2048      	movs	r0, #72	; 0x48
 8001d4a:	f7ff fec5 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8001d4e:	203a      	movs	r0, #58	; 0x3a
 8001d50:	f7ff fea6 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 8001d54:	2055      	movs	r0, #85	; 0x55
 8001d56:	f7ff febf 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8001d5a:	20b1      	movs	r0, #177	; 0xb1
 8001d5c:	f7ff fea0 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff feb9 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8001d66:	201b      	movs	r0, #27
 8001d68:	f7ff feb6 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xB6);    // Display Function Control
 8001d6c:	20b6      	movs	r0, #182	; 0xb6
 8001d6e:	f7ff fe97 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8001d72:	200a      	movs	r0, #10
 8001d74:	f7ff feb0 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8001d78:	20a2      	movs	r0, #162	; 0xa2
 8001d7a:	f7ff fead 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001d7e:	20f2      	movs	r0, #242	; 0xf2
 8001d80:	f7ff fe8e 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fea7 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8001d8a:	2026      	movs	r0, #38	; 0x26
 8001d8c:	f7ff fe88 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff fea1 	bl	8001ad8 <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8001d96:	20e0      	movs	r0, #224	; 0xe0
 8001d98:	f7ff fe82 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8001d9c:	200f      	movs	r0, #15
 8001d9e:	f7ff fe9b 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8001da2:	2023      	movs	r0, #35	; 0x23
 8001da4:	f7ff fe98 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8001da8:	201f      	movs	r0, #31
 8001daa:	f7ff fe95 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8001dae:	200b      	movs	r0, #11
 8001db0:	f7ff fe92 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8001db4:	200e      	movs	r0, #14
 8001db6:	f7ff fe8f 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8001dba:	2008      	movs	r0, #8
 8001dbc:	f7ff fe8c 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8001dc0:	204b      	movs	r0, #75	; 0x4b
 8001dc2:	f7ff fe89 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8001dc6:	20a8      	movs	r0, #168	; 0xa8
 8001dc8:	f7ff fe86 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8001dcc:	203b      	movs	r0, #59	; 0x3b
 8001dce:	f7ff fe83 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f7ff fe80 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8001dd8:	2014      	movs	r0, #20
 8001dda:	f7ff fe7d 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8001dde:	2006      	movs	r0, #6
 8001de0:	f7ff fe7a 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8001de4:	2010      	movs	r0, #16
 8001de6:	f7ff fe77 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8001dea:	2009      	movs	r0, #9
 8001dec:	f7ff fe74 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff fe71 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8001df6:	20e1      	movs	r0, #225	; 0xe1
 8001df8:	f7ff fe52 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff fe6b 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 8001e02:	201c      	movs	r0, #28
 8001e04:	f7ff fe68 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 8001e08:	2020      	movs	r0, #32
 8001e0a:	f7ff fe65 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 8001e0e:	2004      	movs	r0, #4
 8001e10:	f7ff fe62 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8001e14:	2010      	movs	r0, #16
 8001e16:	f7ff fe5f 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8001e1a:	2008      	movs	r0, #8
 8001e1c:	f7ff fe5c 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8001e20:	2034      	movs	r0, #52	; 0x34
 8001e22:	f7ff fe59 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 8001e26:	2047      	movs	r0, #71	; 0x47
 8001e28:	f7ff fe56 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8001e2c:	2044      	movs	r0, #68	; 0x44
 8001e2e:	f7ff fe53 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8001e32:	2005      	movs	r0, #5
 8001e34:	f7ff fe50 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8001e38:	200b      	movs	r0, #11
 8001e3a:	f7ff fe4d 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8001e3e:	2009      	movs	r0, #9
 8001e40:	f7ff fe4a 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8001e44:	202f      	movs	r0, #47	; 0x2f
 8001e46:	f7ff fe47 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8001e4a:	2036      	movs	r0, #54	; 0x36
 8001e4c:	f7ff fe44 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8001e50:	200f      	movs	r0, #15
 8001e52:	f7ff fe41 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8001e56:	202b      	movs	r0, #43	; 0x2b
 8001e58:	f7ff fe22 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff fe3b 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fe38 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff fe35 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8001e6e:	203f      	movs	r0, #63	; 0x3f
 8001e70:	f7ff fe32 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8001e74:	202a      	movs	r0, #42	; 0x2a
 8001e76:	f7ff fe13 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fe2c 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fe29 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fe26 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8001e8c:	20ef      	movs	r0, #239	; 0xef
 8001e8e:	f7ff fe23 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8001e92:	2011      	movs	r0, #17
 8001e94:	f7ff fe04 	bl	8001aa0 <LCD_WR_REG>
    nano_wait(120000000); // Wait 120 ms
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <LCD_Init+0x240>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff fdda 	bl	8001a54 <nano_wait>
    LCD_WR_REG(0x29);     // Display on
 8001ea0:	2029      	movs	r0, #41	; 0x29
 8001ea2:	f7ff fdfd 	bl	8001aa0 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fe90 	bl	8001bcc <LCD_direction>
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	07270e00 	.word	0x07270e00

08001eb8 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	1dbb      	adds	r3, r7, #6
 8001ec2:	801a      	strh	r2, [r3, #0]
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <LCD_Clear+0x6c>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <LCD_Clear+0x6c>)
 8001ecc:	885b      	ldrh	r3, [r3, #2]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f828 	bl	8001f28 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8001ed8:	f7ff fe1a 	bl	8001b10 <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e013      	b.n	8001f0a <LCD_Clear+0x52>
    {
        for(m=0;m<lcddev.width;m++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	e007      	b.n	8001ef8 <LCD_Clear+0x40>
        {
            LCD_WriteData16(Color);
 8001ee8:	1dbb      	adds	r3, r7, #6
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fe21 	bl	8001b34 <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <LCD_Clear+0x6c>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	001a      	movs	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d3f1      	bcc.n	8001ee8 <LCD_Clear+0x30>
    for(i=0;i<lcddev.height;i++)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <LCD_Clear+0x6c>)
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	001a      	movs	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d3e5      	bcc.n	8001ee2 <LCD_Clear+0x2a>
        }
    }
    LCD_WriteData16_End();
 8001f16:	f7ff fe23 	bl	8001b60 <LCD_WriteData16_End>
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	20000130 	.word	0x20000130

08001f28 <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8001f28:	b5b0      	push	{r4, r5, r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	0005      	movs	r5, r0
 8001f30:	000c      	movs	r4, r1
 8001f32:	0010      	movs	r0, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	1dbb      	adds	r3, r7, #6
 8001f38:	1c2a      	adds	r2, r5, #0
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	1c22      	adds	r2, r4, #0
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	1cbb      	adds	r3, r7, #2
 8001f44:	1c02      	adds	r2, r0, #0
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	003b      	movs	r3, r7
 8001f4a:	1c0a      	adds	r2, r1, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <LCD_SetWindow+0xbc>)
 8001f50:	895b      	ldrh	r3, [r3, #10]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff fda3 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8001f5a:	1dbb      	adds	r3, r7, #6
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff fdb7 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fdb1 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8001f76:	1cbb      	adds	r3, r7, #2
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff fda9 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8001f86:	1cbb      	adds	r3, r7, #2
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fda3 	bl	8001ad8 <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <LCD_SetWindow+0xbc>)
 8001f94:	899b      	ldrh	r3, [r3, #12]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff fd81 	bl	8001aa0 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff fd95 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff fd8f 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8001fba:	003b      	movs	r3, r7
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff fd87 	bl	8001ad8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8001fca:	003b      	movs	r3, r7
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff fd81 	bl	8001ad8 <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8001fd6:	f7ff fdeb 	bl	8001bb0 <LCD_WriteRAM_Prepare>
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b002      	add	sp, #8
 8001fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	20000130 	.word	0x20000130

08001fe8 <LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
void LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0004      	movs	r4, r0
 8001ff0:	0008      	movs	r0, r1
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	1dbb      	adds	r3, r7, #6
 8001ff6:	1c22      	adds	r2, r4, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	1c02      	adds	r2, r0, #0
 8001ffe:	801a      	strh	r2, [r3, #0]
 8002000:	1cbb      	adds	r3, r7, #2
 8002002:	1c0a      	adds	r2, r1, #0
 8002004:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(x,y,x,y);
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	881c      	ldrh	r4, [r3, #0]
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	881a      	ldrh	r2, [r3, #0]
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	8819      	ldrh	r1, [r3, #0]
 8002012:	1dbb      	adds	r3, r7, #6
 8002014:	8818      	ldrh	r0, [r3, #0]
 8002016:	0023      	movs	r3, r4
 8002018:	f7ff ff86 	bl	8001f28 <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 800201c:	f7ff fd78 	bl	8001b10 <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 8002020:	1cbb      	adds	r3, r7, #2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff fd85 	bl	8001b34 <LCD_WriteData16>
    LCD_WriteData16_End();
 800202a:	f7ff fd99 	bl	8001b60 <LCD_WriteData16_End>
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b003      	add	sp, #12
 8002034:	bd90      	pop	{r4, r7, pc}
	...

08002038 <LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	0005      	movs	r5, r0
 8002040:	000c      	movs	r4, r1
 8002042:	0010      	movs	r0, r2
 8002044:	0019      	movs	r1, r3
 8002046:	1dbb      	adds	r3, r7, #6
 8002048:	1c2a      	adds	r2, r5, #0
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	1c22      	adds	r2, r4, #0
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	1cbb      	adds	r3, r7, #2
 8002054:	1c02      	adds	r2, r0, #0
 8002056:	801a      	strh	r2, [r3, #0]
 8002058:	003b      	movs	r3, r7
 800205a:	1c0a      	adds	r2, r1, #0
 800205c:	801a      	strh	r2, [r3, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 800205e:	2220      	movs	r2, #32
 8002060:	18bb      	adds	r3, r7, r2
 8002062:	18ba      	adds	r2, r7, r2
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	3a20      	subs	r2, #32
 8002068:	701a      	strb	r2, [r3, #0]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 800206a:	2124      	movs	r1, #36	; 0x24
 800206c:	187b      	adds	r3, r7, r1
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	b29a      	uxth	r2, r3
 8002076:	1dbb      	adds	r3, r7, #6
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	18d3      	adds	r3, r2, r3
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29c      	uxth	r4, r3
 8002082:	187b      	adds	r3, r7, r1
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b29a      	uxth	r2, r3
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	18d3      	adds	r3, r2, r3
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	8819      	ldrh	r1, [r3, #0]
 8002098:	1dbb      	adds	r3, r7, #6
 800209a:	8818      	ldrh	r0, [r3, #0]
 800209c:	0013      	movs	r3, r2
 800209e:	0022      	movs	r2, r4
 80020a0:	f7ff ff42 	bl	8001f28 <LCD_SetWindow>
    if (!mode) {
 80020a4:	2328      	movs	r3, #40	; 0x28
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d166      	bne.n	800217c <LCD_DrawChar+0x144>
        LCD_WriteData16_Prepare();
 80020ae:	f7ff fd2f 	bl	8001b10 <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 80020b2:	230e      	movs	r3, #14
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e054      	b.n	8002166 <LCD_DrawChar+0x12e>
            if (size==12)
 80020bc:	2324      	movs	r3, #36	; 0x24
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d110      	bne.n	80020e8 <LCD_DrawChar+0xb0>
                temp=asc2_1206[num][pos];
 80020c6:	2320      	movs	r3, #32
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	230e      	movs	r3, #14
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	7818      	ldrb	r0, [r3, #0]
 80020d2:	230f      	movs	r3, #15
 80020d4:	18f9      	adds	r1, r7, r3
 80020d6:	4c61      	ldr	r4, [pc, #388]	; (800225c <LCD_DrawChar+0x224>)
 80020d8:	0013      	movs	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	189b      	adds	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	18e3      	adds	r3, r4, r3
 80020e2:	5c1b      	ldrb	r3, [r3, r0]
 80020e4:	700b      	strb	r3, [r1, #0]
 80020e6:	e00c      	b.n	8002102 <LCD_DrawChar+0xca>
            else
                temp=asc2_1608[num][pos];
 80020e8:	2320      	movs	r3, #32
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	7819      	ldrb	r1, [r3, #0]
 80020ee:	230e      	movs	r3, #14
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	4859      	ldr	r0, [pc, #356]	; (8002260 <LCD_DrawChar+0x228>)
 80020fa:	0109      	lsls	r1, r1, #4
 80020fc:	1841      	adds	r1, r0, r1
 80020fe:	5c8a      	ldrb	r2, [r1, r2]
 8002100:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 8002102:	230d      	movs	r3, #13
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e01c      	b.n	8002146 <LCD_DrawChar+0x10e>
                if (temp&0x01)
 800210c:	230f      	movs	r3, #15
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d005      	beq.n	8002124 <LCD_DrawChar+0xec>
                    LCD_WriteData16(fc);
 8002118:	1cbb      	adds	r3, r7, #2
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff fd09 	bl	8001b34 <LCD_WriteData16>
 8002122:	e004      	b.n	800212e <LCD_DrawChar+0xf6>
                else
                    LCD_WriteData16(bc);
 8002124:	003b      	movs	r3, r7
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff fd03 	bl	8001b34 <LCD_WriteData16>
                temp>>=1;
 800212e:	220f      	movs	r2, #15
 8002130:	18bb      	adds	r3, r7, r2
 8002132:	18ba      	adds	r2, r7, r2
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	0852      	lsrs	r2, r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++) {
 800213a:	210d      	movs	r1, #13
 800213c:	187b      	adds	r3, r7, r1
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	187b      	adds	r3, r7, r1
 8002142:	3201      	adds	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	2324      	movs	r3, #36	; 0x24
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	220d      	movs	r2, #13
 8002152:	18ba      	adds	r2, r7, r2
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d3d8      	bcc.n	800210c <LCD_DrawChar+0xd4>
        for(pos=0;pos<size;pos++) {
 800215a:	210e      	movs	r1, #14
 800215c:	187b      	adds	r3, r7, r1
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	187b      	adds	r3, r7, r1
 8002162:	3201      	adds	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	230e      	movs	r3, #14
 8002168:	18fa      	adds	r2, r7, r3
 800216a:	2324      	movs	r3, #36	; 0x24
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d3a2      	bcc.n	80020bc <LCD_DrawChar+0x84>

            }
        }
        LCD_WriteData16_End();
 8002176:	f7ff fcf3 	bl	8001b60 <LCD_WriteData16_End>
                    LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 800217a:	e06b      	b.n	8002254 <LCD_DrawChar+0x21c>
        for(pos=0;pos<size;pos++)
 800217c:	230e      	movs	r3, #14
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e05e      	b.n	8002244 <LCD_DrawChar+0x20c>
            if (size==12)
 8002186:	2324      	movs	r3, #36	; 0x24
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d110      	bne.n	80021b2 <LCD_DrawChar+0x17a>
                temp=asc2_1206[num][pos];
 8002190:	2320      	movs	r3, #32
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	230e      	movs	r3, #14
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	7818      	ldrb	r0, [r3, #0]
 800219c:	230f      	movs	r3, #15
 800219e:	18f9      	adds	r1, r7, r3
 80021a0:	4c2e      	ldr	r4, [pc, #184]	; (800225c <LCD_DrawChar+0x224>)
 80021a2:	0013      	movs	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	18e3      	adds	r3, r4, r3
 80021ac:	5c1b      	ldrb	r3, [r3, r0]
 80021ae:	700b      	strb	r3, [r1, #0]
 80021b0:	e00c      	b.n	80021cc <LCD_DrawChar+0x194>
                temp=asc2_1608[num][pos];
 80021b2:	2320      	movs	r3, #32
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	7819      	ldrb	r1, [r3, #0]
 80021b8:	230e      	movs	r3, #14
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	230f      	movs	r3, #15
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <LCD_DrawChar+0x228>)
 80021c4:	0109      	lsls	r1, r1, #4
 80021c6:	1841      	adds	r1, r0, r1
 80021c8:	5c8a      	ldrb	r2, [r1, r2]
 80021ca:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 80021cc:	230d      	movs	r3, #13
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e026      	b.n	8002224 <LCD_DrawChar+0x1ec>
                if(temp&0x01)
 80021d6:	230f      	movs	r3, #15
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	d014      	beq.n	800220c <LCD_DrawChar+0x1d4>
                    LCD_DrawPoint(x+t,y+pos,fc);
 80021e2:	230d      	movs	r3, #13
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	1dbb      	adds	r3, r7, #6
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	18d3      	adds	r3, r2, r3
 80021f0:	b298      	uxth	r0, r3
 80021f2:	230e      	movs	r3, #14
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	18d3      	adds	r3, r2, r3
 8002200:	b299      	uxth	r1, r3
 8002202:	1cbb      	adds	r3, r7, #2
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	001a      	movs	r2, r3
 8002208:	f7ff feee 	bl	8001fe8 <LCD_DrawPoint>
                temp>>=1;
 800220c:	220f      	movs	r2, #15
 800220e:	18bb      	adds	r3, r7, r2
 8002210:	18ba      	adds	r2, r7, r2
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	0852      	lsrs	r2, r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
            for (t=0;t<size/2;t++)
 8002218:	210d      	movs	r1, #13
 800221a:	187b      	adds	r3, r7, r1
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	187b      	adds	r3, r7, r1
 8002220:	3201      	adds	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	2324      	movs	r3, #36	; 0x24
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	220d      	movs	r2, #13
 8002230:	18ba      	adds	r2, r7, r2
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d3ce      	bcc.n	80021d6 <LCD_DrawChar+0x19e>
        for(pos=0;pos<size;pos++)
 8002238:	210e      	movs	r1, #14
 800223a:	187b      	adds	r3, r7, r1
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	187b      	adds	r3, r7, r1
 8002240:	3201      	adds	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	230e      	movs	r3, #14
 8002246:	18fa      	adds	r2, r7, r3
 8002248:	2324      	movs	r3, #36	; 0x24
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d398      	bcc.n	8002186 <LCD_DrawChar+0x14e>
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bdb0      	pop	{r4, r5, r7, pc}
 800225c:	08008bf0 	.word	0x08008bf0
 8002260:	08009064 	.word	0x08009064

08002264 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af04      	add	r7, sp, #16
 800226a:	0005      	movs	r5, r0
 800226c:	000c      	movs	r4, r1
 800226e:	0010      	movs	r0, r2
 8002270:	0019      	movs	r1, r3
 8002272:	1dbb      	adds	r3, r7, #6
 8002274:	1c2a      	adds	r2, r5, #0
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	1c22      	adds	r2, r4, #0
 800227c:	801a      	strh	r2, [r3, #0]
 800227e:	1cbb      	adds	r3, r7, #2
 8002280:	1c02      	adds	r2, r0, #0
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	003b      	movs	r3, r7
 8002286:	1c0a      	adds	r2, r1, #0
 8002288:	801a      	strh	r2, [r3, #0]
    while((*p<='~')&&(*p>=' '))
 800228a:	e036      	b.n	80022fa <LCD_DrawString+0x96>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <LCD_DrawString+0xb0>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	1dba      	adds	r2, r7, #6
 8002292:	8812      	ldrh	r2, [r2, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d239      	bcs.n	800230c <LCD_DrawString+0xa8>
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <LCD_DrawString+0xb0>)
 800229a:	885b      	ldrh	r3, [r3, #2]
 800229c:	1d3a      	adds	r2, r7, #4
 800229e:	8812      	ldrh	r2, [r2, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d233      	bcs.n	800230c <LCD_DrawString+0xa8>
        return;
        LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	003a      	movs	r2, r7
 80022aa:	8815      	ldrh	r5, [r2, #0]
 80022ac:	1cba      	adds	r2, r7, #2
 80022ae:	8814      	ldrh	r4, [r2, #0]
 80022b0:	1d3a      	adds	r2, r7, #4
 80022b2:	8811      	ldrh	r1, [r2, #0]
 80022b4:	1dba      	adds	r2, r7, #6
 80022b6:	8810      	ldrh	r0, [r2, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	2608      	movs	r6, #8
 80022bc:	46b4      	mov	ip, r6
 80022be:	44bc      	add	ip, r7
 80022c0:	4462      	add	r2, ip
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	9202      	str	r2, [sp, #8]
 80022c6:	261c      	movs	r6, #28
 80022c8:	2208      	movs	r2, #8
 80022ca:	18ba      	adds	r2, r7, r2
 80022cc:	1992      	adds	r2, r2, r6
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	9201      	str	r2, [sp, #4]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	002b      	movs	r3, r5
 80022d6:	0022      	movs	r2, r4
 80022d8:	f7ff feae 	bl	8002038 <LCD_DrawChar>
        x+=size/2;
 80022dc:	2308      	movs	r3, #8
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	199b      	adds	r3, r3, r6
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	b299      	uxth	r1, r3
 80022ea:	1dbb      	adds	r3, r7, #6
 80022ec:	1dba      	adds	r2, r7, #6
 80022ee:	8812      	ldrh	r2, [r2, #0]
 80022f0:	188a      	adds	r2, r1, r2
 80022f2:	801a      	strh	r2, [r3, #0]
        p++;
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	3301      	adds	r3, #1
 80022f8:	623b      	str	r3, [r7, #32]
    while((*p<='~')&&(*p>=' '))
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b7e      	cmp	r3, #126	; 0x7e
 8002300:	d805      	bhi.n	800230e <LCD_DrawString+0xaa>
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b1f      	cmp	r3, #31
 8002308:	d8c0      	bhi.n	800228c <LCD_DrawString+0x28>
 800230a:	e000      	b.n	800230e <LCD_DrawString+0xaa>
        return;
 800230c:	46c0      	nop			; (mov r8, r8)
    }
}
 800230e:	46bd      	mov	sp, r7
 8002310:	b003      	add	sp, #12
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002314:	20000130 	.word	0x20000130

08002318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800231e:	f001 fc7f 	bl	8003c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002322:	f000 f849 	bl	80023b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002326:	f000 fa77 	bl	8002818 <MX_GPIO_Init>
  MX_DMA_Init();
 800232a:	f000 fa57 	bl	80027dc <MX_DMA_Init>
  MX_ADC_Init();
 800232e:	f000 f889 	bl	8002444 <MX_ADC_Init>
  MX_I2C1_Init();
 8002332:	f000 f8e1 	bl	80024f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002336:	f000 f91f 	bl	8002578 <MX_SPI1_Init>
  MX_TIM1_Init();
 800233a:	f000 f9b7 	bl	80026ac <MX_TIM1_Init>
  LCD_Init();
 800233e:	f7ff fc99 	bl	8001c74 <LCD_Init>
  /* USER CODE BEGIN 2 */
  double r1 = (double)rand();
 8002342:	f005 fb9f 	bl	8007a84 <rand>
 8002346:	0003      	movs	r3, r0
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff fb19 	bl	8001980 <__aeabi_i2d>
 800234e:	0002      	movs	r2, r0
 8002350:	000b      	movs	r3, r1
 8002352:	623a      	str	r2, [r7, #32]
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  double r2 = (double)RAND_MAX;
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <main+0x8c>)
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <main+0x90>)
 800235a:	61ba      	str	r2, [r7, #24]
 800235c:	61fb      	str	r3, [r7, #28]
  double r3 = r1 / r2;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	6a38      	ldr	r0, [r7, #32]
 8002364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002366:	f7fe f8d1 	bl	800050c <__aeabi_ddiv>
 800236a:	0002      	movs	r2, r0
 800236c:	000b      	movs	r3, r1
 800236e:	613a      	str	r2, [r7, #16]
 8002370:	617b      	str	r3, [r7, #20]
  double r4;
  randn(&r4);
 8002372:	003b      	movs	r3, r7
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff fb51 	bl	8001a1c <randn>
  double r5 = sqrt(2);
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <main+0x94>)
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <main+0x98>)
 800237e:	60ba      	str	r2, [r7, #8]
 8002380:	60fb      	str	r3, [r7, #12]
  __NOP();
 8002382:	46c0      	nop			; (mov r8, r8)
	*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <main+0x9c>)
 8002386:	2201      	movs	r2, #1
 8002388:	2101      	movs	r1, #1
 800238a:	0018      	movs	r0, r3
 800238c:	f002 fae3 	bl	8004956 <HAL_GPIO_WritePin>
  initialize();
 8002390:	f000 fc0e 	bl	8002bb0 <initialize>
  LCD_Clear(BLUE);
 8002394:	201f      	movs	r0, #31
 8002396:	f7ff fd8f 	bl	8001eb8 <LCD_Clear>
  resetSel();
 800239a:	f000 ff61 	bl	8003260 <resetSel>
  menu_home();
 800239e:	f000 fd0d 	bl	8002dbc <menu_home>
  while(1)
 80023a2:	e7fe      	b.n	80023a2 <main+0x8a>
 80023a4:	ffc00000 	.word	0xffc00000
 80023a8:	41dfffff 	.word	0x41dfffff
 80023ac:	667f3bcd 	.word	0x667f3bcd
 80023b0:	3ff6a09e 	.word	0x3ff6a09e
 80023b4:	48000800 	.word	0x48000800

080023b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b093      	sub	sp, #76	; 0x4c
 80023bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023be:	2414      	movs	r4, #20
 80023c0:	193b      	adds	r3, r7, r4
 80023c2:	0018      	movs	r0, r3
 80023c4:	2334      	movs	r3, #52	; 0x34
 80023c6:	001a      	movs	r2, r3
 80023c8:	2100      	movs	r1, #0
 80023ca:	f005 faab 	bl	8007924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	0018      	movs	r0, r3
 80023d2:	2310      	movs	r3, #16
 80023d4:	001a      	movs	r2, r3
 80023d6:	2100      	movs	r1, #0
 80023d8:	f005 faa4 	bl	8007924 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80023dc:	0021      	movs	r1, r4
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2212      	movs	r2, #18
 80023e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2201      	movs	r2, #1
 80023e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2201      	movs	r2, #1
 80023ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2210      	movs	r2, #16
 80023f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2210      	movs	r2, #16
 80023fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002402:	187b      	adds	r3, r7, r1
 8002404:	0018      	movs	r0, r3
 8002406:	f003 ff1b 	bl	8006240 <HAL_RCC_OscConfig>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d001      	beq.n	8002412 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800240e:	f000 fbc9 	bl	8002ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2207      	movs	r2, #7
 8002416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2100      	movs	r1, #0
 800242e:	0018      	movs	r0, r3
 8002430:	f004 fa8c 	bl	800694c <HAL_RCC_ClockConfig>
 8002434:	1e03      	subs	r3, r0, #0
 8002436:	d001      	beq.n	800243c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002438:	f000 fbb4 	bl	8002ba4 <Error_Handler>
  }
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b013      	add	sp, #76	; 0x4c
 8002442:	bd90      	pop	{r4, r7, pc}

08002444 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	0018      	movs	r0, r3
 800244e:	230c      	movs	r3, #12
 8002450:	001a      	movs	r2, r3
 8002452:	2100      	movs	r1, #0
 8002454:	f005 fa66 	bl	8007924 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <MX_ADC_Init+0xac>)
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <MX_ADC_Init+0xb0>)
 800245c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <MX_ADC_Init+0xac>)
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002464:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <MX_ADC_Init+0xac>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <MX_ADC_Init+0xac>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <MX_ADC_Init+0xac>)
 8002472:	2201      	movs	r2, #1
 8002474:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <MX_ADC_Init+0xac>)
 8002478:	2204      	movs	r2, #4
 800247a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <MX_ADC_Init+0xac>)
 800247e:	2200      	movs	r2, #0
 8002480:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <MX_ADC_Init+0xac>)
 8002484:	2200      	movs	r2, #0
 8002486:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <MX_ADC_Init+0xac>)
 800248a:	2201      	movs	r2, #1
 800248c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <MX_ADC_Init+0xac>)
 8002490:	2200      	movs	r2, #0
 8002492:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <MX_ADC_Init+0xac>)
 8002496:	22c2      	movs	r2, #194	; 0xc2
 8002498:	32ff      	adds	r2, #255	; 0xff
 800249a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_ADC_Init+0xac>)
 800249e:	2200      	movs	r2, #0
 80024a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <MX_ADC_Init+0xac>)
 80024a4:	2224      	movs	r2, #36	; 0x24
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_ADC_Init+0xac>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_ADC_Init+0xac>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f001 fc18 	bl	8003ce8 <HAL_ADC_Init>
 80024b8:	1e03      	subs	r3, r0, #0
 80024ba:	d001      	beq.n	80024c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80024bc:	f000 fb72 	bl	8002ba4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2208      	movs	r2, #8
 80024c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0152      	lsls	r2, r2, #5
 80024cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2207      	movs	r2, #7
 80024d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024d4:	1d3a      	adds	r2, r7, #4
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_ADC_Init+0xac>)
 80024d8:	0011      	movs	r1, r2
 80024da:	0018      	movs	r0, r3
 80024dc:	f001 fd44 	bl	8003f68 <HAL_ADC_ConfigChannel>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80024e4:	f000 fb5e 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200002b8 	.word	0x200002b8
 80024f4:	40012400 	.word	0x40012400

080024f8 <MX_I2C1_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <MX_I2C1_Init+0x74>)
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <MX_I2C1_Init+0x78>)
 8002500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <MX_I2C1_Init+0x74>)
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <MX_I2C1_Init+0x7c>)
 8002506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <MX_I2C1_Init+0x74>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <MX_I2C1_Init+0x74>)
 8002510:	2201      	movs	r2, #1
 8002512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <MX_I2C1_Init+0x74>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_I2C1_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_I2C1_Init+0x74>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_I2C1_Init+0x74>)
 8002528:	2200      	movs	r2, #0
 800252a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_I2C1_Init+0x74>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_I2C1_Init+0x74>)
 8002534:	0018      	movs	r0, r3
 8002536:	f002 fa47 	bl	80049c8 <HAL_I2C_Init>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d001      	beq.n	8002542 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800253e:	f000 fb31 	bl	8002ba4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_I2C1_Init+0x74>)
 8002544:	2100      	movs	r1, #0
 8002546:	0018      	movs	r0, r3
 8002548:	f003 fde2 	bl	8006110 <HAL_I2CEx_ConfigAnalogFilter>
 800254c:	1e03      	subs	r3, r0, #0
 800254e:	d001      	beq.n	8002554 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002550:	f000 fb28 	bl	8002ba4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <MX_I2C1_Init+0x74>)
 8002556:	2100      	movs	r1, #0
 8002558:	0018      	movs	r0, r3
 800255a:	f003 fe25 	bl	80061a8 <HAL_I2CEx_ConfigDigitalFilter>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002562:	f000 fb1f 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000144 	.word	0x20000144
 8002570:	40005400 	.word	0x40005400
 8002574:	2000090e 	.word	0x2000090e

08002578 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800257c:	4b45      	ldr	r3, [pc, #276]	; (8002694 <MX_SPI1_Init+0x11c>)
 800257e:	4a46      	ldr	r2, [pc, #280]	; (8002698 <MX_SPI1_Init+0x120>)
 8002580:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002582:	4b44      	ldr	r3, [pc, #272]	; (8002694 <MX_SPI1_Init+0x11c>)
 8002584:	2282      	movs	r2, #130	; 0x82
 8002586:	0052      	lsls	r2, r2, #1
 8002588:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800258a:	4b42      	ldr	r3, [pc, #264]	; (8002694 <MX_SPI1_Init+0x11c>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <MX_SPI1_Init+0x11c>)
 8002592:	22c0      	movs	r2, #192	; 0xc0
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002598:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <MX_SPI1_Init+0x11c>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800259e:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	02d2      	lsls	r2, r2, #11
 80025aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ac:	4b39      	ldr	r3, [pc, #228]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025be:	4b35      	ldr	r3, [pc, #212]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025c4:	4b33      	ldr	r3, [pc, #204]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025c6:	2207      	movs	r2, #7
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025d2:	2208      	movs	r2, #8
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <MX_SPI1_Init+0x11c>)
 80025d8:	0018      	movs	r0, r3
 80025da:	f004 fb11 	bl	8006c00 <HAL_SPI_Init>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025e2:	f000 fadf 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <MX_SPI1_Init+0x124>)
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <MX_SPI1_Init+0x124>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0289      	lsls	r1, r1, #10
 80025f0:	430a      	orrs	r2, r1
 80025f2:	615a      	str	r2, [r3, #20]
  GPIOA -> MODER &= ~GPIO_MODER_MODER4 & ~GPIO_MODER_MODER5 & ~GPIO_MODER_MODER7;
 80025f4:	2390      	movs	r3, #144	; 0x90
 80025f6:	05db      	lsls	r3, r3, #23
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2390      	movs	r3, #144	; 0x90
 80025fc:	05db      	lsls	r3, r3, #23
 80025fe:	4928      	ldr	r1, [pc, #160]	; (80026a0 <MX_SPI1_Init+0x128>)
 8002600:	400a      	ands	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
 8002604:	2390      	movs	r3, #144	; 0x90
 8002606:	05db      	lsls	r3, r3, #23
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2390      	movs	r3, #144	; 0x90
 800260c:	05db      	lsls	r3, r3, #23
 800260e:	218a      	movs	r1, #138	; 0x8a
 8002610:	0209      	lsls	r1, r1, #8
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER &= ~GPIO_MODER_MODER2 & ~GPIO_MODER_MODER3;
 8002616:	2390      	movs	r3, #144	; 0x90
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2390      	movs	r3, #144	; 0x90
 800261e:	05db      	lsls	r3, r3, #23
 8002620:	21f0      	movs	r1, #240	; 0xf0
 8002622:	438a      	bics	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
  GPIOA -> MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
 8002626:	2390      	movs	r3, #144	; 0x90
 8002628:	05db      	lsls	r3, r3, #23
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2390      	movs	r3, #144	; 0x90
 800262e:	05db      	lsls	r3, r3, #23
 8002630:	2150      	movs	r1, #80	; 0x50
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
  GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL4 & ~GPIO_AFRL_AFRL5 & ~GPIO_AFRL_AFRL7;
 8002636:	2390      	movs	r3, #144	; 0x90
 8002638:	05db      	lsls	r3, r3, #23
 800263a:	6a1a      	ldr	r2, [r3, #32]
 800263c:	2390      	movs	r3, #144	; 0x90
 800263e:	05db      	lsls	r3, r3, #23
 8002640:	4918      	ldr	r1, [pc, #96]	; (80026a4 <MX_SPI1_Init+0x12c>)
 8002642:	400a      	ands	r2, r1
 8002644:	621a      	str	r2, [r3, #32]

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_SPI1_Init+0x124>)
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_SPI1_Init+0x124>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0149      	lsls	r1, r1, #5
 8002650:	430a      	orrs	r2, r1
 8002652:	619a      	str	r2, [r3, #24]
  SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_SPI1_Init+0x120>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_SPI1_Init+0x120>)
 800265a:	4913      	ldr	r1, [pc, #76]	; (80026a8 <MX_SPI1_Init+0x130>)
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
  SPI1->CR1 &= ~SPI_CR1_BR;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <MX_SPI1_Init+0x120>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_SPI1_Init+0x120>)
 8002666:	2138      	movs	r1, #56	; 0x38
 8002668:	438a      	bics	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
  SPI1->CR2 = SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0;
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <MX_SPI1_Init+0x120>)
 800266e:	22e0      	movs	r2, #224	; 0xe0
 8002670:	00d2      	lsls	r2, r2, #3
 8002672:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |= SPI_CR2_NSSP | SPI_CR2_SSOE;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_SPI1_Init+0x120>)
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <MX_SPI1_Init+0x120>)
 800267a:	210c      	movs	r1, #12
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <MX_SPI1_Init+0x120>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <MX_SPI1_Init+0x120>)
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	200001e8 	.word	0x200001e8
 8002698:	40013000 	.word	0x40013000
 800269c:	40021000 	.word	0x40021000
 80026a0:	ffff30ff 	.word	0xffff30ff
 80026a4:	0f00ffff 	.word	0x0f00ffff
 80026a8:	0000c004 	.word	0x0000c004

080026ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b092      	sub	sp, #72	; 0x48
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b2:	2340      	movs	r3, #64	; 0x40
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	0018      	movs	r0, r3
 80026b8:	2308      	movs	r3, #8
 80026ba:	001a      	movs	r2, r3
 80026bc:	2100      	movs	r1, #0
 80026be:	f005 f931 	bl	8007924 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c2:	2324      	movs	r3, #36	; 0x24
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	0018      	movs	r0, r3
 80026c8:	231c      	movs	r3, #28
 80026ca:	001a      	movs	r2, r3
 80026cc:	2100      	movs	r1, #0
 80026ce:	f005 f929 	bl	8007924 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	0018      	movs	r0, r3
 80026d6:	2320      	movs	r3, #32
 80026d8:	001a      	movs	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f005 f922 	bl	8007924 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <MX_TIM1_Init+0x120>)
 80026e2:	4a3b      	ldr	r2, [pc, #236]	; (80027d0 <MX_TIM1_Init+0x124>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <MX_TIM1_Init+0x120>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <MX_TIM1_Init+0x120>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7500;
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <MX_TIM1_Init+0x120>)
 80026f4:	4a37      	ldr	r2, [pc, #220]	; (80027d4 <MX_TIM1_Init+0x128>)
 80026f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <MX_TIM1_Init+0x120>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 90;
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <MX_TIM1_Init+0x120>)
 8002700:	225a      	movs	r2, #90	; 0x5a
 8002702:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <MX_TIM1_Init+0x120>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <MX_TIM1_Init+0x120>)
 800270c:	0018      	movs	r0, r3
 800270e:	f004 fb2f 	bl	8006d70 <HAL_TIM_PWM_Init>
 8002712:	1e03      	subs	r3, r0, #0
 8002714:	d001      	beq.n	800271a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002716:	f000 fa45 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2140      	movs	r1, #64	; 0x40
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002728:	187a      	adds	r2, r7, r1
 800272a:	4b28      	ldr	r3, [pc, #160]	; (80027cc <MX_TIM1_Init+0x120>)
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f005 f808 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d001      	beq.n	800273c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002738:	f000 fa34 	bl	8002ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800273c:	2124      	movs	r1, #36	; 0x24
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2260      	movs	r2, #96	; 0x60
 8002742:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse =7500/2;//7500/2 is the proper, it is slow but is not stutterong
 8002744:	187b      	adds	r3, r7, r1
 8002746:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <MX_TIM1_Init+0x12c>)
 8002748:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002768:	1879      	adds	r1, r7, r1
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <MX_TIM1_Init+0x120>)
 800276c:	2200      	movs	r2, #0
 800276e:	0018      	movs	r0, r3
 8002770:	f004 fc82 	bl	8007078 <HAL_TIM_PWM_ConfigChannel>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002778:	f000 fa14 	bl	8002ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	0192      	lsls	r2, r2, #6
 80027a0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	2200      	movs	r2, #0
 80027a6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027a8:	1d3a      	adds	r2, r7, #4
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <MX_TIM1_Init+0x120>)
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f005 f826 	bl	8007800 <HAL_TIMEx_ConfigBreakDeadTime>
 80027b4:	1e03      	subs	r3, r0, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80027b8:	f000 f9f4 	bl	8002ba4 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */



  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <MX_TIM1_Init+0x120>)
 80027be:	0018      	movs	r0, r3
 80027c0:	f001 f8ca 	bl	8003958 <HAL_TIM_MspPostInit>

}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b012      	add	sp, #72	; 0x48
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200001a0 	.word	0x200001a0
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	00001d4c 	.word	0x00001d4c
 80027d8:	00000ea6 	.word	0x00000ea6

080027dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_DMA_Init+0x38>)
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <MX_DMA_Init+0x38>)
 80027e8:	2101      	movs	r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	615a      	str	r2, [r3, #20]
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_DMA_Init+0x38>)
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2009      	movs	r0, #9
 8002800:	f001 fd6c 	bl	80042dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8002804:	2009      	movs	r0, #9
 8002806:	f001 fd7e 	bl	8004306 <HAL_NVIC_EnableIRQ>

}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40021000 	.word	0x40021000

08002818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281e:	240c      	movs	r4, #12
 8002820:	193b      	adds	r3, r7, r4
 8002822:	0018      	movs	r0, r3
 8002824:	2314      	movs	r3, #20
 8002826:	001a      	movs	r2, r3
 8002828:	2100      	movs	r1, #0
 800282a:	f005 f87b 	bl	8007924 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <MX_GPIO_Init+0x15c>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <MX_GPIO_Init+0x15c>)
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	0309      	lsls	r1, r1, #12
 8002838:	430a      	orrs	r2, r1
 800283a:	615a      	str	r2, [r3, #20]
 800283c:	4b4d      	ldr	r3, [pc, #308]	; (8002974 <MX_GPIO_Init+0x15c>)
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	031b      	lsls	r3, r3, #12
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <MX_GPIO_Init+0x15c>)
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	4b49      	ldr	r3, [pc, #292]	; (8002974 <MX_GPIO_Init+0x15c>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0289      	lsls	r1, r1, #10
 8002854:	430a      	orrs	r2, r1
 8002856:	615a      	str	r2, [r3, #20]
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <MX_GPIO_Init+0x15c>)
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	029b      	lsls	r3, r3, #10
 8002860:	4013      	ands	r3, r2
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <MX_GPIO_Init+0x15c>)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	4b42      	ldr	r3, [pc, #264]	; (8002974 <MX_GPIO_Init+0x15c>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	02c9      	lsls	r1, r1, #11
 8002870:	430a      	orrs	r2, r1
 8002872:	615a      	str	r2, [r3, #20]
 8002874:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <MX_GPIO_Init+0x15c>)
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	02db      	lsls	r3, r3, #11
 800287c:	4013      	ands	r3, r2
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002882:	2340      	movs	r3, #64	; 0x40
 8002884:	33ff      	adds	r3, #255	; 0xff
 8002886:	483c      	ldr	r0, [pc, #240]	; (8002978 <MX_GPIO_Init+0x160>)
 8002888:	2200      	movs	r2, #0
 800288a:	0019      	movs	r1, r3
 800288c:	f002 f863 	bl	8004956 <HAL_GPIO_WritePin>
	                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 8002890:	2390      	movs	r3, #144	; 0x90
 8002892:	05db      	lsls	r3, r3, #23
 8002894:	2200      	movs	r2, #0
 8002896:	2148      	movs	r1, #72	; 0x48
 8002898:	0018      	movs	r0, r3
 800289a:	f002 f85c 	bl	8004956 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PC0 PC1 PC2 PC3
	                           PC4 PC5 PC8 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	2240      	movs	r2, #64	; 0x40
 80028a2:	32ff      	adds	r2, #255	; 0xff
 80028a4:	601a      	str	r2, [r3, #0]
	                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	2201      	movs	r2, #1
 80028aa:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <MX_GPIO_Init+0x160>)
 80028bc:	0019      	movs	r1, r3
 80028be:	0010      	movs	r0, r2
 80028c0:	f001 feb4 	bl	800462c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA3 PA6 */
	  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	2248      	movs	r2, #72	; 0x48
 80028c8:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	2201      	movs	r2, #1
 80028ce:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	193a      	adds	r2, r7, r4
 80028de:	2390      	movs	r3, #144	; 0x90
 80028e0:	05db      	lsls	r3, r3, #23
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f001 fea1 	bl	800462c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB2 PB3 PB4 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80028ea:	0021      	movs	r1, r4
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	221c      	movs	r2, #28
 80028f0:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2288      	movs	r2, #136	; 0x88
 80028f6:	0352      	lsls	r2, r2, #13
 80028f8:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	000c      	movs	r4, r1
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	193b      	adds	r3, r7, r4
 8002904:	4a1d      	ldr	r2, [pc, #116]	; (800297c <MX_GPIO_Init+0x164>)
 8002906:	0019      	movs	r1, r3
 8002908:	0010      	movs	r0, r2
 800290a:	f001 fe8f 	bl	800462c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PC6 PC7 */
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	22c0      	movs	r2, #192	; 0xc0
 8002912:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	193b      	adds	r3, r7, r4
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002920:	193b      	adds	r3, r7, r4
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <MX_GPIO_Init+0x160>)
 8002924:	0019      	movs	r1, r3
 8002926:	0010      	movs	r0, r2
 8002928:	f001 fe80 	bl	800462c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PB5 */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800292c:	0021      	movs	r1, r4
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2220      	movs	r2, #32
 8002932:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2200      	movs	r2, #0
 8002938:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	187b      	adds	r3, r7, r1
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <MX_GPIO_Init+0x164>)
 8002944:	0019      	movs	r1, r3
 8002946:	0010      	movs	r0, r2
 8002948:	f001 fe70 	bl	800462c <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	2006      	movs	r0, #6
 8002952:	f001 fcc3 	bl	80042dc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002956:	2006      	movs	r0, #6
 8002958:	f001 fcd5 	bl	8004306 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	2007      	movs	r0, #7
 8002962:	f001 fcbb 	bl	80042dc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002966:	2007      	movs	r0, #7
 8002968:	f001 fccd 	bl	8004306 <HAL_NVIC_EnableIRQ>

	}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b009      	add	sp, #36	; 0x24
 8002972:	bd90      	pop	{r4, r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	48000800 	.word	0x48000800
 800297c:	48000400 	.word	0x48000400

08002980 <HAL_GPIO_EXTI_Callback>:
{
	return (double)0.5;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	0002      	movs	r2, r0
 8002988:	1dbb      	adds	r3, r7, #6
 800298a:	801a      	strh	r2, [r3, #0]
	curr = HAL_GetTick();
 800298c:	f001 f9a2 	bl	8003cd4 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002994:	601a      	str	r2, [r3, #0]
	UNUSED(GPIO_Pin);
	if((GPIO_Pin == 4) && (curr - prev > 200)) //Left button
 8002996:	1dbb      	adds	r3, r7, #6
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d10c      	bne.n	80029b8 <HAL_GPIO_EXTI_Callback+0x38>
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x8c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x90>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2bc8      	cmp	r3, #200	; 0xc8
 80029aa:	d905      	bls.n	80029b8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		move_left();//move left
 80029ac:	f000 fa62 	bl	8002e74 <move_left>
		prev = curr;
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x8c>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x90>)
 80029b6:	601a      	str	r2, [r3, #0]
	}
	if((GPIO_Pin == 8) && (curr - prev > 200)) //select button
 80029b8:	1dbb      	adds	r3, r7, #6
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d10f      	bne.n	80029e0 <HAL_GPIO_EXTI_Callback+0x60>
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x8c>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x90>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2bc8      	cmp	r3, #200	; 0xc8
 80029cc:	d908      	bls.n	80029e0 <HAL_GPIO_EXTI_Callback+0x60>
		{
			display_select(currentSelectIndex); //select option
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x94>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 fba8 	bl	8003128 <display_select>
			prev = curr;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x8c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x90>)
 80029de:	601a      	str	r2, [r3, #0]
		}
	if((GPIO_Pin == 16) && (curr - prev > 200)) // right button
 80029e0:	1dbb      	adds	r3, r7, #6
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d10c      	bne.n	8002a02 <HAL_GPIO_EXTI_Callback+0x82>
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x8c>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x90>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2bc8      	cmp	r3, #200	; 0xc8
 80029f4:	d905      	bls.n	8002a02 <HAL_GPIO_EXTI_Callback+0x82>
	{
		move_right();//move right
 80029f6:	f000 fa07 	bl	8002e08 <move_right>
		prev = curr;
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x8c>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x90>)
 8002a00:	601a      	str	r2, [r3, #0]
	}
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	2000011c 	.word	0x2000011c
 8002a10:	20000118 	.word	0x20000118
 8002a14:	20000108 	.word	0x20000108

08002a18 <battery>:
  for(int i = 0; i < 5; i++)
	  LCD_Draw4digit(i, 0, i, adc_buf);
  for(int i = 5; i < 10; i++)
  	  LCD_Draw4digit(i, 1, i-5, adc_buf);
}
void battery() {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, 100, batbuf, I2C_BUF_LEN);
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <battery+0x18>)
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <battery+0x1c>)
 8002a20:	2304      	movs	r3, #4
 8002a22:	2164      	movs	r1, #100	; 0x64
 8002a24:	f002 f866 	bl	8004af4 <HAL_I2C_Master_Receive_IT>
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	20000190 	.word	0x20000190
 8002a34:	20000144 	.word	0x20000144

08002a38 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e008      	b.n	8002a58 <HAL_I2C_MasterRxCpltCallback+0x20>
		LCD_Draw4digit(i, 0, i, batbuf);
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f000 f80d 	bl	8002a6c <LCD_Draw4digit>
	for(int i = 0; i < 4; i++)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3301      	adds	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	ddf3      	ble.n	8002a46 <HAL_I2C_MasterRxCpltCallback+0xe>
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b004      	add	sp, #16
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000190 	.word	0x20000190

08002a6c <LCD_Draw4digit>:
void LCD_Draw4digit(int idx, int side, int row, uint8_t *buff)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b08d      	sub	sp, #52	; 0x34
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
	tmp =0;
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <LCD_Draw4digit+0xec>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
	int renew = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
	int fact = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
	LCD_DrawString(60 ,80,  YELLOW, BLUE,"Finished samples", 16, 0);
 8002a88:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <LCD_Draw4digit+0xf0>)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	2310      	movs	r3, #16
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <LCD_Draw4digit+0xf4>)
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	231f      	movs	r3, #31
 8002a98:	2150      	movs	r1, #80	; 0x50
 8002a9a:	203c      	movs	r0, #60	; 0x3c
 8002a9c:	f7ff fbe2 	bl	8002264 <LCD_DrawString>
	for(int i = 0; i < 4; i++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e04f      	b.n	8002b46 <LCD_Draw4digit+0xda>
	{
		fact = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
		for(int j = i ; j < 3; j++)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	e008      	b.n	8002ac2 <LCD_Draw4digit+0x56>
		  {
			  fact = fact * 10;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	0013      	movs	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	189b      	adds	r3, r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	61bb      	str	r3, [r7, #24]
		for(int j = i ; j < 3; j++)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	ddf3      	ble.n	8002ab0 <LCD_Draw4digit+0x44>
		  }
		tmp = (buff[idx]- renew)/fact ;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7fd fba7 	bl	800022c <__divsi3>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <LCD_Draw4digit+0xec>)
 8002ae4:	601a      	str	r2, [r3, #0]

		LCD_DrawChar(60 +i*10 + side * 100,100 + row*20,YELLOW, BLUE,tmp+48, 16, 0);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	1c1a      	adds	r2, r3, #0
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	18d3      	adds	r3, r2, r3
 8002af0:	18db      	adds	r3, r3, r3
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2164      	movs	r1, #100	; 0x64
 8002afa:	434b      	muls	r3, r1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	18d3      	adds	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	333c      	adds	r3, #60	; 0x3c
 8002b04:	b298      	uxth	r0, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2214      	movs	r2, #20
 8002b0c:	4353      	muls	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3364      	adds	r3, #100	; 0x64
 8002b12:	b299      	uxth	r1, r3
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <LCD_Draw4digit+0xec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	3330      	adds	r3, #48	; 0x30
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	4c0f      	ldr	r4, [pc, #60]	; (8002b5c <LCD_Draw4digit+0xf0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	9202      	str	r2, [sp, #8]
 8002b24:	2210      	movs	r2, #16
 8002b26:	9201      	str	r2, [sp, #4]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	0022      	movs	r2, r4
 8002b2e:	f7ff fa83 	bl	8002038 <LCD_DrawChar>
		renew +=  tmp * fact;
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <LCD_Draw4digit+0xec>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4353      	muls	r3, r2
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	18d3      	adds	r3, r2, r3
 8002b3e:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 4; i++)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	ddac      	ble.n	8002aa6 <LCD_Draw4digit+0x3a>
	  }

}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b009      	add	sp, #36	; 0x24
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	20000140 	.word	0x20000140
 8002b5c:	0000ffe0 	.word	0x0000ffe0
 8002b60:	080089d0 	.word	0x080089d0

08002b64 <startmotor>:
{
	LCD_DrawString(80 ,80,  YELLOW, BLUE,"Take samples", 16, 0);
	HAL_ADC_Start_DMA(&hadc, adc_buf, ADC_BUF_LEN);
}
void startmotor()
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <startmotor+0x14>)
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f004 f94f 	bl	8006e10 <HAL_TIM_PWM_Start>
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200001a0 	.word	0x200001a0

08002b7c <stopmotor>:
void stopmotor()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <stopmotor+0x20>)
 8002b82:	2100      	movs	r1, #0
 8002b84:	0018      	movs	r0, r3
 8002b86:	f004 f9fb 	bl	8006f80 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <stopmotor+0x24>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2101      	movs	r1, #1
 8002b90:	0018      	movs	r0, r3
 8002b92:	f001 fee0 	bl	8004956 <HAL_GPIO_WritePin>
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200001a0 	.word	0x200001a0
 8002ba0:	48000800 	.word	0x48000800

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bac:	e7fe      	b.n	8002bac <Error_Handler+0x8>
	...

08002bb0 <initialize>:
uint8_t pressHistory[3] = {0,0,0};
extern const Picture *image;
struct display *currDisplay;

void initialize()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
	struct display *home = malloc(sizeof(struct display));
 8002bb6:	2020      	movs	r0, #32
 8002bb8:	f004 feaa 	bl	8007910 <malloc>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	61fb      	str	r3, [r7, #28]
	struct display *info = malloc(sizeof(struct display));
 8002bc0:	2020      	movs	r0, #32
 8002bc2:	f004 fea5 	bl	8007910 <malloc>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
	struct display *tune = malloc(sizeof(struct display));
 8002bca:	2020      	movs	r0, #32
 8002bcc:	f004 fea0 	bl	8007910 <malloc>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	617b      	str	r3, [r7, #20]
	struct display *manual = malloc(sizeof(struct display));
 8002bd4:	2020      	movs	r0, #32
 8002bd6:	f004 fe9b 	bl	8007910 <malloc>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	613b      	str	r3, [r7, #16]
	struct display *peg = malloc(sizeof(struct display));
 8002bde:	2020      	movs	r0, #32
 8002be0:	f004 fe96 	bl	8007910 <malloc>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]
	struct display *rotate = malloc(sizeof(struct display));
 8002be8:	2020      	movs	r0, #32
 8002bea:	f004 fe91 	bl	8007910 <malloc>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	60bb      	str	r3, [r7, #8]
	struct display *Auto = malloc(sizeof(struct display));
 8002bf2:	2020      	movs	r0, #32
 8002bf4:	f004 fe8c 	bl	8007910 <malloc>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	607b      	str	r3, [r7, #4]
	struct display *bat = malloc(sizeof(struct display));
 8002bfc:	2020      	movs	r0, #32
 8002bfe:	f004 fe87 	bl	8007910 <malloc>
 8002c02:	0003      	movs	r3, r0
 8002c04:	603b      	str	r3, [r7, #0]

	home->ttl = menu_home;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4a5f      	ldr	r2, [pc, #380]	; (8002d88 <initialize+0x1d8>)
 8002c0a:	601a      	str	r2, [r3, #0]
	home->scrollmax = 3;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	60da      	str	r2, [r3, #12]
	home->selectionmax = 3;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2203      	movs	r2, #3
 8002c16:	611a      	str	r2, [r3, #16]
	home->backout = NULL;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
	home->nextsel = NULL;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
	home->childsel = info;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	619a      	str	r2, [r3, #24]
	home->identity = 'h';
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	2268      	movs	r2, #104	; 0x68
 8002c2e:	711a      	strb	r2, [r3, #4]
	home->selection = menu;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <initialize+0x1dc>)
 8002c34:	609a      	str	r2, [r3, #8]
	//info
	info->scrollmax = 2;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	60da      	str	r2, [r3, #12]
	info->selectionmax = 2;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	611a      	str	r2, [r3, #16]
	info->ttl = Infomode;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <initialize+0x1e0>)
 8002c46:	601a      	str	r2, [r3, #0]
	info->backout = home;
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	61da      	str	r2, [r3, #28]
	info->nextsel = tune;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	615a      	str	r2, [r3, #20]
	info->childsel = bat;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	619a      	str	r2, [r3, #24]
	info->identity = 'i';
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2269      	movs	r2, #105	; 0x69
 8002c5e:	711a      	strb	r2, [r3, #4]
	info->selection = Info;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4a4c      	ldr	r2, [pc, #304]	; (8002d94 <initialize+0x1e4>)
 8002c64:	609a      	str	r2, [r3, #8]

	//info
	bat->scrollmax = 0;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]
	bat->selectionmax = 0;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
	bat->ttl = battery;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	4a48      	ldr	r2, [pc, #288]	; (8002d98 <initialize+0x1e8>)
 8002c76:	601a      	str	r2, [r3, #0]
	bat->backout = NULL;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
	bat->nextsel = NULL;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
	bat->childsel = NULL;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
	bat->identity = 'b';
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2262      	movs	r2, #98	; 0x62
 8002c8e:	711a      	strb	r2, [r3, #4]
	bat->selection = Info;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4a40      	ldr	r2, [pc, #256]	; (8002d94 <initialize+0x1e4>)
 8002c94:	609a      	str	r2, [r3, #8]
	//Tune
	tune->scrollmax = 3;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	60da      	str	r2, [r3, #12]
	tune->selectionmax = 7;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	611a      	str	r2, [r3, #16]
	tune->ttl = Tunemode;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <initialize+0x1ec>)
 8002ca6:	601a      	str	r2, [r3, #0]
	tune->backout = home;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	61da      	str	r2, [r3, #28]
	tune->childsel = peg;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	619a      	str	r2, [r3, #24]
	tune->nextsel = manual;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	615a      	str	r2, [r3, #20]
	tune->identity = 't';
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2274      	movs	r2, #116	; 0x74
 8002cbe:	711a      	strb	r2, [r3, #4]
	tune->selection = Tune;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <initialize+0x1f0>)
 8002cc4:	609a      	str	r2, [r3, #8]

	//Peg
	peg->scrollmax = 3;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	60da      	str	r2, [r3, #12]
	peg->selectionmax = 3;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	611a      	str	r2, [r3, #16]
	peg->ttl = pegDisplay;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <initialize+0x1f4>)
 8002cd6:	601a      	str	r2, [r3, #0]
	peg->backout = tune;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	61da      	str	r2, [r3, #28]
	peg->childsel = Auto;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
	peg->nextsel = NULL;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	615a      	str	r2, [r3, #20]
	peg->identity = 'p';
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2270      	movs	r2, #112	; 0x70
 8002cee:	711a      	strb	r2, [r3, #4]
	peg->selection = Peg;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <initialize+0x1f8>)
 8002cf4:	609a      	str	r2, [r3, #8]

	//Auto
	Auto->scrollmax = 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	60da      	str	r2, [r3, #12]
	Auto->selectionmax = 0;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
	Auto->ttl = autoRotate;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <initialize+0x1fc>)
 8002d06:	601a      	str	r2, [r3, #0]
	Auto->backout = peg;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	61da      	str	r2, [r3, #28]
	Auto->childsel = NULL;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
	Auto->nextsel = NULL;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	615a      	str	r2, [r3, #20]
	Auto->identity = 'a';
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2261      	movs	r2, #97	; 0x61
 8002d1e:	711a      	strb	r2, [r3, #4]

	//Manual
	manual->scrollmax = 3;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2203      	movs	r2, #3
 8002d24:	60da      	str	r2, [r3, #12]
	manual->selectionmax = 3;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2203      	movs	r2, #3
 8002d2a:	611a      	str	r2, [r3, #16]
	manual->ttl = Infomode;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <initialize+0x1e0>)
 8002d30:	601a      	str	r2, [r3, #0]
	manual->backout = home;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	61da      	str	r2, [r3, #28]
	manual->childsel = rotate;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	619a      	str	r2, [r3, #24]
	manual->nextsel = info;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	615a      	str	r2, [r3, #20]
	manual->identity = 'm';
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	226d      	movs	r2, #109	; 0x6d
 8002d48:	711a      	strb	r2, [r3, #4]
	manual->selection = Manual;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4a18      	ldr	r2, [pc, #96]	; (8002db0 <initialize+0x200>)
 8002d4e:	609a      	str	r2, [r3, #8]

	//backout
	rotate->ttl = manualRotate;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <initialize+0x204>)
 8002d54:	601a      	str	r2, [r3, #0]
	rotate->scrollmax = 0;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
	rotate->selectionmax = 0;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
	rotate->backout = NULL;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
	rotate->nextsel = NULL;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	615a      	str	r2, [r3, #20]
	rotate->childsel = NULL;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
	rotate->identity = 'r';
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2272      	movs	r2, #114	; 0x72
 8002d78:	711a      	strb	r2, [r3, #4]
	//back->selection = null;

	currDisplay = home;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <initialize+0x208>)
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	601a      	str	r2, [r3, #0]
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b008      	add	sp, #32
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	080032fd 	.word	0x080032fd
 8002d94:	20000034 	.word	0x20000034
 8002d98:	08002a19 	.word	0x08002a19
 8002d9c:	08003475 	.word	0x08003475
 8002da0:	2000000c 	.word	0x2000000c
 8002da4:	08003541 	.word	0x08003541
 8002da8:	2000003c 	.word	0x2000003c
 8002dac:	08003349 	.word	0x08003349
 8002db0:	20000028 	.word	0x20000028
 8002db4:	08003329 	.word	0x08003329
 8002db8:	200002f8 	.word	0x200002f8

08002dbc <menu_home>:
struct display *currDisplay;
void menu_home()
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af04      	add	r7, sp, #16
LCD_DrawString(25,200,  YELLOW, BLACK, menu[0], 16, 0);
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <menu_home+0x40>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	490e      	ldr	r1, [pc, #56]	; (8002e00 <menu_home+0x44>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	9202      	str	r2, [sp, #8]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	9201      	str	r2, [sp, #4]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	000a      	movs	r2, r1
 8002dd6:	21c8      	movs	r1, #200	; 0xc8
 8002dd8:	2019      	movs	r0, #25
 8002dda:	f7ff fa43 	bl	8002264 <LCD_DrawString>
LCD_DrawString(80 ,40,  YELLOW, BLUE,"Home Menu", 16, 0);
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <menu_home+0x44>)
 8002de0:	2300      	movs	r3, #0
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	2310      	movs	r3, #16
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <menu_home+0x48>)
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	231f      	movs	r3, #31
 8002dee:	2128      	movs	r1, #40	; 0x28
 8002df0:	2050      	movs	r0, #80	; 0x50
 8002df2:	f7ff fa37 	bl	8002264 <LCD_DrawString>
}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	0000ffe0 	.word	0x0000ffe0
 8002e04:	08008ab4 	.word	0x08008ab4

08002e08 <move_right>:
void move_right()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	if (currentScrollIndex == (currDisplay->scrollmax -1)) {
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <move_right+0x58>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <move_right+0x5c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d10a      	bne.n	8002e32 <move_right+0x2a>
					//if highlighted choice is very last choice, wrap around to first choice
					display_move(currentScrollIndex +1, currentSelectIndex+1,2);
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <move_right+0x5c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1c58      	adds	r0, r3, #1
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <move_right+0x60>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	2202      	movs	r2, #2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	f000 f852 	bl	8002ed4 <display_move>
 8002e30:	e009      	b.n	8002e46 <move_right+0x3e>
				} else {
					//else just highlight selection to previous choice
					display_move(currentScrollIndex +1, currentSelectIndex+1,0);
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <move_right+0x5c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	1c58      	adds	r0, r3, #1
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <move_right+0x60>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	2200      	movs	r2, #0
 8002e40:	0019      	movs	r1, r3
 8002e42:	f000 f847 	bl	8002ed4 <display_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4808      	ldr	r0, [pc, #32]	; (8002e6c <move_right+0x64>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	0019      	movs	r1, r3
 8002e50:	f001 fd81 	bl	8004956 <HAL_GPIO_WritePin>
				goright = 0; // reset right indication flag
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <move_right+0x68>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200002f8 	.word	0x200002f8
 8002e64:	2000010c 	.word	0x2000010c
 8002e68:	20000108 	.word	0x20000108
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	20000114 	.word	0x20000114

08002e74 <move_left>:
void move_left()
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	if (currentScrollIndex == 0) {
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <move_left+0x50>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <move_left+0x22>
					//if highlighted choice is very first choice, wrap around to last choice
					display_move(currentScrollIndex -1, currentSelectIndex-1,1);
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <move_left+0x50>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1e58      	subs	r0, r3, #1
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <move_left+0x54>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	0019      	movs	r1, r3
 8002e90:	f000 f820 	bl	8002ed4 <display_move>
 8002e94:	e009      	b.n	8002eaa <move_left+0x36>

				} else {
					//else just highlight selection left to previous choice
					display_move(currentScrollIndex -1, currentSelectIndex-1,0);
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <move_left+0x50>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <move_left+0x54>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	f000 f815 	bl	8002ed4 <display_move>
				}
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4807      	ldr	r0, [pc, #28]	; (8002ecc <move_left+0x58>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	f001 fd4f 	bl	8004956 <HAL_GPIO_WritePin>
				goleft = 0; //reset left indication flag
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <move_left+0x5c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	2000010c 	.word	0x2000010c
 8002ec8:	20000108 	.word	0x20000108
 8002ecc:	48000800 	.word	0x48000800
 8002ed0:	20000110 	.word	0x20000110

08002ed4 <display_move>:
void display_move(int scrollIndex, int selectIndex, int enable) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af04      	add	r7, sp, #16
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
	//just unhighlighting previous choice and highlighting current choice
	if((currDisplay->selectionmax > 3) && (enable > 0))
 8002ee0:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <display_move+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	dc00      	bgt.n	8002eec <display_move+0x18>
 8002eea:	e0a8      	b.n	800303e <display_move+0x16a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	dc00      	bgt.n	8002ef4 <display_move+0x20>
 8002ef2:	e0a4      	b.n	800303e <display_move+0x16a>
	{
		if(enable == 1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d150      	bne.n	8002f9c <display_move+0xc8>
		{
			if(selectIndex < 0)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da04      	bge.n	8002f0a <display_move+0x36>
				selectIndex = currDisplay->selectionmax-1;
 8002f00:	4b85      	ldr	r3, [pc, #532]	; (8003118 <display_move+0x244>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
			LCD_DrawString(25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 8002f0a:	4b83      	ldr	r3, [pc, #524]	; (8003118 <display_move+0x244>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4980      	ldr	r1, [pc, #512]	; (800311c <display_move+0x248>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	9202      	str	r2, [sp, #8]
 8002f1e:	2210      	movs	r2, #16
 8002f20:	9201      	str	r2, [sp, #4]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2300      	movs	r3, #0
 8002f26:	000a      	movs	r2, r1
 8002f28:	21c8      	movs	r1, #200	; 0xc8
 8002f2a:	2019      	movs	r0, #25
 8002f2c:	f7ff f99a 	bl	8002264 <LCD_DrawString>
			int idx = selectIndex;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61fb      	str	r3, [r7, #28]
			for(int i = 1; i < 3; i++)
 8002f34:	2301      	movs	r3, #1
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e02a      	b.n	8002f90 <display_move+0xbc>
				{idx++;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
				if(idx >= currDisplay->selectionmax)
 8002f40:	4b75      	ldr	r3, [pc, #468]	; (8003118 <display_move+0x244>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	db01      	blt.n	8002f50 <display_move+0x7c>
					idx = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
				LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, currDisplay->selection[idx], 16, 0);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	1c1a      	adds	r2, r3, #0
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	1c1a      	adds	r2, r3, #0
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3319      	adds	r3, #25
 8002f64:	b298      	uxth	r0, r3
 8002f66:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <display_move+0x244>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	18d3      	adds	r3, r2, r3
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4969      	ldr	r1, [pc, #420]	; (800311c <display_move+0x248>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	9202      	str	r2, [sp, #8]
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	9201      	str	r2, [sp, #4]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	231f      	movs	r3, #31
 8002f82:	000a      	movs	r2, r1
 8002f84:	21c8      	movs	r1, #200	; 0xc8
 8002f86:	f7ff f96d 	bl	8002264 <LCD_DrawString>
			for(int i = 1; i < 3; i++)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	ddd1      	ble.n	8002f3a <display_move+0x66>
				}
			scrollIndex = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
		if(enable == 1)
 8002f9a:	e0b2      	b.n	8003102 <display_move+0x22e>
		}
		else
		{
			if(selectIndex >= currDisplay->selectionmax)
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <display_move+0x244>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	db01      	blt.n	8002fac <display_move+0xd8>
				selectIndex = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
			LCD_DrawString(75*2 +25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 8002fac:	4b5a      	ldr	r3, [pc, #360]	; (8003118 <display_move+0x244>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	18d3      	adds	r3, r2, r3
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4958      	ldr	r1, [pc, #352]	; (800311c <display_move+0x248>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	9202      	str	r2, [sp, #8]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	000a      	movs	r2, r1
 8002fca:	21c8      	movs	r1, #200	; 0xc8
 8002fcc:	20af      	movs	r0, #175	; 0xaf
 8002fce:	f7ff f949 	bl	8002264 <LCD_DrawString>
			int idx = selectIndex;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	617b      	str	r3, [r7, #20]
			for(int i = 1; i >= 0; i--)
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e02a      	b.n	8003032 <display_move+0x15e>
			{idx--;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
			if(idx < 0)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da04      	bge.n	8002ff2 <display_move+0x11e>
				idx = currDisplay->selectionmax-1;
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <display_move+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
			LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, currDisplay->selection[idx], 16, 0);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	1c1a      	adds	r2, r3, #0
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	18d3      	adds	r3, r2, r3
 8002ffc:	1c1a      	adds	r2, r3, #0
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	3319      	adds	r3, #25
 8003006:	b298      	uxth	r0, r3
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <display_move+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4941      	ldr	r1, [pc, #260]	; (800311c <display_move+0x248>)
 8003018:	2200      	movs	r2, #0
 800301a:	9202      	str	r2, [sp, #8]
 800301c:	2210      	movs	r2, #16
 800301e:	9201      	str	r2, [sp, #4]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	231f      	movs	r3, #31
 8003024:	000a      	movs	r2, r1
 8003026:	21c8      	movs	r1, #200	; 0xc8
 8003028:	f7ff f91c 	bl	8002264 <LCD_DrawString>
			for(int i = 1; i >= 0; i--)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	3b01      	subs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	dad1      	bge.n	8002fdc <display_move+0x108>
			}
			scrollIndex = 2;
 8003038:	2302      	movs	r3, #2
 800303a:	60fb      	str	r3, [r7, #12]
		if(enable == 1)
 800303c:	e061      	b.n	8003102 <display_move+0x22e>
		}
	}
	else
	{
	if(enable == 1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10a      	bne.n	800305a <display_move+0x186>
		{selectIndex = currDisplay->selectionmax-1; scrollIndex = currDisplay->scrollmax-1;}
 8003044:	4b34      	ldr	r3, [pc, #208]	; (8003118 <display_move+0x244>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	3b01      	subs	r3, #1
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	4b32      	ldr	r3, [pc, #200]	; (8003118 <display_move+0x244>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	3b01      	subs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e006      	b.n	8003068 <display_move+0x194>
	else if(enable == 2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d103      	bne.n	8003068 <display_move+0x194>
		{selectIndex = 0; scrollIndex = 0;}
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
	if(selectIndex > currDisplay->selectionmax-1)
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <display_move+0x244>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	db02      	blt.n	800307a <display_move+0x1a6>
		selectIndex = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	e007      	b.n	800308a <display_move+0x1b6>
	else if(selectIndex < 0)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da04      	bge.n	800308a <display_move+0x1b6>
		selectIndex = currDisplay->selectionmax-1;
 8003080:	4b25      	ldr	r3, [pc, #148]	; (8003118 <display_move+0x244>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	3b01      	subs	r3, #1
 8003088:	60bb      	str	r3, [r7, #8]

	LCD_DrawString(75*scrollIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	b29b      	uxth	r3, r3
 800308e:	1c1a      	adds	r2, r3, #0
 8003090:	0092      	lsls	r2, r2, #2
 8003092:	18d3      	adds	r3, r2, r3
 8003094:	1c1a      	adds	r2, r3, #0
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	b29b      	uxth	r3, r3
 800309c:	3319      	adds	r3, #25
 800309e:	b298      	uxth	r0, r3
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <display_move+0x244>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	18d3      	adds	r3, r2, r3
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	491b      	ldr	r1, [pc, #108]	; (800311c <display_move+0x248>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	2210      	movs	r2, #16
 80030b6:	9201      	str	r2, [sp, #4]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	000a      	movs	r2, r1
 80030be:	21c8      	movs	r1, #200	; 0xc8
 80030c0:	f7ff f8d0 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(75*currentScrollIndex + 25,200,  YELLOW, BLUE, currDisplay->selection[currentSelectIndex], 16, 0);
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <display_move+0x24c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	1c1a      	adds	r2, r3, #0
 80030cc:	0092      	lsls	r2, r2, #2
 80030ce:	18d3      	adds	r3, r2, r3
 80030d0:	1c1a      	adds	r2, r3, #0
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3319      	adds	r3, #25
 80030da:	b298      	uxth	r0, r3
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <display_move+0x244>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <display_move+0x250>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	18d3      	adds	r3, r2, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	490b      	ldr	r1, [pc, #44]	; (800311c <display_move+0x248>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	9202      	str	r2, [sp, #8]
 80030f2:	2210      	movs	r2, #16
 80030f4:	9201      	str	r2, [sp, #4]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	231f      	movs	r3, #31
 80030fa:	000a      	movs	r2, r1
 80030fc:	21c8      	movs	r1, #200	; 0xc8
 80030fe:	f7ff f8b1 	bl	8002264 <LCD_DrawString>
	}
	currentSelectIndex = selectIndex;
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <display_move+0x250>)
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	601a      	str	r2, [r3, #0]
	currentScrollIndex = scrollIndex;
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <display_move+0x24c>)
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b008      	add	sp, #32
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	200002f8 	.word	0x200002f8
 800311c:	0000ffe0 	.word	0x0000ffe0
 8003120:	2000010c 	.word	0x2000010c
 8003124:	20000108 	.word	0x20000108

08003128 <display_select>:

void display_select(int selectIndex) {
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af04      	add	r7, sp, #16
 800312e:	6078      	str	r0, [r7, #4]
	//selection cases of where to go
	//highlight selected choice in red
    LCD_DrawString(75*currentScrollIndex + 25,200,  YELLOW, RED, currDisplay->selection[currentSelectIndex], 16, 0);
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <display_select+0x124>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	1c1a      	adds	r2, r3, #0
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	18d3      	adds	r3, r2, r3
 800313c:	1c1a      	adds	r2, r3, #0
 800313e:	0112      	lsls	r2, r2, #4
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	b29b      	uxth	r3, r3
 8003144:	3319      	adds	r3, #25
 8003146:	b298      	uxth	r0, r3
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <display_select+0x128>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <display_select+0x12c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	18d3      	adds	r3, r2, r3
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	22f8      	movs	r2, #248	; 0xf8
 800315a:	0212      	lsls	r2, r2, #8
 800315c:	4c3e      	ldr	r4, [pc, #248]	; (8003258 <display_select+0x130>)
 800315e:	2100      	movs	r1, #0
 8003160:	9102      	str	r1, [sp, #8]
 8003162:	2110      	movs	r1, #16
 8003164:	9101      	str	r1, [sp, #4]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	0013      	movs	r3, r2
 800316a:	0022      	movs	r2, r4
 800316c:	21c8      	movs	r1, #200	; 0xc8
 800316e:	f7ff f879 	bl	8002264 <LCD_DrawString>
    lastPressed = selectIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <display_select+0x134>)
 8003178:	701a      	strb	r2, [r3, #0]

    if((currentSelectIndex == 0) && (currDisplay->identity != 'h'))
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <display_select+0x12c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d113      	bne.n	80031aa <display_select+0x82>
 8003182:	4b33      	ldr	r3, [pc, #204]	; (8003250 <display_select+0x128>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	2b68      	cmp	r3, #104	; 0x68
 800318a:	d00e      	beq.n	80031aa <display_select+0x82>
    {//Tune mode is selected so go to tune display
    	currDisplay = currDisplay->backout;
 800318c:	4b30      	ldr	r3, [pc, #192]	; (8003250 <display_select+0x128>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <display_select+0x128>)
 8003194:	601a      	str	r2, [r3, #0]
    	LCD_Clear(BLUE);
 8003196:	201f      	movs	r0, #31
 8003198:	f7fe fe8e 	bl	8001eb8 <LCD_Clear>
    	resetSel();
 800319c:	f000 f860 	bl	8003260 <resetSel>
    	currDisplay->ttl();
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <display_select+0x128>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4798      	blx	r3
    	{
    		child->ttl();
    		LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
    	}
    }
}
 80031a8:	e04b      	b.n	8003242 <display_select+0x11a>
    else if(currDisplay->childsel != NULL)
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <display_select+0x128>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d046      	beq.n	8003242 <display_select+0x11a>
    	struct display * child = currDisplay->childsel;
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <display_select+0x128>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	60fb      	str	r3, [r7, #12]
    	int i = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
    	while((i < currentSelectIndex)&&(child->nextsel != NULL))
 80031c0:	e005      	b.n	80031ce <display_select+0xa6>
    		child = child->nextsel;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	60fb      	str	r3, [r7, #12]
    		i++;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
    	while((i < currentSelectIndex)&&(child->nextsel != NULL))
 80031ce:	4b21      	ldr	r3, [pc, #132]	; (8003254 <display_select+0x12c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	da03      	bge.n	80031e0 <display_select+0xb8>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <display_select+0x9a>
    	if(child->selectionmax > 0)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	dd0c      	ble.n	8003202 <display_select+0xda>
    		currDisplay = child;
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <display_select+0x128>)
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]
    		LCD_Clear(BLUE);
 80031ee:	201f      	movs	r0, #31
 80031f0:	f7fe fe62 	bl	8001eb8 <LCD_Clear>
    		currDisplay->ttl();
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <display_select+0x128>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4798      	blx	r3
    		resetSel();
 80031fc:	f000 f830 	bl	8003260 <resetSel>
}
 8003200:	e01f      	b.n	8003242 <display_select+0x11a>
    		child->ttl();
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4798      	blx	r3
    		LCD_DrawString(75*selectIndex + 25,200,  YELLOW, BLACK, currDisplay->selection[selectIndex], 16, 0);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	b29b      	uxth	r3, r3
 800320c:	1c1a      	adds	r2, r3, #0
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	1c1a      	adds	r2, r3, #0
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	b29b      	uxth	r3, r3
 800321a:	3319      	adds	r3, #25
 800321c:	b298      	uxth	r0, r3
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <display_select+0x128>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	18d3      	adds	r3, r2, r3
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	490a      	ldr	r1, [pc, #40]	; (8003258 <display_select+0x130>)
 800322e:	2200      	movs	r2, #0
 8003230:	9202      	str	r2, [sp, #8]
 8003232:	2210      	movs	r2, #16
 8003234:	9201      	str	r2, [sp, #4]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2300      	movs	r3, #0
 800323a:	000a      	movs	r2, r1
 800323c:	21c8      	movs	r1, #200	; 0xc8
 800323e:	f7ff f811 	bl	8002264 <LCD_DrawString>
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b005      	add	sp, #20
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	2000010c 	.word	0x2000010c
 8003250:	200002f8 	.word	0x200002f8
 8003254:	20000108 	.word	0x20000108
 8003258:	0000ffe0 	.word	0x0000ffe0
 800325c:	20000078 	.word	0x20000078

08003260 <resetSel>:
void resetSel()
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af04      	add	r7, sp, #16
	//LCD_Clear(BLUE);
	LCD_DrawString(25,200,  YELLOW, BLACK, (currDisplay->selection)[0], 16, 0);
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <resetSel+0x8c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4920      	ldr	r1, [pc, #128]	; (80032f0 <resetSel+0x90>)
 8003270:	2200      	movs	r2, #0
 8003272:	9202      	str	r2, [sp, #8]
 8003274:	2210      	movs	r2, #16
 8003276:	9201      	str	r2, [sp, #4]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	2300      	movs	r3, #0
 800327c:	000a      	movs	r2, r1
 800327e:	21c8      	movs	r1, #200	; 0xc8
 8003280:	2019      	movs	r0, #25
 8003282:	f7fe ffef 	bl	8002264 <LCD_DrawString>
	for (int i = 1; i < currDisplay->scrollmax; i++) {
 8003286:	2301      	movs	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	e01f      	b.n	80032cc <resetSel+0x6c>
			LCD_DrawString(75*i + 25,200,  YELLOW, BLUE, (currDisplay->selection)[i], 16, 0);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	b29b      	uxth	r3, r3
 8003290:	1c1a      	adds	r2, r3, #0
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	18d3      	adds	r3, r2, r3
 8003296:	1c1a      	adds	r2, r3, #0
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	b29b      	uxth	r3, r3
 800329e:	3319      	adds	r3, #25
 80032a0:	b298      	uxth	r0, r3
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <resetSel+0x8c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	18d3      	adds	r3, r2, r3
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	490f      	ldr	r1, [pc, #60]	; (80032f0 <resetSel+0x90>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	9202      	str	r2, [sp, #8]
 80032b6:	2210      	movs	r2, #16
 80032b8:	9201      	str	r2, [sp, #4]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	231f      	movs	r3, #31
 80032be:	000a      	movs	r2, r1
 80032c0:	21c8      	movs	r1, #200	; 0xc8
 80032c2:	f7fe ffcf 	bl	8002264 <LCD_DrawString>
	for (int i = 1; i < currDisplay->scrollmax; i++) {
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3301      	adds	r3, #1
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	4b07      	ldr	r3, [pc, #28]	; (80032ec <resetSel+0x8c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbd9      	blt.n	800328c <resetSel+0x2c>
		}
	currentScrollIndex = 0;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <resetSel+0x94>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
	currentSelectIndex = 0;
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <resetSel+0x98>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	200002f8 	.word	0x200002f8
 80032f0:	0000ffe0 	.word	0x0000ffe0
 80032f4:	2000010c 	.word	0x2000010c
 80032f8:	20000108 	.word	0x20000108

080032fc <Infomode>:
void Infomode()
{//Info mode that displays product usage and info
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af04      	add	r7, sp, #16
	LCD_DrawString(25 ,50,  YELLOW, BLUE,"Info will be displayed", 16, 0);
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <Infomode+0x24>)
 8003304:	2300      	movs	r3, #0
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	2310      	movs	r3, #16
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <Infomode+0x28>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	231f      	movs	r3, #31
 8003312:	2132      	movs	r1, #50	; 0x32
 8003314:	2019      	movs	r0, #25
 8003316:	f7fe ffa5 	bl	8002264 <LCD_DrawString>
	//currently nothing is displayed for now
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0000ffe0 	.word	0x0000ffe0
 8003324:	08008ac0 	.word	0x08008ac0

08003328 <manualRotate>:
	LCD_DrawString(25 ,75,  YELLOW, BLUE,"Re-String Purpose", 16, 0);

}

void manualRotate()
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	stepperMotor(currentSelectIndex, 7500, 90, 1);
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <manualRotate+0x18>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	4904      	ldr	r1, [pc, #16]	; (8003344 <manualRotate+0x1c>)
 8003332:	2301      	movs	r3, #1
 8003334:	225a      	movs	r2, #90	; 0x5a
 8003336:	f000 f817 	bl	8003368 <stepperMotor>
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000108 	.word	0x20000108
 8003344:	00001d4c 	.word	0x00001d4c

08003348 <autoRotate>:
void autoRotate()
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
	stepperMotor(currentSelectIndex, 7500, 180, 2);
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <autoRotate+0x18>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	4904      	ldr	r1, [pc, #16]	; (8003364 <autoRotate+0x1c>)
 8003352:	2302      	movs	r3, #2
 8003354:	22b4      	movs	r2, #180	; 0xb4
 8003356:	f000 f807 	bl	8003368 <stepperMotor>
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000108 	.word	0x20000108
 8003364:	00001d4c 	.word	0x00001d4c

08003368 <stepperMotor>:
void stepperMotor(int direction, int per, int angle, int mode)
{// stepper motor control
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
	if(direction == 1) // directional change
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d106      	bne.n	800338a <stepperMotor+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800337c:	4b34      	ldr	r3, [pc, #208]	; (8003450 <stepperMotor+0xe8>)
 800337e:	2200      	movs	r2, #0
 8003380:	2108      	movs	r1, #8
 8003382:	0018      	movs	r0, r3
 8003384:	f001 fae7 	bl	8004956 <HAL_GPIO_WritePin>
 8003388:	e005      	b.n	8003396 <stepperMotor+0x2e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <stepperMotor+0xe8>)
 800338c:	2201      	movs	r2, #1
 800338e:	2108      	movs	r1, #8
 8003390:	0018      	movs	r0, r3
 8003392:	f001 fae0 	bl	8004956 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); //motor Enable
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <stepperMotor+0xe8>)
 8003398:	2200      	movs	r2, #0
 800339a:	2101      	movs	r1, #1
 800339c:	0018      	movs	r0, r3
 800339e:	f001 fada 	bl	8004956 <HAL_GPIO_WritePin>
	//change_pwm(per);// this is to change pwm signal in case we want to speed or low down motore
	// change_pwm might not even be used
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);//seting motor to full drive
 80033a2:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <stepperMotor+0xe8>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	2120      	movs	r1, #32
 80033a8:	0018      	movs	r0, r3
 80033aa:	f001 fad4 	bl	8004956 <HAL_GPIO_WritePin>

	if(mode == 1) //Manual stepper rotation
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d113      	bne.n	80033dc <stepperMotor+0x74>
	{startmotor();
 80033b4:	f7ff fbd6 	bl	8002b64 <startmotor>
	while(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 80033b8:	e003      	b.n	80033c2 <stepperMotor+0x5a>
	{//while trigger button is being pressed, currently mapped to selection button for testing
		nano_wait(5000000);
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <stepperMotor+0xec>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f7fe fb49 	bl	8001a54 <nano_wait>
	while(updateToggleHistory(3) || HAL_GPIO_ReadPin(GPIOB, 1 << (3)))
 80033c2:	2003      	movs	r0, #3
 80033c4:	f000 f8fc 	bl	80035c0 <updateToggleHistory>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d1f6      	bne.n	80033ba <stepperMotor+0x52>
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <stepperMotor+0xf0>)
 80033ce:	2108      	movs	r1, #8
 80033d0:	0018      	movs	r0, r3
 80033d2:	f001 faa3 	bl	800491c <HAL_GPIO_ReadPin>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d1ef      	bne.n	80033ba <stepperMotor+0x52>
 80033da:	e032      	b.n	8003442 <stepperMotor+0xda>

	}
	}
	else //Angular precise stepper movements
		{
		uint32_t timemotor = per* angle /10000/1.8*3.95; //period * number of steps(angle) / 10000 / 1.8degrees per step * 1.25
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4353      	muls	r3, r2
 80033e2:	491e      	ldr	r1, [pc, #120]	; (800345c <stepperMotor+0xf4>)
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fc ff21 	bl	800022c <__divsi3>
 80033ea:	0003      	movs	r3, r0
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fe fac7 	bl	8001980 <__aeabi_i2d>
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <stepperMotor+0xf8>)
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <stepperMotor+0xfc>)
 80033f6:	f7fd f889 	bl	800050c <__aeabi_ddiv>
 80033fa:	0002      	movs	r2, r0
 80033fc:	000b      	movs	r3, r1
 80033fe:	0010      	movs	r0, r2
 8003400:	0019      	movs	r1, r3
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <stepperMotor+0x100>)
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <stepperMotor+0x104>)
 8003406:	f7fd fc87 	bl	8000d18 <__aeabi_dmul>
 800340a:	0002      	movs	r2, r0
 800340c:	000b      	movs	r3, r1
 800340e:	0010      	movs	r0, r2
 8003410:	0019      	movs	r1, r3
 8003412:	f7fd f85d 	bl	80004d0 <__aeabi_d2uiz>
 8003416:	0003      	movs	r3, r0
 8003418:	61bb      	str	r3, [r7, #24]
		startmotor();
 800341a:	f7ff fba3 	bl	8002b64 <startmotor>
		uint32_t motorstarttime = HAL_GetTick();
 800341e:	f000 fc59 	bl	8003cd4 <HAL_GetTick>
 8003422:	0003      	movs	r3, r0
 8003424:	617b      	str	r3, [r7, #20]
		for(int i =0; i < timemotor; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	e006      	b.n	800343a <stepperMotor+0xd2>
		{
			nano_wait(1000000);
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <stepperMotor+0x108>)
 800342e:	0018      	movs	r0, r3
 8003430:	f7fe fb10 	bl	8001a54 <nano_wait>
		for(int i =0; i < timemotor; i++)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	3301      	adds	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	429a      	cmp	r2, r3
 8003440:	d8f4      	bhi.n	800342c <stepperMotor+0xc4>
		//{//while trigger is pressed and angle time is not exceeded, continue running the motor
		//}
		}

	//stop motor
	stopmotor();
 8003442:	f7ff fb9b 	bl	8002b7c <stopmotor>
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b008      	add	sp, #32
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	48000800 	.word	0x48000800
 8003454:	004c4b40 	.word	0x004c4b40
 8003458:	48000400 	.word	0x48000400
 800345c:	00002710 	.word	0x00002710
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	3ffccccc 	.word	0x3ffccccc
 8003468:	9999999a 	.word	0x9999999a
 800346c:	400f9999 	.word	0x400f9999
 8003470:	000f4240 	.word	0x000f4240

08003474 <Tunemode>:
void Tunemode() {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af04      	add	r7, sp, #16
	//introduce scroll index which represents the current index in the list of tune
	/*currentSelectIndex is just representing the index respective to which of current three selection
	on the screen is being highlighted */
	//display peg diagram
	LCD_DrawString(95 ,25,  YELLOW, BLUE,"-----", 16, 0);
 800347a:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <Tunemode+0xb4>)
 800347c:	2300      	movs	r3, #0
 800347e:	9302      	str	r3, [sp, #8]
 8003480:	2310      	movs	r3, #16
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	4b29      	ldr	r3, [pc, #164]	; (800352c <Tunemode+0xb8>)
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	231f      	movs	r3, #31
 800348a:	2119      	movs	r1, #25
 800348c:	205f      	movs	r0, #95	; 0x5f
 800348e:	f7fe fee9 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(60 ,40,  YELLOW, BLUE,"3 - |    | - 4", 16, 0);
 8003492:	4a25      	ldr	r2, [pc, #148]	; (8003528 <Tunemode+0xb4>)
 8003494:	2300      	movs	r3, #0
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	2310      	movs	r3, #16
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	4b24      	ldr	r3, [pc, #144]	; (8003530 <Tunemode+0xbc>)
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	231f      	movs	r3, #31
 80034a2:	2128      	movs	r1, #40	; 0x28
 80034a4:	203c      	movs	r0, #60	; 0x3c
 80034a6:	f7fe fedd 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"2 - |    | - 5", 16, 0);
 80034aa:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <Tunemode+0xb4>)
 80034ac:	2300      	movs	r3, #0
 80034ae:	9302      	str	r3, [sp, #8]
 80034b0:	2310      	movs	r3, #16
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <Tunemode+0xc0>)
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	231f      	movs	r3, #31
 80034ba:	213c      	movs	r1, #60	; 0x3c
 80034bc:	203c      	movs	r0, #60	; 0x3c
 80034be:	f7fe fed1 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(60 ,80,  YELLOW, BLUE,"1 - |    | - 6", 16, 0);
 80034c2:	4a19      	ldr	r2, [pc, #100]	; (8003528 <Tunemode+0xb4>)
 80034c4:	2300      	movs	r3, #0
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	2310      	movs	r3, #16
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <Tunemode+0xc4>)
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	231f      	movs	r3, #31
 80034d2:	2150      	movs	r1, #80	; 0x50
 80034d4:	203c      	movs	r0, #60	; 0x3c
 80034d6:	f7fe fec5 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(95 ,100,  YELLOW, BLUE,"-----", 16, 0);
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <Tunemode+0xb4>)
 80034dc:	2300      	movs	r3, #0
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	2310      	movs	r3, #16
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	4b11      	ldr	r3, [pc, #68]	; (800352c <Tunemode+0xb8>)
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	231f      	movs	r3, #31
 80034ea:	2164      	movs	r1, #100	; 0x64
 80034ec:	205f      	movs	r0, #95	; 0x5f
 80034ee:	f7fe feb9 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(100 ,115,  YELLOW, BLUE,"||||", 16, 0);
 80034f2:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <Tunemode+0xb4>)
 80034f4:	2300      	movs	r3, #0
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	2310      	movs	r3, #16
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <Tunemode+0xc8>)
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	231f      	movs	r3, #31
 8003502:	2173      	movs	r1, #115	; 0x73
 8003504:	2064      	movs	r0, #100	; 0x64
 8003506:	f7fe fead 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(100 ,130,  YELLOW, BLUE,"||||", 16, 0);
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <Tunemode+0xb4>)
 800350c:	2300      	movs	r3, #0
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	2310      	movs	r3, #16
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <Tunemode+0xc8>)
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	231f      	movs	r3, #31
 800351a:	2182      	movs	r1, #130	; 0x82
 800351c:	2064      	movs	r0, #100	; 0x64
 800351e:	f7fe fea1 	bl	8002264 <LCD_DrawString>
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	0000ffe0 	.word	0x0000ffe0
 800352c:	08008b04 	.word	0x08008b04
 8003530:	08008b0c 	.word	0x08008b0c
 8003534:	08008b1c 	.word	0x08008b1c
 8003538:	08008b2c 	.word	0x08008b2c
 800353c:	08008b3c 	.word	0x08008b3c

08003540 <pegDisplay>:

void pegDisplay()
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af04      	add	r7, sp, #16
	LCD_DrawString(60 ,40,  YELLOW, BLUE,pegsel[currentSelectIndex-1], 16, 0);
 8003546:	4b19      	ldr	r3, [pc, #100]	; (80035ac <pegDisplay+0x6c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <pegDisplay+0x70>)
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	58d3      	ldr	r3, [r2, r3]
 8003552:	4918      	ldr	r1, [pc, #96]	; (80035b4 <pegDisplay+0x74>)
 8003554:	2200      	movs	r2, #0
 8003556:	9202      	str	r2, [sp, #8]
 8003558:	2210      	movs	r2, #16
 800355a:	9201      	str	r2, [sp, #4]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	231f      	movs	r3, #31
 8003560:	000a      	movs	r2, r1
 8003562:	2128      	movs	r1, #40	; 0x28
 8003564:	203c      	movs	r0, #60	; 0x3c
 8003566:	f7fe fe7d 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(60 ,60,  YELLOW, BLUE,"Play Note", 16, 0);
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <pegDisplay+0x74>)
 800356c:	2300      	movs	r3, #0
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	2310      	movs	r3, #16
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <pegDisplay+0x78>)
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	231f      	movs	r3, #31
 800357a:	213c      	movs	r1, #60	; 0x3c
 800357c:	203c      	movs	r0, #60	; 0x3c
 800357e:	f7fe fe71 	bl	8002264 <LCD_DrawString>
	LCD_DrawString(140 ,60,  YELLOW, BLUE, note[currentSelectIndex-1], 16, 0);
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <pegDisplay+0x6c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	1e5a      	subs	r2, r3, #1
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <pegDisplay+0x7c>)
 800358a:	0092      	lsls	r2, r2, #2
 800358c:	58d3      	ldr	r3, [r2, r3]
 800358e:	4909      	ldr	r1, [pc, #36]	; (80035b4 <pegDisplay+0x74>)
 8003590:	2200      	movs	r2, #0
 8003592:	9202      	str	r2, [sp, #8]
 8003594:	2210      	movs	r2, #16
 8003596:	9201      	str	r2, [sp, #4]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	231f      	movs	r3, #31
 800359c:	000a      	movs	r2, r1
 800359e:	213c      	movs	r1, #60	; 0x3c
 80035a0:	208c      	movs	r0, #140	; 0x8c
 80035a2:	f7fe fe5f 	bl	8002264 <LCD_DrawString>
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000108 	.word	0x20000108
 80035b0:	20000048 	.word	0x20000048
 80035b4:	0000ffe0 	.word	0x0000ffe0
 80035b8:	08008b44 	.word	0x08008b44
 80035bc:	20000060 	.word	0x20000060

080035c0 <updateToggleHistory>:


uint8_t updateToggleHistory(uint8_t button) {
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	0002      	movs	r2, r0
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	701a      	strb	r2, [r3, #0]
	uint8_t prev = pressHistory[button - 2];
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	1e9a      	subs	r2, r3, #2
 80035d2:	260f      	movs	r6, #15
 80035d4:	19bb      	adds	r3, r7, r6
 80035d6:	492c      	ldr	r1, [pc, #176]	; (8003688 <updateToggleHistory+0xc8>)
 80035d8:	5c8a      	ldrb	r2, [r1, r2]
 80035da:	701a      	strb	r2, [r3, #0]
	uint8_t new = HAL_GPIO_ReadPin(GPIOB, 1 << (button));
 80035dc:	1dfb      	adds	r3, r7, #7
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	250e      	movs	r5, #14
 80035ea:	197c      	adds	r4, r7, r5
 80035ec:	4a27      	ldr	r2, [pc, #156]	; (800368c <updateToggleHistory+0xcc>)
 80035ee:	0019      	movs	r1, r3
 80035f0:	0010      	movs	r0, r2
 80035f2:	f001 f993 	bl	800491c <HAL_GPIO_ReadPin>
 80035f6:	0003      	movs	r3, r0
 80035f8:	7023      	strb	r3, [r4, #0]
	pressHistory[button - 2] = new;
 80035fa:	1dfb      	adds	r3, r7, #7
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	3b02      	subs	r3, #2
 8003600:	4a21      	ldr	r2, [pc, #132]	; (8003688 <updateToggleHistory+0xc8>)
 8003602:	0028      	movs	r0, r5
 8003604:	1839      	adds	r1, r7, r0
 8003606:	7809      	ldrb	r1, [r1, #0]
 8003608:	54d1      	strb	r1, [r2, r3]
	if (lastButton == button && (prev == 1 || new == 1)) return 0;
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <updateToggleHistory+0xd0>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	1dfa      	adds	r2, r7, #7
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d109      	bne.n	800362a <updateToggleHistory+0x6a>
 8003616:	19bb      	adds	r3, r7, r6
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d003      	beq.n	8003626 <updateToggleHistory+0x66>
 800361e:	183b      	adds	r3, r7, r0
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <updateToggleHistory+0x6a>
 8003626:	2300      	movs	r3, #0
 8003628:	e029      	b.n	800367e <updateToggleHistory+0xbe>
	else if (prev == 1 && new == 1) {
 800362a:	230f      	movs	r3, #15
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d109      	bne.n	8003648 <updateToggleHistory+0x88>
 8003634:	230e      	movs	r3, #14
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d104      	bne.n	8003648 <updateToggleHistory+0x88>
		lastButton = button;
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <updateToggleHistory+0xd0>)
 8003640:	1dfa      	adds	r2, r7, #7
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e00c      	b.n	8003662 <updateToggleHistory+0xa2>
	} else if (prev == 0 && new == 0){
 8003648:	230f      	movs	r3, #15
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <updateToggleHistory+0xa2>
 8003652:	230e      	movs	r3, #14
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <updateToggleHistory+0xa2>
		lastButton = -1;
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <updateToggleHistory+0xd0>)
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	701a      	strb	r2, [r3, #0]
	}

	return prev && new;
 8003662:	230f      	movs	r3, #15
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <updateToggleHistory+0xba>
 800366c:	230e      	movs	r3, #14
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <updateToggleHistory+0xba>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <updateToggleHistory+0xbc>
 800367a:	2300      	movs	r3, #0
 800367c:	b2db      	uxtb	r3, r3


  /* USER CODE END 3 */
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b005      	add	sp, #20
 8003684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	20000120 	.word	0x20000120
 800368c:	48000400 	.word	0x48000400
 8003690:	20000079 	.word	0x20000079

08003694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_MspInit+0x44>)
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_MspInit+0x44>)
 80036a0:	2101      	movs	r1, #1
 80036a2:	430a      	orrs	r2, r1
 80036a4:	619a      	str	r2, [r3, #24]
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_MspInit+0x44>)
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_MspInit+0x44>)
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_MspInit+0x44>)
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	0549      	lsls	r1, r1, #21
 80036bc:	430a      	orrs	r2, r1
 80036be:	61da      	str	r2, [r3, #28]
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_MspInit+0x44>)
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	055b      	lsls	r3, r3, #21
 80036c8:	4013      	ands	r3, r2
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b08b      	sub	sp, #44	; 0x2c
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	2414      	movs	r4, #20
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	0018      	movs	r0, r3
 80036ea:	2314      	movs	r3, #20
 80036ec:	001a      	movs	r2, r3
 80036ee:	2100      	movs	r1, #0
 80036f0:	f004 f918 	bl	8007924 <memset>
  if(hadc->Instance==ADC1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_ADC_MspInit+0xf0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d162      	bne.n	80037c4 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036fe:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <HAL_ADC_MspInit+0xf4>)
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <HAL_ADC_MspInit+0xf4>)
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	0089      	lsls	r1, r1, #2
 8003708:	430a      	orrs	r2, r1
 800370a:	619a      	str	r2, [r3, #24]
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_ADC_MspInit+0xf4>)
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_ADC_MspInit+0xf4>)
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_ADC_MspInit+0xf4>)
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	02c9      	lsls	r1, r1, #11
 8003724:	430a      	orrs	r2, r1
 8003726:	615a      	str	r2, [r3, #20]
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_ADC_MspInit+0xf4>)
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	02db      	lsls	r3, r3, #11
 8003730:	4013      	ands	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373c:	193b      	adds	r3, r7, r4
 800373e:	2203      	movs	r2, #3
 8003740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	193b      	adds	r3, r7, r4
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003748:	193b      	adds	r3, r7, r4
 800374a:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_ADC_MspInit+0xf8>)
 800374c:	0019      	movs	r1, r3
 800374e:	0010      	movs	r0, r2
 8003750:	f000 ff6c 	bl	800462c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 8003756:	4a21      	ldr	r2, [pc, #132]	; (80037dc <HAL_ADC_MspInit+0x100>)
 8003758:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800375a:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003766:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	0052      	lsls	r2, r2, #1
 8003772:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	00d2      	lsls	r2, r2, #3
 800377a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 800377e:	2220      	movs	r2, #32
 8003780:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 8003784:	2200      	movs	r2, #0
 8003786:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 800378a:	0018      	movs	r0, r3
 800378c:	f000 fdd8 	bl	8004340 <HAL_DMA_Init>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8003794:	f7ff fa06 	bl	8002ba4 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8003798:	4a11      	ldr	r2, [pc, #68]	; (80037e0 <HAL_ADC_MspInit+0x104>)
 800379a:	23a8      	movs	r3, #168	; 0xa8
 800379c:	58d3      	ldr	r3, [r2, r3]
 800379e:	4910      	ldr	r1, [pc, #64]	; (80037e0 <HAL_ADC_MspInit+0x104>)
 80037a0:	220f      	movs	r2, #15
 80037a2:	4393      	bics	r3, r2
 80037a4:	22a8      	movs	r2, #168	; 0xa8
 80037a6:	508b      	str	r3, [r1, r2]
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <HAL_ADC_MspInit+0x104>)
 80037aa:	23a8      	movs	r3, #168	; 0xa8
 80037ac:	58d3      	ldr	r3, [r2, r3]
 80037ae:	490c      	ldr	r1, [pc, #48]	; (80037e0 <HAL_ADC_MspInit+0x104>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	22a8      	movs	r2, #168	; 0xa8
 80037b6:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_ADC_MspInit+0xfc>)
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b00b      	add	sp, #44	; 0x2c
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	40012400 	.word	0x40012400
 80037d0:	40021000 	.word	0x40021000
 80037d4:	48000400 	.word	0x48000400
 80037d8:	20000274 	.word	0x20000274
 80037dc:	40020008 	.word	0x40020008
 80037e0:	40020000 	.word	0x40020000

080037e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b08b      	sub	sp, #44	; 0x2c
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	2414      	movs	r4, #20
 80037ee:	193b      	adds	r3, r7, r4
 80037f0:	0018      	movs	r0, r3
 80037f2:	2314      	movs	r3, #20
 80037f4:	001a      	movs	r2, r3
 80037f6:	2100      	movs	r1, #0
 80037f8:	f004 f894 	bl	8007924 <memset>
  if(hi2c->Instance==I2C2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_I2C_MspInit+0x90>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d132      	bne.n	800386c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_I2C_MspInit+0x94>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_I2C_MspInit+0x94>)
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	02c9      	lsls	r1, r1, #11
 8003810:	430a      	orrs	r2, r1
 8003812:	615a      	str	r2, [r3, #20]
 8003814:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_I2C_MspInit+0x94>)
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	02db      	lsls	r3, r3, #11
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003822:	193b      	adds	r3, r7, r4
 8003824:	22c0      	movs	r2, #192	; 0xc0
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800382a:	0021      	movs	r1, r4
 800382c:	187b      	adds	r3, r7, r1
 800382e:	2212      	movs	r2, #18
 8003830:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	187b      	adds	r3, r7, r1
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003838:	187b      	adds	r3, r7, r1
 800383a:	2203      	movs	r2, #3
 800383c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800383e:	187b      	adds	r3, r7, r1
 8003840:	2201      	movs	r2, #1
 8003842:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003844:	187b      	adds	r3, r7, r1
 8003846:	4a0d      	ldr	r2, [pc, #52]	; (800387c <HAL_I2C_MspInit+0x98>)
 8003848:	0019      	movs	r1, r3
 800384a:	0010      	movs	r0, r2
 800384c:	f000 feee 	bl	800462c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_I2C_MspInit+0x94>)
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_I2C_MspInit+0x94>)
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	03c9      	lsls	r1, r1, #15
 800385a:	430a      	orrs	r2, r1
 800385c:	61da      	str	r2, [r3, #28]
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_I2C_MspInit+0x94>)
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	03db      	lsls	r3, r3, #15
 8003866:	4013      	ands	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b00b      	add	sp, #44	; 0x2c
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	40005800 	.word	0x40005800
 8003878:	40021000 	.word	0x40021000
 800387c:	48000400 	.word	0x48000400

08003880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b08b      	sub	sp, #44	; 0x2c
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	2414      	movs	r4, #20
 800388a:	193b      	adds	r3, r7, r4
 800388c:	0018      	movs	r0, r3
 800388e:	2314      	movs	r3, #20
 8003890:	001a      	movs	r2, r3
 8003892:	2100      	movs	r1, #0
 8003894:	f004 f846 	bl	8007924 <memset>
  if(hspi->Instance==SPI1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_SPI_MspInit+0x90>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d132      	bne.n	8003908 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_SPI_MspInit+0x94>)
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_SPI_MspInit+0x94>)
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0149      	lsls	r1, r1, #5
 80038ac:	430a      	orrs	r2, r1
 80038ae:	619a      	str	r2, [r3, #24]
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <HAL_SPI_MspInit+0x94>)
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	015b      	lsls	r3, r3, #5
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_SPI_MspInit+0x94>)
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	4b14      	ldr	r3, [pc, #80]	; (8003914 <HAL_SPI_MspInit+0x94>)
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	0289      	lsls	r1, r1, #10
 80038c8:	430a      	orrs	r2, r1
 80038ca:	615a      	str	r2, [r3, #20]
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_SPI_MspInit+0x94>)
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80038da:	0021      	movs	r1, r4
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	22b0      	movs	r2, #176	; 0xb0
 80038e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2202      	movs	r2, #2
 80038e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	2203      	movs	r2, #3
 80038f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fa:	187a      	adds	r2, r7, r1
 80038fc:	2390      	movs	r3, #144	; 0x90
 80038fe:	05db      	lsls	r3, r3, #23
 8003900:	0011      	movs	r1, r2
 8003902:	0018      	movs	r0, r3
 8003904:	f000 fe92 	bl	800462c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b00b      	add	sp, #44	; 0x2c
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	40013000 	.word	0x40013000
 8003914:	40021000 	.word	0x40021000

08003918 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <HAL_TIM_PWM_MspInit+0x38>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10d      	bne.n	8003946 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <HAL_TIM_PWM_MspInit+0x3c>)
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_TIM_PWM_MspInit+0x3c>)
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	0109      	lsls	r1, r1, #4
 8003934:	430a      	orrs	r2, r1
 8003936:	619a      	str	r2, [r3, #24]
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_TIM_PWM_MspInit+0x3c>)
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b004      	add	sp, #16
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	240c      	movs	r4, #12
 8003962:	193b      	adds	r3, r7, r4
 8003964:	0018      	movs	r0, r3
 8003966:	2314      	movs	r3, #20
 8003968:	001a      	movs	r2, r3
 800396a:	2100      	movs	r1, #0
 800396c:	f003 ffda 	bl	8007924 <memset>
  if(htim->Instance==TIM1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <HAL_TIM_MspPostInit+0x78>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d125      	bne.n	80039c6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_TIM_MspPostInit+0x7c>)
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <HAL_TIM_MspPostInit+0x7c>)
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0289      	lsls	r1, r1, #10
 8003984:	430a      	orrs	r2, r1
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <HAL_TIM_MspPostInit+0x7c>)
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003996:	193b      	adds	r3, r7, r4
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	0052      	lsls	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	0021      	movs	r1, r4
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	2202      	movs	r2, #2
 80039a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	2202      	movs	r2, #2
 80039b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b8:	187a      	adds	r2, r7, r1
 80039ba:	2390      	movs	r3, #144	; 0x90
 80039bc:	05db      	lsls	r3, r3, #23
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 fe33 	bl	800462c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b009      	add	sp, #36	; 0x24
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40021000 	.word	0x40021000

080039d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <NMI_Handler+0x4>

080039de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e2:	e7fe      	b.n	80039e2 <HardFault_Handler+0x4>

080039e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039fc:	f000 f958 	bl	8003cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003a0a:	2004      	movs	r0, #4
 8003a0c:	f000 ffc0 	bl	8004990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003a10:	2008      	movs	r0, #8
 8003a12:	f000 ffbd 	bl	8004990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003a20:	2010      	movs	r0, #16
 8003a22:	f000 ffb5 	bl	8004990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <DMA1_Ch1_IRQHandler+0x14>)
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 fd11 	bl	800445a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	20000274 	.word	0x20000274

08003a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
	return 1;
 8003a48:	2301      	movs	r3, #1
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_kill>:

int _kill(int pid, int sig)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a5a:	f003 ff2f 	bl	80078bc <__errno>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	2216      	movs	r2, #22
 8003a62:	601a      	str	r2, [r3, #0]
	return -1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	425b      	negs	r3, r3
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_exit>:

void _exit (int status)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a78:	2301      	movs	r3, #1
 8003a7a:	425a      	negs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff ffe5 	bl	8003a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a86:	e7fe      	b.n	8003a86 <_exit+0x16>

08003a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e00a      	b.n	8003ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a9a:	e000      	b.n	8003a9e <_read+0x16>
 8003a9c:	bf00      	nop
 8003a9e:	0001      	movs	r1, r0
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	60ba      	str	r2, [r7, #8]
 8003aa6:	b2ca      	uxtb	r2, r1
 8003aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	3301      	adds	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dbf0      	blt.n	8003a9a <_read+0x12>
	}

return len;
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b006      	add	sp, #24
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e009      	b.n	8003ae8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	60ba      	str	r2, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	0018      	movs	r0, r3
 8003ade:	e000      	b.n	8003ae2 <_write+0x20>
 8003ae0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dbf1      	blt.n	8003ad4 <_write+0x12>
	}
	return len;
 8003af0:	687b      	ldr	r3, [r7, #4]
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b006      	add	sp, #24
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_close>:

int _close(int file)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
	return -1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	425b      	negs	r3, r3
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b002      	add	sp, #8
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	0192      	lsls	r2, r2, #6
 8003b1e:	605a      	str	r2, [r3, #4]
	return 0;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_isatty>:

int _isatty(int file)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
	return 1;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	return 0;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b5c:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <_sbrk+0x5c>)
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <_sbrk+0x60>)
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <_sbrk+0x64>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <_sbrk+0x64>)
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <_sbrk+0x68>)
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <_sbrk+0x64>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	18d3      	adds	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d207      	bcs.n	8003b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b84:	f003 fe9a 	bl	80078bc <__errno>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	220c      	movs	r2, #12
 8003b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	425b      	negs	r3, r3
 8003b92:	e009      	b.n	8003ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <_sbrk+0x64>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <_sbrk+0x64>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	18d2      	adds	r2, r2, r3
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <_sbrk+0x64>)
 8003ba4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20008000 	.word	0x20008000
 8003bb4:	00000400 	.word	0x00000400
 8003bb8:	20000124 	.word	0x20000124
 8003bbc:	20000310 	.word	0x20000310

08003bc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bcc:	480d      	ldr	r0, [pc, #52]	; (8003c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bd0:	480d      	ldr	r0, [pc, #52]	; (8003c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8003bd2:	490e      	ldr	r1, [pc, #56]	; (8003c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <LoopForever+0xe>)
  movs r3, #0
 8003bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd8:	e002      	b.n	8003be0 <LoopCopyDataInit>

08003bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bde:	3304      	adds	r3, #4

08003be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003be4:	d3f9      	bcc.n	8003bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003be8:	4c0b      	ldr	r4, [pc, #44]	; (8003c18 <LoopForever+0x16>)
  movs r3, #0
 8003bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bec:	e001      	b.n	8003bf2 <LoopFillZerobss>

08003bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bf0:	3204      	adds	r2, #4

08003bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bf4:	d3fb      	bcc.n	8003bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003bf6:	f7ff ffe3 	bl	8003bc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003bfa:	f003 fe65 	bl	80078c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bfe:	f7fe fb8b 	bl	8002318 <main>

08003c02 <LoopForever>:

LoopForever:
    b LoopForever
 8003c02:	e7fe      	b.n	8003c02 <LoopForever>
  ldr   r0, =_estack
 8003c04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c0c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8003c10:	080097b8 	.word	0x080097b8
  ldr r2, =_sbss
 8003c14:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8003c18:	20000310 	.word	0x20000310

08003c1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c1c:	e7fe      	b.n	8003c1c <ADC1_COMP_IRQHandler>
	...

08003c20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_Init+0x24>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_Init+0x24>)
 8003c2a:	2110      	movs	r1, #16
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003c30:	2003      	movs	r0, #3
 8003c32:	f000 f809 	bl	8003c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c36:	f7ff fd2d 	bl	8003694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	40022000 	.word	0x40022000

08003c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c50:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <HAL_InitTick+0x5c>)
 8003c52:	681c      	ldr	r4, [r3, #0]
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_InitTick+0x60>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	0019      	movs	r1, r3
 8003c5a:	23fa      	movs	r3, #250	; 0xfa
 8003c5c:	0098      	lsls	r0, r3, #2
 8003c5e:	f7fc fa5b 	bl	8000118 <__udivsi3>
 8003c62:	0003      	movs	r3, r0
 8003c64:	0019      	movs	r1, r3
 8003c66:	0020      	movs	r0, r4
 8003c68:	f7fc fa56 	bl	8000118 <__udivsi3>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f000 fb59 	bl	8004326 <HAL_SYSTICK_Config>
 8003c74:	1e03      	subs	r3, r0, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e00f      	b.n	8003c9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d80b      	bhi.n	8003c9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	2301      	movs	r3, #1
 8003c86:	425b      	negs	r3, r3
 8003c88:	2200      	movs	r2, #0
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 fb26 	bl	80042dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_InitTick+0x64>)
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b003      	add	sp, #12
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	2000007c 	.word	0x2000007c
 8003ca8:	20000084 	.word	0x20000084
 8003cac:	20000080 	.word	0x20000080

08003cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_IncTick+0x1c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	001a      	movs	r2, r3
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_IncTick+0x20>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	18d2      	adds	r2, r2, r3
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_IncTick+0x20>)
 8003cc2:	601a      	str	r2, [r3, #0]
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	20000084 	.word	0x20000084
 8003cd0:	200002fc 	.word	0x200002fc

08003cd4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cd8:	4b02      	ldr	r3, [pc, #8]	; (8003ce4 <HAL_GetTick+0x10>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	200002fc 	.word	0x200002fc

08003ce8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e125      	b.n	8003f52 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2234      	movs	r2, #52	; 0x34
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff fcdc 	bl	80036dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	2210      	movs	r2, #16
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d000      	beq.n	8003d30 <HAL_ADC_Init+0x48>
 8003d2e:	e103      	b.n	8003f38 <HAL_ADC_Init+0x250>
 8003d30:	230f      	movs	r3, #15
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d000      	beq.n	8003d3c <HAL_ADC_Init+0x54>
 8003d3a:	e0fd      	b.n	8003f38 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2204      	movs	r2, #4
 8003d44:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003d46:	d000      	beq.n	8003d4a <HAL_ADC_Init+0x62>
 8003d48:	e0f6      	b.n	8003f38 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	4a83      	ldr	r2, [pc, #524]	; (8003f5c <HAL_ADC_Init+0x274>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	2202      	movs	r2, #2
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2203      	movs	r2, #3
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d112      	bne.n	8003d8e <HAL_ADC_Init+0xa6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d009      	beq.n	8003d8a <HAL_ADC_Init+0xa2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	401a      	ands	r2, r3
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_Init+0xa6>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_ADC_Init+0xa8>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2218      	movs	r2, #24
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	0019      	movs	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	0899      	lsrs	r1, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4964      	ldr	r1, [pc, #400]	; (8003f60 <HAL_ADC_Init+0x278>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7e1b      	ldrb	r3, [r3, #24]
 8003dd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7e5b      	ldrb	r3, [r3, #25]
 8003ddc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003dde:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	7e9b      	ldrb	r3, [r3, #26]
 8003de4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003de6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d002      	beq.n	8003df6 <HAL_ADC_Init+0x10e>
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	015b      	lsls	r3, r3, #5
 8003df4:	e000      	b.n	8003df8 <HAL_ADC_Init+0x110>
 8003df6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003df8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003dfe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d101      	bne.n	8003e0c <HAL_ADC_Init+0x124>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e000      	b.n	8003e0e <HAL_ADC_Init+0x126>
 8003e0c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003e0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2124      	movs	r1, #36	; 0x24
 8003e14:	5c5b      	ldrb	r3, [r3, r1]
 8003e16:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003e18:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7edb      	ldrb	r3, [r3, #27]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d115      	bne.n	8003e54 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7e9b      	ldrb	r3, [r3, #26]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	0252      	lsls	r2, r2, #9
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	e00b      	b.n	8003e54 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	2220      	movs	r2, #32
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	23c2      	movs	r3, #194	; 0xc2
 8003e5a:	33ff      	adds	r3, #255	; 0xff
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d007      	beq.n	8003e70 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68d9      	ldr	r1, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	055b      	lsls	r3, r3, #21
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d01b      	beq.n	8003ec4 <HAL_ADC_Init+0x1dc>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d017      	beq.n	8003ec4 <HAL_ADC_Init+0x1dc>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_ADC_Init+0x1dc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d00f      	beq.n	8003ec4 <HAL_ADC_Init+0x1dc>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_ADC_Init+0x1dc>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d007      	beq.n	8003ec4 <HAL_ADC_Init+0x1dc>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d003      	beq.n	8003ec4 <HAL_ADC_Init+0x1dc>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	2b07      	cmp	r3, #7
 8003ec2:	d112      	bne.n	8003eea <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2107      	movs	r1, #7
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6959      	ldr	r1, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	2207      	movs	r2, #7
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_ADC_Init+0x27c>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d10b      	bne.n	8003f12 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	2203      	movs	r2, #3
 8003f06:	4393      	bics	r3, r2
 8003f08:	2201      	movs	r2, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003f10:	e01c      	b.n	8003f4c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	2212      	movs	r2, #18
 8003f18:	4393      	bics	r3, r2
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	2201      	movs	r2, #1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003f2e:	230f      	movs	r3, #15
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003f36:	e009      	b.n	8003f4c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003f44:	230f      	movs	r3, #15
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f4c:	230f      	movs	r3, #15
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	781b      	ldrb	r3, [r3, #0]
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b004      	add	sp, #16
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	fffffefd 	.word	0xfffffefd
 8003f60:	fffe0219 	.word	0xfffe0219
 8003f64:	833fffe7 	.word	0x833fffe7

08003f68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f72:	230f      	movs	r3, #15
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	055b      	lsls	r3, r3, #21
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d011      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x46>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00d      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x46>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d009      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x46>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d005      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x46>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d001      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x46>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2234      	movs	r2, #52	; 0x34
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x54>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0d0      	b.n	800415e <HAL_ADC_ConfigChannel+0x1f6>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2234      	movs	r2, #52	; 0x34
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d000      	beq.n	8003fd2 <HAL_ADC_ConfigChannel+0x6a>
 8003fd0:	e0b4      	b.n	800413c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a64      	ldr	r2, [pc, #400]	; (8004168 <HAL_ADC_ConfigChannel+0x200>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d100      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x76>
 8003fdc:	e082      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	055b      	lsls	r3, r3, #21
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d037      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d033      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	2b02      	cmp	r3, #2
 800400e:	d02f      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2b03      	cmp	r3, #3
 8004016:	d02b      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	2b04      	cmp	r3, #4
 800401e:	d027      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	2b05      	cmp	r3, #5
 8004026:	d023      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	2b06      	cmp	r3, #6
 800402e:	d01f      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	2b07      	cmp	r3, #7
 8004036:	d01b      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2107      	movs	r1, #7
 8004044:	400b      	ands	r3, r1
 8004046:	429a      	cmp	r2, r3
 8004048:	d012      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2107      	movs	r1, #7
 8004056:	438a      	bics	r2, r1
 8004058:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6959      	ldr	r1, [r3, #20]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2207      	movs	r2, #7
 8004066:	401a      	ands	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b10      	cmp	r3, #16
 8004076:	d007      	beq.n	8004088 <HAL_ADC_ConfigChannel+0x120>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b11      	cmp	r3, #17
 800407e:	d003      	beq.n	8004088 <HAL_ADC_ConfigChannel+0x120>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b12      	cmp	r3, #18
 8004086:	d163      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004088:	4b38      	ldr	r3, [pc, #224]	; (800416c <HAL_ADC_ConfigChannel+0x204>)
 800408a:	6819      	ldr	r1, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b10      	cmp	r3, #16
 8004092:	d009      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x140>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b11      	cmp	r3, #17
 800409a:	d102      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x13a>
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	03db      	lsls	r3, r3, #15
 80040a0:	e004      	b.n	80040ac <HAL_ADC_ConfigChannel+0x144>
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	045b      	lsls	r3, r3, #17
 80040a6:	e001      	b.n	80040ac <HAL_ADC_ConfigChannel+0x144>
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	4a2f      	ldr	r2, [pc, #188]	; (800416c <HAL_ADC_ConfigChannel+0x204>)
 80040ae:	430b      	orrs	r3, r1
 80040b0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d14a      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040ba:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <HAL_ADC_ConfigChannel+0x208>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	492d      	ldr	r1, [pc, #180]	; (8004174 <HAL_ADC_ConfigChannel+0x20c>)
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7fc f829 	bl	8000118 <__udivsi3>
 80040c6:	0003      	movs	r3, r0
 80040c8:	001a      	movs	r2, r3
 80040ca:	0013      	movs	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040d4:	e002      	b.n	80040dc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f9      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x16e>
 80040e2:	e035      	b.n	8004150 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2101      	movs	r1, #1
 80040f0:	4099      	lsls	r1, r3
 80040f2:	000b      	movs	r3, r1
 80040f4:	43d9      	mvns	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	400a      	ands	r2, r1
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b10      	cmp	r3, #16
 8004104:	d007      	beq.n	8004116 <HAL_ADC_ConfigChannel+0x1ae>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b11      	cmp	r3, #17
 800410c:	d003      	beq.n	8004116 <HAL_ADC_ConfigChannel+0x1ae>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b12      	cmp	r3, #18
 8004114:	d11c      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_ADC_ConfigChannel+0x204>)
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b10      	cmp	r3, #16
 8004120:	d007      	beq.n	8004132 <HAL_ADC_ConfigChannel+0x1ca>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b11      	cmp	r3, #17
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x1c6>
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_ADC_ConfigChannel+0x210>)
 800412c:	e002      	b.n	8004134 <HAL_ADC_ConfigChannel+0x1cc>
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_ADC_ConfigChannel+0x214>)
 8004130:	e000      	b.n	8004134 <HAL_ADC_ConfigChannel+0x1cc>
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_ADC_ConfigChannel+0x218>)
 8004134:	4a0d      	ldr	r2, [pc, #52]	; (800416c <HAL_ADC_ConfigChannel+0x204>)
 8004136:	400b      	ands	r3, r1
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e009      	b.n	8004150 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	2220      	movs	r2, #32
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004148:	230f      	movs	r3, #15
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2234      	movs	r2, #52	; 0x34
 8004154:	2100      	movs	r1, #0
 8004156:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004158:	230f      	movs	r3, #15
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	781b      	ldrb	r3, [r3, #0]
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	00001001 	.word	0x00001001
 800416c:	40012708 	.word	0x40012708
 8004170:	2000007c 	.word	0x2000007c
 8004174:	000f4240 	.word	0x000f4240
 8004178:	ffbfffff 	.word	0xffbfffff
 800417c:	feffffff 	.word	0xfeffffff
 8004180:	ff7fffff 	.word	0xff7fffff

08004184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	0002      	movs	r2, r0
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004190:	1dfb      	adds	r3, r7, #7
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b7f      	cmp	r3, #127	; 0x7f
 8004196:	d809      	bhi.n	80041ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	001a      	movs	r2, r3
 800419e:	231f      	movs	r3, #31
 80041a0:	401a      	ands	r2, r3
 80041a2:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <__NVIC_EnableIRQ+0x30>)
 80041a4:	2101      	movs	r1, #1
 80041a6:	4091      	lsls	r1, r2
 80041a8:	000a      	movs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
  }
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b002      	add	sp, #8
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	e000e100 	.word	0xe000e100

080041b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	0002      	movs	r2, r0
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	1dfb      	adds	r3, r7, #7
 80041c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041c6:	1dfb      	adds	r3, r7, #7
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b7f      	cmp	r3, #127	; 0x7f
 80041cc:	d828      	bhi.n	8004220 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041ce:	4a2f      	ldr	r2, [pc, #188]	; (800428c <__NVIC_SetPriority+0xd4>)
 80041d0:	1dfb      	adds	r3, r7, #7
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b25b      	sxtb	r3, r3
 80041d6:	089b      	lsrs	r3, r3, #2
 80041d8:	33c0      	adds	r3, #192	; 0xc0
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	589b      	ldr	r3, [r3, r2]
 80041de:	1dfa      	adds	r2, r7, #7
 80041e0:	7812      	ldrb	r2, [r2, #0]
 80041e2:	0011      	movs	r1, r2
 80041e4:	2203      	movs	r2, #3
 80041e6:	400a      	ands	r2, r1
 80041e8:	00d2      	lsls	r2, r2, #3
 80041ea:	21ff      	movs	r1, #255	; 0xff
 80041ec:	4091      	lsls	r1, r2
 80041ee:	000a      	movs	r2, r1
 80041f0:	43d2      	mvns	r2, r2
 80041f2:	401a      	ands	r2, r3
 80041f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	401a      	ands	r2, r3
 80041fe:	1dfb      	adds	r3, r7, #7
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	0018      	movs	r0, r3
 8004204:	2303      	movs	r3, #3
 8004206:	4003      	ands	r3, r0
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800420c:	481f      	ldr	r0, [pc, #124]	; (800428c <__NVIC_SetPriority+0xd4>)
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b25b      	sxtb	r3, r3
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	430a      	orrs	r2, r1
 8004218:	33c0      	adds	r3, #192	; 0xc0
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800421e:	e031      	b.n	8004284 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004220:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <__NVIC_SetPriority+0xd8>)
 8004222:	1dfb      	adds	r3, r7, #7
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	0019      	movs	r1, r3
 8004228:	230f      	movs	r3, #15
 800422a:	400b      	ands	r3, r1
 800422c:	3b08      	subs	r3, #8
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	3306      	adds	r3, #6
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	18d3      	adds	r3, r2, r3
 8004236:	3304      	adds	r3, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	1dfa      	adds	r2, r7, #7
 800423c:	7812      	ldrb	r2, [r2, #0]
 800423e:	0011      	movs	r1, r2
 8004240:	2203      	movs	r2, #3
 8004242:	400a      	ands	r2, r1
 8004244:	00d2      	lsls	r2, r2, #3
 8004246:	21ff      	movs	r1, #255	; 0xff
 8004248:	4091      	lsls	r1, r2
 800424a:	000a      	movs	r2, r1
 800424c:	43d2      	mvns	r2, r2
 800424e:	401a      	ands	r2, r3
 8004250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	019b      	lsls	r3, r3, #6
 8004256:	22ff      	movs	r2, #255	; 0xff
 8004258:	401a      	ands	r2, r3
 800425a:	1dfb      	adds	r3, r7, #7
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	0018      	movs	r0, r3
 8004260:	2303      	movs	r3, #3
 8004262:	4003      	ands	r3, r0
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004268:	4809      	ldr	r0, [pc, #36]	; (8004290 <__NVIC_SetPriority+0xd8>)
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	001c      	movs	r4, r3
 8004270:	230f      	movs	r3, #15
 8004272:	4023      	ands	r3, r4
 8004274:	3b08      	subs	r3, #8
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	430a      	orrs	r2, r1
 800427a:	3306      	adds	r3, #6
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	18c3      	adds	r3, r0, r3
 8004280:	3304      	adds	r3, #4
 8004282:	601a      	str	r2, [r3, #0]
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	b003      	add	sp, #12
 800428a:	bd90      	pop	{r4, r7, pc}
 800428c:	e000e100 	.word	0xe000e100
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	045b      	lsls	r3, r3, #17
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d301      	bcc.n	80042ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042a8:	2301      	movs	r3, #1
 80042aa:	e010      	b.n	80042ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <SysTick_Config+0x44>)
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	3a01      	subs	r2, #1
 80042b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b4:	2301      	movs	r3, #1
 80042b6:	425b      	negs	r3, r3
 80042b8:	2103      	movs	r1, #3
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7ff ff7c 	bl	80041b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <SysTick_Config+0x44>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <SysTick_Config+0x44>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	e000e010 	.word	0xe000e010

080042dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	210f      	movs	r1, #15
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	1c02      	adds	r2, r0, #0
 80042ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff ff5d 	bl	80041b8 <__NVIC_SetPriority>
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b004      	add	sp, #16
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	0002      	movs	r2, r0
 800430e:	1dfb      	adds	r3, r7, #7
 8004310:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b25b      	sxtb	r3, r3
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff ff33 	bl	8004184 <__NVIC_EnableIRQ>
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b002      	add	sp, #8
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff ffaf 	bl	8004294 <SysTick_Config>
 8004336:	0003      	movs	r3, r0
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e036      	b.n	80043c4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2221      	movs	r2, #33	; 0x21
 800435a:	2102      	movs	r1, #2
 800435c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_DMA_Init+0x8c>)
 800436a:	4013      	ands	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 f906 	bl	80045b8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2221      	movs	r2, #33	; 0x21
 80043b6:	2101      	movs	r1, #1
 80043b8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}  
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	ffffc00f 	.word	0xffffc00f

080043d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2221      	movs	r2, #33	; 0x21
 80043e4:	5c9b      	ldrb	r3, [r3, r2]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d006      	beq.n	80043fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2204      	movs	r2, #4
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	e028      	b.n	800444c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	210e      	movs	r1, #14
 8004406:	438a      	bics	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2101      	movs	r1, #1
 8004416:	438a      	bics	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2101      	movs	r1, #1
 8004424:	4091      	lsls	r1, r2
 8004426:	000a      	movs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2221      	movs	r2, #33	; 0x21
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	0010      	movs	r0, r2
 800444a:	4798      	blx	r3
    } 
  }
  return status;
 800444c:	230f      	movs	r3, #15
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	781b      	ldrb	r3, [r3, #0]
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2204      	movs	r2, #4
 8004478:	409a      	lsls	r2, r3
 800447a:	0013      	movs	r3, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4013      	ands	r3, r2
 8004480:	d024      	beq.n	80044cc <HAL_DMA_IRQHandler+0x72>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2204      	movs	r2, #4
 8004486:	4013      	ands	r3, r2
 8004488:	d020      	beq.n	80044cc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2220      	movs	r2, #32
 8004492:	4013      	ands	r3, r2
 8004494:	d107      	bne.n	80044a6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2104      	movs	r1, #4
 80044a2:	438a      	bics	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	2104      	movs	r1, #4
 80044b0:	4091      	lsls	r1, r2
 80044b2:	000a      	movs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d100      	bne.n	80044c0 <HAL_DMA_IRQHandler+0x66>
 80044be:	e06a      	b.n	8004596 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	0010      	movs	r0, r2
 80044c8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80044ca:	e064      	b.n	8004596 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	2202      	movs	r2, #2
 80044d2:	409a      	lsls	r2, r3
 80044d4:	0013      	movs	r3, r2
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4013      	ands	r3, r2
 80044da:	d02b      	beq.n	8004534 <HAL_DMA_IRQHandler+0xda>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2202      	movs	r2, #2
 80044e0:	4013      	ands	r3, r2
 80044e2:	d027      	beq.n	8004534 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	4013      	ands	r3, r2
 80044ee:	d10b      	bne.n	8004508 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	210a      	movs	r1, #10
 80044fc:	438a      	bics	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2221      	movs	r2, #33	; 0x21
 8004504:	2101      	movs	r1, #1
 8004506:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	2102      	movs	r1, #2
 8004512:	4091      	lsls	r1, r2
 8004514:	000a      	movs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d036      	beq.n	8004596 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	0010      	movs	r0, r2
 8004530:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004532:	e030      	b.n	8004596 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	2208      	movs	r2, #8
 800453a:	409a      	lsls	r2, r3
 800453c:	0013      	movs	r3, r2
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4013      	ands	r3, r2
 8004542:	d028      	beq.n	8004596 <HAL_DMA_IRQHandler+0x13c>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2208      	movs	r2, #8
 8004548:	4013      	ands	r3, r2
 800454a:	d024      	beq.n	8004596 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	210e      	movs	r1, #14
 8004558:	438a      	bics	r2, r1
 800455a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	2101      	movs	r1, #1
 8004566:	4091      	lsls	r1, r2
 8004568:	000a      	movs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2221      	movs	r2, #33	; 0x21
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	0010      	movs	r0, r2
 8004592:	4798      	blx	r3
    }
   }
}  
 8004594:	e7ff      	b.n	8004596 <HAL_DMA_IRQHandler+0x13c>
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b004      	add	sp, #16
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2221      	movs	r2, #33	; 0x21
 80045aa:	5c9b      	ldrb	r3, [r3, r2]
 80045ac:	b2db      	uxtb	r3, r3
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	001a      	movs	r2, r3
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <DMA_CalcBaseAndBitshift+0x60>)
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d810      	bhi.n	80045ee <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <DMA_CalcBaseAndBitshift+0x64>)
 80045d2:	4694      	mov	ip, r2
 80045d4:	4463      	add	r3, ip
 80045d6:	2114      	movs	r1, #20
 80045d8:	0018      	movs	r0, r3
 80045da:	f7fb fd9d 	bl	8000118 <__udivsi3>
 80045de:	0003      	movs	r3, r0
 80045e0:	009a      	lsls	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <DMA_CalcBaseAndBitshift+0x68>)
 80045ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80045ec:	e00f      	b.n	800460e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <DMA_CalcBaseAndBitshift+0x6c>)
 80045f4:	4694      	mov	ip, r2
 80045f6:	4463      	add	r3, ip
 80045f8:	2114      	movs	r1, #20
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7fb fd8c 	bl	8000118 <__udivsi3>
 8004600:	0003      	movs	r3, r0
 8004602:	009a      	lsls	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a07      	ldr	r2, [pc, #28]	; (8004628 <DMA_CalcBaseAndBitshift+0x70>)
 800460c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	40020407 	.word	0x40020407
 800461c:	bffdfff8 	.word	0xbffdfff8
 8004620:	40020000 	.word	0x40020000
 8004624:	bffdfbf8 	.word	0xbffdfbf8
 8004628:	40020400 	.word	0x40020400

0800462c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800463a:	e155      	b.n	80048e8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2101      	movs	r1, #1
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4091      	lsls	r1, r2
 8004646:	000a      	movs	r2, r1
 8004648:	4013      	ands	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d100      	bne.n	8004654 <HAL_GPIO_Init+0x28>
 8004652:	e146      	b.n	80048e2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2203      	movs	r2, #3
 800465a:	4013      	ands	r3, r2
 800465c:	2b01      	cmp	r3, #1
 800465e:	d005      	beq.n	800466c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2203      	movs	r2, #3
 8004666:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004668:	2b02      	cmp	r3, #2
 800466a:	d130      	bne.n	80046ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	2203      	movs	r2, #3
 8004678:	409a      	lsls	r2, r3
 800467a:	0013      	movs	r3, r2
 800467c:	43da      	mvns	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	409a      	lsls	r2, r3
 800468e:	0013      	movs	r3, r2
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a2:	2201      	movs	r2, #1
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
 80046a8:	0013      	movs	r3, r2
 80046aa:	43da      	mvns	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	2201      	movs	r2, #1
 80046ba:	401a      	ands	r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2203      	movs	r2, #3
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d017      	beq.n	800470a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	2203      	movs	r2, #3
 80046e6:	409a      	lsls	r2, r3
 80046e8:	0013      	movs	r3, r2
 80046ea:	43da      	mvns	r2, r3
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2203      	movs	r2, #3
 8004710:	4013      	ands	r3, r2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d123      	bne.n	800475e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	08da      	lsrs	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3208      	adds	r2, #8
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	58d3      	ldr	r3, [r2, r3]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2207      	movs	r2, #7
 8004728:	4013      	ands	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	220f      	movs	r2, #15
 800472e:	409a      	lsls	r2, r3
 8004730:	0013      	movs	r3, r2
 8004732:	43da      	mvns	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2107      	movs	r1, #7
 8004742:	400b      	ands	r3, r1
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	409a      	lsls	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	08da      	lsrs	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3208      	adds	r2, #8
 8004758:	0092      	lsls	r2, r2, #2
 800475a:	6939      	ldr	r1, [r7, #16]
 800475c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	2203      	movs	r2, #3
 800476a:	409a      	lsls	r2, r3
 800476c:	0013      	movs	r3, r2
 800476e:	43da      	mvns	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2203      	movs	r2, #3
 800477c:	401a      	ands	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	23c0      	movs	r3, #192	; 0xc0
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	4013      	ands	r3, r2
 800479c:	d100      	bne.n	80047a0 <HAL_GPIO_Init+0x174>
 800479e:	e0a0      	b.n	80048e2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a0:	4b57      	ldr	r3, [pc, #348]	; (8004900 <HAL_GPIO_Init+0x2d4>)
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	4b56      	ldr	r3, [pc, #344]	; (8004900 <HAL_GPIO_Init+0x2d4>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
 80047ac:	4b54      	ldr	r3, [pc, #336]	; (8004900 <HAL_GPIO_Init+0x2d4>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2201      	movs	r2, #1
 80047b2:	4013      	ands	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047b8:	4a52      	ldr	r2, [pc, #328]	; (8004904 <HAL_GPIO_Init+0x2d8>)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	3302      	adds	r3, #2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	589b      	ldr	r3, [r3, r2]
 80047c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2203      	movs	r2, #3
 80047ca:	4013      	ands	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	220f      	movs	r2, #15
 80047d0:	409a      	lsls	r2, r3
 80047d2:	0013      	movs	r3, r2
 80047d4:	43da      	mvns	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	2390      	movs	r3, #144	; 0x90
 80047e0:	05db      	lsls	r3, r3, #23
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x1ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a47      	ldr	r2, [pc, #284]	; (8004908 <HAL_GPIO_Init+0x2dc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x1ea>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a46      	ldr	r2, [pc, #280]	; (800490c <HAL_GPIO_Init+0x2e0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x1e6>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a45      	ldr	r2, [pc, #276]	; (8004910 <HAL_GPIO_Init+0x2e4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x1e2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a44      	ldr	r2, [pc, #272]	; (8004914 <HAL_GPIO_Init+0x2e8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x1de>
 8004806:	2304      	movs	r3, #4
 8004808:	e008      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 800480a:	2305      	movs	r3, #5
 800480c:	e006      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 800480e:	2303      	movs	r3, #3
 8004810:	e004      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 8004812:	2302      	movs	r3, #2
 8004814:	e002      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_GPIO_Init+0x1f0>
 800481a:	2300      	movs	r3, #0
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	2103      	movs	r1, #3
 8004820:	400a      	ands	r2, r1
 8004822:	0092      	lsls	r2, r2, #2
 8004824:	4093      	lsls	r3, r2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800482c:	4935      	ldr	r1, [pc, #212]	; (8004904 <HAL_GPIO_Init+0x2d8>)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800483a:	4b37      	ldr	r3, [pc, #220]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	43da      	mvns	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	025b      	lsls	r3, r3, #9
 8004852:	4013      	ands	r3, r2
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004864:	4b2c      	ldr	r3, [pc, #176]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	43da      	mvns	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	029b      	lsls	r3, r3, #10
 800487c:	4013      	ands	r3, r2
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004888:	4b23      	ldr	r3, [pc, #140]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43da      	mvns	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	035b      	lsls	r3, r3, #13
 80048a6:	4013      	ands	r3, r2
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	039b      	lsls	r3, r3, #14
 80048d0:	4013      	ands	r3, r2
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_GPIO_Init+0x2ec>)
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	3301      	adds	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	40da      	lsrs	r2, r3
 80048f0:	1e13      	subs	r3, r2, #0
 80048f2:	d000      	beq.n	80048f6 <HAL_GPIO_Init+0x2ca>
 80048f4:	e6a2      	b.n	800463c <HAL_GPIO_Init+0x10>
  } 
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	40010000 	.word	0x40010000
 8004908:	48000400 	.word	0x48000400
 800490c:	48000800 	.word	0x48000800
 8004910:	48000c00 	.word	0x48000c00
 8004914:	48001000 	.word	0x48001000
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	000a      	movs	r2, r1
 8004926:	1cbb      	adds	r3, r7, #2
 8004928:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	1cba      	adds	r2, r7, #2
 8004930:	8812      	ldrh	r2, [r2, #0]
 8004932:	4013      	ands	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004936:	230f      	movs	r3, #15
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e003      	b.n	8004948 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004940:	230f      	movs	r3, #15
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004948:	230f      	movs	r3, #15
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
  }
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	0008      	movs	r0, r1
 8004960:	0011      	movs	r1, r2
 8004962:	1cbb      	adds	r3, r7, #2
 8004964:	1c02      	adds	r2, r0, #0
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	1c7b      	adds	r3, r7, #1
 800496a:	1c0a      	adds	r2, r1, #0
 800496c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800496e:	1c7b      	adds	r3, r7, #1
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004976:	1cbb      	adds	r3, r7, #2
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800497e:	e003      	b.n	8004988 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004980:	1cbb      	adds	r3, r7, #2
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	0002      	movs	r2, r0
 8004998:	1dbb      	adds	r3, r7, #6
 800499a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	1dba      	adds	r2, r7, #6
 80049a2:	8812      	ldrh	r2, [r2, #0]
 80049a4:	4013      	ands	r3, r2
 80049a6:	d008      	beq.n	80049ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80049aa:	1dba      	adds	r2, r7, #6
 80049ac:	8812      	ldrh	r2, [r2, #0]
 80049ae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049b0:	1dbb      	adds	r3, r7, #6
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7fd ffe3 	bl	8002980 <HAL_GPIO_EXTI_Callback>
  }
}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	46bd      	mov	sp, r7
 80049be:	b002      	add	sp, #8
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	40010400 	.word	0x40010400

080049c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e082      	b.n	8004ae0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2241      	movs	r2, #65	; 0x41
 80049de:	5c9b      	ldrb	r3, [r3, r2]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d107      	bne.n	80049f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2240      	movs	r2, #64	; 0x40
 80049ea:	2100      	movs	r1, #0
 80049ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fe fef7 	bl	80037e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2241      	movs	r2, #65	; 0x41
 80049fa:	2124      	movs	r1, #36	; 0x24
 80049fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2101      	movs	r1, #1
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4934      	ldr	r1, [pc, #208]	; (8004ae8 <HAL_I2C_Init+0x120>)
 8004a18:	400a      	ands	r2, r1
 8004a1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4931      	ldr	r1, [pc, #196]	; (8004aec <HAL_I2C_Init+0x124>)
 8004a28:	400a      	ands	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d108      	bne.n	8004a46 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	0209      	lsls	r1, r1, #8
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	e007      	b.n	8004a56 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2184      	movs	r1, #132	; 0x84
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d104      	bne.n	8004a68 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2280      	movs	r2, #128	; 0x80
 8004a64:	0112      	lsls	r2, r2, #4
 8004a66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	491f      	ldr	r1, [pc, #124]	; (8004af0 <HAL_I2C_Init+0x128>)
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	491a      	ldr	r1, [pc, #104]	; (8004aec <HAL_I2C_Init+0x124>)
 8004a84:	400a      	ands	r2, r1
 8004a86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69d9      	ldr	r1, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1a      	ldr	r2, [r3, #32]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2101      	movs	r1, #1
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2241      	movs	r2, #65	; 0x41
 8004acc:	2120      	movs	r1, #32
 8004ace:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2242      	movs	r2, #66	; 0x42
 8004ada:	2100      	movs	r1, #0
 8004adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	f0ffffff 	.word	0xf0ffffff
 8004aec:	ffff7fff 	.word	0xffff7fff
 8004af0:	02008000 	.word	0x02008000

08004af4 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	0008      	movs	r0, r1
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	0019      	movs	r1, r3
 8004b02:	230a      	movs	r3, #10
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	1c02      	adds	r2, r0, #0
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	1c0a      	adds	r2, r1, #0
 8004b10:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2241      	movs	r2, #65	; 0x41
 8004b16:	5c9b      	ldrb	r3, [r3, r2]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d15b      	bne.n	8004bd6 <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699a      	ldr	r2, [r3, #24]
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	401a      	ands	r2, r3
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d101      	bne.n	8004b36 <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
 8004b34:	e050      	b.n	8004bd8 <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	5c9b      	ldrb	r3, [r3, r2]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2C_Master_Receive_IT+0x50>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e049      	b.n	8004bd8 <HAL_I2C_Master_Receive_IT+0xe4>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	2101      	movs	r1, #1
 8004b4a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2241      	movs	r2, #65	; 0x41
 8004b50:	2122      	movs	r1, #34	; 0x22
 8004b52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2242      	movs	r2, #66	; 0x42
 8004b58:	2110      	movs	r1, #16
 8004b5a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	18ba      	adds	r2, r7, r2
 8004b6e:	8812      	ldrh	r2, [r2, #0]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_I2C_Master_Receive_IT+0xec>)
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <HAL_I2C_Master_Receive_IT+0xf0>)
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2bff      	cmp	r3, #255	; 0xff
 8004b86:	d906      	bls.n	8004b96 <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	22ff      	movs	r2, #255	; 0xff
 8004b8c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	045b      	lsls	r3, r3, #17
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e007      	b.n	8004ba6 <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	049b      	lsls	r3, r3, #18
 8004ba4:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	697c      	ldr	r4, [r7, #20]
 8004bae:	230a      	movs	r3, #10
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	8819      	ldrh	r1, [r3, #0]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_I2C_Master_Receive_IT+0xf4>)
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	0023      	movs	r3, r4
 8004bbc:	f001 f9a6 	bl	8005f0c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2240      	movs	r2, #64	; 0x40
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2102      	movs	r1, #2
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f001 f9d3 	bl	8005f78 <I2C_Enable_IRQ>

    return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b007      	add	sp, #28
 8004bde:	bd90      	pop	{r4, r7, pc}
 8004be0:	ffff0000 	.word	0xffff0000
 8004be4:	08004c8d 	.word	0x08004c8d
 8004be8:	80002400 	.word	0x80002400

08004bec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b002      	add	sp, #8
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b002      	add	sp, #8
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	0008      	movs	r0, r1
 8004c26:	0011      	movs	r1, r2
 8004c28:	1cfb      	adds	r3, r7, #3
 8004c2a:	1c02      	adds	r2, r0, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	003b      	movs	r3, r7
 8004c30:	1c0a      	adds	r2, r1, #0
 8004c32:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b002      	add	sp, #8
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	5c9b      	ldrb	r3, [r3, r2]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <I2C_Master_ISR_IT+0x1e>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e12b      	b.n	8004f02 <I2C_Master_ISR_IT+0x276>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	2101      	movs	r1, #1
 8004cb0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d014      	beq.n	8004ce8 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004cc8:	d00e      	beq.n	8004ce8 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2210      	movs	r2, #16
 8004cd0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f001 f8d2 	bl	8005e8a <I2C_Flush_TXDR>
 8004ce6:	e0f5      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	089b      	lsrs	r3, r3, #2
 8004cec:	001a      	movs	r2, r3
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d023      	beq.n	8004d3c <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	001a      	movs	r2, r3
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004cfe:	d01d      	beq.n	8004d3c <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2204      	movs	r2, #4
 8004d04:	4393      	bics	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d3a:	e0cb      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	001a      	movs	r2, r3
 8004d42:	2301      	movs	r3, #1
 8004d44:	4013      	ands	r3, r2
 8004d46:	d01e      	beq.n	8004d86 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d52:	d018      	beq.n	8004d86 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d84:	e0a6      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	09db      	lsrs	r3, r3, #7
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d100      	bne.n	8004d94 <I2C_Master_ISR_IT+0x108>
 8004d92:	e06b      	b.n	8004e6c <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	001a      	movs	r2, r3
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d9e:	d065      	beq.n	8004e6c <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04a      	beq.n	8004e40 <I2C_Master_ISR_IT+0x1b4>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d146      	bne.n	8004e40 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	2112      	movs	r1, #18
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	0592      	lsls	r2, r2, #22
 8004dc0:	0d92      	lsrs	r2, r2, #22
 8004dc2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2bff      	cmp	r3, #255	; 0xff
 8004dcc:	d910      	bls.n	8004df0 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	045c      	lsls	r4, r3, #17
 8004dde:	187b      	adds	r3, r7, r1
 8004de0:	8819      	ldrh	r1, [r3, #0]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	0023      	movs	r3, r4
 8004dea:	f001 f88f 	bl	8005f0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dee:	e03c      	b.n	8004e6a <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	4a43      	ldr	r2, [pc, #268]	; (8004f0c <I2C_Master_ISR_IT+0x280>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004e0e:	2312      	movs	r3, #18
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	8819      	ldrh	r1, [r3, #0]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	0023      	movs	r3, r4
 8004e1c:	f001 f876 	bl	8005f0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e20:	e023      	b.n	8004e6a <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	049c      	lsls	r4, r3, #18
 8004e2c:	2312      	movs	r3, #18
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	8819      	ldrh	r1, [r3, #0]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	0023      	movs	r3, r4
 8004e3a:	f001 f867 	bl	8005f0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e3e:	e014      	b.n	8004e6a <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	049b      	lsls	r3, r3, #18
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	049b      	lsls	r3, r3, #18
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d004      	beq.n	8004e5e <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fc14 	bl	8005684 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e5c:	e03a      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2140      	movs	r1, #64	; 0x40
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 ff06 	bl	8005c74 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e68:	e034      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
 8004e6a:	e033      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	001a      	movs	r2, r3
 8004e72:	2301      	movs	r3, #1
 8004e74:	4013      	ands	r3, r2
 8004e76:	d02d      	beq.n	8004ed4 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004e82:	d027      	beq.n	8004ed4 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d11d      	bne.n	8004eca <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	049b      	lsls	r3, r3, #18
 8004e98:	401a      	ands	r2, r3
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	049b      	lsls	r3, r3, #18
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d018      	beq.n	8004ed4 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <I2C_Master_ISR_IT+0x280>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d109      	bne.n	8004ec0 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	01c9      	lsls	r1, r1, #7
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	e009      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 fbde 	bl	8005684 <I2C_ITMasterSeqCplt>
 8004ec8:	e004      	b.n	8004ed4 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2140      	movs	r1, #64	; 0x40
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 fed0 	bl	8005c74 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	001a      	movs	r2, r3
 8004eda:	2301      	movs	r3, #1
 8004edc:	4013      	ands	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004eea:	d005      	beq.n	8004ef8 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	0011      	movs	r1, r2
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 fc6e 	bl	80057d4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2240      	movs	r2, #64	; 0x40
 8004efc:	2100      	movs	r1, #0
 8004efe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b007      	add	sp, #28
 8004f08:	bd90      	pop	{r4, r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	ffff0000 	.word	0xffff0000

08004f10 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2240      	movs	r2, #64	; 0x40
 8004f2a:	5c9b      	ldrb	r3, [r3, r2]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <I2C_Slave_ISR_IT+0x24>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0fa      	b.n	800512a <I2C_Slave_ISR_IT+0x21a>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	2101      	movs	r1, #1
 8004f3a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	001a      	movs	r2, r3
 8004f42:	2301      	movs	r3, #1
 8004f44:	4013      	ands	r3, r2
 8004f46:	d00b      	beq.n	8004f60 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f52:	d005      	beq.n	8004f60 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	0011      	movs	r1, r2
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 fd0c 	bl	8005978 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	001a      	movs	r2, r3
 8004f66:	2301      	movs	r3, #1
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d054      	beq.n	8005016 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	001a      	movs	r2, r3
 8004f72:	2301      	movs	r3, #1
 8004f74:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f76:	d04e      	beq.n	8005016 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d12d      	bne.n	8004fde <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2241      	movs	r2, #65	; 0x41
 8004f86:	5c9b      	ldrb	r3, [r3, r2]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b28      	cmp	r3, #40	; 0x28
 8004f8c:	d10b      	bne.n	8004fa6 <I2C_Slave_ISR_IT+0x96>
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	049b      	lsls	r3, r3, #18
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d106      	bne.n	8004fa6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0011      	movs	r1, r2
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fe0e 	bl	8005bc0 <I2C_ITListenCplt>
 8004fa4:	e036      	b.n	8005014 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2241      	movs	r2, #65	; 0x41
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b29      	cmp	r3, #41	; 0x29
 8004fb0:	d110      	bne.n	8004fd4 <I2C_Slave_ISR_IT+0xc4>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4a5f      	ldr	r2, [pc, #380]	; (8005134 <I2C_Slave_ISR_IT+0x224>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00c      	beq.n	8004fd4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 ff60 	bl	8005e8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 fb9b 	bl	8005708 <I2C_ITSlaveSeqCplt>
 8004fd2:	e01f      	b.n	8005014 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004fdc:	e09d      	b.n	800511a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	2204      	movs	r2, #4
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <I2C_Slave_ISR_IT+0xf4>
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	045b      	lsls	r3, r3, #17
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d000      	beq.n	8005004 <I2C_Slave_ISR_IT+0xf4>
 8005002:	e08a      	b.n	800511a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	0011      	movs	r1, r2
 800500c:	0018      	movs	r0, r3
 800500e:	f000 fe31 	bl	8005c74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005012:	e082      	b.n	800511a <I2C_Slave_ISR_IT+0x20a>
 8005014:	e081      	b.n	800511a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	001a      	movs	r2, r3
 800501c:	2301      	movs	r3, #1
 800501e:	4013      	ands	r3, r2
 8005020:	d031      	beq.n	8005086 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	089b      	lsrs	r3, r3, #2
 8005026:	001a      	movs	r2, r3
 8005028:	2301      	movs	r3, #1
 800502a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800502c:	d02b      	beq.n	8005086 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d018      	beq.n	800506a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d154      	bne.n	800511e <I2C_Slave_ISR_IT+0x20e>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4a2f      	ldr	r2, [pc, #188]	; (8005134 <I2C_Slave_ISR_IT+0x224>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d050      	beq.n	800511e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	0018      	movs	r0, r3
 8005080:	f000 fb42 	bl	8005708 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005084:	e04b      	b.n	800511e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	08db      	lsrs	r3, r3, #3
 800508a:	001a      	movs	r2, r3
 800508c:	2301      	movs	r3, #1
 800508e:	4013      	ands	r3, r2
 8005090:	d00c      	beq.n	80050ac <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	001a      	movs	r2, r3
 8005098:	2301      	movs	r3, #1
 800509a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800509c:	d006      	beq.n	80050ac <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	0011      	movs	r1, r2
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 fa49 	bl	800553c <I2C_ITAddrCplt>
 80050aa:	e039      	b.n	8005120 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	001a      	movs	r2, r3
 80050b2:	2301      	movs	r3, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d033      	beq.n	8005120 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	001a      	movs	r2, r3
 80050be:	2301      	movs	r3, #1
 80050c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050c2:	d02d      	beq.n	8005120 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80050fe:	e00f      	b.n	8005120 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	045b      	lsls	r3, r3, #17
 8005106:	429a      	cmp	r2, r3
 8005108:	d002      	beq.n	8005110 <I2C_Slave_ISR_IT+0x200>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	0018      	movs	r0, r3
 8005114:	f000 faf8 	bl	8005708 <I2C_ITSlaveSeqCplt>
 8005118:	e002      	b.n	8005120 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	e000      	b.n	8005120 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800511e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2240      	movs	r2, #64	; 0x40
 8005124:	2100      	movs	r1, #0
 8005126:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	0018      	movs	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	b006      	add	sp, #24
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	ffff0000 	.word	0xffff0000

08005138 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b089      	sub	sp, #36	; 0x24
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2240      	movs	r2, #64	; 0x40
 8005148:	5c9b      	ldrb	r3, [r3, r2]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <I2C_Master_ISR_DMA+0x1a>
 800514e:	2302      	movs	r3, #2
 8005150:	e0f7      	b.n	8005342 <I2C_Master_ISR_DMA+0x20a>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2240      	movs	r2, #64	; 0x40
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	001a      	movs	r2, r3
 8005160:	2301      	movs	r3, #1
 8005162:	4013      	ands	r3, r2
 8005164:	d019      	beq.n	800519a <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	001a      	movs	r2, r3
 800516c:	2301      	movs	r3, #1
 800516e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005170:	d013      	beq.n	800519a <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2210      	movs	r2, #16
 8005178:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	2204      	movs	r2, #4
 8005180:	431a      	orrs	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2120      	movs	r1, #32
 800518a:	0018      	movs	r0, r3
 800518c:	f000 fef4 	bl	8005f78 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	0018      	movs	r0, r3
 8005194:	f000 fe79 	bl	8005e8a <I2C_Flush_TXDR>
 8005198:	e0ce      	b.n	8005338 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	09db      	lsrs	r3, r3, #7
 800519e:	001a      	movs	r2, r3
 80051a0:	2301      	movs	r3, #1
 80051a2:	4013      	ands	r3, r2
 80051a4:	d100      	bne.n	80051a8 <I2C_Master_ISR_DMA+0x70>
 80051a6:	e07e      	b.n	80052a6 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	099b      	lsrs	r3, r3, #6
 80051ac:	001a      	movs	r2, r3
 80051ae:	2301      	movs	r3, #1
 80051b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051b2:	d100      	bne.n	80051b6 <I2C_Master_ISR_DMA+0x7e>
 80051b4:	e077      	b.n	80052a6 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	438a      	bics	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d055      	beq.n	800527c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	2312      	movs	r3, #18
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	0592      	lsls	r2, r2, #22
 80051de:	0d92      	lsrs	r2, r2, #22
 80051e0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d906      	bls.n	80051fa <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	22ff      	movs	r2, #255	; 0xff
 80051f0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	045b      	lsls	r3, r3, #17
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e010      	b.n	800521c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	4a50      	ldr	r2, [pc, #320]	; (800534c <I2C_Master_ISR_DMA+0x214>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e002      	b.n	800521c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	049b      	lsls	r3, r3, #18
 800521a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	b2da      	uxtb	r2, r3
 8005222:	697c      	ldr	r4, [r7, #20]
 8005224:	2312      	movs	r3, #18
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	8819      	ldrh	r1, [r3, #0]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	2300      	movs	r3, #0
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	0023      	movs	r3, r4
 8005232:	f000 fe6b 	bl	8005f0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2241      	movs	r2, #65	; 0x41
 800524c:	5c9b      	ldrb	r3, [r3, r2]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b22      	cmp	r3, #34	; 0x22
 8005252:	d109      	bne.n	8005268 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	0209      	lsls	r1, r1, #8
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005266:	e067      	b.n	8005338 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	01c9      	lsls	r1, r1, #7
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800527a:	e05d      	b.n	8005338 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	049b      	lsls	r3, r3, #18
 8005286:	401a      	ands	r2, r3
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	049b      	lsls	r3, r3, #18
 800528c:	429a      	cmp	r2, r3
 800528e:	d004      	beq.n	800529a <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	0018      	movs	r0, r3
 8005294:	f000 f9f6 	bl	8005684 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005298:	e04e      	b.n	8005338 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2140      	movs	r1, #64	; 0x40
 800529e:	0018      	movs	r0, r3
 80052a0:	f000 fce8 	bl	8005c74 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80052a4:	e048      	b.n	8005338 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	001a      	movs	r2, r3
 80052ac:	2301      	movs	r3, #1
 80052ae:	4013      	ands	r3, r2
 80052b0:	d02e      	beq.n	8005310 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	001a      	movs	r2, r3
 80052b8:	2301      	movs	r3, #1
 80052ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052bc:	d028      	beq.n	8005310 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11d      	bne.n	8005304 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	049b      	lsls	r3, r3, #18
 80052d2:	401a      	ands	r2, r3
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	049b      	lsls	r3, r3, #18
 80052d8:	429a      	cmp	r2, r3
 80052da:	d02c      	beq.n	8005336 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	4a1a      	ldr	r2, [pc, #104]	; (800534c <I2C_Master_ISR_DMA+0x214>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d109      	bne.n	80052fa <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	01c9      	lsls	r1, r1, #7
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80052f8:	e01d      	b.n	8005336 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f000 f9c1 	bl	8005684 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005302:	e018      	b.n	8005336 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2140      	movs	r1, #64	; 0x40
 8005308:	0018      	movs	r0, r3
 800530a:	f000 fcb3 	bl	8005c74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800530e:	e012      	b.n	8005336 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	001a      	movs	r2, r3
 8005316:	2301      	movs	r3, #1
 8005318:	4013      	ands	r3, r2
 800531a:	d00d      	beq.n	8005338 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	001a      	movs	r2, r3
 8005322:	2301      	movs	r3, #1
 8005324:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005326:	d007      	beq.n	8005338 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	0011      	movs	r1, r2
 800532e:	0018      	movs	r0, r3
 8005330:	f000 fa50 	bl	80057d4 <I2C_ITMasterCplt>
 8005334:	e000      	b.n	8005338 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8005336:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2240      	movs	r2, #64	; 0x40
 800533c:	2100      	movs	r1, #0
 800533e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	0018      	movs	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	b007      	add	sp, #28
 8005348:	bd90      	pop	{r4, r7, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	ffff0000 	.word	0xffff0000

08005350 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2240      	movs	r2, #64	; 0x40
 800536a:	5c9b      	ldrb	r3, [r3, r2]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <I2C_Slave_ISR_DMA+0x24>
 8005370:	2302      	movs	r3, #2
 8005372:	e0dd      	b.n	8005530 <I2C_Slave_ISR_DMA+0x1e0>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2240      	movs	r2, #64	; 0x40
 8005378:	2101      	movs	r1, #1
 800537a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	001a      	movs	r2, r3
 8005382:	2301      	movs	r3, #1
 8005384:	4013      	ands	r3, r2
 8005386:	d00b      	beq.n	80053a0 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	001a      	movs	r2, r3
 800538e:	2301      	movs	r3, #1
 8005390:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005392:	d005      	beq.n	80053a0 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	0011      	movs	r1, r2
 800539a:	0018      	movs	r0, r3
 800539c:	f000 faec 	bl	8005978 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	091b      	lsrs	r3, r3, #4
 80053a4:	001a      	movs	r2, r3
 80053a6:	2301      	movs	r3, #1
 80053a8:	4013      	ands	r3, r2
 80053aa:	d100      	bne.n	80053ae <I2C_Slave_ISR_DMA+0x5e>
 80053ac:	e0a9      	b.n	8005502 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	001a      	movs	r2, r3
 80053b4:	2301      	movs	r3, #1
 80053b6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053b8:	d100      	bne.n	80053bc <I2C_Slave_ISR_DMA+0x6c>
 80053ba:	e0a2      	b.n	8005502 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	0b9b      	lsrs	r3, r3, #14
 80053c0:	001a      	movs	r2, r3
 80053c2:	2301      	movs	r3, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	d106      	bne.n	80053d6 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0bdb      	lsrs	r3, r3, #15
 80053cc:	001a      	movs	r2, r3
 80053ce:	2301      	movs	r3, #1
 80053d0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80053d2:	d100      	bne.n	80053d6 <I2C_Slave_ISR_DMA+0x86>
 80053d4:	e08e      	b.n	80054f4 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0bdb      	lsrs	r3, r3, #15
 80053e2:	001a      	movs	r2, r3
 80053e4:	2301      	movs	r3, #1
 80053e6:	4013      	ands	r3, r2
 80053e8:	d007      	beq.n	80053fa <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 80053f6:	2301      	movs	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0b9b      	lsrs	r3, r3, #14
 8005406:	001a      	movs	r2, r3
 8005408:	2301      	movs	r3, #1
 800540a:	4013      	ands	r3, r2
 800540c:	d007      	beq.n	800541e <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 800541a:	2301      	movs	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d12d      	bne.n	8005480 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2241      	movs	r2, #65	; 0x41
 8005428:	5c9b      	ldrb	r3, [r3, r2]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b28      	cmp	r3, #40	; 0x28
 800542e:	d10b      	bne.n	8005448 <I2C_Slave_ISR_DMA+0xf8>
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	049b      	lsls	r3, r3, #18
 8005436:	429a      	cmp	r2, r3
 8005438:	d106      	bne.n	8005448 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	0011      	movs	r1, r2
 8005440:	0018      	movs	r0, r3
 8005442:	f000 fbbd 	bl	8005bc0 <I2C_ITListenCplt>
 8005446:	e054      	b.n	80054f2 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2241      	movs	r2, #65	; 0x41
 800544c:	5c9b      	ldrb	r3, [r3, r2]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b29      	cmp	r3, #41	; 0x29
 8005452:	d110      	bne.n	8005476 <I2C_Slave_ISR_DMA+0x126>
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	4a38      	ldr	r2, [pc, #224]	; (8005538 <I2C_Slave_ISR_DMA+0x1e8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00c      	beq.n	8005476 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2210      	movs	r2, #16
 8005462:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	0018      	movs	r0, r3
 8005468:	f000 fd0f 	bl	8005e8a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 f94a 	bl	8005708 <I2C_ITSlaveSeqCplt>
 8005474:	e03d      	b.n	80054f2 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2210      	movs	r2, #16
 800547c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800547e:	e03e      	b.n	80054fe <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2210      	movs	r2, #16
 8005486:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	2204      	movs	r2, #4
 800548e:	431a      	orrs	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005494:	2317      	movs	r3, #23
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	2141      	movs	r1, #65	; 0x41
 800549c:	5c52      	ldrb	r2, [r2, r1]
 800549e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <I2C_Slave_ISR_DMA+0x160>
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	045b      	lsls	r3, r3, #17
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d126      	bne.n	80054fe <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054b0:	2217      	movs	r2, #23
 80054b2:	18bb      	adds	r3, r7, r2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b21      	cmp	r3, #33	; 0x21
 80054b8:	d003      	beq.n	80054c2 <I2C_Slave_ISR_DMA+0x172>
 80054ba:	18bb      	adds	r3, r7, r2
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b29      	cmp	r3, #41	; 0x29
 80054c0:	d103      	bne.n	80054ca <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2221      	movs	r2, #33	; 0x21
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
 80054c8:	e00b      	b.n	80054e2 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054ca:	2217      	movs	r2, #23
 80054cc:	18bb      	adds	r3, r7, r2
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b22      	cmp	r3, #34	; 0x22
 80054d2:	d003      	beq.n	80054dc <I2C_Slave_ISR_DMA+0x18c>
 80054d4:	18bb      	adds	r3, r7, r2
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b2a      	cmp	r3, #42	; 0x2a
 80054da:	d102      	bne.n	80054e2 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2222      	movs	r2, #34	; 0x22
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	0011      	movs	r1, r2
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 fbc2 	bl	8005c74 <I2C_ITError>
      if (treatdmanack == 1U)
 80054f0:	e005      	b.n	80054fe <I2C_Slave_ISR_DMA+0x1ae>
 80054f2:	e004      	b.n	80054fe <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2210      	movs	r2, #16
 80054fa:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80054fc:	e013      	b.n	8005526 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 80054fe:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005500:	e011      	b.n	8005526 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	001a      	movs	r2, r3
 8005508:	2301      	movs	r3, #1
 800550a:	4013      	ands	r3, r2
 800550c:	d00b      	beq.n	8005526 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	08db      	lsrs	r3, r3, #3
 8005512:	001a      	movs	r2, r3
 8005514:	2301      	movs	r3, #1
 8005516:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005518:	d005      	beq.n	8005526 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	0011      	movs	r1, r2
 8005520:	0018      	movs	r0, r3
 8005522:	f000 f80b 	bl	800553c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2240      	movs	r2, #64	; 0x40
 800552a:	2100      	movs	r1, #0
 800552c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	b008      	add	sp, #32
 8005536:	bd80      	pop	{r7, pc}
 8005538:	ffff0000 	.word	0xffff0000

0800553c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800553c:	b5b0      	push	{r4, r5, r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2241      	movs	r2, #65	; 0x41
 800554a:	5c9b      	ldrb	r3, [r3, r2]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	001a      	movs	r2, r3
 8005550:	2328      	movs	r3, #40	; 0x28
 8005552:	4013      	ands	r3, r2
 8005554:	2b28      	cmp	r3, #40	; 0x28
 8005556:	d000      	beq.n	800555a <I2C_ITAddrCplt+0x1e>
 8005558:	e088      	b.n	800566c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	b2da      	uxtb	r2, r3
 8005564:	250f      	movs	r5, #15
 8005566:	197b      	adds	r3, r7, r5
 8005568:	2101      	movs	r1, #1
 800556a:	400a      	ands	r2, r1
 800556c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	b29a      	uxth	r2, r3
 8005578:	200c      	movs	r0, #12
 800557a:	183b      	adds	r3, r7, r0
 800557c:	21fe      	movs	r1, #254	; 0xfe
 800557e:	400a      	ands	r2, r1
 8005580:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	b29a      	uxth	r2, r3
 800558a:	240a      	movs	r4, #10
 800558c:	193b      	adds	r3, r7, r4
 800558e:	0592      	lsls	r2, r2, #22
 8005590:	0d92      	lsrs	r2, r2, #22
 8005592:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	b29a      	uxth	r2, r3
 800559c:	2308      	movs	r3, #8
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	21fe      	movs	r1, #254	; 0xfe
 80055a2:	400a      	ands	r2, r1
 80055a4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d148      	bne.n	8005640 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80055ae:	0021      	movs	r1, r4
 80055b0:	187b      	adds	r3, r7, r1
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	09db      	lsrs	r3, r3, #7
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	183b      	adds	r3, r7, r0
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	4053      	eors	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	001a      	movs	r2, r3
 80055c2:	2306      	movs	r3, #6
 80055c4:	4013      	ands	r3, r2
 80055c6:	d120      	bne.n	800560a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80055c8:	183b      	adds	r3, r7, r0
 80055ca:	187a      	adds	r2, r7, r1
 80055cc:	8812      	ldrh	r2, [r2, #0]
 80055ce:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d14c      	bne.n	800567c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2208      	movs	r2, #8
 80055ee:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2240      	movs	r2, #64	; 0x40
 80055f4:	2100      	movs	r1, #0
 80055f6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80055f8:	183b      	adds	r3, r7, r0
 80055fa:	881a      	ldrh	r2, [r3, #0]
 80055fc:	197b      	adds	r3, r7, r5
 80055fe:	7819      	ldrb	r1, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0018      	movs	r0, r3
 8005604:	f7ff fb0a 	bl	8004c1c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005608:	e038      	b.n	800567c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800560a:	240c      	movs	r4, #12
 800560c:	193b      	adds	r3, r7, r4
 800560e:	2208      	movs	r2, #8
 8005610:	18ba      	adds	r2, r7, r2
 8005612:	8812      	ldrh	r2, [r2, #0]
 8005614:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	021a      	lsls	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0011      	movs	r1, r2
 800561e:	0018      	movs	r0, r3
 8005620:	f000 fd12 	bl	8006048 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2240      	movs	r2, #64	; 0x40
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800562c:	193b      	adds	r3, r7, r4
 800562e:	881a      	ldrh	r2, [r3, #0]
 8005630:	230f      	movs	r3, #15
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	7819      	ldrb	r1, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f7ff faef 	bl	8004c1c <HAL_I2C_AddrCallback>
}
 800563e:	e01d      	b.n	800567c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f000 fcfd 	bl	8006048 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	2100      	movs	r1, #0
 8005654:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005656:	230c      	movs	r3, #12
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	881a      	ldrh	r2, [r3, #0]
 800565c:	230f      	movs	r3, #15
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	7819      	ldrb	r1, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f7ff fad9 	bl	8004c1c <HAL_I2C_AddrCallback>
}
 800566a:	e007      	b.n	800567c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2208      	movs	r2, #8
 8005672:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	2100      	movs	r1, #0
 800567a:	5499      	strb	r1, [r3, r2]
}
 800567c:	46c0      	nop			; (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b004      	add	sp, #16
 8005682:	bdb0      	pop	{r4, r5, r7, pc}

08005684 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2242      	movs	r2, #66	; 0x42
 8005690:	2100      	movs	r1, #0
 8005692:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2241      	movs	r2, #65	; 0x41
 8005698:	5c9b      	ldrb	r3, [r3, r2]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b21      	cmp	r3, #33	; 0x21
 800569e:	d117      	bne.n	80056d0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2241      	movs	r2, #65	; 0x41
 80056a4:	2120      	movs	r1, #32
 80056a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2211      	movs	r2, #17
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2101      	movs	r1, #1
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 fcc5 	bl	8006048 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	2100      	movs	r1, #0
 80056c4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7ff fa8f 	bl	8004bec <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056ce:	e016      	b.n	80056fe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2241      	movs	r2, #65	; 0x41
 80056d4:	2120      	movs	r1, #32
 80056d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2212      	movs	r2, #18
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2102      	movs	r1, #2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fcad 	bl	8006048 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2240      	movs	r2, #64	; 0x40
 80056f2:	2100      	movs	r1, #0
 80056f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7fd f99d 	bl	8002a38 <HAL_I2C_MasterRxCpltCallback>
}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	46bd      	mov	sp, r7
 8005702:	b002      	add	sp, #8
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2242      	movs	r2, #66	; 0x42
 800571c:	2100      	movs	r1, #0
 800571e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	0b9b      	lsrs	r3, r3, #14
 8005724:	001a      	movs	r2, r3
 8005726:	2301      	movs	r3, #1
 8005728:	4013      	ands	r3, r2
 800572a:	d008      	beq.n	800573e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4925      	ldr	r1, [pc, #148]	; (80057cc <I2C_ITSlaveSeqCplt+0xc4>)
 8005738:	400a      	ands	r2, r1
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	e00d      	b.n	800575a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	0bdb      	lsrs	r3, r3, #15
 8005742:	001a      	movs	r2, r3
 8005744:	2301      	movs	r3, #1
 8005746:	4013      	ands	r3, r2
 8005748:	d007      	beq.n	800575a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	491e      	ldr	r1, [pc, #120]	; (80057d0 <I2C_ITSlaveSeqCplt+0xc8>)
 8005756:	400a      	ands	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2241      	movs	r2, #65	; 0x41
 800575e:	5c9b      	ldrb	r3, [r3, r2]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b29      	cmp	r3, #41	; 0x29
 8005764:	d114      	bne.n	8005790 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2241      	movs	r2, #65	; 0x41
 800576a:	2128      	movs	r1, #40	; 0x28
 800576c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2101      	movs	r1, #1
 8005778:	0018      	movs	r0, r3
 800577a:	f000 fc65 	bl	8006048 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2240      	movs	r2, #64	; 0x40
 8005782:	2100      	movs	r1, #0
 8005784:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0018      	movs	r0, r3
 800578a:	f7ff fa37 	bl	8004bfc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800578e:	e019      	b.n	80057c4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2241      	movs	r2, #65	; 0x41
 8005794:	5c9b      	ldrb	r3, [r3, r2]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b2a      	cmp	r3, #42	; 0x2a
 800579a:	d113      	bne.n	80057c4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2241      	movs	r2, #65	; 0x41
 80057a0:	2128      	movs	r1, #40	; 0x28
 80057a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2222      	movs	r2, #34	; 0x22
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2102      	movs	r1, #2
 80057ae:	0018      	movs	r0, r3
 80057b0:	f000 fc4a 	bl	8006048 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	2100      	movs	r1, #0
 80057ba:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	0018      	movs	r0, r3
 80057c0:	f7ff fa24 	bl	8004c0c <HAL_I2C_SlaveRxCpltCallback>
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b004      	add	sp, #16
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	ffffbfff 	.word	0xffffbfff
 80057d0:	ffff7fff 	.word	0xffff7fff

080057d4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2220      	movs	r2, #32
 80057e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2241      	movs	r2, #65	; 0x41
 80057ee:	5c9b      	ldrb	r3, [r3, r2]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b21      	cmp	r3, #33	; 0x21
 80057f4:	d108      	bne.n	8005808 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2101      	movs	r1, #1
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 fc24 	bl	8006048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2211      	movs	r2, #17
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
 8005806:	e00d      	b.n	8005824 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2241      	movs	r2, #65	; 0x41
 800580c:	5c9b      	ldrb	r3, [r3, r2]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b22      	cmp	r3, #34	; 0x22
 8005812:	d107      	bne.n	8005824 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2102      	movs	r1, #2
 8005818:	0018      	movs	r0, r3
 800581a:	f000 fc15 	bl	8006048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2212      	movs	r2, #18
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4950      	ldr	r1, [pc, #320]	; (8005970 <I2C_ITMasterCplt+0x19c>)
 8005830:	400a      	ands	r2, r1
 8005832:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a4d      	ldr	r2, [pc, #308]	; (8005974 <I2C_ITMasterCplt+0x1a0>)
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	001a      	movs	r2, r3
 8005846:	2301      	movs	r3, #1
 8005848:	4013      	ands	r3, r2
 800584a:	d009      	beq.n	8005860 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2210      	movs	r2, #16
 8005852:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005858:	2204      	movs	r2, #4
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2241      	movs	r2, #65	; 0x41
 8005864:	5c9b      	ldrb	r3, [r3, r2]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b60      	cmp	r3, #96	; 0x60
 800586a:	d10b      	bne.n	8005884 <I2C_ITMasterCplt+0xb0>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	001a      	movs	r2, r3
 8005872:	2301      	movs	r3, #1
 8005874:	4013      	ands	r3, r2
 8005876:	d005      	beq.n	8005884 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	b2db      	uxtb	r3, r3
 8005880:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005882:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	0018      	movs	r0, r3
 8005888:	f000 faff 	bl	8005e8a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005890:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2241      	movs	r2, #65	; 0x41
 8005896:	5c9b      	ldrb	r3, [r3, r2]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b60      	cmp	r3, #96	; 0x60
 800589c:	d002      	beq.n	80058a4 <I2C_ITMasterCplt+0xd0>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 f9e1 	bl	8005c74 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058b2:	e058      	b.n	8005966 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2241      	movs	r2, #65	; 0x41
 80058b8:	5c9b      	ldrb	r3, [r3, r2]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b21      	cmp	r3, #33	; 0x21
 80058be:	d126      	bne.n	800590e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2241      	movs	r2, #65	; 0x41
 80058c4:	2120      	movs	r1, #32
 80058c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2242      	movs	r2, #66	; 0x42
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d10c      	bne.n	80058f4 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2242      	movs	r2, #66	; 0x42
 80058de:	2100      	movs	r1, #0
 80058e0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2240      	movs	r2, #64	; 0x40
 80058e6:	2100      	movs	r1, #0
 80058e8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7ff f9ad 	bl	8004c4c <HAL_I2C_MemTxCpltCallback>
}
 80058f2:	e038      	b.n	8005966 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2242      	movs	r2, #66	; 0x42
 80058f8:	2100      	movs	r1, #0
 80058fa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2240      	movs	r2, #64	; 0x40
 8005900:	2100      	movs	r1, #0
 8005902:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	0018      	movs	r0, r3
 8005908:	f7ff f970 	bl	8004bec <HAL_I2C_MasterTxCpltCallback>
}
 800590c:	e02b      	b.n	8005966 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2241      	movs	r2, #65	; 0x41
 8005912:	5c9b      	ldrb	r3, [r3, r2]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b22      	cmp	r3, #34	; 0x22
 8005918:	d125      	bne.n	8005966 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2241      	movs	r2, #65	; 0x41
 800591e:	2120      	movs	r1, #32
 8005920:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2242      	movs	r2, #66	; 0x42
 800592c:	5c9b      	ldrb	r3, [r3, r2]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d10c      	bne.n	800594e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2242      	movs	r2, #66	; 0x42
 8005938:	2100      	movs	r1, #0
 800593a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2240      	movs	r2, #64	; 0x40
 8005940:	2100      	movs	r1, #0
 8005942:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff f988 	bl	8004c5c <HAL_I2C_MemRxCpltCallback>
}
 800594c:	e00b      	b.n	8005966 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2242      	movs	r2, #66	; 0x42
 8005952:	2100      	movs	r1, #0
 8005954:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2240      	movs	r2, #64	; 0x40
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	0018      	movs	r0, r3
 8005962:	f7fd f869 	bl	8002a38 <HAL_I2C_MasterRxCpltCallback>
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b006      	add	sp, #24
 800596c:	bd80      	pop	{r7, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	fe00e800 	.word	0xfe00e800
 8005974:	ffff0000 	.word	0xffff0000

08005978 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800598e:	200f      	movs	r0, #15
 8005990:	183b      	adds	r3, r7, r0
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	2141      	movs	r1, #65	; 0x41
 8005996:	5c52      	ldrb	r2, [r2, r1]
 8005998:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2220      	movs	r2, #32
 80059a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059a2:	183b      	adds	r3, r7, r0
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b21      	cmp	r3, #33	; 0x21
 80059a8:	d003      	beq.n	80059b2 <I2C_ITSlaveCplt+0x3a>
 80059aa:	183b      	adds	r3, r7, r0
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b29      	cmp	r3, #41	; 0x29
 80059b0:	d109      	bne.n	80059c6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80059b2:	4a7d      	ldr	r2, [pc, #500]	; (8005ba8 <I2C_ITSlaveCplt+0x230>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0011      	movs	r1, r2
 80059b8:	0018      	movs	r0, r3
 80059ba:	f000 fb45 	bl	8006048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2221      	movs	r2, #33	; 0x21
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
 80059c4:	e011      	b.n	80059ea <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059c6:	220f      	movs	r2, #15
 80059c8:	18bb      	adds	r3, r7, r2
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b22      	cmp	r3, #34	; 0x22
 80059ce:	d003      	beq.n	80059d8 <I2C_ITSlaveCplt+0x60>
 80059d0:	18bb      	adds	r3, r7, r2
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b2a      	cmp	r3, #42	; 0x2a
 80059d6:	d108      	bne.n	80059ea <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80059d8:	4a74      	ldr	r2, [pc, #464]	; (8005bac <I2C_ITSlaveCplt+0x234>)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0011      	movs	r1, r2
 80059de:	0018      	movs	r0, r3
 80059e0:	f000 fb32 	bl	8006048 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2222      	movs	r2, #34	; 0x22
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	0209      	lsls	r1, r1, #8
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	496a      	ldr	r1, [pc, #424]	; (8005bb0 <I2C_ITSlaveCplt+0x238>)
 8005a08:	400a      	ands	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 fa3b 	bl	8005e8a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	0b9b      	lsrs	r3, r3, #14
 8005a18:	001a      	movs	r2, r3
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4962      	ldr	r1, [pc, #392]	; (8005bb4 <I2C_ITSlaveCplt+0x23c>)
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d020      	beq.n	8005a7a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a46:	e018      	b.n	8005a7a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	0bdb      	lsrs	r3, r3, #15
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4013      	ands	r3, r2
 8005a52:	d012      	beq.n	8005a7a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4956      	ldr	r1, [pc, #344]	; (8005bb8 <I2C_ITSlaveCplt+0x240>)
 8005a60:	400a      	ands	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d006      	beq.n	8005a7a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	089b      	lsrs	r3, r3, #2
 8005a7e:	001a      	movs	r2, r3
 8005a80:	2301      	movs	r3, #1
 8005a82:	4013      	ands	r3, r2
 8005a84:	d020      	beq.n	8005ac8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2204      	movs	r2, #4
 8005a8a:	4393      	bics	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2242      	movs	r2, #66	; 0x42
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	0011      	movs	r1, r2
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 f8b9 	bl	8005c74 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2241      	movs	r2, #65	; 0x41
 8005b06:	5c9b      	ldrb	r3, [r3, r2]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b28      	cmp	r3, #40	; 0x28
 8005b0c:	d147      	bne.n	8005b9e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	0011      	movs	r1, r2
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 f853 	bl	8005bc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b1a:	e040      	b.n	8005b9e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <I2C_ITSlaveCplt+0x244>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d016      	beq.n	8005b54 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7ff fded 	bl	8005708 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <I2C_ITSlaveCplt+0x244>)
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2241      	movs	r2, #65	; 0x41
 8005b38:	2120      	movs	r1, #32
 8005b3a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2240      	movs	r2, #64	; 0x40
 8005b46:	2100      	movs	r1, #0
 8005b48:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7ff f875 	bl	8004c3c <HAL_I2C_ListenCpltCallback>
}
 8005b52:	e024      	b.n	8005b9e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2241      	movs	r2, #65	; 0x41
 8005b58:	5c9b      	ldrb	r3, [r3, r2]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b22      	cmp	r3, #34	; 0x22
 8005b5e:	d10f      	bne.n	8005b80 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2241      	movs	r2, #65	; 0x41
 8005b64:	2120      	movs	r1, #32
 8005b66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2240      	movs	r2, #64	; 0x40
 8005b72:	2100      	movs	r1, #0
 8005b74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7ff f847 	bl	8004c0c <HAL_I2C_SlaveRxCpltCallback>
}
 8005b7e:	e00e      	b.n	8005b9e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2241      	movs	r2, #65	; 0x41
 8005b84:	2120      	movs	r1, #32
 8005b86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2240      	movs	r2, #64	; 0x40
 8005b92:	2100      	movs	r1, #0
 8005b94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7ff f82f 	bl	8004bfc <HAL_I2C_SlaveTxCpltCallback>
}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	00008001 	.word	0x00008001
 8005bac:	00008002 	.word	0x00008002
 8005bb0:	fe00e800 	.word	0xfe00e800
 8005bb4:	ffffbfff 	.word	0xffffbfff
 8005bb8:	ffff7fff 	.word	0xffff7fff
 8005bbc:	ffff0000 	.word	0xffff0000

08005bc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <I2C_ITListenCplt+0xac>)
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2241      	movs	r2, #65	; 0x41
 8005bda:	2120      	movs	r1, #32
 8005bdc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2242      	movs	r2, #66	; 0x42
 8005be2:	2100      	movs	r1, #0
 8005be4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	089b      	lsrs	r3, r3, #2
 8005bf0:	001a      	movs	r2, r3
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d012      	beq.n	8005c3e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c36:	2204      	movs	r2, #4
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <I2C_ITListenCplt+0xb0>)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0011      	movs	r1, r2
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 f9ff 	bl	8006048 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2210      	movs	r2, #16
 8005c50:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2240      	movs	r2, #64	; 0x40
 8005c56:	2100      	movs	r1, #0
 8005c58:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f7fe ffed 	bl	8004c3c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b002      	add	sp, #8
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	ffff0000 	.word	0xffff0000
 8005c70:	00008003 	.word	0x00008003

08005c74 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c7e:	200f      	movs	r0, #15
 8005c80:	183b      	adds	r3, r7, r0
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	2141      	movs	r1, #65	; 0x41
 8005c86:	5c52      	ldrb	r2, [r2, r1]
 8005c88:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2242      	movs	r2, #66	; 0x42
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a62      	ldr	r2, [pc, #392]	; (8005e20 <I2C_ITError+0x1ac>)
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005caa:	183b      	adds	r3, r7, r0
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b28      	cmp	r3, #40	; 0x28
 8005cb0:	d007      	beq.n	8005cc2 <I2C_ITError+0x4e>
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b29      	cmp	r3, #41	; 0x29
 8005cb8:	d003      	beq.n	8005cc2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005cba:	183b      	adds	r3, r7, r0
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc0:	d10c      	bne.n	8005cdc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2103      	movs	r1, #3
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f000 f9be 	bl	8006048 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2241      	movs	r2, #65	; 0x41
 8005cd0:	2128      	movs	r1, #40	; 0x28
 8005cd2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a53      	ldr	r2, [pc, #332]	; (8005e24 <I2C_ITError+0x1b0>)
 8005cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8005cda:	e012      	b.n	8005d02 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005cdc:	4a52      	ldr	r2, [pc, #328]	; (8005e28 <I2C_ITError+0x1b4>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	0011      	movs	r1, r2
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f000 f9b0 	bl	8006048 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2241      	movs	r2, #65	; 0x41
 8005cec:	5c9b      	ldrb	r3, [r3, r2]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b60      	cmp	r3, #96	; 0x60
 8005cf2:	d003      	beq.n	8005cfc <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2241      	movs	r2, #65	; 0x41
 8005cf8:	2120      	movs	r1, #32
 8005cfa:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d03b      	beq.n	8005d88 <I2C_ITError+0x114>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b11      	cmp	r3, #17
 8005d14:	d002      	beq.n	8005d1c <I2C_ITError+0xa8>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b21      	cmp	r3, #33	; 0x21
 8005d1a:	d135      	bne.n	8005d88 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	01db      	lsls	r3, r3, #7
 8005d26:	401a      	ands	r2, r3
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	01db      	lsls	r3, r3, #7
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d107      	bne.n	8005d40 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	493c      	ldr	r1, [pc, #240]	; (8005e2c <I2C_ITError+0x1b8>)
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7fe fc2a 	bl	800459e <HAL_DMA_GetState>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d016      	beq.n	8005d7e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	4a36      	ldr	r2, [pc, #216]	; (8005e30 <I2C_ITError+0x1bc>)
 8005d56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2240      	movs	r2, #64	; 0x40
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	0018      	movs	r0, r3
 8005d66:	f7fe fb33 	bl	80043d0 <HAL_DMA_Abort_IT>
 8005d6a:	1e03      	subs	r3, r0, #0
 8005d6c:	d051      	beq.n	8005e12 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	0018      	movs	r0, r3
 8005d7a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d7c:	e049      	b.n	8005e12 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f000 f859 	bl	8005e38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d86:	e044      	b.n	8005e12 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d03b      	beq.n	8005e08 <I2C_ITError+0x194>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b12      	cmp	r3, #18
 8005d94:	d002      	beq.n	8005d9c <I2C_ITError+0x128>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b22      	cmp	r3, #34	; 0x22
 8005d9a:	d135      	bne.n	8005e08 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	401a      	ands	r2, r3
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d107      	bne.n	8005dc0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	491e      	ldr	r1, [pc, #120]	; (8005e34 <I2C_ITError+0x1c0>)
 8005dbc:	400a      	ands	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7fe fbea 	bl	800459e <HAL_DMA_GetState>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d016      	beq.n	8005dfe <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <I2C_ITError+0x1bc>)
 8005dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2240      	movs	r2, #64	; 0x40
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	0018      	movs	r0, r3
 8005de6:	f7fe faf3 	bl	80043d0 <HAL_DMA_Abort_IT>
 8005dea:	1e03      	subs	r3, r0, #0
 8005dec:	d013      	beq.n	8005e16 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	0018      	movs	r0, r3
 8005dfa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dfc:	e00b      	b.n	8005e16 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 f819 	bl	8005e38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e06:	e006      	b.n	8005e16 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 f814 	bl	8005e38 <I2C_TreatErrorCallback>
  }
}
 8005e10:	e002      	b.n	8005e18 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	e000      	b.n	8005e18 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e16:	46c0      	nop			; (mov r8, r8)
}
 8005e18:	46c0      	nop			; (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b004      	add	sp, #16
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	ffff0000 	.word	0xffff0000
 8005e24:	08004f11 	.word	0x08004f11
 8005e28:	00008003 	.word	0x00008003
 8005e2c:	ffffbfff 	.word	0xffffbfff
 8005e30:	08005ecf 	.word	0x08005ecf
 8005e34:	ffff7fff 	.word	0xffff7fff

08005e38 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2241      	movs	r2, #65	; 0x41
 8005e44:	5c9b      	ldrb	r3, [r3, r2]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b60      	cmp	r3, #96	; 0x60
 8005e4a:	d10f      	bne.n	8005e6c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2241      	movs	r2, #65	; 0x41
 8005e50:	2120      	movs	r1, #32
 8005e52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2240      	movs	r2, #64	; 0x40
 8005e5e:	2100      	movs	r1, #0
 8005e60:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7fe ff09 	bl	8004c7c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e6a:	e00a      	b.n	8005e82 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2240      	movs	r2, #64	; 0x40
 8005e76:	2100      	movs	r1, #0
 8005e78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f7fe fef5 	bl	8004c6c <HAL_I2C_ErrorCallback>
}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d103      	bne.n	8005ea8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d007      	beq.n	8005ec6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	619a      	str	r2, [r3, #24]
  }
}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b002      	add	sp, #8
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	2200      	movs	r2, #0
 8005eea:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	2200      	movs	r2, #0
 8005efa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	0018      	movs	r0, r3
 8005f00:	f7ff ff9a 	bl	8005e38 <I2C_TreatErrorCallback>
}
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b004      	add	sp, #16
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	0008      	movs	r0, r1
 8005f16:	0011      	movs	r1, r2
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	240a      	movs	r4, #10
 8005f1c:	193b      	adds	r3, r7, r4
 8005f1e:	1c02      	adds	r2, r0, #0
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	2009      	movs	r0, #9
 8005f24:	183b      	adds	r3, r7, r0
 8005f26:	1c0a      	adds	r2, r1, #0
 8005f28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	0d51      	lsrs	r1, r2, #21
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	00d2      	lsls	r2, r2, #3
 8005f38:	400a      	ands	r2, r1
 8005f3a:	490e      	ldr	r1, [pc, #56]	; (8005f74 <I2C_TransferConfig+0x68>)
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	43d2      	mvns	r2, r2
 8005f40:	401a      	ands	r2, r3
 8005f42:	0011      	movs	r1, r2
 8005f44:	193b      	adds	r3, r7, r4
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	059b      	lsls	r3, r3, #22
 8005f4a:	0d9a      	lsrs	r2, r3, #22
 8005f4c:	183b      	adds	r3, r7, r0
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	0418      	lsls	r0, r3, #16
 8005f52:	23ff      	movs	r3, #255	; 0xff
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	4003      	ands	r3, r0
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b005      	add	sp, #20
 8005f70:	bd90      	pop	{r4, r7, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	03ff63ff 	.word	0x03ff63ff

08005f78 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	000a      	movs	r2, r1
 8005f82:	1cbb      	adds	r3, r7, #2
 8005f84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <I2C_Enable_IRQ+0xc8>)
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d004      	beq.n	8005f9e <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005f98:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <I2C_Enable_IRQ+0xcc>)
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d121      	bne.n	8005fe2 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f9e:	1cbb      	adds	r3, r7, #2
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	5e9b      	ldrsh	r3, [r3, r2]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	da03      	bge.n	8005fb0 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	22b8      	movs	r2, #184	; 0xb8
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fb0:	1cbb      	adds	r3, r7, #2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d103      	bne.n	8005fc0 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2290      	movs	r2, #144	; 0x90
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fc0:	1cbb      	adds	r3, r7, #2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d103      	bne.n	8005fd0 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2260      	movs	r2, #96	; 0x60
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005fd0:	1cbb      	adds	r3, r7, #2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d127      	bne.n	8006028 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2240      	movs	r2, #64	; 0x40
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005fe0:	e022      	b.n	8006028 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fe2:	1cbb      	adds	r3, r7, #2
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	5e9b      	ldrsh	r3, [r3, r2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da03      	bge.n	8005ff4 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	22b8      	movs	r2, #184	; 0xb8
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ff4:	1cbb      	adds	r3, r7, #2
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d003      	beq.n	8006006 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	22f2      	movs	r2, #242	; 0xf2
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006006:	1cbb      	adds	r3, r7, #2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	2202      	movs	r2, #2
 800600c:	4013      	ands	r3, r2
 800600e:	d003      	beq.n	8006018 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	22f4      	movs	r2, #244	; 0xf4
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006018:	1cbb      	adds	r3, r7, #2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	2b20      	cmp	r3, #32
 800601e:	d103      	bne.n	8006028 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	430a      	orrs	r2, r1
 8006036:	601a      	str	r2, [r3, #0]
}
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b004      	add	sp, #16
 800603e:	bd80      	pop	{r7, pc}
 8006040:	08005139 	.word	0x08005139
 8006044:	08005351 	.word	0x08005351

08006048 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	000a      	movs	r2, r1
 8006052:	1cbb      	adds	r3, r7, #2
 8006054:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800605a:	1cbb      	adds	r3, r7, #2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	2201      	movs	r2, #1
 8006060:	4013      	ands	r3, r2
 8006062:	d010      	beq.n	8006086 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2242      	movs	r2, #66	; 0x42
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2241      	movs	r2, #65	; 0x41
 8006070:	5c9b      	ldrb	r3, [r3, r2]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	001a      	movs	r2, r3
 8006076:	2328      	movs	r3, #40	; 0x28
 8006078:	4013      	ands	r3, r2
 800607a:	2b28      	cmp	r3, #40	; 0x28
 800607c:	d003      	beq.n	8006086 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	22b0      	movs	r2, #176	; 0xb0
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006086:	1cbb      	adds	r3, r7, #2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	2202      	movs	r2, #2
 800608c:	4013      	ands	r3, r2
 800608e:	d010      	beq.n	80060b2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2244      	movs	r2, #68	; 0x44
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2241      	movs	r2, #65	; 0x41
 800609c:	5c9b      	ldrb	r3, [r3, r2]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	001a      	movs	r2, r3
 80060a2:	2328      	movs	r3, #40	; 0x28
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b28      	cmp	r3, #40	; 0x28
 80060a8:	d003      	beq.n	80060b2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	22b0      	movs	r2, #176	; 0xb0
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80060b2:	1cbb      	adds	r3, r7, #2
 80060b4:	2200      	movs	r2, #0
 80060b6:	5e9b      	ldrsh	r3, [r3, r2]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da03      	bge.n	80060c4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	22b8      	movs	r2, #184	; 0xb8
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80060c4:	1cbb      	adds	r3, r7, #2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d103      	bne.n	80060d4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2290      	movs	r2, #144	; 0x90
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80060d4:	1cbb      	adds	r3, r7, #2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d103      	bne.n	80060e4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80060e4:	1cbb      	adds	r3, r7, #2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d103      	bne.n	80060f4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2240      	movs	r2, #64	; 0x40
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	43d9      	mvns	r1, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	400a      	ands	r2, r1
 8006104:	601a      	str	r2, [r3, #0]
}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	46bd      	mov	sp, r7
 800610a:	b004      	add	sp, #16
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2241      	movs	r2, #65	; 0x41
 800611e:	5c9b      	ldrb	r3, [r3, r2]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b20      	cmp	r3, #32
 8006124:	d138      	bne.n	8006198 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2240      	movs	r2, #64	; 0x40
 800612a:	5c9b      	ldrb	r3, [r3, r2]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006130:	2302      	movs	r3, #2
 8006132:	e032      	b.n	800619a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2240      	movs	r2, #64	; 0x40
 8006138:	2101      	movs	r1, #1
 800613a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2241      	movs	r2, #65	; 0x41
 8006140:	2124      	movs	r1, #36	; 0x24
 8006142:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2101      	movs	r1, #1
 8006150:	438a      	bics	r2, r1
 8006152:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4911      	ldr	r1, [pc, #68]	; (80061a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006160:	400a      	ands	r2, r1
 8006162:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6819      	ldr	r1, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2101      	movs	r1, #1
 8006180:	430a      	orrs	r2, r1
 8006182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2241      	movs	r2, #65	; 0x41
 8006188:	2120      	movs	r1, #32
 800618a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2240      	movs	r2, #64	; 0x40
 8006190:	2100      	movs	r1, #0
 8006192:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
  }
}
 800619a:	0018      	movs	r0, r3
 800619c:	46bd      	mov	sp, r7
 800619e:	b002      	add	sp, #8
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	ffffefff 	.word	0xffffefff

080061a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2241      	movs	r2, #65	; 0x41
 80061b6:	5c9b      	ldrb	r3, [r3, r2]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d139      	bne.n	8006232 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2240      	movs	r2, #64	; 0x40
 80061c2:	5c9b      	ldrb	r3, [r3, r2]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e033      	b.n	8006234 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2240      	movs	r2, #64	; 0x40
 80061d0:	2101      	movs	r1, #1
 80061d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2241      	movs	r2, #65	; 0x41
 80061d8:	2124      	movs	r1, #36	; 0x24
 80061da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2101      	movs	r1, #1
 80061e8:	438a      	bics	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a11      	ldr	r2, [pc, #68]	; (800623c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2101      	movs	r1, #1
 800621a:	430a      	orrs	r2, r1
 800621c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2241      	movs	r2, #65	; 0x41
 8006222:	2120      	movs	r1, #32
 8006224:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2240      	movs	r2, #64	; 0x40
 800622a:	2100      	movs	r1, #0
 800622c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e000      	b.n	8006234 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
  }
}
 8006234:	0018      	movs	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	b004      	add	sp, #16
 800623a:	bd80      	pop	{r7, pc}
 800623c:	fffff0ff 	.word	0xfffff0ff

08006240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f000 fb76 	bl	8006940 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2201      	movs	r2, #1
 800625a:	4013      	ands	r3, r2
 800625c:	d100      	bne.n	8006260 <HAL_RCC_OscConfig+0x20>
 800625e:	e08e      	b.n	800637e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006260:	4bc5      	ldr	r3, [pc, #788]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	220c      	movs	r2, #12
 8006266:	4013      	ands	r3, r2
 8006268:	2b04      	cmp	r3, #4
 800626a:	d00e      	beq.n	800628a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800626c:	4bc2      	ldr	r3, [pc, #776]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	220c      	movs	r2, #12
 8006272:	4013      	ands	r3, r2
 8006274:	2b08      	cmp	r3, #8
 8006276:	d117      	bne.n	80062a8 <HAL_RCC_OscConfig+0x68>
 8006278:	4bbf      	ldr	r3, [pc, #764]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	23c0      	movs	r3, #192	; 0xc0
 800627e:	025b      	lsls	r3, r3, #9
 8006280:	401a      	ands	r2, r3
 8006282:	2380      	movs	r3, #128	; 0x80
 8006284:	025b      	lsls	r3, r3, #9
 8006286:	429a      	cmp	r2, r3
 8006288:	d10e      	bne.n	80062a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628a:	4bbb      	ldr	r3, [pc, #748]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	4013      	ands	r3, r2
 8006294:	d100      	bne.n	8006298 <HAL_RCC_OscConfig+0x58>
 8006296:	e071      	b.n	800637c <HAL_RCC_OscConfig+0x13c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d000      	beq.n	80062a2 <HAL_RCC_OscConfig+0x62>
 80062a0:	e06c      	b.n	800637c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f000 fb4c 	bl	8006940 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d107      	bne.n	80062c0 <HAL_RCC_OscConfig+0x80>
 80062b0:	4bb1      	ldr	r3, [pc, #708]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4bb0      	ldr	r3, [pc, #704]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	0249      	lsls	r1, r1, #9
 80062ba:	430a      	orrs	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e02f      	b.n	8006320 <HAL_RCC_OscConfig+0xe0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10c      	bne.n	80062e2 <HAL_RCC_OscConfig+0xa2>
 80062c8:	4bab      	ldr	r3, [pc, #684]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4baa      	ldr	r3, [pc, #680]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062ce:	49ab      	ldr	r1, [pc, #684]	; (800657c <HAL_RCC_OscConfig+0x33c>)
 80062d0:	400a      	ands	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	4ba8      	ldr	r3, [pc, #672]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4ba7      	ldr	r3, [pc, #668]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062da:	49a9      	ldr	r1, [pc, #676]	; (8006580 <HAL_RCC_OscConfig+0x340>)
 80062dc:	400a      	ands	r2, r1
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e01e      	b.n	8006320 <HAL_RCC_OscConfig+0xe0>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d10e      	bne.n	8006308 <HAL_RCC_OscConfig+0xc8>
 80062ea:	4ba3      	ldr	r3, [pc, #652]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4ba2      	ldr	r3, [pc, #648]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	02c9      	lsls	r1, r1, #11
 80062f4:	430a      	orrs	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	4b9f      	ldr	r3, [pc, #636]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4b9e      	ldr	r3, [pc, #632]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80062fe:	2180      	movs	r1, #128	; 0x80
 8006300:	0249      	lsls	r1, r1, #9
 8006302:	430a      	orrs	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e00b      	b.n	8006320 <HAL_RCC_OscConfig+0xe0>
 8006308:	4b9b      	ldr	r3, [pc, #620]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b9a      	ldr	r3, [pc, #616]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800630e:	499b      	ldr	r1, [pc, #620]	; (800657c <HAL_RCC_OscConfig+0x33c>)
 8006310:	400a      	ands	r2, r1
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	4b98      	ldr	r3, [pc, #608]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	4b97      	ldr	r3, [pc, #604]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800631a:	4999      	ldr	r1, [pc, #612]	; (8006580 <HAL_RCC_OscConfig+0x340>)
 800631c:	400a      	ands	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d014      	beq.n	8006352 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fd fcd4 	bl	8003cd4 <HAL_GetTick>
 800632c:	0003      	movs	r3, r0
 800632e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006332:	f7fd fccf 	bl	8003cd4 <HAL_GetTick>
 8006336:	0002      	movs	r2, r0
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b64      	cmp	r3, #100	; 0x64
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e2fd      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006344:	4b8c      	ldr	r3, [pc, #560]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	2380      	movs	r3, #128	; 0x80
 800634a:	029b      	lsls	r3, r3, #10
 800634c:	4013      	ands	r3, r2
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0xf2>
 8006350:	e015      	b.n	800637e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006352:	f7fd fcbf 	bl	8003cd4 <HAL_GetTick>
 8006356:	0003      	movs	r3, r0
 8006358:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800635c:	f7fd fcba 	bl	8003cd4 <HAL_GetTick>
 8006360:	0002      	movs	r2, r0
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b64      	cmp	r3, #100	; 0x64
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e2e8      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800636e:	4b82      	ldr	r3, [pc, #520]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	4013      	ands	r3, r2
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x11c>
 800637a:	e000      	b.n	800637e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2202      	movs	r2, #2
 8006384:	4013      	ands	r3, r2
 8006386:	d100      	bne.n	800638a <HAL_RCC_OscConfig+0x14a>
 8006388:	e06c      	b.n	8006464 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800638a:	4b7b      	ldr	r3, [pc, #492]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	220c      	movs	r2, #12
 8006390:	4013      	ands	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006394:	4b78      	ldr	r3, [pc, #480]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	220c      	movs	r2, #12
 800639a:	4013      	ands	r3, r2
 800639c:	2b08      	cmp	r3, #8
 800639e:	d11f      	bne.n	80063e0 <HAL_RCC_OscConfig+0x1a0>
 80063a0:	4b75      	ldr	r3, [pc, #468]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	23c0      	movs	r3, #192	; 0xc0
 80063a6:	025b      	lsls	r3, r3, #9
 80063a8:	401a      	ands	r2, r3
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d116      	bne.n	80063e0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b2:	4b71      	ldr	r3, [pc, #452]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2202      	movs	r2, #2
 80063b8:	4013      	ands	r3, r2
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_OscConfig+0x188>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e2bb      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c8:	4b6b      	ldr	r3, [pc, #428]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	22f8      	movs	r2, #248	; 0xf8
 80063ce:	4393      	bics	r3, r2
 80063d0:	0019      	movs	r1, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00da      	lsls	r2, r3, #3
 80063d8:	4b67      	ldr	r3, [pc, #412]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80063da:	430a      	orrs	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063de:	e041      	b.n	8006464 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d024      	beq.n	8006432 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063e8:	4b63      	ldr	r3, [pc, #396]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	4b62      	ldr	r3, [pc, #392]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80063ee:	2101      	movs	r1, #1
 80063f0:	430a      	orrs	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f4:	f7fd fc6e 	bl	8003cd4 <HAL_GetTick>
 80063f8:	0003      	movs	r3, r0
 80063fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fe:	f7fd fc69 	bl	8003cd4 <HAL_GetTick>
 8006402:	0002      	movs	r2, r0
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e297      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006410:	4b59      	ldr	r3, [pc, #356]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2202      	movs	r2, #2
 8006416:	4013      	ands	r3, r2
 8006418:	d0f1      	beq.n	80063fe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800641a:	4b57      	ldr	r3, [pc, #348]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	22f8      	movs	r2, #248	; 0xf8
 8006420:	4393      	bics	r3, r2
 8006422:	0019      	movs	r1, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	00da      	lsls	r2, r3, #3
 800642a:	4b53      	ldr	r3, [pc, #332]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800642c:	430a      	orrs	r2, r1
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e018      	b.n	8006464 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006432:	4b51      	ldr	r3, [pc, #324]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b50      	ldr	r3, [pc, #320]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006438:	2101      	movs	r1, #1
 800643a:	438a      	bics	r2, r1
 800643c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643e:	f7fd fc49 	bl	8003cd4 <HAL_GetTick>
 8006442:	0003      	movs	r3, r0
 8006444:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006448:	f7fd fc44 	bl	8003cd4 <HAL_GetTick>
 800644c:	0002      	movs	r2, r0
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e272      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645a:	4b47      	ldr	r3, [pc, #284]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2202      	movs	r2, #2
 8006460:	4013      	ands	r3, r2
 8006462:	d1f1      	bne.n	8006448 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2208      	movs	r2, #8
 800646a:	4013      	ands	r3, r2
 800646c:	d036      	beq.n	80064dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d019      	beq.n	80064aa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006476:	4b40      	ldr	r3, [pc, #256]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800647a:	4b3f      	ldr	r3, [pc, #252]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800647c:	2101      	movs	r1, #1
 800647e:	430a      	orrs	r2, r1
 8006480:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006482:	f7fd fc27 	bl	8003cd4 <HAL_GetTick>
 8006486:	0003      	movs	r3, r0
 8006488:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800648c:	f7fd fc22 	bl	8003cd4 <HAL_GetTick>
 8006490:	0002      	movs	r2, r0
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e250      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	4b36      	ldr	r3, [pc, #216]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	2202      	movs	r2, #2
 80064a4:	4013      	ands	r3, r2
 80064a6:	d0f1      	beq.n	800648c <HAL_RCC_OscConfig+0x24c>
 80064a8:	e018      	b.n	80064dc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064aa:	4b33      	ldr	r3, [pc, #204]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80064ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ae:	4b32      	ldr	r3, [pc, #200]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80064b0:	2101      	movs	r1, #1
 80064b2:	438a      	bics	r2, r1
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b6:	f7fd fc0d 	bl	8003cd4 <HAL_GetTick>
 80064ba:	0003      	movs	r3, r0
 80064bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c0:	f7fd fc08 	bl	8003cd4 <HAL_GetTick>
 80064c4:	0002      	movs	r2, r0
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e236      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d2:	4b29      	ldr	r3, [pc, #164]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2202      	movs	r2, #2
 80064d8:	4013      	ands	r3, r2
 80064da:	d1f1      	bne.n	80064c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2204      	movs	r2, #4
 80064e2:	4013      	ands	r3, r2
 80064e4:	d100      	bne.n	80064e8 <HAL_RCC_OscConfig+0x2a8>
 80064e6:	e0b5      	b.n	8006654 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e8:	201f      	movs	r0, #31
 80064ea:	183b      	adds	r3, r7, r0
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	055b      	lsls	r3, r3, #21
 80064f8:	4013      	ands	r3, r2
 80064fa:	d110      	bne.n	800651e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064fc:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 8006502:	2180      	movs	r1, #128	; 0x80
 8006504:	0549      	lsls	r1, r1, #21
 8006506:	430a      	orrs	r2, r1
 8006508:	61da      	str	r2, [r3, #28]
 800650a:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	2380      	movs	r3, #128	; 0x80
 8006510:	055b      	lsls	r3, r3, #21
 8006512:	4013      	ands	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006518:	183b      	adds	r3, r7, r0
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <HAL_RCC_OscConfig+0x344>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	2380      	movs	r3, #128	; 0x80
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4013      	ands	r3, r2
 8006528:	d11a      	bne.n	8006560 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800652a:	4b16      	ldr	r3, [pc, #88]	; (8006584 <HAL_RCC_OscConfig+0x344>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <HAL_RCC_OscConfig+0x344>)
 8006530:	2180      	movs	r1, #128	; 0x80
 8006532:	0049      	lsls	r1, r1, #1
 8006534:	430a      	orrs	r2, r1
 8006536:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006538:	f7fd fbcc 	bl	8003cd4 <HAL_GetTick>
 800653c:	0003      	movs	r3, r0
 800653e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006542:	f7fd fbc7 	bl	8003cd4 <HAL_GetTick>
 8006546:	0002      	movs	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b64      	cmp	r3, #100	; 0x64
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e1f5      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <HAL_RCC_OscConfig+0x344>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4013      	ands	r3, r2
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d10f      	bne.n	8006588 <HAL_RCC_OscConfig+0x348>
 8006568:	4b03      	ldr	r3, [pc, #12]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	4b02      	ldr	r3, [pc, #8]	; (8006578 <HAL_RCC_OscConfig+0x338>)
 800656e:	2101      	movs	r1, #1
 8006570:	430a      	orrs	r2, r1
 8006572:	621a      	str	r2, [r3, #32]
 8006574:	e036      	b.n	80065e4 <HAL_RCC_OscConfig+0x3a4>
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	40021000 	.word	0x40021000
 800657c:	fffeffff 	.word	0xfffeffff
 8006580:	fffbffff 	.word	0xfffbffff
 8006584:	40007000 	.word	0x40007000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10c      	bne.n	80065aa <HAL_RCC_OscConfig+0x36a>
 8006590:	4bca      	ldr	r3, [pc, #808]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	4bc9      	ldr	r3, [pc, #804]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006596:	2101      	movs	r1, #1
 8006598:	438a      	bics	r2, r1
 800659a:	621a      	str	r2, [r3, #32]
 800659c:	4bc7      	ldr	r3, [pc, #796]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800659e:	6a1a      	ldr	r2, [r3, #32]
 80065a0:	4bc6      	ldr	r3, [pc, #792]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065a2:	2104      	movs	r1, #4
 80065a4:	438a      	bics	r2, r1
 80065a6:	621a      	str	r2, [r3, #32]
 80065a8:	e01c      	b.n	80065e4 <HAL_RCC_OscConfig+0x3a4>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b05      	cmp	r3, #5
 80065b0:	d10c      	bne.n	80065cc <HAL_RCC_OscConfig+0x38c>
 80065b2:	4bc2      	ldr	r3, [pc, #776]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	4bc1      	ldr	r3, [pc, #772]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065b8:	2104      	movs	r1, #4
 80065ba:	430a      	orrs	r2, r1
 80065bc:	621a      	str	r2, [r3, #32]
 80065be:	4bbf      	ldr	r3, [pc, #764]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	4bbe      	ldr	r3, [pc, #760]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065c4:	2101      	movs	r1, #1
 80065c6:	430a      	orrs	r2, r1
 80065c8:	621a      	str	r2, [r3, #32]
 80065ca:	e00b      	b.n	80065e4 <HAL_RCC_OscConfig+0x3a4>
 80065cc:	4bbb      	ldr	r3, [pc, #748]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	4bba      	ldr	r3, [pc, #744]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065d2:	2101      	movs	r1, #1
 80065d4:	438a      	bics	r2, r1
 80065d6:	621a      	str	r2, [r3, #32]
 80065d8:	4bb8      	ldr	r3, [pc, #736]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	4bb7      	ldr	r3, [pc, #732]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80065de:	2104      	movs	r1, #4
 80065e0:	438a      	bics	r2, r1
 80065e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d014      	beq.n	8006616 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ec:	f7fd fb72 	bl	8003cd4 <HAL_GetTick>
 80065f0:	0003      	movs	r3, r0
 80065f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f4:	e009      	b.n	800660a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f6:	f7fd fb6d 	bl	8003cd4 <HAL_GetTick>
 80065fa:	0002      	movs	r2, r0
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	4aaf      	ldr	r2, [pc, #700]	; (80068c0 <HAL_RCC_OscConfig+0x680>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e19a      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660a:	4bac      	ldr	r3, [pc, #688]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	2202      	movs	r2, #2
 8006610:	4013      	ands	r3, r2
 8006612:	d0f0      	beq.n	80065f6 <HAL_RCC_OscConfig+0x3b6>
 8006614:	e013      	b.n	800663e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fd fb5d 	bl	8003cd4 <HAL_GetTick>
 800661a:	0003      	movs	r3, r0
 800661c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661e:	e009      	b.n	8006634 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006620:	f7fd fb58 	bl	8003cd4 <HAL_GetTick>
 8006624:	0002      	movs	r2, r0
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	4aa5      	ldr	r2, [pc, #660]	; (80068c0 <HAL_RCC_OscConfig+0x680>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e185      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006634:	4ba1      	ldr	r3, [pc, #644]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	2202      	movs	r2, #2
 800663a:	4013      	ands	r3, r2
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800663e:	231f      	movs	r3, #31
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d105      	bne.n	8006654 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006648:	4b9c      	ldr	r3, [pc, #624]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	4b9b      	ldr	r3, [pc, #620]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800664e:	499d      	ldr	r1, [pc, #628]	; (80068c4 <HAL_RCC_OscConfig+0x684>)
 8006650:	400a      	ands	r2, r1
 8006652:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2210      	movs	r2, #16
 800665a:	4013      	ands	r3, r2
 800665c:	d063      	beq.n	8006726 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d12a      	bne.n	80066bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006666:	4b95      	ldr	r3, [pc, #596]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800666a:	4b94      	ldr	r3, [pc, #592]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800666c:	2104      	movs	r1, #4
 800666e:	430a      	orrs	r2, r1
 8006670:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006672:	4b92      	ldr	r3, [pc, #584]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006676:	4b91      	ldr	r3, [pc, #580]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006678:	2101      	movs	r1, #1
 800667a:	430a      	orrs	r2, r1
 800667c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800667e:	f7fd fb29 	bl	8003cd4 <HAL_GetTick>
 8006682:	0003      	movs	r3, r0
 8006684:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006688:	f7fd fb24 	bl	8003cd4 <HAL_GetTick>
 800668c:	0002      	movs	r2, r0
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e152      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800669a:	4b88      	ldr	r3, [pc, #544]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	2202      	movs	r2, #2
 80066a0:	4013      	ands	r3, r2
 80066a2:	d0f1      	beq.n	8006688 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066a4:	4b85      	ldr	r3, [pc, #532]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	22f8      	movs	r2, #248	; 0xf8
 80066aa:	4393      	bics	r3, r2
 80066ac:	0019      	movs	r1, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	00da      	lsls	r2, r3, #3
 80066b4:	4b81      	ldr	r3, [pc, #516]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066b6:	430a      	orrs	r2, r1
 80066b8:	635a      	str	r2, [r3, #52]	; 0x34
 80066ba:	e034      	b.n	8006726 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	3305      	adds	r3, #5
 80066c2:	d111      	bne.n	80066e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80066c4:	4b7d      	ldr	r3, [pc, #500]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c8:	4b7c      	ldr	r3, [pc, #496]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066ca:	2104      	movs	r1, #4
 80066cc:	438a      	bics	r2, r1
 80066ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066d0:	4b7a      	ldr	r3, [pc, #488]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	22f8      	movs	r2, #248	; 0xf8
 80066d6:	4393      	bics	r3, r2
 80066d8:	0019      	movs	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	00da      	lsls	r2, r3, #3
 80066e0:	4b76      	ldr	r3, [pc, #472]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066e2:	430a      	orrs	r2, r1
 80066e4:	635a      	str	r2, [r3, #52]	; 0x34
 80066e6:	e01e      	b.n	8006726 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80066e8:	4b74      	ldr	r3, [pc, #464]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ec:	4b73      	ldr	r3, [pc, #460]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066ee:	2104      	movs	r1, #4
 80066f0:	430a      	orrs	r2, r1
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80066f4:	4b71      	ldr	r3, [pc, #452]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f8:	4b70      	ldr	r3, [pc, #448]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80066fa:	2101      	movs	r1, #1
 80066fc:	438a      	bics	r2, r1
 80066fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006700:	f7fd fae8 	bl	8003cd4 <HAL_GetTick>
 8006704:	0003      	movs	r3, r0
 8006706:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800670a:	f7fd fae3 	bl	8003cd4 <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e111      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800671c:	4b67      	ldr	r3, [pc, #412]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	2202      	movs	r2, #2
 8006722:	4013      	ands	r3, r2
 8006724:	d1f1      	bne.n	800670a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2220      	movs	r2, #32
 800672c:	4013      	ands	r3, r2
 800672e:	d05c      	beq.n	80067ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006730:	4b62      	ldr	r3, [pc, #392]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	220c      	movs	r2, #12
 8006736:	4013      	ands	r3, r2
 8006738:	2b0c      	cmp	r3, #12
 800673a:	d00e      	beq.n	800675a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800673c:	4b5f      	ldr	r3, [pc, #380]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	220c      	movs	r2, #12
 8006742:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006744:	2b08      	cmp	r3, #8
 8006746:	d114      	bne.n	8006772 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006748:	4b5c      	ldr	r3, [pc, #368]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	23c0      	movs	r3, #192	; 0xc0
 800674e:	025b      	lsls	r3, r3, #9
 8006750:	401a      	ands	r2, r3
 8006752:	23c0      	movs	r3, #192	; 0xc0
 8006754:	025b      	lsls	r3, r3, #9
 8006756:	429a      	cmp	r2, r3
 8006758:	d10b      	bne.n	8006772 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800675a:	4b58      	ldr	r3, [pc, #352]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800675c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675e:	2380      	movs	r3, #128	; 0x80
 8006760:	025b      	lsls	r3, r3, #9
 8006762:	4013      	ands	r3, r2
 8006764:	d040      	beq.n	80067e8 <HAL_RCC_OscConfig+0x5a8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d03c      	beq.n	80067e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0e6      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01b      	beq.n	80067b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800677a:	4b50      	ldr	r3, [pc, #320]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800677c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677e:	4b4f      	ldr	r3, [pc, #316]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006780:	2180      	movs	r1, #128	; 0x80
 8006782:	0249      	lsls	r1, r1, #9
 8006784:	430a      	orrs	r2, r1
 8006786:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006788:	f7fd faa4 	bl	8003cd4 <HAL_GetTick>
 800678c:	0003      	movs	r3, r0
 800678e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006792:	f7fd fa9f 	bl	8003cd4 <HAL_GetTick>
 8006796:	0002      	movs	r2, r0
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e0cd      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067a4:	4b45      	ldr	r3, [pc, #276]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80067a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	025b      	lsls	r3, r3, #9
 80067ac:	4013      	ands	r3, r2
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCC_OscConfig+0x552>
 80067b0:	e01b      	b.n	80067ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80067b2:	4b42      	ldr	r3, [pc, #264]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80067b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b6:	4b41      	ldr	r3, [pc, #260]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80067b8:	4943      	ldr	r1, [pc, #268]	; (80068c8 <HAL_RCC_OscConfig+0x688>)
 80067ba:	400a      	ands	r2, r1
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067be:	f7fd fa89 	bl	8003cd4 <HAL_GetTick>
 80067c2:	0003      	movs	r3, r0
 80067c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067c8:	f7fd fa84 	bl	8003cd4 <HAL_GetTick>
 80067cc:	0002      	movs	r2, r0
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e0b2      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067da:	4b38      	ldr	r3, [pc, #224]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80067dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067de:	2380      	movs	r3, #128	; 0x80
 80067e0:	025b      	lsls	r3, r3, #9
 80067e2:	4013      	ands	r3, r2
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x588>
 80067e6:	e000      	b.n	80067ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80067e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d100      	bne.n	80067f4 <HAL_RCC_OscConfig+0x5b4>
 80067f2:	e0a4      	b.n	800693e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067f4:	4b31      	ldr	r3, [pc, #196]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	220c      	movs	r2, #12
 80067fa:	4013      	ands	r3, r2
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d100      	bne.n	8006802 <HAL_RCC_OscConfig+0x5c2>
 8006800:	e078      	b.n	80068f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b02      	cmp	r3, #2
 8006808:	d14c      	bne.n	80068a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680a:	4b2c      	ldr	r3, [pc, #176]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b2b      	ldr	r3, [pc, #172]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006810:	492e      	ldr	r1, [pc, #184]	; (80068cc <HAL_RCC_OscConfig+0x68c>)
 8006812:	400a      	ands	r2, r1
 8006814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006816:	f7fd fa5d 	bl	8003cd4 <HAL_GetTick>
 800681a:	0003      	movs	r3, r0
 800681c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006820:	f7fd fa58 	bl	8003cd4 <HAL_GetTick>
 8006824:	0002      	movs	r2, r0
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e086      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006832:	4b22      	ldr	r3, [pc, #136]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	049b      	lsls	r3, r3, #18
 800683a:	4013      	ands	r3, r2
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800683e:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	220f      	movs	r2, #15
 8006844:	4393      	bics	r3, r2
 8006846:	0019      	movs	r1, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800684e:	430a      	orrs	r2, r1
 8006850:	62da      	str	r2, [r3, #44]	; 0x2c
 8006852:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <HAL_RCC_OscConfig+0x690>)
 8006858:	4013      	ands	r3, r2
 800685a:	0019      	movs	r1, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	431a      	orrs	r2, r3
 8006866:	4b15      	ldr	r3, [pc, #84]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006872:	2180      	movs	r1, #128	; 0x80
 8006874:	0449      	lsls	r1, r1, #17
 8006876:	430a      	orrs	r2, r1
 8006878:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687a:	f7fd fa2b 	bl	8003cd4 <HAL_GetTick>
 800687e:	0003      	movs	r3, r0
 8006880:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006884:	f7fd fa26 	bl	8003cd4 <HAL_GetTick>
 8006888:	0002      	movs	r2, r0
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e054      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006896:	4b09      	ldr	r3, [pc, #36]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	2380      	movs	r3, #128	; 0x80
 800689c:	049b      	lsls	r3, r3, #18
 800689e:	4013      	ands	r3, r2
 80068a0:	d0f0      	beq.n	8006884 <HAL_RCC_OscConfig+0x644>
 80068a2:	e04c      	b.n	800693e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <HAL_RCC_OscConfig+0x67c>)
 80068aa:	4908      	ldr	r1, [pc, #32]	; (80068cc <HAL_RCC_OscConfig+0x68c>)
 80068ac:	400a      	ands	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b0:	f7fd fa10 	bl	8003cd4 <HAL_GetTick>
 80068b4:	0003      	movs	r3, r0
 80068b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068b8:	e015      	b.n	80068e6 <HAL_RCC_OscConfig+0x6a6>
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	40021000 	.word	0x40021000
 80068c0:	00001388 	.word	0x00001388
 80068c4:	efffffff 	.word	0xefffffff
 80068c8:	fffeffff 	.word	0xfffeffff
 80068cc:	feffffff 	.word	0xfeffffff
 80068d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d4:	f7fd f9fe 	bl	8003cd4 <HAL_GetTick>
 80068d8:	0002      	movs	r2, r0
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e02c      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e6:	4b18      	ldr	r3, [pc, #96]	; (8006948 <HAL_RCC_OscConfig+0x708>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	2380      	movs	r3, #128	; 0x80
 80068ec:	049b      	lsls	r3, r3, #18
 80068ee:	4013      	ands	r3, r2
 80068f0:	d1f0      	bne.n	80068d4 <HAL_RCC_OscConfig+0x694>
 80068f2:	e024      	b.n	800693e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e01f      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006900:	4b11      	ldr	r3, [pc, #68]	; (8006948 <HAL_RCC_OscConfig+0x708>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006906:	4b10      	ldr	r3, [pc, #64]	; (8006948 <HAL_RCC_OscConfig+0x708>)
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	23c0      	movs	r3, #192	; 0xc0
 8006910:	025b      	lsls	r3, r3, #9
 8006912:	401a      	ands	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	429a      	cmp	r2, r3
 800691a:	d10e      	bne.n	800693a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	220f      	movs	r2, #15
 8006920:	401a      	ands	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d107      	bne.n	800693a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	23f0      	movs	r3, #240	; 0xf0
 800692e:	039b      	lsls	r3, r3, #14
 8006930:	401a      	ands	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b008      	add	sp, #32
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40021000 	.word	0x40021000

0800694c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e0bf      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006960:	4b61      	ldr	r3, [pc, #388]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2201      	movs	r2, #1
 8006966:	4013      	ands	r3, r2
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d911      	bls.n	8006992 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	4b5e      	ldr	r3, [pc, #376]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2201      	movs	r2, #1
 8006974:	4393      	bics	r3, r2
 8006976:	0019      	movs	r1, r3
 8006978:	4b5b      	ldr	r3, [pc, #364]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006980:	4b59      	ldr	r3, [pc, #356]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2201      	movs	r2, #1
 8006986:	4013      	ands	r3, r2
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d001      	beq.n	8006992 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e0a6      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2202      	movs	r2, #2
 8006998:	4013      	ands	r3, r2
 800699a:	d015      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2204      	movs	r2, #4
 80069a2:	4013      	ands	r3, r2
 80069a4:	d006      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069a6:	4b51      	ldr	r3, [pc, #324]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	4b50      	ldr	r3, [pc, #320]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 80069ac:	21e0      	movs	r1, #224	; 0xe0
 80069ae:	00c9      	lsls	r1, r1, #3
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b4:	4b4d      	ldr	r3, [pc, #308]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	22f0      	movs	r2, #240	; 0xf0
 80069ba:	4393      	bics	r3, r2
 80069bc:	0019      	movs	r1, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	4b4a      	ldr	r3, [pc, #296]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2201      	movs	r2, #1
 80069ce:	4013      	ands	r3, r2
 80069d0:	d04c      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d107      	bne.n	80069ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069da:	4b44      	ldr	r3, [pc, #272]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	029b      	lsls	r3, r3, #10
 80069e2:	4013      	ands	r3, r2
 80069e4:	d120      	bne.n	8006a28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e07a      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d107      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f2:	4b3e      	ldr	r3, [pc, #248]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	2380      	movs	r3, #128	; 0x80
 80069f8:	049b      	lsls	r3, r3, #18
 80069fa:	4013      	ands	r3, r2
 80069fc:	d114      	bne.n	8006a28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e06e      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d107      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006a0a:	4b38      	ldr	r3, [pc, #224]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	025b      	lsls	r3, r3, #9
 8006a12:	4013      	ands	r3, r2
 8006a14:	d108      	bne.n	8006a28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e062      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a1a:	4b34      	ldr	r3, [pc, #208]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	4013      	ands	r3, r2
 8006a22:	d101      	bne.n	8006a28 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e05b      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a28:	4b30      	ldr	r3, [pc, #192]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	4393      	bics	r3, r2
 8006a30:	0019      	movs	r1, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b2d      	ldr	r3, [pc, #180]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a3c:	f7fd f94a 	bl	8003cd4 <HAL_GetTick>
 8006a40:	0003      	movs	r3, r0
 8006a42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a44:	e009      	b.n	8006a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a46:	f7fd f945 	bl	8003cd4 <HAL_GetTick>
 8006a4a:	0002      	movs	r2, r0
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	4a27      	ldr	r2, [pc, #156]	; (8006af0 <HAL_RCC_ClockConfig+0x1a4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e042      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	220c      	movs	r2, #12
 8006a60:	401a      	ands	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d1ec      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2201      	movs	r2, #1
 8006a72:	4013      	ands	r3, r2
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d211      	bcs.n	8006a9e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4393      	bics	r3, r2
 8006a82:	0019      	movs	r1, r3
 8006a84:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8c:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <HAL_RCC_ClockConfig+0x19c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2201      	movs	r2, #1
 8006a92:	4013      	ands	r3, r2
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d001      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e020      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006aa8:	4b10      	ldr	r3, [pc, #64]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a11      	ldr	r2, [pc, #68]	; (8006af4 <HAL_RCC_ClockConfig+0x1a8>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	0019      	movs	r1, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006abc:	f000 f820 	bl	8006b00 <HAL_RCC_GetSysClockFreq>
 8006ac0:	0001      	movs	r1, r0
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <HAL_RCC_ClockConfig+0x1a0>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	091b      	lsrs	r3, r3, #4
 8006ac8:	220f      	movs	r2, #15
 8006aca:	4013      	ands	r3, r2
 8006acc:	4a0a      	ldr	r2, [pc, #40]	; (8006af8 <HAL_RCC_ClockConfig+0x1ac>)
 8006ace:	5cd3      	ldrb	r3, [r2, r3]
 8006ad0:	000a      	movs	r2, r1
 8006ad2:	40da      	lsrs	r2, r3
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_RCC_ClockConfig+0x1b0>)
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006ad8:	2003      	movs	r0, #3
 8006ada:	f7fd f8b5 	bl	8003c48 <HAL_InitTick>
  
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b004      	add	sp, #16
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40022000 	.word	0x40022000
 8006aec:	40021000 	.word	0x40021000
 8006af0:	00001388 	.word	0x00001388
 8006af4:	fffff8ff 	.word	0xfffff8ff
 8006af8:	08009654 	.word	0x08009654
 8006afc:	2000007c 	.word	0x2000007c

08006b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	b08f      	sub	sp, #60	; 0x3c
 8006b04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006b06:	2314      	movs	r3, #20
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	4a38      	ldr	r2, [pc, #224]	; (8006bec <HAL_RCC_GetSysClockFreq+0xec>)
 8006b0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b0e:	c313      	stmia	r3!, {r0, r1, r4}
 8006b10:	6812      	ldr	r2, [r2, #0]
 8006b12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006b14:	1d3b      	adds	r3, r7, #4
 8006b16:	4a36      	ldr	r2, [pc, #216]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006b18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b1a:	c313      	stmia	r3!, {r0, r1, r4}
 8006b1c:	6812      	ldr	r2, [r2, #0]
 8006b1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b24:	2300      	movs	r3, #0
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b28:	2300      	movs	r3, #0
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006b34:	4b2f      	ldr	r3, [pc, #188]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	220c      	movs	r2, #12
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b0c      	cmp	r3, #12
 8006b42:	d047      	beq.n	8006bd4 <HAL_RCC_GetSysClockFreq+0xd4>
 8006b44:	d849      	bhi.n	8006bda <HAL_RCC_GetSysClockFreq+0xda>
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d002      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0x50>
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d003      	beq.n	8006b56 <HAL_RCC_GetSysClockFreq+0x56>
 8006b4e:	e044      	b.n	8006bda <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b50:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b54:	e044      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	0c9b      	lsrs	r3, r3, #18
 8006b5a:	220f      	movs	r2, #15
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2214      	movs	r2, #20
 8006b60:	18ba      	adds	r2, r7, r2
 8006b62:	5cd3      	ldrb	r3, [r2, r3]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006b66:	4b23      	ldr	r3, [pc, #140]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	220f      	movs	r2, #15
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	1d3a      	adds	r2, r7, #4
 8006b70:	5cd3      	ldrb	r3, [r2, r3]
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b76:	23c0      	movs	r3, #192	; 0xc0
 8006b78:	025b      	lsls	r3, r3, #9
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	2380      	movs	r3, #128	; 0x80
 8006b7e:	025b      	lsls	r3, r3, #9
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d109      	bne.n	8006b98 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b86:	481c      	ldr	r0, [pc, #112]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b88:	f7f9 fac6 	bl	8000118 <__udivsi3>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	001a      	movs	r2, r3
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	4353      	muls	r3, r2
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
 8006b96:	e01a      	b.n	8006bce <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b9a:	23c0      	movs	r3, #192	; 0xc0
 8006b9c:	025b      	lsls	r3, r3, #9
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	23c0      	movs	r3, #192	; 0xc0
 8006ba2:	025b      	lsls	r3, r3, #9
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d109      	bne.n	8006bbc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006baa:	4814      	ldr	r0, [pc, #80]	; (8006bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bac:	f7f9 fab4 	bl	8000118 <__udivsi3>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	4353      	muls	r3, r2
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bba:	e008      	b.n	8006bce <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bbe:	480e      	ldr	r0, [pc, #56]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bc0:	f7f9 faaa 	bl	8000118 <__udivsi3>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	001a      	movs	r2, r3
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	4353      	muls	r3, r2
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bd2:	e005      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bd8:	e002      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006be2:	0018      	movs	r0, r3
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b00f      	add	sp, #60	; 0x3c
 8006be8:	bd90      	pop	{r4, r7, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	08008b50 	.word	0x08008b50
 8006bf0:	08008b60 	.word	0x08008b60
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	007a1200 	.word	0x007a1200
 8006bfc:	02dc6c00 	.word	0x02dc6c00

08006c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e0a8      	b.n	8006d64 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	2382      	movs	r3, #130	; 0x82
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d009      	beq.n	8006c3a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	61da      	str	r2, [r3, #28]
 8006c2c:	e005      	b.n	8006c3a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	225d      	movs	r2, #93	; 0x5d
 8006c44:	5c9b      	ldrb	r3, [r3, r2]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d107      	bne.n	8006c5c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	225c      	movs	r2, #92	; 0x5c
 8006c50:	2100      	movs	r1, #0
 8006c52:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	0018      	movs	r0, r3
 8006c58:	f7fc fe12 	bl	8003880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	225d      	movs	r2, #93	; 0x5d
 8006c60:	2102      	movs	r1, #2
 8006c62:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2140      	movs	r1, #64	; 0x40
 8006c70:	438a      	bics	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	23e0      	movs	r3, #224	; 0xe0
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d902      	bls.n	8006c86 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e002      	b.n	8006c8c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c86:	2380      	movs	r3, #128	; 0x80
 8006c88:	015b      	lsls	r3, r3, #5
 8006c8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	23f0      	movs	r3, #240	; 0xf0
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d008      	beq.n	8006caa <HAL_SPI_Init+0xaa>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	23e0      	movs	r3, #224	; 0xe0
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d002      	beq.n	8006caa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	2382      	movs	r3, #130	; 0x82
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6899      	ldr	r1, [r3, #8]
 8006cb8:	2384      	movs	r3, #132	; 0x84
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	400b      	ands	r3, r1
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	400b      	ands	r3, r1
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	2101      	movs	r1, #1
 8006cd0:	400b      	ands	r3, r1
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6999      	ldr	r1, [r3, #24]
 8006cd8:	2380      	movs	r3, #128	; 0x80
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	400b      	ands	r3, r1
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	2138      	movs	r1, #56	; 0x38
 8006ce6:	400b      	ands	r3, r1
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	400b      	ands	r3, r1
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	0011      	movs	r1, r2
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cfa:	2380      	movs	r3, #128	; 0x80
 8006cfc:	019b      	lsls	r3, r3, #6
 8006cfe:	401a      	ands	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	2204      	movs	r2, #4
 8006d10:	401a      	ands	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2110      	movs	r1, #16
 8006d18:	400b      	ands	r3, r1
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d20:	2108      	movs	r1, #8
 8006d22:	400b      	ands	r3, r1
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68d9      	ldr	r1, [r3, #12]
 8006d2a:	23f0      	movs	r3, #240	; 0xf0
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	400b      	ands	r3, r1
 8006d30:	431a      	orrs	r2, r3
 8006d32:	0011      	movs	r1, r2
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	2380      	movs	r3, #128	; 0x80
 8006d38:	015b      	lsls	r3, r3, #5
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4907      	ldr	r1, [pc, #28]	; (8006d6c <HAL_SPI_Init+0x16c>)
 8006d50:	400a      	ands	r2, r1
 8006d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	225d      	movs	r2, #93	; 0x5d
 8006d5e:	2101      	movs	r1, #1
 8006d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b004      	add	sp, #16
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	fffff7ff 	.word	0xfffff7ff

08006d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e042      	b.n	8006e08 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	223d      	movs	r2, #61	; 0x3d
 8006d86:	5c9b      	ldrb	r3, [r3, r2]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d107      	bne.n	8006d9e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	223c      	movs	r2, #60	; 0x3c
 8006d92:	2100      	movs	r1, #0
 8006d94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f7fc fdbd 	bl	8003918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	223d      	movs	r2, #61	; 0x3d
 8006da2:	2102      	movs	r1, #2
 8006da4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	0019      	movs	r1, r3
 8006db0:	0010      	movs	r0, r2
 8006db2:	f000 fa27 	bl	8007204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2246      	movs	r2, #70	; 0x46
 8006dba:	2101      	movs	r1, #1
 8006dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	223e      	movs	r2, #62	; 0x3e
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	5499      	strb	r1, [r3, r2]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	223f      	movs	r2, #63	; 0x3f
 8006dca:	2101      	movs	r1, #1
 8006dcc:	5499      	strb	r1, [r3, r2]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2240      	movs	r2, #64	; 0x40
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	5499      	strb	r1, [r3, r2]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2241      	movs	r2, #65	; 0x41
 8006dda:	2101      	movs	r1, #1
 8006ddc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2242      	movs	r2, #66	; 0x42
 8006de2:	2101      	movs	r1, #1
 8006de4:	5499      	strb	r1, [r3, r2]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2243      	movs	r2, #67	; 0x43
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2244      	movs	r2, #68	; 0x44
 8006df2:	2101      	movs	r1, #1
 8006df4:	5499      	strb	r1, [r3, r2]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2245      	movs	r2, #69	; 0x45
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	223d      	movs	r2, #61	; 0x3d
 8006e02:	2101      	movs	r1, #1
 8006e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	0018      	movs	r0, r3
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b002      	add	sp, #8
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d108      	bne.n	8006e32 <HAL_TIM_PWM_Start+0x22>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	223e      	movs	r2, #62	; 0x3e
 8006e24:	5c9b      	ldrb	r3, [r3, r2]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	1e5a      	subs	r2, r3, #1
 8006e2c:	4193      	sbcs	r3, r2
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	e01f      	b.n	8006e72 <HAL_TIM_PWM_Start+0x62>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d108      	bne.n	8006e4a <HAL_TIM_PWM_Start+0x3a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	223f      	movs	r2, #63	; 0x3f
 8006e3c:	5c9b      	ldrb	r3, [r3, r2]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	1e5a      	subs	r2, r3, #1
 8006e44:	4193      	sbcs	r3, r2
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	e013      	b.n	8006e72 <HAL_TIM_PWM_Start+0x62>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d108      	bne.n	8006e62 <HAL_TIM_PWM_Start+0x52>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2240      	movs	r2, #64	; 0x40
 8006e54:	5c9b      	ldrb	r3, [r3, r2]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	4193      	sbcs	r3, r2
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	e007      	b.n	8006e72 <HAL_TIM_PWM_Start+0x62>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2241      	movs	r2, #65	; 0x41
 8006e66:	5c9b      	ldrb	r3, [r3, r2]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	1e5a      	subs	r2, r3, #1
 8006e6e:	4193      	sbcs	r3, r2
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e074      	b.n	8006f64 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_PWM_Start+0x7a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	223e      	movs	r2, #62	; 0x3e
 8006e84:	2102      	movs	r1, #2
 8006e86:	5499      	strb	r1, [r3, r2]
 8006e88:	e013      	b.n	8006eb2 <HAL_TIM_PWM_Start+0xa2>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_PWM_Start+0x8a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	223f      	movs	r2, #63	; 0x3f
 8006e94:	2102      	movs	r1, #2
 8006e96:	5499      	strb	r1, [r3, r2]
 8006e98:	e00b      	b.n	8006eb2 <HAL_TIM_PWM_Start+0xa2>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d104      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x9a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2240      	movs	r2, #64	; 0x40
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	5499      	strb	r1, [r3, r2]
 8006ea8:	e003      	b.n	8006eb2 <HAL_TIM_PWM_Start+0xa2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2241      	movs	r2, #65	; 0x41
 8006eae:	2102      	movs	r1, #2
 8006eb0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 fc1e 	bl	80076fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <HAL_TIM_PWM_Start+0x15c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_TIM_PWM_Start+0xd8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <HAL_TIM_PWM_Start+0x160>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <HAL_TIM_PWM_Start+0xd8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <HAL_TIM_PWM_Start+0x164>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_TIM_PWM_Start+0xd8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <HAL_TIM_PWM_Start+0x168>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d101      	bne.n	8006eec <HAL_TIM_PWM_Start+0xdc>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <HAL_TIM_PWM_Start+0xde>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	0209      	lsls	r1, r1, #8
 8006f00:	430a      	orrs	r2, r1
 8006f02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <HAL_TIM_PWM_Start+0x15c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00f      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x11e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	2380      	movs	r3, #128	; 0x80
 8006f14:	05db      	lsls	r3, r3, #23
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d009      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x11e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a17      	ldr	r2, [pc, #92]	; (8006f7c <HAL_TIM_PWM_Start+0x16c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x11e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a11      	ldr	r2, [pc, #68]	; (8006f70 <HAL_TIM_PWM_Start+0x160>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d111      	bne.n	8006f52 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2207      	movs	r2, #7
 8006f36:	4013      	ands	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b06      	cmp	r3, #6
 8006f3e:	d010      	beq.n	8006f62 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f50:	e007      	b.n	8006f62 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	0018      	movs	r0, r3
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b004      	add	sp, #16
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800
 8006f7c:	40000400 	.word	0x40000400

08006f80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	2200      	movs	r2, #0
 8006f92:	0018      	movs	r0, r3
 8006f94:	f000 fbb2 	bl	80076fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2f      	ldr	r2, [pc, #188]	; (800705c <HAL_TIM_PWM_Stop+0xdc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_TIM_PWM_Stop+0x40>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2e      	ldr	r2, [pc, #184]	; (8007060 <HAL_TIM_PWM_Stop+0xe0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_TIM_PWM_Stop+0x40>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <HAL_TIM_PWM_Stop+0xe4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_TIM_PWM_Stop+0x40>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2b      	ldr	r2, [pc, #172]	; (8007068 <HAL_TIM_PWM_Stop+0xe8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIM_PWM_Stop+0x44>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_TIM_PWM_Stop+0x46>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d013      	beq.n	8006ff2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	4a26      	ldr	r2, [pc, #152]	; (800706c <HAL_TIM_PWM_Stop+0xec>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d10d      	bne.n	8006ff2 <HAL_TIM_PWM_Stop+0x72>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4a24      	ldr	r2, [pc, #144]	; (8007070 <HAL_TIM_PWM_Stop+0xf0>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d107      	bne.n	8006ff2 <HAL_TIM_PWM_Stop+0x72>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4921      	ldr	r1, [pc, #132]	; (8007074 <HAL_TIM_PWM_Stop+0xf4>)
 8006fee:	400a      	ands	r2, r1
 8006ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	; (800706c <HAL_TIM_PWM_Stop+0xec>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d10d      	bne.n	800701a <HAL_TIM_PWM_Stop+0x9a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	4a1a      	ldr	r2, [pc, #104]	; (8007070 <HAL_TIM_PWM_Stop+0xf0>)
 8007006:	4013      	ands	r3, r2
 8007008:	d107      	bne.n	800701a <HAL_TIM_PWM_Stop+0x9a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2101      	movs	r1, #1
 8007016:	438a      	bics	r2, r1
 8007018:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Stop+0xaa>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	223e      	movs	r2, #62	; 0x3e
 8007024:	2101      	movs	r1, #1
 8007026:	5499      	strb	r1, [r3, r2]
 8007028:	e013      	b.n	8007052 <HAL_TIM_PWM_Stop+0xd2>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b04      	cmp	r3, #4
 800702e:	d104      	bne.n	800703a <HAL_TIM_PWM_Stop+0xba>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	223f      	movs	r2, #63	; 0x3f
 8007034:	2101      	movs	r1, #1
 8007036:	5499      	strb	r1, [r3, r2]
 8007038:	e00b      	b.n	8007052 <HAL_TIM_PWM_Stop+0xd2>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d104      	bne.n	800704a <HAL_TIM_PWM_Stop+0xca>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2240      	movs	r2, #64	; 0x40
 8007044:	2101      	movs	r1, #1
 8007046:	5499      	strb	r1, [r3, r2]
 8007048:	e003      	b.n	8007052 <HAL_TIM_PWM_Stop+0xd2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2241      	movs	r2, #65	; 0x41
 800704e:	2101      	movs	r1, #1
 8007050:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	0018      	movs	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	b002      	add	sp, #8
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40012c00 	.word	0x40012c00
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800
 800706c:	00001111 	.word	0x00001111
 8007070:	00000444 	.word	0x00000444
 8007074:	ffff7fff 	.word	0xffff7fff

08007078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007084:	2317      	movs	r3, #23
 8007086:	18fb      	adds	r3, r7, r3
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	223c      	movs	r2, #60	; 0x3c
 8007090:	5c9b      	ldrb	r3, [r3, r2]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007096:	2302      	movs	r3, #2
 8007098:	e0ad      	b.n	80071f6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	223c      	movs	r2, #60	; 0x3c
 800709e:	2101      	movs	r1, #1
 80070a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b0c      	cmp	r3, #12
 80070a6:	d100      	bne.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80070a8:	e076      	b.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x120>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b0c      	cmp	r3, #12
 80070ae:	d900      	bls.n	80070b2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80070b0:	e095      	b.n	80071de <HAL_TIM_PWM_ConfigChannel+0x166>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d04e      	beq.n	8007156 <HAL_TIM_PWM_ConfigChannel+0xde>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d900      	bls.n	80070c0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80070be:	e08e      	b.n	80071de <HAL_TIM_PWM_ConfigChannel+0x166>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <HAL_TIM_PWM_ConfigChannel+0x56>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d021      	beq.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x98>
 80070cc:	e087      	b.n	80071de <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	0011      	movs	r1, r2
 80070d6:	0018      	movs	r0, r3
 80070d8:	f000 f914 	bl	8007304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2108      	movs	r1, #8
 80070e8:	430a      	orrs	r2, r1
 80070ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2104      	movs	r1, #4
 80070f8:	438a      	bics	r2, r1
 80070fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6999      	ldr	r1, [r3, #24]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	619a      	str	r2, [r3, #24]
      break;
 800710e:	e06b      	b.n	80071e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f000 f97b 	bl	8007414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2180      	movs	r1, #128	; 0x80
 800712a:	0109      	lsls	r1, r1, #4
 800712c:	430a      	orrs	r2, r1
 800712e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4931      	ldr	r1, [pc, #196]	; (8007200 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800713c:	400a      	ands	r2, r1
 800713e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6999      	ldr	r1, [r3, #24]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	021a      	lsls	r2, r3, #8
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	619a      	str	r2, [r3, #24]
      break;
 8007154:	e048      	b.n	80071e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	0011      	movs	r1, r2
 800715e:	0018      	movs	r0, r3
 8007160:	f000 f9dc 	bl	800751c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2108      	movs	r1, #8
 8007170:	430a      	orrs	r2, r1
 8007172:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69da      	ldr	r2, [r3, #28]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2104      	movs	r1, #4
 8007180:	438a      	bics	r2, r1
 8007182:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69d9      	ldr	r1, [r3, #28]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	61da      	str	r2, [r3, #28]
      break;
 8007196:	e027      	b.n	80071e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	0011      	movs	r1, r2
 80071a0:	0018      	movs	r0, r3
 80071a2:	f000 fa41 	bl	8007628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69da      	ldr	r2, [r3, #28]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2180      	movs	r1, #128	; 0x80
 80071b2:	0109      	lsls	r1, r1, #4
 80071b4:	430a      	orrs	r2, r1
 80071b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69da      	ldr	r2, [r3, #28]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	490f      	ldr	r1, [pc, #60]	; (8007200 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80071c4:	400a      	ands	r2, r1
 80071c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69d9      	ldr	r1, [r3, #28]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	61da      	str	r2, [r3, #28]
      break;
 80071dc:	e004      	b.n	80071e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80071de:	2317      	movs	r3, #23
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	2201      	movs	r2, #1
 80071e4:	701a      	strb	r2, [r3, #0]
      break;
 80071e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	223c      	movs	r2, #60	; 0x3c
 80071ec:	2100      	movs	r1, #0
 80071ee:	5499      	strb	r1, [r3, r2]

  return status;
 80071f0:	2317      	movs	r3, #23
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	781b      	ldrb	r3, [r3, #0]
}
 80071f6:	0018      	movs	r0, r3
 80071f8:	46bd      	mov	sp, r7
 80071fa:	b006      	add	sp, #24
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	fffffbff 	.word	0xfffffbff

08007204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a34      	ldr	r2, [pc, #208]	; (80072e8 <TIM_Base_SetConfig+0xe4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d008      	beq.n	800722e <TIM_Base_SetConfig+0x2a>
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	2380      	movs	r3, #128	; 0x80
 8007220:	05db      	lsls	r3, r3, #23
 8007222:	429a      	cmp	r2, r3
 8007224:	d003      	beq.n	800722e <TIM_Base_SetConfig+0x2a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a30      	ldr	r2, [pc, #192]	; (80072ec <TIM_Base_SetConfig+0xe8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d108      	bne.n	8007240 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2270      	movs	r2, #112	; 0x70
 8007232:	4393      	bics	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a29      	ldr	r2, [pc, #164]	; (80072e8 <TIM_Base_SetConfig+0xe4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d018      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	05db      	lsls	r3, r3, #23
 800724e:	429a      	cmp	r2, r3
 8007250:	d013      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a25      	ldr	r2, [pc, #148]	; (80072ec <TIM_Base_SetConfig+0xe8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <TIM_Base_SetConfig+0xec>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <TIM_Base_SetConfig+0xf0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <TIM_Base_SetConfig+0xf4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_Base_SetConfig+0x76>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a21      	ldr	r2, [pc, #132]	; (80072fc <TIM_Base_SetConfig+0xf8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d108      	bne.n	800728c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a20      	ldr	r2, [pc, #128]	; (8007300 <TIM_Base_SetConfig+0xfc>)
 800727e:	4013      	ands	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2280      	movs	r2, #128	; 0x80
 8007290:	4393      	bics	r3, r2
 8007292:	001a      	movs	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <TIM_Base_SetConfig+0xe4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00b      	beq.n	80072d2 <TIM_Base_SetConfig+0xce>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a0d      	ldr	r2, [pc, #52]	; (80072f4 <TIM_Base_SetConfig+0xf0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d007      	beq.n	80072d2 <TIM_Base_SetConfig+0xce>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <TIM_Base_SetConfig+0xf4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d003      	beq.n	80072d2 <TIM_Base_SetConfig+0xce>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <TIM_Base_SetConfig+0xf8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d103      	bne.n	80072da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	615a      	str	r2, [r3, #20]
}
 80072e0:	46c0      	nop			; (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b004      	add	sp, #16
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40002000 	.word	0x40002000
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800
 8007300:	fffffcff 	.word	0xfffffcff

08007304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	2201      	movs	r2, #1
 8007314:	4393      	bics	r3, r2
 8007316:	001a      	movs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2270      	movs	r2, #112	; 0x70
 8007332:	4393      	bics	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2203      	movs	r2, #3
 800733a:	4393      	bics	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2202      	movs	r2, #2
 800734c:	4393      	bics	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <TIM_OC1_SetConfig+0xf8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00b      	beq.n	800737a <TIM_OC1_SetConfig+0x76>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a26      	ldr	r2, [pc, #152]	; (8007400 <TIM_OC1_SetConfig+0xfc>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d007      	beq.n	800737a <TIM_OC1_SetConfig+0x76>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a25      	ldr	r2, [pc, #148]	; (8007404 <TIM_OC1_SetConfig+0x100>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <TIM_OC1_SetConfig+0x76>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a24      	ldr	r2, [pc, #144]	; (8007408 <TIM_OC1_SetConfig+0x104>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d10c      	bne.n	8007394 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2208      	movs	r2, #8
 800737e:	4393      	bics	r3, r2
 8007380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2204      	movs	r2, #4
 8007390:	4393      	bics	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a19      	ldr	r2, [pc, #100]	; (80073fc <TIM_OC1_SetConfig+0xf8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00b      	beq.n	80073b4 <TIM_OC1_SetConfig+0xb0>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a18      	ldr	r2, [pc, #96]	; (8007400 <TIM_OC1_SetConfig+0xfc>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d007      	beq.n	80073b4 <TIM_OC1_SetConfig+0xb0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a17      	ldr	r2, [pc, #92]	; (8007404 <TIM_OC1_SetConfig+0x100>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_OC1_SetConfig+0xb0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a16      	ldr	r2, [pc, #88]	; (8007408 <TIM_OC1_SetConfig+0x104>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d111      	bne.n	80073d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	4a15      	ldr	r2, [pc, #84]	; (800740c <TIM_OC1_SetConfig+0x108>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4a14      	ldr	r2, [pc, #80]	; (8007410 <TIM_OC1_SetConfig+0x10c>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b006      	add	sp, #24
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	40012c00 	.word	0x40012c00
 8007400:	40014000 	.word	0x40014000
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800
 800740c:	fffffeff 	.word	0xfffffeff
 8007410:	fffffdff 	.word	0xfffffdff

08007414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	2210      	movs	r2, #16
 8007424:	4393      	bics	r3, r2
 8007426:	001a      	movs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a2e      	ldr	r2, [pc, #184]	; (80074fc <TIM_OC2_SetConfig+0xe8>)
 8007442:	4013      	ands	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4a2d      	ldr	r2, [pc, #180]	; (8007500 <TIM_OC2_SetConfig+0xec>)
 800744a:	4013      	ands	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2220      	movs	r2, #32
 800745e:	4393      	bics	r3, r2
 8007460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a24      	ldr	r2, [pc, #144]	; (8007504 <TIM_OC2_SetConfig+0xf0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d10d      	bne.n	8007492 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2280      	movs	r2, #128	; 0x80
 800747a:	4393      	bics	r3, r2
 800747c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2240      	movs	r2, #64	; 0x40
 800748e:	4393      	bics	r3, r2
 8007490:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <TIM_OC2_SetConfig+0xf0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00b      	beq.n	80074b2 <TIM_OC2_SetConfig+0x9e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a1a      	ldr	r2, [pc, #104]	; (8007508 <TIM_OC2_SetConfig+0xf4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d007      	beq.n	80074b2 <TIM_OC2_SetConfig+0x9e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a19      	ldr	r2, [pc, #100]	; (800750c <TIM_OC2_SetConfig+0xf8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d003      	beq.n	80074b2 <TIM_OC2_SetConfig+0x9e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a18      	ldr	r2, [pc, #96]	; (8007510 <TIM_OC2_SetConfig+0xfc>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d113      	bne.n	80074da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	4a17      	ldr	r2, [pc, #92]	; (8007514 <TIM_OC2_SetConfig+0x100>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4a16      	ldr	r2, [pc, #88]	; (8007518 <TIM_OC2_SetConfig+0x104>)
 80074be:	4013      	ands	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	621a      	str	r2, [r3, #32]
}
 80074f4:	46c0      	nop			; (mov r8, r8)
 80074f6:	46bd      	mov	sp, r7
 80074f8:	b006      	add	sp, #24
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	ffff8fff 	.word	0xffff8fff
 8007500:	fffffcff 	.word	0xfffffcff
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800
 8007514:	fffffbff 	.word	0xfffffbff
 8007518:	fffff7ff 	.word	0xfffff7ff

0800751c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	4a35      	ldr	r2, [pc, #212]	; (8007600 <TIM_OC3_SetConfig+0xe4>)
 800752c:	401a      	ands	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2270      	movs	r2, #112	; 0x70
 8007548:	4393      	bics	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2203      	movs	r2, #3
 8007550:	4393      	bics	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4a28      	ldr	r2, [pc, #160]	; (8007604 <TIM_OC3_SetConfig+0xe8>)
 8007562:	4013      	ands	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a24      	ldr	r2, [pc, #144]	; (8007608 <TIM_OC3_SetConfig+0xec>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d10d      	bne.n	8007596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4a23      	ldr	r2, [pc, #140]	; (800760c <TIM_OC3_SetConfig+0xf0>)
 800757e:	4013      	ands	r3, r2
 8007580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4a1f      	ldr	r2, [pc, #124]	; (8007610 <TIM_OC3_SetConfig+0xf4>)
 8007592:	4013      	ands	r3, r2
 8007594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <TIM_OC3_SetConfig+0xec>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00b      	beq.n	80075b6 <TIM_OC3_SetConfig+0x9a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a1c      	ldr	r2, [pc, #112]	; (8007614 <TIM_OC3_SetConfig+0xf8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <TIM_OC3_SetConfig+0x9a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a1b      	ldr	r2, [pc, #108]	; (8007618 <TIM_OC3_SetConfig+0xfc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_OC3_SetConfig+0x9a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1a      	ldr	r2, [pc, #104]	; (800761c <TIM_OC3_SetConfig+0x100>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d113      	bne.n	80075de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4a19      	ldr	r2, [pc, #100]	; (8007620 <TIM_OC3_SetConfig+0x104>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4a18      	ldr	r2, [pc, #96]	; (8007624 <TIM_OC3_SetConfig+0x108>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	621a      	str	r2, [r3, #32]
}
 80075f8:	46c0      	nop			; (mov r8, r8)
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b006      	add	sp, #24
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	fffffeff 	.word	0xfffffeff
 8007604:	fffffdff 	.word	0xfffffdff
 8007608:	40012c00 	.word	0x40012c00
 800760c:	fffff7ff 	.word	0xfffff7ff
 8007610:	fffffbff 	.word	0xfffffbff
 8007614:	40014000 	.word	0x40014000
 8007618:	40014400 	.word	0x40014400
 800761c:	40014800 	.word	0x40014800
 8007620:	ffffefff 	.word	0xffffefff
 8007624:	ffffdfff 	.word	0xffffdfff

08007628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	4a28      	ldr	r2, [pc, #160]	; (80076d8 <TIM_OC4_SetConfig+0xb0>)
 8007638:	401a      	ands	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a22      	ldr	r2, [pc, #136]	; (80076dc <TIM_OC4_SetConfig+0xb4>)
 8007654:	4013      	ands	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a21      	ldr	r2, [pc, #132]	; (80076e0 <TIM_OC4_SetConfig+0xb8>)
 800765c:	4013      	ands	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4a1d      	ldr	r2, [pc, #116]	; (80076e4 <TIM_OC4_SetConfig+0xbc>)
 8007670:	4013      	ands	r3, r2
 8007672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	031b      	lsls	r3, r3, #12
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <TIM_OC4_SetConfig+0xc0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_OC4_SetConfig+0x78>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a18      	ldr	r2, [pc, #96]	; (80076ec <TIM_OC4_SetConfig+0xc4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_OC4_SetConfig+0x78>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <TIM_OC4_SetConfig+0xc8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_OC4_SetConfig+0x78>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <TIM_OC4_SetConfig+0xcc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d109      	bne.n	80076b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <TIM_OC4_SetConfig+0xd0>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	019b      	lsls	r3, r3, #6
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	46bd      	mov	sp, r7
 80076d2:	b006      	add	sp, #24
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	ffffefff 	.word	0xffffefff
 80076dc:	ffff8fff 	.word	0xffff8fff
 80076e0:	fffffcff 	.word	0xfffffcff
 80076e4:	ffffdfff 	.word	0xffffdfff
 80076e8:	40012c00 	.word	0x40012c00
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40014400 	.word	0x40014400
 80076f4:	40014800 	.word	0x40014800
 80076f8:	ffffbfff 	.word	0xffffbfff

080076fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	221f      	movs	r2, #31
 800770c:	4013      	ands	r3, r2
 800770e:	2201      	movs	r2, #1
 8007710:	409a      	lsls	r2, r3
 8007712:	0013      	movs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	43d2      	mvns	r2, r2
 800771e:	401a      	ands	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	211f      	movs	r1, #31
 800772c:	400b      	ands	r3, r1
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4099      	lsls	r1, r3
 8007732:	000b      	movs	r3, r1
 8007734:	431a      	orrs	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	46bd      	mov	sp, r7
 800773e:	b006      	add	sp, #24
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	223c      	movs	r2, #60	; 0x3c
 8007752:	5c9b      	ldrb	r3, [r3, r2]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007758:	2302      	movs	r3, #2
 800775a:	e047      	b.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	223c      	movs	r2, #60	; 0x3c
 8007760:	2101      	movs	r1, #1
 8007762:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	223d      	movs	r2, #61	; 0x3d
 8007768:	2102      	movs	r1, #2
 800776a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2270      	movs	r2, #112	; 0x70
 8007780:	4393      	bics	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a16      	ldr	r2, [pc, #88]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00f      	beq.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	2380      	movs	r3, #128	; 0x80
 80077a6:	05db      	lsls	r3, r3, #23
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d009      	beq.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a11      	ldr	r2, [pc, #68]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a10      	ldr	r2, [pc, #64]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10c      	bne.n	80077da <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2280      	movs	r2, #128	; 0x80
 80077c4:	4393      	bics	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	223d      	movs	r2, #61	; 0x3d
 80077de:	2101      	movs	r1, #1
 80077e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	223c      	movs	r2, #60	; 0x3c
 80077e6:	2100      	movs	r1, #0
 80077e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b004      	add	sp, #16
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40014000 	.word	0x40014000

08007800 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	223c      	movs	r2, #60	; 0x3c
 8007812:	5c9b      	ldrb	r3, [r3, r2]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007818:	2302      	movs	r3, #2
 800781a:	e03e      	b.n	800789a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	223c      	movs	r2, #60	; 0x3c
 8007820:	2101      	movs	r1, #1
 8007822:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	4393      	bics	r3, r2
 800782a:	001a      	movs	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a1b      	ldr	r2, [pc, #108]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007838:	401a      	ands	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007846:	401a      	ands	r2, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4a16      	ldr	r2, [pc, #88]	; (80078ac <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007854:	401a      	ands	r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007862:	401a      	ands	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4a11      	ldr	r2, [pc, #68]	; (80078b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007870:	401a      	ands	r2, r3
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4a0e      	ldr	r2, [pc, #56]	; (80078b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800787e:	401a      	ands	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	223c      	movs	r2, #60	; 0x3c
 8007894:	2100      	movs	r1, #0
 8007896:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	0018      	movs	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	b004      	add	sp, #16
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	fffffcff 	.word	0xfffffcff
 80078a8:	fffffbff 	.word	0xfffffbff
 80078ac:	fffff7ff 	.word	0xfffff7ff
 80078b0:	ffffefff 	.word	0xffffefff
 80078b4:	ffffdfff 	.word	0xffffdfff
 80078b8:	ffffbfff 	.word	0xffffbfff

080078bc <__errno>:
 80078bc:	4b01      	ldr	r3, [pc, #4]	; (80078c4 <__errno+0x8>)
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	4770      	bx	lr
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	20000088 	.word	0x20000088

080078c8 <__libc_init_array>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	2600      	movs	r6, #0
 80078cc:	4d0c      	ldr	r5, [pc, #48]	; (8007900 <__libc_init_array+0x38>)
 80078ce:	4c0d      	ldr	r4, [pc, #52]	; (8007904 <__libc_init_array+0x3c>)
 80078d0:	1b64      	subs	r4, r4, r5
 80078d2:	10a4      	asrs	r4, r4, #2
 80078d4:	42a6      	cmp	r6, r4
 80078d6:	d109      	bne.n	80078ec <__libc_init_array+0x24>
 80078d8:	2600      	movs	r6, #0
 80078da:	f001 f86d 	bl	80089b8 <_init>
 80078de:	4d0a      	ldr	r5, [pc, #40]	; (8007908 <__libc_init_array+0x40>)
 80078e0:	4c0a      	ldr	r4, [pc, #40]	; (800790c <__libc_init_array+0x44>)
 80078e2:	1b64      	subs	r4, r4, r5
 80078e4:	10a4      	asrs	r4, r4, #2
 80078e6:	42a6      	cmp	r6, r4
 80078e8:	d105      	bne.n	80078f6 <__libc_init_array+0x2e>
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	00b3      	lsls	r3, r6, #2
 80078ee:	58eb      	ldr	r3, [r5, r3]
 80078f0:	4798      	blx	r3
 80078f2:	3601      	adds	r6, #1
 80078f4:	e7ee      	b.n	80078d4 <__libc_init_array+0xc>
 80078f6:	00b3      	lsls	r3, r6, #2
 80078f8:	58eb      	ldr	r3, [r5, r3]
 80078fa:	4798      	blx	r3
 80078fc:	3601      	adds	r6, #1
 80078fe:	e7f2      	b.n	80078e6 <__libc_init_array+0x1e>
 8007900:	080097b0 	.word	0x080097b0
 8007904:	080097b0 	.word	0x080097b0
 8007908:	080097b0 	.word	0x080097b0
 800790c:	080097b4 	.word	0x080097b4

08007910 <malloc>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4b03      	ldr	r3, [pc, #12]	; (8007920 <malloc+0x10>)
 8007914:	0001      	movs	r1, r0
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	f000 f856 	bl	80079c8 <_malloc_r>
 800791c:	bd10      	pop	{r4, pc}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	20000088 	.word	0x20000088

08007924 <memset>:
 8007924:	0003      	movs	r3, r0
 8007926:	1882      	adds	r2, r0, r2
 8007928:	4293      	cmp	r3, r2
 800792a:	d100      	bne.n	800792e <memset+0xa>
 800792c:	4770      	bx	lr
 800792e:	7019      	strb	r1, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	e7f9      	b.n	8007928 <memset+0x4>

08007934 <_free_r>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	0005      	movs	r5, r0
 8007938:	2900      	cmp	r1, #0
 800793a:	d010      	beq.n	800795e <_free_r+0x2a>
 800793c:	1f0c      	subs	r4, r1, #4
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	da00      	bge.n	8007946 <_free_r+0x12>
 8007944:	18e4      	adds	r4, r4, r3
 8007946:	0028      	movs	r0, r5
 8007948:	f000 f91a 	bl	8007b80 <__malloc_lock>
 800794c:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <_free_r+0x90>)
 800794e:	6813      	ldr	r3, [r2, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <_free_r+0x2c>
 8007954:	6063      	str	r3, [r4, #4]
 8007956:	6014      	str	r4, [r2, #0]
 8007958:	0028      	movs	r0, r5
 800795a:	f000 f919 	bl	8007b90 <__malloc_unlock>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	42a3      	cmp	r3, r4
 8007962:	d908      	bls.n	8007976 <_free_r+0x42>
 8007964:	6821      	ldr	r1, [r4, #0]
 8007966:	1860      	adds	r0, r4, r1
 8007968:	4283      	cmp	r3, r0
 800796a:	d1f3      	bne.n	8007954 <_free_r+0x20>
 800796c:	6818      	ldr	r0, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	1841      	adds	r1, r0, r1
 8007972:	6021      	str	r1, [r4, #0]
 8007974:	e7ee      	b.n	8007954 <_free_r+0x20>
 8007976:	001a      	movs	r2, r3
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <_free_r+0x4e>
 800797e:	42a3      	cmp	r3, r4
 8007980:	d9f9      	bls.n	8007976 <_free_r+0x42>
 8007982:	6811      	ldr	r1, [r2, #0]
 8007984:	1850      	adds	r0, r2, r1
 8007986:	42a0      	cmp	r0, r4
 8007988:	d10b      	bne.n	80079a2 <_free_r+0x6e>
 800798a:	6820      	ldr	r0, [r4, #0]
 800798c:	1809      	adds	r1, r1, r0
 800798e:	1850      	adds	r0, r2, r1
 8007990:	6011      	str	r1, [r2, #0]
 8007992:	4283      	cmp	r3, r0
 8007994:	d1e0      	bne.n	8007958 <_free_r+0x24>
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	1841      	adds	r1, r0, r1
 800799c:	6011      	str	r1, [r2, #0]
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e7da      	b.n	8007958 <_free_r+0x24>
 80079a2:	42a0      	cmp	r0, r4
 80079a4:	d902      	bls.n	80079ac <_free_r+0x78>
 80079a6:	230c      	movs	r3, #12
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	e7d5      	b.n	8007958 <_free_r+0x24>
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	1860      	adds	r0, r4, r1
 80079b0:	4283      	cmp	r3, r0
 80079b2:	d103      	bne.n	80079bc <_free_r+0x88>
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	1841      	adds	r1, r0, r1
 80079ba:	6021      	str	r1, [r4, #0]
 80079bc:	6063      	str	r3, [r4, #4]
 80079be:	6054      	str	r4, [r2, #4]
 80079c0:	e7ca      	b.n	8007958 <_free_r+0x24>
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	20000128 	.word	0x20000128

080079c8 <_malloc_r>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	2303      	movs	r3, #3
 80079cc:	1ccd      	adds	r5, r1, #3
 80079ce:	439d      	bics	r5, r3
 80079d0:	3508      	adds	r5, #8
 80079d2:	0006      	movs	r6, r0
 80079d4:	2d0c      	cmp	r5, #12
 80079d6:	d21f      	bcs.n	8007a18 <_malloc_r+0x50>
 80079d8:	250c      	movs	r5, #12
 80079da:	42a9      	cmp	r1, r5
 80079dc:	d81e      	bhi.n	8007a1c <_malloc_r+0x54>
 80079de:	0030      	movs	r0, r6
 80079e0:	f000 f8ce 	bl	8007b80 <__malloc_lock>
 80079e4:	4925      	ldr	r1, [pc, #148]	; (8007a7c <_malloc_r+0xb4>)
 80079e6:	680a      	ldr	r2, [r1, #0]
 80079e8:	0014      	movs	r4, r2
 80079ea:	2c00      	cmp	r4, #0
 80079ec:	d11a      	bne.n	8007a24 <_malloc_r+0x5c>
 80079ee:	4f24      	ldr	r7, [pc, #144]	; (8007a80 <_malloc_r+0xb8>)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d104      	bne.n	8007a00 <_malloc_r+0x38>
 80079f6:	0021      	movs	r1, r4
 80079f8:	0030      	movs	r0, r6
 80079fa:	f000 f881 	bl	8007b00 <_sbrk_r>
 80079fe:	6038      	str	r0, [r7, #0]
 8007a00:	0029      	movs	r1, r5
 8007a02:	0030      	movs	r0, r6
 8007a04:	f000 f87c 	bl	8007b00 <_sbrk_r>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d12b      	bne.n	8007a64 <_malloc_r+0x9c>
 8007a0c:	230c      	movs	r3, #12
 8007a0e:	0030      	movs	r0, r6
 8007a10:	6033      	str	r3, [r6, #0]
 8007a12:	f000 f8bd 	bl	8007b90 <__malloc_unlock>
 8007a16:	e003      	b.n	8007a20 <_malloc_r+0x58>
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	dade      	bge.n	80079da <_malloc_r+0x12>
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	2000      	movs	r0, #0
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	1b5b      	subs	r3, r3, r5
 8007a28:	d419      	bmi.n	8007a5e <_malloc_r+0x96>
 8007a2a:	2b0b      	cmp	r3, #11
 8007a2c:	d903      	bls.n	8007a36 <_malloc_r+0x6e>
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	18e4      	adds	r4, r4, r3
 8007a32:	6025      	str	r5, [r4, #0]
 8007a34:	e003      	b.n	8007a3e <_malloc_r+0x76>
 8007a36:	6863      	ldr	r3, [r4, #4]
 8007a38:	42a2      	cmp	r2, r4
 8007a3a:	d10e      	bne.n	8007a5a <_malloc_r+0x92>
 8007a3c:	600b      	str	r3, [r1, #0]
 8007a3e:	0030      	movs	r0, r6
 8007a40:	f000 f8a6 	bl	8007b90 <__malloc_unlock>
 8007a44:	0020      	movs	r0, r4
 8007a46:	2207      	movs	r2, #7
 8007a48:	300b      	adds	r0, #11
 8007a4a:	1d23      	adds	r3, r4, #4
 8007a4c:	4390      	bics	r0, r2
 8007a4e:	1ac2      	subs	r2, r0, r3
 8007a50:	4298      	cmp	r0, r3
 8007a52:	d0e6      	beq.n	8007a22 <_malloc_r+0x5a>
 8007a54:	1a1b      	subs	r3, r3, r0
 8007a56:	50a3      	str	r3, [r4, r2]
 8007a58:	e7e3      	b.n	8007a22 <_malloc_r+0x5a>
 8007a5a:	6053      	str	r3, [r2, #4]
 8007a5c:	e7ef      	b.n	8007a3e <_malloc_r+0x76>
 8007a5e:	0022      	movs	r2, r4
 8007a60:	6864      	ldr	r4, [r4, #4]
 8007a62:	e7c2      	b.n	80079ea <_malloc_r+0x22>
 8007a64:	2303      	movs	r3, #3
 8007a66:	1cc4      	adds	r4, r0, #3
 8007a68:	439c      	bics	r4, r3
 8007a6a:	42a0      	cmp	r0, r4
 8007a6c:	d0e1      	beq.n	8007a32 <_malloc_r+0x6a>
 8007a6e:	1a21      	subs	r1, r4, r0
 8007a70:	0030      	movs	r0, r6
 8007a72:	f000 f845 	bl	8007b00 <_sbrk_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	d1db      	bne.n	8007a32 <_malloc_r+0x6a>
 8007a7a:	e7c7      	b.n	8007a0c <_malloc_r+0x44>
 8007a7c:	20000128 	.word	0x20000128
 8007a80:	2000012c 	.word	0x2000012c

08007a84 <rand>:
 8007a84:	4b16      	ldr	r3, [pc, #88]	; (8007ae0 <rand+0x5c>)
 8007a86:	b510      	push	{r4, lr}
 8007a88:	681c      	ldr	r4, [r3, #0]
 8007a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d116      	bne.n	8007abe <rand+0x3a>
 8007a90:	2018      	movs	r0, #24
 8007a92:	f7ff ff3d 	bl	8007910 <malloc>
 8007a96:	1e02      	subs	r2, r0, #0
 8007a98:	63a0      	str	r0, [r4, #56]	; 0x38
 8007a9a:	d104      	bne.n	8007aa6 <rand+0x22>
 8007a9c:	214e      	movs	r1, #78	; 0x4e
 8007a9e:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <rand+0x60>)
 8007aa0:	4811      	ldr	r0, [pc, #68]	; (8007ae8 <rand+0x64>)
 8007aa2:	f000 f83f 	bl	8007b24 <__assert_func>
 8007aa6:	4b11      	ldr	r3, [pc, #68]	; (8007aec <rand+0x68>)
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6003      	str	r3, [r0, #0]
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <rand+0x6c>)
 8007aae:	6043      	str	r3, [r0, #4]
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <rand+0x70>)
 8007ab2:	6083      	str	r3, [r0, #8]
 8007ab4:	230b      	movs	r3, #11
 8007ab6:	8183      	strh	r3, [r0, #12]
 8007ab8:	2001      	movs	r0, #1
 8007aba:	6110      	str	r0, [r2, #16]
 8007abc:	6151      	str	r1, [r2, #20]
 8007abe:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007ac0:	4a0d      	ldr	r2, [pc, #52]	; (8007af8 <rand+0x74>)
 8007ac2:	6920      	ldr	r0, [r4, #16]
 8007ac4:	6961      	ldr	r1, [r4, #20]
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <rand+0x78>)
 8007ac8:	f7f8 fcda 	bl	8000480 <__aeabi_lmul>
 8007acc:	2201      	movs	r2, #1
 8007ace:	2300      	movs	r3, #0
 8007ad0:	1880      	adds	r0, r0, r2
 8007ad2:	4159      	adcs	r1, r3
 8007ad4:	6120      	str	r0, [r4, #16]
 8007ad6:	6161      	str	r1, [r4, #20]
 8007ad8:	0048      	lsls	r0, r1, #1
 8007ada:	0840      	lsrs	r0, r0, #1
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	20000088 	.word	0x20000088
 8007ae4:	08009668 	.word	0x08009668
 8007ae8:	0800967f 	.word	0x0800967f
 8007aec:	abcd330e 	.word	0xabcd330e
 8007af0:	e66d1234 	.word	0xe66d1234
 8007af4:	0005deec 	.word	0x0005deec
 8007af8:	4c957f2d 	.word	0x4c957f2d
 8007afc:	5851f42d 	.word	0x5851f42d

08007b00 <_sbrk_r>:
 8007b00:	2300      	movs	r3, #0
 8007b02:	b570      	push	{r4, r5, r6, lr}
 8007b04:	4d06      	ldr	r5, [pc, #24]	; (8007b20 <_sbrk_r+0x20>)
 8007b06:	0004      	movs	r4, r0
 8007b08:	0008      	movs	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7fc f822 	bl	8003b54 <_sbrk>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d103      	bne.n	8007b1c <_sbrk_r+0x1c>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d000      	beq.n	8007b1c <_sbrk_r+0x1c>
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	20000300 	.word	0x20000300

08007b24 <__assert_func>:
 8007b24:	b530      	push	{r4, r5, lr}
 8007b26:	0014      	movs	r4, r2
 8007b28:	001a      	movs	r2, r3
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <__assert_func+0x2c>)
 8007b2c:	0005      	movs	r5, r0
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	b085      	sub	sp, #20
 8007b32:	68d8      	ldr	r0, [r3, #12]
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <__assert_func+0x30>)
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	d101      	bne.n	8007b3e <__assert_func+0x1a>
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <__assert_func+0x34>)
 8007b3c:	001c      	movs	r4, r3
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	9100      	str	r1, [sp, #0]
 8007b42:	002b      	movs	r3, r5
 8007b44:	4905      	ldr	r1, [pc, #20]	; (8007b5c <__assert_func+0x38>)
 8007b46:	9402      	str	r4, [sp, #8]
 8007b48:	f000 f80a 	bl	8007b60 <fiprintf>
 8007b4c:	f000 fbda 	bl	8008304 <abort>
 8007b50:	20000088 	.word	0x20000088
 8007b54:	080096de 	.word	0x080096de
 8007b58:	08009719 	.word	0x08009719
 8007b5c:	080096eb 	.word	0x080096eb

08007b60 <fiprintf>:
 8007b60:	b40e      	push	{r1, r2, r3}
 8007b62:	b503      	push	{r0, r1, lr}
 8007b64:	0001      	movs	r1, r0
 8007b66:	ab03      	add	r3, sp, #12
 8007b68:	4804      	ldr	r0, [pc, #16]	; (8007b7c <fiprintf+0x1c>)
 8007b6a:	cb04      	ldmia	r3!, {r2}
 8007b6c:	6800      	ldr	r0, [r0, #0]
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	f000 f83e 	bl	8007bf0 <_vfiprintf_r>
 8007b74:	b002      	add	sp, #8
 8007b76:	bc08      	pop	{r3}
 8007b78:	b003      	add	sp, #12
 8007b7a:	4718      	bx	r3
 8007b7c:	20000088 	.word	0x20000088

08007b80 <__malloc_lock>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	4802      	ldr	r0, [pc, #8]	; (8007b8c <__malloc_lock+0xc>)
 8007b84:	f000 fd95 	bl	80086b2 <__retarget_lock_acquire_recursive>
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	20000308 	.word	0x20000308

08007b90 <__malloc_unlock>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	4802      	ldr	r0, [pc, #8]	; (8007b9c <__malloc_unlock+0xc>)
 8007b94:	f000 fd8e 	bl	80086b4 <__retarget_lock_release_recursive>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	20000308 	.word	0x20000308

08007ba0 <__sfputc_r>:
 8007ba0:	6893      	ldr	r3, [r2, #8]
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	6093      	str	r3, [r2, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	da04      	bge.n	8007bb6 <__sfputc_r+0x16>
 8007bac:	6994      	ldr	r4, [r2, #24]
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	db07      	blt.n	8007bc2 <__sfputc_r+0x22>
 8007bb2:	290a      	cmp	r1, #10
 8007bb4:	d005      	beq.n	8007bc2 <__sfputc_r+0x22>
 8007bb6:	6813      	ldr	r3, [r2, #0]
 8007bb8:	1c58      	adds	r0, r3, #1
 8007bba:	6010      	str	r0, [r2, #0]
 8007bbc:	7019      	strb	r1, [r3, #0]
 8007bbe:	0008      	movs	r0, r1
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	f000 fad1 	bl	8008168 <__swbuf_r>
 8007bc6:	0001      	movs	r1, r0
 8007bc8:	e7f9      	b.n	8007bbe <__sfputc_r+0x1e>

08007bca <__sfputs_r>:
 8007bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bcc:	0006      	movs	r6, r0
 8007bce:	000f      	movs	r7, r1
 8007bd0:	0014      	movs	r4, r2
 8007bd2:	18d5      	adds	r5, r2, r3
 8007bd4:	42ac      	cmp	r4, r5
 8007bd6:	d101      	bne.n	8007bdc <__sfputs_r+0x12>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	e007      	b.n	8007bec <__sfputs_r+0x22>
 8007bdc:	7821      	ldrb	r1, [r4, #0]
 8007bde:	003a      	movs	r2, r7
 8007be0:	0030      	movs	r0, r6
 8007be2:	f7ff ffdd 	bl	8007ba0 <__sfputc_r>
 8007be6:	3401      	adds	r4, #1
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d1f3      	bne.n	8007bd4 <__sfputs_r+0xa>
 8007bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bf0 <_vfiprintf_r>:
 8007bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bf2:	b0a1      	sub	sp, #132	; 0x84
 8007bf4:	0006      	movs	r6, r0
 8007bf6:	000c      	movs	r4, r1
 8007bf8:	001f      	movs	r7, r3
 8007bfa:	9203      	str	r2, [sp, #12]
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d004      	beq.n	8007c0a <_vfiprintf_r+0x1a>
 8007c00:	6983      	ldr	r3, [r0, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <_vfiprintf_r+0x1a>
 8007c06:	f000 fcb3 	bl	8008570 <__sinit>
 8007c0a:	4b8e      	ldr	r3, [pc, #568]	; (8007e44 <_vfiprintf_r+0x254>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	d11c      	bne.n	8007c4a <_vfiprintf_r+0x5a>
 8007c10:	6874      	ldr	r4, [r6, #4]
 8007c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c14:	07db      	lsls	r3, r3, #31
 8007c16:	d405      	bmi.n	8007c24 <_vfiprintf_r+0x34>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	059b      	lsls	r3, r3, #22
 8007c1c:	d402      	bmi.n	8007c24 <_vfiprintf_r+0x34>
 8007c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c20:	f000 fd47 	bl	80086b2 <__retarget_lock_acquire_recursive>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	071b      	lsls	r3, r3, #28
 8007c28:	d502      	bpl.n	8007c30 <_vfiprintf_r+0x40>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d11d      	bne.n	8007c6c <_vfiprintf_r+0x7c>
 8007c30:	0021      	movs	r1, r4
 8007c32:	0030      	movs	r0, r6
 8007c34:	f000 faee 	bl	8008214 <__swsetup_r>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d017      	beq.n	8007c6c <_vfiprintf_r+0x7c>
 8007c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c3e:	07db      	lsls	r3, r3, #31
 8007c40:	d50d      	bpl.n	8007c5e <_vfiprintf_r+0x6e>
 8007c42:	2001      	movs	r0, #1
 8007c44:	4240      	negs	r0, r0
 8007c46:	b021      	add	sp, #132	; 0x84
 8007c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c4a:	4b7f      	ldr	r3, [pc, #508]	; (8007e48 <_vfiprintf_r+0x258>)
 8007c4c:	429c      	cmp	r4, r3
 8007c4e:	d101      	bne.n	8007c54 <_vfiprintf_r+0x64>
 8007c50:	68b4      	ldr	r4, [r6, #8]
 8007c52:	e7de      	b.n	8007c12 <_vfiprintf_r+0x22>
 8007c54:	4b7d      	ldr	r3, [pc, #500]	; (8007e4c <_vfiprintf_r+0x25c>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	d1db      	bne.n	8007c12 <_vfiprintf_r+0x22>
 8007c5a:	68f4      	ldr	r4, [r6, #12]
 8007c5c:	e7d9      	b.n	8007c12 <_vfiprintf_r+0x22>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	059b      	lsls	r3, r3, #22
 8007c62:	d4ee      	bmi.n	8007c42 <_vfiprintf_r+0x52>
 8007c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c66:	f000 fd25 	bl	80086b4 <__retarget_lock_release_recursive>
 8007c6a:	e7ea      	b.n	8007c42 <_vfiprintf_r+0x52>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	ad08      	add	r5, sp, #32
 8007c70:	616b      	str	r3, [r5, #20]
 8007c72:	3320      	adds	r3, #32
 8007c74:	766b      	strb	r3, [r5, #25]
 8007c76:	3310      	adds	r3, #16
 8007c78:	76ab      	strb	r3, [r5, #26]
 8007c7a:	9707      	str	r7, [sp, #28]
 8007c7c:	9f03      	ldr	r7, [sp, #12]
 8007c7e:	783b      	ldrb	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <_vfiprintf_r+0x98>
 8007c84:	2b25      	cmp	r3, #37	; 0x25
 8007c86:	d14e      	bne.n	8007d26 <_vfiprintf_r+0x136>
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	1afb      	subs	r3, r7, r3
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	429f      	cmp	r7, r3
 8007c92:	d00d      	beq.n	8007cb0 <_vfiprintf_r+0xc0>
 8007c94:	9b05      	ldr	r3, [sp, #20]
 8007c96:	0021      	movs	r1, r4
 8007c98:	0030      	movs	r0, r6
 8007c9a:	9a03      	ldr	r2, [sp, #12]
 8007c9c:	f7ff ff95 	bl	8007bca <__sfputs_r>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d100      	bne.n	8007ca6 <_vfiprintf_r+0xb6>
 8007ca4:	e0b5      	b.n	8007e12 <_vfiprintf_r+0x222>
 8007ca6:	696a      	ldr	r2, [r5, #20]
 8007ca8:	9b05      	ldr	r3, [sp, #20]
 8007caa:	4694      	mov	ip, r2
 8007cac:	4463      	add	r3, ip
 8007cae:	616b      	str	r3, [r5, #20]
 8007cb0:	783b      	ldrb	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d100      	bne.n	8007cb8 <_vfiprintf_r+0xc8>
 8007cb6:	e0ac      	b.n	8007e12 <_vfiprintf_r+0x222>
 8007cb8:	2201      	movs	r2, #1
 8007cba:	1c7b      	adds	r3, r7, #1
 8007cbc:	9303      	str	r3, [sp, #12]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4252      	negs	r2, r2
 8007cc2:	606a      	str	r2, [r5, #4]
 8007cc4:	a904      	add	r1, sp, #16
 8007cc6:	3254      	adds	r2, #84	; 0x54
 8007cc8:	1852      	adds	r2, r2, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	60eb      	str	r3, [r5, #12]
 8007cce:	60ab      	str	r3, [r5, #8]
 8007cd0:	7013      	strb	r3, [r2, #0]
 8007cd2:	65ab      	str	r3, [r5, #88]	; 0x58
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	2205      	movs	r2, #5
 8007cd8:	7819      	ldrb	r1, [r3, #0]
 8007cda:	485d      	ldr	r0, [pc, #372]	; (8007e50 <_vfiprintf_r+0x260>)
 8007cdc:	f000 fd58 	bl	8008790 <memchr>
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	1c5f      	adds	r7, r3, #1
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d120      	bne.n	8007d2a <_vfiprintf_r+0x13a>
 8007ce8:	682a      	ldr	r2, [r5, #0]
 8007cea:	06d3      	lsls	r3, r2, #27
 8007cec:	d504      	bpl.n	8007cf8 <_vfiprintf_r+0x108>
 8007cee:	2353      	movs	r3, #83	; 0x53
 8007cf0:	a904      	add	r1, sp, #16
 8007cf2:	185b      	adds	r3, r3, r1
 8007cf4:	2120      	movs	r1, #32
 8007cf6:	7019      	strb	r1, [r3, #0]
 8007cf8:	0713      	lsls	r3, r2, #28
 8007cfa:	d504      	bpl.n	8007d06 <_vfiprintf_r+0x116>
 8007cfc:	2353      	movs	r3, #83	; 0x53
 8007cfe:	a904      	add	r1, sp, #16
 8007d00:	185b      	adds	r3, r3, r1
 8007d02:	212b      	movs	r1, #43	; 0x2b
 8007d04:	7019      	strb	r1, [r3, #0]
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d0c:	d016      	beq.n	8007d3c <_vfiprintf_r+0x14c>
 8007d0e:	2100      	movs	r1, #0
 8007d10:	68eb      	ldr	r3, [r5, #12]
 8007d12:	9f03      	ldr	r7, [sp, #12]
 8007d14:	783a      	ldrb	r2, [r7, #0]
 8007d16:	1c78      	adds	r0, r7, #1
 8007d18:	3a30      	subs	r2, #48	; 0x30
 8007d1a:	4684      	mov	ip, r0
 8007d1c:	2a09      	cmp	r2, #9
 8007d1e:	d94f      	bls.n	8007dc0 <_vfiprintf_r+0x1d0>
 8007d20:	2900      	cmp	r1, #0
 8007d22:	d111      	bne.n	8007d48 <_vfiprintf_r+0x158>
 8007d24:	e017      	b.n	8007d56 <_vfiprintf_r+0x166>
 8007d26:	3701      	adds	r7, #1
 8007d28:	e7a9      	b.n	8007c7e <_vfiprintf_r+0x8e>
 8007d2a:	4b49      	ldr	r3, [pc, #292]	; (8007e50 <_vfiprintf_r+0x260>)
 8007d2c:	682a      	ldr	r2, [r5, #0]
 8007d2e:	1ac0      	subs	r0, r0, r3
 8007d30:	2301      	movs	r3, #1
 8007d32:	4083      	lsls	r3, r0
 8007d34:	4313      	orrs	r3, r2
 8007d36:	602b      	str	r3, [r5, #0]
 8007d38:	9703      	str	r7, [sp, #12]
 8007d3a:	e7cb      	b.n	8007cd4 <_vfiprintf_r+0xe4>
 8007d3c:	9b07      	ldr	r3, [sp, #28]
 8007d3e:	1d19      	adds	r1, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	9107      	str	r1, [sp, #28]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	db01      	blt.n	8007d4c <_vfiprintf_r+0x15c>
 8007d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d4a:	e004      	b.n	8007d56 <_vfiprintf_r+0x166>
 8007d4c:	425b      	negs	r3, r3
 8007d4e:	60eb      	str	r3, [r5, #12]
 8007d50:	2302      	movs	r3, #2
 8007d52:	4313      	orrs	r3, r2
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	783b      	ldrb	r3, [r7, #0]
 8007d58:	2b2e      	cmp	r3, #46	; 0x2e
 8007d5a:	d10a      	bne.n	8007d72 <_vfiprintf_r+0x182>
 8007d5c:	787b      	ldrb	r3, [r7, #1]
 8007d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d60:	d137      	bne.n	8007dd2 <_vfiprintf_r+0x1e2>
 8007d62:	9b07      	ldr	r3, [sp, #28]
 8007d64:	3702      	adds	r7, #2
 8007d66:	1d1a      	adds	r2, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	9207      	str	r2, [sp, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	db2d      	blt.n	8007dcc <_vfiprintf_r+0x1dc>
 8007d70:	9309      	str	r3, [sp, #36]	; 0x24
 8007d72:	2203      	movs	r2, #3
 8007d74:	7839      	ldrb	r1, [r7, #0]
 8007d76:	4837      	ldr	r0, [pc, #220]	; (8007e54 <_vfiprintf_r+0x264>)
 8007d78:	f000 fd0a 	bl	8008790 <memchr>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d007      	beq.n	8007d90 <_vfiprintf_r+0x1a0>
 8007d80:	4b34      	ldr	r3, [pc, #208]	; (8007e54 <_vfiprintf_r+0x264>)
 8007d82:	682a      	ldr	r2, [r5, #0]
 8007d84:	1ac0      	subs	r0, r0, r3
 8007d86:	2340      	movs	r3, #64	; 0x40
 8007d88:	4083      	lsls	r3, r0
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	3701      	adds	r7, #1
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	7839      	ldrb	r1, [r7, #0]
 8007d92:	1c7b      	adds	r3, r7, #1
 8007d94:	2206      	movs	r2, #6
 8007d96:	4830      	ldr	r0, [pc, #192]	; (8007e58 <_vfiprintf_r+0x268>)
 8007d98:	9303      	str	r3, [sp, #12]
 8007d9a:	7629      	strb	r1, [r5, #24]
 8007d9c:	f000 fcf8 	bl	8008790 <memchr>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d045      	beq.n	8007e30 <_vfiprintf_r+0x240>
 8007da4:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <_vfiprintf_r+0x26c>)
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d127      	bne.n	8007dfa <_vfiprintf_r+0x20a>
 8007daa:	2207      	movs	r2, #7
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	3307      	adds	r3, #7
 8007db0:	4393      	bics	r3, r2
 8007db2:	3308      	adds	r3, #8
 8007db4:	9307      	str	r3, [sp, #28]
 8007db6:	696b      	ldr	r3, [r5, #20]
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	616b      	str	r3, [r5, #20]
 8007dbe:	e75d      	b.n	8007c7c <_vfiprintf_r+0x8c>
 8007dc0:	210a      	movs	r1, #10
 8007dc2:	434b      	muls	r3, r1
 8007dc4:	4667      	mov	r7, ip
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	3909      	subs	r1, #9
 8007dca:	e7a3      	b.n	8007d14 <_vfiprintf_r+0x124>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	425b      	negs	r3, r3
 8007dd0:	e7ce      	b.n	8007d70 <_vfiprintf_r+0x180>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	001a      	movs	r2, r3
 8007dd6:	3701      	adds	r7, #1
 8007dd8:	606b      	str	r3, [r5, #4]
 8007dda:	7839      	ldrb	r1, [r7, #0]
 8007ddc:	1c78      	adds	r0, r7, #1
 8007dde:	3930      	subs	r1, #48	; 0x30
 8007de0:	4684      	mov	ip, r0
 8007de2:	2909      	cmp	r1, #9
 8007de4:	d903      	bls.n	8007dee <_vfiprintf_r+0x1fe>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0c3      	beq.n	8007d72 <_vfiprintf_r+0x182>
 8007dea:	9209      	str	r2, [sp, #36]	; 0x24
 8007dec:	e7c1      	b.n	8007d72 <_vfiprintf_r+0x182>
 8007dee:	230a      	movs	r3, #10
 8007df0:	435a      	muls	r2, r3
 8007df2:	4667      	mov	r7, ip
 8007df4:	1852      	adds	r2, r2, r1
 8007df6:	3b09      	subs	r3, #9
 8007df8:	e7ef      	b.n	8007dda <_vfiprintf_r+0x1ea>
 8007dfa:	ab07      	add	r3, sp, #28
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	0022      	movs	r2, r4
 8007e00:	0029      	movs	r1, r5
 8007e02:	0030      	movs	r0, r6
 8007e04:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <_vfiprintf_r+0x270>)
 8007e06:	e000      	b.n	8007e0a <_vfiprintf_r+0x21a>
 8007e08:	bf00      	nop
 8007e0a:	9004      	str	r0, [sp, #16]
 8007e0c:	9b04      	ldr	r3, [sp, #16]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	d1d1      	bne.n	8007db6 <_vfiprintf_r+0x1c6>
 8007e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e14:	07db      	lsls	r3, r3, #31
 8007e16:	d405      	bmi.n	8007e24 <_vfiprintf_r+0x234>
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	059b      	lsls	r3, r3, #22
 8007e1c:	d402      	bmi.n	8007e24 <_vfiprintf_r+0x234>
 8007e1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e20:	f000 fc48 	bl	80086b4 <__retarget_lock_release_recursive>
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	065b      	lsls	r3, r3, #25
 8007e28:	d500      	bpl.n	8007e2c <_vfiprintf_r+0x23c>
 8007e2a:	e70a      	b.n	8007c42 <_vfiprintf_r+0x52>
 8007e2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007e2e:	e70a      	b.n	8007c46 <_vfiprintf_r+0x56>
 8007e30:	ab07      	add	r3, sp, #28
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	0022      	movs	r2, r4
 8007e36:	0029      	movs	r1, r5
 8007e38:	0030      	movs	r0, r6
 8007e3a:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <_vfiprintf_r+0x270>)
 8007e3c:	f000 f882 	bl	8007f44 <_printf_i>
 8007e40:	e7e3      	b.n	8007e0a <_vfiprintf_r+0x21a>
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	08009770 	.word	0x08009770
 8007e48:	08009790 	.word	0x08009790
 8007e4c:	08009750 	.word	0x08009750
 8007e50:	0800971a 	.word	0x0800971a
 8007e54:	08009720 	.word	0x08009720
 8007e58:	08009724 	.word	0x08009724
 8007e5c:	00000000 	.word	0x00000000
 8007e60:	08007bcb 	.word	0x08007bcb

08007e64 <_printf_common>:
 8007e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e66:	0015      	movs	r5, r2
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	688a      	ldr	r2, [r1, #8]
 8007e6c:	690b      	ldr	r3, [r1, #16]
 8007e6e:	000c      	movs	r4, r1
 8007e70:	9000      	str	r0, [sp, #0]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	da00      	bge.n	8007e78 <_printf_common+0x14>
 8007e76:	0013      	movs	r3, r2
 8007e78:	0022      	movs	r2, r4
 8007e7a:	602b      	str	r3, [r5, #0]
 8007e7c:	3243      	adds	r2, #67	; 0x43
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	d001      	beq.n	8007e88 <_printf_common+0x24>
 8007e84:	3301      	adds	r3, #1
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	069b      	lsls	r3, r3, #26
 8007e8c:	d502      	bpl.n	8007e94 <_printf_common+0x30>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	3302      	adds	r3, #2
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	2306      	movs	r3, #6
 8007e98:	0017      	movs	r7, r2
 8007e9a:	401f      	ands	r7, r3
 8007e9c:	421a      	tst	r2, r3
 8007e9e:	d027      	beq.n	8007ef0 <_printf_common+0x8c>
 8007ea0:	0023      	movs	r3, r4
 8007ea2:	3343      	adds	r3, #67	; 0x43
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	1e5a      	subs	r2, r3, #1
 8007ea8:	4193      	sbcs	r3, r2
 8007eaa:	6822      	ldr	r2, [r4, #0]
 8007eac:	0692      	lsls	r2, r2, #26
 8007eae:	d430      	bmi.n	8007f12 <_printf_common+0xae>
 8007eb0:	0022      	movs	r2, r4
 8007eb2:	9901      	ldr	r1, [sp, #4]
 8007eb4:	9800      	ldr	r0, [sp, #0]
 8007eb6:	9e08      	ldr	r6, [sp, #32]
 8007eb8:	3243      	adds	r2, #67	; 0x43
 8007eba:	47b0      	blx	r6
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d025      	beq.n	8007f0c <_printf_common+0xa8>
 8007ec0:	2306      	movs	r3, #6
 8007ec2:	6820      	ldr	r0, [r4, #0]
 8007ec4:	682a      	ldr	r2, [r5, #0]
 8007ec6:	68e1      	ldr	r1, [r4, #12]
 8007ec8:	2500      	movs	r5, #0
 8007eca:	4003      	ands	r3, r0
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d103      	bne.n	8007ed8 <_printf_common+0x74>
 8007ed0:	1a8d      	subs	r5, r1, r2
 8007ed2:	43eb      	mvns	r3, r5
 8007ed4:	17db      	asrs	r3, r3, #31
 8007ed6:	401d      	ands	r5, r3
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	6922      	ldr	r2, [r4, #16]
 8007edc:	4293      	cmp	r3, r2
 8007ede:	dd01      	ble.n	8007ee4 <_printf_common+0x80>
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	18ed      	adds	r5, r5, r3
 8007ee4:	2700      	movs	r7, #0
 8007ee6:	42bd      	cmp	r5, r7
 8007ee8:	d120      	bne.n	8007f2c <_printf_common+0xc8>
 8007eea:	2000      	movs	r0, #0
 8007eec:	e010      	b.n	8007f10 <_printf_common+0xac>
 8007eee:	3701      	adds	r7, #1
 8007ef0:	68e3      	ldr	r3, [r4, #12]
 8007ef2:	682a      	ldr	r2, [r5, #0]
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	42bb      	cmp	r3, r7
 8007ef8:	ddd2      	ble.n	8007ea0 <_printf_common+0x3c>
 8007efa:	0022      	movs	r2, r4
 8007efc:	2301      	movs	r3, #1
 8007efe:	9901      	ldr	r1, [sp, #4]
 8007f00:	9800      	ldr	r0, [sp, #0]
 8007f02:	9e08      	ldr	r6, [sp, #32]
 8007f04:	3219      	adds	r2, #25
 8007f06:	47b0      	blx	r6
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d1f0      	bne.n	8007eee <_printf_common+0x8a>
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	4240      	negs	r0, r0
 8007f10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f12:	2030      	movs	r0, #48	; 0x30
 8007f14:	18e1      	adds	r1, r4, r3
 8007f16:	3143      	adds	r1, #67	; 0x43
 8007f18:	7008      	strb	r0, [r1, #0]
 8007f1a:	0021      	movs	r1, r4
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	3145      	adds	r1, #69	; 0x45
 8007f20:	7809      	ldrb	r1, [r1, #0]
 8007f22:	18a2      	adds	r2, r4, r2
 8007f24:	3243      	adds	r2, #67	; 0x43
 8007f26:	3302      	adds	r3, #2
 8007f28:	7011      	strb	r1, [r2, #0]
 8007f2a:	e7c1      	b.n	8007eb0 <_printf_common+0x4c>
 8007f2c:	0022      	movs	r2, r4
 8007f2e:	2301      	movs	r3, #1
 8007f30:	9901      	ldr	r1, [sp, #4]
 8007f32:	9800      	ldr	r0, [sp, #0]
 8007f34:	9e08      	ldr	r6, [sp, #32]
 8007f36:	321a      	adds	r2, #26
 8007f38:	47b0      	blx	r6
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	d0e6      	beq.n	8007f0c <_printf_common+0xa8>
 8007f3e:	3701      	adds	r7, #1
 8007f40:	e7d1      	b.n	8007ee6 <_printf_common+0x82>
	...

08007f44 <_printf_i>:
 8007f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f46:	b08b      	sub	sp, #44	; 0x2c
 8007f48:	9206      	str	r2, [sp, #24]
 8007f4a:	000a      	movs	r2, r1
 8007f4c:	3243      	adds	r2, #67	; 0x43
 8007f4e:	9307      	str	r3, [sp, #28]
 8007f50:	9005      	str	r0, [sp, #20]
 8007f52:	9204      	str	r2, [sp, #16]
 8007f54:	7e0a      	ldrb	r2, [r1, #24]
 8007f56:	000c      	movs	r4, r1
 8007f58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f5a:	2a78      	cmp	r2, #120	; 0x78
 8007f5c:	d806      	bhi.n	8007f6c <_printf_i+0x28>
 8007f5e:	2a62      	cmp	r2, #98	; 0x62
 8007f60:	d808      	bhi.n	8007f74 <_printf_i+0x30>
 8007f62:	2a00      	cmp	r2, #0
 8007f64:	d100      	bne.n	8007f68 <_printf_i+0x24>
 8007f66:	e0c0      	b.n	80080ea <_printf_i+0x1a6>
 8007f68:	2a58      	cmp	r2, #88	; 0x58
 8007f6a:	d052      	beq.n	8008012 <_printf_i+0xce>
 8007f6c:	0026      	movs	r6, r4
 8007f6e:	3642      	adds	r6, #66	; 0x42
 8007f70:	7032      	strb	r2, [r6, #0]
 8007f72:	e022      	b.n	8007fba <_printf_i+0x76>
 8007f74:	0010      	movs	r0, r2
 8007f76:	3863      	subs	r0, #99	; 0x63
 8007f78:	2815      	cmp	r0, #21
 8007f7a:	d8f7      	bhi.n	8007f6c <_printf_i+0x28>
 8007f7c:	f7f8 f8c2 	bl	8000104 <__gnu_thumb1_case_shi>
 8007f80:	001f0016 	.word	0x001f0016
 8007f84:	fff6fff6 	.word	0xfff6fff6
 8007f88:	fff6fff6 	.word	0xfff6fff6
 8007f8c:	fff6001f 	.word	0xfff6001f
 8007f90:	fff6fff6 	.word	0xfff6fff6
 8007f94:	00a8fff6 	.word	0x00a8fff6
 8007f98:	009a0036 	.word	0x009a0036
 8007f9c:	fff6fff6 	.word	0xfff6fff6
 8007fa0:	fff600b9 	.word	0xfff600b9
 8007fa4:	fff60036 	.word	0xfff60036
 8007fa8:	009efff6 	.word	0x009efff6
 8007fac:	0026      	movs	r6, r4
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	3642      	adds	r6, #66	; 0x42
 8007fb2:	1d11      	adds	r1, r2, #4
 8007fb4:	6019      	str	r1, [r3, #0]
 8007fb6:	6813      	ldr	r3, [r2, #0]
 8007fb8:	7033      	strb	r3, [r6, #0]
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e0a7      	b.n	800810e <_printf_i+0x1ca>
 8007fbe:	6808      	ldr	r0, [r1, #0]
 8007fc0:	6819      	ldr	r1, [r3, #0]
 8007fc2:	1d0a      	adds	r2, r1, #4
 8007fc4:	0605      	lsls	r5, r0, #24
 8007fc6:	d50b      	bpl.n	8007fe0 <_printf_i+0x9c>
 8007fc8:	680d      	ldr	r5, [r1, #0]
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	da03      	bge.n	8007fd8 <_printf_i+0x94>
 8007fd0:	232d      	movs	r3, #45	; 0x2d
 8007fd2:	9a04      	ldr	r2, [sp, #16]
 8007fd4:	426d      	negs	r5, r5
 8007fd6:	7013      	strb	r3, [r2, #0]
 8007fd8:	4b61      	ldr	r3, [pc, #388]	; (8008160 <_printf_i+0x21c>)
 8007fda:	270a      	movs	r7, #10
 8007fdc:	9303      	str	r3, [sp, #12]
 8007fde:	e032      	b.n	8008046 <_printf_i+0x102>
 8007fe0:	680d      	ldr	r5, [r1, #0]
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	0641      	lsls	r1, r0, #25
 8007fe6:	d5f1      	bpl.n	8007fcc <_printf_i+0x88>
 8007fe8:	b22d      	sxth	r5, r5
 8007fea:	e7ef      	b.n	8007fcc <_printf_i+0x88>
 8007fec:	680d      	ldr	r5, [r1, #0]
 8007fee:	6819      	ldr	r1, [r3, #0]
 8007ff0:	1d08      	adds	r0, r1, #4
 8007ff2:	6018      	str	r0, [r3, #0]
 8007ff4:	062e      	lsls	r6, r5, #24
 8007ff6:	d501      	bpl.n	8007ffc <_printf_i+0xb8>
 8007ff8:	680d      	ldr	r5, [r1, #0]
 8007ffa:	e003      	b.n	8008004 <_printf_i+0xc0>
 8007ffc:	066d      	lsls	r5, r5, #25
 8007ffe:	d5fb      	bpl.n	8007ff8 <_printf_i+0xb4>
 8008000:	680d      	ldr	r5, [r1, #0]
 8008002:	b2ad      	uxth	r5, r5
 8008004:	4b56      	ldr	r3, [pc, #344]	; (8008160 <_printf_i+0x21c>)
 8008006:	270a      	movs	r7, #10
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	2a6f      	cmp	r2, #111	; 0x6f
 800800c:	d117      	bne.n	800803e <_printf_i+0xfa>
 800800e:	2708      	movs	r7, #8
 8008010:	e015      	b.n	800803e <_printf_i+0xfa>
 8008012:	3145      	adds	r1, #69	; 0x45
 8008014:	700a      	strb	r2, [r1, #0]
 8008016:	4a52      	ldr	r2, [pc, #328]	; (8008160 <_printf_i+0x21c>)
 8008018:	9203      	str	r2, [sp, #12]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	6821      	ldr	r1, [r4, #0]
 800801e:	ca20      	ldmia	r2!, {r5}
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	0608      	lsls	r0, r1, #24
 8008024:	d550      	bpl.n	80080c8 <_printf_i+0x184>
 8008026:	07cb      	lsls	r3, r1, #31
 8008028:	d502      	bpl.n	8008030 <_printf_i+0xec>
 800802a:	2320      	movs	r3, #32
 800802c:	4319      	orrs	r1, r3
 800802e:	6021      	str	r1, [r4, #0]
 8008030:	2710      	movs	r7, #16
 8008032:	2d00      	cmp	r5, #0
 8008034:	d103      	bne.n	800803e <_printf_i+0xfa>
 8008036:	2320      	movs	r3, #32
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	439a      	bics	r2, r3
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	0023      	movs	r3, r4
 8008040:	2200      	movs	r2, #0
 8008042:	3343      	adds	r3, #67	; 0x43
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	db03      	blt.n	8008056 <_printf_i+0x112>
 800804e:	2204      	movs	r2, #4
 8008050:	6821      	ldr	r1, [r4, #0]
 8008052:	4391      	bics	r1, r2
 8008054:	6021      	str	r1, [r4, #0]
 8008056:	2d00      	cmp	r5, #0
 8008058:	d102      	bne.n	8008060 <_printf_i+0x11c>
 800805a:	9e04      	ldr	r6, [sp, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <_printf_i+0x136>
 8008060:	9e04      	ldr	r6, [sp, #16]
 8008062:	0028      	movs	r0, r5
 8008064:	0039      	movs	r1, r7
 8008066:	f7f8 f8dd 	bl	8000224 <__aeabi_uidivmod>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	3e01      	subs	r6, #1
 800806e:	5c5b      	ldrb	r3, [r3, r1]
 8008070:	7033      	strb	r3, [r6, #0]
 8008072:	002b      	movs	r3, r5
 8008074:	0005      	movs	r5, r0
 8008076:	429f      	cmp	r7, r3
 8008078:	d9f3      	bls.n	8008062 <_printf_i+0x11e>
 800807a:	2f08      	cmp	r7, #8
 800807c:	d109      	bne.n	8008092 <_printf_i+0x14e>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	07db      	lsls	r3, r3, #31
 8008082:	d506      	bpl.n	8008092 <_printf_i+0x14e>
 8008084:	6863      	ldr	r3, [r4, #4]
 8008086:	6922      	ldr	r2, [r4, #16]
 8008088:	4293      	cmp	r3, r2
 800808a:	dc02      	bgt.n	8008092 <_printf_i+0x14e>
 800808c:	2330      	movs	r3, #48	; 0x30
 800808e:	3e01      	subs	r6, #1
 8008090:	7033      	strb	r3, [r6, #0]
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	1b9b      	subs	r3, r3, r6
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	9b07      	ldr	r3, [sp, #28]
 800809a:	0021      	movs	r1, r4
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	9805      	ldr	r0, [sp, #20]
 80080a0:	9b06      	ldr	r3, [sp, #24]
 80080a2:	aa09      	add	r2, sp, #36	; 0x24
 80080a4:	f7ff fede 	bl	8007e64 <_printf_common>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d135      	bne.n	8008118 <_printf_i+0x1d4>
 80080ac:	2001      	movs	r0, #1
 80080ae:	4240      	negs	r0, r0
 80080b0:	b00b      	add	sp, #44	; 0x2c
 80080b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b4:	2220      	movs	r2, #32
 80080b6:	6809      	ldr	r1, [r1, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	6022      	str	r2, [r4, #0]
 80080bc:	0022      	movs	r2, r4
 80080be:	2178      	movs	r1, #120	; 0x78
 80080c0:	3245      	adds	r2, #69	; 0x45
 80080c2:	7011      	strb	r1, [r2, #0]
 80080c4:	4a27      	ldr	r2, [pc, #156]	; (8008164 <_printf_i+0x220>)
 80080c6:	e7a7      	b.n	8008018 <_printf_i+0xd4>
 80080c8:	0648      	lsls	r0, r1, #25
 80080ca:	d5ac      	bpl.n	8008026 <_printf_i+0xe2>
 80080cc:	b2ad      	uxth	r5, r5
 80080ce:	e7aa      	b.n	8008026 <_printf_i+0xe2>
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	680d      	ldr	r5, [r1, #0]
 80080d4:	1d10      	adds	r0, r2, #4
 80080d6:	6949      	ldr	r1, [r1, #20]
 80080d8:	6018      	str	r0, [r3, #0]
 80080da:	6813      	ldr	r3, [r2, #0]
 80080dc:	062e      	lsls	r6, r5, #24
 80080de:	d501      	bpl.n	80080e4 <_printf_i+0x1a0>
 80080e0:	6019      	str	r1, [r3, #0]
 80080e2:	e002      	b.n	80080ea <_printf_i+0x1a6>
 80080e4:	066d      	lsls	r5, r5, #25
 80080e6:	d5fb      	bpl.n	80080e0 <_printf_i+0x19c>
 80080e8:	8019      	strh	r1, [r3, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9e04      	ldr	r6, [sp, #16]
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	e7d2      	b.n	8008098 <_printf_i+0x154>
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	1d11      	adds	r1, r2, #4
 80080f6:	6019      	str	r1, [r3, #0]
 80080f8:	6816      	ldr	r6, [r2, #0]
 80080fa:	2100      	movs	r1, #0
 80080fc:	0030      	movs	r0, r6
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	f000 fb46 	bl	8008790 <memchr>
 8008104:	2800      	cmp	r0, #0
 8008106:	d001      	beq.n	800810c <_printf_i+0x1c8>
 8008108:	1b80      	subs	r0, r0, r6
 800810a:	6060      	str	r0, [r4, #4]
 800810c:	6863      	ldr	r3, [r4, #4]
 800810e:	6123      	str	r3, [r4, #16]
 8008110:	2300      	movs	r3, #0
 8008112:	9a04      	ldr	r2, [sp, #16]
 8008114:	7013      	strb	r3, [r2, #0]
 8008116:	e7bf      	b.n	8008098 <_printf_i+0x154>
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	0032      	movs	r2, r6
 800811c:	9906      	ldr	r1, [sp, #24]
 800811e:	9805      	ldr	r0, [sp, #20]
 8008120:	9d07      	ldr	r5, [sp, #28]
 8008122:	47a8      	blx	r5
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d0c1      	beq.n	80080ac <_printf_i+0x168>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	d415      	bmi.n	800815a <_printf_i+0x216>
 800812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008130:	68e0      	ldr	r0, [r4, #12]
 8008132:	4298      	cmp	r0, r3
 8008134:	dabc      	bge.n	80080b0 <_printf_i+0x16c>
 8008136:	0018      	movs	r0, r3
 8008138:	e7ba      	b.n	80080b0 <_printf_i+0x16c>
 800813a:	0022      	movs	r2, r4
 800813c:	2301      	movs	r3, #1
 800813e:	9906      	ldr	r1, [sp, #24]
 8008140:	9805      	ldr	r0, [sp, #20]
 8008142:	9e07      	ldr	r6, [sp, #28]
 8008144:	3219      	adds	r2, #25
 8008146:	47b0      	blx	r6
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d0af      	beq.n	80080ac <_printf_i+0x168>
 800814c:	3501      	adds	r5, #1
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008152:	1a9b      	subs	r3, r3, r2
 8008154:	42ab      	cmp	r3, r5
 8008156:	dcf0      	bgt.n	800813a <_printf_i+0x1f6>
 8008158:	e7e9      	b.n	800812e <_printf_i+0x1ea>
 800815a:	2500      	movs	r5, #0
 800815c:	e7f7      	b.n	800814e <_printf_i+0x20a>
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	0800972b 	.word	0x0800972b
 8008164:	0800973c 	.word	0x0800973c

08008168 <__swbuf_r>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	0005      	movs	r5, r0
 800816c:	000e      	movs	r6, r1
 800816e:	0014      	movs	r4, r2
 8008170:	2800      	cmp	r0, #0
 8008172:	d004      	beq.n	800817e <__swbuf_r+0x16>
 8008174:	6983      	ldr	r3, [r0, #24]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <__swbuf_r+0x16>
 800817a:	f000 f9f9 	bl	8008570 <__sinit>
 800817e:	4b22      	ldr	r3, [pc, #136]	; (8008208 <__swbuf_r+0xa0>)
 8008180:	429c      	cmp	r4, r3
 8008182:	d12e      	bne.n	80081e2 <__swbuf_r+0x7a>
 8008184:	686c      	ldr	r4, [r5, #4]
 8008186:	69a3      	ldr	r3, [r4, #24]
 8008188:	60a3      	str	r3, [r4, #8]
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	071b      	lsls	r3, r3, #28
 800818e:	d532      	bpl.n	80081f6 <__swbuf_r+0x8e>
 8008190:	6923      	ldr	r3, [r4, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d02f      	beq.n	80081f6 <__swbuf_r+0x8e>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	6922      	ldr	r2, [r4, #16]
 800819a:	b2f7      	uxtb	r7, r6
 800819c:	1a98      	subs	r0, r3, r2
 800819e:	6963      	ldr	r3, [r4, #20]
 80081a0:	b2f6      	uxtb	r6, r6
 80081a2:	4283      	cmp	r3, r0
 80081a4:	dc05      	bgt.n	80081b2 <__swbuf_r+0x4a>
 80081a6:	0021      	movs	r1, r4
 80081a8:	0028      	movs	r0, r5
 80081aa:	f000 f93f 	bl	800842c <_fflush_r>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d127      	bne.n	8008202 <__swbuf_r+0x9a>
 80081b2:	68a3      	ldr	r3, [r4, #8]
 80081b4:	3001      	adds	r0, #1
 80081b6:	3b01      	subs	r3, #1
 80081b8:	60a3      	str	r3, [r4, #8]
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	701f      	strb	r7, [r3, #0]
 80081c2:	6963      	ldr	r3, [r4, #20]
 80081c4:	4283      	cmp	r3, r0
 80081c6:	d004      	beq.n	80081d2 <__swbuf_r+0x6a>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	07db      	lsls	r3, r3, #31
 80081cc:	d507      	bpl.n	80081de <__swbuf_r+0x76>
 80081ce:	2e0a      	cmp	r6, #10
 80081d0:	d105      	bne.n	80081de <__swbuf_r+0x76>
 80081d2:	0021      	movs	r1, r4
 80081d4:	0028      	movs	r0, r5
 80081d6:	f000 f929 	bl	800842c <_fflush_r>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d111      	bne.n	8008202 <__swbuf_r+0x9a>
 80081de:	0030      	movs	r0, r6
 80081e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e2:	4b0a      	ldr	r3, [pc, #40]	; (800820c <__swbuf_r+0xa4>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d101      	bne.n	80081ec <__swbuf_r+0x84>
 80081e8:	68ac      	ldr	r4, [r5, #8]
 80081ea:	e7cc      	b.n	8008186 <__swbuf_r+0x1e>
 80081ec:	4b08      	ldr	r3, [pc, #32]	; (8008210 <__swbuf_r+0xa8>)
 80081ee:	429c      	cmp	r4, r3
 80081f0:	d1c9      	bne.n	8008186 <__swbuf_r+0x1e>
 80081f2:	68ec      	ldr	r4, [r5, #12]
 80081f4:	e7c7      	b.n	8008186 <__swbuf_r+0x1e>
 80081f6:	0021      	movs	r1, r4
 80081f8:	0028      	movs	r0, r5
 80081fa:	f000 f80b 	bl	8008214 <__swsetup_r>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d0c9      	beq.n	8008196 <__swbuf_r+0x2e>
 8008202:	2601      	movs	r6, #1
 8008204:	4276      	negs	r6, r6
 8008206:	e7ea      	b.n	80081de <__swbuf_r+0x76>
 8008208:	08009770 	.word	0x08009770
 800820c:	08009790 	.word	0x08009790
 8008210:	08009750 	.word	0x08009750

08008214 <__swsetup_r>:
 8008214:	4b37      	ldr	r3, [pc, #220]	; (80082f4 <__swsetup_r+0xe0>)
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	681d      	ldr	r5, [r3, #0]
 800821a:	0006      	movs	r6, r0
 800821c:	000c      	movs	r4, r1
 800821e:	2d00      	cmp	r5, #0
 8008220:	d005      	beq.n	800822e <__swsetup_r+0x1a>
 8008222:	69ab      	ldr	r3, [r5, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <__swsetup_r+0x1a>
 8008228:	0028      	movs	r0, r5
 800822a:	f000 f9a1 	bl	8008570 <__sinit>
 800822e:	4b32      	ldr	r3, [pc, #200]	; (80082f8 <__swsetup_r+0xe4>)
 8008230:	429c      	cmp	r4, r3
 8008232:	d10f      	bne.n	8008254 <__swsetup_r+0x40>
 8008234:	686c      	ldr	r4, [r5, #4]
 8008236:	230c      	movs	r3, #12
 8008238:	5ee2      	ldrsh	r2, [r4, r3]
 800823a:	b293      	uxth	r3, r2
 800823c:	0711      	lsls	r1, r2, #28
 800823e:	d42d      	bmi.n	800829c <__swsetup_r+0x88>
 8008240:	06d9      	lsls	r1, r3, #27
 8008242:	d411      	bmi.n	8008268 <__swsetup_r+0x54>
 8008244:	2309      	movs	r3, #9
 8008246:	2001      	movs	r0, #1
 8008248:	6033      	str	r3, [r6, #0]
 800824a:	3337      	adds	r3, #55	; 0x37
 800824c:	4313      	orrs	r3, r2
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	4240      	negs	r0, r0
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	4b29      	ldr	r3, [pc, #164]	; (80082fc <__swsetup_r+0xe8>)
 8008256:	429c      	cmp	r4, r3
 8008258:	d101      	bne.n	800825e <__swsetup_r+0x4a>
 800825a:	68ac      	ldr	r4, [r5, #8]
 800825c:	e7eb      	b.n	8008236 <__swsetup_r+0x22>
 800825e:	4b28      	ldr	r3, [pc, #160]	; (8008300 <__swsetup_r+0xec>)
 8008260:	429c      	cmp	r4, r3
 8008262:	d1e8      	bne.n	8008236 <__swsetup_r+0x22>
 8008264:	68ec      	ldr	r4, [r5, #12]
 8008266:	e7e6      	b.n	8008236 <__swsetup_r+0x22>
 8008268:	075b      	lsls	r3, r3, #29
 800826a:	d513      	bpl.n	8008294 <__swsetup_r+0x80>
 800826c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800826e:	2900      	cmp	r1, #0
 8008270:	d008      	beq.n	8008284 <__swsetup_r+0x70>
 8008272:	0023      	movs	r3, r4
 8008274:	3344      	adds	r3, #68	; 0x44
 8008276:	4299      	cmp	r1, r3
 8008278:	d002      	beq.n	8008280 <__swsetup_r+0x6c>
 800827a:	0030      	movs	r0, r6
 800827c:	f7ff fb5a 	bl	8007934 <_free_r>
 8008280:	2300      	movs	r3, #0
 8008282:	6363      	str	r3, [r4, #52]	; 0x34
 8008284:	2224      	movs	r2, #36	; 0x24
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	4393      	bics	r3, r2
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	2300      	movs	r3, #0
 800828e:	6063      	str	r3, [r4, #4]
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	2308      	movs	r3, #8
 8008296:	89a2      	ldrh	r2, [r4, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	81a3      	strh	r3, [r4, #12]
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <__swsetup_r+0xa6>
 80082a2:	21a0      	movs	r1, #160	; 0xa0
 80082a4:	2280      	movs	r2, #128	; 0x80
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	0089      	lsls	r1, r1, #2
 80082aa:	0092      	lsls	r2, r2, #2
 80082ac:	400b      	ands	r3, r1
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <__swsetup_r+0xa6>
 80082b2:	0021      	movs	r1, r4
 80082b4:	0030      	movs	r0, r6
 80082b6:	f000 fa27 	bl	8008708 <__smakebuf_r>
 80082ba:	220c      	movs	r2, #12
 80082bc:	5ea3      	ldrsh	r3, [r4, r2]
 80082be:	2001      	movs	r0, #1
 80082c0:	001a      	movs	r2, r3
 80082c2:	b299      	uxth	r1, r3
 80082c4:	4002      	ands	r2, r0
 80082c6:	4203      	tst	r3, r0
 80082c8:	d00f      	beq.n	80082ea <__swsetup_r+0xd6>
 80082ca:	2200      	movs	r2, #0
 80082cc:	60a2      	str	r2, [r4, #8]
 80082ce:	6962      	ldr	r2, [r4, #20]
 80082d0:	4252      	negs	r2, r2
 80082d2:	61a2      	str	r2, [r4, #24]
 80082d4:	2000      	movs	r0, #0
 80082d6:	6922      	ldr	r2, [r4, #16]
 80082d8:	4282      	cmp	r2, r0
 80082da:	d1ba      	bne.n	8008252 <__swsetup_r+0x3e>
 80082dc:	060a      	lsls	r2, r1, #24
 80082de:	d5b8      	bpl.n	8008252 <__swsetup_r+0x3e>
 80082e0:	2240      	movs	r2, #64	; 0x40
 80082e2:	4313      	orrs	r3, r2
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	3801      	subs	r0, #1
 80082e8:	e7b3      	b.n	8008252 <__swsetup_r+0x3e>
 80082ea:	0788      	lsls	r0, r1, #30
 80082ec:	d400      	bmi.n	80082f0 <__swsetup_r+0xdc>
 80082ee:	6962      	ldr	r2, [r4, #20]
 80082f0:	60a2      	str	r2, [r4, #8]
 80082f2:	e7ef      	b.n	80082d4 <__swsetup_r+0xc0>
 80082f4:	20000088 	.word	0x20000088
 80082f8:	08009770 	.word	0x08009770
 80082fc:	08009790 	.word	0x08009790
 8008300:	08009750 	.word	0x08009750

08008304 <abort>:
 8008304:	2006      	movs	r0, #6
 8008306:	b510      	push	{r4, lr}
 8008308:	f000 fa78 	bl	80087fc <raise>
 800830c:	2001      	movs	r0, #1
 800830e:	f7fb fbaf 	bl	8003a70 <_exit>
	...

08008314 <__sflush_r>:
 8008314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008316:	898b      	ldrh	r3, [r1, #12]
 8008318:	0005      	movs	r5, r0
 800831a:	000c      	movs	r4, r1
 800831c:	071a      	lsls	r2, r3, #28
 800831e:	d45f      	bmi.n	80083e0 <__sflush_r+0xcc>
 8008320:	684a      	ldr	r2, [r1, #4]
 8008322:	2a00      	cmp	r2, #0
 8008324:	dc04      	bgt.n	8008330 <__sflush_r+0x1c>
 8008326:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008328:	2a00      	cmp	r2, #0
 800832a:	dc01      	bgt.n	8008330 <__sflush_r+0x1c>
 800832c:	2000      	movs	r0, #0
 800832e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008330:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008332:	2f00      	cmp	r7, #0
 8008334:	d0fa      	beq.n	800832c <__sflush_r+0x18>
 8008336:	2200      	movs	r2, #0
 8008338:	2180      	movs	r1, #128	; 0x80
 800833a:	682e      	ldr	r6, [r5, #0]
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	001a      	movs	r2, r3
 8008340:	0149      	lsls	r1, r1, #5
 8008342:	400a      	ands	r2, r1
 8008344:	420b      	tst	r3, r1
 8008346:	d034      	beq.n	80083b2 <__sflush_r+0x9e>
 8008348:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	075b      	lsls	r3, r3, #29
 800834e:	d506      	bpl.n	800835e <__sflush_r+0x4a>
 8008350:	6863      	ldr	r3, [r4, #4]
 8008352:	1ac0      	subs	r0, r0, r3
 8008354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <__sflush_r+0x4a>
 800835a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800835c:	1ac0      	subs	r0, r0, r3
 800835e:	0002      	movs	r2, r0
 8008360:	6a21      	ldr	r1, [r4, #32]
 8008362:	2300      	movs	r3, #0
 8008364:	0028      	movs	r0, r5
 8008366:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008368:	47b8      	blx	r7
 800836a:	89a1      	ldrh	r1, [r4, #12]
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d106      	bne.n	800837e <__sflush_r+0x6a>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	2b1d      	cmp	r3, #29
 8008374:	d831      	bhi.n	80083da <__sflush_r+0xc6>
 8008376:	4a2c      	ldr	r2, [pc, #176]	; (8008428 <__sflush_r+0x114>)
 8008378:	40da      	lsrs	r2, r3
 800837a:	07d3      	lsls	r3, r2, #31
 800837c:	d52d      	bpl.n	80083da <__sflush_r+0xc6>
 800837e:	2300      	movs	r3, #0
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	04cb      	lsls	r3, r1, #19
 8008388:	d505      	bpl.n	8008396 <__sflush_r+0x82>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d102      	bne.n	8008394 <__sflush_r+0x80>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d100      	bne.n	8008396 <__sflush_r+0x82>
 8008394:	6560      	str	r0, [r4, #84]	; 0x54
 8008396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008398:	602e      	str	r6, [r5, #0]
 800839a:	2900      	cmp	r1, #0
 800839c:	d0c6      	beq.n	800832c <__sflush_r+0x18>
 800839e:	0023      	movs	r3, r4
 80083a0:	3344      	adds	r3, #68	; 0x44
 80083a2:	4299      	cmp	r1, r3
 80083a4:	d002      	beq.n	80083ac <__sflush_r+0x98>
 80083a6:	0028      	movs	r0, r5
 80083a8:	f7ff fac4 	bl	8007934 <_free_r>
 80083ac:	2000      	movs	r0, #0
 80083ae:	6360      	str	r0, [r4, #52]	; 0x34
 80083b0:	e7bd      	b.n	800832e <__sflush_r+0x1a>
 80083b2:	2301      	movs	r3, #1
 80083b4:	0028      	movs	r0, r5
 80083b6:	6a21      	ldr	r1, [r4, #32]
 80083b8:	47b8      	blx	r7
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d1c5      	bne.n	800834a <__sflush_r+0x36>
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0c2      	beq.n	800834a <__sflush_r+0x36>
 80083c4:	2b1d      	cmp	r3, #29
 80083c6:	d001      	beq.n	80083cc <__sflush_r+0xb8>
 80083c8:	2b16      	cmp	r3, #22
 80083ca:	d101      	bne.n	80083d0 <__sflush_r+0xbc>
 80083cc:	602e      	str	r6, [r5, #0]
 80083ce:	e7ad      	b.n	800832c <__sflush_r+0x18>
 80083d0:	2340      	movs	r3, #64	; 0x40
 80083d2:	89a2      	ldrh	r2, [r4, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	81a3      	strh	r3, [r4, #12]
 80083d8:	e7a9      	b.n	800832e <__sflush_r+0x1a>
 80083da:	2340      	movs	r3, #64	; 0x40
 80083dc:	430b      	orrs	r3, r1
 80083de:	e7fa      	b.n	80083d6 <__sflush_r+0xc2>
 80083e0:	690f      	ldr	r7, [r1, #16]
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	d0a2      	beq.n	800832c <__sflush_r+0x18>
 80083e6:	680a      	ldr	r2, [r1, #0]
 80083e8:	600f      	str	r7, [r1, #0]
 80083ea:	1bd2      	subs	r2, r2, r7
 80083ec:	9201      	str	r2, [sp, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	079b      	lsls	r3, r3, #30
 80083f2:	d100      	bne.n	80083f6 <__sflush_r+0xe2>
 80083f4:	694a      	ldr	r2, [r1, #20]
 80083f6:	60a2      	str	r2, [r4, #8]
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dc00      	bgt.n	8008400 <__sflush_r+0xec>
 80083fe:	e795      	b.n	800832c <__sflush_r+0x18>
 8008400:	003a      	movs	r2, r7
 8008402:	0028      	movs	r0, r5
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	6a21      	ldr	r1, [r4, #32]
 8008408:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800840a:	47b0      	blx	r6
 800840c:	2800      	cmp	r0, #0
 800840e:	dc06      	bgt.n	800841e <__sflush_r+0x10a>
 8008410:	2340      	movs	r3, #64	; 0x40
 8008412:	2001      	movs	r0, #1
 8008414:	89a2      	ldrh	r2, [r4, #12]
 8008416:	4240      	negs	r0, r0
 8008418:	4313      	orrs	r3, r2
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	e787      	b.n	800832e <__sflush_r+0x1a>
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	183f      	adds	r7, r7, r0
 8008422:	1a1b      	subs	r3, r3, r0
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	e7e7      	b.n	80083f8 <__sflush_r+0xe4>
 8008428:	20400001 	.word	0x20400001

0800842c <_fflush_r>:
 800842c:	690b      	ldr	r3, [r1, #16]
 800842e:	b570      	push	{r4, r5, r6, lr}
 8008430:	0005      	movs	r5, r0
 8008432:	000c      	movs	r4, r1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <_fflush_r+0x12>
 8008438:	2500      	movs	r5, #0
 800843a:	0028      	movs	r0, r5
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	2800      	cmp	r0, #0
 8008440:	d004      	beq.n	800844c <_fflush_r+0x20>
 8008442:	6983      	ldr	r3, [r0, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <_fflush_r+0x20>
 8008448:	f000 f892 	bl	8008570 <__sinit>
 800844c:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <_fflush_r+0x74>)
 800844e:	429c      	cmp	r4, r3
 8008450:	d11b      	bne.n	800848a <_fflush_r+0x5e>
 8008452:	686c      	ldr	r4, [r5, #4]
 8008454:	220c      	movs	r2, #12
 8008456:	5ea3      	ldrsh	r3, [r4, r2]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0ed      	beq.n	8008438 <_fflush_r+0xc>
 800845c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800845e:	07d2      	lsls	r2, r2, #31
 8008460:	d404      	bmi.n	800846c <_fflush_r+0x40>
 8008462:	059b      	lsls	r3, r3, #22
 8008464:	d402      	bmi.n	800846c <_fflush_r+0x40>
 8008466:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008468:	f000 f923 	bl	80086b2 <__retarget_lock_acquire_recursive>
 800846c:	0028      	movs	r0, r5
 800846e:	0021      	movs	r1, r4
 8008470:	f7ff ff50 	bl	8008314 <__sflush_r>
 8008474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008476:	0005      	movs	r5, r0
 8008478:	07db      	lsls	r3, r3, #31
 800847a:	d4de      	bmi.n	800843a <_fflush_r+0xe>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	059b      	lsls	r3, r3, #22
 8008480:	d4db      	bmi.n	800843a <_fflush_r+0xe>
 8008482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008484:	f000 f916 	bl	80086b4 <__retarget_lock_release_recursive>
 8008488:	e7d7      	b.n	800843a <_fflush_r+0xe>
 800848a:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <_fflush_r+0x78>)
 800848c:	429c      	cmp	r4, r3
 800848e:	d101      	bne.n	8008494 <_fflush_r+0x68>
 8008490:	68ac      	ldr	r4, [r5, #8]
 8008492:	e7df      	b.n	8008454 <_fflush_r+0x28>
 8008494:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <_fflush_r+0x7c>)
 8008496:	429c      	cmp	r4, r3
 8008498:	d1dc      	bne.n	8008454 <_fflush_r+0x28>
 800849a:	68ec      	ldr	r4, [r5, #12]
 800849c:	e7da      	b.n	8008454 <_fflush_r+0x28>
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	08009770 	.word	0x08009770
 80084a4:	08009790 	.word	0x08009790
 80084a8:	08009750 	.word	0x08009750

080084ac <std>:
 80084ac:	2300      	movs	r3, #0
 80084ae:	b510      	push	{r4, lr}
 80084b0:	0004      	movs	r4, r0
 80084b2:	6003      	str	r3, [r0, #0]
 80084b4:	6043      	str	r3, [r0, #4]
 80084b6:	6083      	str	r3, [r0, #8]
 80084b8:	8181      	strh	r1, [r0, #12]
 80084ba:	6643      	str	r3, [r0, #100]	; 0x64
 80084bc:	0019      	movs	r1, r3
 80084be:	81c2      	strh	r2, [r0, #14]
 80084c0:	6103      	str	r3, [r0, #16]
 80084c2:	6143      	str	r3, [r0, #20]
 80084c4:	6183      	str	r3, [r0, #24]
 80084c6:	2208      	movs	r2, #8
 80084c8:	305c      	adds	r0, #92	; 0x5c
 80084ca:	f7ff fa2b 	bl	8007924 <memset>
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <std+0x38>)
 80084d0:	6263      	str	r3, [r4, #36]	; 0x24
 80084d2:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <std+0x3c>)
 80084d4:	6224      	str	r4, [r4, #32]
 80084d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <std+0x40>)
 80084da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <std+0x44>)
 80084de:	6323      	str	r3, [r4, #48]	; 0x30
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	46c0      	nop			; (mov r8, r8)
 80084e4:	0800883d 	.word	0x0800883d
 80084e8:	08008865 	.word	0x08008865
 80084ec:	0800889d 	.word	0x0800889d
 80084f0:	080088c9 	.word	0x080088c9

080084f4 <_cleanup_r>:
 80084f4:	b510      	push	{r4, lr}
 80084f6:	4902      	ldr	r1, [pc, #8]	; (8008500 <_cleanup_r+0xc>)
 80084f8:	f000 f8ba 	bl	8008670 <_fwalk_reent>
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	0800842d 	.word	0x0800842d

08008504 <__sfmoreglue>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	2568      	movs	r5, #104	; 0x68
 8008508:	1e4a      	subs	r2, r1, #1
 800850a:	4355      	muls	r5, r2
 800850c:	000e      	movs	r6, r1
 800850e:	0029      	movs	r1, r5
 8008510:	3174      	adds	r1, #116	; 0x74
 8008512:	f7ff fa59 	bl	80079c8 <_malloc_r>
 8008516:	1e04      	subs	r4, r0, #0
 8008518:	d008      	beq.n	800852c <__sfmoreglue+0x28>
 800851a:	2100      	movs	r1, #0
 800851c:	002a      	movs	r2, r5
 800851e:	6001      	str	r1, [r0, #0]
 8008520:	6046      	str	r6, [r0, #4]
 8008522:	300c      	adds	r0, #12
 8008524:	60a0      	str	r0, [r4, #8]
 8008526:	3268      	adds	r2, #104	; 0x68
 8008528:	f7ff f9fc 	bl	8007924 <memset>
 800852c:	0020      	movs	r0, r4
 800852e:	bd70      	pop	{r4, r5, r6, pc}

08008530 <__sfp_lock_acquire>:
 8008530:	b510      	push	{r4, lr}
 8008532:	4802      	ldr	r0, [pc, #8]	; (800853c <__sfp_lock_acquire+0xc>)
 8008534:	f000 f8bd 	bl	80086b2 <__retarget_lock_acquire_recursive>
 8008538:	bd10      	pop	{r4, pc}
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	2000030c 	.word	0x2000030c

08008540 <__sfp_lock_release>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4802      	ldr	r0, [pc, #8]	; (800854c <__sfp_lock_release+0xc>)
 8008544:	f000 f8b6 	bl	80086b4 <__retarget_lock_release_recursive>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	2000030c 	.word	0x2000030c

08008550 <__sinit_lock_acquire>:
 8008550:	b510      	push	{r4, lr}
 8008552:	4802      	ldr	r0, [pc, #8]	; (800855c <__sinit_lock_acquire+0xc>)
 8008554:	f000 f8ad 	bl	80086b2 <__retarget_lock_acquire_recursive>
 8008558:	bd10      	pop	{r4, pc}
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	20000307 	.word	0x20000307

08008560 <__sinit_lock_release>:
 8008560:	b510      	push	{r4, lr}
 8008562:	4802      	ldr	r0, [pc, #8]	; (800856c <__sinit_lock_release+0xc>)
 8008564:	f000 f8a6 	bl	80086b4 <__retarget_lock_release_recursive>
 8008568:	bd10      	pop	{r4, pc}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	20000307 	.word	0x20000307

08008570 <__sinit>:
 8008570:	b513      	push	{r0, r1, r4, lr}
 8008572:	0004      	movs	r4, r0
 8008574:	f7ff ffec 	bl	8008550 <__sinit_lock_acquire>
 8008578:	69a3      	ldr	r3, [r4, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <__sinit+0x14>
 800857e:	f7ff ffef 	bl	8008560 <__sinit_lock_release>
 8008582:	bd13      	pop	{r0, r1, r4, pc}
 8008584:	64a3      	str	r3, [r4, #72]	; 0x48
 8008586:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008588:	6523      	str	r3, [r4, #80]	; 0x50
 800858a:	4b13      	ldr	r3, [pc, #76]	; (80085d8 <__sinit+0x68>)
 800858c:	4a13      	ldr	r2, [pc, #76]	; (80085dc <__sinit+0x6c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	62a2      	str	r2, [r4, #40]	; 0x28
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	42a3      	cmp	r3, r4
 8008596:	d101      	bne.n	800859c <__sinit+0x2c>
 8008598:	2301      	movs	r3, #1
 800859a:	61a3      	str	r3, [r4, #24]
 800859c:	0020      	movs	r0, r4
 800859e:	f000 f81f 	bl	80085e0 <__sfp>
 80085a2:	6060      	str	r0, [r4, #4]
 80085a4:	0020      	movs	r0, r4
 80085a6:	f000 f81b 	bl	80085e0 <__sfp>
 80085aa:	60a0      	str	r0, [r4, #8]
 80085ac:	0020      	movs	r0, r4
 80085ae:	f000 f817 	bl	80085e0 <__sfp>
 80085b2:	2200      	movs	r2, #0
 80085b4:	2104      	movs	r1, #4
 80085b6:	60e0      	str	r0, [r4, #12]
 80085b8:	6860      	ldr	r0, [r4, #4]
 80085ba:	f7ff ff77 	bl	80084ac <std>
 80085be:	2201      	movs	r2, #1
 80085c0:	2109      	movs	r1, #9
 80085c2:	68a0      	ldr	r0, [r4, #8]
 80085c4:	f7ff ff72 	bl	80084ac <std>
 80085c8:	2202      	movs	r2, #2
 80085ca:	2112      	movs	r1, #18
 80085cc:	68e0      	ldr	r0, [r4, #12]
 80085ce:	f7ff ff6d 	bl	80084ac <std>
 80085d2:	2301      	movs	r3, #1
 80085d4:	61a3      	str	r3, [r4, #24]
 80085d6:	e7d2      	b.n	800857e <__sinit+0xe>
 80085d8:	08009664 	.word	0x08009664
 80085dc:	080084f5 	.word	0x080084f5

080085e0 <__sfp>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	0007      	movs	r7, r0
 80085e4:	f7ff ffa4 	bl	8008530 <__sfp_lock_acquire>
 80085e8:	4b1f      	ldr	r3, [pc, #124]	; (8008668 <__sfp+0x88>)
 80085ea:	681e      	ldr	r6, [r3, #0]
 80085ec:	69b3      	ldr	r3, [r6, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <__sfp+0x18>
 80085f2:	0030      	movs	r0, r6
 80085f4:	f7ff ffbc 	bl	8008570 <__sinit>
 80085f8:	3648      	adds	r6, #72	; 0x48
 80085fa:	68b4      	ldr	r4, [r6, #8]
 80085fc:	6873      	ldr	r3, [r6, #4]
 80085fe:	3b01      	subs	r3, #1
 8008600:	d504      	bpl.n	800860c <__sfp+0x2c>
 8008602:	6833      	ldr	r3, [r6, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d022      	beq.n	800864e <__sfp+0x6e>
 8008608:	6836      	ldr	r6, [r6, #0]
 800860a:	e7f6      	b.n	80085fa <__sfp+0x1a>
 800860c:	220c      	movs	r2, #12
 800860e:	5ea5      	ldrsh	r5, [r4, r2]
 8008610:	2d00      	cmp	r5, #0
 8008612:	d11a      	bne.n	800864a <__sfp+0x6a>
 8008614:	0020      	movs	r0, r4
 8008616:	4b15      	ldr	r3, [pc, #84]	; (800866c <__sfp+0x8c>)
 8008618:	3058      	adds	r0, #88	; 0x58
 800861a:	60e3      	str	r3, [r4, #12]
 800861c:	6665      	str	r5, [r4, #100]	; 0x64
 800861e:	f000 f847 	bl	80086b0 <__retarget_lock_init_recursive>
 8008622:	f7ff ff8d 	bl	8008540 <__sfp_lock_release>
 8008626:	0020      	movs	r0, r4
 8008628:	2208      	movs	r2, #8
 800862a:	0029      	movs	r1, r5
 800862c:	6025      	str	r5, [r4, #0]
 800862e:	60a5      	str	r5, [r4, #8]
 8008630:	6065      	str	r5, [r4, #4]
 8008632:	6125      	str	r5, [r4, #16]
 8008634:	6165      	str	r5, [r4, #20]
 8008636:	61a5      	str	r5, [r4, #24]
 8008638:	305c      	adds	r0, #92	; 0x5c
 800863a:	f7ff f973 	bl	8007924 <memset>
 800863e:	6365      	str	r5, [r4, #52]	; 0x34
 8008640:	63a5      	str	r5, [r4, #56]	; 0x38
 8008642:	64a5      	str	r5, [r4, #72]	; 0x48
 8008644:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008646:	0020      	movs	r0, r4
 8008648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864a:	3468      	adds	r4, #104	; 0x68
 800864c:	e7d7      	b.n	80085fe <__sfp+0x1e>
 800864e:	2104      	movs	r1, #4
 8008650:	0038      	movs	r0, r7
 8008652:	f7ff ff57 	bl	8008504 <__sfmoreglue>
 8008656:	1e04      	subs	r4, r0, #0
 8008658:	6030      	str	r0, [r6, #0]
 800865a:	d1d5      	bne.n	8008608 <__sfp+0x28>
 800865c:	f7ff ff70 	bl	8008540 <__sfp_lock_release>
 8008660:	230c      	movs	r3, #12
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	e7ef      	b.n	8008646 <__sfp+0x66>
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	08009664 	.word	0x08009664
 800866c:	ffff0001 	.word	0xffff0001

08008670 <_fwalk_reent>:
 8008670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008672:	0004      	movs	r4, r0
 8008674:	0006      	movs	r6, r0
 8008676:	2700      	movs	r7, #0
 8008678:	9101      	str	r1, [sp, #4]
 800867a:	3448      	adds	r4, #72	; 0x48
 800867c:	6863      	ldr	r3, [r4, #4]
 800867e:	68a5      	ldr	r5, [r4, #8]
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	9b00      	ldr	r3, [sp, #0]
 8008684:	3b01      	subs	r3, #1
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	d504      	bpl.n	8008694 <_fwalk_reent+0x24>
 800868a:	6824      	ldr	r4, [r4, #0]
 800868c:	2c00      	cmp	r4, #0
 800868e:	d1f5      	bne.n	800867c <_fwalk_reent+0xc>
 8008690:	0038      	movs	r0, r7
 8008692:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008694:	89ab      	ldrh	r3, [r5, #12]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d908      	bls.n	80086ac <_fwalk_reent+0x3c>
 800869a:	220e      	movs	r2, #14
 800869c:	5eab      	ldrsh	r3, [r5, r2]
 800869e:	3301      	adds	r3, #1
 80086a0:	d004      	beq.n	80086ac <_fwalk_reent+0x3c>
 80086a2:	0029      	movs	r1, r5
 80086a4:	0030      	movs	r0, r6
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	4798      	blx	r3
 80086aa:	4307      	orrs	r7, r0
 80086ac:	3568      	adds	r5, #104	; 0x68
 80086ae:	e7e8      	b.n	8008682 <_fwalk_reent+0x12>

080086b0 <__retarget_lock_init_recursive>:
 80086b0:	4770      	bx	lr

080086b2 <__retarget_lock_acquire_recursive>:
 80086b2:	4770      	bx	lr

080086b4 <__retarget_lock_release_recursive>:
 80086b4:	4770      	bx	lr
	...

080086b8 <__swhatbuf_r>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	000e      	movs	r6, r1
 80086bc:	001d      	movs	r5, r3
 80086be:	230e      	movs	r3, #14
 80086c0:	5ec9      	ldrsh	r1, [r1, r3]
 80086c2:	0014      	movs	r4, r2
 80086c4:	b096      	sub	sp, #88	; 0x58
 80086c6:	2900      	cmp	r1, #0
 80086c8:	da07      	bge.n	80086da <__swhatbuf_r+0x22>
 80086ca:	2300      	movs	r3, #0
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	89b3      	ldrh	r3, [r6, #12]
 80086d0:	061b      	lsls	r3, r3, #24
 80086d2:	d411      	bmi.n	80086f8 <__swhatbuf_r+0x40>
 80086d4:	2380      	movs	r3, #128	; 0x80
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	e00f      	b.n	80086fa <__swhatbuf_r+0x42>
 80086da:	466a      	mov	r2, sp
 80086dc:	f000 f920 	bl	8008920 <_fstat_r>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	dbf2      	blt.n	80086ca <__swhatbuf_r+0x12>
 80086e4:	23f0      	movs	r3, #240	; 0xf0
 80086e6:	9901      	ldr	r1, [sp, #4]
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	4019      	ands	r1, r3
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <__swhatbuf_r+0x4c>)
 80086ee:	18c9      	adds	r1, r1, r3
 80086f0:	424b      	negs	r3, r1
 80086f2:	4159      	adcs	r1, r3
 80086f4:	6029      	str	r1, [r5, #0]
 80086f6:	e7ed      	b.n	80086d4 <__swhatbuf_r+0x1c>
 80086f8:	2340      	movs	r3, #64	; 0x40
 80086fa:	2000      	movs	r0, #0
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	b016      	add	sp, #88	; 0x58
 8008700:	bd70      	pop	{r4, r5, r6, pc}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	ffffe000 	.word	0xffffe000

08008708 <__smakebuf_r>:
 8008708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870a:	2602      	movs	r6, #2
 800870c:	898b      	ldrh	r3, [r1, #12]
 800870e:	0005      	movs	r5, r0
 8008710:	000c      	movs	r4, r1
 8008712:	4233      	tst	r3, r6
 8008714:	d006      	beq.n	8008724 <__smakebuf_r+0x1c>
 8008716:	0023      	movs	r3, r4
 8008718:	3347      	adds	r3, #71	; 0x47
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	2301      	movs	r3, #1
 8008720:	6163      	str	r3, [r4, #20]
 8008722:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008724:	466a      	mov	r2, sp
 8008726:	ab01      	add	r3, sp, #4
 8008728:	f7ff ffc6 	bl	80086b8 <__swhatbuf_r>
 800872c:	9900      	ldr	r1, [sp, #0]
 800872e:	0007      	movs	r7, r0
 8008730:	0028      	movs	r0, r5
 8008732:	f7ff f949 	bl	80079c8 <_malloc_r>
 8008736:	2800      	cmp	r0, #0
 8008738:	d108      	bne.n	800874c <__smakebuf_r+0x44>
 800873a:	220c      	movs	r2, #12
 800873c:	5ea3      	ldrsh	r3, [r4, r2]
 800873e:	059a      	lsls	r2, r3, #22
 8008740:	d4ef      	bmi.n	8008722 <__smakebuf_r+0x1a>
 8008742:	2203      	movs	r2, #3
 8008744:	4393      	bics	r3, r2
 8008746:	431e      	orrs	r6, r3
 8008748:	81a6      	strh	r6, [r4, #12]
 800874a:	e7e4      	b.n	8008716 <__smakebuf_r+0xe>
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <__smakebuf_r+0x84>)
 800874e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	89a2      	ldrh	r2, [r4, #12]
 8008754:	6020      	str	r0, [r4, #0]
 8008756:	4313      	orrs	r3, r2
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	9b00      	ldr	r3, [sp, #0]
 800875c:	6120      	str	r0, [r4, #16]
 800875e:	6163      	str	r3, [r4, #20]
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00d      	beq.n	8008782 <__smakebuf_r+0x7a>
 8008766:	0028      	movs	r0, r5
 8008768:	230e      	movs	r3, #14
 800876a:	5ee1      	ldrsh	r1, [r4, r3]
 800876c:	f000 f8ea 	bl	8008944 <_isatty_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	d006      	beq.n	8008782 <__smakebuf_r+0x7a>
 8008774:	2203      	movs	r2, #3
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	4393      	bics	r3, r2
 800877a:	001a      	movs	r2, r3
 800877c:	2301      	movs	r3, #1
 800877e:	4313      	orrs	r3, r2
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	89a0      	ldrh	r0, [r4, #12]
 8008784:	4307      	orrs	r7, r0
 8008786:	81a7      	strh	r7, [r4, #12]
 8008788:	e7cb      	b.n	8008722 <__smakebuf_r+0x1a>
 800878a:	46c0      	nop			; (mov r8, r8)
 800878c:	080084f5 	.word	0x080084f5

08008790 <memchr>:
 8008790:	b2c9      	uxtb	r1, r1
 8008792:	1882      	adds	r2, r0, r2
 8008794:	4290      	cmp	r0, r2
 8008796:	d101      	bne.n	800879c <memchr+0xc>
 8008798:	2000      	movs	r0, #0
 800879a:	4770      	bx	lr
 800879c:	7803      	ldrb	r3, [r0, #0]
 800879e:	428b      	cmp	r3, r1
 80087a0:	d0fb      	beq.n	800879a <memchr+0xa>
 80087a2:	3001      	adds	r0, #1
 80087a4:	e7f6      	b.n	8008794 <memchr+0x4>

080087a6 <_raise_r>:
 80087a6:	b570      	push	{r4, r5, r6, lr}
 80087a8:	0004      	movs	r4, r0
 80087aa:	000d      	movs	r5, r1
 80087ac:	291f      	cmp	r1, #31
 80087ae:	d904      	bls.n	80087ba <_raise_r+0x14>
 80087b0:	2316      	movs	r3, #22
 80087b2:	6003      	str	r3, [r0, #0]
 80087b4:	2001      	movs	r0, #1
 80087b6:	4240      	negs	r0, r0
 80087b8:	bd70      	pop	{r4, r5, r6, pc}
 80087ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d004      	beq.n	80087ca <_raise_r+0x24>
 80087c0:	008a      	lsls	r2, r1, #2
 80087c2:	189b      	adds	r3, r3, r2
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	2a00      	cmp	r2, #0
 80087c8:	d108      	bne.n	80087dc <_raise_r+0x36>
 80087ca:	0020      	movs	r0, r4
 80087cc:	f000 f832 	bl	8008834 <_getpid_r>
 80087d0:	002a      	movs	r2, r5
 80087d2:	0001      	movs	r1, r0
 80087d4:	0020      	movs	r0, r4
 80087d6:	f000 f81b 	bl	8008810 <_kill_r>
 80087da:	e7ed      	b.n	80087b8 <_raise_r+0x12>
 80087dc:	2000      	movs	r0, #0
 80087de:	2a01      	cmp	r2, #1
 80087e0:	d0ea      	beq.n	80087b8 <_raise_r+0x12>
 80087e2:	1c51      	adds	r1, r2, #1
 80087e4:	d103      	bne.n	80087ee <_raise_r+0x48>
 80087e6:	2316      	movs	r3, #22
 80087e8:	3001      	adds	r0, #1
 80087ea:	6023      	str	r3, [r4, #0]
 80087ec:	e7e4      	b.n	80087b8 <_raise_r+0x12>
 80087ee:	2400      	movs	r4, #0
 80087f0:	0028      	movs	r0, r5
 80087f2:	601c      	str	r4, [r3, #0]
 80087f4:	4790      	blx	r2
 80087f6:	0020      	movs	r0, r4
 80087f8:	e7de      	b.n	80087b8 <_raise_r+0x12>
	...

080087fc <raise>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <raise+0x10>)
 8008800:	0001      	movs	r1, r0
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	f7ff ffcf 	bl	80087a6 <_raise_r>
 8008808:	bd10      	pop	{r4, pc}
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	20000088 	.word	0x20000088

08008810 <_kill_r>:
 8008810:	2300      	movs	r3, #0
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	4d06      	ldr	r5, [pc, #24]	; (8008830 <_kill_r+0x20>)
 8008816:	0004      	movs	r4, r0
 8008818:	0008      	movs	r0, r1
 800881a:	0011      	movs	r1, r2
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	f7fb f917 	bl	8003a50 <_kill>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d103      	bne.n	800882e <_kill_r+0x1e>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d000      	beq.n	800882e <_kill_r+0x1e>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	20000300 	.word	0x20000300

08008834 <_getpid_r>:
 8008834:	b510      	push	{r4, lr}
 8008836:	f7fb f905 	bl	8003a44 <_getpid>
 800883a:	bd10      	pop	{r4, pc}

0800883c <__sread>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	000c      	movs	r4, r1
 8008840:	250e      	movs	r5, #14
 8008842:	5f49      	ldrsh	r1, [r1, r5]
 8008844:	f000 f8a4 	bl	8008990 <_read_r>
 8008848:	2800      	cmp	r0, #0
 800884a:	db03      	blt.n	8008854 <__sread+0x18>
 800884c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800884e:	181b      	adds	r3, r3, r0
 8008850:	6563      	str	r3, [r4, #84]	; 0x54
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	4a02      	ldr	r2, [pc, #8]	; (8008860 <__sread+0x24>)
 8008858:	4013      	ands	r3, r2
 800885a:	81a3      	strh	r3, [r4, #12]
 800885c:	e7f9      	b.n	8008852 <__sread+0x16>
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	ffffefff 	.word	0xffffefff

08008864 <__swrite>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	001f      	movs	r7, r3
 8008868:	898b      	ldrh	r3, [r1, #12]
 800886a:	0005      	movs	r5, r0
 800886c:	000c      	movs	r4, r1
 800886e:	0016      	movs	r6, r2
 8008870:	05db      	lsls	r3, r3, #23
 8008872:	d505      	bpl.n	8008880 <__swrite+0x1c>
 8008874:	230e      	movs	r3, #14
 8008876:	5ec9      	ldrsh	r1, [r1, r3]
 8008878:	2200      	movs	r2, #0
 800887a:	2302      	movs	r3, #2
 800887c:	f000 f874 	bl	8008968 <_lseek_r>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	4a05      	ldr	r2, [pc, #20]	; (8008898 <__swrite+0x34>)
 8008884:	0028      	movs	r0, r5
 8008886:	4013      	ands	r3, r2
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	0032      	movs	r2, r6
 800888c:	230e      	movs	r3, #14
 800888e:	5ee1      	ldrsh	r1, [r4, r3]
 8008890:	003b      	movs	r3, r7
 8008892:	f000 f81f 	bl	80088d4 <_write_r>
 8008896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008898:	ffffefff 	.word	0xffffefff

0800889c <__sseek>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	000c      	movs	r4, r1
 80088a0:	250e      	movs	r5, #14
 80088a2:	5f49      	ldrsh	r1, [r1, r5]
 80088a4:	f000 f860 	bl	8008968 <_lseek_r>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	1c42      	adds	r2, r0, #1
 80088ac:	d103      	bne.n	80088b6 <__sseek+0x1a>
 80088ae:	4a05      	ldr	r2, [pc, #20]	; (80088c4 <__sseek+0x28>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
 80088b6:	2280      	movs	r2, #128	; 0x80
 80088b8:	0152      	lsls	r2, r2, #5
 80088ba:	4313      	orrs	r3, r2
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	6560      	str	r0, [r4, #84]	; 0x54
 80088c0:	e7f8      	b.n	80088b4 <__sseek+0x18>
 80088c2:	46c0      	nop			; (mov r8, r8)
 80088c4:	ffffefff 	.word	0xffffefff

080088c8 <__sclose>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	230e      	movs	r3, #14
 80088cc:	5ec9      	ldrsh	r1, [r1, r3]
 80088ce:	f000 f815 	bl	80088fc <_close_r>
 80088d2:	bd10      	pop	{r4, pc}

080088d4 <_write_r>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	0004      	movs	r4, r0
 80088d8:	0008      	movs	r0, r1
 80088da:	0011      	movs	r1, r2
 80088dc:	001a      	movs	r2, r3
 80088de:	2300      	movs	r3, #0
 80088e0:	4d05      	ldr	r5, [pc, #20]	; (80088f8 <_write_r+0x24>)
 80088e2:	602b      	str	r3, [r5, #0]
 80088e4:	f7fb f8ed 	bl	8003ac2 <_write>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d103      	bne.n	80088f4 <_write_r+0x20>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d000      	beq.n	80088f4 <_write_r+0x20>
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	20000300 	.word	0x20000300

080088fc <_close_r>:
 80088fc:	2300      	movs	r3, #0
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	4d06      	ldr	r5, [pc, #24]	; (800891c <_close_r+0x20>)
 8008902:	0004      	movs	r4, r0
 8008904:	0008      	movs	r0, r1
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	f7fb f8f7 	bl	8003afa <_close>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d103      	bne.n	8008918 <_close_r+0x1c>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d000      	beq.n	8008918 <_close_r+0x1c>
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	bd70      	pop	{r4, r5, r6, pc}
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	20000300 	.word	0x20000300

08008920 <_fstat_r>:
 8008920:	2300      	movs	r3, #0
 8008922:	b570      	push	{r4, r5, r6, lr}
 8008924:	4d06      	ldr	r5, [pc, #24]	; (8008940 <_fstat_r+0x20>)
 8008926:	0004      	movs	r4, r0
 8008928:	0008      	movs	r0, r1
 800892a:	0011      	movs	r1, r2
 800892c:	602b      	str	r3, [r5, #0]
 800892e:	f7fb f8ee 	bl	8003b0e <_fstat>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d103      	bne.n	800893e <_fstat_r+0x1e>
 8008936:	682b      	ldr	r3, [r5, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d000      	beq.n	800893e <_fstat_r+0x1e>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	20000300 	.word	0x20000300

08008944 <_isatty_r>:
 8008944:	2300      	movs	r3, #0
 8008946:	b570      	push	{r4, r5, r6, lr}
 8008948:	4d06      	ldr	r5, [pc, #24]	; (8008964 <_isatty_r+0x20>)
 800894a:	0004      	movs	r4, r0
 800894c:	0008      	movs	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7fb f8eb 	bl	8003b2a <_isatty>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d103      	bne.n	8008960 <_isatty_r+0x1c>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d000      	beq.n	8008960 <_isatty_r+0x1c>
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	20000300 	.word	0x20000300

08008968 <_lseek_r>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	0004      	movs	r4, r0
 800896c:	0008      	movs	r0, r1
 800896e:	0011      	movs	r1, r2
 8008970:	001a      	movs	r2, r3
 8008972:	2300      	movs	r3, #0
 8008974:	4d05      	ldr	r5, [pc, #20]	; (800898c <_lseek_r+0x24>)
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	f7fb f8e0 	bl	8003b3c <_lseek>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d103      	bne.n	8008988 <_lseek_r+0x20>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d000      	beq.n	8008988 <_lseek_r+0x20>
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	bd70      	pop	{r4, r5, r6, pc}
 800898a:	46c0      	nop			; (mov r8, r8)
 800898c:	20000300 	.word	0x20000300

08008990 <_read_r>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	0004      	movs	r4, r0
 8008994:	0008      	movs	r0, r1
 8008996:	0011      	movs	r1, r2
 8008998:	001a      	movs	r2, r3
 800899a:	2300      	movs	r3, #0
 800899c:	4d05      	ldr	r5, [pc, #20]	; (80089b4 <_read_r+0x24>)
 800899e:	602b      	str	r3, [r5, #0]
 80089a0:	f7fb f872 	bl	8003a88 <_read>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d103      	bne.n	80089b0 <_read_r+0x20>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d000      	beq.n	80089b0 <_read_r+0x20>
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	bd70      	pop	{r4, r5, r6, pc}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	20000300 	.word	0x20000300

080089b8 <_init>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	46c0      	nop			; (mov r8, r8)
 80089bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089be:	bc08      	pop	{r3}
 80089c0:	469e      	mov	lr, r3
 80089c2:	4770      	bx	lr

080089c4 <_fini>:
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	46c0      	nop			; (mov r8, r8)
 80089c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ca:	bc08      	pop	{r3}
 80089cc:	469e      	mov	lr, r3
 80089ce:	4770      	bx	lr
