
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800246c  0800246c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800246c  0800246c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800246c  0800246c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800246c  0800246c  0001246c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002480  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002480  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ff3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d2  00000000  00000000  00025027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000510  00000000  00000000  00026400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000468  00000000  00000000  00026910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019794  00000000  00000000  00026d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006746  00000000  00000000  0004050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a4b3  00000000  00000000  00046c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001064  00000000  00000000  000e1158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002424 	.word	0x08002424

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002424 	.word	0x08002424

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa14 	bl	800064c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f814 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8d0 	bl	80003cc <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 f8b0 	bl	8000390 <MX_DMA_Init>
  MX_ADC_Init();
 8000230:	f000 f854 	bl	80002dc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  Sample(&hadc, &adc_buf, ADC_BUF_LEN);
 8000234:	4904      	ldr	r1, [pc, #16]	; (8000248 <main+0x2c>)
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <main+0x30>)
 8000238:	220a      	movs	r2, #10
 800023a:	0018      	movs	r0, r3
 800023c:	f000 f8f4 	bl	8000428 <Sample>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000240:	2064      	movs	r0, #100	; 0x64
 8000242:	f000 fa67 	bl	8000714 <HAL_Delay>
 8000246:	e7fb      	b.n	8000240 <main+0x24>
 8000248:	20000028 	.word	0x20000028
 800024c:	20000080 	.word	0x20000080

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b093      	sub	sp, #76	; 0x4c
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	2414      	movs	r4, #20
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	2334      	movs	r3, #52	; 0x34
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f002 f8d7 	bl	8002414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	0018      	movs	r0, r3
 800026a:	2310      	movs	r3, #16
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f002 f8d0 	bl	8002414 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000274:	0021      	movs	r1, r4
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2212      	movs	r2, #18
 800027a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2201      	movs	r2, #1
 8000280:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2201      	movs	r2, #1
 8000286:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2210      	movs	r2, #16
 800028c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2210      	movs	r2, #16
 8000292:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2200      	movs	r2, #0
 8000298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	187b      	adds	r3, r7, r1
 800029c:	0018      	movs	r0, r3
 800029e:	f001 fbb5 	bl	8001a0c <HAL_RCC_OscConfig>
 80002a2:	1e03      	subs	r3, r0, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80002a6:	f000 f8cf 	bl	8000448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2207      	movs	r2, #7
 80002ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 ff26 	bl	8002118 <HAL_RCC_ClockConfig>
 80002cc:	1e03      	subs	r3, r0, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002d0:	f000 f8ba 	bl	8000448 <Error_Handler>
  }
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b013      	add	sp, #76	; 0x4c
 80002da:	bd90      	pop	{r4, r7, pc}

080002dc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	230c      	movs	r3, #12
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 f892 	bl	8002414 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <MX_ADC_Init+0xac>)
 80002f2:	4a26      	ldr	r2, [pc, #152]	; (800038c <MX_ADC_Init+0xb0>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f6:	4b24      	ldr	r3, [pc, #144]	; (8000388 <MX_ADC_Init+0xac>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80002fc:	4b22      	ldr	r3, [pc, #136]	; (8000388 <MX_ADC_Init+0xac>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <MX_ADC_Init+0xac>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_ADC_Init+0xac>)
 800030a:	2201      	movs	r2, #1
 800030c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030e:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <MX_ADC_Init+0xac>)
 8000310:	2204      	movs	r2, #4
 8000312:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_ADC_Init+0xac>)
 8000316:	2200      	movs	r2, #0
 8000318:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_ADC_Init+0xac>)
 800031c:	2200      	movs	r2, #0
 800031e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_ADC_Init+0xac>)
 8000322:	2201      	movs	r2, #1
 8000324:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_ADC_Init+0xac>)
 8000328:	2200      	movs	r2, #0
 800032a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_ADC_Init+0xac>)
 800032e:	22c2      	movs	r2, #194	; 0xc2
 8000330:	32ff      	adds	r2, #255	; 0xff
 8000332:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC_Init+0xac>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_ADC_Init+0xac>)
 800033c:	2224      	movs	r2, #36	; 0x24
 800033e:	2101      	movs	r1, #1
 8000340:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_ADC_Init+0xac>)
 8000344:	2201      	movs	r2, #1
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_ADC_Init+0xac>)
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fa06 	bl	800075c <HAL_ADC_Init>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000354:	f000 f878 	bl	8000448 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2208      	movs	r2, #8
 800035c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	0152      	lsls	r2, r2, #5
 8000364:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2207      	movs	r2, #7
 800036a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800036c:	1d3a      	adds	r2, r7, #4
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_ADC_Init+0xac>)
 8000370:	0011      	movs	r1, r2
 8000372:	0018      	movs	r0, r3
 8000374:	f000 fc32 	bl	8000bdc <HAL_ADC_ConfigChannel>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800037c:	f000 f864 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b004      	add	sp, #16
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000080 	.word	0x20000080
 800038c:	40012400 	.word	0x40012400

08000390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_DMA_Init+0x38>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_DMA_Init+0x38>)
 800039c:	2101      	movs	r1, #1
 800039e:	430a      	orrs	r2, r1
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_DMA_Init+0x38>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	2201      	movs	r2, #1
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	2009      	movs	r0, #9
 80003b4:	f000 ff92 	bl	80012dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80003b8:	2009      	movs	r0, #9
 80003ba:	f000 ffa4 	bl	8001306 <HAL_NVIC_EnableIRQ>

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	02c9      	lsls	r1, r1, #11
 80003dc:	430a      	orrs	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <MX_GPIO_Init+0x2c>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	02db      	lsls	r3, r3, #11
 80003e8:	4013      	ands	r3, r2
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  __NOP();
 8000404:	46c0      	nop			; (mov r8, r8)
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}

0800040e <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  __NOP();
 8000416:	46c0      	nop			; (mov r8, r8)
  //HAL_Delay(100);
  HAL_ADC_Stop_DMA(hadc);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fb60 	bl	8000ae0 <HAL_ADC_Stop_DMA>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <Sample>:

void Sample(ADC_HandleTypeDef* hadc, uint16_t* adc_buf, uint32_t buf_len) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	  HAL_ADC_Start_DMA(hadc, (uint32_t*)adc_buf, buf_len);
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	68b9      	ldr	r1, [r7, #8]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	0018      	movs	r0, r3
 800043c:	f000 face 	bl	80009dc <HAL_ADC_Start_DMA>
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b004      	add	sp, #16
 8000446:	bd80      	pop	{r7, pc}

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	e7fe      	b.n	8000450 <Error_Handler+0x8>
	...

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_MspInit+0x44>)
 800045c:	699a      	ldr	r2, [r3, #24]
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <HAL_MspInit+0x44>)
 8000460:	2101      	movs	r1, #1
 8000462:	430a      	orrs	r2, r1
 8000464:	619a      	str	r2, [r3, #24]
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_MspInit+0x44>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	2201      	movs	r2, #1
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_MspInit+0x44>)
 8000474:	69da      	ldr	r2, [r3, #28]
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_MspInit+0x44>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0549      	lsls	r1, r1, #21
 800047c:	430a      	orrs	r2, r1
 800047e:	61da      	str	r2, [r3, #28]
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_MspInit+0x44>)
 8000482:	69da      	ldr	r2, [r3, #28]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	055b      	lsls	r3, r3, #21
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	; 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2414      	movs	r4, #20
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f001 ffb0 	bl	8002414 <memset>
  if(hadc->Instance==ADC1)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a34      	ldr	r2, [pc, #208]	; (800058c <HAL_ADC_MspInit+0xf0>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d162      	bne.n	8000584 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <HAL_ADC_MspInit+0xf4>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	4b33      	ldr	r3, [pc, #204]	; (8000590 <HAL_ADC_MspInit+0xf4>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0089      	lsls	r1, r1, #2
 80004c8:	430a      	orrs	r2, r1
 80004ca:	619a      	str	r2, [r3, #24]
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <HAL_ADC_MspInit+0xf4>)
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <HAL_ADC_MspInit+0xf4>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <HAL_ADC_MspInit+0xf4>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	02c9      	lsls	r1, r1, #11
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <HAL_ADC_MspInit+0xf4>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	02db      	lsls	r3, r3, #11
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2203      	movs	r2, #3
 8000500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000508:	193b      	adds	r3, r7, r4
 800050a:	4a22      	ldr	r2, [pc, #136]	; (8000594 <HAL_ADC_MspInit+0xf8>)
 800050c:	0019      	movs	r1, r3
 800050e:	0010      	movs	r0, r2
 8000510:	f001 f904 	bl	800171c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 8000516:	4a21      	ldr	r2, [pc, #132]	; (800059c <HAL_ADC_MspInit+0x100>)
 8000518:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	0052      	lsls	r2, r2, #1
 8000532:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	00d2      	lsls	r2, r2, #3
 800053a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 800053e:	2220      	movs	r2, #32
 8000540:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fef8 	bl	8001340 <HAL_DMA_Init>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000554:	f7ff ff78 	bl	8000448 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000558:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <HAL_ADC_MspInit+0x104>)
 800055a:	23a8      	movs	r3, #168	; 0xa8
 800055c:	58d3      	ldr	r3, [r2, r3]
 800055e:	4910      	ldr	r1, [pc, #64]	; (80005a0 <HAL_ADC_MspInit+0x104>)
 8000560:	220f      	movs	r2, #15
 8000562:	4393      	bics	r3, r2
 8000564:	22a8      	movs	r2, #168	; 0xa8
 8000566:	508b      	str	r3, [r1, r2]
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <HAL_ADC_MspInit+0x104>)
 800056a:	23a8      	movs	r3, #168	; 0xa8
 800056c:	58d3      	ldr	r3, [r2, r3]
 800056e:	490c      	ldr	r1, [pc, #48]	; (80005a0 <HAL_ADC_MspInit+0x104>)
 8000570:	2201      	movs	r2, #1
 8000572:	4313      	orrs	r3, r2
 8000574:	22a8      	movs	r2, #168	; 0xa8
 8000576:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 800057c:	631a      	str	r2, [r3, #48]	; 0x30
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_ADC_MspInit+0xfc>)
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b00b      	add	sp, #44	; 0x2c
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40012400 	.word	0x40012400
 8000590:	40021000 	.word	0x40021000
 8000594:	48000400 	.word	0x48000400
 8000598:	2000003c 	.word	0x2000003c
 800059c:	40020008 	.word	0x40020008
 80005a0:	40020000 	.word	0x40020000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c8:	f000 f888 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <DMA1_Ch1_IRQHandler+0x14>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 ff96 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	2000003c 	.word	0x2000003c

080005ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490e      	ldr	r1, [pc, #56]	; (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0e      	ldr	r2, [pc, #56]	; (800063c <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0b      	ldr	r4, [pc, #44]	; (8000644 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000622:	f7ff ffe3 	bl	80005ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000626:	f001 fed1 	bl	80023cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fdf7 	bl	800021c <main>

0800062e <LoopForever>:

LoopForever:
    b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800063c:	08002474 	.word	0x08002474
  ldr r2, =_sbss
 8000640:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000644:	200000c4 	.word	0x200000c4

08000648 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_COMP_IRQHandler>
	...

0800064c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_Init+0x24>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_Init+0x24>)
 8000656:	2110      	movs	r1, #16
 8000658:	430a      	orrs	r2, r1
 800065a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f809 	bl	8000674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000662:	f7ff fef7 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_InitTick+0x5c>)
 800067e:	681c      	ldr	r4, [r3, #0]
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_InitTick+0x60>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	0019      	movs	r1, r3
 8000686:	23fa      	movs	r3, #250	; 0xfa
 8000688:	0098      	lsls	r0, r3, #2
 800068a:	f7ff fd3b 	bl	8000104 <__udivsi3>
 800068e:	0003      	movs	r3, r0
 8000690:	0019      	movs	r1, r3
 8000692:	0020      	movs	r0, r4
 8000694:	f7ff fd36 	bl	8000104 <__udivsi3>
 8000698:	0003      	movs	r3, r0
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fe43 	bl	8001326 <HAL_SYSTICK_Config>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e00f      	b.n	80006c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d80b      	bhi.n	80006c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	2301      	movs	r3, #1
 80006b2:	425b      	negs	r3, r3
 80006b4:	2200      	movs	r2, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fe10 	bl	80012dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_InitTick+0x64>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b003      	add	sp, #12
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	18d2      	adds	r2, r2, r3
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <HAL_IncTick+0x20>)
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	20000008 	.word	0x20000008
 80006fc:	200000c0 	.word	0x200000c0

08000700 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_GetTick+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	200000c0 	.word	0x200000c0

08000714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800071c:	f7ff fff0 	bl	8000700 <HAL_GetTick>
 8000720:	0003      	movs	r3, r0
 8000722:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	d005      	beq.n	800073a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_Delay+0x44>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	001a      	movs	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	189b      	adds	r3, r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	f7ff ffe0 	bl	8000700 <HAL_GetTick>
 8000740:	0002      	movs	r2, r0
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d8f7      	bhi.n	800073c <HAL_Delay+0x28>
  {
  }
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000008 	.word	0x20000008

0800075c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e125      	b.n	80009c6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10a      	bne.n	8000798 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	0018      	movs	r0, r3
 8000794:	f7ff fe82 	bl	800049c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079c:	2210      	movs	r2, #16
 800079e:	4013      	ands	r3, r2
 80007a0:	d000      	beq.n	80007a4 <HAL_ADC_Init+0x48>
 80007a2:	e103      	b.n	80009ac <HAL_ADC_Init+0x250>
 80007a4:	230f      	movs	r3, #15
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d000      	beq.n	80007b0 <HAL_ADC_Init+0x54>
 80007ae:	e0fd      	b.n	80009ac <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	2204      	movs	r2, #4
 80007b8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80007ba:	d000      	beq.n	80007be <HAL_ADC_Init+0x62>
 80007bc:	e0f6      	b.n	80009ac <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007c2:	4a83      	ldr	r2, [pc, #524]	; (80009d0 <HAL_ADC_Init+0x274>)
 80007c4:	4013      	ands	r3, r2
 80007c6:	2202      	movs	r2, #2
 80007c8:	431a      	orrs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	2203      	movs	r2, #3
 80007d6:	4013      	ands	r3, r2
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d112      	bne.n	8000802 <HAL_ADC_Init+0xa6>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4013      	ands	r3, r2
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d009      	beq.n	80007fe <HAL_ADC_Init+0xa2>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	401a      	ands	r2, r3
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d101      	bne.n	8000802 <HAL_ADC_Init+0xa6>
 80007fe:	2301      	movs	r3, #1
 8000800:	e000      	b.n	8000804 <HAL_ADC_Init+0xa8>
 8000802:	2300      	movs	r3, #0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d116      	bne.n	8000836 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	2218      	movs	r2, #24
 8000810:	4393      	bics	r3, r2
 8000812:	0019      	movs	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	430a      	orrs	r2, r1
 800081e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	0899      	lsrs	r1, r3, #2
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	430a      	orrs	r2, r1
 8000834:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4964      	ldr	r1, [pc, #400]	; (80009d4 <HAL_ADC_Init+0x278>)
 8000842:	400a      	ands	r2, r1
 8000844:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7e1b      	ldrb	r3, [r3, #24]
 800084a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7e5b      	ldrb	r3, [r3, #25]
 8000850:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000852:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7e9b      	ldrb	r3, [r3, #26]
 8000858:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800085a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000860:	2b01      	cmp	r3, #1
 8000862:	d002      	beq.n	800086a <HAL_ADC_Init+0x10e>
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	015b      	lsls	r3, r3, #5
 8000868:	e000      	b.n	800086c <HAL_ADC_Init+0x110>
 800086a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800086c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000872:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d101      	bne.n	8000880 <HAL_ADC_Init+0x124>
 800087c:	2304      	movs	r3, #4
 800087e:	e000      	b.n	8000882 <HAL_ADC_Init+0x126>
 8000880:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000882:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2124      	movs	r1, #36	; 0x24
 8000888:	5c5b      	ldrb	r3, [r3, r1]
 800088a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800088c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	4313      	orrs	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7edb      	ldrb	r3, [r3, #27]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d115      	bne.n	80008c8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7e9b      	ldrb	r3, [r3, #26]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d105      	bne.n	80008b0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	0252      	lsls	r2, r2, #9
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	e00b      	b.n	80008c8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b4:	2220      	movs	r2, #32
 80008b6:	431a      	orrs	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008c0:	2201      	movs	r2, #1
 80008c2:	431a      	orrs	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	23c2      	movs	r3, #194	; 0xc2
 80008ce:	33ff      	adds	r3, #255	; 0xff
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d007      	beq.n	80008e4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80008dc:	4313      	orrs	r3, r2
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68d9      	ldr	r1, [r3, #12]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	055b      	lsls	r3, r3, #21
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d01b      	beq.n	8000938 <HAL_ADC_Init+0x1dc>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	2b01      	cmp	r3, #1
 8000906:	d017      	beq.n	8000938 <HAL_ADC_Init+0x1dc>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	2b02      	cmp	r3, #2
 800090e:	d013      	beq.n	8000938 <HAL_ADC_Init+0x1dc>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	2b03      	cmp	r3, #3
 8000916:	d00f      	beq.n	8000938 <HAL_ADC_Init+0x1dc>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091c:	2b04      	cmp	r3, #4
 800091e:	d00b      	beq.n	8000938 <HAL_ADC_Init+0x1dc>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000924:	2b05      	cmp	r3, #5
 8000926:	d007      	beq.n	8000938 <HAL_ADC_Init+0x1dc>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	2b06      	cmp	r3, #6
 800092e:	d003      	beq.n	8000938 <HAL_ADC_Init+0x1dc>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000934:	2b07      	cmp	r3, #7
 8000936:	d112      	bne.n	800095e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2107      	movs	r1, #7
 8000944:	438a      	bics	r2, r1
 8000946:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6959      	ldr	r1, [r3, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	2207      	movs	r2, #7
 8000954:	401a      	ands	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	430a      	orrs	r2, r1
 800095c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <HAL_ADC_Init+0x27c>)
 8000966:	4013      	ands	r3, r2
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	429a      	cmp	r2, r3
 800096c:	d10b      	bne.n	8000986 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000978:	2203      	movs	r2, #3
 800097a:	4393      	bics	r3, r2
 800097c:	2201      	movs	r2, #1
 800097e:	431a      	orrs	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000984:	e01c      	b.n	80009c0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098a:	2212      	movs	r2, #18
 800098c:	4393      	bics	r3, r2
 800098e:	2210      	movs	r2, #16
 8000990:	431a      	orrs	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	2201      	movs	r2, #1
 800099c:	431a      	orrs	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80009a2:	230f      	movs	r3, #15
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80009aa:	e009      	b.n	80009c0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b0:	2210      	movs	r2, #16
 80009b2:	431a      	orrs	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80009b8:	230f      	movs	r3, #15
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	fffffefd 	.word	0xfffffefd
 80009d4:	fffe0219 	.word	0xfffe0219
 80009d8:	833fffe7 	.word	0x833fffe7

080009dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e8:	2317      	movs	r3, #23
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2204      	movs	r2, #4
 80009f8:	4013      	ands	r3, r2
 80009fa:	d15e      	bne.n	8000aba <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2234      	movs	r2, #52	; 0x34
 8000a00:	5c9b      	ldrb	r3, [r3, r2]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d101      	bne.n	8000a0a <HAL_ADC_Start_DMA+0x2e>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e05e      	b.n	8000ac8 <HAL_ADC_Start_DMA+0xec>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2234      	movs	r2, #52	; 0x34
 8000a0e:	2101      	movs	r1, #1
 8000a10:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	7e5b      	ldrb	r3, [r3, #25]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d007      	beq.n	8000a2a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000a1a:	2317      	movs	r3, #23
 8000a1c:	18fc      	adds	r4, r7, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 f9e9 	bl	8000df8 <ADC_Enable>
 8000a26:	0003      	movs	r3, r0
 8000a28:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a2a:	2317      	movs	r3, #23
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d146      	bne.n	8000ac2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a38:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <HAL_ADC_Start_DMA+0xf4>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	431a      	orrs	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2234      	movs	r2, #52	; 0x34
 8000a50:	2100      	movs	r1, #0
 8000a52:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_ADC_Start_DMA+0xf8>)
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_ADC_Start_DMA+0xfc>)
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_ADC_Start_DMA+0x100>)
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	221c      	movs	r2, #28
 8000a72:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2110      	movs	r1, #16
 8000a80:	430a      	orrs	r2, r1
 8000a82:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2101      	movs	r1, #1
 8000a90:	430a      	orrs	r2, r1
 8000a92:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3340      	adds	r3, #64	; 0x40
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f000 fc94 	bl	80013d0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	e003      	b.n	8000ac2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000aba:	2317      	movs	r3, #23
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	2202      	movs	r2, #2
 8000ac0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ac2:	2317      	movs	r3, #23
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b007      	add	sp, #28
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	fffff0fe 	.word	0xfffff0fe
 8000ad4:	0800107d 	.word	0x0800107d
 8000ad8:	08001131 	.word	0x08001131
 8000adc:	0800114f 	.word	0x0800114f

08000ae0 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	5c9b      	ldrb	r3, [r3, r2]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d101      	bne.n	8000afe <HAL_ADC_Stop_DMA+0x1e>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e05f      	b.n	8000bbe <HAL_ADC_Stop_DMA+0xde>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2234      	movs	r2, #52	; 0x34
 8000b02:	2101      	movs	r1, #1
 8000b04:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000b06:	250f      	movs	r5, #15
 8000b08:	197c      	adds	r4, r7, r5
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fa68 	bl	8000fe2 <ADC_ConversionStop>
 8000b12:	0003      	movs	r3, r0
 8000b14:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000b16:	0028      	movs	r0, r5
 8000b18:	183b      	adds	r3, r7, r0
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d147      	bne.n	8000bb0 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	2221      	movs	r2, #33	; 0x21
 8000b36:	5c9b      	ldrb	r3, [r3, r2]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d112      	bne.n	8000b64 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	0005      	movs	r5, r0
 8000b44:	183c      	adds	r4, r7, r0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fca8 	bl	800149c <HAL_DMA_Abort>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8000b50:	197b      	adds	r3, r7, r5
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d005      	beq.n	8000b64 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2110      	movs	r1, #16
 8000b70:	438a      	bics	r2, r1
 8000b72:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8000b74:	220f      	movs	r2, #15
 8000b76:	18bb      	adds	r3, r7, r2
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d107      	bne.n	8000b8e <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8000b7e:	18bc      	adds	r4, r7, r2
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f9bc 	bl	8000f00 <ADC_Disable>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	7023      	strb	r3, [r4, #0]
 8000b8c:	e003      	b.n	8000b96 <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 f9b5 	bl	8000f00 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000b96:	230f      	movs	r3, #15
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d107      	bne.n	8000bb0 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_ADC_Stop_DMA+0xe8>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2201      	movs	r2, #1
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2234      	movs	r2, #52	; 0x34
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	781b      	ldrb	r3, [r3, #0]
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	fffffefe 	.word	0xfffffefe

08000bcc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be6:	230f      	movs	r3, #15
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	055b      	lsls	r3, r3, #21
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d011      	beq.n	8000c22 <HAL_ADC_ConfigChannel+0x46>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d00d      	beq.n	8000c22 <HAL_ADC_ConfigChannel+0x46>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d009      	beq.n	8000c22 <HAL_ADC_ConfigChannel+0x46>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d005      	beq.n	8000c22 <HAL_ADC_ConfigChannel+0x46>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d001      	beq.n	8000c22 <HAL_ADC_ConfigChannel+0x46>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2234      	movs	r2, #52	; 0x34
 8000c26:	5c9b      	ldrb	r3, [r3, r2]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d101      	bne.n	8000c30 <HAL_ADC_ConfigChannel+0x54>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e0d0      	b.n	8000dd2 <HAL_ADC_ConfigChannel+0x1f6>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2234      	movs	r2, #52	; 0x34
 8000c34:	2101      	movs	r1, #1
 8000c36:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2204      	movs	r2, #4
 8000c40:	4013      	ands	r3, r2
 8000c42:	d000      	beq.n	8000c46 <HAL_ADC_ConfigChannel+0x6a>
 8000c44:	e0b4      	b.n	8000db0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4a64      	ldr	r2, [pc, #400]	; (8000ddc <HAL_ADC_ConfigChannel+0x200>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d100      	bne.n	8000c52 <HAL_ADC_ConfigChannel+0x76>
 8000c50:	e082      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	055b      	lsls	r3, r3, #21
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d037      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d033      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d02f      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d02b      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d027      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d023      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	2b06      	cmp	r3, #6
 8000ca2:	d01f      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d01b      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	2107      	movs	r1, #7
 8000cb8:	400b      	ands	r3, r1
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d012      	beq.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2107      	movs	r1, #7
 8000cca:	438a      	bics	r2, r1
 8000ccc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6959      	ldr	r1, [r3, #20]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	2207      	movs	r2, #7
 8000cda:	401a      	ands	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b10      	cmp	r3, #16
 8000cea:	d007      	beq.n	8000cfc <HAL_ADC_ConfigChannel+0x120>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b11      	cmp	r3, #17
 8000cf2:	d003      	beq.n	8000cfc <HAL_ADC_ConfigChannel+0x120>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b12      	cmp	r3, #18
 8000cfa:	d163      	bne.n	8000dc4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000cfc:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b10      	cmp	r3, #16
 8000d06:	d009      	beq.n	8000d1c <HAL_ADC_ConfigChannel+0x140>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b11      	cmp	r3, #17
 8000d0e:	d102      	bne.n	8000d16 <HAL_ADC_ConfigChannel+0x13a>
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	03db      	lsls	r3, r3, #15
 8000d14:	e004      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x144>
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	045b      	lsls	r3, r3, #17
 8000d1a:	e001      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x144>
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000d22:	430b      	orrs	r3, r1
 8000d24:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d14a      	bne.n	8000dc4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_ADC_ConfigChannel+0x208>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	492d      	ldr	r1, [pc, #180]	; (8000de8 <HAL_ADC_ConfigChannel+0x20c>)
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff f9e5 	bl	8000104 <__udivsi3>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	189b      	adds	r3, r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d48:	e002      	b.n	8000d50 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f9      	bne.n	8000d4a <HAL_ADC_ConfigChannel+0x16e>
 8000d56:	e035      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	4099      	lsls	r1, r3
 8000d66:	000b      	movs	r3, r1
 8000d68:	43d9      	mvns	r1, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	400a      	ands	r2, r1
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b10      	cmp	r3, #16
 8000d78:	d007      	beq.n	8000d8a <HAL_ADC_ConfigChannel+0x1ae>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b11      	cmp	r3, #17
 8000d80:	d003      	beq.n	8000d8a <HAL_ADC_ConfigChannel+0x1ae>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b12      	cmp	r3, #18
 8000d88:	d11c      	bne.n	8000dc4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	d007      	beq.n	8000da6 <HAL_ADC_ConfigChannel+0x1ca>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b11      	cmp	r3, #17
 8000d9c:	d101      	bne.n	8000da2 <HAL_ADC_ConfigChannel+0x1c6>
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_ADC_ConfigChannel+0x210>)
 8000da0:	e002      	b.n	8000da8 <HAL_ADC_ConfigChannel+0x1cc>
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_ADC_ConfigChannel+0x214>)
 8000da4:	e000      	b.n	8000da8 <HAL_ADC_ConfigChannel+0x1cc>
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_ADC_ConfigChannel+0x218>)
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_ADC_ConfigChannel+0x204>)
 8000daa:	400b      	ands	r3, r1
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e009      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db4:	2220      	movs	r2, #32
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2234      	movs	r2, #52	; 0x34
 8000dc8:	2100      	movs	r1, #0
 8000dca:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b004      	add	sp, #16
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	00001001 	.word	0x00001001
 8000de0:	40012708 	.word	0x40012708
 8000de4:	20000000 	.word	0x20000000
 8000de8:	000f4240 	.word	0x000f4240
 8000dec:	ffbfffff 	.word	0xffbfffff
 8000df0:	feffffff 	.word	0xfeffffff
 8000df4:	ff7fffff 	.word	0xff7fffff

08000df8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d112      	bne.n	8000e3c <ADC_Enable+0x44>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d009      	beq.n	8000e38 <ADC_Enable+0x40>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	401a      	ands	r2, r3
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d101      	bne.n	8000e3c <ADC_Enable+0x44>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <ADC_Enable+0x46>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d152      	bne.n	8000ee8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4a2a      	ldr	r2, [pc, #168]	; (8000ef4 <ADC_Enable+0xfc>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e52:	2210      	movs	r2, #16
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5e:	2201      	movs	r2, #1
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e03f      	b.n	8000eea <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	430a      	orrs	r2, r1
 8000e78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <ADC_Enable+0x100>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	491f      	ldr	r1, [pc, #124]	; (8000efc <ADC_Enable+0x104>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff f93f 	bl	8000104 <__udivsi3>
 8000e86:	0003      	movs	r3, r0
 8000e88:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e8a:	e002      	b.n	8000e92 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f9      	bne.n	8000e8c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e98:	f7ff fc32 	bl	8000700 <HAL_GetTick>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000ea0:	e01b      	b.n	8000eda <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ea2:	f7ff fc2d 	bl	8000700 <HAL_GetTick>
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d914      	bls.n	8000eda <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d00d      	beq.n	8000eda <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec2:	2210      	movs	r2, #16
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ece:	2201      	movs	r2, #1
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e007      	b.n	8000eea <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d1dc      	bne.n	8000ea2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	80000017 	.word	0x80000017
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	000f4240 	.word	0x000f4240

08000f00 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2203      	movs	r2, #3
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d112      	bne.n	8000f40 <ADC_Disable+0x40>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d009      	beq.n	8000f3c <ADC_Disable+0x3c>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	401a      	ands	r2, r3
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d101      	bne.n	8000f40 <ADC_Disable+0x40>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <ADC_Disable+0x42>
 8000f40:	2300      	movs	r3, #0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d048      	beq.n	8000fd8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d110      	bne.n	8000f76 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2102      	movs	r1, #2
 8000f60:	430a      	orrs	r2, r1
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f6c:	f7ff fbc8 	bl	8000700 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000f74:	e029      	b.n	8000fca <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f86:	2201      	movs	r2, #1
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e023      	b.n	8000fda <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f92:	f7ff fbb5 	bl	8000700 <HAL_GetTick>
 8000f96:	0002      	movs	r2, r0
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d914      	bls.n	8000fca <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10d      	bne.n	8000fca <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e007      	b.n	8000fda <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d0dc      	beq.n	8000f92 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d03a      	beq.n	8001070 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2204      	movs	r2, #4
 8001002:	4013      	ands	r3, r2
 8001004:	2b04      	cmp	r3, #4
 8001006:	d10d      	bne.n	8001024 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001012:	d107      	bne.n	8001024 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2110      	movs	r1, #16
 8001020:	430a      	orrs	r2, r1
 8001022:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001024:	f7ff fb6c 	bl	8000700 <HAL_GetTick>
 8001028:	0003      	movs	r3, r0
 800102a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800102c:	e01a      	b.n	8001064 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800102e:	f7ff fb67 	bl	8000700 <HAL_GetTick>
 8001032:	0002      	movs	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d913      	bls.n	8001064 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2204      	movs	r2, #4
 8001044:	4013      	ands	r3, r2
 8001046:	d00d      	beq.n	8001064 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104c:	2210      	movs	r2, #16
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001058:	2201      	movs	r2, #1
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e006      	b.n	8001072 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2204      	movs	r2, #4
 800106c:	4013      	ands	r3, r2
 800106e:	d1de      	bne.n	800102e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108e:	2250      	movs	r2, #80	; 0x50
 8001090:	4013      	ands	r3, r2
 8001092:	d140      	bne.n	8001116 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	431a      	orrs	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	23c0      	movs	r3, #192	; 0xc0
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4013      	ands	r3, r2
 80010ae:	d12d      	bne.n	800110c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d129      	bne.n	800110c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2208      	movs	r2, #8
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d122      	bne.n	800110c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2204      	movs	r2, #4
 80010ce:	4013      	ands	r3, r2
 80010d0:	d110      	bne.n	80010f4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	210c      	movs	r1, #12
 80010de:	438a      	bics	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <ADC_DMAConvCplt+0xb0>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	2201      	movs	r2, #1
 80010ec:	431a      	orrs	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38
 80010f2:	e00b      	b.n	800110c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f8:	2220      	movs	r2, #32
 80010fa:	431a      	orrs	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001104:	2201      	movs	r2, #1
 8001106:	431a      	orrs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff f97d 	bl	800040e <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001114:	e005      	b.n	8001122 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	0010      	movs	r0, r2
 8001120:	4798      	blx	r3
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	fffffefe 	.word	0xfffffefe

08001130 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff f95b 	bl	80003fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b004      	add	sp, #16
 800114c:	bd80      	pop	{r7, pc}

0800114e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	2240      	movs	r2, #64	; 0x40
 8001162:	431a      	orrs	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	2204      	movs	r2, #4
 800116e:	431a      	orrs	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	0018      	movs	r0, r3
 8001178:	f7ff fd28 	bl	8000bcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b004      	add	sp, #16
 8001182:	bd80      	pop	{r7, pc}

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b7f      	cmp	r3, #127	; 0x7f
 8001196:	d809      	bhi.n	80011ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	001a      	movs	r2, r3
 800119e:	231f      	movs	r3, #31
 80011a0:	401a      	ands	r2, r3
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_EnableIRQ+0x30>)
 80011a4:	2101      	movs	r1, #1
 80011a6:	4091      	lsls	r1, r2
 80011a8:	000a      	movs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
  }
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	0002      	movs	r2, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b7f      	cmp	r3, #127	; 0x7f
 80011cc:	d828      	bhi.n	8001220 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ce:	4a2f      	ldr	r2, [pc, #188]	; (800128c <__NVIC_SetPriority+0xd4>)
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	33c0      	adds	r3, #192	; 0xc0
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	589b      	ldr	r3, [r3, r2]
 80011de:	1dfa      	adds	r2, r7, #7
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	0011      	movs	r1, r2
 80011e4:	2203      	movs	r2, #3
 80011e6:	400a      	ands	r2, r1
 80011e8:	00d2      	lsls	r2, r2, #3
 80011ea:	21ff      	movs	r1, #255	; 0xff
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	43d2      	mvns	r2, r2
 80011f2:	401a      	ands	r2, r3
 80011f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	401a      	ands	r2, r3
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	0018      	movs	r0, r3
 8001204:	2303      	movs	r3, #3
 8001206:	4003      	ands	r3, r0
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120c:	481f      	ldr	r0, [pc, #124]	; (800128c <__NVIC_SetPriority+0xd4>)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	430a      	orrs	r2, r1
 8001218:	33c0      	adds	r3, #192	; 0xc0
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800121e:	e031      	b.n	8001284 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <__NVIC_SetPriority+0xd8>)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	0019      	movs	r1, r3
 8001228:	230f      	movs	r3, #15
 800122a:	400b      	ands	r3, r1
 800122c:	3b08      	subs	r3, #8
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3306      	adds	r3, #6
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1dfa      	adds	r2, r7, #7
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	0011      	movs	r1, r2
 8001240:	2203      	movs	r2, #3
 8001242:	400a      	ands	r2, r1
 8001244:	00d2      	lsls	r2, r2, #3
 8001246:	21ff      	movs	r1, #255	; 0xff
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	43d2      	mvns	r2, r2
 800124e:	401a      	ands	r2, r3
 8001250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	22ff      	movs	r2, #255	; 0xff
 8001258:	401a      	ands	r2, r3
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	0018      	movs	r0, r3
 8001260:	2303      	movs	r3, #3
 8001262:	4003      	ands	r3, r0
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <__NVIC_SetPriority+0xd8>)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	001c      	movs	r4, r3
 8001270:	230f      	movs	r3, #15
 8001272:	4023      	ands	r3, r4
 8001274:	3b08      	subs	r3, #8
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	430a      	orrs	r2, r1
 800127a:	3306      	adds	r3, #6
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	18c3      	adds	r3, r0, r3
 8001280:	3304      	adds	r3, #4
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b003      	add	sp, #12
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	045b      	lsls	r3, r3, #17
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d301      	bcc.n	80012ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a8:	2301      	movs	r3, #1
 80012aa:	e010      	b.n	80012ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <SysTick_Config+0x44>)
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	3a01      	subs	r2, #1
 80012b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b4:	2301      	movs	r3, #1
 80012b6:	425b      	negs	r3, r3
 80012b8:	2103      	movs	r1, #3
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7ff ff7c 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x44>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x44>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	210f      	movs	r1, #15
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	1c02      	adds	r2, r0, #0
 80012ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	0002      	movs	r2, r0
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff33 	bl	8001184 <__NVIC_EnableIRQ>
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff ffaf 	bl	8001294 <SysTick_Config>
 8001336:	0003      	movs	r3, r0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e036      	b.n	80013c4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2221      	movs	r2, #33	; 0x21
 800135a:	2102      	movs	r1, #2
 800135c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_DMA_Init+0x8c>)
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 f97e 	bl	80016a8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2221      	movs	r2, #33	; 0x21
 80013b6:	2101      	movs	r1, #1
 80013b8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2220      	movs	r2, #32
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}  
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b004      	add	sp, #16
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	ffffc00f 	.word	0xffffc00f

080013d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013de:	2317      	movs	r3, #23
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2220      	movs	r2, #32
 80013ea:	5c9b      	ldrb	r3, [r3, r2]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_DMA_Start_IT+0x24>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e04f      	b.n	8001494 <HAL_DMA_Start_IT+0xc4>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2220      	movs	r2, #32
 80013f8:	2101      	movs	r1, #1
 80013fa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2221      	movs	r2, #33	; 0x21
 8001400:	5c9b      	ldrb	r3, [r3, r2]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d13a      	bne.n	800147e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2221      	movs	r2, #33	; 0x21
 800140c:	2102      	movs	r1, #2
 800140e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	438a      	bics	r2, r1
 8001424:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f90f 	bl	8001650 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	210e      	movs	r1, #14
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e00f      	b.n	800146c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	210a      	movs	r1, #10
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e007      	b.n	800148e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2220      	movs	r2, #32
 8001482:	2100      	movs	r1, #0
 8001484:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001486:	2317      	movs	r3, #23
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800148e:	2317      	movs	r3, #23
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
} 
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	b006      	add	sp, #24
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2221      	movs	r2, #33	; 0x21
 80014a8:	5c9b      	ldrb	r3, [r3, r2]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2204      	movs	r2, #4
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2220      	movs	r2, #32
 80014ba:	2100      	movs	r1, #0
 80014bc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e020      	b.n	8001504 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	210e      	movs	r1, #14
 80014ce:	438a      	bics	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	438a      	bics	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ea:	2101      	movs	r1, #1
 80014ec:	4091      	lsls	r1, r2
 80014ee:	000a      	movs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2221      	movs	r2, #33	; 0x21
 80014f6:	2101      	movs	r1, #1
 80014f8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	2100      	movs	r1, #0
 8001500:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2204      	movs	r2, #4
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	d024      	beq.n	800157e <HAL_DMA_IRQHandler+0x72>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d020      	beq.n	800157e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2220      	movs	r2, #32
 8001544:	4013      	ands	r3, r2
 8001546:	d107      	bne.n	8001558 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2104      	movs	r1, #4
 8001554:	438a      	bics	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001560:	2104      	movs	r1, #4
 8001562:	4091      	lsls	r1, r2
 8001564:	000a      	movs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d100      	bne.n	8001572 <HAL_DMA_IRQHandler+0x66>
 8001570:	e06a      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	0010      	movs	r0, r2
 800157a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800157c:	e064      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2202      	movs	r2, #2
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	d02b      	beq.n	80015e6 <HAL_DMA_IRQHandler+0xda>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d027      	beq.n	80015e6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2220      	movs	r2, #32
 800159e:	4013      	ands	r3, r2
 80015a0:	d10b      	bne.n	80015ba <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	210a      	movs	r1, #10
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2221      	movs	r2, #33	; 0x21
 80015b6:	2101      	movs	r1, #1
 80015b8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	2102      	movs	r1, #2
 80015c4:	4091      	lsls	r1, r2
 80015c6:	000a      	movs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d036      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	0010      	movs	r0, r2
 80015e2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015e4:	e030      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2208      	movs	r2, #8
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	d028      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2208      	movs	r2, #8
 80015fa:	4013      	ands	r3, r2
 80015fc:	d024      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	210e      	movs	r1, #14
 800160a:	438a      	bics	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001616:	2101      	movs	r1, #1
 8001618:	4091      	lsls	r1, r2
 800161a:	000a      	movs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2221      	movs	r2, #33	; 0x21
 8001628:	2101      	movs	r1, #1
 800162a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2220      	movs	r2, #32
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	0010      	movs	r0, r2
 8001644:	4798      	blx	r3
    }
   }
}  
 8001646:	e7ff      	b.n	8001648 <HAL_DMA_IRQHandler+0x13c>
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}

08001650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001666:	2101      	movs	r1, #1
 8001668:	4091      	lsls	r1, r2
 800166a:	000a      	movs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d108      	bne.n	8001690 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800168e:	e007      	b.n	80016a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	60da      	str	r2, [r3, #12]
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	001a      	movs	r2, r3
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <DMA_CalcBaseAndBitshift+0x60>)
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d810      	bhi.n	80016de <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a12      	ldr	r2, [pc, #72]	; (800170c <DMA_CalcBaseAndBitshift+0x64>)
 80016c2:	4694      	mov	ip, r2
 80016c4:	4463      	add	r3, ip
 80016c6:	2114      	movs	r1, #20
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7fe fd1b 	bl	8000104 <__udivsi3>
 80016ce:	0003      	movs	r3, r0
 80016d0:	009a      	lsls	r2, r3, #2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <DMA_CalcBaseAndBitshift+0x68>)
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80016dc:	e00f      	b.n	80016fe <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <DMA_CalcBaseAndBitshift+0x6c>)
 80016e4:	4694      	mov	ip, r2
 80016e6:	4463      	add	r3, ip
 80016e8:	2114      	movs	r1, #20
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7fe fd0a 	bl	8000104 <__udivsi3>
 80016f0:	0003      	movs	r3, r0
 80016f2:	009a      	lsls	r2, r3, #2
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <DMA_CalcBaseAndBitshift+0x70>)
 80016fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40020407 	.word	0x40020407
 800170c:	bffdfff8 	.word	0xbffdfff8
 8001710:	40020000 	.word	0x40020000
 8001714:	bffdfbf8 	.word	0xbffdfbf8
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e155      	b.n	80019d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4091      	lsls	r1, r2
 8001736:	000a      	movs	r2, r1
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d100      	bne.n	8001744 <HAL_GPIO_Init+0x28>
 8001742:	e146      	b.n	80019d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	4013      	ands	r3, r2
 800174c:	2b01      	cmp	r3, #1
 800174e:	d005      	beq.n	800175c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001758:	2b02      	cmp	r3, #2
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	2201      	movs	r2, #1
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d017      	beq.n	80017fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	43da      	mvns	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2203      	movs	r2, #3
 8001800:	4013      	ands	r3, r2
 8001802:	2b02      	cmp	r3, #2
 8001804:	d123      	bne.n	800184e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	58d3      	ldr	r3, [r2, r3]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2207      	movs	r2, #7
 8001818:	4013      	ands	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	43da      	mvns	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2107      	movs	r1, #7
 8001832:	400b      	ands	r3, r1
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	43da      	mvns	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	401a      	ands	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	029b      	lsls	r3, r3, #10
 800188a:	4013      	ands	r3, r2
 800188c:	d100      	bne.n	8001890 <HAL_GPIO_Init+0x174>
 800188e:	e0a0      	b.n	80019d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_GPIO_Init+0x2d4>)
 8001892:	699a      	ldr	r2, [r3, #24]
 8001894:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <HAL_GPIO_Init+0x2d4>)
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <HAL_GPIO_Init+0x2d4>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a8:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_GPIO_Init+0x2d8>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	589b      	ldr	r3, [r3, r2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2203      	movs	r2, #3
 80018ba:	4013      	ands	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	409a      	lsls	r2, r3
 80018c2:	0013      	movs	r3, r2
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	2390      	movs	r3, #144	; 0x90
 80018d0:	05db      	lsls	r3, r3, #23
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d019      	beq.n	800190a <HAL_GPIO_Init+0x1ee>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_GPIO_Init+0x2dc>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x1ea>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a46      	ldr	r2, [pc, #280]	; (80019fc <HAL_GPIO_Init+0x2e0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1e6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a45      	ldr	r2, [pc, #276]	; (8001a00 <HAL_GPIO_Init+0x2e4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1e2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a44      	ldr	r2, [pc, #272]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1de>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x1f0>
 80018fa:	2305      	movs	r3, #5
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x1f0>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x1f0>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x1f0>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x1f0>
 800190a:	2300      	movs	r3, #0
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	2103      	movs	r1, #3
 8001910:	400a      	ands	r2, r1
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x2d8>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	4013      	ands	r3, r2
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001954:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43da      	mvns	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43da      	mvns	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	035b      	lsls	r3, r3, #13
 8001996:	4013      	ands	r3, r2
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43da      	mvns	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	039b      	lsls	r3, r3, #14
 80019c0:	4013      	ands	r3, r2
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	40da      	lsrs	r2, r3
 80019e0:	1e13      	subs	r3, r2, #0
 80019e2:	d000      	beq.n	80019e6 <HAL_GPIO_Init+0x2ca>
 80019e4:	e6a2      	b.n	800172c <HAL_GPIO_Init+0x10>
  } 
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b006      	add	sp, #24
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000
 80019f8:	48000400 	.word	0x48000400
 80019fc:	48000800 	.word	0x48000800
 8001a00:	48000c00 	.word	0x48000c00
 8001a04:	48001000 	.word	0x48001000
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f000 fb76 	bl	800210c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	d100      	bne.n	8001a2c <HAL_RCC_OscConfig+0x20>
 8001a2a:	e08e      	b.n	8001b4a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a2c:	4bc5      	ldr	r3, [pc, #788]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	220c      	movs	r2, #12
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d00e      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a38:	4bc2      	ldr	r3, [pc, #776]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	220c      	movs	r2, #12
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d117      	bne.n	8001a74 <HAL_RCC_OscConfig+0x68>
 8001a44:	4bbf      	ldr	r3, [pc, #764]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	23c0      	movs	r3, #192	; 0xc0
 8001a4a:	025b      	lsls	r3, r3, #9
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	025b      	lsls	r3, r3, #9
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d10e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a56:	4bbb      	ldr	r3, [pc, #748]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_RCC_OscConfig+0x58>
 8001a62:	e071      	b.n	8001b48 <HAL_RCC_OscConfig+0x13c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d000      	beq.n	8001a6e <HAL_RCC_OscConfig+0x62>
 8001a6c:	e06c      	b.n	8001b48 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f000 fb4c 	bl	800210c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x80>
 8001a7c:	4bb1      	ldr	r3, [pc, #708]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4bb0      	ldr	r3, [pc, #704]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	0249      	lsls	r1, r1, #9
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e02f      	b.n	8001aec <HAL_RCC_OscConfig+0xe0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10c      	bne.n	8001aae <HAL_RCC_OscConfig+0xa2>
 8001a94:	4bab      	ldr	r3, [pc, #684]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4baa      	ldr	r3, [pc, #680]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001a9a:	49ab      	ldr	r1, [pc, #684]	; (8001d48 <HAL_RCC_OscConfig+0x33c>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4ba8      	ldr	r3, [pc, #672]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4ba7      	ldr	r3, [pc, #668]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	49a9      	ldr	r1, [pc, #676]	; (8001d4c <HAL_RCC_OscConfig+0x340>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e01e      	b.n	8001aec <HAL_RCC_OscConfig+0xe0>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d10e      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xc8>
 8001ab6:	4ba3      	ldr	r3, [pc, #652]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4ba2      	ldr	r3, [pc, #648]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	02c9      	lsls	r1, r1, #11
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b9f      	ldr	r3, [pc, #636]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b9e      	ldr	r3, [pc, #632]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	0249      	lsls	r1, r1, #9
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xe0>
 8001ad4:	4b9b      	ldr	r3, [pc, #620]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b9a      	ldr	r3, [pc, #616]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ada:	499b      	ldr	r1, [pc, #620]	; (8001d48 <HAL_RCC_OscConfig+0x33c>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4b98      	ldr	r3, [pc, #608]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b97      	ldr	r3, [pc, #604]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	4999      	ldr	r1, [pc, #612]	; (8001d4c <HAL_RCC_OscConfig+0x340>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d014      	beq.n	8001b1e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7fe fe04 	bl	8000700 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afe:	f7fe fdff 	bl	8000700 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	; 0x64
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e2fd      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b10:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	029b      	lsls	r3, r3, #10
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0xf2>
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fdef 	bl	8000700 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7fe fdea 	bl	8000700 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e2e8      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x11c>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_OscConfig+0x14a>
 8001b54:	e06c      	b.n	8001c30 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d00e      	beq.n	8001b7e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b60:	4b78      	ldr	r3, [pc, #480]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	220c      	movs	r2, #12
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d11f      	bne.n	8001bac <HAL_RCC_OscConfig+0x1a0>
 8001b6c:	4b75      	ldr	r3, [pc, #468]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	025b      	lsls	r3, r3, #9
 8001b74:	401a      	ands	r2, r3
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b71      	ldr	r3, [pc, #452]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x188>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e2bb      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	22f8      	movs	r2, #248	; 0xf8
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00da      	lsls	r2, r3, #3
 8001ba4:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e041      	b.n	8001c30 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d024      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fd9e 	bl	8000700 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7fe fd99 	bl	8000700 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e297      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f1      	beq.n	8001bca <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	22f8      	movs	r2, #248	; 0xf8
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	00da      	lsls	r2, r3, #3
 8001bf6:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e018      	b.n	8001c30 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	438a      	bics	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fd79 	bl	8000700 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c14:	f7fe fd74 	bl	8000700 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e272      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d1f1      	bne.n	8001c14 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2208      	movs	r2, #8
 8001c36:	4013      	ands	r3, r2
 8001c38:	d036      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d019      	beq.n	8001c76 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c46:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7fe fd57 	bl	8000700 <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c58:	f7fe fd52 	bl	8000700 <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e250      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	2202      	movs	r2, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0f1      	beq.n	8001c58 <HAL_RCC_OscConfig+0x24c>
 8001c74:	e018      	b.n	8001ca8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c76:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c7a:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	438a      	bics	r2, r1
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7fe fd3d 	bl	8000700 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7fe fd38 	bl	8000700 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e236      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d1f1      	bne.n	8001c8c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2204      	movs	r2, #4
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2a8>
 8001cb2:	e0b5      	b.n	8001e20 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb4:	201f      	movs	r0, #31
 8001cb6:	183b      	adds	r3, r7, r0
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	055b      	lsls	r3, r3, #21
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d110      	bne.n	8001cea <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	0549      	lsls	r1, r1, #21
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	61da      	str	r2, [r3, #28]
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	055b      	lsls	r3, r3, #21
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ce4:	183b      	adds	r3, r7, r0
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_OscConfig+0x344>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d11a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_RCC_OscConfig+0x344>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_RCC_OscConfig+0x344>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0049      	lsls	r1, r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d04:	f7fe fcfc 	bl	8000700 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7fe fcf7 	bl	8000700 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	; 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1f5      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_OscConfig+0x344>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10f      	bne.n	8001d54 <HAL_RCC_OscConfig+0x348>
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001d36:	6a1a      	ldr	r2, [r3, #32]
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	621a      	str	r2, [r3, #32]
 8001d40:	e036      	b.n	8001db0 <HAL_RCC_OscConfig+0x3a4>
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	40021000 	.word	0x40021000
 8001d48:	fffeffff 	.word	0xfffeffff
 8001d4c:	fffbffff 	.word	0xfffbffff
 8001d50:	40007000 	.word	0x40007000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x36a>
 8001d5c:	4bca      	ldr	r3, [pc, #808]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	4bc9      	ldr	r3, [pc, #804]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	438a      	bics	r2, r1
 8001d66:	621a      	str	r2, [r3, #32]
 8001d68:	4bc7      	ldr	r3, [pc, #796]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	4bc6      	ldr	r3, [pc, #792]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	2104      	movs	r1, #4
 8001d70:	438a      	bics	r2, r1
 8001d72:	621a      	str	r2, [r3, #32]
 8001d74:	e01c      	b.n	8001db0 <HAL_RCC_OscConfig+0x3a4>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x38c>
 8001d7e:	4bc2      	ldr	r3, [pc, #776]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	4bc1      	ldr	r3, [pc, #772]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d84:	2104      	movs	r1, #4
 8001d86:	430a      	orrs	r2, r1
 8001d88:	621a      	str	r2, [r3, #32]
 8001d8a:	4bbf      	ldr	r3, [pc, #764]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d8c:	6a1a      	ldr	r2, [r3, #32]
 8001d8e:	4bbe      	ldr	r3, [pc, #760]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d90:	2101      	movs	r1, #1
 8001d92:	430a      	orrs	r2, r1
 8001d94:	621a      	str	r2, [r3, #32]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0x3a4>
 8001d98:	4bbb      	ldr	r3, [pc, #748]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4bba      	ldr	r3, [pc, #744]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	621a      	str	r2, [r3, #32]
 8001da4:	4bb8      	ldr	r3, [pc, #736]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	4bb7      	ldr	r3, [pc, #732]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001daa:	2104      	movs	r1, #4
 8001dac:	438a      	bics	r2, r1
 8001dae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d014      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7fe fca2 	bl	8000700 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe fc9d 	bl	8000700 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4aaf      	ldr	r2, [pc, #700]	; (800208c <HAL_RCC_OscConfig+0x680>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e19a      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd6:	4bac      	ldr	r3, [pc, #688]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3b6>
 8001de0:	e013      	b.n	8001e0a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fc8d 	bl	8000700 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dea:	e009      	b.n	8001e00 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7fe fc88 	bl	8000700 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4aa5      	ldr	r2, [pc, #660]	; (800208c <HAL_RCC_OscConfig+0x680>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e185      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	4ba1      	ldr	r3, [pc, #644]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	2202      	movs	r2, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e0a:	231f      	movs	r3, #31
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b9c      	ldr	r3, [pc, #624]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e16:	69da      	ldr	r2, [r3, #28]
 8001e18:	4b9b      	ldr	r3, [pc, #620]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	499d      	ldr	r1, [pc, #628]	; (8002090 <HAL_RCC_OscConfig+0x684>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2210      	movs	r2, #16
 8001e26:	4013      	ands	r3, r2
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d12a      	bne.n	8001e88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e32:	4b95      	ldr	r3, [pc, #596]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e36:	4b94      	ldr	r3, [pc, #592]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e38:	2104      	movs	r1, #4
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e3e:	4b92      	ldr	r3, [pc, #584]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e42:	4b91      	ldr	r3, [pc, #580]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe fc59 	bl	8000700 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e54:	f7fe fc54 	bl	8000700 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e152      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0f1      	beq.n	8001e54 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e70:	4b85      	ldr	r3, [pc, #532]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	22f8      	movs	r2, #248	; 0xf8
 8001e76:	4393      	bics	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	00da      	lsls	r2, r3, #3
 8001e80:	4b81      	ldr	r3, [pc, #516]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34
 8001e86:	e034      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	3305      	adds	r3, #5
 8001e8e:	d111      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e90:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e96:	2104      	movs	r1, #4
 8001e98:	438a      	bics	r2, r1
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e9c:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	22f8      	movs	r2, #248	; 0xf8
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	00da      	lsls	r2, r3, #3
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb2:	e01e      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eb4:	4b74      	ldr	r3, [pc, #464]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb8:	4b73      	ldr	r3, [pc, #460]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001eba:	2104      	movs	r1, #4
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ec0:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec4:	4b70      	ldr	r3, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	438a      	bics	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fc18 	bl	8000700 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ed6:	f7fe fc13 	bl	8000700 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e111      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ee8:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d1f1      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d05c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001efc:	4b62      	ldr	r3, [pc, #392]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	220c      	movs	r2, #12
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d00e      	beq.n	8001f26 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f08:	4b5f      	ldr	r3, [pc, #380]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	220c      	movs	r2, #12
 8001f0e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d114      	bne.n	8001f3e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f14:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	23c0      	movs	r3, #192	; 0xc0
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	23c0      	movs	r3, #192	; 0xc0
 8001f20:	025b      	lsls	r3, r3, #9
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d10b      	bne.n	8001f3e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f26:	4b58      	ldr	r3, [pc, #352]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	025b      	lsls	r3, r3, #9
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d040      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x5a8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d03c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0e6      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d01b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f46:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4a:	4b4f      	ldr	r3, [pc, #316]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0249      	lsls	r1, r1, #9
 8001f50:	430a      	orrs	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe fbd4 	bl	8000700 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f5e:	f7fe fbcf 	bl	8000700 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0cd      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f70:	4b45      	ldr	r3, [pc, #276]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x552>
 8001f7c:	e01b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f7e:	4b42      	ldr	r3, [pc, #264]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001f84:	4943      	ldr	r1, [pc, #268]	; (8002094 <HAL_RCC_OscConfig+0x688>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fbb9 	bl	8000700 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f94:	f7fe fbb4 	bl	8000700 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0b2      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x588>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fb4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5b4>
 8001fbe:	e0a4      	b.n	800210a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	220c      	movs	r2, #12
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d100      	bne.n	8001fce <HAL_RCC_OscConfig+0x5c2>
 8001fcc:	e078      	b.n	80020c0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d14c      	bne.n	8002070 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8001fdc:	492e      	ldr	r1, [pc, #184]	; (8002098 <HAL_RCC_OscConfig+0x68c>)
 8001fde:	400a      	ands	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fb8d 	bl	8000700 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fb88 	bl	8000700 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e086      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	049b      	lsls	r3, r3, #18
 8002006:	4013      	ands	r3, r2
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	220f      	movs	r2, #15
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_RCC_OscConfig+0x690>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	431a      	orrs	r2, r3
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0449      	lsls	r1, r1, #17
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe fb5b 	bl	8000700 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe fb56 	bl	8000700 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e054      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	049b      	lsls	r3, r3, #18
 800206a:	4013      	ands	r3, r2
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x644>
 800206e:	e04c      	b.n	800210a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_OscConfig+0x67c>)
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <HAL_RCC_OscConfig+0x68c>)
 8002078:	400a      	ands	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe fb40 	bl	8000700 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x6a6>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	40021000 	.word	0x40021000
 800208c:	00001388 	.word	0x00001388
 8002090:	efffffff 	.word	0xefffffff
 8002094:	fffeffff 	.word	0xfffeffff
 8002098:	feffffff 	.word	0xfeffffff
 800209c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe fb2e 	bl	8000700 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e02c      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x708>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	049b      	lsls	r3, r3, #18
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x694>
 80020be:	e024      	b.n	800210a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e01f      	b.n	800210c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_RCC_OscConfig+0x708>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_RCC_OscConfig+0x708>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	23c0      	movs	r3, #192	; 0xc0
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d10e      	bne.n	8002106 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	220f      	movs	r2, #15
 80020ec:	401a      	ands	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	23f0      	movs	r3, #240	; 0xf0
 80020fa:	039b      	lsls	r3, r3, #14
 80020fc:	401a      	ands	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b008      	add	sp, #32
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0bf      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	4013      	ands	r3, r2
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d911      	bls.n	800215e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b5e      	ldr	r3, [pc, #376]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	4393      	bics	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	4b5b      	ldr	r3, [pc, #364]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	4013      	ands	r3, r2
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0a6      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2202      	movs	r2, #2
 8002164:	4013      	ands	r3, r2
 8002166:	d015      	beq.n	8002194 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2204      	movs	r2, #4
 800216e:	4013      	ands	r3, r2
 8002170:	d006      	beq.n	8002180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002172:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002178:	21e0      	movs	r1, #224	; 0xe0
 800217a:	00c9      	lsls	r1, r1, #3
 800217c:	430a      	orrs	r2, r1
 800217e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	22f0      	movs	r2, #240	; 0xf0
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	d04c      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	d120      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e07a      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	049b      	lsls	r3, r3, #18
 80021c6:	4013      	ands	r3, r2
 80021c8:	d114      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06e      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	025b      	lsls	r3, r3, #9
 80021de:	4013      	ands	r3, r2
 80021e0:	d108      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e062      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e05b      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	4393      	bics	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe fa7a 	bl	8000700 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002210:	e009      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002212:	f7fe fa75 	bl	8000700 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_RCC_ClockConfig+0x1a4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e042      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	220c      	movs	r2, #12
 800222c:	401a      	ands	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1ec      	bne.n	8002212 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	4013      	ands	r3, r2
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d211      	bcs.n	800226a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x19c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e020      	b.n	80022ac <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2204      	movs	r2, #4
 8002270:	4013      	ands	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_RCC_ClockConfig+0x1a8>)
 800227a:	4013      	ands	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002288:	f000 f820 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800228c:	0001      	movs	r1, r0
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1a0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	220f      	movs	r2, #15
 8002296:	4013      	ands	r3, r2
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_RCC_ClockConfig+0x1ac>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	000a      	movs	r2, r1
 800229e:	40da      	lsrs	r2, r3
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1b0>)
 80022a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f7fe f9e5 	bl	8000674 <HAL_InitTick>
  
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	00001388 	.word	0x00001388
 80022c0:	fffff8ff 	.word	0xfffff8ff
 80022c4:	0800245c 	.word	0x0800245c
 80022c8:	20000000 	.word	0x20000000

080022cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b08f      	sub	sp, #60	; 0x3c
 80022d0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80022d2:	2314      	movs	r3, #20
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xec>)
 80022d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022da:	c313      	stmia	r3!, {r0, r1, r4}
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	4a36      	ldr	r2, [pc, #216]	; (80023bc <HAL_RCC_GetSysClockFreq+0xf0>)
 80022e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022e6:	c313      	stmia	r3!, {r0, r1, r4}
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f4:	2300      	movs	r3, #0
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	220c      	movs	r2, #12
 800230a:	4013      	ands	r3, r2
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d047      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0xd4>
 8002310:	d849      	bhi.n	80023a6 <HAL_RCC_GetSysClockFreq+0xda>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x50>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x56>
 800231a:	e044      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002320:	e044      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	220f      	movs	r2, #15
 8002328:	4013      	ands	r3, r2
 800232a:	2214      	movs	r2, #20
 800232c:	18ba      	adds	r2, r7, r2
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	220f      	movs	r2, #15
 8002338:	4013      	ands	r3, r2
 800233a:	1d3a      	adds	r2, r7, #4
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002342:	23c0      	movs	r3, #192	; 0xc0
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	401a      	ands	r2, r3
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	429a      	cmp	r2, r3
 800234e:	d109      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002352:	481c      	ldr	r0, [pc, #112]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002354:	f7fd fed6 	bl	8000104 <__udivsi3>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	4353      	muls	r3, r2
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
 8002362:	e01a      	b.n	800239a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	401a      	ands	r2, r3
 800236c:	23c0      	movs	r3, #192	; 0xc0
 800236e:	025b      	lsls	r3, r3, #9
 8002370:	429a      	cmp	r2, r3
 8002372:	d109      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002376:	4814      	ldr	r0, [pc, #80]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002378:	f7fd fec4 	bl	8000104 <__udivsi3>
 800237c:	0003      	movs	r3, r0
 800237e:	001a      	movs	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	4353      	muls	r3, r2
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
 8002386:	e008      	b.n	800239a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800238a:	480e      	ldr	r0, [pc, #56]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800238c:	f7fd feba 	bl	8000104 <__udivsi3>
 8002390:	0003      	movs	r3, r0
 8002392:	001a      	movs	r2, r3
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	4353      	muls	r3, r2
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800239e:	e005      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023a4:	e002      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b00f      	add	sp, #60	; 0x3c
 80023b4:	bd90      	pop	{r4, r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	0800243c 	.word	0x0800243c
 80023bc:	0800244c 	.word	0x0800244c
 80023c0:	40021000 	.word	0x40021000
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	02dc6c00 	.word	0x02dc6c00

080023cc <__libc_init_array>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	2600      	movs	r6, #0
 80023d0:	4d0c      	ldr	r5, [pc, #48]	; (8002404 <__libc_init_array+0x38>)
 80023d2:	4c0d      	ldr	r4, [pc, #52]	; (8002408 <__libc_init_array+0x3c>)
 80023d4:	1b64      	subs	r4, r4, r5
 80023d6:	10a4      	asrs	r4, r4, #2
 80023d8:	42a6      	cmp	r6, r4
 80023da:	d109      	bne.n	80023f0 <__libc_init_array+0x24>
 80023dc:	2600      	movs	r6, #0
 80023de:	f000 f821 	bl	8002424 <_init>
 80023e2:	4d0a      	ldr	r5, [pc, #40]	; (800240c <__libc_init_array+0x40>)
 80023e4:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <__libc_init_array+0x44>)
 80023e6:	1b64      	subs	r4, r4, r5
 80023e8:	10a4      	asrs	r4, r4, #2
 80023ea:	42a6      	cmp	r6, r4
 80023ec:	d105      	bne.n	80023fa <__libc_init_array+0x2e>
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
 80023f0:	00b3      	lsls	r3, r6, #2
 80023f2:	58eb      	ldr	r3, [r5, r3]
 80023f4:	4798      	blx	r3
 80023f6:	3601      	adds	r6, #1
 80023f8:	e7ee      	b.n	80023d8 <__libc_init_array+0xc>
 80023fa:	00b3      	lsls	r3, r6, #2
 80023fc:	58eb      	ldr	r3, [r5, r3]
 80023fe:	4798      	blx	r3
 8002400:	3601      	adds	r6, #1
 8002402:	e7f2      	b.n	80023ea <__libc_init_array+0x1e>
 8002404:	0800246c 	.word	0x0800246c
 8002408:	0800246c 	.word	0x0800246c
 800240c:	0800246c 	.word	0x0800246c
 8002410:	08002470 	.word	0x08002470

08002414 <memset>:
 8002414:	0003      	movs	r3, r0
 8002416:	1882      	adds	r2, r0, r2
 8002418:	4293      	cmp	r3, r2
 800241a:	d100      	bne.n	800241e <memset+0xa>
 800241c:	4770      	bx	lr
 800241e:	7019      	strb	r1, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	e7f9      	b.n	8002418 <memset+0x4>

08002424 <_init>:
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242a:	bc08      	pop	{r3}
 800242c:	469e      	mov	lr, r3
 800242e:	4770      	bx	lr

08002430 <_fini>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr
